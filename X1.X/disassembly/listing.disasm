Disassembly Listing for X1
Generated From:
E:/prog/X1/VectorPRG/X1.X/dist/default/debug/X1.X.debug.elf
28.06.2019 14:50:00

---  E:/prog/X1/VectorPRG/X1.X/X1Main.c  ----------------------------------------------------------------
1:                 /*
2:                  * File:   Main.c
3:                  * Author: tr
4:                  *
5:                  * Created on 24 ?????? 2013 ?., 21:48
6:                  */
7:                 
8:                 /******************************************************************************
9:                  * Software License Agreement
10:                 *
11:                 * Copyright ??? 2011 Microchip Technology Inc.  All rights reserved.
12:                 * Microchip licenses to you the right to use, modify, copy and distribute
13:                 * Software only when embedded on a Microchip microcontroller or digital
14:                 * signal controller, which is integrated into your product or third party
15:                 * product (pursuant to the sublicense terms in the accompanying license
16:                 * agreement).
17:                 *
18:                 * You should refer to the license agreement accompanying this Software
19:                 * for additional information regarding your rights and obligations.
20:                 *
21:                 * SOFTWARE AND DOCUMENTATION ARE PROVIDED ?¬AS IS?® WITHOUT WARRANTY OF ANY
22:                 * KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY
23:                 * OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR
24:                 * PURPOSE. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR
25:                 * OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION,
26:                 * BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT
27:                 * DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL,
28:                 * INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA,
29:                 * COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY
30:                 * CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF),
31:                 * OR OTHER SIMILAR COSTS.
32:                 *
33:                 *****************************************************************************/
34:                
35:                
36:                #if defined(__PIC24E__)
37:                #include <p24Exxxx.h>
38:                
39:                #elif defined (__PIC24F__)
40:                #include <p24Fxxxx.h>
41:                
42:                #elif defined(__PIC24H__)
43:                #include <p24Hxxxx.h>
44:                
45:                #elif defined(__dsPIC30F__)
46:                #include <p30Fxxxx.h>
47:                
48:                #elif defined (__dsPIC33E__)
49:                #include <p33Exxxx.h>
50:                
51:                #elif defined(__dsPIC33F__)
52:                #include <p33Fxxxx.h>
53:                
54:                #endif
55:                
56:                
57:                #include "Mn.h"
58:                #include <xc.h>
59:                
60:                #include <math.h>
61:                //#include <i2c.h>
62:                //#include "../dsPIC33E/inc/../h/../../peripheral_30F_24H_33F/i2c.h"
63:                
64:                /*
65:                int FGS __attribute__((space(prog), address(0xF80004))) = 0xFFCF;//FFFC ;
66:                 int FOSCSEL __attribute__((space(prog), address(0xF80006))) = 0xFF7B ;
67:                 int FOSC __attribute__((space(prog), address(0xF80008))) = 0xFFDE ;
68:                  int FWDT __attribute__((space(prog), address(0xF8000A))) = 0xFF66 ;//0xFFe6 ;
69:                 int FPOR __attribute__((space(prog), address(0xF8000C))) = 0xFFFF ;
70:                  int FICD __attribute__((space(prog), address(0xF8000E))) = 0xFFDB ;
71:                 int FAS __attribute__((space(prog), address(0xF80010))) = 0xFFCF;//FFFC ;
72:                */
73:                
74:                int FGS __attribute__((space(prog), address(0xF80004))) = 0xFFFD;
75:                //int FGS __attribute__((space(prog), address(0xF80004))) = 0xFFCF;
76:                #if defined INT_FRC
77:                 int FOSCSEL __attribute__((space(prog), address(0xF80006))) = 0xFF79;//0xFF7B ;
78:                #else
79:                 int FOSCSEL __attribute__((space(prog), address(0xF80006))) = 0xFF7B ;
80:                #endif
81:                 int FOSC __attribute__((space(prog), address(0xF80008))) = 0xff9a;//0xFFde ;
82:                  int FWDT __attribute__((space(prog), address(0xF8000A))) = 0xff7f;//0xFF66 ;
83:                 int FPOR __attribute__((space(prog), address(0xF8000C))) = 0xFFE7 ;//0xFFEF ;//
84:                  int FICD __attribute__((space(prog), address(0xF8000E))) = 0xffdB;//0xFFDB ;
85:                 int FAS __attribute__((space(prog), address(0xF80010))) = 0xFFCF;
86:                
87:                //#pragma config FSOSCEN = OFF
88:                
89:                
90:                
91:                /*
92:                
93:                
94:                // FGS
95:                #pragma config GWRP = OFF               // General Segment Write-Protect bit (General Segment may be written)
96:                #pragma config GSS = OFF                // General Segment Code-Protect bit (General Segment Code protect is disabled)
97:                #pragma config GSSK = OFF               // General Segment Key bits (General Segment Write Protection and Code Protection is Disabled)
98:                
99:                // FOSCSEL
100:               #pragma config FNOSC = PRIPLL           // Oscillator Source Selection bits (Primary Oscillator (XT, HS, EC) with PLL)
101:               #pragma config IESO = OFF               // Two-speed Oscillator Start-up Enable bit (Start up with user-selected oscillator source)
102:               
103:               // FOSC
104:               #pragma config POSCMD = HS              // Primary Oscillator Mode Select Bit (HS Crystal Oscillator Mode)
105:               #pragma config OSCIOFNC = OFF           // OSC2 Pin Function Bit (OSC2 is clock output)
106:               #pragma config IOL1WAY = OFF            // Peripheral pin select configuration (Allow multiple reconfigurations)
107:               #pragma config FCKSM = CSDCMD           // Clock Switching Mode bits (Both Clock switching and Fail-safe Clock Monitor are disabled)
108:               
109:               // FWDT
110:               #pragma config WDTPOST = PS32768        // Watchdog Timer Postscaler bits (1:32,768)
111:               #pragma config WDTPRE = PR128           // Watchdog Timer Prescaler bit (1:128)
112:               #pragma config PLLKEN = ON              // PLL Lock Wait Enable bit (Clock switch to PLL source will wait until the PLL lock signal is valid.)
113:               #pragma config WINDIS = OFF             // Watchdog Timer Window Enable bit (Watchdog Timer in Non-Window mode)
114:               #pragma config FWDTEN = OFF             // Watchdog Timer Enable bit (Watchdog timer enabled/disabled by user software)
115:               
116:               // FPOR
117:               #pragma config FPWRT = PWR128           // Power-on Reset Timer Value Select bits (128ms)
118:               #pragma config BOREN = ON               // Brown-out Reset (BOR) Detection Enable bit (BOR is enabled)
119:               #pragma config ALTI2C1 = OFF            // Alternate I2C pins for I2C1 (SDA1/SCK1 pins are selected as the I/O pins for I2C1)
120:               #pragma config ALTI2C2 = OFF            // Alternate I2C pins for I2C2 (I2C2 mapped to SDA2/SCL2 pins)
121:               
122:               // FICD
123:               #pragma config ICS = PGD1               // ICD Communication Channel Select bits (Communicate on PGEC1 and PGED1)
124:               #pragma config RSTPRI = PF              // Reset Target Vector Select bit (Device will obtain reset instruction from Primary flash)
125:               #pragma config JTAGEN = OFF             // JTAG Enable Bit (JTAG is disabled)
126:               
127:               // FAS
128:               #pragma config AWRP = OFF               // Auxiliary Segment Write-protect bit (Aux Flash may be written)
129:               #pragma config APL = OFF                // Auxiliary Segment Code-protect bit (Aux Flash Code protect is disabled)
130:               #pragma config APLK = OFF               // Auxiliary Segment Key bits (Aux Flash Write Protection and Code Protection is Disabled)
131:               
132:               */
133:               
134:               //const unsigned int ADC_MASK_CLKW[6]	=   {0x0002,0x0001,0x0004,0x0002,0x0001,0x0004};
135:               //const unsigned int ADC_XOR_CLKW[6]	=   {0x0000,0xFFFF,0x0000,0xFFFF,0x0000,0xFFFF};
136:               
137:               
138:               const unsigned int ADC_MASK_CLKW[6]	=   {0x0004,0x0001,0x0002,0x0002,0x0001,0x0004};
139:               const unsigned int ADC_XOR_CLKW[6]	=   {0x0000,0x0000,0xFFFF,0x0000,0xFFFF,0xFFFF};
140:               
141:               
142:               const unsigned char LowDrive[7]={   0b000,//empty
143:                                                   0b001,//1
144:                                                   0b010,//2
145:                                                   0b001,//3
146:                                                   0b100,//4
147:                                                   0b100,//5
148:                                                   0b010};//6
149:               
150:               const unsigned char HiDrive[7]={    0b000,//empty
151:                                                   0b010,//1
152:                                                   0b100,//2
153:                                                   0b100,//3
154:                                                   0b001,//4
155:                                                   0b010,//5
156:                                                   0b001};//6
157:               
158:               
159:               
160:               unsigned char tab_sinSQ[]=
161:               {0, 0, 0, 0, 0, 0, 0, 0,
162:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0,0,0,0,
163:               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
164:               0,0,0,0, 0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
165:               255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
166:               255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
167:               255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
168:               255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
169:               255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,
170:               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
171:               0,0,0,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
172:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
173:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
174:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
175:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
176:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
177:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
178:               
179:               const unsigned char tab_sin[]=
180:               {2, 6, 10, 15, 19, 23, 27, 31,
181:               35, 39, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 99,103,107,111,115,118,121,124,
182:               127,131,135,138,142,145,149,152,155,159,162,165,168,171,174,177,180,183,186,189,192,194,197,200,
183:               202,205,207,210, 212,214,217,219,221,223,225,227,229,231,232,234,236,237,239,240,242,243,244,245,
184:               247,248,249,250,250,251,252,253,253,254,254,255,255,255,255,255,255,255,255,255,255,255,254,254,
185:               253,253,252,252,251,250,249,248,247,246,245,244,242,241,240,238,237,235,233,232,230,228,226,224,
186:               222,222,225,226,228,230,232,234,235,237,238,240,241,243,244,245,246,247,248,249,250,251,252,252,
187:               253,254,254,254,255,255,255,255,255,255,255,255,255,255,254,254,254,253,252,252,251,250,249,248,
188:               247,246,245,244,243,241,240,238,237,235,234,232,230,228,227,225,223,220,218,216,214,212,209,207,
189:               204,202,199,197,194,191,188,185,183,180,177,174,171,167,164,161,158,154,151,148,144,141,137,134,
190:               130,127,123,119,116,112,108,104,101, 97, 93, 89, 85, 81, 77, 73, 69, 65, 61, 57, 53, 49, 45, 41,
191:               36, 32, 28, 24, 20, 16, 12, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
192:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
193:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
194:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
195:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
196:               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
197:               
198:               /*
199:               const int tab_sin_M[]=
200:               {2, 6, 10, 15, 19, 23, 27, 31,
201:               35, 39, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 99,103,107,111,115,118,121,124,
202:               127,131,135,138,142,145,149,152,155,159,162,165,168,171,174,177,180,183,186,189,192,194,197,200,
203:               202,205,207,210, 212,214,217,219,221,223,225,227,229,231,232,234,236,237,239,240,242,243,244,245,
204:               247,248,249,250,250,251,252,253,253,254,254,255,255,255,255,255,255,255,255,255,255,255,254,254,
205:               253,253,252,252,251,250,249,248,247,246,245,244,242,241,240,238,237,235,233,232,230,228,226,224,
206:               222,222,225,226,228,230,232,234,235,237,238,240,241,243,244,245,246,247,248,249,250,251,252,252,
207:               253,254,254,254,255,255,255,255,255,255,255,255,255,255,254,254,254,253,252,252,251,250,249,248,
208:               247,246,245,244,243,241,240,238,237,235,234,232,230,228,227,225,223,220,218,216,214,212,209,207,
209:               204,202,199,197,194,191,188,185,183,180,177,174,171,167,164,161,158,154,151,148,144,141,137,134,
210:               130,127,123,119,116,112,108,104,101, 97, 93, 89, 85, 81, 77, 73, 69, 65, 61, 57, 53, 49, 45, 41,
211:               36, 32, 28, 24, 20, 16, 12, 7, -2,-6,-10,-15,-19,-23,-27,-31,-35,-39,-44,-48,-52,-56,-60,-64,-68,
212:               -72,-76,-80,-84,-88,-92,-96,-99,-103,-107,-111,-115,-118,-121,-124,-127,-131,-135,-138,-142,-145,
213:               -149,-152,-155,-159,-162,-165,-168,-171,-174,-177,-180,-183,-186,-189,-192,-194,-197,-200,-202,
214:               -205,-207,-210,-212,-214,-217,-219,-221,-223,-225,-227,-229,-231,-232,-234,-236,-237,-239,-240,
215:               -242,-243,-244,-245,-247,-248,-249,-250,-250,-251,-252,-253,-253,-254,-254,-255,-255,-255,-255,
216:               -255,-255,-255,-255,-255,-255,-255,-254,-254,-253,-253,-252,-252,-251,-250,-249,-248,-247,-246,
217:               -245,-244,-242,-241,-240,-238,-237,-235,-233,-232,-230,-228,-226,-224,-222,-222,-225,-226,-228,
218:               -230,-232,-234,-235,-237,-238,-240,-241,-243,-244,-245,-246,-247,-248,-249,-250,-251,-252,-252,
219:               -253,-254,-254,-254,-255,-255,-255,-255,-255,-255,-255,-255,-255,-255,-254,-254,-254,-253,-252,
220:               -252,-251,-250,-249,-248,-247,-246,-245,-244,-243,-241,-240,-238,-237,-235,-234,-232,-230,-228,
221:               -227,-225,-223,-220,-218,-216,-214,-212,-209,-207,-204,-202,-199,-197,-194,-191,-188,-185,-183,
222:               -180,-177,-174,-171,-167,-164,-161,-158,-154,-151,-148,-144,-141,-137,-134,-130,-127,-123,-119,
223:               -116,-112,-108,-104,-101,-97,-93,-89,-85,-81,-77,-73,-69,-65,-61,-57,-53,-49,-45,-41,-36,-32,-28,
224:               -24,-20,-16,-12,-7};
225:               */
226:               
227:               const char tab_sin_M[]=
228:               {    
229:               
230:               
231:               -96,
232:               -93,
233:               -91,
234:               -89,
235:               -87,
236:               -85,
237:               -82,
238:               -80,
239:               -77,
240:               -75,
241:               -72,
242:               -70,
243:               -67,
244:               -64,
245:               -61,
246:               -58,
247:               -56,
248:               -53,
249:               -50,
250:               -47,
251:               -44,
252:               -40,
253:               -37,
254:               -34,
255:               -31,
256:               -27,
257:               -24,
258:               -21,
259:               -17,
260:               -14,
261:               -10,
262:               -7,
263:               
264:               -1,
265:               3,
266:               7,
267:               10,
268:               14,
269:               17,
270:               21,
271:               24,
272:               27,
273:               31,
274:               34,
275:               37,
276:               40,
277:               43,
278:               46,
279:               49,
280:               52,
281:               55,
282:               58,
283:               61,
284:               64,
285:               66,
286:               69,
287:               72,
288:               74,
289:               77,
290:               79,
291:               82,
292:               84,
293:               86,
294:               89,
295:               91,
296:                   
297:                   
298:                   
299:               93,
300:               95,
301:               97,
302:               99,
303:               101,
304:               103,
305:               104,
306:               106,
307:               108,
308:               109,
309:               111,
310:               112,
311:               114,
312:               115,
313:               116,
314:               117,
315:               119,
316:               120,
317:               121,
318:               122,
319:               122,
320:               123,
321:               124,
322:               125,
323:               125,
324:               126,
325:               126,
326:               127,
327:               127,
328:               127,
329:               127,
330:               127,
331:               127,
332:               127,
333:               127,
334:               127,
335:               127,
336:               127,
337:               126,
338:               126,
339:               125,
340:               125,
341:               124,
342:               124,
343:               123,
344:               122,
345:               121,
346:               120,
347:               119,
348:               118,
349:               117,
350:               116,
351:               114,
352:               113,
353:               112,
354:               110,
355:               109,
356:               107,
357:               105,
358:               104,
359:               102,
360:               100,
361:               98,
362:               96,
363:               94,
364:               94,
365:               97,
366:               98,
367:               100,
368:               102,
369:               104,
370:               106,
371:               107,
372:               109,
373:               110,
374:               112,
375:               113,
376:               115,
377:               116,
378:               117,
379:               118,
380:               119,
381:               120,
382:               121,
383:               122,
384:               123,
385:               124,
386:               124,
387:               125,
388:               126,
389:               126,
390:               126,
391:               127,
392:               127,
393:               127,
394:               127,
395:               127,
396:               127,
397:               127,
398:               127,
399:               127,
400:               127,
401:               126,
402:               126,
403:               126,
404:               125,
405:               124,
406:               124,
407:               123,
408:               122,
409:               121,
410:               120,
411:               119,
412:               118,
413:               117,
414:               116,
415:               115,
416:               113,
417:               112,
418:               110,
419:               109,
420:               107,
421:               106,
422:               104,
423:               102,
424:               100,
425:               99,
426:               97,
427:               95,
428:               92,
429:               90,
430:               88,
431:               86,
432:               84,
433:               81,
434:               79,
435:               76,
436:               74,
437:               71,
438:               69,
439:               66,
440:               63,
441:               60,
442:               57,
443:               55,
444:               52,
445:               49,
446:               46,
447:               43,
448:               39,
449:               36,
450:               33,
451:               30,
452:               26,
453:               23,
454:               20,
455:               16,
456:               13,
457:               9,
458:               6,
459:               -1,
460:               -4,
461:               -8,
462:               -11,
463:               -15,
464:               -18,
465:               -22,
466:               -25,
467:               -28,
468:               -32,
469:               -35,
470:               -38,
471:               -41,
472:               -44,
473:               -47,
474:               -50,
475:               -53,
476:               -56,
477:               -59,
478:               -62,
479:               -65,
480:               -67,
481:               -70,
482:               -73,
483:               -75,
484:               -78,
485:               -80,
486:               -83,
487:               -85,
488:               -87,
489:               -90,
490:               -92,
491:               -94,
492:               -96,
493:               -98,
494:               -100,
495:               -102,
496:               -104,
497:               -105,
498:               -107,
499:               -109,
500:               -110,
501:               -112,
502:               -113,
503:               -115,
504:               -116,
505:               -117,
506:               -118,
507:               -120,
508:               -121,
509:               -122,
510:               -123,
511:               -123,
512:               -124,
513:               -125,
514:               -126,
515:               -126,
516:               -127,
517:               -127,
518:               -128,
519:               -128,
520:               -128,
521:               -128,
522:               -128,
523:               -128,
524:               -128,
525:               -128,
526:               -128,
527:               -128,
528:               -128,
529:               -127,
530:               -127,
531:               -126,
532:               -126,
533:               -125,
534:               -125,
535:               -124,
536:               -123,
537:               -122,
538:               -121,
539:               -120,
540:               -119,
541:               -118,
542:               -117,
543:               -115,
544:               -114,
545:               -113,
546:               -111,
547:               -110,
548:               -108,
549:               -106,
550:               -105,
551:               -103,
552:               -101,
553:               -99,
554:               -97,
555:               -95,
556:               -95,
557:               -98,
558:               -99,
559:               -101,
560:               -103,
561:               -105,
562:               -107,
563:               -108,
564:               -110,
565:               -111,
566:               -113,
567:               -114,
568:               -116,
569:               -117,
570:               -118,
571:               -119,
572:               -120,
573:               -121,
574:               -122,
575:               -123,
576:               -124,
577:               -125,
578:               -125,
579:               -126,
580:               -127,
581:               -127,
582:               -127,
583:               -128,
584:               -128,
585:               -128,
586:               -128,
587:               -128,
588:               -128,
589:               -128,
590:               -128,
591:               -128,
592:               -128,
593:               -127,
594:               -127,
595:               -127,
596:               -126,
597:               -125,
598:               -125,
599:               -124,
600:               -123,
601:               -122,
602:               -121,
603:               -120,
604:               -119,
605:               -118,
606:               -117,
607:               -116,
608:               -114,
609:               -113,
610:               -111,
611:               -110,
612:               -108,
613:               -107,
614:               -105,
615:               -103,
616:               -101,
617:               -100,
618:               -98
619:                   
620:                    
621:                   
622:                   
623:               };
624:               unsigned int ADC_MASK[6],ADC_XOR[6],ADC_BEMF_FILTER[64],SensorlessSpdChngCnt,SensorlessSpdChngCntConst;
625:               
626:               const unsigned char ADC_BEMF_FILTER_CLKW[64]=
627:               									{0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x10,0x12,0x14,0x16,0x18,0x1A,0x1C,0x1E,
628:               									 0x20,0x22,0x24,0x26,0x28,0x2A,0x2C,0x2E,0x01,0x01,0x01,0x36,0x01,0x3A,0x3C,0x3E,
629:               									 0x00,0x02,0x04,0x06,0x08,0x0A,0x0C,0x0E,0x01,0x01,0x01,0x16,0x01,0x1A,0x1C,0x1E,
630:               									 0x01,0x01,0x01,0x26,0x01,0x2A,0x2C,0x2E,0x01,0x01,0x01,0x36,0x01,0x3A,0x3C,0x3E};
631:               
632:               /*unsigned int config2=170, config1 = (I2C1_ON & I2C1_IDLE_STOP & I2C1_CLK_HLD &
633:               
634:                            I2C1_IPMI_DIS & I2C1_7BIT_ADD &
635:               
636:                            I2C1_SLW_DIS & I2C1_SM_DIS &
637:               
638:                            I2C1_GCALL_DIS & I2C1_STR_DIS &
639:               
640:                            I2C1_NACK & I2C1_ACK_DIS & I2C1_RCV_DIS &
641:               
642:                            I2C1_STOP_DIS & I2C1_RESTART_DIS &
643:               
644:                            I2C1_START_DIS);
645:               */
646:               
647:               void SensorlessInit(void);
648:               
649:               void SetStartingProfile3PsnBtn(void);
650:               void ResetMPU6000(void);
651:               void MPU60000Init(void);
652:               
653:               
654:               void VectorInit(void);
655:               void T4_5Init(void);
656:               void T6_7Init(void);
657:               
658:               void T8Init(void);
659:               void TrapeziumInit(void);
660:               void UBT_To_V(void);
661:               
662:               
663:               
664:               void ReadMPU6050(unsigned char Addr, unsigned char N);
665:               void ResetPIN_HC05(void);
666:               void PID_OnOff_Func(void);
667:               
668:               
669:               void SVPWM1(void);
670:               void SetPWM1_SV(void);
671:               void SVPWM1_SetPWM(void);
672:               void InitPWM_Vector(void);
673:               unsigned char ReadSensor1_B_V(void);
674:               unsigned char ReadSensor1_F_V(void);
675:               
676:               void SetHallDelay1_F_UP(void);
677:               void SetHallDelay1_B_UP(void);
678:               void SndPhDeb200(void);
679:               void SndPhDeb400(void);
680:               void SetPWM_ChagerViaMotor();
681:               void CriticalErrorLed(void);
682:               void WheelingFunc(void);
683:               
684:               void WriteMPU6050(unsigned char Addr, unsigned char N, unsigned char *Mass);
685:               void writeByte(unsigned char ADDR, unsigned char Data);
686:               unsigned char readByte(unsigned char ADDR);
687:               
688:               
689:               void AutoNastroykaCMFStart(unsigned int AutoNastroykaStateFin);
690:               
691:               void SndNeutralDeb200(void);
692:               void SndNeutralDeb400(void);
693:               void CmdSendUnlockMSG (void);
694:               
695:               int MaxSpdCoeff,TemperatureMPU6000;
696:               unsigned int Theta1Cnt=10,Theta2Cnt=10,Theta1CntPWM,Theta2CntPWM,CntHvZ_Cr,SpeedControlPIDOffCnt;
697:               unsigned char Sensor1_Prev_OP,SensorDl_1,CntAcqSensor,CntBEMF,CntBEMFMax,TemperatureTYPE;
698:               
699:               unsigned int BackwardCnt,SV_PWM1_0,SV_PWM1_1,SV_PWM1_2,Khard;
700:               float Crr1Corr;
701:               
702:               char HallDelay1_F=0,HallDelay1_B=0;
703:               char HallDelay1_FMustBe,HallDelay1_BMustBe,HallDelay1_FMustBeTemp,HallDelay1_BMustBeTemp;
704:               long int Phase1Period1,Phase1Period2,Phase1PeriodPrev,Phase1PeriodTek,TMR7Sensorless;
705:               unsigned long int Phase1PeriodMass[PhasePERMASS_DEF],Phase1PeriodSumm;
706:               
707:               unsigned long int PhP1,PhP2,PhP3,PhP4,PhP5,PhP6;
708:               
709:               void DefaultProfileOptions(void);
710:               float GetTemperaturePTC_KTY81_210_FETs(unsigned int ResTemp);
711:               
712:               float ButtonBreakOnlyTimeAdd;
713:               
714:               
715:               //unsigned char Sensor1_PrevAfterSND,Sensor1Snd,Sensor1_PrevSND,Sensor1BeforeReadSnd;;
716:               unsigned char Sensor1,Sensor1_Prev,Sensor1_PrevSensorless,T3Cnt=4,SensOrder1,Sounds,SoundNum;
717:               unsigned char Sensor2,Sensor2_Prev,SpdKpMax,BMS_L;
718:               int PWM1,PWMNastr,PWM1Show,PWM1Prev,PWM1_Mem,MAX_PWM_CONST,MAX_PWM=MAX_PWM_CONST_MONOCYCLE,SenosrlessPWM1,SenosrlessPWM1_1Const,SenosrlessPWM1_2Const,PWM1_SIN_TST=70,DIRPWM1_TstKeys;
719:               unsigned int CntUDPFill,CntUDPFillConst,SpeedLmt,ADCThrottle,ADCThroottleZero,CntCalibrateCurr,PR2Cnt,PR8Cnt,BuzzerOnTimeConst,BuzzerOffTimeConst,BuzzerOnTime,BuzzerOffTime,ADCThrottleBreak,GazImm;
720:               unsigned int CntMigStop,CntMigStopConst=15;
721:               long int ADCThrottleSumm,ADCThrottleBreakSumm;
722:               int JoystickCalibrX,JoystickCalibrY;
723:               int SensorThresholdDn,SensorThresholdUp,BreakThreshold,KFirstBreak;
724:               int BreakThresholdUp,BreakThresholdDn,BreakThresholdDnTmp,SensorThresholdDnTmp;
725:               int Curr1,Curr1_int,PhaseCurr,Crr1,ZeroCurr1,AccXAvRes,AccYAvRes,AccZAvRes;
726:               long int ZeroCurr1Summ;
727:               int TiltX,TiltY,TiltYRes,TiltXRes,TiltYResShow;
728:               FLAGS Flgs,Flgs1,Flgs2,Flgs3,Flgs4,Flgs5,Flgs6,Flgs7,FlgsErr,Flgs1Err,Flgs2Err;
729:               STAT_FLAGS StatFlgs,StatFlgs1,StatFlgs2,StatFlgs3,StatFlgs4;
730:               
731:               unsigned char T3Cnt1=4,CurrentMaxCurrentOnly;
732:               float CurrA,CurrC,Curr1Show,CurrUstCurrentOnly;
733:               
734:               void Spd0TimerStateMachine(void);
735:               float Throttle,KThrottle,KpAddSpd,KpKpSpd,K_HallDelay,DeltaDelay;
736:               float E_PWM_Mode,PWM_Mode_Target,ESumm_PWM_Mode,Ep_PWM_Mode;
737:               int StartRotQuantum,KRotQuantum;
738:               unsigned int MAX_PWM_MEM,MAX_PWM_MEM_WORK,MAX_PWM_Revers,MAX_PWM_MustBe,CurrProtectSoundCnt,SpdStartLevel;
739:               
740:               unsigned long int CntSamples,PhaseCnt1,PhaseCnt2,Amplitude1,Amplitude2;
741:               float Ep,Ed,Ei,Kp,Kd=0,Ki,KiMustBe,KiNoMan,KiWheelingMem,ESumm,E,KpMustBe,KpNoMan,KdMustBe,KdNoMan,KdOneTwoLeg,EPrev;;
742:               float KpRot,KpRotMustBe,KdRot,KiRot,KiRotMustBe,KpMax;
743:               float KpWheelingMem;
744:               
745:               unsigned char TestSIN_Ok_Mass[12][2],TestSINOkMassCnt,TestCWCntMass;
746:               long int CurrSinTSTMass[12],CurrMinSinTST;
747:               
748:               long int GyroZFilter;
749:               unsigned char Theta1Zero,Theta2Zero,HallDelayCnt_1,HallDelayCnt_2,Theta1CntPWMSND,Theta2CntPWMSND;
750:               unsigned char _3psnSwitchBtNotPressed,_3psnSwitchBt3,_3psnSwitchBt4,CriticalError,OrderCnt;
751:               
752:               
753:               unsigned char BtRcPrev_U3,CntRec_U3,SensorllessSpdThreshold;
754:               unsigned char PacketTrm_U3[40];
755:               unsigned char PacketRec_U3[30];
756:               
757:               unsigned char BtRcPrev_U4,CntRec_U4,StateOdm=1,NextHallClbr,CntCalibrHalls;
758:               
759:               char HallDelayMem1_F,HallDelayMem1_B;
760:               
761:               
762:               void FillPINResetMass(void);
763:               void StateMachinePID(void);
764:               
765:               
766:               unsigned int CntUDPTrm,TmrOdmtrWrCnt,SensorLessOnCnt;
767:               int GyroAv[257];
768:               int TiltAv[MAX_TiltYAV];
769:               unsigned char P_U,I_U;
770:               float P_Curr,I_Curr;
771:               int CurrA_P_Av,CurrA_N_Av,CurrC_P_Av,CurrC_N_Av;
772:               
773:               
774:               float EChagerCurrSumm,EChagerUSumm;
775:               
776:               long int GyroYAv;
777:               int RotAddP,RotAddD,RotAddI,RotAdd,MPU6050_TimeOut,BigCurrent,ChagerCurr;
778:               long TiltYAv;
779:               
780:               unsigned char ErrorCode,StartCnt,NoBalanceCode;
781:               unsigned char TiltTimoutCnt,TiltTimoutConst,MPU6050Mass[100],PinCodeMass[28],PinCodeMassOptions[6],PinCodeMassOptionsUnlock[6];
782:               
783:               UINT8 Acc_txBuf[30],Acc_rxBuf[30];
784:               unsigned int SPIAccbyteCount,SPIRxCnt,CntAutoNastroykaState257;
785:               int AccX,AccY,AccZ;
786:               
787:               int AccXFl,AccYFl,AccZFl;
788:               int _5V,_3V,CurrA_P,CurrA_N,CurrC_P,CurrC_N,_12V;
789:               long int CurrA_P_Summ,CurrA_N_Summ,CurrC_P_Summ,CurrC_N_Summ;
790:               
791:               unsigned char CntRecAcc;
792:               
793:               UINT8 Gyro_txBuf[30],Gyro_rxBuf[30];
794:               unsigned int SPIGyrobyteCount,SPIRxGyroCnt,PR8Temp,PR2Temp;
795:               int GyroX,GyroVert_Steer,GyroY,GyroZ;
796:               float GyroXFl,GyroYFl,GyroZFl,EPID_Res,EPID_ResTmp;
797:               unsigned char CntRecGyro,MI2C1Interrupt_TimeOut;
798:               unsigned int CurrLimit,CurrLimitWork,SensorLessCurrLimit,CntTestingSinDelay;
799:               unsigned char PhasePERMASS,PhasePERMASS_SHFT,adcBackEMFFilter,MPU6050ReadStateMachine;
800:               
801:               
802:               #define MassTMPSIZE 1000
803:               unsigned char Sensor1_Prev_Const=1,CntZero,CntZeroConst=5,ChangeCurrStateMachine;
804:               unsigned int MassTMPPhase[MassTMPSIZE],MassTMPNeutral[MassTMPSIZE],CntPhase=0;
805:               float _3VFl,_5VFl,_12VFl;
806:               
807:               unsigned char TrmMass_U3[255];
808:               
809:               unsigned char  _SELF_TEST_X,_SELF_TEST_Y,_SELF_TEST_Z,_SELF_TEST_A,_SMPLRT_DIV,_CONFIG,_GYRO_CONFIG,_ACCEL_CONFIG,_FIFO_EN,
810:                   _I2C_MST_CTRL,_I2C_SLV0_ADDR,_I2C_SLV0_REG,_I2C_SLV0_CTRL,_I2C_SLV1_ADDR,_I2C_SLV1_REG,_I2C_SLV1_CTRL,_I2C_SLV2_ADDR,
811:                   _I2C_SLV2_REG,_I2C_SLV2_CTRL,_I2C_SLV3_ADDR,_I2C_SLV3_REG,_I2C_SLV3_CTRL,_I2C_SLV4_ADDR,_I2C_SLV4_REG,_I2C_SLV4_DO,
812:                   _I2C_SLV4_CTRL,_I2C_SLV4_DI,_I2C_MST_STATUS,_INT_PIN_CFG,_INT_ENABLE,_INT_STATUS,_ACCEL_XOUT_H,_ACCEL_XOUT_L,
813:                   _ACCEL_YOUT_H,_ACCEL_YOUT_L,_ACCEL_ZOUT_H,_ACCEL_ZOUT_L,_TEMP_OUT_H,_TEMP_OUT_L,_GYRO_XOUT_H,_GYRO_XOUT_L,_GYRO_YOUT_H,
814:                   _GYRO_YOUT_L,_GYRO_ZOUT_H,_GYRO_ZOUT_L,_EXT_SENS_DATA_00,_I2C_SLV0_DO,_I2C_SLV1_DO,_I2C_SLV2_DO,_I2C_SLV3_DO,
815:                   _I2C_MST_DELAY_CTRL,_SIGNAL_PATH_RESET,_USER_CTRL,_PWR_MGMT_1,_PWR_MGMT_2,_FIFO_COUNTH,_FIFO_COUNTL,_FIFO_R_W,_WHO_AM_I;
816:               
817:               
818:               
819:               BYTE 	RecBytes[254];
820:               
821:               
822:               
823:               //	Function Prototypes
824:               void SegMain(void);
825:               void OSC_Init(void);
826:               void InitSegAll(void);
827:               void InitPorts(void);
828:               void T3Init(void);
829:               void InitBLDCPorts(void);
830:               void InitPWM(void);
831:               void WF_GyroSpiEnableChipSelect(void);
832:               void WF_GyroSpiDisableChipSelect(void);
833:               void GyroWFSpiTxRx(UINT8   *p_txBuf,UINT16  txLen,UINT8   *p_rxBuf,UINT16  rxLen);
834:               void TxRxSPI_TST(void);
835:               
836:               void SendOptions(void);
837:               
838:               void Phases1(void);
839:               void Phases2(void);
840:               unsigned char ReadSensor1_F(void);
841:               unsigned char ReadSensor2_F(void);
842:               unsigned char ReadSensor1_B(void);
843:               unsigned char ReadSensor2_B(void);
844:               void ChangePWM1(unsigned int PWM);
845:               void TrmControls_U3 (void);
846:               
847:               void ChangeProfile(void);
848:               
849:               void InitPort_U3(void);
850:               void UARTInit_U3(void);
851:               unsigned char CalcCheckSumm(unsigned int N, unsigned char *Mass);
852:               void InitOC4(void);
853:               void InitOC1(void);
854:               void InitOC2(void);
855:               void InitOC3(void);
856:               
857:               void AutoNastroyka_Func(void);
858:               
859:               
860:               void TxRxSPI_ACC(unsigned int rxLen);
861:               void InitAccSPI(void);
862:               void WF_SpiAccDisableChipSelect(void);
863:               void WF_SpiAccEnableChipSelect(void);
864:               
865:               
866:               void TxRxSPI_GYRO(unsigned int rxLen);
867:               void InitGyroSPI(void);
868:               void WF_SpiGyroDisableChipSelect(void);
869:               void WF_SpiGyroEnableChipSelect(void);
870:               
871:               //float RotX,RotY;
872:               float AccXFlPrev,AccYFlPrev,AccZFlPrev;
873:               float XNew,YNew,ZNew;
874:               float AlfaXRes,AlfaYRes,AlfaZRes,AlfaXResPrev,AlfaYResPrev,AlfaZResPrev;
875:               
876:               float AlfaXNoGyro,AlfaYNoGyro,AlfaYNoGyro3d,PWMAdd,AddX;
877:               int TiltXThis,TiltYThis,TiltYThis3d,AlfaXResTmpAlm,AlfaYResTmpAlm,AlfaZResTmpAlm,AlfaXResAlmMem,AlfaYResAlmMem,AlfaZResAlmMem;
878:               long CalibrX,CalibrY,CalibrZ,CalibrCnt,TiltYSumm,CntTiltYSumm;
879:               
880:               
881:               int StartRot,KRot,KRotMustBe,MaxSpeed,StartRotMustBe,StartRotNoMan;
882:               float ECurrChager,EpCurrChager,EiCurrChager;
883:               
884:               
885:               int CalibrationGyroX,CalibrationGyroY,CalibrationGyroZ;
886:               int CalibrationAccX,CalibrationAccY,CalibrationAccZ;
887:               unsigned int SlaveADCThrottle,SlaveADCThrottleBreak;            
888:               
889:               float TiltZad,TiltZadAdd,TiltZadTmp,TiltChng,TiltZadAddMustBe,TiltZadState5,TiltZadWheeling,SpdStartLevelFl;
890:               unsigned int K_PWM_Nastr=200;
891:               float StrongModeSpdFilterOff;
892:               unsigned char StrongModeSpdFilterOffMem,MixedMode2StateMachine;
893:               
894:               
895:               void SoundNoBMS(void);
896:               void SensorlessManualStartInit(void);
897:               void U4_9600_On(void);
898:               
899:               void PI_Chager(void);
900:               void PhaseToPC(void);
901:               void InitFlash(void);
902:               unsigned char TrmRecByteFLASH(unsigned char Bt);
903:               unsigned char RecStatusFLASH(void);
904:               unsigned char ReadFlash(unsigned long int Addr,unsigned int N,unsigned char * Mass);
905:               void WriteOdometr(void);
906:               void WREN_FLASH(void);
907:               void WriteByte_FLASH(unsigned long int Addr, unsigned char Bt);
908:               void WriteStat_FLASH(unsigned char St);
909:               void EraseSector_FLASH(unsigned long int Addr);
910:               void WriteOptions(void);
911:               void DefaultOptions(void);
912:               unsigned char ReadOptions(void);
913:               unsigned char ReadOptions1(void);
914:               void MassToOptions(void);
915:               void MassToOptions2(void);
916:               void OptionsToMass(void);
917:               void OptionsToMass2(void);
918:               unsigned char FlashMass[FLASHMASS_SIZE];
919:               unsigned char FlashMass1[FLASHMASS_SIZE];
920:               unsigned char FlashMass2[FLASHMASS_SIZE];
921:               unsigned char AutoNastrConfirmWait(void);
922:               
923:               
924:               unsigned char ProfileMass[PROFILEMASS_SIZE];
925:               unsigned char ProfileMass1[PROFILEMASS_SIZE];
926:               long int Curr1SinTSTSumm,Curr1SnTST,Curr1SnTST_0;
927:               
928:               void BzFuncOn(void);
929:               void ChangeCurr(void);
930:               
931:               unsigned int ThetaIndex,ThetaIndexPrev,AutoNastroyka_ConfirmDelayCnt,Hv2WDMasterCnt=1;
932:               unsigned char CntCriticalErrorLed,CriticalErrorLedStateMachine,KeyLightBrightness;
933:               unsigned int MODE_LED_Cnt;
934:               
935:               unsigned char StatusFlash,ThetaSector,ThetaSectorPrev,UBT_V,TemperatureTYPE_FETs,TstPhase;
936:               float KGYRO,KACC;
937:               float CmImp1_t,ImpToKmH1_t;
938:               
939:               
940:               unsigned long int UBat;
941:               unsigned int UBT,UBTNoRegen,SensorlessCntAlign,SensorlessCntAlignConst,MustResetPINCnt,CntU3Off;
942:               
943:               int SensorLessTimerConstMin;
944:               unsigned int _1sCnt1,_1sCntConst,SpdRstSpeedLim,CntZeroThroottle;
945:               int Spd1Res,Spd1KpLevel=1000,Spd1ResPrev,SpdPID,Spd1ResPlus,Spd1Cnt,SpdTmp;
946:               float Spd1UST,Spd1UST_Tmp,Spd1USTKMH,MixedModeSlowSpeedFl;
947:               
948:               void ADC1Init(void);
949:               void ADC2Init(void);
950:               long int AccXFilter,AccYFilter,AccZFilter,KFilterPrev,KFilter;
951:               long int GZFTempPrev;
952:               
953:               void T5Init(void);
954:               void T7Init(void);
955:               void T9Init(void);
956:               void Comparator3_Init(void);
957:               void Comparator2_Init(void);
958:               void ChangeCVR(void);
959:               
960:               
961:               unsigned int BzOnCntSeriaConst,BzOnCntSeriaConstAlm,ResetPassWordCnt=15000,ButtonBreakOnlyPWM;
962:               unsigned int RegenOffMem,RegenOff;
963:               
964:               
965:               unsigned char SpeedLimit2,SpeedLimit3,NumSpeedLimit,SpeedLimitSt4,SpeedLimitTmp,MPU6050Err;
966:               unsigned int KpSPD,KdSPD,KiSPD,SpeedLimit1,KpSPDMove,KpSPDMustBe;
967:               unsigned char MPU6050Addr,MPU6050Cnt,MPU6050CntMax,TestSIN_OkCnt,WheelingStateMachine;
968:               float EUChager,EiUChager;
969:               
970:               
971:               
972:               float CurrPerDigit = 1;
973:               
974:               
975:               
976:               
977:               unsigned long int ESummSpd;
978:               long int ESpdLim;
979:               int AngleLimit,SpdLimImp,AngleLimitMustBe,AngleLimitMove,JoistickDeadZone,ThrottleLevelUpOff;
980:               float Ki_PWM_Mode,Ki_PWM_ModeOff;
981:               unsigned char ErrOptions,Spd0TimerStateMachineCnt;
982:               
983:               //int GyroXInd,GyroYInd,GyroZInd,AccXInd,AccYInd,AccZInd;
984:               
985:               
986:               int XLimit,YLimit,GyroZFlTurn;
987:               unsigned int UBatLow,UBtLim1,UBtLim2,UBatHiMem,UBatHi,LightSensor;
988:               unsigned long int Odometr,PhasesCnt2;
989:               
990:               unsigned char OdometrCnt,SensorBEMF;
991:               
992:               unsigned int TemperatureCnt,StartingMoveCnt,Odometr10m,CntCanZeroCrossing,ButtonBreakOnlyTime;
993:               char Temperature;
994:               unsigned long int OdometrSectorNum,OdometrSectorNumConst;
995:               
996:               void ReadOdometr(void);
997:               void WriteOdometrNew(void);
998:               void writeByteLSM6DS33(unsigned char ADDR, unsigned char Data);
999:               void readBytesLSM6DS33(unsigned char ADDR,unsigned char N);
1000:              unsigned char readByteLSM6DS33(unsigned char ADDR);
1001:              
1002:              
1003:              
1004:              
1005:              void WrOdmtr(void);
1006:              
1007:              unsigned char LightMode,BuzzerOnEvent;
1008:              unsigned int LightSensorThresholdLo,LightSensorThresholdHi;
1009:              
1010:              //float  PWMBackTilt;
1011:              
1012:              unsigned char Bt1Cnt,Bt2Cnt,Bt3Cnt,Bt4Cnt,Bt1CntConst,Bt2CntConst,Bt3CntConst,Bt4CntConst;
1013:              unsigned int Bt1LongCnt,Bt2LongCnt,Bt3LongCnt,Bt4LongCnt,BtBLongCnt,BeepPause,TimerRegenOff;
1014:              void Buttons(void);
1015:              void ButtonsSlave(void);
1016:              
1017:              unsigned char CntSingleBeepAlm,StringPINLenght,StringPINLenghtOptions,StringPINLenghtOptionsUnlock;
1018:              unsigned int BeepPauseConstAlm;
1019:              
1020:              void OptionsToMassProfile(void);
1021:              void MassToOptionsProfile(void);
1022:              
1023:              void Bt1Process(void);
1024:              void Bt2Process(void);
1025:              void Bt3Process(void);
1026:              void Bt4Process(void);
1027:              
1028:              void writeFlash(void);
1029:              void SensorlessMotorStopStarting(void);
1030:              
1031:              
1032:              float AlfaXResErr,AlfaYResErr,SteerXErr,SteerYErr,CurrentMaxCurrentOnlyWork;
1033:              
1034:              void WriteErrors(void);
1035:              void ReadErrors(void);
1036:              
1037:              unsigned char CntNoBalance,MaxSpd,MaxSpdRevers,CurrSensor,OK_Cnt,_2WDMode;
1038:              long int GZFTemp;
1039:              
1040:              
1041:              void InitPort_U4(void);
1042:              void UARTInit_U4(void);
1043:              void TrmHC05(unsigned char *Mass);
1044:              void TrmHC05_AT(char *Mass,int N);
1045:              void CloseU4(void);
1046:              unsigned char HC05TrmMass[FLASHMASS_SIZE+10];
1047:              
1048:              
1049:              unsigned char CntTrmHC05,CntRecHC05,StateSensorlessMotorStart;
1050:              int CntTrmHC05_N;
1051:              
1052:              char TrmMassHC05[100];
1053:              char RecMassHC05[100];
1054:              unsigned int MyTimeOut;
1055:              
1056:              char ThrottleTmpChngMem;
1057:              
1058:              void TrmDataPacketHC05(void);
1059:              void TrmFlashMass(void);
1060:              void TrmFlashMass2(void);
1061:              
1062:              
1063:              long int AlfaYResPrevAv;
1064:              int AlfaYResPrevAvMass[256];
1065:              unsigned char CntTiltAv,CntDiffTiltLimit,CntCalibrateJOYSTICK;
1066:              int mt;
1067:              
1068:              int DiffBetweenTilts,TiltSensorAdd,TiltDiff,CntAdd;
1069:              float AddTilt,AddTiltLimit,KpKpMustBe,KpKp,Kp_p,KpK;
1070:              void ClbrJOYSTICK(void);
1071:              
1072:              int LastMainTiltAngleMnErr,LastSteerTiltAngleMnErr,TiltAngleAvMnErr;
1073:              int LastMainTiltAngleSteerErr,LastSteerTiltAngleSteerErr,TiltAngleAvSteerErr;
1074:              unsigned char MainTiltNumErr,SteerTiltNumErr;
1075:              void TrmErrorsHC05(void);
1076:              unsigned int TiltControlCnt=2000;
1077:              unsigned int CntU4TimeOut=100,HallErrCnt;
1078:              
1079:              
1080:              
1081:              
1082:              unsigned int Preas1DnCnt=100,Preas1UpCnt=200,PhasesPerRev1=100,Diametr1=200;
1083:              unsigned int Preas2DnCnt=100,Preas2UpCnt=200;
1084:              void SetTiltZadAdd_UP(void);
1085:              void SetKpMustBe_UP(void);
1086:              void SetStartRot_UP(void);
1087:              void StateMashine(void);
1088:              
1089:              void SendStateOfSinTest(void);
1090:              void LighrSensorFunc(void);
1091:              
1092:              void SetKiRot_UP(void);
1093:              void SetKpRot_UP(void);
1094:              void SetKRot_UP(void);
1095:              void SetKi_UP(void);
1096:              void SetKd_UP(void);
1097:              
1098:              float KpRotOneTwoLeg,KiRotOneTwoLeg;
1099:              unsigned char ThetaMass[6],ThetaIDX;
1100:              int Curr1SinTST[256],Curr1SinTSTCnt,PhaseCurrShow;
1101:              
1102:              unsigned char State=1,MixedModeSlowSpeed;
1103:              float Kp_PWM_Mode;
1104:              int StartRotOneTwoLeg_1;
1105:              
1106:              float KTemperatureSPDControl;
1107:              int CurrPhaseLimitSpd0,StartRotFreshmanL;
1108:              unsigned int TimeOutHC05=500,Spd0TimerConst=250,Spd0Timer;
1109:              unsigned int CurrLimitSpd0;
1110:              unsigned char MaxAngleStopBreak;
1111:              void RecSlave2WDControls(void);
1112:              void LSM6DS33_Init(void);
1113:              
1114:              
1115:              
1116:              void SetKpSPD_UP(void);
1117:              void SetAngleLimit_UP(void);
1118:              
1119:              void AlmOn(void);
1120:              void AlmOff(void);
1121:              void Alm(void);
1122:              
1123:              unsigned char DiffAlfaConstL,DiffAlfaConstH;
1124:              unsigned int CntHorningL;
1125:              
1126:              
1127:              void Rbw(void);
1128:              void SetPIN_HC05(void);
1129:              void GetRbw(void);
1130:              
1131:              void CalibrateCurr(void);
1132:              
1133:              unsigned long int CurrTuda1,CurrRegen1,CurrTuda2,CurrRegen2,Distance;
1134:              
1135:              unsigned int CntCurr=500;
1136:              unsigned int CntWriteCurr=200;
1137:              unsigned int CNT_U,CNT_U_Bits;
1138:              
1139:              void InitSensorsNear(void);
1140:              
1141:              char NearSensors[8][4];
1142:              unsigned char CntHrnL,CntHrnLConst,UseTmr;
1143:              unsigned int Timer1Mem,Timer2Mem,Cnt30Sec,CntPause,CntUBTLow,CntUBtLim1;
1144:              unsigned long int TimerCnt;
1145:              
1146:              
1147:              unsigned long int TimerConst;
1148:              void SetTmrConst(void);
1149:              unsigned char BreakFunc(void);
1150:              unsigned int SerNumber;
1151:              char Str[22];
1152:              
1153:              unsigned char BreakCntConst=20;
1154:              
1155:              
1156:              
1157:              
1158:              unsigned long LongForTrmBMS;
1159:              unsigned char CntBMSBitTrm,BitRec,BMSRecMass[20],ByteRecBMS,BMSBytesCnt;
1160:              unsigned int BytesToRec;
1161:              #define BMSDelayCnt_CONST  5
1162:              unsigned char StartReceiveBMS,PacketBMS,ReceivingBMS,HvPacketBMS,BMSDelayCnt=50,BMSAddrCnt=0;
1163:              
1164:              void GetBMS(void);
1165:              
1166:              unsigned long int V1=3001,V2=3002,V3=3003,V4=3004,V5=3005,V6=3006,V7=3007,V8=3008,V9=3009,V10=3010,V11=3011,V12=3012,V13=3013,V14=3014,V15=3015,V16=3016,V17=3017,V18=3000,Vmin,VminTST=3200;
1167:              unsigned long int BatteryKeys;
1168:              void DataFrmBMS(void);
1169:              
1170:              unsigned char ChagerKeys;
1171:              unsigned long Cmd2BMS,Cmd3BMS,Cmd4BMS,Cmd5BMS;
1172:              
1173:              
1174:              unsigned int MAH,CntState5,TimerCntWhenLock;
1175:              
1176:              unsigned char BatErr;
1177:              #define BMSMASSIZE  18
1178:              unsigned char MassToBMS[BMSMASSIZE];
1179:              unsigned char CntBytesStorage,CntBitsStrg;
1180:              
1181:              
1182:              #define CNTSTOR_CONST  1000
1183:              
1184:              unsigned int CntMustStorageData=CNTSTOR_CONST;
1185:              int HighSpeedImp,GoalSpeedImp;
1186:              
1187:              
1188:              float HallDelayMaxSPDNoKMH;
1189:              
1190:              
1191:              void SensorlessMotorStart(void);
1192:              void SensorlessMotorStartInit(void);
1193:              
1194:              
1195:              unsigned char MinusStartRot,MinusKRot;
1196:              
1197:              
1198:              void ResetSpdLimSt4(void);
1199:              
1200:              unsigned char BMS1Err,BMS2Err,BMS3Err,BMS4Err,BMS5Err;
1201:              
1202:              void ErrorSound(void);
1203:              unsigned int CntOnDelay=0,CntTicks;
1204:              
1205:              unsigned char StateInd,IndCnt;
1206:              
1207:              unsigned int CntAfterActivate;
1208:              void Dbg(void);
1209:              unsigned char CntTrmSteer_N,CntTrmSteer,KAccGyroSteer;
1210:              
1211:              unsigned int AutoNastroykaState,AutoNastroykaStateFn;
1212:              
1213:              void TrmSteer(void);
1214:              void RdSensors(void);
1215:              
1216:              int MAX_AVARAGE=128;
1217:              unsigned char MAX_AVARAGE_SHIFT=7,Profile;
1218:              
1219:              
1220:              
1221:              char HallDelay1MaxSPD_F,HallDelay1MaxSPD_B;
1222:              unsigned char HallDelayMaxSPD;
1223:              unsigned char ChangeSensorOrder(unsigned char Sns,unsigned char SendOrder);
1224:              unsigned int TS=0,TS0=0,TS1=0,TS2=0,TS3=0,TS4=0;
1225:              
1226:              unsigned int Curr1Mass[CURRMASS_SIZE];
1227:              
1228:              unsigned int l;
1229:              unsigned long int CrSumm=0;
1230:              long int CurrentControlCurr=0,CurrentControlCurrUst;
1231:              
1232:              
1233:              float Spd1Fl,Spd1FlPlus;
1234:              
1235:              void CountSpd(void);
1236:              
1237:              
1238:              unsigned int FLTSTATCnt,FLTSTATCntConst=10;
1239:              unsigned char Halls;
1240:              
1241:              
1242:              unsigned char BreakCntOn=10,BreakCntOff=10,HvBreakCntOff=10,HvBreakCntOn=10;
1243:              void TestBreak(void);
1244:              
1245:              unsigned int V_MIN_OFF,V_MIN_Pre_OFF,V_MIN_Sound,V_min_OverV;
1246:              unsigned char CntSegMain=2;
1247:              
1248:              void AccToMemALM(void);
1249:              
1250:              int AccXAv[ACC_AV_TTL],AccYAv[ACC_AV_TTL],AccZAv[ACC_AV_TTL];
1251:              
1252:              
1253:              
1254:              long int PI_Curr1Res,CurrControlPIRes;
1255:              float KiCurr,KpCurr;
1256:              int ECurr1,CurrUst,CurrUstSpd0,CurrUstTmp,CurrPhaseLimit,CurrPhaseLimitWork,CurrUstWork,SensorlessCurrUst;
1257:              
1258:              unsigned long int Amplitude1Tmp,PhasePWM,Amplitude2Tmp;
1259:              float ECurr1Summ,EpCurr1,CurrUstChager;
1260:              unsigned int DIRPWM1;
1261:              int PWM_Chager;
1262:              unsigned long int CalibrHallsMass[CntCalibrHallsMAX];
1263:              long int Hall1ClrbRes,Hall2ClrbRes,Hall3ClrbRes,Hall4ClrbRes,Hall5ClrbRes,Hall6ClrbRes;
1264:              void CalculateCalibrationHalls(void);
1265:              
1266:              long int PWM1Temp=0,PWMTempPID,PWM1TempPreWheeling=0;
1267:              
1268:              long int TabRes0,TabRes1,TabRes2;
1269:              
1270:              int Throttle2Tmp,ThrottleTmp,ThrottleTmpMixed,ThrottleTmpChng,ThrottleTmpMustBe,BreakTMP,CntNoSecret,ThrottleTmpPrev,DiffMixed,CntMixedMode;
1271:              int MixedModeLevelOn,MixedModeLevelOff,CntMixedModeMax,CurrMixed,iMin,ThrottleTmpAdd;
1272:              
1273:              long int KThreshold,KThresholdBreak;
1274:              
1275:              unsigned char RecStatusFLASH_TST(void);
1276:              float UBtFl;
1277:              
1278:              unsigned int MotorPhaseA,MotorPhaseB,MotorPhaseC,MotorNeutralVoltage,ADCCommState,ComparatorOutputs;
1279:              
1280:              unsigned char But1Func,But2Func,But3Func,But4Func,But5Func;
1281:              unsigned char SensorLessStartStage,SensorTST=6,SensorTSTKeys;
1282:              unsigned int SensorLessTimer,SensorLessTimerConst=0,SensorLessTimerConstConst,SensorLessTimerConst2,AutoPID_On_CntConst=1250;
1283:              
1284:              void AutoPIDStateMachine(void);
1285:              void Sound(void);
1286:              unsigned long int LockTMR;
1287:              unsigned long int ReadProgramMemory(unsigned long int address);
1288:              
1289:              
1290:              const unsigned int Tenzo1[24]={T1_V1,
1291:              T1_V2,
1292:              T1_V3,
1293:              T1_V4,
1294:              T1_V5,
1295:              T1_V6,
1296:              T1_V7,
1297:              T1_V8,
1298:              T1_V9,
1299:              T1_V10,
1300:              T1_V11,
1301:              T1_V12,
1302:              T1_V13,
1303:              T1_V14,
1304:              T1_V15,
1305:              T1_V16,
1306:              T1_V17,
1307:              T1_V18,
1308:              T1_V19,
1309:              T1_V20,
1310:              T1_V21,
1311:              T1_V22,
1312:              T1_V23,
1313:              T1_V24
1314:              };
1315:              
1316:              const int TempTenzo1[24]={
1317:                  -55,
1318:                  -50,
1319:                  -40,
1320:                  -30,
1321:                  -20,
1322:                  -10,
1323:                  0,
1324:                  10,
1325:                  20,
1326:                  25,
1327:                  30,
1328:                  40,
1329:                  50,60,70,80,90,100,110,120,125,130,140,150};
1330:              
1331:              
1332:              
1333:              const unsigned int Tenzo2[34]={T2_V1,
1334:              T2_V2,
1335:              T2_V3,
1336:              T2_V4,
1337:              T2_V5,
1338:              T2_V6,
1339:              T2_V7,
1340:              T2_V8,
1341:              T2_V9,
1342:              T2_V10,
1343:              T2_V11,
1344:              T2_V12,
1345:              T2_V13,
1346:              T2_V14,
1347:              T2_V15,
1348:              T2_V16,
1349:              T2_V17,
1350:              T2_V18,
1351:              T2_V19,
1352:              T2_V20,
1353:              T2_V21,
1354:              T2_V22,
1355:              T2_V23,
1356:              T2_V24,
1357:              T2_V25,
1358:              T2_V26,
1359:              T2_V27,
1360:              T2_V28,
1361:              T2_V29,
1362:              T2_V30,
1363:              T2_V31,
1364:              T2_V32,
1365:              T2_V33,
1366:              T2_V34
1367:              };
1368:              
1369:              const int TempTenzo2[34]={
1370:                  -40,
1371:                  -35,
1372:                  -30,
1373:                  -25,
1374:                  -20,
1375:                  -15,
1376:                  -10,
1377:                  -5,
1378:                  0,
1379:                  5,
1380:                  10,
1381:                  15,
1382:                  20,
1383:                  25,
1384:                  30,
1385:                  35,
1386:                  40,
1387:                  45,
1388:                  50,
1389:                  55,
1390:                  60,
1391:                  65,
1392:                  70,
1393:                  75,
1394:                  80,
1395:                  85,
1396:                  90,
1397:                  95,
1398:                  100,
1399:                  105,
1400:                  110,
1401:                  115,
1402:                  120,
1403:                  125};
1404:              
1405:              const unsigned int Tenzo7[29]={
1406:                 T7_V1,
1407:                 T7_V2,
1408:                 T7_V3,
1409:                 T7_V4,
1410:                 T7_V5,
1411:                 T7_V6,
1412:                 T7_V7,
1413:                 T7_V8,
1414:                 T7_V9,
1415:                 T7_V10,
1416:                 T7_V11,
1417:                 T7_V12,
1418:                 T7_V13,
1419:                 T7_V14,
1420:                 T7_V15,
1421:                 T7_V16,
1422:                 T7_V17,
1423:                 T7_V18,
1424:                 T7_V19,
1425:                 T7_V20,
1426:                 T7_V21,
1427:                 T7_V22,
1428:                 T7_V23,
1429:                 T7_V24,
1430:                 T7_V25,
1431:                 T7_V26,
1432:                 T7_V27,
1433:                 T7_V28,
1434:                 T7_V29
1435:              };
1436:              
1437:              const int TempTenzo7[]={
1438:                  -30,
1439:                  -25,
1440:                  -20,
1441:                  -15,
1442:                  -10,
1443:                  -5,
1444:                  -0,
1445:                  5,
1446:                  10,
1447:                  15,
1448:                  20,
1449:                  25,
1450:                  30,
1451:                  35,
1452:                  40,
1453:                  45,
1454:                  50,
1455:                  55,
1456:                  60,
1457:                  65,
1458:                  70,
1459:                  75,
1460:                  80,
1461:                  85,
1462:                  90,
1463:                  95,
1464:                  100,
1465:                  105,
1466:                  110};
1467:              
1468:              
1469:              
1470:              
1471:              const unsigned int Tenzo8[29]={
1472:                 T8_V1,
1473:                 T8_V2,
1474:                 T8_V3,
1475:                 T8_V4,
1476:                 T8_V5,
1477:                 T8_V6,
1478:                 T8_V7,
1479:                 T8_V8,
1480:                 T8_V9,
1481:                 T8_V10,
1482:                 T8_V11,
1483:                 T8_V12,
1484:                 T8_V13,
1485:                 T8_V14,
1486:                 T8_V15,
1487:                 T8_V16,
1488:                 T8_V17,
1489:                 T8_V18,
1490:                 T8_V19,
1491:                 T8_V20,
1492:                 T8_V21,
1493:                 T8_V22,
1494:                 T8_V23,
1495:                 T8_V24,
1496:                 T8_V25,
1497:                 T8_V26,
1498:                 T8_V27,
1499:                 T8_V28,
1500:                 T8_V29
1501:              };
1502:              
1503:              const unsigned int Tenzo9[166]={
1504:                 T9_V1,
1505:                 T9_V2,
1506:                 T9_V3,
1507:                 T9_V4,
1508:                 T9_V5,
1509:                 T9_V6,
1510:                 T9_V7,
1511:                 T9_V8,
1512:                 T9_V9,
1513:                 T9_V10,
1514:                 T9_V11,
1515:                 T9_V12,
1516:                 T9_V13,
1517:                 T9_V14,
1518:                 T9_V15,
1519:                 T9_V16,
1520:                 T9_V17,
1521:                 T9_V18,
1522:                 T9_V19,
1523:                 T9_V20,
1524:                 T9_V21,
1525:                 T9_V22,
1526:                 T9_V23,
1527:                 T9_V24,
1528:                 T9_V25,
1529:                 T9_V26,
1530:                 T9_V27,
1531:                 T9_V28,
1532:                 T9_V29,
1533:              
1534:                 T9_V30,
1535:                 T9_V31,
1536:                 T9_V32,
1537:                 T9_V33,
1538:                 T9_V34,
1539:                 T9_V35,
1540:                 T9_V36,
1541:                 T9_V37,
1542:                 T9_V38,
1543:                 T9_V39,
1544:                 T9_V40,
1545:                 T9_V41,
1546:                 T9_V42,
1547:                 T9_V43,
1548:                 T9_V44,
1549:                 T9_V45,
1550:                 T9_V46,
1551:                 T9_V47,
1552:                 T9_V48,
1553:                 T9_V49,
1554:                 T9_V50,
1555:                 T9_V51,
1556:                 T9_V52,
1557:                 T9_V53,
1558:                 T9_V54,
1559:                 T9_V55,
1560:                 T9_V56,
1561:                 T9_V57,
1562:                 T9_V58,
1563:                 T9_V59,
1564:                 T9_V60,
1565:                 T9_V61,
1566:                 T9_V62,
1567:                 T9_V63,
1568:                 T9_V64,
1569:                 T9_V65,
1570:                 T9_V66,
1571:                 T9_V67,
1572:                 T9_V68,
1573:                 T9_V69,
1574:                 T9_V70,
1575:                 T9_V71,
1576:                 T9_V72,
1577:                 T9_V73,
1578:                 T9_V74,
1579:                 T9_V75,
1580:                 T9_V76,
1581:                 T9_V77,
1582:                 T9_V78,
1583:                 T9_V79,
1584:                 T9_V80,
1585:                 T9_V81,
1586:                 T9_V82,
1587:                 T9_V83,
1588:                 T9_V84,
1589:                 T9_V85,
1590:                 T9_V86,
1591:                 T9_V87,
1592:                 T9_V88,
1593:                 T9_V89,
1594:                 T9_V90,
1595:                 T9_V91,
1596:                 T9_V92,
1597:                 T9_V93,
1598:                 T9_V94,
1599:                 T9_V95,
1600:                 T9_V96,
1601:                 T9_V97,
1602:                 T9_V98,
1603:                 T9_V99,
1604:                 T9_V100,
1605:                 T9_V101,
1606:                 T9_V102,
1607:                 T9_V103,
1608:                 T9_V104,
1609:                 T9_V105,
1610:                 T9_V106,
1611:                 T9_V107,
1612:                 T9_V108,
1613:                 T9_V109,
1614:                 T9_V110,
1615:                 T9_V111,
1616:                 T9_V112,
1617:                 T9_V113,
1618:                 T9_V114,
1619:                 T9_V115,
1620:                 T9_V116,
1621:                 T9_V117,
1622:                 T9_V118,
1623:                 T9_V119,
1624:                 T9_V120,
1625:                 T9_V121,
1626:                 T9_V122,
1627:                 T9_V123,
1628:                 T9_V124,
1629:                 T9_V125,
1630:                 T9_V126,
1631:                 T9_V127,
1632:                 T9_V128,
1633:                 T9_V129,
1634:                 T9_V130,
1635:                 T9_V131,
1636:                 T9_V132,
1637:                 T9_V133,
1638:                 T9_V134,
1639:                 T9_V135,
1640:                 T9_V136,
1641:                 T9_V137,
1642:                 T9_V138,
1643:                 T9_V139,
1644:                 T9_V140,
1645:                 T9_V141,
1646:                 T9_V142,
1647:                 T9_V143,
1648:                 T9_V144,
1649:                 T9_V145,
1650:                 T9_V146,
1651:                 T9_V147,
1652:                 T9_V148,
1653:                 T9_V149,
1654:                 T9_V150,
1655:                 T9_V151,
1656:                 T9_V152,
1657:                 T9_V153,
1658:                 T9_V154,
1659:                 T9_V155,
1660:                 T9_V156,
1661:                 T9_V157,
1662:                 T9_V158,
1663:                 T9_V159,
1664:                 T9_V160,
1665:                 T9_V161,
1666:                 T9_V162,
1667:                 T9_V163,
1668:                 T9_V164,
1669:                 T9_V165,
1670:                 T9_V166
1671:                 
1672:              };
1673:              
1674:              
1675:              const int TempTenzo8[29]={
1676:                  -30,
1677:                  -25,
1678:                  -20,
1679:                  -15,
1680:                  -10,
1681:                  -5,
1682:                  -0,
1683:                  5,
1684:                  10,
1685:                  15,
1686:                  20,
1687:                  25,
1688:                  30,
1689:                  35,
1690:                  40,
1691:                  45,
1692:                  50,
1693:                  55,
1694:                  60,
1695:                  65,
1696:                  70,
1697:                  75,
1698:                  80,
1699:                  85,
1700:                  90,
1701:                  95,
1702:                  100,
1703:                  105,
1704:                  110};
1705:              
1706:              
1707:              const int TempTenzo9[166]={
1708:               -40,
1709:              -39,
1710:              -38,
1711:              -37,
1712:              -36,
1713:              -35,
1714:              -34,
1715:              -33,
1716:              -32,
1717:              -31,
1718:              -30,
1719:              -29,
1720:              -28,
1721:              -27,
1722:              -26,
1723:              -25,
1724:              -24,
1725:              -23,
1726:              -22,
1727:              -21,
1728:              -20,
1729:              -19,
1730:              -18,
1731:              -17,
1732:              -16,
1733:              -15,
1734:              -14,
1735:              -13,
1736:              -12,
1737:              -11,
1738:              -10,
1739:              -9,
1740:              -8,
1741:              -7,
1742:              -6,
1743:              -5,
1744:              -4,
1745:              -3,
1746:              -2,
1747:              -1,
1748:              0,
1749:              1,
1750:              2,
1751:              3,
1752:              4,
1753:              5,
1754:              6,
1755:              7,
1756:              8,
1757:              9,
1758:              10,
1759:              11,
1760:              12,
1761:              13,
1762:              14,
1763:              15,
1764:              16,
1765:              17,
1766:              18,
1767:              19,
1768:              20,
1769:              21,
1770:              22,
1771:              23,
1772:              24,
1773:              25,
1774:              26,
1775:              27,
1776:              28,
1777:              29,
1778:              30,
1779:              31,
1780:              32,
1781:              33,
1782:              34,
1783:              35,
1784:              36,
1785:              37,
1786:              38,
1787:              39,
1788:              40,
1789:              41,
1790:              42,
1791:              43,
1792:              44,
1793:              45,
1794:              46,
1795:              47,
1796:              48,
1797:              49,
1798:              50,
1799:              51,
1800:              52,
1801:              53,
1802:              54,
1803:              55,
1804:              56,
1805:              57,
1806:              58,
1807:              59,
1808:              60,
1809:              61,
1810:              62,
1811:              63,
1812:              64,
1813:              65,
1814:              66,
1815:              67,
1816:              68,
1817:              69,
1818:              70,
1819:              71,
1820:              72,
1821:              73,
1822:              74,
1823:              75,
1824:              76,
1825:              77,
1826:              78,
1827:              79,
1828:              80,
1829:              81,
1830:              82,
1831:              83,
1832:              84,
1833:              85,
1834:              86,
1835:              87,
1836:              88,
1837:              89,
1838:              90,
1839:              91,
1840:              92,
1841:              93,
1842:              94,
1843:              95,
1844:              96,
1845:              97,
1846:              98,
1847:              99,
1848:              100,
1849:              101,
1850:              102,
1851:              103,
1852:              104,
1853:              105,
1854:              106,
1855:              107,
1856:              108,
1857:              109,
1858:              110,
1859:              111,
1860:              112,
1861:              113,
1862:              114,
1863:              115,
1864:              116,
1865:              117,
1866:              118,
1867:              119,
1868:              120,
1869:              121,
1870:              122,
1871:              123,
1872:              124,
1873:              125
1874:              };
1875:              
1876:              
1877:              
1878:              const unsigned int Tenzo3[]={T3_V1,
1879:              T3_V2,
1880:              T3_V3,
1881:              T3_V4,
1882:              T3_V5,
1883:              T3_V6,
1884:              T3_V7,
1885:              T3_V8,
1886:              T3_V9,
1887:              T3_V10,
1888:              T3_V11,
1889:              T3_V12,
1890:              T3_V13,
1891:              T3_V14,
1892:              T3_V15,
1893:              T3_V16,
1894:              T3_V17,
1895:              T3_V18,
1896:              T3_V19,
1897:              T3_V20,
1898:              T3_V21,
1899:              T3_V22,
1900:              T3_V23,
1901:              T3_V24,
1902:              T3_V25,
1903:              T3_V26,
1904:              T3_V27,
1905:              };
1906:              
1907:              
1908:              
1909:              
1910:              const unsigned int Tenzo5[]={T5_V1,
1911:              T5_V2,
1912:              T5_V3,
1913:              T5_V4,
1914:              T5_V5,
1915:              T5_V6,
1916:              T5_V7,
1917:              T5_V8,
1918:              T5_V9,
1919:              T5_V10,
1920:              T5_V11,
1921:              T5_V12,
1922:              T5_V13,
1923:              T5_V14,
1924:              T5_V15,
1925:              T5_V16,
1926:              T5_V17,
1927:              T5_V18,
1928:              T5_V19,
1929:              T5_V20,
1930:              T5_V21,
1931:              T5_V22,
1932:              T5_V23,
1933:              T5_V24,
1934:              T5_V25,
1935:              T5_V26,
1936:              T5_V27,
1937:              };
1938:              
1939:              
1940:              
1941:              
1942:              const int TempTenzo3[]={
1943:                          -55,
1944:                          -50,
1945:                          -40,
1946:                          -30,
1947:                          -20,
1948:                          -10,
1949:                          0,
1950:                          10,
1951:                          20,
1952:                          25,
1953:                          30,
1954:                          40,
1955:                          50,
1956:                          60,
1957:                          70,
1958:                          80,
1959:                          90,
1960:                          100,
1961:                          110,
1962:                          120,
1963:                          125,
1964:                          130,
1965:                          140,
1966:                          150,
1967:                          160,
1968:                          170,
1969:                          175
1970:              };
1971:              
1972:              
1973:              
1974:              const unsigned int Tenzo4[]={T4_V1,
1975:              T4_V2,
1976:              T4_V3,
1977:              T4_V4,
1978:              T4_V5,
1979:              T4_V6,
1980:              T4_V7,
1981:              T4_V8,
1982:              T4_V9,
1983:              T4_V10,
1984:              T4_V11,
1985:              T4_V12,
1986:              T4_V13,
1987:              T4_V14,
1988:              T4_V15,
1989:              T4_V16,
1990:              T4_V17,
1991:              T4_V18,
1992:              T4_V19,
1993:              T4_V20,
1994:              T4_V21,
1995:              T4_V22,
1996:              T4_V23,
1997:              T4_V24,
1998:              T4_V25,
1999:              T4_V26,
2000:              T4_V27,
2001:              T4_V28,
2002:              T4_V29,
2003:              T4_V30,
2004:              T4_V31,
2005:              T4_V32,
2006:              T4_V33,
2007:              T4_V34,
2008:              T4_V35,
2009:              T4_V36,
2010:              };
2011:              
2012:              const int TempTenzo4[]={
2013:                          -40,
2014:                          -30,
2015:                          -20,
2016:                          -10,
2017:                          0,
2018:                          10,
2019:                          20,
2020:                          25,
2021:                          30,
2022:                          40,
2023:                          50,
2024:                          60,
2025:                          70,
2026:                          80,
2027:                          90,
2028:                          100,
2029:                          110,
2030:                          120,
2031:                          130,
2032:                          140,
2033:                          150,
2034:                          160,
2035:                          170,
2036:                          180,
2037:                          190,
2038:                          200,
2039:                          210,
2040:                          220,
2041:                          230,
2042:                          240,
2043:                          250,
2044:                          260,
2045:                          270,
2046:                          280,
2047:                          290,
2048:                          300
2049:                          
2050:              };
2051:              
2052:              
2053:              
2054:              
2055:              
2056:              
2057:              
2058:              
2059:              
2060:              const unsigned int Tenzo6[]={T5_V1,
2061:              T6_V2,
2062:              T6_V3,
2063:              T6_V4,
2064:              T6_V5,
2065:              T6_V6,
2066:              T6_V7,
2067:              T6_V8,
2068:              T6_V9,
2069:              T6_V10,
2070:              T6_V11,
2071:              T6_V12,
2072:              T6_V13,
2073:              T6_V14,
2074:              T6_V15,
2075:              T6_V16,
2076:              T6_V17,
2077:              T6_V18,
2078:              T6_V19,
2079:              T6_V20,
2080:              T6_V21,
2081:              T6_V22,
2082:              T6_V23,
2083:              T6_V24,
2084:              };
2085:              
2086:              
2087:              
2088:              
2089:              const int TempTenzo6[]={
2090:                          -55,
2091:                          -50,
2092:                          -40,
2093:                          -30,
2094:                          -20,
2095:                          -10,
2096:                          0,
2097:                          10,
2098:                          20,
2099:                          25,
2100:                          30,
2101:                          40,
2102:                          50,
2103:                          60,
2104:                          70,
2105:                          80,
2106:                          90,
2107:                          100,
2108:                          110,
2109:                          120,
2110:                          125,
2111:                          130,
2112:                          140,
2113:                          150
2114:                          
2115:              };
2116:              
2117:              
2118:              
2119:              
2120:              
2121:              
2122:              
2123:              
2124:              
2125:              float GetTemperaturePTC_KTY81_210(unsigned int ResTemp);
2126:              float GetTemperaturePTC_KTY83_110(unsigned int ResTemp);
2127:              float GetTemperaturePTC_KTY83_122(unsigned int ResTemp);
2128:              float GetTemperature_NTCALUG03A103H(unsigned int ResTemp);
2129:              float GetTemperature_MF58_B_5K(unsigned int ResTemp);
2130:              float GetTemperature_MF58_G_10K(unsigned int ResTemp);
2131:              float GetTemperature_NCP18XH103F03RB(unsigned int ResTemp);
2132:              float GetTemperaturePTC_KTY84_130(unsigned int ResTemp);
2133:              float Temperature1,Temperature2,Temperature3,Temperature4,Temperature5,Temperature6,TemperatureMaxOUT,TemperatureMaxOUT_H,TemperatureMaxIN,TemperatureMaxIN_H;
2134:              float ETemperIN,EpTemperIN,TemperatureFETs,KiTemperIN,KpTemperIN,ETemperINSumm,PI_Temperature,PITemperIN;
2135:              float KiTemperOUT,KpTemperOUT;
2136:              
2137:              unsigned long int T1_ADC,T2_ADC,T3_ADC,T4_ADC,T5_ADC,T6_ADC;
2138:              unsigned int CntT_ADC,T1,T2,T3,T4,T5,T6,CntMustBe;
2139:              float ETemperOUT,ETemperOUTSumm,PITemperOUT,EpTemperOUT;
2140:              unsigned long int PI_TemperatureOUT;
2141:              
2142:              unsigned char AutoPID_On_PWM,AutoPID_On_Speed;
2143:              
2144:              unsigned char AutoPIDState;
2145:              long int PWM1TempSumm;
2146:              float PWM1TempSummfl=0;
2147:              unsigned int AutoPID_On_Cnt,PWM1TempSummCnt;
2148:              void CopyProfiles(void);
2149:              
2150:              void SendProfileMassToPC(void);
2151:              void SendFlashMassToPC(void);
2152:              void SendFlashMass2ToPC(void);
2153:              void CmdOK (void);
2154:              void CmdOK2 (void);
2155:              void CmdOK3 (void);
2156:              void Lights(void);
2157:              unsigned int ProtectValue,CntTurn,RCON_Mem,CntTurnOnConst,CntTurnOffConst;
2158:              unsigned char  SlowStrtSpd,AntiPolicePower; 
2159:              
2160:                  
2161:              //unsigned char __attribute__((address(0x9002))) abcde[20000];
2162:              //unsigned char TSTMass[17000];
2163:              //__eds__ unsigned char TSTMass1[17000]; __attribute__ ((eds));
2164:              
2165:              
2166:              
2167:              int main(void)
2168:              {
0032DA  FA0000     LNK #0x0
2169:              #if !defined VECTOR
2170:              #if defined ISOLATED    
2171:                  KEY_BT=0;
2172:              #else
2173:                  KEY_BT=1;
2174:              #endif
2175:              #else
2176:                    KEY_BT=0;
0032DC  A9EE64     BCLR LATG, #7
2177:              #endif
2178:                  TRIS_KEY_BT=0;
0032DE  A9EE60     BCLR TRISG, #7
2179:              
2180:                  
2181:                  
2182:                  
2183:                  
2184:                  
2185:                  
2186:                  
2187:                  RCON_Mem=RCON;
0032E0  803A04     MOV RCON, W4
0032E2  8A0654     MOV W4, RCON_Mem
2188:                  Nop();
0032E4  000000     NOP
2189:                  Nop();
0032E6  000000     NOP
2190:                  Nop();
0032E8  000000     NOP
2191:                  RCON=0;
0032EA  EB0200     CLR W4
0032EC  883A04     MOV W4, RCON
2192:                  
2193:              
2194:                      InitSegAll();
0032EE  072351     RCALL InitSegAll
2195:              //        while (1);
2196:              
2197:                  MyTimeOut=500;
0032F0  201F44     MOV #0x1F4, W4
0032F2  8994C4     MOV W4, MyTimeOut
2198:              while (MyTimeOut); 
0032F4  000000     NOP
0032F6  8194C4     MOV MyTimeOut, W4
0032F8  520FE0     SUB W4, #0x0, [W15]
0032FA  3AFFFD     BRA NZ, 0x32F6
2199:              
2200:              
2201:              #if !defined VECTOR
2202:              #if defined ISOLATED    
2203:                  KEY_BT=1;
2204:              #else
2205:                  KEY_BT=0;
2206:              #endif
2207:              #else
2208:                  KEY_BT=1;
0032FC  A8EE64     BSET LATG, #7
2209:              #endif
2210:                  Nop();
0032FE  000000     NOP
2211:                  Nop();
003300  000000     NOP
2212:                  Nop();
003302  000000     NOP
2213:                  HvReplyHC05=0;
003304  809614     MOV 0x12C2, W4
003306  A1A004     BCLR W4, #10
003308  889614     MOV W4, 0x12C2
2214:                  MyTimeOut=550;
00330A  202264     MOV #0x226, W4
00330C  8994C4     MOV W4, MyTimeOut
2215:                  AT_Rec=1;
00330E  809614     MOV 0x12C2, W4
003310  A0E004     BSET W4, #14
003312  889614     MOV W4, 0x12C2
2216:              TrmHC05_AT("AT",sizeof("AT"));//AT+NAME=RoboWell
003314  200031     MOV #0x3, W1
003316  2B2B20     MOV #0xB2B2, W0
003318  0771F8     RCALL TrmHC05_AT
2217:              while ((!HvReplyHC05)&&(MyTimeOut));
00331A  000000     NOP
00331C  809615     MOV 0x12C2, W5
00331E  204004     MOV #0x400, W4
003320  628204     AND W5, W4, W4
003322  520FE0     SUB W4, #0x0, [W15]
003324  3A0003     BRA NZ, 0x332C
003326  8194C4     MOV MyTimeOut, W4
003328  520FE0     SUB W4, #0x0, [W15]
00332A  3AFFF8     BRA NZ, 0x331C
2218:                  AT_Rec=0;
00332C  809614     MOV 0x12C2, W4
00332E  A1E004     BCLR W4, #14
003330  889614     MOV W4, 0x12C2
2219:                  
2220:              #if !defined VECTOR
2221:              #if defined ISOLATED    
2222:                  KEY_BT=0;
2223:              #else
2224:                  KEY_BT=1;
2225:              #endif
2226:              #else
2227:                  KEY_BT=0;
003332  A9EE64     BCLR LATG, #7
2228:              #endif
2229:              
2230:                     Hv_HC05=0;
003334  8096D4     MOV 0x12DA, W4
003336  A16004     BCLR W4, #6
003338  8896D4     MOV W4, 0x12DA
2231:              MyTimeOut=1;
00333A  200014     MOV #0x1, W4
00333C  8994C4     MOV W4, MyTimeOut
2232:              
2233:                 if (MyTimeOut)
00333E  8194C4     MOV MyTimeOut, W4
003340  520FE0     SUB W4, #0x0, [W15]
003342  32002C     BRA Z, 0x339C
2234:              {
2235:                      Hv_HC05=1;
003344  8096D4     MOV 0x12DA, W4
003346  A06004     BSET W4, #6
003348  8896D4     MOV W4, 0x12DA
2236:              
2237:                      
2238:              
2239:              while (1)
2240:                  {
2241:                  Nop();
00334A  000000     NOP
2242:              
2243:                      LighrSensorFunc();
00334C  02DEF8     CALL LighrSensorFunc
00334E  000001     NOP
2244:                      ClbrJOYSTICK();
003350  02DCB2     CALL ClbrJOYSTICK
003352  000001     NOP
2245:              
2246:                      //TrmControls_U3();
2247:                      CalculateCalibrationHalls();
003354  027138     CALL CalculateCalibrationHalls
003356  000001     NOP
2248:                      WrOdmtr();
003358  076598     RCALL WrOdmtr
2249:                      writeFlash();
00335A  076DB5     RCALL writeFlash
2250:                      WriteErrors();
00335C  076DD8     RCALL WriteErrors
2251:                      ReceiveUDP();
00335E  0733E8     RCALL ReceiveUDP
2252:                      //TrmErrorsHC05();
2253:                      Rbw();
003360  023C62     CALL Rbw
003362  000001     NOP
2254:                      SetPIN_HC05();
003364  02CDDC     CALL SetPIN_HC05
003366  000001     NOP
2255:                      //ResetPIN_HC05();
2256:                      GetRbw();
003368  023E34     CALL GetRbw
00336A  000001     NOP
2257:                      DataFrmBMS();
00336C  02402A     CALL DataFrmBMS
00336E  000001     NOP
2258:                      ErrorSound();
003370  024030     CALL ErrorSound
003372  000001     NOP
2259:                      CountSpd();
003374  0241CA     CALL CountSpd
003376  000001     NOP
2260:                      UBT_To_V();
003378  02CD52     CALL UBT_To_V
00337A  000001     NOP
2261:                      CriticalErrorLed();
00337C  02DFE6     CALL CriticalErrorLed
00337E  000001     NOP
2262:                      
2263:                      if (MustTrmHC05)
003380  809635     MOV 0x12C6, W5
003382  202004     MOV #0x200, W4
003384  628204     AND W5, W4, W4
003386  520FE0     SUB W4, #0x0, [W15]
003388  320005     BRA Z, 0x3394
2264:                      {
2265:                      MustTrmHC05=0;
00338A  809634     MOV 0x12C6, W4
00338C  A19004     BCLR W4, #9
00338E  889634     MOV W4, 0x12C6
2266:                      TrmHC05(HC05TrmMass);
003390  230CE0     MOV #0x30CE, W0
003392  077205     RCALL TrmHC05
2267:                      }
2268:                      
2269:                      Dbg();
003394  024094     CALL Dbg
003396  000001     NOP
2270:                      TrmSteer();
003398  0732DC     RCALL TrmSteer
2271:              
2272:                  }
00339A  37FFD7     BRA 0x334A
2273:              }
2274:              else
2275:                  //CloseU4();
2276:              {
2277:                            Hv_HC05=1;
00339C  8096D4     MOV 0x12DA, W4
00339E  A06004     BSET W4, #6
0033A0  8896D4     MOV W4, 0x12DA
2278:              
2279:              
2280:              
2281:              while (1)
2282:                  {
2283:                      //TrmControls_U3();
2284:                      LighrSensorFunc();
0033A2  02DEF8     CALL LighrSensorFunc
0033A4  000001     NOP
2285:                      ClbrJOYSTICK();
0033A6  02DCB2     CALL ClbrJOYSTICK
0033A8  000001     NOP
2286:                      WrOdmtr();
0033AA  07656F     RCALL WrOdmtr
2287:                      writeFlash();
0033AC  076D8C     RCALL writeFlash
2288:                      WriteErrors();
0033AE  076DAF     RCALL WriteErrors
2289:                      ReceiveUDP();
0033B0  0733BF     RCALL ReceiveUDP
2290:                      //TrmErrorsHC05();
2291:                      Rbw();
0033B2  023C62     CALL Rbw
0033B4  000001     NOP
2292:                      SetPIN_HC05();
0033B6  02CDDC     CALL SetPIN_HC05
0033B8  000001     NOP
2293:                      //ResetPIN_HC05();
2294:                      GetRbw();
0033BA  023E34     CALL GetRbw
0033BC  000001     NOP
2295:                      DataFrmBMS();
0033BE  02402A     CALL DataFrmBMS
0033C0  000001     NOP
2296:                      ErrorSound();
0033C2  024030     CALL ErrorSound
0033C4  000001     NOP
2297:                      CountSpd();
0033C6  0241CA     CALL CountSpd
0033C8  000001     NOP
2298:                      UBT_To_V();
0033CA  02CD52     CALL UBT_To_V
0033CC  000001     NOP
2299:                      CriticalErrorLed();
0033CE  02DFE6     CALL CriticalErrorLed
0033D0  000001     NOP
2300:                      
2301:                      if (MustTrmHC05)
0033D2  809635     MOV 0x12C6, W5
0033D4  202004     MOV #0x200, W4
0033D6  628204     AND W5, W4, W4
0033D8  520FE0     SUB W4, #0x0, [W15]
0033DA  320005     BRA Z, 0x33E6
2302:                      {
2303:                      MustTrmHC05=0;
0033DC  809634     MOV 0x12C6, W4
0033DE  A19004     BCLR W4, #9
0033E0  889634     MOV W4, 0x12C6
2304:                      TrmHC05(HC05TrmMass);
0033E2  230CE0     MOV #0x30CE, W0
0033E4  0771DC     RCALL TrmHC05
2305:                      }
2306:                      
2307:                      Dbg();
0033E6  024094     CALL Dbg
0033E8  000001     NOP
2308:                      TrmSteer();
0033EA  0732B3     RCALL TrmSteer
2309:                //      SoundNoBMS();
2310:                  }
0033EC  37FFDA     BRA 0x33A2
2311:              }
2312:              
2313:              
2314:              }
2315:              
2316:              
2317:              
2318:              
2319:              
2320:              void SegMain(void)
2321:              {
0033EE  FA0036     LNK #0x36
0033F0  BE9F88     MOV.D W8, [W15++]
0033F2  BE9F8A     MOV.D W10, [W15++]
2322:              #if defined MPU6050
2323:                  if (I2C1STATbits.BCL)
2324:                  {
2325:                      Nop();
2326:                      Nop();
2327:                      Nop();
2328:                             CloseI2C1();             //Disable I2C
2329:                             IEC1bits.MI2C1IE=0;
2330:                             HvMPU6050=1;
2331:                             MPU6050Err=9;
2332:                             SoundNum=10;
2333:                  }
2334:              #endif
2335:              
2336:                  
2337:              #if !defined VECTORS
2338:                  if (Left)
0033F4  8096C5     MOV Flgs7, W5
0033F6  280004     MOV #0x8000, W4
0033F8  628204     AND W5, W4, W4
0033FA  520FE0     SUB W4, #0x0, [W15]
0033FC  320002     BRA Z, 0x3402
2339:                   LeftPort=1;
0033FE  A8AE34     BSET LATD, #5
003400  370001     BRA 0x3404
2340:                  else
2341:                   LeftPort=0;
003402  A9AE34     BCLR LATD, #5
2342:              
2343:                  if (Right)
003404  8096C5     MOV Flgs7, W5
003406  240004     MOV #0x4000, W4
003408  628204     AND W5, W4, W4
00340A  520FE0     SUB W4, #0x0, [W15]
00340C  320002     BRA Z, 0x3412
2344:                   RightPort=1;
00340E  A88E34     BSET LATD, #4
003410  370001     BRA 0x3414
2345:                  else
2346:                   RightPort=0;
003412  A98E34     BCLR LATD, #4
2347:              #else
2348:                  if (Left)
2349:                   LeftPort=0;
2350:                  else
2351:                   LeftPort=1;
2352:              
2353:                  if (Right)
2354:                   RightPort=0;
2355:                  else
2356:                   RightPort=1;
2357:              #endif
2358:                  
2359:                  if ((!HvGyroData)||(!HvAccData))
003414  8095E5     MOV Flgs, W5
003416  240004     MOV #0x4000, W4
003418  628204     AND W5, W4, W4
00341A  520FE0     SUB W4, #0x0, [W15]
00341C  3222B3     BRA Z, 0x7984
00341E  8095E5     MOV Flgs, W5
003420  220004     MOV #0x2000, W4
003422  628204     AND W5, W4, W4
003424  520FE0     SUB W4, #0x0, [W15]
003426  3222B0     BRA Z, 0x7988
2360:                          return;
007984  000000     NOP
007986  370001     BRA 0x798A
007988  000000     NOP
2361:              
2362:              
2363:              
2364:                  PWM32Bits=1;
003428  809754     MOV StatFlgs1, W4
00342A  A0F004     BSET W4, #15
00342C  889754     MOV W4, StatFlgs1
2365:              
2366:                  
2367:                  if (CntMigStop)
00342E  809404     MOV CntMigStop, W4
003430  520FE0     SUB W4, #0x0, [W15]
003432  320003     BRA Z, 0x343A
2368:                      CntMigStop--;
003434  809404     MOV CntMigStop, W4
003436  E90204     DEC W4, W4
003438  889404     MOV W4, CntMigStop
2369:                  if (CntMigStop>CntMigStopConst)
00343A  809405     MOV CntMigStop, W5
00343C  821314     MOV CntMigStopConst, W4
00343E  528F84     SUB W5, W4, [W15]
003440  360002     BRA LEU, 0x3446
2370:                      CntMigStop=CntMigStopConst;
003442  821314     MOV CntMigStopConst, W4
003444  889404     MOV W4, CntMigStop
2371:              
2372:                  
2373:                  
2374:                  HvGyroData=0;
003446  8095E4     MOV Flgs, W4
003448  A1E004     BCLR W4, #14
00344A  8895E4     MOV W4, Flgs
2375:                  HvAccData=0;
00344C  8095E4     MOV Flgs, W4
00344E  A1D004     BCLR W4, #13
003450  8895E4     MOV W4, Flgs
2376:              //    TST_PIN=1;
2377:                  Mgnovenniy=0;
003452  809774     MOV StatFlgs3, W4
003454  A12004     BCLR W4, #2
003456  889774     MOV W4, StatFlgs3
2378:              
2379:                  if (MODE_LED_Cnt)
003458  817D84     MOV MODE_LED_Cnt, W4
00345A  520FE0     SUB W4, #0x0, [W15]
00345C  320003     BRA Z, 0x3464
2380:                      MODE_LED_Cnt--;
00345E  817D84     MOV MODE_LED_Cnt, W4
003460  E90204     DEC W4, W4
003462  897D84     MOV W4, MODE_LED_Cnt
2381:                  
2382:                  if (ResetPassWordCnt)
003464  8213B4     MOV ResetPassWordCnt, W4
003466  520FE0     SUB W4, #0x0, [W15]
003468  320004     BRA Z, 0x3472
2383:                  ResetPassWordCnt--;
00346A  8213B4     MOV ResetPassWordCnt, W4
00346C  E90204     DEC W4, W4
00346E  8A13B4     MOV W4, ResetPassWordCnt
003470  370001     BRA 0x3474
2384:                  else
2385:                      Nop();
003472  000000     NOP
2386:                  
2387:                  
2388:              /*
2389:                  if (UBtFl>99)
2390:                      CriticalError=CRERR_UBAT_HI;
2391:                  else
2392:                  {
2393:                      if (CriticalError==CRERR_UBAT_HI)
2394:                      {
2395:                          CriticalError=0;
2396:                              BuzzerMacroOff
2397:                      }
2398:                  }
2399:                  
2400:                  */
2401:              
2402:              
2403:                  
2404:                  
2405:                  
2406:                  
2407:                  
2408:                  
2409:                  
2410:                  
2411:                  
2412:                  if (_2WDMode==2)
003474  230C94     MOV #0x30C9, W4
003476  784214     MOV.B [W4], W4
003478  524FE2     SUB.B W4, #0x2, [W15]
00347A  3A000B     BRA NZ, 0x3492
2413:                  {
2414:                      if (HvButtonsFromMaster)
00347C  8096C5     MOV Flgs7, W5
00347E  201004     MOV #0x100, W4
003480  628204     AND W5, W4, W4
003482  520FE0     SUB W4, #0x0, [W15]
003484  320007     BRA Z, 0x3494
2415:                      {
2416:                      HvButtonsFromMaster=0;
003486  8096C4     MOV Flgs7, W4
003488  A18004     BCLR W4, #8
00348A  8896C4     MOV W4, Flgs7
2417:                      ButtonsSlave();
00348C  02D8B4     CALL ButtonsSlave
00348E  000001     NOP
003490  370001     BRA 0x3494
2418:                      }
2419:                  }
2420:                  else
2421:                      Buttons();
003492  076517     RCALL Buttons
2422:                  Bt1Process();
003494  076710     RCALL Bt1Process
2423:                  Bt2Process();
003496  076899     RCALL Bt2Process
2424:                  
2425:              
2426:              
2427:                  if (SIN_MIDDLE)
003498  809765     MOV StatFlgs2, W5
00349A  240004     MOV #0x4000, W4
00349C  628204     AND W5, W4, W4
00349E  520FE0     SUB W4, #0x0, [W15]
0034A0  320003     BRA Z, 0x34A8
2428:                      StrongMode=1;
0034A2  8095F4     MOV 0x12BE, W4
0034A4  A0E004     BSET W4, #14
0034A6  8895F4     MOV W4, 0x12BE
2429:              
2430:                  
2431:                  
2432:                  SetStartingProfile3PsnBtn();
0034A8  02B27E     CALL SetStartingProfile3PsnBtn
0034AA  000001     NOP
2433:                  
2434:                  if (ThreePositionSwitch)
0034AC  809744     MOV StatFlgs, W4
0034AE  620270     AND W4, #0x10, W4
0034B0  520FE0     SUB W4, #0x0, [W15]
0034B2  320003     BRA Z, 0x34BA
2435:                      ChangeProfile();
0034B4  02B13A     CALL ChangeProfile
0034B6  000001     NOP
0034B8  370020     BRA 0x34FA
2436:                  else
2437:                  {
2438:                      if (!TurnSignal)
0034BA  809765     MOV StatFlgs2, W5
0034BC  200204     MOV #0x20, W4
0034BE  628204     AND W5, W4, W4
0034C0  520FE0     SUB W4, #0x0, [W15]
0034C2  3A0003     BRA NZ, 0x34CA
2439:                      {
2440:                  Bt3Process();
0034C4  076A05     RCALL Bt3Process
2441:                  Bt4Process();
0034C6  076B7C     RCALL Bt4Process
0034C8  370018     BRA 0x34FA
2442:                      }
2443:                      else
2444:                      {
2445:                          if (But3Pressed)
0034CA  809625     MOV Flgs2, W5
0034CC  202004     MOV #0x200, W4
0034CE  628204     AND W5, W4, W4
0034D0  520FE0     SUB W4, #0x0, [W15]
0034D2  320004     BRA Z, 0x34DC
2446:                              LeftTurn=1;
0034D4  809694     MOV 0x12D2, W4
0034D6  A0C004     BSET W4, #12
0034D8  889694     MOV W4, 0x12D2
0034DA  370003     BRA 0x34E2
2447:                          else
2448:                              LeftTurn=0;
0034DC  809694     MOV 0x12D2, W4
0034DE  A1C004     BCLR W4, #12
0034E0  889694     MOV W4, 0x12D2
2449:                          
2450:                          if (But4Pressed)
0034E2  809605     MOV Flgs1, W5
0034E4  200804     MOV #0x80, W4
0034E6  628204     AND W5, W4, W4
0034E8  520FE0     SUB W4, #0x0, [W15]
0034EA  320004     BRA Z, 0x34F4
2451:                              RightTurn=1;
0034EC  809694     MOV 0x12D2, W4
0034EE  A0D004     BSET W4, #13
0034F0  889694     MOV W4, 0x12D2
0034F2  370003     BRA 0x34FA
2452:                          else
2453:                              RightTurn=0;
0034F4  809694     MOV 0x12D2, W4
0034F6  A1D004     BCLR W4, #13
0034F8  889694     MOV W4, 0x12D2
2454:                          
2455:                      }
2456:                  }
2457:                  StartingBTN=0;
0034FA  809684     MOV Flgs5, W4
0034FC  A1E004     BCLR W4, #14
0034FE  889684     MOV W4, Flgs5
2458:                  
2459:                  
2460:                  
2461:                  
2462:                  #ifdef PROTECT
2463:                          if (((unsigned int)(ReadProgramMemory(0xf04)))!=0x8287)
2464:                              CriticalError=CRERR_SEC_ERROR_1;
2465:              #endif
2466:              
2467:                  
2468:                  
2469:                  
2470:                  
2471:                  
2472:                  
2473:                  
2474:                  
2475:                  Sound();
003500  02761E     CALL Sound
003502  000001     NOP
2476:                  StateMachinePID();
003504  027E1E     CALL StateMachinePID
003506  000001     NOP
2477:                  if (SoundTmr)
003508  809655     MOV 0x12CA, W5
00350A  240004     MOV #0x4000, W4
00350C  628204     AND W5, W4, W4
00350E  520FE0     SUB W4, #0x0, [W15]
003510  320007     BRA Z, 0x3520
2478:                     if (!Sounds)
003512  2124A4     MOV #0x124A, W4
003514  784214     MOV.B [W4], W4
003516  524FE0     SUB.B W4, #0x0, [W15]
003518  3A0003     BRA NZ, 0x3520
2479:                        SoundNum=6;
00351A  2124B5     MOV #0x124B, W5
00351C  B3C064     MOV.B #0x6, W4
00351E  784A84     MOV.B W4, [W5]
2480:              
2481:                  
2482:              
2483:                  if (Monocycle)
003520  809745     MOV StatFlgs, W5
003522  280004     MOV #0x8000, W4
003524  628204     AND W5, W4, W4
003526  520FE0     SUB W4, #0x0, [W15]
003528  320003     BRA Z, 0x3530
2484:                      MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
00352A  20B544     MOV #0xB54, W4
00352C  8892D4     MOV W4, MAX_PWM_CONST
00352E  370002     BRA 0x3534
2485:                  else
2486:                  {
2487:                      if (1)//(PWM32Bits)
2488:                      MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
003530  20B544     MOV #0xB54, W4
003532  8892D4     MOV W4, MAX_PWM_CONST
2489:                      else
2490:                      MAX_PWM_CONST=MAX_PWM_CONST_EBIKE;
2491:                  }
2492:              
2493:                  
2494:                  CntMustBe++;
003534  820524     MOV CntMustBe, W4
003536  E80204     INC W4, W4
003538  8A0524     MOV W4, CntMustBe
2495:                  if (CntMustBe>5)
00353A  820524     MOV CntMustBe, W4
00353C  520FE5     SUB W4, #0x5, [W15]
00353E  360010     BRA LEU, 0x3560
2496:                  {
2497:                      CntMustBe=0;
003540  EB0200     CLR W4
003542  8A0524     MOV W4, CntMustBe
2498:                      
2499:                      if (MAX_PWM_MEM_WORK>MAX_PWM_MustBe)
003544  809995     MOV MAX_PWM_MEM_WORK, W5
003546  8099B4     MOV MAX_PWM_MustBe, W4
003548  528F84     SUB W5, W4, [W15]
00354A  360003     BRA LEU, 0x3552
2500:                      {
2501:                          MAX_PWM_MEM_WORK--;
00354C  809994     MOV MAX_PWM_MEM_WORK, W4
00354E  E90204     DEC W4, W4
003550  889994     MOV W4, MAX_PWM_MEM_WORK
2502:                      }
2503:              
2504:                      if (MAX_PWM_MEM_WORK<MAX_PWM_MustBe)
003552  809995     MOV MAX_PWM_MEM_WORK, W5
003554  8099B4     MOV MAX_PWM_MustBe, W4
003556  528F84     SUB W5, W4, [W15]
003558  310003     BRA C, 0x3560
2505:                      {
2506:                          MAX_PWM_MEM_WORK++;
00355A  809994     MOV MAX_PWM_MEM_WORK, W4
00355C  E80204     INC W4, W4
00355E  889994     MOV W4, MAX_PWM_MEM_WORK
2507:                      }
2508:              
2509:                      
2510:                  }
2511:                  
2512:              
2513:                  if (ClearCurrentAH)
003560  809645     MOV Flgs3, W5
003562  200204     MOV #0x20, W4
003564  628204     AND W5, W4, W4
003566  520FE0     SUB W4, #0x0, [W15]
003568  320015     BRA Z, 0x3594
2514:                  {
2515:                      ClearCurrentAH=0;
00356A  809644     MOV Flgs3, W4
00356C  A15004     BCLR W4, #5
00356E  889644     MOV W4, Flgs3
2516:                      CurrTuda1=CurrRegen1=CurrTuda2=CurrRegen2=0;
003570  B82260     MUL.UU W4, #0, W4
003572  89B884     MOV W4, CurrRegen2
003574  89B895     MOV W5, 0x3712
003576  81B884     MOV CurrRegen2, W4
003578  81B895     MOV 0x3712, W5
00357A  89B864     MOV W4, CurrTuda2
00357C  89B875     MOV W5, 0x370E
00357E  81B864     MOV CurrTuda2, W4
003580  81B875     MOV 0x370E, W5
003582  89B844     MOV W4, CurrRegen1
003584  89B855     MOV W5, 0x370A
003586  81B844     MOV CurrRegen1, W4
003588  81B855     MOV 0x370A, W5
00358A  89B824     MOV W4, CurrTuda1
00358C  89B835     MOV W5, 0x3706
2517:                      RecOdometrFl=1;
00358E  809604     MOV Flgs1, W4
003590  A06004     BSET W4, #6
003592  889604     MOV W4, Flgs1
2518:                  }
2519:                  if (CalibrateGyro)
003594  8095F4     MOV 0x12BE, W4
003596  620261     AND W4, #0x1, W4
003598  520FE0     SUB W4, #0x0, [W15]
00359A  32005E     BRA Z, 0x3658
2520:                  {
2521:                      CalibrX=0;
00359C  B82260     MUL.UU W4, #0, W4
00359E  8953D4     MOV W4, CalibrX
0035A0  8953E5     MOV W5, 0x2A7C
2522:                      CalibrY=0;
0035A2  B82260     MUL.UU W4, #0, W4
0035A4  8953F4     MOV W4, CalibrY
0035A6  895405     MOV W5, 0x2A80
2523:                      CalibrZ=0;
0035A8  B82260     MUL.UU W4, #0, W4
0035AA  895414     MOV W4, CalibrZ
0035AC  895425     MOV W5, 0x2A84
2524:              
2525:                      for (CalibrCnt=0;CalibrCnt<256;CalibrCnt++)
0035AE  B82260     MUL.UU W4, #0, W4
0035B0  895434     MOV W4, CalibrCnt
0035B2  895445     MOV W5, 0x2A88
0035B4  370028     BRA 0x3606
0035FA  815434     MOV CalibrCnt, W4
0035FC  815445     MOV 0x2A88, W5
0035FE  420261     ADD W4, #0x1, W4
003600  4A82E0     ADDC W5, #0x0, W5
003602  895434     MOV W4, CalibrCnt
003604  895445     MOV W5, 0x2A88
003606  815436     MOV CalibrCnt, W6
003608  815447     MOV 0x2A88, W7
00360A  200FF4     MOV #0xFF, W4
00360C  200005     MOV #0x0, W5
00360E  530F84     SUB W6, W4, [W15]
003610  5B8F85     SUBB W7, W5, [W15]
003612  34FFD1     BRA LE, 0x35B6
2526:                      {
2527:                      while (!HvGyroData);
0035B6  000000     NOP
0035B8  8095E5     MOV Flgs, W5
0035BA  240004     MOV #0x4000, W4
0035BC  628204     AND W5, W4, W4
0035BE  520FE0     SUB W4, #0x0, [W15]
0035C0  32FFFB     BRA Z, 0x35B8
2528:                      HvGyroData=0;
0035C2  8095E4     MOV Flgs, W4
0035C4  A1E004     BCLR W4, #14
0035C6  8895E4     MOV W4, Flgs
2529:                      CalibrX=CalibrX+GyroX;
0035C8  80C0A4     MOV GyroX, W4
0035CA  B92361     MUL.SU W4, #1, W6
0035CC  8153D4     MOV CalibrX, W4
0035CE  8153E5     MOV 0x2A7C, W5
0035D0  420206     ADD W4, W6, W4
0035D2  4A8287     ADDC W5, W7, W5
0035D4  8953D4     MOV W4, CalibrX
0035D6  8953E5     MOV W5, 0x2A7C
2530:                      CalibrY=CalibrY+GyroY;
0035D8  80C0C4     MOV GyroY, W4
0035DA  B92361     MUL.SU W4, #1, W6
0035DC  8153F4     MOV CalibrY, W4
0035DE  815405     MOV 0x2A80, W5
0035E0  420206     ADD W4, W6, W4
0035E2  4A8287     ADDC W5, W7, W5
0035E4  8953F4     MOV W4, CalibrY
0035E6  895405     MOV W5, 0x2A80
2531:                      CalibrZ=CalibrZ+GyroZ;
0035E8  80C0D4     MOV GyroZ, W4
0035EA  B92361     MUL.SU W4, #1, W6
0035EC  815414     MOV CalibrZ, W4
0035EE  815425     MOV 0x2A84, W5
0035F0  420206     ADD W4, W6, W4
0035F2  4A8287     ADDC W5, W7, W5
0035F4  895414     MOV W4, CalibrZ
0035F6  895425     MOV W5, 0x2A84
2532:                          ClrWdt();
0035F8  FE6000     CLRWDT
2533:                      }
2534:                      CalibrateGyro=0;
003614  8095F4     MOV 0x12BE, W4
003616  A10004     BCLR W4, #0
003618  8895F4     MOV W4, 0x12BE
2535:                      CalibrationGyroX=CalibrX>>8;
00361A  8153D4     MOV CalibrX, W4
00361C  8153E5     MOV 0x2A7C, W5
00361E  DD2948     SL W5, #8, W2
003620  DE2248     LSR W4, #8, W4
003622  710204     IOR W2, W4, W4
003624  DEAAC8     ASR W5, #8, W5
003626  780204     MOV W4, W4
003628  895554     MOV W4, CalibrationGyroX
2536:                      CalibrationGyroY=CalibrY>>8;
00362A  8153F4     MOV CalibrY, W4
00362C  815405     MOV 0x2A80, W5
00362E  DD2B48     SL W5, #8, W6
003630  DE2248     LSR W4, #8, W4
003632  730204     IOR W6, W4, W4
003634  DEAAC8     ASR W5, #8, W5
003636  780204     MOV W4, W4
003638  895564     MOV W4, CalibrationGyroY
2537:                      CalibrationGyroZ=CalibrZ>>8;
00363A  815414     MOV CalibrZ, W4
00363C  815425     MOV 0x2A84, W5
00363E  DD2948     SL W5, #8, W2
003640  DE2248     LSR W4, #8, W4
003642  710204     IOR W2, W4, W4
003644  DEAAC8     ASR W5, #8, W5
003646  780204     MOV W4, W4
003648  895574     MOV W4, CalibrationGyroZ
2538:              
2539:                      OptionsToMass();
00364A  0750D1     RCALL OptionsToMass
2540:                      MustTrmFlashMass=1;
00364C  8095F4     MOV 0x12BE, W4
00364E  A02004     BSET W4, #2
003650  8895F4     MOV W4, 0x12BE
2541:              
2542:                      Nop();
003652  000000     NOP
2543:                      Nop();
003654  000000     NOP
2544:                      Nop();
003656  000000     NOP
2545:                  }
2546:              
2547:                  if (CalibrateAcc)
003658  8095F4     MOV 0x12BE, W4
00365A  620262     AND W4, #0x2, W4
00365C  520FE0     SUB W4, #0x0, [W15]
00365E  320060     BRA Z, 0x3720
2548:                  {
2549:                      CalibrX=0;
003660  B82260     MUL.UU W4, #0, W4
003662  8953D4     MOV W4, CalibrX
003664  8953E5     MOV W5, 0x2A7C
2550:                      CalibrY=0;
003666  B82260     MUL.UU W4, #0, W4
003668  8953F4     MOV W4, CalibrY
00366A  895405     MOV W5, 0x2A80
2551:                      CalibrZ=0;
00366C  B82260     MUL.UU W4, #0, W4
00366E  895414     MOV W4, CalibrZ
003670  895425     MOV W5, 0x2A84
2552:              
2553:                      for (CalibrCnt=0;CalibrCnt<256;CalibrCnt++)
003672  B82260     MUL.UU W4, #0, W4
003674  895434     MOV W4, CalibrCnt
003676  895445     MOV W5, 0x2A88
003678  370028     BRA 0x36CA
0036BE  815434     MOV CalibrCnt, W4
0036C0  815445     MOV 0x2A88, W5
0036C2  420261     ADD W4, #0x1, W4
0036C4  4A82E0     ADDC W5, #0x0, W5
0036C6  895434     MOV W4, CalibrCnt
0036C8  895445     MOV W5, 0x2A88
0036CA  815436     MOV CalibrCnt, W6
0036CC  815447     MOV 0x2A88, W7
0036CE  200FF4     MOV #0xFF, W4
0036D0  200005     MOV #0x0, W5
0036D2  530F84     SUB W6, W4, [W15]
0036D4  5B8F85     SUBB W7, W5, [W15]
0036D6  34FFD1     BRA LE, 0x367A
2554:                      {
2555:                      while (!HvAccData);
00367A  000000     NOP
00367C  8095E5     MOV Flgs, W5
00367E  220004     MOV #0x2000, W4
003680  628204     AND W5, W4, W4
003682  520FE0     SUB W4, #0x0, [W15]
003684  32FFFB     BRA Z, 0x367C
2556:                      HvAccData=0;
003686  8095E4     MOV Flgs, W4
003688  A1D004     BCLR W4, #13
00368A  8895E4     MOV W4, Flgs
2557:                      CalibrX=CalibrX+AccX;
00368C  80BD24     MOV AccX, W4
00368E  B92361     MUL.SU W4, #1, W6
003690  8153D4     MOV CalibrX, W4
003692  8153E5     MOV 0x2A7C, W5
003694  420206     ADD W4, W6, W4
003696  4A8287     ADDC W5, W7, W5
003698  8953D4     MOV W4, CalibrX
00369A  8953E5     MOV W5, 0x2A7C
2558:                      CalibrY=CalibrY+AccY;
00369C  80BD34     MOV AccY, W4
00369E  B92361     MUL.SU W4, #1, W6
0036A0  8153F4     MOV CalibrY, W4
0036A2  815405     MOV 0x2A80, W5
0036A4  420206     ADD W4, W6, W4
0036A6  4A8287     ADDC W5, W7, W5
0036A8  8953F4     MOV W4, CalibrY
0036AA  895405     MOV W5, 0x2A80
2559:                      CalibrZ=CalibrZ+AccZ;
0036AC  80BD44     MOV AccZ, W4
0036AE  B92361     MUL.SU W4, #1, W6
0036B0  815414     MOV CalibrZ, W4
0036B2  815425     MOV 0x2A84, W5
0036B4  420206     ADD W4, W6, W4
0036B6  4A8287     ADDC W5, W7, W5
0036B8  895414     MOV W4, CalibrZ
0036BA  895425     MOV W5, 0x2A84
2560:                          ClrWdt();
0036BC  FE6000     CLRWDT
2561:                      }
2562:                      CalibrateAcc=0;
0036D8  8095F4     MOV 0x12BE, W4
0036DA  A11004     BCLR W4, #1
0036DC  8895F4     MOV W4, 0x12BE
2563:              #if defined MPU6500
2564:                      CalibrationAccX=16384+(CalibrX>>8);
0036DE  8153D4     MOV CalibrX, W4
0036E0  8153E5     MOV 0x2A7C, W5
0036E2  DD2B48     SL W5, #8, W6
0036E4  DE2248     LSR W4, #8, W4
0036E6  730204     IOR W6, W4, W4
0036E8  DEAAC8     ASR W5, #8, W5
0036EA  780284     MOV W4, W5
0036EC  240004     MOV #0x4000, W4
0036EE  428204     ADD W5, W4, W4
0036F0  895584     MOV W4, CalibrationAccX
2565:                      CalibrationAccY=CalibrY>>8;
0036F2  8153F4     MOV CalibrY, W4
0036F4  815405     MOV 0x2A80, W5
0036F6  DD2948     SL W5, #8, W2
0036F8  DE2248     LSR W4, #8, W4
0036FA  710204     IOR W2, W4, W4
0036FC  DEAAC8     ASR W5, #8, W5
0036FE  780204     MOV W4, W4
003700  895594     MOV W4, CalibrationAccY
2566:                      CalibrationAccZ=CalibrZ>>8;
003702  815414     MOV CalibrZ, W4
003704  815425     MOV 0x2A84, W5
003706  DD2B48     SL W5, #8, W6
003708  DE2248     LSR W4, #8, W4
00370A  730204     IOR W6, W4, W4
00370C  DEAAC8     ASR W5, #8, W5
00370E  780204     MOV W4, W4
003710  8955A4     MOV W4, CalibrationAccZ
2567:              #else
2568:                      CalibrationAccX=CalibrX>>8;
2569:                      CalibrationAccY=CalibrY>>8;
2570:                      CalibrationAccZ=16384+(CalibrZ>>8);
2571:              #endif
2572:                      OptionsToMass();
003712  07506D     RCALL OptionsToMass
2573:                      MustTrmFlashMass=1;
003714  8095F4     MOV 0x12BE, W4
003716  A02004     BSET W4, #2
003718  8895F4     MOV W4, 0x12BE
2574:              
2575:              
2576:                      Nop();
00371A  000000     NOP
2577:                      Nop();
00371C  000000     NOP
2578:                      Nop();
00371E  000000     NOP
2579:                  }
2580:              
2581:                  
2582:                  //StateMashine();
2583:                  
2584:              
2585:              
2586:              
2587:              
2588:                  
2589:                  CalibrateCurr();
003720  023EE0     CALL CalibrateCurr
003722  000001     NOP
2590:              
2591:              
2592:              
2593:                      if (CntT_ADC>=64)
003724  8204B5     MOV CntT_ADC, W5
003726  2003F4     MOV #0x3F, W4
003728  528F84     SUB W5, W4, [W15]
00372A  3603F5     BRA LEU, 0x3F16
2594:                  {
2595:                  T1=T1_ADC>>6;
00372C  8203F4     MOV T1_ADC, W4
00372E  820405     MOV 0x4080, W5
003730  DD294A     SL W5, #10, W2
003732  DE2246     LSR W4, #6, W4
003734  710204     IOR W2, W4, W4
003736  DE2AC6     LSR W5, #6, W5
003738  780204     MOV W4, W4
00373A  8A04C4     MOV W4, T1
2596:                  T2=T2_ADC>>6;
00373C  820414     MOV T2_ADC, W4
00373E  820425     MOV 0x4084, W5
003740  DD2B4A     SL W5, #10, W6
003742  DE2246     LSR W4, #6, W4
003744  730204     IOR W6, W4, W4
003746  DE2AC6     LSR W5, #6, W5
003748  780204     MOV W4, W4
00374A  8A04D4     MOV W4, T2
2597:                  T3=T3_ADC>>6;
00374C  820434     MOV T3_ADC, W4
00374E  820445     MOV 0x4088, W5
003750  DD294A     SL W5, #10, W2
003752  DE2246     LSR W4, #6, W4
003754  710204     IOR W2, W4, W4
003756  DE2AC6     LSR W5, #6, W5
003758  780204     MOV W4, W4
00375A  8A04E4     MOV W4, T3
2598:                  T4=T4_ADC>>6;
00375C  820454     MOV T4_ADC, W4
00375E  820465     MOV 0x408C, W5
003760  DD2B4A     SL W5, #10, W6
003762  DE2246     LSR W4, #6, W4
003764  730204     IOR W6, W4, W4
003766  DE2AC6     LSR W5, #6, W5
003768  780204     MOV W4, W4
00376A  8A04F4     MOV W4, T4
2599:              #if !defined REV2
2600:                  T5=T5_ADC>>6;
2601:                  T6=T6_ADC>>6;
2602:              #endif
2603:                  T1_ADC=0;
00376C  B82260     MUL.UU W4, #0, W4
00376E  8A03F4     MOV W4, T1_ADC
003770  8A0405     MOV W5, 0x4080
2604:                  T2_ADC=0;
003772  B82260     MUL.UU W4, #0, W4
003774  8A0414     MOV W4, T2_ADC
003776  8A0425     MOV W5, 0x4084
2605:                  T3_ADC=0;
003778  B82260     MUL.UU W4, #0, W4
00377A  8A0434     MOV W4, T3_ADC
00377C  8A0445     MOV W5, 0x4088
2606:                  T4_ADC=0;
00377E  B82260     MUL.UU W4, #0, W4
003780  8A0454     MOV W4, T4_ADC
003782  8A0465     MOV W5, 0x408C
2607:                  T5_ADC=0;
003784  B82260     MUL.UU W4, #0, W4
003786  8A0474     MOV W4, T5_ADC
003788  8A0485     MOV W5, 0x4090
2608:                  T6_ADC=0;
00378A  B82260     MUL.UU W4, #0, W4
00378C  8A0494     MOV W4, T6_ADC
00378E  8A04A5     MOV W5, 0x4094
2609:              
2610:                  
2611:                  
2612:                      CurrA_P_Av=CurrA_P_Summ>>6;
003790  80BDF4     MOV CurrA_P_Summ, W4
003792  80BE05     MOV 0x17C0, W5
003794  DD294A     SL W5, #10, W2
003796  DE2246     LSR W4, #6, W4
003798  710204     IOR W2, W4, W4
00379A  DEAAC6     ASR W5, #6, W5
00379C  780204     MOV W4, W4
00379E  88B554     MOV W4, CurrA_P_Av
2613:                      CurrA_N_Av=CurrA_N_Summ>>6;
0037A0  80BE14     MOV CurrA_N_Summ, W4
0037A2  80BE25     MOV 0x17C4, W5
0037A4  DD2B4A     SL W5, #10, W6
0037A6  DE2246     LSR W4, #6, W4
0037A8  730204     IOR W6, W4, W4
0037AA  DEAAC6     ASR W5, #6, W5
0037AC  780204     MOV W4, W4
0037AE  88B564     MOV W4, CurrA_N_Av
2614:                      CurrC_P_Av=CurrC_P_Summ>>6;
0037B0  80BE34     MOV CurrC_P_Summ, W4
0037B2  80BE45     MOV 0x17C8, W5
0037B4  DD294A     SL W5, #10, W2
0037B6  DE2246     LSR W4, #6, W4
0037B8  710204     IOR W2, W4, W4
0037BA  DEAAC6     ASR W5, #6, W5
0037BC  780204     MOV W4, W4
0037BE  88B574     MOV W4, CurrC_P_Av
2615:                      CurrC_N_Av=CurrC_N_Summ>>6;
0037C0  80BE54     MOV CurrC_N_Summ, W4
0037C2  80BE65     MOV 0x17CC, W5
0037C4  DD2B4A     SL W5, #10, W6
0037C6  DE2246     LSR W4, #6, W4
0037C8  730204     IOR W6, W4, W4
0037CA  DEAAC6     ASR W5, #6, W5
0037CC  780204     MOV W4, W4
0037CE  88B584     MOV W4, CurrC_N_Av
2616:                      
2617:                      // I=(ADC*3.3)/(32768*R)  R=0.0005
2618:                      
2619:                      CurrA=((float)(CurrA_P_Av-CurrA_N_Av))*(float)0.20141602;
0037D0  80B555     MOV CurrA_P_Av, W5
0037D2  80B564     MOV CurrA_N_Av, W4
0037D4  528204     SUB W5, W4, W4
0037D6  DEA2CF     ASR W4, #15, W5
0037D8  BE0004     MOV.D W4, W0
0037DA  02257C     CALL ___floatsisf
0037DC  000000     NOP
0037DE  BE0200     MOV.D W0, W4
0037E0  240002     MOV #0x4000, W2
0037E2  23E4E3     MOV #0x3E4E, W3
0037E4  BE0004     MOV.D W4, W0
0037E6  022630     CALL ___mulsf3
0037E8  000000     NOP
0037EA  BE0200     MOV.D W0, W4
0037EC  8897A4     MOV W4, CurrA
0037EE  8897B5     MOV W5, 0x12F6
2620:                      CurrC=((float)(CurrC_P_Av-CurrC_N_Av))*(float)0.20141602;
0037F0  80B575     MOV CurrC_P_Av, W5
0037F2  80B584     MOV CurrC_N_Av, W4
0037F4  528204     SUB W5, W4, W4
0037F6  DEA2CF     ASR W4, #15, W5
0037F8  BE0004     MOV.D W4, W0
0037FA  02257C     CALL ___floatsisf
0037FC  000000     NOP
0037FE  BE0200     MOV.D W0, W4
003800  240002     MOV #0x4000, W2
003802  23E4E3     MOV #0x3E4E, W3
003804  BE0004     MOV.D W4, W0
003806  022630     CALL ___mulsf3
003808  000000     NOP
00380A  BE0200     MOV.D W0, W4
00380C  8897C4     MOV W4, CurrC
00380E  8897D5     MOV W5, 0x12FA
2621:                      
2622:                      
2623:                      CurrA_P_Summ=0;
003810  B82260     MUL.UU W4, #0, W4
003812  88BDF4     MOV W4, CurrA_P_Summ
003814  88BE05     MOV W5, 0x17C0
2624:                      CurrA_N_Summ=0;
003816  B82260     MUL.UU W4, #0, W4
003818  88BE14     MOV W4, CurrA_N_Summ
00381A  88BE25     MOV W5, 0x17C4
2625:                      CurrC_P_Summ=0;
00381C  B82260     MUL.UU W4, #0, W4
00381E  88BE34     MOV W4, CurrC_P_Summ
003820  88BE45     MOV W5, 0x17C8
2626:                      CurrC_N_Summ=0;
003822  B82260     MUL.UU W4, #0, W4
003824  88BE54     MOV W4, CurrC_N_Summ
003826  88BE65     MOV W5, 0x17CC
2627:                  
2628:                  
2629:                  
2630:                  
2631:                  CntT_ADC=0;
003828  EB0200     CLR W4
00382A  8A04B4     MOV W4, CntT_ADC
2632:              #if defined REV2_NO
2633:                  Temperature1=GetTemperaturePTC_KTY81_210(T1);
2634:                  Temperature2=GetTemperaturePTC_KTY81_210(T2);
2635:              //    Temperature3=GetTemperaturePTC_KTY81_210(T3);
2636:              
2637:                  switch (TemperatureTYPE)
2638:                  {
2639:                      case 0:
2640:                  Temperature3=GetTemperaturePTC_KTY81_210(T3);
2641:                      break;
2642:                      case 1:
2643:                  Temperature3=GetTemperaturePTC_KTY83_110(T3);
2644:                      break;
2645:                  }
2646:                  
2647:                  Temperature4=GetTemperature_NTCALUG03A103H(T4);
2648:                  Temperature5=GetTemperature_NTCALUG03A103H(T5);
2649:                  Temperature6=GetTemperaturePTC_KTY81_210(T6);
2650:                 TemperatureFETs=-100;
2651:                  Temperature2=Temperature4=Temperature5;
2652:                  if (Tmprt2)
2653:                  TemperatureFETs=Temperature4;
2654:                  
2655:                  if (Tmprt3)
2656:                  {
2657:                  if (TemperatureFETs<Temperature5)
2658:                      TemperatureFETs=Temperature5;
2659:                  }
2660:                  
2661:                  
2662:                  if (Tmprt4)
2663:                  {
2664:                  if (TemperatureFETs<Temperature6)
2665:                      TemperatureFETs=Temperature6;
2666:                  }
2667:              
2668:                  if (Tmprt2||Tmprt3||Tmprt4)
2669:                  {
2670:                  if (TemperatureFETs>TemperatureMaxIN)
2671:                  {
2672:                      if (!Sounds)
2673:                      {
2674:                  SoundNum=13;
2675:                  SoundIN=1;
2676:                      }
2677:                  PID_On=0;
2678:                  
2679:                  ETemperIN=TemperatureFETs-TemperatureMaxIN;
2680:                  
2681:                  EpTemperIN=ETemperIN*KpTemperIN;
2682:                  
2683:                  ETemperINSumm=ETemperINSumm+ETemperIN*KiTemperIN;
2684:              
2685:                  if (ETemperINSumm>MAX_PWM)
2686:                      ETemperINSumm=MAX_PWM;
2687:              
2688:                  
2689:                  PITemperIN=EpTemperIN+ETemperINSumm;
2690:                  
2691:                  if (PITemperIN>MAX_PWM)
2692:                      PITemperIN=MAX_PWM;
2693:                  PI_Temperature=(unsigned long int)PITemperIN;
2694:                  }
2695:                  else
2696:                  {
2697:                      
2698:                      if (TemperatureFETs>(TemperatureMaxIN-5))
2699:                      {
2700:                      if (!Sounds)
2701:                      {
2702:                          SoundNum=13;
2703:                          SoundIN=1;
2704:                      }
2705:                      }
2706:                          
2707:                          
2708:                     if (SoundIN)
2709:                      {
2710:                          SoundIN=0;
2711:                          Sounds=1;
2712:                      }
2713:              
2714:                      if (ETemperINSumm>0)
2715:                      {
2716:                      ETemperIN=TemperatureMaxIN-TemperatureFETs;
2717:                      if (KiTemperIN!=0)
2718:                      ETemperINSumm=ETemperINSumm-ETemperIN*KiTemperIN;
2719:                      else
2720:                      ETemperINSumm=0;            
2721:                      if (ETemperINSumm<0)
2722:                          ETemperINSumm=0;
2723:                      }
2724:                      else
2725:                          ETemperINSumm=0;
2726:                  PI_Temperature=(unsigned long int)ETemperINSumm;
2727:                  }
2728:                  }
2729:                  else
2730:                  PI_Temperature=0;
2731:              
2732:              
2733:                  
2734:                  if (Tmprt1)
2735:                  {
2736:                  if (Temperature3>TemperatureMaxOUT)
2737:                  {
2738:                      if (!Sounds)
2739:                      {
2740:                  SoundNum=8;
2741:                  SoundOUT=1;
2742:                      }
2743:                  PID_On=0;
2744:                  
2745:                  ETemperOUT=Temperature3-TemperatureMaxOUT;
2746:                  
2747:                  EpTemperOUT=ETemperOUT*KpTemperOUT;
2748:                  
2749:                  ETemperOUTSumm=ETemperOUTSumm+ETemperOUT*KiTemperOUT;
2750:                  
2751:                  if (ETemperOUTSumm>MAX_PWM)
2752:                      ETemperOUTSumm=MAX_PWM;
2753:                  
2754:                  PITemperOUT=EpTemperOUT+ETemperOUTSumm;
2755:                  
2756:                  if (PITemperOUT>MAX_PWM)
2757:                      PITemperOUT=MAX_PWM;
2758:                  PI_TemperatureOUT=(unsigned long int)PITemperOUT;
2759:                  }
2760:                  else
2761:                  {
2762:                      if (SoundOUT)
2763:                      {
2764:                          SoundOUT=0;
2765:                          Sounds=1;
2766:                      }
2767:                      if (ETemperOUTSumm>0)
2768:                      {
2769:                      ETemperOUT=TemperatureMaxOUT-Temperature3;
2770:                      if (KiTemperOUT!=0)
2771:                      ETemperOUTSumm=ETemperOUTSumm-ETemperOUT*KiTemperOUT;
2772:                      else
2773:                      ETemperOUTSumm=0;
2774:                      if (ETemperOUTSumm<0)
2775:                          ETemperOUTSumm=0;
2776:                      }
2777:                      else
2778:                          ETemperOUTSumm=0;
2779:                  PI_TemperatureOUT=(unsigned long int)ETemperOUTSumm;
2780:                  }
2781:                  }
2782:                  else
2783:                  PI_TemperatureOUT=0;
2784:              
2785:                  if (PI_TemperatureOUT>PI_Temperature)
2786:                      PI_Temperature=PI_TemperatureOUT;
2787:                      
2788:                  
2789:                  
2790:              #else
2791:                  
2792:              #if defined REV2
2793:                  switch (TemperatureTYPE)
00382C  210FF4     MOV #0x10FF, W4
00382E  784214     MOV.B [W4], W4
003830  FB8204     ZE W4, W4
003832  DEA2CF     ASR W4, #15, W5
003834  200076     MOV #0x7, W6
003836  200007     MOV #0x0, W7
003838  520F86     SUB W4, W6, [W15]
00383A  5A8F87     SUBB W5, W7, [W15]
00383C  3E0049     BRA GTU, 0x38D0
00383E  010604     BRA W4
003840  370007     BRA 0x3850
003842  37000E     BRA 0x3860
003844  370015     BRA 0x3870
003846  37001C     BRA 0x3880
003848  370023     BRA 0x3890
00384A  37002A     BRA 0x38A0
00384C  370031     BRA 0x38B0
00384E  370038     BRA 0x38C0
2794:                  {
2795:                      case 0:
2796:                  Temperature1=GetTemperaturePTC_KTY81_210(T1);
003850  8204C4     MOV T1, W4
003852  780004     MOV W4, W0
003854  027E9A     CALL GetTemperaturePTC_KTY81_210
003856  000001     NOP
003858  BE0200     MOV.D W0, W4
00385A  8A0174     MOV W4, Temperature1
00385C  8A0185     MOV W5, 0x4030
2797:                      break;
00385E  370038     BRA 0x38D0
2798:                      case 1:
2799:                  Temperature1=GetTemperaturePTC_KTY83_110(T1);
003860  8204C4     MOV T1, W4
003862  780004     MOV W4, W0
003864  02834A     CALL GetTemperaturePTC_KTY83_110
003866  000001     NOP
003868  BE0200     MOV.D W0, W4
00386A  8A0174     MOV W4, Temperature1
00386C  8A0185     MOV W5, 0x4030
2800:                      break;
00386E  370030     BRA 0x38D0
2801:                      case 2:
2802:                  Temperature1=GetTemperaturePTC_KTY83_122(T1);
003870  8204C4     MOV T1, W4
003872  780004     MOV W4, W0
003874  02843A     CALL GetTemperaturePTC_KTY83_122
003876  000001     NOP
003878  BE0200     MOV.D W0, W4
00387A  8A0174     MOV W4, Temperature1
00387C  8A0185     MOV W5, 0x4030
2803:                      break;
00387E  370028     BRA 0x38D0
2804:                      case 3:
2805:                  Temperature1=GetTemperaturePTC_KTY84_130(T1);
003880  8204C4     MOV T1, W4
003882  780004     MOV W4, W0
003884  02861A     CALL GetTemperaturePTC_KTY84_130
003886  000001     NOP
003888  BE0200     MOV.D W0, W4
00388A  8A0174     MOV W4, Temperature1
00388C  8A0185     MOV W5, 0x4030
2806:                      break;
00388E  370020     BRA 0x38D0
2807:                      case 4:
2808:                  Temperature1=GetTemperature_MF58_B_5K(T1);
003890  8204C4     MOV T1, W4
003892  780004     MOV W4, W0
003894  02807A     CALL GetTemperature_MF58_B_5K
003896  000001     NOP
003898  BE0200     MOV.D W0, W4
00389A  8A0174     MOV W4, Temperature1
00389C  8A0185     MOV W5, 0x4030
2809:                      break;
00389E  370018     BRA 0x38D0
2810:                      case 5:
2811:                  Temperature1=GetTemperature_MF58_G_10K(T1);
0038A0  8204C4     MOV T1, W4
0038A2  780004     MOV W4, W0
0038A4  02816A     CALL GetTemperature_MF58_G_10K
0038A6  000001     NOP
0038A8  BE0200     MOV.D W0, W4
0038AA  8A0174     MOV W4, Temperature1
0038AC  8A0185     MOV W5, 0x4030
2812:                      break;
0038AE  370010     BRA 0x38D0
2813:                      case 6:
2814:                  Temperature1=GetTemperature_NCP18XH103F03RB(T1);
0038B0  8204C4     MOV T1, W4
0038B2  780004     MOV W4, W0
0038B4  02825A     CALL GetTemperature_NCP18XH103F03RB
0038B6  000001     NOP
0038B8  BE0200     MOV.D W0, W4
0038BA  8A0174     MOV W4, Temperature1
0038BC  8A0185     MOV W5, 0x4030
2815:                      break;
0038BE  370008     BRA 0x38D0
2816:                      case 7:
2817:                  Temperature1=GetTemperature_NTCALUG03A103H(T1);
0038C0  8204C4     MOV T1, W4
0038C2  780004     MOV W4, W0
0038C4  027F8A     CALL GetTemperature_NTCALUG03A103H
0038C6  000001     NOP
0038C8  BE0200     MOV.D W0, W4
0038CA  8A0174     MOV W4, Temperature1
0038CC  8A0185     MOV W5, 0x4030
2818:                      break;
0038CE  000000     NOP
2819:              
2820:                      
2821:                  }
2822:                  
2823:                  switch (TemperatureTYPE_FETs)
0038D0  22FB64     MOV #0x2FB6, W4
0038D2  784214     MOV.B [W4], W4
0038D4  FB8204     ZE W4, W4
0038D6  520FE0     SUB W4, #0x0, [W15]
0038D8  320003     BRA Z, 0x38E0
0038DA  520FE1     SUB W4, #0x1, [W15]
0038DC  320009     BRA Z, 0x38F0
0038DE  370010     BRA 0x3900
2824:                  {
2825:                      case 0:
2826:                  Temperature2=GetTemperature_NTCALUG03A103H(T2);
0038E0  8204D4     MOV T2, W4
0038E2  780004     MOV W4, W0
0038E4  027F8A     CALL GetTemperature_NTCALUG03A103H
0038E6  000001     NOP
0038E8  BE0200     MOV.D W0, W4
0038EA  8A0194     MOV W4, Temperature2
0038EC  8A01A5     MOV W5, 0x4034
2827:                  //Temperature3=GetTemperature_NTCALUG03A103H(T3);
2828:                  //Temperature4=GetTemperature_NTCALUG03A103H(T4);
2829:                      break;
0038EE  370008     BRA 0x3900
2830:                      case 1:
2831:                  Temperature2=GetTemperaturePTC_KTY81_210_FETs(T2);
0038F0  8204D4     MOV T2, W4
0038F2  780004     MOV W4, W0
0038F4  02852A     CALL GetTemperaturePTC_KTY81_210_FETs
0038F6  000001     NOP
0038F8  BE0200     MOV.D W0, W4
0038FA  8A0194     MOV W4, Temperature2
0038FC  8A01A5     MOV W5, 0x4034
2832:                      break;
0038FE  000000     NOP
2833:                  }
2834:                  
2835:                  
2836:                  
2837:              #else
2838:                  switch (TemperatureTYPE)
2839:                  {
2840:                      case 0:
2841:                  Temperature1=GetTemperaturePTC_KTY81_210(T2);
2842:                      break;
2843:                      case 1:
2844:                  Temperature1=GetTemperaturePTC_KTY83_110(T2);
2845:                      break;
2846:                  }
2847:                  
2848:                  Temperature2=GetTemperature_NTCALUG03A103H(T2);
2849:                  Temperature3=GetTemperature_NTCALUG03A103H(T3);
2850:                  Temperature4=GetTemperature_NTCALUG03A103H(T4);
2851:              #endif
2852:                  
2853:                  
2854:                  
2855:                     TemperatureFETs=-100;
003900  200004     MOV #0x0, W4
003902  2C2C85     MOV #0xC2C8, W5
003904  8A02F4     MOV W4, TemperatureFETs
003906  8A0305     MOV W5, 0x4060
2856:                  
2857:                  if (Tmprt2)
003908  809755     MOV StatFlgs1, W5
00390A  202004     MOV #0x200, W4
00390C  628204     AND W5, W4, W4
00390E  520FE0     SUB W4, #0x0, [W15]
003910  320004     BRA Z, 0x391A
2858:                  TemperatureFETs=Temperature2;
003912  820194     MOV Temperature2, W4
003914  8201A5     MOV 0x4034, W5
003916  8A02F4     MOV W4, TemperatureFETs
003918  8A0305     MOV W5, 0x4060
2859:                  
2860:                  if (Tmprt3)
00391A  809764     MOV StatFlgs2, W4
00391C  620261     AND W4, #0x1, W4
00391E  520FE0     SUB W4, #0x0, [W15]
003920  320013     BRA Z, 0x3948
2861:                  {
2862:                  if (TemperatureFETs<Temperature3)
003922  8202F6     MOV TemperatureFETs, W6
003924  820307     MOV 0x4060, W7
003926  8201B4     MOV Temperature3, W4
003928  8201C5     MOV 0x4038, W5
00392A  B3C018     MOV.B #0x1, W8
00392C  BE0104     MOV.D W4, W2
00392E  BE0006     MOV.D W6, W0
003930  0224FC     CALL ___lesf2
003932  000000     NOP
003934  780200     MOV W0, W4
003936  520FE0     SUB W4, #0x0, [W15]
003938  350001     BRA LT, 0x393C
00393A  EB4400     CLR.B W8
00393C  544FE0     SUB.B W8, #0x0, [W15]
00393E  320004     BRA Z, 0x3948
2863:                      TemperatureFETs=Temperature3;
003940  8201B4     MOV Temperature3, W4
003942  8201C5     MOV 0x4038, W5
003944  8A02F4     MOV W4, TemperatureFETs
003946  8A0305     MOV W5, 0x4060
2864:                  }
2865:                  
2866:                  
2867:                  if (Tmprt4)
003948  809764     MOV StatFlgs2, W4
00394A  620262     AND W4, #0x2, W4
00394C  520FE0     SUB W4, #0x0, [W15]
00394E  320013     BRA Z, 0x3976
2868:                  {
2869:                  if (TemperatureFETs<Temperature4)
003950  8202F6     MOV TemperatureFETs, W6
003952  820307     MOV 0x4060, W7
003954  8201D4     MOV Temperature4, W4
003956  8201E5     MOV 0x403C, W5
003958  B3C018     MOV.B #0x1, W8
00395A  BE0104     MOV.D W4, W2
00395C  BE0006     MOV.D W6, W0
00395E  0224FC     CALL ___lesf2
003960  000000     NOP
003962  780200     MOV W0, W4
003964  520FE0     SUB W4, #0x0, [W15]
003966  350001     BRA LT, 0x396A
003968  EB4400     CLR.B W8
00396A  544FE0     SUB.B W8, #0x0, [W15]
00396C  320004     BRA Z, 0x3976
2870:                      TemperatureFETs=Temperature4;
00396E  8201D4     MOV Temperature4, W4
003970  8201E5     MOV 0x403C, W5
003972  8A02F4     MOV W4, TemperatureFETs
003974  8A0305     MOV W5, 0x4060
2871:                  }
2872:              
2873:                  if (Tmprt2||Tmprt3||Tmprt4)
003976  809755     MOV StatFlgs1, W5
003978  202004     MOV #0x200, W4
00397A  628204     AND W5, W4, W4
00397C  520FE0     SUB W4, #0x0, [W15]
00397E  3A0008     BRA NZ, 0x3990
003980  809764     MOV StatFlgs2, W4
003982  620261     AND W4, #0x1, W4
003984  520FE0     SUB W4, #0x0, [W15]
003986  3A0004     BRA NZ, 0x3990
003988  809764     MOV StatFlgs2, W4
00398A  620262     AND W4, #0x2, W4
00398C  520FE0     SUB W4, #0x0, [W15]
00398E  320157     BRA Z, 0x3C3E
2874:                  {
2875:                      
2876:                      if (TemperatureFETs>TemperatureMaxIN_H)
003990  8202F6     MOV TemperatureFETs, W6
003992  820307     MOV 0x4060, W7
003994  820294     MOV TemperatureMaxIN_H, W4
003996  8202A5     MOV 0x4054, W5
003998  B3C018     MOV.B #0x1, W8
00399A  BE0104     MOV.D W4, W2
00399C  BE0006     MOV.D W6, W0
00399E  022500     CALL ___gtsf2
0039A0  000000     NOP
0039A2  780200     MOV W0, W4
0039A4  520FE0     SUB W4, #0x0, [W15]
0039A6  3C0001     BRA GT, 0x39AA
0039A8  EB4400     CLR.B W8
0039AA  544FE0     SUB.B W8, #0x0, [W15]
0039AC  320003     BRA Z, 0x39B4
2877:                          CriticalError=CRERR_OVERHEATED_IN;
0039AE  214075     MOV #0x1407, W5
0039B0  B3C054     MOV.B #0x5, W4
0039B2  784A84     MOV.B W4, [W5]
2878:                          
2879:                      if (CriticalError==CRERR_OVERHEATED_IN)
0039B4  214074     MOV #0x1407, W4
0039B6  784214     MOV.B [W4], W4
0039B8  524FE5     SUB.B W4, #0x5, [W15]
0039BA  3A0012     BRA NZ, 0x39E0
2880:                      {
2881:                      if (TemperatureFETs<TemperatureMaxIN_H)
0039BC  8202F6     MOV TemperatureFETs, W6
0039BE  820307     MOV 0x4060, W7
0039C0  820294     MOV TemperatureMaxIN_H, W4
0039C2  8202A5     MOV 0x4054, W5
0039C4  B3C018     MOV.B #0x1, W8
0039C6  BE0104     MOV.D W4, W2
0039C8  BE0006     MOV.D W6, W0
0039CA  0224FC     CALL ___lesf2
0039CC  000000     NOP
0039CE  780200     MOV W0, W4
0039D0  520FE0     SUB W4, #0x0, [W15]
0039D2  350001     BRA LT, 0x39D6
0039D4  EB4400     CLR.B W8
0039D6  544FE0     SUB.B W8, #0x0, [W15]
0039D8  320003     BRA Z, 0x39E0
2882:                          CriticalError=0;
0039DA  214075     MOV #0x1407, W5
0039DC  EB4200     CLR.B W4
0039DE  784A84     MOV.B W4, [W5]
2883:                      }
2884:                          
2885:                      
2886:                  if (TemperatureFETs>TemperatureMaxIN)
0039E0  8202F6     MOV TemperatureFETs, W6
0039E2  820307     MOV 0x4060, W7
0039E4  820274     MOV TemperatureMaxIN, W4
0039E6  820285     MOV 0x4050, W5
0039E8  B3C018     MOV.B #0x1, W8
0039EA  BE0104     MOV.D W4, W2
0039EC  BE0006     MOV.D W6, W0
0039EE  022500     CALL ___gtsf2
0039F0  000000     NOP
0039F2  780200     MOV W0, W4
0039F4  520FE0     SUB W4, #0x0, [W15]
0039F6  3C0001     BRA GT, 0x39FA
0039F8  EB4400     CLR.B W8
0039FA  544FE0     SUB.B W8, #0x0, [W15]
0039FC  320088     BRA Z, 0x3B0E
003B0C  37009B     BRA 0x3C44
003C3C  370003     BRA 0x3C44
2887:                  {
2888:                      if (!Sounds)
0039FE  2124A4     MOV #0x124A, W4
003A00  784214     MOV.B [W4], W4
003A02  524FE0     SUB.B W4, #0x0, [W15]
003A04  3A0006     BRA NZ, 0x3A12
2889:                      {
2890:                  SoundNum=13;
003A06  2124B5     MOV #0x124B, W5
003A08  B3C0D4     MOV.B #0xD, W4
003A0A  784A84     MOV.B W4, [W5]
2891:                  SoundIN=1;
003A0C  809654     MOV 0x12CA, W4
003A0E  A0D004     BSET W4, #13
003A10  889654     MOV W4, 0x12CA
2892:                      }
2893:                  if (!SpeedControl)
003A12  809754     MOV StatFlgs1, W4
003A14  620262     AND W4, #0x2, W4
003A16  520FE0     SUB W4, #0x0, [W15]
003A18  3A0003     BRA NZ, 0x3A20
2894:                  PID_On=0;
003A1A  809654     MOV 0x12CA, W4
003A1C  A19004     BCLR W4, #9
003A1E  889654     MOV W4, 0x12CA
2895:                  
2896:                  ETemperIN=TemperatureFETs-TemperatureMaxIN;
003A20  8202F6     MOV TemperatureFETs, W6
003A22  820307     MOV 0x4060, W7
003A24  820274     MOV TemperatureMaxIN, W4
003A26  820285     MOV 0x4050, W5
003A28  BE0104     MOV.D W4, W2
003A2A  BE0006     MOV.D W6, W0
003A2C  0222D0     CALL ___subsf3
003A2E  000000     NOP
003A30  BE0200     MOV.D W0, W4
003A32  8A02B4     MOV W4, ETemperIN
003A34  8A02C5     MOV W5, 0x4058
2897:                  
2898:                  EpTemperIN=ETemperIN*KpTemperIN;
003A36  8202B6     MOV ETemperIN, W6
003A38  8202C7     MOV 0x4058, W7
003A3A  820334     MOV KpTemperIN, W4
003A3C  820345     MOV 0x4068, W5
003A3E  BE0104     MOV.D W4, W2
003A40  BE0006     MOV.D W6, W0
003A42  022630     CALL ___mulsf3
003A44  000000     NOP
003A46  BE0200     MOV.D W0, W4
003A48  8A02D4     MOV W4, EpTemperIN
003A4A  8A02E5     MOV W5, 0x405C
2899:                  
2900:                  ETemperINSumm=ETemperINSumm+ETemperIN*KiTemperIN;
003A4C  8202B6     MOV ETemperIN, W6
003A4E  8202C7     MOV 0x4058, W7
003A50  820314     MOV KiTemperIN, W4
003A52  820325     MOV 0x4064, W5
003A54  BE0104     MOV.D W4, W2
003A56  BE0006     MOV.D W6, W0
003A58  022630     CALL ___mulsf3
003A5A  000000     NOP
003A5C  BE0200     MOV.D W0, W4
003A5E  BE0304     MOV.D W4, W6
003A60  820354     MOV ETemperINSumm, W4
003A62  820365     MOV 0x406C, W5
003A64  BE0104     MOV.D W4, W2
003A66  BE0006     MOV.D W6, W0
003A68  0222D2     CALL ___addsf3
003A6A  000000     NOP
003A6C  BE0200     MOV.D W0, W4
003A6E  8A0354     MOV W4, ETemperINSumm
003A70  8A0365     MOV W5, 0x406C
2901:              
2902:                  if (ETemperINSumm>MAX_PWM)
003A72  8212F4     MOV MAX_PWM, W4
003A74  DEA2CF     ASR W4, #15, W5
003A76  BE0004     MOV.D W4, W0
003A78  02257C     CALL ___floatsisf
003A7A  000000     NOP
003A7C  BE0300     MOV.D W0, W6
003A7E  820354     MOV ETemperINSumm, W4
003A80  820365     MOV 0x406C, W5
003A82  B3C018     MOV.B #0x1, W8
003A84  BE0104     MOV.D W4, W2
003A86  BE0006     MOV.D W6, W0
003A88  0224FC     CALL ___lesf2
003A8A  000000     NOP
003A8C  780200     MOV W0, W4
003A8E  520FE0     SUB W4, #0x0, [W15]
003A90  350001     BRA LT, 0x3A94
003A92  EB4400     CLR.B W8
003A94  544FE0     SUB.B W8, #0x0, [W15]
003A96  320008     BRA Z, 0x3AA8
2903:                      ETemperINSumm=MAX_PWM;
003A98  8212F4     MOV MAX_PWM, W4
003A9A  DEA2CF     ASR W4, #15, W5
003A9C  BE0004     MOV.D W4, W0
003A9E  02257C     CALL ___floatsisf
003AA0  000000     NOP
003AA2  BE0200     MOV.D W0, W4
003AA4  8A0354     MOV W4, ETemperINSumm
003AA6  8A0365     MOV W5, 0x406C
2904:              
2905:                  
2906:                  PITemperIN=EpTemperIN+ETemperINSumm;
003AA8  8202D6     MOV EpTemperIN, W6
003AAA  8202E7     MOV 0x405C, W7
003AAC  820354     MOV ETemperINSumm, W4
003AAE  820365     MOV 0x406C, W5
003AB0  BE0104     MOV.D W4, W2
003AB2  BE0006     MOV.D W6, W0
003AB4  0222D2     CALL ___addsf3
003AB6  000000     NOP
003AB8  BE0200     MOV.D W0, W4
003ABA  8A0394     MOV W4, PITemperIN
003ABC  8A03A5     MOV W5, 0x4074
2907:                  
2908:                  if (PITemperIN>MAX_PWM)
003ABE  8212F4     MOV MAX_PWM, W4
003AC0  DEA2CF     ASR W4, #15, W5
003AC2  BE0004     MOV.D W4, W0
003AC4  02257C     CALL ___floatsisf
003AC6  000000     NOP
003AC8  BE0300     MOV.D W0, W6
003ACA  820394     MOV PITemperIN, W4
003ACC  8203A5     MOV 0x4074, W5
003ACE  B3C018     MOV.B #0x1, W8
003AD0  BE0104     MOV.D W4, W2
003AD2  BE0006     MOV.D W6, W0
003AD4  0224FC     CALL ___lesf2
003AD6  000000     NOP
003AD8  780200     MOV W0, W4
003ADA  520FE0     SUB W4, #0x0, [W15]
003ADC  350001     BRA LT, 0x3AE0
003ADE  EB4400     CLR.B W8
003AE0  544FE0     SUB.B W8, #0x0, [W15]
003AE2  320008     BRA Z, 0x3AF4
2909:                      PITemperIN=MAX_PWM;
003AE4  8212F4     MOV MAX_PWM, W4
003AE6  DEA2CF     ASR W4, #15, W5
003AE8  BE0004     MOV.D W4, W0
003AEA  02257C     CALL ___floatsisf
003AEC  000000     NOP
003AEE  BE0200     MOV.D W0, W4
003AF0  8A0394     MOV W4, PITemperIN
003AF2  8A03A5     MOV W5, 0x4074
2910:                  PI_Temperature=(unsigned long int)PITemperIN;
003AF4  820394     MOV PITemperIN, W4
003AF6  8203A5     MOV 0x4074, W5
003AF8  BE0004     MOV.D W4, W0
003AFA  022546     CALL ___fixunssfsi
003AFC  000000     NOP
003AFE  BE0200     MOV.D W0, W4
003B00  BE0004     MOV.D W4, W0
003B02  022582     CALL ___floatunsisf
003B04  000000     NOP
003B06  BE0200     MOV.D W0, W4
003B08  8A0374     MOV W4, PI_Temperature
003B0A  8A0385     MOV W5, 0x4070
2911:                  }
2912:                  else
2913:                  {
2914:                      EpTemperIN=0;
003B0E  B82260     MUL.UU W4, #0, W4
003B10  8A02D4     MOV W4, EpTemperIN
003B12  8A02E5     MOV W5, 0x405C
2915:                      if (Monocycle)
003B14  809745     MOV StatFlgs, W5
003B16  280004     MOV #0x8000, W4
003B18  628204     AND W5, W4, W4
003B1A  520FE0     SUB W4, #0x0, [W15]
003B1C  32002D     BRA Z, 0x3B78
2916:                      {
2917:                  if (TemperatureFETs>(TemperatureMaxIN-5))
003B1E  820274     MOV TemperatureMaxIN, W4
003B20  820285     MOV 0x4050, W5
003B22  200002     MOV #0x0, W2
003B24  240A03     MOV #0x40A0, W3
003B26  BE0004     MOV.D W4, W0
003B28  0222D0     CALL ___subsf3
003B2A  000000     NOP
003B2C  BE0200     MOV.D W0, W4
003B2E  BE0304     MOV.D W4, W6
003B30  8202F4     MOV TemperatureFETs, W4
003B32  820305     MOV 0x4060, W5
003B34  B3C018     MOV.B #0x1, W8
003B36  BE0104     MOV.D W4, W2
003B38  BE0006     MOV.D W6, W0
003B3A  0224FC     CALL ___lesf2
003B3C  000000     NOP
003B3E  780200     MOV W0, W4
003B40  520FE0     SUB W4, #0x0, [W15]
003B42  350001     BRA LT, 0x3B46
003B44  EB4400     CLR.B W8
003B46  544FE0     SUB.B W8, #0x0, [W15]
003B48  32000B     BRA Z, 0x3B60
2918:                  {
2919:                      if (!Sounds)
003B4A  2124A4     MOV #0x124A, W4
003B4C  784214     MOV.B [W4], W4
003B4E  524FE0     SUB.B W4, #0x0, [W15]
003B50  3A001E     BRA NZ, 0x3B8E
2920:                      {
2921:                  SoundNum=13;
003B52  2124B5     MOV #0x124B, W5
003B54  B3C0D4     MOV.B #0xD, W4
003B56  784A84     MOV.B W4, [W5]
2922:                  SoundIN=1;
003B58  809654     MOV 0x12CA, W4
003B5A  A0D004     BSET W4, #13
003B5C  889654     MOV W4, 0x12CA
003B5E  370017     BRA 0x3B8E
2923:                      }
2924:                  }
2925:                  else
2926:                  {
2927:                     if (SoundIN)
003B60  809655     MOV 0x12CA, W5
003B62  220004     MOV #0x2000, W4
003B64  628204     AND W5, W4, W4
003B66  520FE0     SUB W4, #0x0, [W15]
003B68  320012     BRA Z, 0x3B8E
2928:                      {
2929:                          SoundIN=0;
003B6A  809654     MOV 0x12CA, W4
003B6C  A1D004     BCLR W4, #13
003B6E  889654     MOV W4, 0x12CA
2930:                          Sounds=1;
003B70  2124A5     MOV #0x124A, W5
003B72  B3C014     MOV.B #0x1, W4
003B74  784A84     MOV.B W4, [W5]
003B76  37000B     BRA 0x3B8E
2931:                      }
2932:                  }
2933:                      }
2934:                      else
2935:                      {
2936:                     if (SoundIN)
003B78  809655     MOV 0x12CA, W5
003B7A  220004     MOV #0x2000, W4
003B7C  628204     AND W5, W4, W4
003B7E  520FE0     SUB W4, #0x0, [W15]
003B80  320006     BRA Z, 0x3B8E
2937:                      {
2938:                          SoundIN=0;
003B82  809654     MOV 0x12CA, W4
003B84  A1D004     BCLR W4, #13
003B86  889654     MOV W4, 0x12CA
2939:                          Sounds=1;
003B88  2124A5     MOV #0x124A, W5
003B8A  B3C014     MOV.B #0x1, W4
003B8C  784A84     MOV.B W4, [W5]
2940:                      }
2941:                      }
2942:                  
2943:                      if (ETemperINSumm>0)
003B8E  820354     MOV ETemperINSumm, W4
003B90  820365     MOV 0x406C, W5
003B92  B3C018     MOV.B #0x1, W8
003B94  B81160     MUL.UU W2, #0, W2
003B96  BE0004     MOV.D W4, W0
003B98  022500     CALL ___gtsf2
003B9A  000000     NOP
003B9C  780200     MOV W0, W4
003B9E  520FE0     SUB W4, #0x0, [W15]
003BA0  3C0001     BRA GT, 0x3BA4
003BA2  EB4400     CLR.B W8
003BA4  544FE0     SUB.B W8, #0x0, [W15]
003BA6  32003B     BRA Z, 0x3C1E
2944:                      {
2945:                      ETemperIN=TemperatureMaxIN-TemperatureFETs;
003BA8  820276     MOV TemperatureMaxIN, W6
003BAA  820287     MOV 0x4050, W7
003BAC  8202F4     MOV TemperatureFETs, W4
003BAE  820305     MOV 0x4060, W5
003BB0  BE0104     MOV.D W4, W2
003BB2  BE0006     MOV.D W6, W0
003BB4  0222D0     CALL ___subsf3
003BB6  000000     NOP
003BB8  BE0200     MOV.D W0, W4
003BBA  8A02B4     MOV W4, ETemperIN
003BBC  8A02C5     MOV W5, 0x4058
2946:                      if (KiTemperIN!=0)
003BBE  820314     MOV KiTemperIN, W4
003BC0  820325     MOV 0x4064, W5
003BC2  B81160     MUL.UU W2, #0, W2
003BC4  BE0004     MOV.D W4, W0
003BC6  022586     CALL ___nesf2
003BC8  000000     NOP
003BCA  780200     MOV W0, W4
003BCC  520FE0     SUB W4, #0x0, [W15]
003BCE  320013     BRA Z, 0x3BF6
2947:                      ETemperINSumm=ETemperINSumm-ETemperIN*KiTemperIN;
003BD0  820358     MOV ETemperINSumm, W8
003BD2  820369     MOV 0x406C, W9
003BD4  8202B6     MOV ETemperIN, W6
003BD6  8202C7     MOV 0x4058, W7
003BD8  820314     MOV KiTemperIN, W4
003BDA  820325     MOV 0x4064, W5
003BDC  BE0104     MOV.D W4, W2
003BDE  BE0006     MOV.D W6, W0
003BE0  022630     CALL ___mulsf3
003BE2  000000     NOP
003BE4  BE0200     MOV.D W0, W4
003BE6  BE0104     MOV.D W4, W2
003BE8  BE0008     MOV.D W8, W0
003BEA  0222D0     CALL ___subsf3
003BEC  000000     NOP
003BEE  BE0200     MOV.D W0, W4
003BF0  8A0354     MOV W4, ETemperINSumm
003BF2  8A0365     MOV W5, 0x406C
003BF4  370003     BRA 0x3BFC
2948:                      else
2949:                      ETemperINSumm=0;            
003BF6  B82260     MUL.UU W4, #0, W4
003BF8  8A0354     MOV W4, ETemperINSumm
003BFA  8A0365     MOV W5, 0x406C
2950:                      if (ETemperINSumm<0)
003BFC  820354     MOV ETemperINSumm, W4
003BFE  820365     MOV 0x406C, W5
003C00  B3C018     MOV.B #0x1, W8
003C02  B81160     MUL.UU W2, #0, W2
003C04  BE0004     MOV.D W4, W0
003C06  0224FC     CALL ___lesf2
003C08  000000     NOP
003C0A  780200     MOV W0, W4
003C0C  520FE0     SUB W4, #0x0, [W15]
003C0E  350001     BRA LT, 0x3C12
003C10  EB4400     CLR.B W8
003C12  544FE0     SUB.B W8, #0x0, [W15]
003C14  320007     BRA Z, 0x3C24
2951:                          ETemperINSumm=0;
003C16  B82260     MUL.UU W4, #0, W4
003C18  8A0354     MOV W4, ETemperINSumm
003C1A  8A0365     MOV W5, 0x406C
003C1C  370003     BRA 0x3C24
2952:                      }
2953:                      else
2954:                          ETemperINSumm=0;
003C1E  B82260     MUL.UU W4, #0, W4
003C20  8A0354     MOV W4, ETemperINSumm
003C22  8A0365     MOV W5, 0x406C
2955:                  PI_Temperature=(unsigned long int)ETemperINSumm;
003C24  820354     MOV ETemperINSumm, W4
003C26  820365     MOV 0x406C, W5
003C28  BE0004     MOV.D W4, W0
003C2A  022546     CALL ___fixunssfsi
003C2C  000000     NOP
003C2E  BE0200     MOV.D W0, W4
003C30  BE0004     MOV.D W4, W0
003C32  022582     CALL ___floatunsisf
003C34  000000     NOP
003C36  BE0200     MOV.D W0, W4
003C38  8A0374     MOV W4, PI_Temperature
003C3A  8A0385     MOV W5, 0x4070
2956:                  }
2957:                  }
2958:                  else
2959:                  PI_Temperature=0;
003C3E  B82260     MUL.UU W4, #0, W4
003C40  8A0374     MOV W4, PI_Temperature
003C42  8A0385     MOV W5, 0x4070
2960:              
2961:              
2962:                  
2963:                  if (Tmprt1)
003C44  809755     MOV StatFlgs1, W5
003C46  200804     MOV #0x80, W4
003C48  628204     AND W5, W4, W4
003C4A  520FE0     SUB W4, #0x0, [W15]
003C4C  32013C     BRA Z, 0x3EC6
2964:                  {
2965:                  if (Temperature1>TemperatureMaxOUT_H)
003C4E  820176     MOV Temperature1, W6
003C50  820187     MOV 0x4030, W7
003C52  820254     MOV TemperatureMaxOUT_H, W4
003C54  820265     MOV 0x404C, W5
003C56  B3C018     MOV.B #0x1, W8
003C58  BE0104     MOV.D W4, W2
003C5A  BE0006     MOV.D W6, W0
003C5C  022500     CALL ___gtsf2
003C5E  000000     NOP
003C60  780200     MOV W0, W4
003C62  520FE0     SUB W4, #0x0, [W15]
003C64  3C0001     BRA GT, 0x3C68
003C66  EB4400     CLR.B W8
003C68  544FE0     SUB.B W8, #0x0, [W15]
003C6A  320004     BRA Z, 0x3C74
2966:                      CriticalError=CRERR_OVERHEATED_OUT;
003C6C  214075     MOV #0x1407, W5
003C6E  B3C064     MOV.B #0x6, W4
003C70  784A84     MOV.B W4, [W5]
003C72  370007     BRA 0x3C82
2967:                  else
2968:                  {
2969:                      if (CriticalError==CRERR_OVERHEATED_OUT)
003C74  214074     MOV #0x1407, W4
003C76  784214     MOV.B [W4], W4
003C78  524FE6     SUB.B W4, #0x6, [W15]
003C7A  3A0003     BRA NZ, 0x3C82
2970:                          CriticalError=0;
003C7C  214075     MOV #0x1407, W5
003C7E  EB4200     CLR.B W4
003C80  784A84     MOV.B W4, [W5]
2971:                  }
2972:              
2973:                      
2974:                      
2975:                      if (Temperature1>TemperatureMaxOUT)
003C82  820176     MOV Temperature1, W6
003C84  820187     MOV 0x4030, W7
003C86  820234     MOV TemperatureMaxOUT, W4
003C88  820245     MOV 0x4048, W5
003C8A  B3C018     MOV.B #0x1, W8
003C8C  BE0104     MOV.D W4, W2
003C8E  BE0006     MOV.D W6, W0
003C90  022500     CALL ___gtsf2
003C92  000000     NOP
003C94  780200     MOV W0, W4
003C96  520FE0     SUB W4, #0x0, [W15]
003C98  3C0001     BRA GT, 0x3C9C
003C9A  EB4400     CLR.B W8
003C9C  544FE0     SUB.B W8, #0x0, [W15]
003C9E  320084     BRA Z, 0x3DA8
2976:                  {
2977:                      if (!Sounds)
003CA0  2124A4     MOV #0x124A, W4
003CA2  784214     MOV.B [W4], W4
003CA4  524FE0     SUB.B W4, #0x0, [W15]
003CA6  3A0006     BRA NZ, 0x3CB4
2978:                      {
2979:                  SoundNum=8;
003CA8  2124B5     MOV #0x124B, W5
003CAA  B3C084     MOV.B #0x8, W4
003CAC  784A84     MOV.B W4, [W5]
2980:                  SoundOUT=1;
003CAE  809654     MOV 0x12CA, W4
003CB0  A00004     BSET W4, #0
003CB2  889654     MOV W4, 0x12CA
2981:                      }
2982:                  if (!SpeedControl)
003CB4  809754     MOV StatFlgs1, W4
003CB6  620262     AND W4, #0x2, W4
003CB8  520FE0     SUB W4, #0x0, [W15]
003CBA  3A0003     BRA NZ, 0x3CC2
2983:                  PID_On=0;
003CBC  809654     MOV 0x12CA, W4
003CBE  A19004     BCLR W4, #9
003CC0  889654     MOV W4, 0x12CA
2984:                  
2985:                  ETemperOUT=Temperature1-TemperatureMaxOUT;
003CC2  820176     MOV Temperature1, W6
003CC4  820187     MOV 0x4030, W7
003CC6  820234     MOV TemperatureMaxOUT, W4
003CC8  820245     MOV 0x4048, W5
003CCA  BE0104     MOV.D W4, W2
003CCC  BE0006     MOV.D W6, W0
003CCE  0222D0     CALL ___subsf3
003CD0  000000     NOP
003CD2  BE0200     MOV.D W0, W4
003CD4  8A0534     MOV W4, ETemperOUT
003CD6  8A0545     MOV W5, 0x40A8
2986:                  
2987:                  EpTemperOUT=ETemperOUT*KpTemperOUT;
003CD8  820536     MOV ETemperOUT, W6
003CDA  820547     MOV 0x40A8, W7
003CDC  8203D4     MOV KpTemperOUT, W4
003CDE  8203E5     MOV 0x407C, W5
003CE0  BE0104     MOV.D W4, W2
003CE2  BE0006     MOV.D W6, W0
003CE4  022630     CALL ___mulsf3
003CE6  000000     NOP
003CE8  BE0200     MOV.D W0, W4
003CEA  8A0594     MOV W4, EpTemperOUT
003CEC  8A05A5     MOV W5, 0x40B4
2988:                  
2989:                  ETemperOUTSumm=ETemperOUTSumm+ETemperOUT*KiTemperOUT;
003CEE  820536     MOV ETemperOUT, W6
003CF0  820547     MOV 0x40A8, W7
003CF2  8203B4     MOV KiTemperOUT, W4
003CF4  8203C5     MOV 0x4078, W5
003CF6  BE0104     MOV.D W4, W2
003CF8  BE0006     MOV.D W6, W0
003CFA  022630     CALL ___mulsf3
003CFC  000000     NOP
003CFE  BE0200     MOV.D W0, W4
003D00  BE0304     MOV.D W4, W6
003D02  820554     MOV ETemperOUTSumm, W4
003D04  820565     MOV 0x40AC, W5
003D06  BE0104     MOV.D W4, W2
003D08  BE0006     MOV.D W6, W0
003D0A  0222D2     CALL ___addsf3
003D0C  000000     NOP
003D0E  BE0200     MOV.D W0, W4
003D10  8A0554     MOV W4, ETemperOUTSumm
003D12  8A0565     MOV W5, 0x40AC
2990:                  
2991:                  if (ETemperOUTSumm>MAX_PWM)
003D14  8212F4     MOV MAX_PWM, W4
003D16  DEA2CF     ASR W4, #15, W5
003D18  BE0004     MOV.D W4, W0
003D1A  02257C     CALL ___floatsisf
003D1C  000000     NOP
003D1E  BE0300     MOV.D W0, W6
003D20  820554     MOV ETemperOUTSumm, W4
003D22  820565     MOV 0x40AC, W5
003D24  B3C018     MOV.B #0x1, W8
003D26  BE0104     MOV.D W4, W2
003D28  BE0006     MOV.D W6, W0
003D2A  0224FC     CALL ___lesf2
003D2C  000000     NOP
003D2E  780200     MOV W0, W4
003D30  520FE0     SUB W4, #0x0, [W15]
003D32  350001     BRA LT, 0x3D36
003D34  EB4400     CLR.B W8
003D36  544FE0     SUB.B W8, #0x0, [W15]
003D38  320008     BRA Z, 0x3D4A
2992:                      ETemperOUTSumm=MAX_PWM;
003D3A  8212F4     MOV MAX_PWM, W4
003D3C  DEA2CF     ASR W4, #15, W5
003D3E  BE0004     MOV.D W4, W0
003D40  02257C     CALL ___floatsisf
003D42  000000     NOP
003D44  BE0200     MOV.D W0, W4
003D46  8A0554     MOV W4, ETemperOUTSumm
003D48  8A0565     MOV W5, 0x40AC
2993:                  
2994:                  PITemperOUT=EpTemperOUT+ETemperOUTSumm;
003D4A  820596     MOV EpTemperOUT, W6
003D4C  8205A7     MOV 0x40B4, W7
003D4E  820554     MOV ETemperOUTSumm, W4
003D50  820565     MOV 0x40AC, W5
003D52  BE0104     MOV.D W4, W2
003D54  BE0006     MOV.D W6, W0
003D56  0222D2     CALL ___addsf3
003D58  000000     NOP
003D5A  BE0200     MOV.D W0, W4
003D5C  8A0574     MOV W4, PITemperOUT
003D5E  8A0585     MOV W5, 0x40B0
2995:                  
2996:                  if (PITemperOUT>MAX_PWM)
003D60  8212F4     MOV MAX_PWM, W4
003D62  DEA2CF     ASR W4, #15, W5
003D64  BE0004     MOV.D W4, W0
003D66  02257C     CALL ___floatsisf
003D68  000000     NOP
003D6A  BE0300     MOV.D W0, W6
003D6C  820574     MOV PITemperOUT, W4
003D6E  820585     MOV 0x40B0, W5
003D70  B3C018     MOV.B #0x1, W8
003D72  BE0104     MOV.D W4, W2
003D74  BE0006     MOV.D W6, W0
003D76  0224FC     CALL ___lesf2
003D78  000000     NOP
003D7A  780200     MOV W0, W4
003D7C  520FE0     SUB W4, #0x0, [W15]
003D7E  350001     BRA LT, 0x3D82
003D80  EB4400     CLR.B W8
003D82  544FE0     SUB.B W8, #0x0, [W15]
003D84  320008     BRA Z, 0x3D96
2997:                      PITemperOUT=MAX_PWM;
003D86  8212F4     MOV MAX_PWM, W4
003D88  DEA2CF     ASR W4, #15, W5
003D8A  BE0004     MOV.D W4, W0
003D8C  02257C     CALL ___floatsisf
003D8E  000000     NOP
003D90  BE0200     MOV.D W0, W4
003D92  8A0574     MOV W4, PITemperOUT
003D94  8A0585     MOV W5, 0x40B0
2998:                  PI_TemperatureOUT=(unsigned long int)PITemperOUT;
003D96  820574     MOV PITemperOUT, W4
003D98  820585     MOV 0x40B0, W5
003D9A  BE0004     MOV.D W4, W0
003D9C  022546     CALL ___fixunssfsi
003D9E  000000     NOP
003DA0  BE0200     MOV.D W0, W4
003DA2  8A05B4     MOV W4, PI_TemperatureOUT
003DA4  8A05C5     MOV W5, 0x40B8
003DA6  37009C     BRA 0x3EE0
2999:                  }
3000:                  else
3001:                  {
3002:                              if (Monocycle)
003DA8  809745     MOV StatFlgs, W5
003DAA  280004     MOV #0x8000, W4
003DAC  628204     AND W5, W4, W4
003DAE  520FE0     SUB W4, #0x0, [W15]
003DB0  32002C     BRA Z, 0x3E0A
3003:                      {
3004:                      if (Temperature1>(TemperatureMaxOUT-5))
003DB2  820234     MOV TemperatureMaxOUT, W4
003DB4  820245     MOV 0x4048, W5
003DB6  200002     MOV #0x0, W2
003DB8  240A03     MOV #0x40A0, W3
003DBA  BE0004     MOV.D W4, W0
003DBC  0222D0     CALL ___subsf3
003DBE  000000     NOP
003DC0  BE0200     MOV.D W0, W4
003DC2  BE0304     MOV.D W4, W6
003DC4  820174     MOV Temperature1, W4
003DC6  820185     MOV 0x4030, W5
003DC8  B3C018     MOV.B #0x1, W8
003DCA  BE0104     MOV.D W4, W2
003DCC  BE0006     MOV.D W6, W0
003DCE  0224FC     CALL ___lesf2
003DD0  000000     NOP
003DD2  780200     MOV W0, W4
003DD4  520FE0     SUB W4, #0x0, [W15]
003DD6  350001     BRA LT, 0x3DDA
003DD8  EB4400     CLR.B W8
003DDA  544FE0     SUB.B W8, #0x0, [W15]
003DDC  32000B     BRA Z, 0x3DF4
3005:                      {
3006:                          if (!Sounds)
003DDE  2124A4     MOV #0x124A, W4
003DE0  784214     MOV.B [W4], W4
003DE2  524FE0     SUB.B W4, #0x0, [W15]
003DE4  3A001C     BRA NZ, 0x3E1E
3007:                          {
3008:                          SoundNum=8;
003DE6  2124B5     MOV #0x124B, W5
003DE8  B3C084     MOV.B #0x8, W4
003DEA  784A84     MOV.B W4, [W5]
3009:                          SoundOUT=1;
003DEC  809654     MOV 0x12CA, W4
003DEE  A00004     BSET W4, #0
003DF0  889654     MOV W4, 0x12CA
003DF2  370015     BRA 0x3E1E
3010:                          }
3011:                      }
3012:                      else
3013:                      {
3014:                      if (SoundOUT)
003DF4  809654     MOV 0x12CA, W4
003DF6  620261     AND W4, #0x1, W4
003DF8  520FE0     SUB W4, #0x0, [W15]
003DFA  320011     BRA Z, 0x3E1E
3015:                      {
3016:                          SoundOUT=0;
003DFC  809654     MOV 0x12CA, W4
003DFE  A10004     BCLR W4, #0
003E00  889654     MOV W4, 0x12CA
3017:                          Sounds=1;
003E02  2124A5     MOV #0x124A, W5
003E04  B3C014     MOV.B #0x1, W4
003E06  784A84     MOV.B W4, [W5]
003E08  37000A     BRA 0x3E1E
3018:                      }
3019:                      }
3020:                              }
3021:                              else
3022:                              {
3023:                      if (SoundOUT)
003E0A  809654     MOV 0x12CA, W4
003E0C  620261     AND W4, #0x1, W4
003E0E  520FE0     SUB W4, #0x0, [W15]
003E10  320006     BRA Z, 0x3E1E
3024:                      {
3025:                          SoundOUT=0;
003E12  809654     MOV 0x12CA, W4
003E14  A10004     BCLR W4, #0
003E16  889654     MOV W4, 0x12CA
3026:                          Sounds=1;
003E18  2124A5     MOV #0x124A, W5
003E1A  B3C014     MOV.B #0x1, W4
003E1C  784A84     MOV.B W4, [W5]
3027:                      }
3028:                              }
3029:                      if (ETemperOUTSumm>0)
003E1E  820554     MOV ETemperOUTSumm, W4
003E20  820565     MOV 0x40AC, W5
003E22  B3C018     MOV.B #0x1, W8
003E24  B81160     MUL.UU W2, #0, W2
003E26  BE0004     MOV.D W4, W0
003E28  022500     CALL ___gtsf2
003E2A  000000     NOP
003E2C  780200     MOV W0, W4
003E2E  520FE0     SUB W4, #0x0, [W15]
003E30  3C0001     BRA GT, 0x3E34
003E32  EB4400     CLR.B W8
003E34  544FE0     SUB.B W8, #0x0, [W15]
003E36  32003B     BRA Z, 0x3EAE
3030:                      {
3031:                      ETemperOUT=TemperatureMaxOUT-Temperature1;
003E38  820236     MOV TemperatureMaxOUT, W6
003E3A  820247     MOV 0x4048, W7
003E3C  820174     MOV Temperature1, W4
003E3E  820185     MOV 0x4030, W5
003E40  BE0104     MOV.D W4, W2
003E42  BE0006     MOV.D W6, W0
003E44  0222D0     CALL ___subsf3
003E46  000000     NOP
003E48  BE0200     MOV.D W0, W4
003E4A  8A0534     MOV W4, ETemperOUT
003E4C  8A0545     MOV W5, 0x40A8
3032:                      if (KiTemperOUT!=0)
003E4E  8203B4     MOV KiTemperOUT, W4
003E50  8203C5     MOV 0x4078, W5
003E52  B81160     MUL.UU W2, #0, W2
003E54  BE0004     MOV.D W4, W0
003E56  022586     CALL ___nesf2
003E58  000000     NOP
003E5A  780200     MOV W0, W4
003E5C  520FE0     SUB W4, #0x0, [W15]
003E5E  320013     BRA Z, 0x3E86
3033:                      ETemperOUTSumm=ETemperOUTSumm-ETemperOUT*KiTemperOUT;
003E60  820558     MOV ETemperOUTSumm, W8
003E62  820569     MOV 0x40AC, W9
003E64  820536     MOV ETemperOUT, W6
003E66  820547     MOV 0x40A8, W7
003E68  8203B4     MOV KiTemperOUT, W4
003E6A  8203C5     MOV 0x4078, W5
003E6C  BE0104     MOV.D W4, W2
003E6E  BE0006     MOV.D W6, W0
003E70  022630     CALL ___mulsf3
003E72  000000     NOP
003E74  BE0200     MOV.D W0, W4
003E76  BE0104     MOV.D W4, W2
003E78  BE0008     MOV.D W8, W0
003E7A  0222D0     CALL ___subsf3
003E7C  000000     NOP
003E7E  BE0200     MOV.D W0, W4
003E80  8A0554     MOV W4, ETemperOUTSumm
003E82  8A0565     MOV W5, 0x40AC
003E84  370003     BRA 0x3E8C
3034:                      else
3035:                      ETemperOUTSumm=0;
003E86  B82260     MUL.UU W4, #0, W4
003E88  8A0554     MOV W4, ETemperOUTSumm
003E8A  8A0565     MOV W5, 0x40AC
3036:                      if (ETemperOUTSumm<0)
003E8C  820554     MOV ETemperOUTSumm, W4
003E8E  820565     MOV 0x40AC, W5
003E90  B3C018     MOV.B #0x1, W8
003E92  B81160     MUL.UU W2, #0, W2
003E94  BE0004     MOV.D W4, W0
003E96  0224FC     CALL ___lesf2
003E98  000000     NOP
003E9A  780200     MOV W0, W4
003E9C  520FE0     SUB W4, #0x0, [W15]
003E9E  350001     BRA LT, 0x3EA2
003EA0  EB4400     CLR.B W8
003EA2  544FE0     SUB.B W8, #0x0, [W15]
003EA4  320007     BRA Z, 0x3EB4
3037:                          ETemperOUTSumm=0;
003EA6  B82260     MUL.UU W4, #0, W4
003EA8  8A0554     MOV W4, ETemperOUTSumm
003EAA  8A0565     MOV W5, 0x40AC
003EAC  370003     BRA 0x3EB4
3038:                      }
3039:                      else
3040:                          ETemperOUTSumm=0;
003EAE  B82260     MUL.UU W4, #0, W4
003EB0  8A0554     MOV W4, ETemperOUTSumm
003EB2  8A0565     MOV W5, 0x40AC
3041:                  PI_TemperatureOUT=(unsigned long int)ETemperOUTSumm;
003EB4  820554     MOV ETemperOUTSumm, W4
003EB6  820565     MOV 0x40AC, W5
003EB8  BE0004     MOV.D W4, W0
003EBA  022546     CALL ___fixunssfsi
003EBC  000000     NOP
003EBE  BE0200     MOV.D W0, W4
003EC0  8A05B4     MOV W4, PI_TemperatureOUT
003EC2  8A05C5     MOV W5, 0x40B8
003EC4  37000D     BRA 0x3EE0
3042:                  }
3043:                  }
3044:                  else
3045:                  {
3046:                  PI_TemperatureOUT=0;
003EC6  B82260     MUL.UU W4, #0, W4
003EC8  8A05B4     MOV W4, PI_TemperatureOUT
003ECA  8A05C5     MOV W5, 0x40B8
3047:                  if (CriticalError==CRERR_OVERHEATED_OUT)
003ECC  214074     MOV #0x1407, W4
003ECE  784214     MOV.B [W4], W4
003ED0  524FE6     SUB.B W4, #0x6, [W15]
003ED2  3A0006     BRA NZ, 0x3EE0
3048:                  {
3049:                      CriticalError=0;
003ED4  214075     MOV #0x1407, W5
003ED6  EB4200     CLR.B W4
003ED8  784A84     MOV.B W4, [W5]
3050:                      Sounds=1;
003EDA  2124A5     MOV #0x124A, W5
003EDC  B3C014     MOV.B #0x1, W4
003EDE  784A84     MOV.B W4, [W5]
3051:                  }
3052:              
3053:                  }
3054:              
3055:                  if (PI_TemperatureOUT>PI_Temperature)
003EE0  8205B4     MOV PI_TemperatureOUT, W4
003EE2  8205C5     MOV 0x40B8, W5
003EE4  BE0004     MOV.D W4, W0
003EE6  022582     CALL ___floatunsisf
003EE8  000000     NOP
003EEA  BE0300     MOV.D W0, W6
003EEC  820374     MOV PI_Temperature, W4
003EEE  820385     MOV 0x4070, W5
003EF0  B3C018     MOV.B #0x1, W8
003EF2  BE0104     MOV.D W4, W2
003EF4  BE0006     MOV.D W6, W0
003EF6  022500     CALL ___gtsf2
003EF8  000000     NOP
003EFA  780200     MOV W0, W4
003EFC  520FE0     SUB W4, #0x0, [W15]
003EFE  3C0001     BRA GT, 0x3F02
003F00  EB4400     CLR.B W8
003F02  544FE0     SUB.B W8, #0x0, [W15]
003F04  320008     BRA Z, 0x3F16
3056:                      PI_Temperature=PI_TemperatureOUT;
003F06  8205B4     MOV PI_TemperatureOUT, W4
003F08  8205C5     MOV 0x40B8, W5
003F0A  BE0004     MOV.D W4, W0
003F0C  022582     CALL ___floatunsisf
003F0E  000000     NOP
003F10  BE0200     MOV.D W0, W4
003F12  8A0374     MOV W4, PI_Temperature
003F14  8A0385     MOV W5, 0x4070
3057:                      
3058:                  
3059:                  
3060:              #endif
3061:              
3062:               
3063:                      }
3064:              
3065:              
3066:              
3067:              //    if (!((HvGyroData)&&(HvAccData)))
3068:                //      return;
3069:                
3070:                  
3071:              
3072:                  Curr1Mass[CURRMASS_SIZE-1]=Crr1;
003F16  809524     MOV Crr1, W4
003F18  89C324     MOV W4, 0x3864
3073:                  
3074:                  CrSumm=0;
003F1A  B82260     MUL.UU W4, #0, W4
003F1C  8A17D4     MOV W4, CrSumm
003F1E  8A17E5     MOV W5, 0x42FC
3075:                  for (l=0;l<CURRMASS_SIZE;l++)
003F20  EB0200     CLR W4
003F22  89C334     MOV W4, l
003F24  37000F     BRA 0x3F44
003F3E  81C334     MOV l, W4
003F40  E80204     INC W4, W4
003F42  89C334     MOV W4, l
003F44  81C335     MOV l, W5
003F46  2003F4     MOV #0x3F, W4
003F48  528F84     SUB W5, W4, [W15]
003F4A  36FFED     BRA LEU, 0x3F26
3076:                  CrSumm=CrSumm+Curr1Mass[l];
003F26  81C334     MOV l, W4
003F28  420284     ADD W4, W4, W5
003F2A  237E64     MOV #0x37E6, W4
003F2C  428204     ADD W5, W4, W4
003F2E  780214     MOV [W4], W4
003F30  B82361     MUL.UU W4, #1, W6
003F32  8217D4     MOV CrSumm, W4
003F34  8217E5     MOV 0x42FC, W5
003F36  420206     ADD W4, W6, W4
003F38  4A8287     ADDC W5, W7, W5
003F3A  8A17D4     MOV W4, CrSumm
003F3C  8A17E5     MOV W5, 0x42FC
3077:              
3078:                  for (l=0;l<(CURRMASS_SIZE-1);l++)
003F4C  EB0200     CLR W4
003F4E  89C334     MOV W4, l
003F50  37000E     BRA 0x3F6E
003F68  81C334     MOV l, W4
003F6A  E80204     INC W4, W4
003F6C  89C334     MOV W4, l
003F6E  81C335     MOV l, W5
003F70  2003E4     MOV #0x3E, W4
003F72  528F84     SUB W5, W4, [W15]
003F74  36FFEE     BRA LEU, 0x3F52
3079:                  Curr1Mass[l]=Curr1Mass[l+1];
003F52  81C334     MOV l, W4
003F54  81C335     MOV l, W5
003F56  E80285     INC W5, W5
003F58  428305     ADD W5, W5, W6
003F5A  237E65     MOV #0x37E6, W5
003F5C  430285     ADD W6, W5, W5
003F5E  780295     MOV [W5], W5
003F60  420304     ADD W4, W4, W6
003F62  237E64     MOV #0x37E6, W4
003F64  430204     ADD W6, W4, W4
003F66  780A05     MOV W5, [W4]
3080:              
3081:                  Curr1Show=CrSumm>>CURRMASS_SHIFT;
003F76  8217D4     MOV CrSumm, W4
003F78  8217E5     MOV 0x42FC, W5
003F7A  DD294A     SL W5, #10, W2
003F7C  DE2246     LSR W4, #6, W4
003F7E  710204     IOR W2, W4, W4
003F80  DE2AC6     LSR W5, #6, W5
003F82  BE0004     MOV.D W4, W0
003F84  022582     CALL ___floatunsisf
003F86  000000     NOP
003F88  BE0200     MOV.D W0, W4
003F8A  8897E4     MOV W4, Curr1Show
003F8C  8897F5     MOV W5, 0x12FE
3082:                  Curr1=Crr1;
003F8E  809524     MOV Crr1, W4
003F90  8894F4     MOV W4, Curr1
3083:                  
3084:                  if (!Calibrating)
003F92  809644     MOV Flgs3, W4
003F94  620270     AND W4, #0x10, W4
003F96  520FE0     SUB W4, #0x0, [W15]
003F98  3A0209     BRA NZ, 0x43AC
3085:                  {
3086:                //  CurrentControlCurr=CrSumm;
3087:              #if defined REV2
3088:              #if !defined VECTOR
3089:                  Curr1=ZeroCurr1+1-Curr1;
3090:                  Curr1Show=ZeroCurr1+1-Curr1Show;
3091:              #else
3092:                  Curr1=Curr1-ZeroCurr1+2;
003F9A  8094F5     MOV Curr1, W5
003F9C  809534     MOV ZeroCurr1, W4
003F9E  528204     SUB W5, W4, W4
003FA0  E88204     INC2 W4, W4
003FA2  8894F4     MOV W4, Curr1
3093:                  Curr1Show=Curr1Show-ZeroCurr1+2;
003FA4  8097E8     MOV Curr1Show, W8
003FA6  8097F9     MOV 0x12FE, W9
003FA8  809534     MOV ZeroCurr1, W4
003FAA  DEA2CF     ASR W4, #15, W5
003FAC  BE0004     MOV.D W4, W0
003FAE  02257C     CALL ___floatsisf
003FB0  000000     NOP
003FB2  BE0200     MOV.D W0, W4
003FB4  BE0104     MOV.D W4, W2
003FB6  BE0008     MOV.D W8, W0
003FB8  0222D0     CALL ___subsf3
003FBA  000000     NOP
003FBC  BE0200     MOV.D W0, W4
003FBE  200002     MOV #0x0, W2
003FC0  240003     MOV #0x4000, W3
003FC2  BE0004     MOV.D W4, W0
003FC4  0222D2     CALL ___addsf3
003FC6  000000     NOP
003FC8  BE0200     MOV.D W0, W4
003FCA  8897E4     MOV W4, Curr1Show
003FCC  8897F5     MOV W5, 0x12FE
3094:              #endif
3095:                  if (Curr1Show<0)
003FCE  8097E4     MOV Curr1Show, W4
003FD0  8097F5     MOV 0x12FE, W5
003FD2  B3C018     MOV.B #0x1, W8
003FD4  B81160     MUL.UU W2, #0, W2
003FD6  BE0004     MOV.D W4, W0
003FD8  0224FC     CALL ___lesf2
003FDA  000000     NOP
003FDC  780200     MOV W0, W4
003FDE  520FE0     SUB W4, #0x0, [W15]
003FE0  350001     BRA LT, 0x3FE4
003FE2  EB4400     CLR.B W8
003FE4  544FE0     SUB.B W8, #0x0, [W15]
003FE6  32000A     BRA Z, 0x3FFC
3096:                  Curr1Show=Curr1Show*1.25;
003FE8  8097E4     MOV Curr1Show, W4
003FEA  8097F5     MOV 0x12FE, W5
003FEC  200002     MOV #0x0, W2
003FEE  23FA03     MOV #0x3FA0, W3
003FF0  BE0004     MOV.D W4, W0
003FF2  022630     CALL ___mulsf3
003FF4  000000     NOP
003FF6  BE0200     MOV.D W0, W4
003FF8  8897E4     MOV W4, Curr1Show
003FFA  8897F5     MOV W5, 0x12FE
3097:                  
3098:                  
3099:                  Curr1=(int)((float)Curr1*Crr1Corr);
003FFC  8094F4     MOV Curr1, W4
003FFE  DEA2CF     ASR W4, #15, W5
004000  BE0004     MOV.D W4, W0
004002  02257C     CALL ___floatsisf
004004  000000     NOP
004006  BE0300     MOV.D W0, W6
004008  808854     MOV Crr1Corr, W4
00400A  808865     MOV 0x110C, W5
00400C  BE0104     MOV.D W4, W2
00400E  BE0006     MOV.D W6, W0
004010  022630     CALL ___mulsf3
004012  000000     NOP
004014  BE0200     MOV.D W0, W4
004016  BE0004     MOV.D W4, W0
004018  022504     CALL ___fixsfsi
00401A  000000     NOP
00401C  BE0200     MOV.D W0, W4
00401E  780204     MOV W4, W4
004020  8894F4     MOV W4, Curr1
3100:                  Curr1Show=Curr1Show*Crr1Corr;
004022  8097E6     MOV Curr1Show, W6
004024  8097F7     MOV 0x12FE, W7
004026  808854     MOV Crr1Corr, W4
004028  808865     MOV 0x110C, W5
00402A  BE0104     MOV.D W4, W2
00402C  BE0006     MOV.D W6, W0
00402E  022630     CALL ___mulsf3
004030  000000     NOP
004032  BE0200     MOV.D W0, W4
004034  8897E4     MOV W4, Curr1Show
004036  8897F5     MOV W5, 0x12FE
3101:                  
3102:                  //Curr1Show=-2790;
3103:                  
3104:                  
3105:                /*  
3106:                      if (CntPhase<MassTMPSIZE)
3107:                      {
3108:              MassTMPPhase[CntPhase]=Curr1/10;
3109:              MassTMPNeutral[CntPhase]=0;//PDC1/6;
3110:              CntPhase++;
3111:                      }    
3112:                  
3113:                  
3114:              */    
3115:              
3116:                  ChangeCurr();
004038  02BC66     CALL ChangeCurr
00403A  000001     NOP
3117:              #if !defined VECTORMS
3118:                  CurrentControlCurr=(((long int)ZeroCurr1)<<CURRMASS_SHIFT)+CURRMASS_SIZE-CurrentControlCurr;
3119:              #else
3120:                  //CurrentControlCurr=CurrentControlCurr-((((long int)ZeroCurr1)<<CURRMASS_SHIFT)+CURRMASS_SIZE);
3121:                  CurrentControlCurr=Curr1;
00403C  8094F4     MOV Curr1, W4
00403E  DEA2CF     ASR W4, #15, W5
004040  8A17F4     MOV W4, CurrentControlCurr
004042  8A1805     MOV W5, 0x4300
3122:              #endif
3123:              
3124:                  if (PhasePWM!=0)//&&(Curr1>=CurrMixed))
004044  81F524     MOV PhasePWM, W4
004046  81F535     MOV 0x3EA6, W5
004048  520FE0     SUB W4, #0x0, [W15]
00404A  5A8FE0     SUBB W5, #0x0, [W15]
00404C  320017     BRA Z, 0x407C
3125:                  PhaseCurr=(int)(((long int)Curr1*(long int)MAX_PWM_CONST)/(long int)PhasePWM);
00404E  8094F4     MOV Curr1, W4
004050  B92361     MUL.SU W4, #1, W6
004052  8092D4     MOV MAX_PWM_CONST, W4
004054  DEA2CF     ASR W4, #15, W5
004056  B83884     MUL.UU W7, W4, W0
004058  B82986     MUL.UU W5, W6, W2
00405A  780082     MOV W2, W1
00405C  400001     ADD W0, W1, W0
00405E  780306     MOV W6, W6
004060  780204     MOV W4, W4
004062  B83204     MUL.UU W6, W4, W4
004064  400005     ADD W0, W5, W0
004066  780280     MOV W0, W5
004068  81F526     MOV PhasePWM, W6
00406A  81F537     MOV 0x3EA6, W7
00406C  BE0106     MOV.D W6, W2
00406E  BE0004     MOV.D W4, W0
004070  0224DE     CALL ___divsi3
004072  000000     NOP
004074  BE0200     MOV.D W0, W4
004076  780204     MOV W4, W4
004078  889514     MOV W4, PhaseCurr
00407A  370002     BRA 0x4080
3126:                  else
3127:                  PhaseCurr=0;
00407C  EB0200     CLR W4
00407E  889514     MOV W4, PhaseCurr
3128:                  
3129:                  PhaseCurrShow=(int)(((long int)Curr1Show*(long int)MAX_PWM_CONST)/(long int)PhasePWM);
004080  8097E4     MOV Curr1Show, W4
004082  8097F5     MOV 0x12FE, W5
004084  BE0004     MOV.D W4, W0
004086  022504     CALL ___fixsfsi
004088  000000     NOP
00408A  BE0300     MOV.D W0, W6
00408C  8092D4     MOV MAX_PWM_CONST, W4
00408E  DEA2CF     ASR W4, #15, W5
004090  B83884     MUL.UU W7, W4, W0
004092  B82986     MUL.UU W5, W6, W2
004094  780082     MOV W2, W1
004096  400001     ADD W0, W1, W0
004098  780306     MOV W6, W6
00409A  780204     MOV W4, W4
00409C  B83204     MUL.UU W6, W4, W4
00409E  400005     ADD W0, W5, W0
0040A0  780280     MOV W0, W5
0040A2  81F526     MOV PhasePWM, W6
0040A4  81F537     MOV 0x3EA6, W7
0040A6  BE0106     MOV.D W6, W2
0040A8  BE0004     MOV.D W4, W0
0040AA  0224DE     CALL ___divsi3
0040AC  000000     NOP
0040AE  BE0200     MOV.D W0, W4
0040B0  780204     MOV W4, W4
0040B2  89B744     MOV W4, PhaseCurrShow
3130:                  
3131:                 // CurrentControlCurr=PhaseCurr;
3132:                 // else
3133:                   //   PhaseCurr=0;
3134:              #else
3135:                  Curr1=Curr1-ZeroCurr1+1;
3136:              #endif
3137:              
3138:                  if (SpeedControl||PID_On)
0040B4  809754     MOV StatFlgs1, W4
0040B6  620262     AND W4, #0x2, W4
0040B8  520FE0     SUB W4, #0x0, [W15]
0040BA  3A0005     BRA NZ, 0x40C6
0040BC  809655     MOV 0x12CA, W5
0040BE  202004     MOV #0x200, W4
0040C0  628204     AND W5, W4, W4
0040C2  520FE0     SUB W4, #0x0, [W15]
0040C4  320004     BRA Z, 0x40CE
3139:                      CURRENT_PROTECTION=0;
0040C6  809754     MOV StatFlgs1, W4
0040C8  A1D004     BCLR W4, #13
0040CA  889754     MOV W4, StatFlgs1
0040CC  370003     BRA 0x40D4
3140:                  else
3141:                      CURRENT_PROTECTION=1;
0040CE  809754     MOV StatFlgs1, W4
0040D0  A0D004     BSET W4, #13
0040D2  889754     MOV W4, StatFlgs1
3142:              
3143:                  if (Monocycle)
0040D4  809745     MOV StatFlgs, W5
0040D6  280004     MOV #0x8000, W4
0040D8  628204     AND W5, W4, W4
0040DA  520FE0     SUB W4, #0x0, [W15]
0040DC  320003     BRA Z, 0x40E4
3144:                      CURRENT_PROTECTION=1;
0040DE  809754     MOV StatFlgs1, W4
0040E0  A0D004     BSET W4, #13
0040E2  889754     MOV W4, StatFlgs1
3145:                  
3146:                  
3147:                          if (!StartCnt)
0040E4  216D14     MOV #0x16D1, W4
0040E6  784214     MOV.B [W4], W4
0040E8  524FE0     SUB.B W4, #0x0, [W15]
0040EA  3A002E     BRA NZ, 0x4148
3148:                          {
3149:                              if (((Sensor1_Prev==0)||(Sensor1_Prev==7))&&But1Pressed&&But2Pressed&&!But3Pressed&&But4Pressed)
0040EC  212474     MOV #0x1247, W4
0040EE  784214     MOV.B [W4], W4
0040F0  524FE0     SUB.B W4, #0x0, [W15]
0040F2  320004     BRA Z, 0x40FC
0040F4  212474     MOV #0x1247, W4
0040F6  784214     MOV.B [W4], W4
0040F8  524FE7     SUB.B W4, #0x7, [W15]
0040FA  3A0026     BRA NZ, 0x4148
0040FC  809684     MOV Flgs5, W4
0040FE  620264     AND W4, #0x4, W4
004100  520FE0     SUB W4, #0x0, [W15]
004102  320022     BRA Z, 0x4148
004104  809685     MOV Flgs5, W5
004106  208004     MOV #0x800, W4
004108  628204     AND W5, W4, W4
00410A  520FE0     SUB W4, #0x0, [W15]
00410C  32001D     BRA Z, 0x4148
00410E  809625     MOV Flgs2, W5
004110  202004     MOV #0x200, W4
004112  628204     AND W5, W4, W4
004114  520FE0     SUB W4, #0x0, [W15]
004116  3A0018     BRA NZ, 0x4148
004118  809605     MOV Flgs1, W5
00411A  200804     MOV #0x80, W4
00411C  628204     AND W5, W4, W4
00411E  520FE0     SUB W4, #0x0, [W15]
004120  320013     BRA Z, 0x4148
3150:                              {
3151:                                  if (!ResetedPIN)
004122  8096B4     MOV 0x12D6, W4
004124  620268     AND W4, #0x8, W4
004126  520FE0     SUB W4, #0x0, [W15]
004128  3A000F     BRA NZ, 0x4148
3152:                                  {
3153:                                      MustResetPINCnt++;
00412A  817EA4     MOV MustResetPINCnt, W4
00412C  E80204     INC W4, W4
00412E  897EA4     MOV W4, MustResetPINCnt
3154:                                      if (MustResetPINCnt>1000)
004130  817EA5     MOV MustResetPINCnt, W5
004132  203E84     MOV #0x3E8, W4
004134  528F84     SUB W5, W4, [W15]
004136  360008     BRA LEU, 0x4148
3155:                                      {
3156:                                          /*PinCodeMass[8]='1';
3157:                                          PinCodeMass[9]='2';
3158:                                          PinCodeMass[10]='3';
3159:                                          PinCodeMass[11]='4';
3160:               
3161:                                          StringPINLenght=13;
3162:              
3163:                                          PIN_CODE_HC05=1;
3164:                                          MustResetPIN=1;*/
3165:                                          
3166:                                          SoundNum=10;
004138  2124B5     MOV #0x124B, W5
00413A  B3C0A4     MOV.B #0xA, W4
00413C  784A84     MOV.B W4, [W5]
3167:                                          ResetedPIN1=1;
00413E  8096C4     MOV Flgs7, W4
004140  A07004     BSET W4, #7
004142  8896C4     MOV W4, Flgs7
3168:                                          FillPINResetMass();
004144  02CED8     CALL FillPINResetMass
004146  000001     NOP
3169:                                          
3170:                                      }
3171:                                          
3172:                                  }
3173:                              }
3174:                          }    
3175:                  
3176:                  
3177:                  
3178:                  
3179:              if (CURRENT_PROTECTION)
004148  809755     MOV StatFlgs1, W5
00414A  220004     MOV #0x2000, W4
00414C  628204     AND W5, W4, W4
00414E  520FE0     SUB W4, #0x0, [W15]
004150  32011A     BRA Z, 0x4386
3180:              {
3181:              
3182:                 CurrUstTmp=((long int)CurrPhaseLimit*(long int)PhasePWM)/((long int)MAX_PWM_CONST);
004152  81F4C4     MOV CurrPhaseLimit, W4
004154  B92361     MUL.SU W4, #1, W6
004156  81F524     MOV PhasePWM, W4
004158  81F535     MOV 0x3EA6, W5
00415A  B83884     MUL.UU W7, W4, W0
00415C  B82986     MUL.UU W5, W6, W2
00415E  780082     MOV W2, W1
004160  400001     ADD W0, W1, W0
004162  780306     MOV W6, W6
004164  780204     MOV W4, W4
004166  B83204     MUL.UU W6, W4, W4
004168  400005     ADD W0, W5, W0
00416A  780280     MOV W0, W5
00416C  8092D6     MOV MAX_PWM_CONST, W6
00416E  DEB3CF     ASR W6, #15, W7
004170  BE0106     MOV.D W6, W2
004172  BE0004     MOV.D W4, W0
004174  0224DE     CALL ___divsi3
004176  000000     NOP
004178  BE0200     MOV.D W0, W4
00417A  780204     MOV W4, W4
00417C  89F4B4     MOV W4, CurrUstTmp
3183:                 
3184:                 if ((CurrUstTmp>CurrUst)||(CurrUstTmp<=200))
00417E  81F4B5     MOV CurrUstTmp, W5
004180  81F494     MOV CurrUst, W4
004182  528F84     SUB W5, W4, [W15]
004184  3C0004     BRA GT, 0x418E
004186  81F4B5     MOV CurrUstTmp, W5
004188  200C84     MOV #0xC8, W4
00418A  528F84     SUB W5, W4, [W15]
00418C  3C0003     BRA GT, 0x4194
3185:                     CurrUstTmp=CurrUst;
00418E  81F494     MOV CurrUst, W4
004190  89F4B4     MOV W4, CurrUstTmp
004192  370001     BRA 0x4196
3186:                 else
3187:                     Nop();
004194  000000     NOP
3188:                 
3189:                  
3190:                  if (Curr1>CurrUstTmp)
004196  8094F5     MOV Curr1, W5
004198  81F4B4     MOV CurrUstTmp, W4
00419A  528F84     SUB W5, W4, [W15]
00419C  34008B     BRA LE, 0x42B4
3191:                  {
3192:                      if (!SensorlessNotBEMF)    
00419E  809654     MOV 0x12CA, W4
0041A0  620270     AND W4, #0x10, W4
0041A2  520FE0     SUB W4, #0x0, [W15]
0041A4  3A003E     BRA NZ, 0x4222
3193:                          if (!StartCnt)
0041A6  216D14     MOV #0x16D1, W4
0041A8  784214     MOV.B [W4], W4
0041AA  524FE0     SUB.B W4, #0x0, [W15]
0041AC  3A003A     BRA NZ, 0x4222
3194:                          {
3195:                              CurrProtectSoundCnt++;
0041AE  8099C4     MOV CurrProtectSoundCnt, W4
0041B0  E80204     INC W4, W4
0041B2  8899C4     MOV W4, CurrProtectSoundCnt
3196:                              if (CurrProtectSoundCnt>10)
0041B4  8099C4     MOV CurrProtectSoundCnt, W4
0041B6  520FEA     SUB W4, #0xA, [W15]
0041B8  360034     BRA LEU, 0x4222
3197:                              {
3198:                                  CurrProtectSoundCnt=0;
0041BA  EB0200     CLR W4
0041BC  8899C4     MOV W4, CurrProtectSoundCnt
3199:                                  if ((Spd1ResPlus<=5)&&(!Monocycle))
0041BE  817F44     MOV Spd1ResPlus, W4
0041C0  520FE5     SUB W4, #0x5, [W15]
0041C2  3C0027     BRA GT, 0x4212
0041C4  809745     MOV StatFlgs, W5
0041C6  280004     MOV #0x8000, W4
0041C8  628204     AND W5, W4, W4
0041CA  520FE0     SUB W4, #0x0, [W15]
0041CC  3A0022     BRA NZ, 0x4212
3200:                                  {
3201:                                      if ((Spd0TimerStateMachineCnt==0)&&(Curr1Show>CurrUstTmp))
0041CE  2305D4     MOV #0x305D, W4
0041D0  784214     MOV.B [W4], W4
0041D2  524FE0     SUB.B W4, #0x0, [W15]
0041D4  3A001E     BRA NZ, 0x4212
0041D6  81F4B4     MOV CurrUstTmp, W4
0041D8  DEA2CF     ASR W4, #15, W5
0041DA  BE0004     MOV.D W4, W0
0041DC  02257C     CALL ___floatsisf
0041DE  000000     NOP
0041E0  BE0300     MOV.D W0, W6
0041E2  8097E4     MOV Curr1Show, W4
0041E4  8097F5     MOV 0x12FE, W5
0041E6  B3C018     MOV.B #0x1, W8
0041E8  BE0104     MOV.D W4, W2
0041EA  BE0006     MOV.D W6, W0
0041EC  0224FC     CALL ___lesf2
0041EE  000000     NOP
0041F0  780200     MOV W0, W4
0041F2  520FE0     SUB W4, #0x0, [W15]
0041F4  350001     BRA LT, 0x41F8
0041F6  EB4400     CLR.B W8
0041F8  544FE0     SUB.B W8, #0x0, [W15]
0041FA  32000B     BRA Z, 0x4212
3202:                                      {
3203:                                      Spd0TimerStateMachineCnt=1;
0041FC  2305D5     MOV #0x305D, W5
0041FE  B3C014     MOV.B #0x1, W4
004200  784A84     MOV.B W4, [W5]
3204:                                      if (!AutoNastroykaState)
004202  81BEF4     MOV AutoNastroykaState, W4
004204  520FE0     SUB W4, #0x0, [W15]
004206  3A0003     BRA NZ, 0x420E
3205:                                          Spd0Timer=Spd0TimerConst;
004208  821484     MOV Spd0TimerConst, W4
00420A  89B7D4     MOV W4, Spd0Timer
00420C  370002     BRA 0x4212
3206:                                      else
3207:                                          Spd0Timer=10000;
00420E  227104     MOV #0x2710, W4
004210  89B7D4     MOV W4, Spd0Timer
3208:                                      }
3209:                                  }
3210:                                  if (CurrLimitSound)
004212  809755     MOV StatFlgs1, W5
004214  208004     MOV #0x800, W4
004216  628204     AND W5, W4, W4
004218  520FE0     SUB W4, #0x0, [W15]
00421A  320003     BRA Z, 0x4222
3211:                                  SoundNum=1;
00421C  2124B5     MOV #0x124B, W5
00421E  B3C014     MOV.B #0x1, W4
004220  784A84     MOV.B W4, [W5]
3212:                              }
3213:                          }
3214:                  PID_On=0;
004222  809654     MOV 0x12CA, W4
004224  A19004     BCLR W4, #9
004226  889654     MOV W4, 0x12CA
3215:                  ECurr1=Curr1-CurrUstTmp;
004228  8094F5     MOV Curr1, W5
00422A  81F4B4     MOV CurrUstTmp, W4
00422C  528204     SUB W5, W4, W4
00422E  89F484     MOV W4, ECurr1
3216:                  EpCurr1=ECurr1*KpCurr;
004230  81F484     MOV ECurr1, W4
004232  DEA2CF     ASR W4, #15, W5
004234  BE0004     MOV.D W4, W0
004236  02257C     CALL ___floatsisf
004238  000000     NOP
00423A  BE0300     MOV.D W0, W6
00423C  81F464     MOV KpCurr, W4
00423E  81F475     MOV 0x3E8E, W5
004240  BE0104     MOV.D W4, W2
004242  BE0006     MOV.D W6, W0
004244  022630     CALL ___mulsf3
004246  000000     NOP
004248  BE0200     MOV.D W0, W4
00424A  89F584     MOV W4, EpCurr1
00424C  89F595     MOV W5, 0x3EB2
3217:                  ECurr1Summ=ECurr1Summ+(float)ECurr1*KiCurr;
00424E  81F484     MOV ECurr1, W4
004250  DEA2CF     ASR W4, #15, W5
004252  BE0004     MOV.D W4, W0
004254  02257C     CALL ___floatsisf
004256  000000     NOP
004258  BE0300     MOV.D W0, W6
00425A  81F444     MOV KiCurr, W4
00425C  81F455     MOV 0x3E8A, W5
00425E  BE0104     MOV.D W4, W2
004260  BE0006     MOV.D W6, W0
004262  022630     CALL ___mulsf3
004264  000000     NOP
004266  BE0200     MOV.D W0, W4
004268  BE0304     MOV.D W4, W6
00426A  81F564     MOV ECurr1Summ, W4
00426C  81F575     MOV 0x3EAE, W5
00426E  BE0104     MOV.D W4, W2
004270  BE0006     MOV.D W6, W0
004272  0222D2     CALL ___addsf3
004274  000000     NOP
004276  BE0200     MOV.D W0, W4
004278  89F564     MOV W4, ECurr1Summ
00427A  89F575     MOV W5, 0x3EAE
3218:                  if (ECurr1Summ>MAX_PWM)
00427C  8212F4     MOV MAX_PWM, W4
00427E  DEA2CF     ASR W4, #15, W5
004280  BE0004     MOV.D W4, W0
004282  02257C     CALL ___floatsisf
004284  000000     NOP
004286  BE0300     MOV.D W0, W6
004288  81F564     MOV ECurr1Summ, W4
00428A  81F575     MOV 0x3EAE, W5
00428C  B3C018     MOV.B #0x1, W8
00428E  BE0104     MOV.D W4, W2
004290  BE0006     MOV.D W6, W0
004292  0224FC     CALL ___lesf2
004294  000000     NOP
004296  780200     MOV W0, W4
004298  520FE0     SUB W4, #0x0, [W15]
00429A  350001     BRA LT, 0x429E
00429C  EB4400     CLR.B W8
00429E  544FE0     SUB.B W8, #0x0, [W15]
0042A0  320047     BRA Z, 0x4330
3219:                      ECurr1Summ=MAX_PWM;
0042A2  8212F4     MOV MAX_PWM, W4
0042A4  DEA2CF     ASR W4, #15, W5
0042A6  BE0004     MOV.D W4, W0
0042A8  02257C     CALL ___floatsisf
0042AA  000000     NOP
0042AC  BE0200     MOV.D W0, W4
0042AE  89F564     MOV W4, ECurr1Summ
0042B0  89F575     MOV W5, 0x3EAE
0042B2  37003E     BRA 0x4330
3220:                  }
3221:                  else
3222:                  {
3223:                      EpCurr1=0;
0042B4  B82260     MUL.UU W4, #0, W4
0042B6  89F584     MOV W4, EpCurr1
0042B8  89F595     MOV W5, 0x3EB2
3224:                      if (ECurr1Summ>0)
0042BA  81F564     MOV ECurr1Summ, W4
0042BC  81F575     MOV 0x3EAE, W5
0042BE  B3C018     MOV.B #0x1, W8
0042C0  B81160     MUL.UU W2, #0, W2
0042C2  BE0004     MOV.D W4, W0
0042C4  022500     CALL ___gtsf2
0042C6  000000     NOP
0042C8  780200     MOV W0, W4
0042CA  520FE0     SUB W4, #0x0, [W15]
0042CC  3C0001     BRA GT, 0x42D0
0042CE  EB4400     CLR.B W8
0042D0  544FE0     SUB.B W8, #0x0, [W15]
0042D2  32002B     BRA Z, 0x432A
3225:                      {
3226:                      ECurr1=CurrUstTmp-Curr1;
0042D4  81F4B5     MOV CurrUstTmp, W5
0042D6  8094F4     MOV Curr1, W4
0042D8  528204     SUB W5, W4, W4
0042DA  89F484     MOV W4, ECurr1
3227:                      ECurr1Summ=ECurr1Summ-((float)ECurr1*KiCurr);
0042DC  81F568     MOV ECurr1Summ, W8
0042DE  81F579     MOV 0x3EAE, W9
0042E0  81F484     MOV ECurr1, W4
0042E2  DEA2CF     ASR W4, #15, W5
0042E4  BE0004     MOV.D W4, W0
0042E6  02257C     CALL ___floatsisf
0042E8  000000     NOP
0042EA  BE0300     MOV.D W0, W6
0042EC  81F444     MOV KiCurr, W4
0042EE  81F455     MOV 0x3E8A, W5
0042F0  BE0104     MOV.D W4, W2
0042F2  BE0006     MOV.D W6, W0
0042F4  022630     CALL ___mulsf3
0042F6  000000     NOP
0042F8  BE0200     MOV.D W0, W4
0042FA  BE0104     MOV.D W4, W2
0042FC  BE0008     MOV.D W8, W0
0042FE  0222D0     CALL ___subsf3
004300  000000     NOP
004302  BE0200     MOV.D W0, W4
004304  89F564     MOV W4, ECurr1Summ
004306  89F575     MOV W5, 0x3EAE
3228:                      if (ECurr1Summ<0)
004308  81F564     MOV ECurr1Summ, W4
00430A  81F575     MOV 0x3EAE, W5
00430C  B3C018     MOV.B #0x1, W8
00430E  B81160     MUL.UU W2, #0, W2
004310  BE0004     MOV.D W4, W0
004312  0224FC     CALL ___lesf2
004314  000000     NOP
004316  780200     MOV W0, W4
004318  520FE0     SUB W4, #0x0, [W15]
00431A  350001     BRA LT, 0x431E
00431C  EB4400     CLR.B W8
00431E  544FE0     SUB.B W8, #0x0, [W15]
004320  320007     BRA Z, 0x4330
3229:                          ECurr1Summ=0;
004322  B82260     MUL.UU W4, #0, W4
004324  89F564     MOV W4, ECurr1Summ
004326  89F575     MOV W5, 0x3EAE
004328  370003     BRA 0x4330
3230:                      }
3231:                      else
3232:                      {
3233:                          ECurr1Summ=0;
00432A  B82260     MUL.UU W4, #0, W4
00432C  89F564     MOV W4, ECurr1Summ
00432E  89F575     MOV W5, 0x3EAE
3234:                      }
3235:                  }
3236:                  PI_Curr1Res=(unsigned long int)ECurr1Summ+(unsigned long int)EpCurr1+PI_Temperature;
004330  81F564     MOV ECurr1Summ, W4
004332  81F575     MOV 0x3EAE, W5
004334  BE0004     MOV.D W4, W0
004336  022546     CALL ___fixunssfsi
004338  000000     NOP
00433A  BE0400     MOV.D W0, W8
00433C  81F584     MOV EpCurr1, W4
00433E  81F595     MOV 0x3EB2, W5
004340  BE0004     MOV.D W4, W0
004342  022546     CALL ___fixunssfsi
004344  000000     NOP
004346  BE0200     MOV.D W0, W4
004348  420208     ADD W4, W8, W4
00434A  4A8289     ADDC W5, W9, W5
00434C  BE0004     MOV.D W4, W0
00434E  022582     CALL ___floatunsisf
004350  000000     NOP
004352  BE0300     MOV.D W0, W6
004354  820374     MOV PI_Temperature, W4
004356  820385     MOV 0x4070, W5
004358  BE0104     MOV.D W4, W2
00435A  BE0006     MOV.D W6, W0
00435C  0222D2     CALL ___addsf3
00435E  000000     NOP
004360  BE0200     MOV.D W0, W4
004362  BE0004     MOV.D W4, W0
004364  022504     CALL ___fixsfsi
004366  000000     NOP
004368  BE0200     MOV.D W0, W4
00436A  89F404     MOV W4, PI_Curr1Res
00436C  89F415     MOV W5, 0x3E82
3237:                  if (PI_Curr1Res>MAX_PWM)
00436E  8212F4     MOV MAX_PWM, W4
004370  B92361     MUL.SU W4, #1, W6
004372  81F404     MOV PI_Curr1Res, W4
004374  81F415     MOV 0x3E82, W5
004376  530F84     SUB W6, W4, [W15]
004378  5B8F85     SUBB W7, W5, [W15]
00437A  3D0018     BRA GE, 0x43AC
3238:                      PI_Curr1Res=MAX_PWM;
00437C  8212F4     MOV MAX_PWM, W4
00437E  DEA2CF     ASR W4, #15, W5
004380  89F404     MOV W4, PI_Curr1Res
004382  89F415     MOV W5, 0x3E82
004384  370013     BRA 0x43AC
3239:                  }
3240:              else
3241:              {
3242:                  PI_Curr1Res=PI_Temperature;
004386  820374     MOV PI_Temperature, W4
004388  820385     MOV 0x4070, W5
00438A  BE0004     MOV.D W4, W0
00438C  022504     CALL ___fixsfsi
00438E  000000     NOP
004390  BE0200     MOV.D W0, W4
004392  89F404     MOV W4, PI_Curr1Res
004394  89F415     MOV W5, 0x3E82
3243:                  if (PI_Curr1Res>MAX_PWM)
004396  8212F4     MOV MAX_PWM, W4
004398  B92361     MUL.SU W4, #1, W6
00439A  81F404     MOV PI_Curr1Res, W4
00439C  81F415     MOV 0x3E82, W5
00439E  530F84     SUB W6, W4, [W15]
0043A0  5B8F85     SUBB W7, W5, [W15]
0043A2  3D0004     BRA GE, 0x43AC
3244:                      PI_Curr1Res=MAX_PWM;
0043A4  8212F4     MOV MAX_PWM, W4
0043A6  DEA2CF     ASR W4, #15, W5
0043A8  89F404     MOV W4, PI_Curr1Res
0043AA  89F415     MOV W5, 0x3E82
3245:              }
3246:              
3247:              
3248:              
3249:                  
3250:              
3251:                  }
3252:                  //CurrRegen1=2600000;
3253:                  if (CntCurr)
0043AC  821494     MOV CntCurr, W4
0043AE  520FE0     SUB W4, #0x0, [W15]
0043B0  320029     BRA Z, 0x4404
3254:                  {
3255:                      CntCurr--;
0043B2  821494     MOV CntCurr, W4
0043B4  E90204     DEC W4, W4
0043B6  8A1494     MOV W4, CntCurr
3256:                      if (!CntCurr)
0043B8  821494     MOV CntCurr, W4
0043BA  520FE0     SUB W4, #0x0, [W15]
0043BC  3A0023     BRA NZ, 0x4404
3257:                      {
3258:                //  TST_PIN=!TST_PIN;
3259:                          CntCurr=27;//25;
0043BE  2001B4     MOV #0x1B, W4
0043C0  8A1494     MOV W4, CntCurr
3260:              
3261:                          //if ((Curr1<=5)&&(Curr1>=-5))
3262:                            //  Curr1=0;
3263:                          if (Curr1>0)
0043C2  8094F4     MOV Curr1, W4
0043C4  520FE0     SUB W4, #0x0, [W15]
0043C6  340009     BRA LE, 0x43DA
3264:                              CurrTuda1=CurrTuda1+Curr1;
0043C8  8094F4     MOV Curr1, W4
0043CA  B92361     MUL.SU W4, #1, W6
0043CC  81B824     MOV CurrTuda1, W4
0043CE  81B835     MOV 0x3706, W5
0043D0  420206     ADD W4, W6, W4
0043D2  4A8287     ADDC W5, W7, W5
0043D4  89B824     MOV W4, CurrTuda1
0043D6  89B835     MOV W5, 0x3706
0043D8  370008     BRA 0x43EA
3265:                          else
3266:                              CurrRegen1=CurrRegen1-Curr1;
0043DA  81B846     MOV CurrRegen1, W6
0043DC  81B857     MOV 0x370A, W7
0043DE  8094F4     MOV Curr1, W4
0043E0  DEA2CF     ASR W4, #15, W5
0043E2  530204     SUB W6, W4, W4
0043E4  5B8285     SUBB W7, W5, W5
0043E6  89B844     MOV W4, CurrRegen1
0043E8  89B855     MOV W5, 0x370A
3267:              //            if ((Curr2<=5)&&(Curr2>=-5))
3268:                //              Curr2=0;
3269:              
3270:                          if (CntWriteCurr)
0043EA  8214A4     MOV CntWriteCurr, W4
0043EC  520FE0     SUB W4, #0x0, [W15]
0043EE  32000A     BRA Z, 0x4404
3271:                          {
3272:                              CntWriteCurr--;
0043F0  8214A4     MOV CntWriteCurr, W4
0043F2  E90204     DEC W4, W4
0043F4  8A14A4     MOV W4, CntWriteCurr
3273:                              if (!CntWriteCurr)
0043F6  8214A4     MOV CntWriteCurr, W4
0043F8  520FE0     SUB W4, #0x0, [W15]
0043FA  3A0004     BRA NZ, 0x4404
3274:                              {
3275:                                  CntWriteCurr=100;
0043FC  200644     MOV #0x64, W4
0043FE  8A14A4     MOV W4, CntWriteCurr
3276:                                  Odometr10m=0;
004400  EB0200     CLR W4
004402  8983F4     MOV W4, Odometr10m
3277:                     //             RecOdometrFl=1;
3278:                              }
3279:                          }
3280:              
3281:              
3282:                      }
3283:                  }
3284:              
3285:              
3286:              
3287:              
3288:              
3289:                  
3290:                  
3291:              
3292:              
3293:                  if (ReversON)
004404  809675     MOV 0x12CE, W5
004406  210004     MOV #0x1000, W4
004408  628204     AND W5, W4, W4
00440A  520FE0     SUB W4, #0x0, [W15]
00440C  320032     BRA Z, 0x4472
3294:                  {
3295:                      if (!Sounds)
00440E  2124A4     MOV #0x124A, W4
004410  784214     MOV.B [W4], W4
004412  524FE0     SUB.B W4, #0x0, [W15]
004414  3A0003     BRA NZ, 0x441C
3296:                          SoundNum=3;
004416  2124B5     MOV #0x124B, W5
004418  B3C034     MOV.B #0x3, W4
00441A  784A84     MOV.B W4, [W5]
3297:                      if (!ReversChanged)
00441C  809675     MOV 0x12CE, W5
00441E  220004     MOV #0x2000, W4
004420  628204     AND W5, W4, W4
004422  520FE0     SUB W4, #0x0, [W15]
004424  3A0026     BRA NZ, 0x4472
3298:                      {
3299:                          if (Spd1ResPlus<=1)
004426  817F44     MOV Spd1ResPlus, W4
004428  520FE1     SUB W4, #0x1, [W15]
00442A  3C0023     BRA GT, 0x4472
3300:                          {
3301:                          
3302:                          SpeedControlMem=SpeedControl;
00442C  809754     MOV StatFlgs1, W4
00442E  D10204     LSR W4, W4
004430  624261     AND.B W4, #0x1, W4
004432  FB8204     ZE W4, W4
004434  620261     AND W4, #0x1, W4
004436  DD224D     SL W4, #13, W4
004438  809686     MOV Flgs5, W6
00443A  2DFFF5     MOV #0xDFFF, W5
00443C  630285     AND W6, W5, W5
00443E  728204     IOR W5, W4, W4
004440  889684     MOV W4, Flgs5
3303:                          SpeedControl=0;
004442  809754     MOV StatFlgs1, W4
004444  A11004     BCLR W4, #1
004446  889754     MOV W4, StatFlgs1
3304:                          MAX_PWM_MustBe=MAX_PWM_Revers;
004448  8099A4     MOV MAX_PWM_Revers, W4
00444A  8899B4     MOV W4, MAX_PWM_MustBe
3305:                                  
3306:                              DirPWM1=!DirPWM1;
00444C  809754     MOV StatFlgs1, W4
00444E  620261     AND W4, #0x1, W4
004450  A7F004     BTSC W4, #15
004452  EA0204     NEG W4, W4
004454  E90204     DEC W4, W4
004456  DE224F     LSR W4, #15, W4
004458  784204     MOV.B W4, W4
00445A  FB8204     ZE W4, W4
00445C  620261     AND W4, #0x1, W4
00445E  809756     MOV StatFlgs1, W6
004460  2FFFE5     MOV #0xFFFE, W5
004462  630285     AND W6, W5, W5
004464  728204     IOR W5, W4, W4
004466  889754     MOV W4, StatFlgs1
3307:                              ReversChanged=1;
004468  809674     MOV 0x12CE, W4
00446A  A0D004     BSET W4, #13
00446C  889674     MOV W4, 0x12CE
3308:                              RdSensors();
00446E  0270B6     CALL RdSensors
004470  000001     NOP
3309:                          }
3310:                      }
3311:                  }
3312:                  if (ReversChanged)
004472  809675     MOV 0x12CE, W5
004474  220004     MOV #0x2000, W4
004476  628204     AND W5, W4, W4
004478  520FE0     SUB W4, #0x0, [W15]
00447A  32002B     BRA Z, 0x44D2
3313:                  {
3314:                  if (!ReversON)
00447C  809675     MOV 0x12CE, W5
00447E  210004     MOV #0x1000, W4
004480  628204     AND W5, W4, W4
004482  520FE0     SUB W4, #0x0, [W15]
004484  3A0026     BRA NZ, 0x44D2
3315:                      {
3316:                          if (Spd1ResPlus<=1)
004486  817F44     MOV Spd1ResPlus, W4
004488  520FE1     SUB W4, #0x1, [W15]
00448A  3C0023     BRA GT, 0x44D2
3317:                          {
3318:                              DirPWM1=!DirPWM1;
00448C  809754     MOV StatFlgs1, W4
00448E  620261     AND W4, #0x1, W4
004490  A7F004     BTSC W4, #15
004492  EA0204     NEG W4, W4
004494  E90204     DEC W4, W4
004496  DE224F     LSR W4, #15, W4
004498  784204     MOV.B W4, W4
00449A  FB8204     ZE W4, W4
00449C  620261     AND W4, #0x1, W4
00449E  809756     MOV StatFlgs1, W6
0044A0  2FFFE5     MOV #0xFFFE, W5
0044A2  630285     AND W6, W5, W5
0044A4  728204     IOR W5, W4, W4
0044A6  889754     MOV W4, StatFlgs1
3319:                              ReversChanged=0;
0044A8  809674     MOV 0x12CE, W4
0044AA  A1D004     BCLR W4, #13
0044AC  889674     MOV W4, 0x12CE
3320:                              RdSensors();
0044AE  0270B6     CALL RdSensors
0044B0  000001     NOP
3321:                              Sounds=1;
0044B2  2124A5     MOV #0x124A, W5
0044B4  B3C014     MOV.B #0x1, W4
0044B6  784A84     MOV.B W4, [W5]
3322:                              SpeedControl=SpeedControlMem;
0044B8  809684     MOV Flgs5, W4
0044BA  DE224D     LSR W4, #13, W4
0044BC  624261     AND.B W4, #0x1, W4
0044BE  FB8204     ZE W4, W4
0044C0  620261     AND W4, #0x1, W4
0044C2  420204     ADD W4, W4, W4
0044C4  809756     MOV StatFlgs1, W6
0044C6  2FFFD5     MOV #0xFFFD, W5
0044C8  630285     AND W6, W5, W5
0044CA  728204     IOR W5, W4, W4
0044CC  889754     MOV W4, StatFlgs1
3323:                              MAX_PWM_MustBe=MAX_PWM_MEM;
0044CE  809984     MOV MAX_PWM_MEM, W4
0044D0  8899B4     MOV W4, MAX_PWM_MustBe
3324:                          }
3325:                      }
3326:                  }
3327:              
3328:              
3329:              /*
3330:              if ((ReversChanged)&&(Sounds==0))
3331:              {
3332:                          SoundNum=3;
3333:              }
3334:              */
3335:              
3336:                  
3337:                              if (Kp<KpMustBe)
0044D2  809AE6     MOV Kp, W6
0044D4  809AF7     MOV 0x135E, W7
0044D6  809BC4     MOV KpMustBe, W4
0044D8  809BD5     MOV 0x137A, W5
0044DA  B3C018     MOV.B #0x1, W8
0044DC  BE0104     MOV.D W4, W2
0044DE  BE0006     MOV.D W6, W0
0044E0  0224FC     CALL ___lesf2
0044E2  000000     NOP
0044E4  780200     MOV W0, W4
0044E6  520FE0     SUB W4, #0x0, [W15]
0044E8  350001     BRA LT, 0x44EC
0044EA  EB4400     CLR.B W8
0044EC  544FE0     SUB.B W8, #0x0, [W15]
0044EE  32000A     BRA Z, 0x4504
3338:                              Kp=Kp+1;
0044F0  809AE4     MOV Kp, W4
0044F2  809AF5     MOV 0x135E, W5
0044F4  200002     MOV #0x0, W2
0044F6  23F803     MOV #0x3F80, W3
0044F8  BE0004     MOV.D W4, W0
0044FA  0222D2     CALL ___addsf3
0044FC  000000     NOP
0044FE  BE0200     MOV.D W0, W4
004500  889AE4     MOV W4, Kp
004502  889AF5     MOV W5, 0x135E
3339:                              if (Kp>KpMustBe)
004504  809AE6     MOV Kp, W6
004506  809AF7     MOV 0x135E, W7
004508  809BC4     MOV KpMustBe, W4
00450A  809BD5     MOV 0x137A, W5
00450C  B3C018     MOV.B #0x1, W8
00450E  BE0104     MOV.D W4, W2
004510  BE0006     MOV.D W6, W0
004512  022500     CALL ___gtsf2
004514  000000     NOP
004516  780200     MOV W0, W4
004518  520FE0     SUB W4, #0x0, [W15]
00451A  3C0001     BRA GT, 0x451E
00451C  EB4400     CLR.B W8
00451E  544FE0     SUB.B W8, #0x0, [W15]
004520  32000A     BRA Z, 0x4536
3340:                              Kp=Kp-1;
004522  809AE4     MOV Kp, W4
004524  809AF5     MOV 0x135E, W5
004526  200002     MOV #0x0, W2
004528  23F803     MOV #0x3F80, W3
00452A  BE0004     MOV.D W4, W0
00452C  0222D0     CALL ___subsf3
00452E  000000     NOP
004530  BE0200     MOV.D W0, W4
004532  889AE4     MOV W4, Kp
004534  889AF5     MOV W5, 0x135E
3341:                                  
3342:              
3343:                              if (KpKp<KpKpMustBe)
004536  81A5D6     MOV KpKp, W6
004538  81A5E7     MOV 0x34BC, W7
00453A  81A5B4     MOV KpKpMustBe, W4
00453C  81A5C5     MOV 0x34B8, W5
00453E  B3C018     MOV.B #0x1, W8
004540  BE0104     MOV.D W4, W2
004542  BE0006     MOV.D W6, W0
004544  0224FC     CALL ___lesf2
004546  000000     NOP
004548  780200     MOV W0, W4
00454A  520FE0     SUB W4, #0x0, [W15]
00454C  350001     BRA LT, 0x4550
00454E  EB4400     CLR.B W8
004550  544FE0     SUB.B W8, #0x0, [W15]
004552  32000A     BRA Z, 0x4568
3344:                          {
3345:                              KpKp=KpKp+0.01;
004554  81A5D4     MOV KpKp, W4
004556  81A5E5     MOV 0x34BC, W5
004558  2D70A2     MOV #0xD70A, W2
00455A  23C233     MOV #0x3C23, W3
00455C  BE0004     MOV.D W4, W0
00455E  0222D2     CALL ___addsf3
004560  000000     NOP
004562  BE0200     MOV.D W0, W4
004564  89A5D4     MOV W4, KpKp
004566  89A5E5     MOV W5, 0x34BC
3346:                          }
3347:                          if (KpKp>KpKpMustBe)
004568  81A5D6     MOV KpKp, W6
00456A  81A5E7     MOV 0x34BC, W7
00456C  81A5B4     MOV KpKpMustBe, W4
00456E  81A5C5     MOV 0x34B8, W5
004570  B3C018     MOV.B #0x1, W8
004572  BE0104     MOV.D W4, W2
004574  BE0006     MOV.D W6, W0
004576  022500     CALL ___gtsf2
004578  000000     NOP
00457A  780200     MOV W0, W4
00457C  520FE0     SUB W4, #0x0, [W15]
00457E  3C0001     BRA GT, 0x4582
004580  EB4400     CLR.B W8
004582  544FE0     SUB.B W8, #0x0, [W15]
004584  32000A     BRA Z, 0x459A
3348:                          {
3349:                              KpKp=KpKp-0.01;
004586  81A5D4     MOV KpKp, W4
004588  81A5E5     MOV 0x34BC, W5
00458A  2D70A2     MOV #0xD70A, W2
00458C  23C233     MOV #0x3C23, W3
00458E  BE0004     MOV.D W4, W0
004590  0222D0     CALL ___subsf3
004592  000000     NOP
004594  BE0200     MOV.D W0, W4
004596  89A5D4     MOV W4, KpKp
004598  89A5E5     MOV W5, 0x34BC
3350:                          }
3351:                          
3352:              
3353:                  
3354:              
3355:              /*
3356:              
3357:                                  if (KpMustBe_UP)
3358:                                  {
3359:                          if (Kp<KpMustBe)
3360:                              Kp=Kp+1;
3361:                          else
3362:                              Kp=KpMustBe;
3363:                                  }
3364:                                  else
3365:                                  {
3366:                          if (Kp>KpMustBe)
3367:                              Kp=Kp-1;
3368:                          else
3369:                              Kp=KpMustBe;
3370:                                  }
3371:              */
3372:              
3373:                           if (KdMustBe!=KdNoMan)
00459A  809C06     MOV KdMustBe, W6
00459C  809C17     MOV 0x1382, W7
00459E  809C24     MOV KdNoMan, W4
0045A0  809C35     MOV 0x1386, W5
0045A2  BE0104     MOV.D W4, W2
0045A4  BE0006     MOV.D W6, W0
0045A6  022586     CALL ___nesf2
0045A8  000000     NOP
0045AA  780200     MOV W0, W4
0045AC  520FE0     SUB W4, #0x0, [W15]
0045AE  320005     BRA Z, 0x45BA
3374:                              {
3375:                              KdMustBe=KdNoMan;
0045B0  809C24     MOV KdNoMan, W4
0045B2  809C35     MOV 0x1386, W5
0045B4  889C04     MOV W4, KdMustBe
0045B6  889C15     MOV W5, 0x1382
3376:                              SetKd_UP();
0045B8  0777AC     RCALL SetKd_UP
3377:                              }
3378:              
3379:                                  if (Kd_UP)
0045BA  809665     MOV Flgs4, W5
0045BC  200404     MOV #0x40, W4
0045BE  628204     AND W5, W4, W4
0045C0  520FE0     SUB W4, #0x0, [W15]
0045C2  32001F     BRA Z, 0x4602
3380:                                  {
3381:                          if (Kd<KdMustBe)
0045C4  821336     MOV Kd, W6
0045C6  821347     MOV 0x4268, W7
0045C8  809C04     MOV KdMustBe, W4
0045CA  809C15     MOV 0x1382, W5
0045CC  B3C018     MOV.B #0x1, W8
0045CE  BE0104     MOV.D W4, W2
0045D0  BE0006     MOV.D W6, W0
0045D2  0224FC     CALL ___lesf2
0045D4  000000     NOP
0045D6  780200     MOV W0, W4
0045D8  520FE0     SUB W4, #0x0, [W15]
0045DA  350001     BRA LT, 0x45DE
0045DC  EB4400     CLR.B W8
0045DE  544FE0     SUB.B W8, #0x0, [W15]
0045E0  32000B     BRA Z, 0x45F8
3382:                              Kd=Kd+10;//0.01;
0045E2  821334     MOV Kd, W4
0045E4  821345     MOV 0x4268, W5
0045E6  200002     MOV #0x0, W2
0045E8  241203     MOV #0x4120, W3
0045EA  BE0004     MOV.D W4, W0
0045EC  0222D2     CALL ___addsf3
0045EE  000000     NOP
0045F0  BE0200     MOV.D W0, W4
0045F2  8A1334     MOV W4, Kd
0045F4  8A1345     MOV W5, 0x4268
0045F6  370023     BRA 0x463E
3383:                          else
3384:                              Kd=KdMustBe;
0045F8  809C04     MOV KdMustBe, W4
0045FA  809C15     MOV 0x1382, W5
0045FC  8A1334     MOV W4, Kd
0045FE  8A1345     MOV W5, 0x4268
004600  37001E     BRA 0x463E
3385:                                  }
3386:                                  else
3387:                                  {
3388:                          if (Kd>KdMustBe)
004602  821336     MOV Kd, W6
004604  821347     MOV 0x4268, W7
004606  809C04     MOV KdMustBe, W4
004608  809C15     MOV 0x1382, W5
00460A  B3C018     MOV.B #0x1, W8
00460C  BE0104     MOV.D W4, W2
00460E  BE0006     MOV.D W6, W0
004610  022500     CALL ___gtsf2
004612  000000     NOP
004614  780200     MOV W0, W4
004616  520FE0     SUB W4, #0x0, [W15]
004618  3C0001     BRA GT, 0x461C
00461A  EB4400     CLR.B W8
00461C  544FE0     SUB.B W8, #0x0, [W15]
00461E  32000B     BRA Z, 0x4636
3389:                              Kd=Kd-10;//0.01;
004620  821334     MOV Kd, W4
004622  821345     MOV 0x4268, W5
004624  200002     MOV #0x0, W2
004626  241203     MOV #0x4120, W3
004628  BE0004     MOV.D W4, W0
00462A  0222D0     CALL ___subsf3
00462C  000000     NOP
00462E  BE0200     MOV.D W0, W4
004630  8A1334     MOV W4, Kd
004632  8A1345     MOV W5, 0x4268
004634  370004     BRA 0x463E
3390:                          else
3391:                              Kd=KdMustBe;
004636  809C04     MOV KdMustBe, W4
004638  809C15     MOV 0x1382, W5
00463A  8A1334     MOV W4, Kd
00463C  8A1345     MOV W5, 0x4268
3392:                                  }
3393:              
3394:              
3395:                          if (Ki_UP)
00463E  809634     MOV 0x12C6, W4
004640  620264     AND W4, #0x4, W4
004642  520FE0     SUB W4, #0x0, [W15]
004644  32001F     BRA Z, 0x4684
3396:                          {
3397:                          if (Ki<KiMustBe)
004646  809B06     MOV Ki, W6
004648  809B17     MOV 0x1362, W7
00464A  809B24     MOV KiMustBe, W4
00464C  809B35     MOV 0x1366, W5
00464E  B3C018     MOV.B #0x1, W8
004650  BE0104     MOV.D W4, W2
004652  BE0006     MOV.D W6, W0
004654  0224FC     CALL ___lesf2
004656  000000     NOP
004658  780200     MOV W0, W4
00465A  520FE0     SUB W4, #0x0, [W15]
00465C  350001     BRA LT, 0x4660
00465E  EB4400     CLR.B W8
004660  544FE0     SUB.B W8, #0x0, [W15]
004662  32000B     BRA Z, 0x467A
3398:                              Ki=Ki+0.005;
004664  809B04     MOV Ki, W4
004666  809B15     MOV 0x1362, W5
004668  2D70A2     MOV #0xD70A, W2
00466A  23BA33     MOV #0x3BA3, W3
00466C  BE0004     MOV.D W4, W0
00466E  0222D2     CALL ___addsf3
004670  000000     NOP
004672  BE0200     MOV.D W0, W4
004674  889B04     MOV W4, Ki
004676  889B15     MOV W5, 0x1362
004678  370023     BRA 0x46C0
3399:                              else
3400:                              Ki=KiMustBe;
00467A  809B24     MOV KiMustBe, W4
00467C  809B35     MOV 0x1366, W5
00467E  889B04     MOV W4, Ki
004680  889B15     MOV W5, 0x1362
004682  37001E     BRA 0x46C0
3401:                          }
3402:                          else
3403:                          {
3404:                          if (Ki>KiMustBe)
004684  809B06     MOV Ki, W6
004686  809B17     MOV 0x1362, W7
004688  809B24     MOV KiMustBe, W4
00468A  809B35     MOV 0x1366, W5
00468C  B3C018     MOV.B #0x1, W8
00468E  BE0104     MOV.D W4, W2
004690  BE0006     MOV.D W6, W0
004692  022500     CALL ___gtsf2
004694  000000     NOP
004696  780200     MOV W0, W4
004698  520FE0     SUB W4, #0x0, [W15]
00469A  3C0001     BRA GT, 0x469E
00469C  EB4400     CLR.B W8
00469E  544FE0     SUB.B W8, #0x0, [W15]
0046A0  32000B     BRA Z, 0x46B8
3405:                              Ki=Ki-0.005;
0046A2  809B04     MOV Ki, W4
0046A4  809B15     MOV 0x1362, W5
0046A6  2D70A2     MOV #0xD70A, W2
0046A8  23BA33     MOV #0x3BA3, W3
0046AA  BE0004     MOV.D W4, W0
0046AC  0222D0     CALL ___subsf3
0046AE  000000     NOP
0046B0  BE0200     MOV.D W0, W4
0046B2  889B04     MOV W4, Ki
0046B4  889B15     MOV W5, 0x1362
0046B6  370004     BRA 0x46C0
3406:                              else
3407:                              Ki=KiMustBe;
0046B8  809B24     MOV KiMustBe, W4
0046BA  809B35     MOV 0x1366, W5
0046BC  889B04     MOV W4, Ki
0046BE  889B15     MOV W5, 0x1362
3408:                          }
3409:              
3410:              
3411:              
3412:              
3413:              
3414:                  ClrWdt();
0046C0  FE6000     CLRWDT
3415:              
3416:                      HvGyroData=0;
0046C2  8095E4     MOV Flgs, W4
0046C4  A1E004     BCLR W4, #14
0046C6  8895E4     MOV W4, Flgs
3417:              
3418:              
3419:              
3420:              
3421:              //END TILT SENSING
3422:              
3423:              
3424:              
3425:              if ((HvSpd1))//&&(HvSpd2))
0046C8  8095F5     MOV 0x12BE, W5
0046CA  208004     MOV #0x800, W4
0046CC  628204     AND W5, W4, W4
0046CE  520FE0     SUB W4, #0x0, [W15]
0046D0  3200A0     BRA Z, 0x4812
3426:              {
3427:                  HvSpd1=0;
0046D2  8095F4     MOV 0x12BE, W4
0046D4  A1B004     BCLR W4, #11
0046D6  8895F4     MOV W4, 0x12BE
3428:              
3429:              
3430:              
3431:                  if (Spd1Res<0)
0046D8  817F14     MOV Spd1Res, W4
0046DA  520FE0     SUB W4, #0x0, [W15]
0046DC  3D0004     BRA GE, 0x46E6
3432:                  Spd1ResPlus=-Spd1Res;
0046DE  817F14     MOV Spd1Res, W4
0046E0  EA0204     NEG W4, W4
0046E2  897F44     MOV W4, Spd1ResPlus
0046E4  370002     BRA 0x46EA
3433:                  else
3434:                  Spd1ResPlus=Spd1Res;
0046E6  817F14     MOV Spd1Res, W4
0046E8  897F44     MOV W4, Spd1ResPlus
3435:              
3436:                  
3437:                  
3438:              //HallDelay1MaxSPD_F,HallDelay1MaxSPD_B,HallDelayMaxSPD
3439:                      
3440:                      
3441:                      
3442:                      
3443:                      if (HallDelayMaxSPDNoKMH)
0046EA  81BE44     MOV HallDelayMaxSPDNoKMH, W4
0046EC  81BE55     MOV 0x37CA, W5
0046EE  B81160     MUL.UU W2, #0, W2
0046F0  BE0004     MOV.D W4, W0
0046F2  022586     CALL ___nesf2
0046F4  000000     NOP
0046F6  780200     MOV W0, W4
0046F8  520FE0     SUB W4, #0x0, [W15]
0046FA  320073     BRA Z, 0x47E2
3444:                      {
3445:                  
3446:                          if (Spd1ResPlus<(HallDelayMaxSPDNoKMH-3))
0046FC  817F44     MOV Spd1ResPlus, W4
0046FE  DEA2CF     ASR W4, #15, W5
004700  BE0004     MOV.D W4, W0
004702  02257C     CALL ___floatsisf
004704  000000     NOP
004706  BE0400     MOV.D W0, W8
004708  81BE44     MOV HallDelayMaxSPDNoKMH, W4
00470A  81BE55     MOV 0x37CA, W5
00470C  200002     MOV #0x0, W2
00470E  240403     MOV #0x4040, W3
004710  BE0004     MOV.D W4, W0
004712  0222D0     CALL ___subsf3
004714  000000     NOP
004716  BE0200     MOV.D W0, W4
004718  B3C01A     MOV.B #0x1, W10
00471A  BE0104     MOV.D W4, W2
00471C  BE0008     MOV.D W8, W0
00471E  0224FC     CALL ___lesf2
004720  000000     NOP
004722  780200     MOV W0, W4
004724  520FE0     SUB W4, #0x0, [W15]
004726  350001     BRA LT, 0x472A
004728  EB4500     CLR.B W10
00472A  554FE0     SUB.B W10, #0x0, [W15]
00472C  320020     BRA Z, 0x476E
3447:                          {
3448:                              HallDelay1_FMustBeTemp=HallDelayMem1_F;
00472E  214564     MOV #0x1456, W4
004730  784214     MOV.B [W4], W4
004732  211105     MOV #0x1110, W5
004734  784A84     MOV.B W4, [W5]
3449:                              
3450:                              if (HallDelay1_FMustBe!=HallDelay1_FMustBeTemp)
004736  2110E4     MOV #0x110E, W4
004738  784294     MOV.B [W4], W5
00473A  211104     MOV #0x1110, W4
00473C  784214     MOV.B [W4], W4
00473E  52CF84     SUB.B W5, W4, [W15]
004740  320006     BRA Z, 0x474E
3451:                                  {
3452:                                  HallDelay1_FMustBe=HallDelay1_FMustBeTemp;
004742  211104     MOV #0x1110, W4
004744  784214     MOV.B [W4], W4
004746  2110E5     MOV #0x110E, W5
004748  784A84     MOV.B W4, [W5]
3453:                                  SetHallDelay1_F_UP();
00474A  027076     CALL SetHallDelay1_F_UP
00474C  000001     NOP
3454:                                  }                
3455:                              HallDelay1_BMustBeTemp=HallDelayMem1_B;
00474E  214574     MOV #0x1457, W4
004750  784214     MOV.B [W4], W4
004752  211115     MOV #0x1111, W5
004754  784A84     MOV.B W4, [W5]
3456:                              
3457:                              if (HallDelay1_BMustBe!=HallDelay1_BMustBeTemp)
004756  2110F4     MOV #0x110F, W4
004758  784294     MOV.B [W4], W5
00475A  211114     MOV #0x1111, W4
00475C  784214     MOV.B [W4], W4
00475E  52CF84     SUB.B W5, W4, [W15]
004760  320006     BRA Z, 0x476E
3458:                                  {
3459:                                  HallDelay1_BMustBe=HallDelay1_BMustBeTemp;
004762  211114     MOV #0x1111, W4
004764  784214     MOV.B [W4], W4
004766  2110F5     MOV #0x110F, W5
004768  784A84     MOV.B W4, [W5]
3460:                                  SetHallDelay1_B_UP();
00476A  027096     CALL SetHallDelay1_B_UP
00476C  000001     NOP
3461:                                  }                
3462:                          }
3463:                          if (Spd1ResPlus>(HallDelayMaxSPDNoKMH+3))
00476E  817F44     MOV Spd1ResPlus, W4
004770  DEA2CF     ASR W4, #15, W5
004772  BE0004     MOV.D W4, W0
004774  02257C     CALL ___floatsisf
004776  000000     NOP
004778  BE0400     MOV.D W0, W8
00477A  81BE44     MOV HallDelayMaxSPDNoKMH, W4
00477C  81BE55     MOV 0x37CA, W5
00477E  200002     MOV #0x0, W2
004780  240403     MOV #0x4040, W3
004782  BE0004     MOV.D W4, W0
004784  0222D2     CALL ___addsf3
004786  000000     NOP
004788  BE0200     MOV.D W0, W4
00478A  B3C01A     MOV.B #0x1, W10
00478C  BE0104     MOV.D W4, W2
00478E  BE0008     MOV.D W8, W0
004790  022500     CALL ___gtsf2
004792  000000     NOP
004794  780200     MOV W0, W4
004796  520FE0     SUB W4, #0x0, [W15]
004798  3C0001     BRA GT, 0x479C
00479A  EB4500     CLR.B W10
00479C  554FE0     SUB.B W10, #0x0, [W15]
00479E  320039     BRA Z, 0x4812
3464:                          {
3465:                              HallDelay1_FMustBeTemp=HallDelay1MaxSPD_F;
0047A0  237E34     MOV #0x37E3, W4
0047A2  784214     MOV.B [W4], W4
0047A4  211105     MOV #0x1110, W5
0047A6  784A84     MOV.B W4, [W5]
3466:                              
3467:                              if (HallDelay1_FMustBe!=HallDelay1_FMustBeTemp)
0047A8  2110E4     MOV #0x110E, W4
0047AA  784294     MOV.B [W4], W5
0047AC  211104     MOV #0x1110, W4
0047AE  784214     MOV.B [W4], W4
0047B0  52CF84     SUB.B W5, W4, [W15]
0047B2  320006     BRA Z, 0x47C0
3468:                                  {
3469:                                  HallDelay1_FMustBe=HallDelay1_FMustBeTemp;
0047B4  211104     MOV #0x1110, W4
0047B6  784214     MOV.B [W4], W4
0047B8  2110E5     MOV #0x110E, W5
0047BA  784A84     MOV.B W4, [W5]
3470:                                  SetHallDelay1_F_UP();
0047BC  027076     CALL SetHallDelay1_F_UP
0047BE  000001     NOP
3471:                                  }                
3472:                              HallDelay1_BMustBeTemp=HallDelay1MaxSPD_B;
0047C0  237E44     MOV #0x37E4, W4
0047C2  784214     MOV.B [W4], W4
0047C4  211115     MOV #0x1111, W5
0047C6  784A84     MOV.B W4, [W5]
3473:                              
3474:                              if (HallDelay1_BMustBe!=HallDelay1_BMustBeTemp)
0047C8  2110F4     MOV #0x110F, W4
0047CA  784294     MOV.B [W4], W5
0047CC  211114     MOV #0x1111, W4
0047CE  784214     MOV.B [W4], W4
0047D0  52CF84     SUB.B W5, W4, [W15]
0047D2  32001F     BRA Z, 0x4812
3475:                                  {
3476:                                  HallDelay1_BMustBe=HallDelay1_BMustBeTemp;
0047D4  211114     MOV #0x1111, W4
0047D6  784214     MOV.B [W4], W4
0047D8  2110F5     MOV #0x110F, W5
0047DA  784A84     MOV.B W4, [W5]
3477:                                  SetHallDelay1_B_UP();
0047DC  027096     CALL SetHallDelay1_B_UP
0047DE  000001     NOP
0047E0  370018     BRA 0x4812
3478:                                  }                
3479:                              
3480:                          }
3481:                          
3482:                          
3483:                      }
3484:                      else
3485:                      {
3486:                         if (HallDelay1_FMustBe!=HallDelayMem1_F)
0047E2  2110E4     MOV #0x110E, W4
0047E4  784294     MOV.B [W4], W5
0047E6  214564     MOV #0x1456, W4
0047E8  784214     MOV.B [W4], W4
0047EA  52CF84     SUB.B W5, W4, [W15]
0047EC  320006     BRA Z, 0x47FA
3487:                         {
3488:                         HallDelay1_FMustBe=HallDelayMem1_F;
0047EE  214564     MOV #0x1456, W4
0047F0  784214     MOV.B [W4], W4
0047F2  2110E5     MOV #0x110E, W5
0047F4  784A84     MOV.B W4, [W5]
3489:                         SetHallDelay1_F_UP();
0047F6  027076     CALL SetHallDelay1_F_UP
0047F8  000001     NOP
3490:                         }
3491:                         if (HallDelay1_BMustBe!=HallDelayMem1_B)
0047FA  2110F4     MOV #0x110F, W4
0047FC  784294     MOV.B [W4], W5
0047FE  214574     MOV #0x1457, W4
004800  784214     MOV.B [W4], W4
004802  52CF84     SUB.B W5, W4, [W15]
004804  320006     BRA Z, 0x4812
3492:                         {
3493:                         HallDelay1_BMustBe=HallDelayMem1_B;
004806  214574     MOV #0x1457, W4
004808  784214     MOV.B [W4], W4
00480A  2110F5     MOV #0x110F, W5
00480C  784A84     MOV.B W4, [W5]
3494:                         SetHallDelay1_B_UP();
00480E  027096     CALL SetHallDelay1_B_UP
004810  000001     NOP
3495:                         }
3496:              
3497:                      }
3498:                  
3499:                      
3500:                      /*
3501:                          if (Spd1ResPlus<HallDelayMaxSPDNoKMH)
3502:                          {
3503:                                      
3504:                              DeltaDelay=K_HallDelay*(float)Spd1ResPlus;
3505:                              HallDelay1_FMustBeTemp=HallDelayMem1_F+(char)DeltaDelay;
3506:                              
3507:                              if (HallDelay1_FMustBe!=HallDelay1_FMustBeTemp)
3508:                                  {
3509:                                  HallDelay1_FMustBe=HallDelay1_FMustBeTemp;
3510:                                  SetHallDelay1_F_UP();
3511:                                  }                
3512:                              
3513:                              
3514:                          }*/
3515:                      
3516:              
3517:              
3518:              }
3519:              
3520:              
3521:              
3522:              
3523:              
3524:              
3525:                      if (StartCnt)
004812  216D14     MOV #0x16D1, W4
004814  784214     MOV.B [W4], W4
004816  524FE0     SUB.B W4, #0x0, [W15]
004818  320006     BRA Z, 0x4826
3526:                          StartCnt--;
00481A  216D14     MOV #0x16D1, W4
00481C  784214     MOV.B [W4], W4
00481E  E94204     DEC.B W4, W4
004820  216D15     MOV #0x16D1, W5
004822  784A84     MOV.B W4, [W5]
004824  370001     BRA 0x4828
3527:                      else
3528:                          Nop();
004826  000000     NOP
3529:              
3530:              
3531:              
3532:              
3533:              float  RotX=GyroYFl*TICK_PERIOD;
004828  80C104     MOV GyroYFl, W4
00482A  80C115     MOV 0x1822, W5
00482C  2126F2     MOV #0x126F, W2
00482E  23B833     MOV #0x3B83, W3
004830  BE0004     MOV.D W4, W0
004832  022630     CALL ___mulsf3
004834  000000     NOP
004836  BE0200     MOV.D W0, W4
004838  980734     MOV W4, [W14+6]
00483A  980745     MOV W5, [W14+8]
3534:              float  RotY=-GyroXFl*TICK_PERIOD;
00483C  80C0E4     MOV GyroXFl, W4
00483E  80C0F5     MOV 0x181E, W5
004840  A2F005     BTG W5, #15
004842  2126F2     MOV #0x126F, W2
004844  23B833     MOV #0x3B83, W3
004846  BE0004     MOV.D W4, W0
004848  022630     CALL ___mulsf3
00484A  000000     NOP
00484C  BE0200     MOV.D W0, W4
00484E  980754     MOV W4, [W14+10]
004850  980765     MOV W5, [W14+12]
3535:              float  RotZ=-GyroZFl*TICK_PERIOD;
004852  80C124     MOV GyroZFl, W4
004854  80C135     MOV 0x1826, W5
004856  A2F005     BTG W5, #15
004858  2126F2     MOV #0x126F, W2
00485A  23B833     MOV #0x3B83, W3
00485C  BE0004     MOV.D W4, W0
00485E  022630     CALL ___mulsf3
004860  000000     NOP
004862  BE0200     MOV.D W0, W4
004864  980774     MOV W4, [W14+14]
004866  980F05     MOV W5, [W14+16]
3536:              
3537:              
3538:              
3539:              
3540:              
3541:              //float Alf=RotX*8.75/57296,Bt=RotY*8.75/57296,Gm=RotZ*8.75/57296;
3542:              float Alf=RotX*8.75/57296,Bt=RotY*8.75/57296,Gm=RotZ*8.75/57296;
004868  200002     MOV #0x0, W2
00486A  2410C3     MOV #0x410C, W3
00486C  90003E     MOV [W14+6], W0
00486E  9000CE     MOV [W14+8], W1
004870  022630     CALL ___mulsf3
004872  000000     NOP
004874  BE0200     MOV.D W0, W4
004876  2D0002     MOV #0xD000, W2
004878  2475F3     MOV #0x475F, W3
00487A  BE0004     MOV.D W4, W0
00487C  02245A     CALL ___divsf3
00487E  000000     NOP
004880  BE0200     MOV.D W0, W4
004882  980F14     MOV W4, [W14+18]
004884  980F25     MOV W5, [W14+20]
004886  200002     MOV #0x0, W2
004888  2410C3     MOV #0x410C, W3
00488A  90005E     MOV [W14+10], W0
00488C  9000EE     MOV [W14+12], W1
00488E  022630     CALL ___mulsf3
004890  000000     NOP
004892  BE0200     MOV.D W0, W4
004894  2D0002     MOV #0xD000, W2
004896  2475F3     MOV #0x475F, W3
004898  BE0004     MOV.D W4, W0
00489A  02245A     CALL ___divsf3
00489C  000000     NOP
00489E  BE0200     MOV.D W0, W4
0048A0  980F34     MOV W4, [W14+22]
0048A2  980F45     MOV W5, [W14+24]
0048A4  200002     MOV #0x0, W2
0048A6  2410C3     MOV #0x410C, W3
0048A8  90007E     MOV [W14+14], W0
0048AA  90088E     MOV [W14+16], W1
0048AC  022630     CALL ___mulsf3
0048AE  000000     NOP
0048B0  BE0200     MOV.D W0, W4
0048B2  2D0002     MOV #0xD000, W2
0048B4  2475F3     MOV #0x475F, W3
0048B6  BE0004     MOV.D W4, W0
0048B8  02245A     CALL ___divsf3
0048BA  000000     NOP
0048BC  BE0200     MOV.D W0, W4
0048BE  980F54     MOV W4, [W14+26]
0048C0  980F65     MOV W5, [W14+28]
3543:              float SinBt=sin(Bt);//0
0048C2  90083E     MOV [W14+22], W0
0048C4  9008CE     MOV [W14+24], W1
0048C6  02276A     CALL _sinf
0048C8  000000     NOP
0048CA  BE0200     MOV.D W0, W4
0048CC  980F74     MOV W4, [W14+30]
0048CE  981705     MOV W5, [W14+32]
3544:              float CosBt=cos(Bt);//1
0048D0  90083E     MOV [W14+22], W0
0048D2  9008CE     MOV [W14+24], W1
0048D4  022456     CALL _cosf
0048D6  000000     NOP
0048D8  BE0200     MOV.D W0, W4
0048DA  981714     MOV W4, [W14+34]
0048DC  981725     MOV W5, [W14+36]
3545:              float SinAlf=sin(Alf);//0
0048DE  90081E     MOV [W14+18], W0
0048E0  9008AE     MOV [W14+20], W1
0048E2  02276A     CALL _sinf
0048E4  000000     NOP
0048E6  BE0200     MOV.D W0, W4
0048E8  981734     MOV W4, [W14+38]
0048EA  981745     MOV W5, [W14+40]
3546:              float CosAlf=cos(Alf);//1
0048EC  90081E     MOV [W14+18], W0
0048EE  9008AE     MOV [W14+20], W1
0048F0  022456     CALL _cosf
0048F2  000000     NOP
0048F4  BE0200     MOV.D W0, W4
0048F6  981754     MOV W4, [W14+42]
0048F8  981765     MOV W5, [W14+44]
3547:              float SinGm=sin(Gm);
0048FA  90085E     MOV [W14+26], W0
0048FC  9008EE     MOV [W14+28], W1
0048FE  02276A     CALL _sinf
004900  000000     NOP
004902  BE0200     MOV.D W0, W4
004904  981774     MOV W4, [W14+46]
004906  981F05     MOV W5, [W14+48]
3548:              float CosGm=cos(Gm);
004908  90085E     MOV [W14+26], W0
00490A  9008EE     MOV [W14+28], W1
00490C  022456     CALL _cosf
00490E  000000     NOP
004910  BE0200     MOV.D W0, W4
004912  981F14     MOV W4, [W14+50]
004914  981F25     MOV W5, [W14+52]
3549:              
3550:              
3551:              
3552:                              if (!Starting)
004916  8095E5     MOV Flgs, W5
004918  280004     MOV #0x8000, W4
00491A  628204     AND W5, W4, W4
00491C  520FE0     SUB W4, #0x0, [W15]
00491E  3A0322     BRA NZ, 0x4F64
3553:                              {
3554:              
3555:              		XNew=(AccXFlPrev*CosBt*CosGm-AccYFlPrev*CosBt*SinGm+AccZFlPrev*SinBt)*KGYRO+KACC*AccXFl;
004920  815124     MOV AccXFlPrev, W4
004922  815135     MOV 0x2A26, W5
004924  90111E     MOV [W14+34], W2
004926  9011AE     MOV [W14+36], W3
004928  BE0004     MOV.D W4, W0
00492A  022630     CALL ___mulsf3
00492C  000000     NOP
00492E  BE0200     MOV.D W0, W4
004930  90191E     MOV [W14+50], W2
004932  9019AE     MOV [W14+52], W3
004934  BE0004     MOV.D W4, W0
004936  022630     CALL ___mulsf3
004938  000000     NOP
00493A  BE0200     MOV.D W0, W4
00493C  BE0404     MOV.D W4, W8
00493E  815144     MOV AccYFlPrev, W4
004940  815155     MOV 0x2A2A, W5
004942  90111E     MOV [W14+34], W2
004944  9011AE     MOV [W14+36], W3
004946  BE0004     MOV.D W4, W0
004948  022630     CALL ___mulsf3
00494A  000000     NOP
00494C  BE0200     MOV.D W0, W4
00494E  90117E     MOV [W14+46], W2
004950  90198E     MOV [W14+48], W3
004952  BE0004     MOV.D W4, W0
004954  022630     CALL ___mulsf3
004956  000000     NOP
004958  BE0200     MOV.D W0, W4
00495A  BE0104     MOV.D W4, W2
00495C  BE0008     MOV.D W8, W0
00495E  0222D0     CALL ___subsf3
004960  000000     NOP
004962  BE0200     MOV.D W0, W4
004964  BE0404     MOV.D W4, W8
004966  815164     MOV AccZFlPrev, W4
004968  815175     MOV 0x2A2E, W5
00496A  90097E     MOV [W14+30], W2
00496C  90118E     MOV [W14+32], W3
00496E  BE0004     MOV.D W4, W0
004970  022630     CALL ___mulsf3
004972  000000     NOP
004974  BE0200     MOV.D W0, W4
004976  BE0104     MOV.D W4, W2
004978  BE0008     MOV.D W8, W0
00497A  0222D2     CALL ___addsf3
00497C  000000     NOP
00497E  BE0200     MOV.D W0, W4
004980  BE0304     MOV.D W4, W6
004982  817DC4     MOV KGYRO, W4
004984  817DD5     MOV 0x2FBA, W5
004986  BE0104     MOV.D W4, W2
004988  BE0006     MOV.D W6, W0
00498A  022630     CALL ___mulsf3
00498C  000000     NOP
00498E  BE0200     MOV.D W0, W4
004990  BE0404     MOV.D W4, W8
004992  80BD54     MOV AccXFl, W4
004994  DEA2CF     ASR W4, #15, W5
004996  BE0004     MOV.D W4, W0
004998  02257C     CALL ___floatsisf
00499A  000000     NOP
00499C  BE0300     MOV.D W0, W6
00499E  817DE4     MOV KACC, W4
0049A0  817DF5     MOV 0x2FBE, W5
0049A2  BE0104     MOV.D W4, W2
0049A4  BE0006     MOV.D W6, W0
0049A6  022630     CALL ___mulsf3
0049A8  000000     NOP
0049AA  BE0200     MOV.D W0, W4
0049AC  BE0104     MOV.D W4, W2
0049AE  BE0008     MOV.D W8, W0
0049B0  0222D2     CALL ___addsf3
0049B2  000000     NOP
0049B4  BE0200     MOV.D W0, W4
0049B6  895184     MOV W4, XNew
0049B8  895195     MOV W5, 0x2A32
3556:              		YNew=(AccXFlPrev*SinAlf*SinBt*CosGm+AccXFlPrev*CosAlf*SinGm+AccYFlPrev*SinAlf*SinBt*SinGm+AccYFlPrev*CosAlf*CosGm-AccZFlPrev*SinAlf*CosBt)*KGYRO+KACC*AccYFl;
0049BA  815124     MOV AccXFlPrev, W4
0049BC  815135     MOV 0x2A26, W5
0049BE  90113E     MOV [W14+38], W2
0049C0  9011CE     MOV [W14+40], W3
0049C2  BE0004     MOV.D W4, W0
0049C4  022630     CALL ___mulsf3
0049C6  000000     NOP
0049C8  BE0200     MOV.D W0, W4
0049CA  90097E     MOV [W14+30], W2
0049CC  90118E     MOV [W14+32], W3
0049CE  BE0004     MOV.D W4, W0
0049D0  022630     CALL ___mulsf3
0049D2  000000     NOP
0049D4  BE0200     MOV.D W0, W4
0049D6  90191E     MOV [W14+50], W2
0049D8  9019AE     MOV [W14+52], W3
0049DA  BE0004     MOV.D W4, W0
0049DC  022630     CALL ___mulsf3
0049DE  000000     NOP
0049E0  BE0200     MOV.D W0, W4
0049E2  BE0404     MOV.D W4, W8
0049E4  815124     MOV AccXFlPrev, W4
0049E6  815135     MOV 0x2A26, W5
0049E8  90115E     MOV [W14+42], W2
0049EA  9011EE     MOV [W14+44], W3
0049EC  BE0004     MOV.D W4, W0
0049EE  022630     CALL ___mulsf3
0049F0  000000     NOP
0049F2  BE0200     MOV.D W0, W4
0049F4  90117E     MOV [W14+46], W2
0049F6  90198E     MOV [W14+48], W3
0049F8  BE0004     MOV.D W4, W0
0049FA  022630     CALL ___mulsf3
0049FC  000000     NOP
0049FE  BE0200     MOV.D W0, W4
004A00  BE0104     MOV.D W4, W2
004A02  BE0008     MOV.D W8, W0
004A04  0222D2     CALL ___addsf3
004A06  000000     NOP
004A08  BE0200     MOV.D W0, W4
004A0A  BE0404     MOV.D W4, W8
004A0C  815144     MOV AccYFlPrev, W4
004A0E  815155     MOV 0x2A2A, W5
004A10  90113E     MOV [W14+38], W2
004A12  9011CE     MOV [W14+40], W3
004A14  BE0004     MOV.D W4, W0
004A16  022630     CALL ___mulsf3
004A18  000000     NOP
004A1A  BE0200     MOV.D W0, W4
004A1C  90097E     MOV [W14+30], W2
004A1E  90118E     MOV [W14+32], W3
004A20  BE0004     MOV.D W4, W0
004A22  022630     CALL ___mulsf3
004A24  000000     NOP
004A26  BE0200     MOV.D W0, W4
004A28  90117E     MOV [W14+46], W2
004A2A  90198E     MOV [W14+48], W3
004A2C  BE0004     MOV.D W4, W0
004A2E  022630     CALL ___mulsf3
004A30  000000     NOP
004A32  BE0200     MOV.D W0, W4
004A34  BE0104     MOV.D W4, W2
004A36  BE0008     MOV.D W8, W0
004A38  0222D2     CALL ___addsf3
004A3A  000000     NOP
004A3C  BE0200     MOV.D W0, W4
004A3E  BE0404     MOV.D W4, W8
004A40  815144     MOV AccYFlPrev, W4
004A42  815155     MOV 0x2A2A, W5
004A44  90115E     MOV [W14+42], W2
004A46  9011EE     MOV [W14+44], W3
004A48  BE0004     MOV.D W4, W0
004A4A  022630     CALL ___mulsf3
004A4C  000000     NOP
004A4E  BE0200     MOV.D W0, W4
004A50  90191E     MOV [W14+50], W2
004A52  9019AE     MOV [W14+52], W3
004A54  BE0004     MOV.D W4, W0
004A56  022630     CALL ___mulsf3
004A58  000000     NOP
004A5A  BE0200     MOV.D W0, W4
004A5C  BE0104     MOV.D W4, W2
004A5E  BE0008     MOV.D W8, W0
004A60  0222D2     CALL ___addsf3
004A62  000000     NOP
004A64  BE0200     MOV.D W0, W4
004A66  BE0404     MOV.D W4, W8
004A68  815164     MOV AccZFlPrev, W4
004A6A  815175     MOV 0x2A2E, W5
004A6C  90113E     MOV [W14+38], W2
004A6E  9011CE     MOV [W14+40], W3
004A70  BE0004     MOV.D W4, W0
004A72  022630     CALL ___mulsf3
004A74  000000     NOP
004A76  BE0200     MOV.D W0, W4
004A78  90111E     MOV [W14+34], W2
004A7A  9011AE     MOV [W14+36], W3
004A7C  BE0004     MOV.D W4, W0
004A7E  022630     CALL ___mulsf3
004A80  000000     NOP
004A82  BE0200     MOV.D W0, W4
004A84  BE0104     MOV.D W4, W2
004A86  BE0008     MOV.D W8, W0
004A88  0222D0     CALL ___subsf3
004A8A  000000     NOP
004A8C  BE0200     MOV.D W0, W4
004A8E  BE0304     MOV.D W4, W6
004A90  817DC4     MOV KGYRO, W4
004A92  817DD5     MOV 0x2FBA, W5
004A94  BE0104     MOV.D W4, W2
004A96  BE0006     MOV.D W6, W0
004A98  022630     CALL ___mulsf3
004A9A  000000     NOP
004A9C  BE0200     MOV.D W0, W4
004A9E  BE0404     MOV.D W4, W8
004AA0  80BD64     MOV AccYFl, W4
004AA2  DEA2CF     ASR W4, #15, W5
004AA4  BE0004     MOV.D W4, W0
004AA6  02257C     CALL ___floatsisf
004AA8  000000     NOP
004AAA  BE0300     MOV.D W0, W6
004AAC  817DE4     MOV KACC, W4
004AAE  817DF5     MOV 0x2FBE, W5
004AB0  BE0104     MOV.D W4, W2
004AB2  BE0006     MOV.D W6, W0
004AB4  022630     CALL ___mulsf3
004AB6  000000     NOP
004AB8  BE0200     MOV.D W0, W4
004ABA  BE0104     MOV.D W4, W2
004ABC  BE0008     MOV.D W8, W0
004ABE  0222D2     CALL ___addsf3
004AC0  000000     NOP
004AC2  BE0200     MOV.D W0, W4
004AC4  8951A4     MOV W4, YNew
004AC6  8951B5     MOV W5, 0x2A36
3557:              		ZNew=(-AccXFlPrev*CosAlf*SinBt*CosGm+AccXFlPrev*SinAlf*SinGm+AccYFlPrev*CosAlf*SinBt*SinGm+AccYFlPrev*SinAlf*CosGm+AccZFlPrev*CosAlf*CosBt)*KGYRO+KACC*AccZFl;
004AC8  815124     MOV AccXFlPrev, W4
004ACA  815135     MOV 0x2A26, W5
004ACC  A2F005     BTG W5, #15
004ACE  90115E     MOV [W14+42], W2
004AD0  9011EE     MOV [W14+44], W3
004AD2  BE0004     MOV.D W4, W0
004AD4  022630     CALL ___mulsf3
004AD6  000000     NOP
004AD8  BE0200     MOV.D W0, W4
004ADA  90097E     MOV [W14+30], W2
004ADC  90118E     MOV [W14+32], W3
004ADE  BE0004     MOV.D W4, W0
004AE0  022630     CALL ___mulsf3
004AE2  000000     NOP
004AE4  BE0200     MOV.D W0, W4
004AE6  90191E     MOV [W14+50], W2
004AE8  9019AE     MOV [W14+52], W3
004AEA  BE0004     MOV.D W4, W0
004AEC  022630     CALL ___mulsf3
004AEE  000000     NOP
004AF0  BE0200     MOV.D W0, W4
004AF2  BE0404     MOV.D W4, W8
004AF4  815124     MOV AccXFlPrev, W4
004AF6  815135     MOV 0x2A26, W5
004AF8  90113E     MOV [W14+38], W2
004AFA  9011CE     MOV [W14+40], W3
004AFC  BE0004     MOV.D W4, W0
004AFE  022630     CALL ___mulsf3
004B00  000000     NOP
004B02  BE0200     MOV.D W0, W4
004B04  90117E     MOV [W14+46], W2
004B06  90198E     MOV [W14+48], W3
004B08  BE0004     MOV.D W4, W0
004B0A  022630     CALL ___mulsf3
004B0C  000000     NOP
004B0E  BE0200     MOV.D W0, W4
004B10  BE0104     MOV.D W4, W2
004B12  BE0008     MOV.D W8, W0
004B14  0222D2     CALL ___addsf3
004B16  000000     NOP
004B18  BE0200     MOV.D W0, W4
004B1A  BE0404     MOV.D W4, W8
004B1C  815144     MOV AccYFlPrev, W4
004B1E  815155     MOV 0x2A2A, W5
004B20  90115E     MOV [W14+42], W2
004B22  9011EE     MOV [W14+44], W3
004B24  BE0004     MOV.D W4, W0
004B26  022630     CALL ___mulsf3
004B28  000000     NOP
004B2A  BE0200     MOV.D W0, W4
004B2C  90097E     MOV [W14+30], W2
004B2E  90118E     MOV [W14+32], W3
004B30  BE0004     MOV.D W4, W0
004B32  022630     CALL ___mulsf3
004B34  000000     NOP
004B36  BE0200     MOV.D W0, W4
004B38  90117E     MOV [W14+46], W2
004B3A  90198E     MOV [W14+48], W3
004B3C  BE0004     MOV.D W4, W0
004B3E  022630     CALL ___mulsf3
004B40  000000     NOP
004B42  BE0200     MOV.D W0, W4
004B44  BE0104     MOV.D W4, W2
004B46  BE0008     MOV.D W8, W0
004B48  0222D2     CALL ___addsf3
004B4A  000000     NOP
004B4C  BE0200     MOV.D W0, W4
004B4E  BE0404     MOV.D W4, W8
004B50  815144     MOV AccYFlPrev, W4
004B52  815155     MOV 0x2A2A, W5
004B54  90113E     MOV [W14+38], W2
004B56  9011CE     MOV [W14+40], W3
004B58  BE0004     MOV.D W4, W0
004B5A  022630     CALL ___mulsf3
004B5C  000000     NOP
004B5E  BE0200     MOV.D W0, W4
004B60  90191E     MOV [W14+50], W2
004B62  9019AE     MOV [W14+52], W3
004B64  BE0004     MOV.D W4, W0
004B66  022630     CALL ___mulsf3
004B68  000000     NOP
004B6A  BE0200     MOV.D W0, W4
004B6C  BE0104     MOV.D W4, W2
004B6E  BE0008     MOV.D W8, W0
004B70  0222D2     CALL ___addsf3
004B72  000000     NOP
004B74  BE0200     MOV.D W0, W4
004B76  BE0404     MOV.D W4, W8
004B78  815164     MOV AccZFlPrev, W4
004B7A  815175     MOV 0x2A2E, W5
004B7C  90115E     MOV [W14+42], W2
004B7E  9011EE     MOV [W14+44], W3
004B80  BE0004     MOV.D W4, W0
004B82  022630     CALL ___mulsf3
004B84  000000     NOP
004B86  BE0200     MOV.D W0, W4
004B88  90111E     MOV [W14+34], W2
004B8A  9011AE     MOV [W14+36], W3
004B8C  BE0004     MOV.D W4, W0
004B8E  022630     CALL ___mulsf3
004B90  000000     NOP
004B92  BE0200     MOV.D W0, W4
004B94  BE0104     MOV.D W4, W2
004B96  BE0008     MOV.D W8, W0
004B98  0222D2     CALL ___addsf3
004B9A  000000     NOP
004B9C  BE0200     MOV.D W0, W4
004B9E  BE0304     MOV.D W4, W6
004BA0  817DC4     MOV KGYRO, W4
004BA2  817DD5     MOV 0x2FBA, W5
004BA4  BE0104     MOV.D W4, W2
004BA6  BE0006     MOV.D W6, W0
004BA8  022630     CALL ___mulsf3
004BAA  000000     NOP
004BAC  BE0200     MOV.D W0, W4
004BAE  BE0404     MOV.D W4, W8
004BB0  80BD74     MOV AccZFl, W4
004BB2  DEA2CF     ASR W4, #15, W5
004BB4  BE0004     MOV.D W4, W0
004BB6  02257C     CALL ___floatsisf
004BB8  000000     NOP
004BBA  BE0300     MOV.D W0, W6
004BBC  817DE4     MOV KACC, W4
004BBE  817DF5     MOV 0x2FBE, W5
004BC0  BE0104     MOV.D W4, W2
004BC2  BE0006     MOV.D W6, W0
004BC4  022630     CALL ___mulsf3
004BC6  000000     NOP
004BC8  BE0200     MOV.D W0, W4
004BCA  BE0104     MOV.D W4, W2
004BCC  BE0008     MOV.D W8, W0
004BCE  0222D2     CALL ___addsf3
004BD0  000000     NOP
004BD2  BE0200     MOV.D W0, W4
004BD4  8951C4     MOV W4, ZNew
004BD6  8951D5     MOV W5, 0x2A3A
3558:              
3559:                      
3560:                      
3561:                      
3562:                      
3563:              /*
3564:              
3565:              #if !defined VECTOR_MPU_6000
3566:              float  RotX=GyroXFl*TICK_PERIOD;
3567:              float  RotY=GyroYFl*TICK_PERIOD;
3568:              float  RotZ=-GyroZFl*TICK_PERIOD;
3569:              #else
3570:              float  RotX=GyroYFl*TICK_PERIOD;
3571:              float  RotY=-GyroXFl*TICK_PERIOD;
3572:              float  RotZ=-GyroZFl*TICK_PERIOD;
3573:              #endif
3574:              
3575:              
3576:              
3577:              #if !defined MPU6050
3578:              float Alf=RotX*8.75/57296,Bt=RotY*8.75/57296,Gm=RotZ*8.75/57296;;
3579:              #else
3580:              float Alf=RotX*7.6293/57296,Bt=RotY*7.6293/57296,Gm=RotZ*7.6293/57296;;
3581:              #endif
3582:                          
3583:              float SinBt=sin(Bt);//0
3584:              float CosBt=cos(Bt);//1
3585:              float SinAlf=sin(Alf);//0
3586:              float CosAlf=cos(Alf);//1
3587:              float SinGm=sin(Gm);
3588:              float CosGm=cos(Gm);
3589:              
3590:              
3591:              
3592:                              if (!Starting)
3593:                              {
3594:              
3595:              		XNew=(AccXFlPrev*CosBt*CosGm-AccYFlPrev*CosBt*SinGm+AccZFlPrev*SinBt)*KGYRO+KACC*AccXFl;
3596:              		YNew=(AccXFlPrev*SinAlf*SinBt*CosGm+AccXFlPrev*CosAlf*SinGm+AccYFlPrev*SinAlf*SinBt*SinGm+AccYFlPrev*CosAlf*CosGm-AccZFlPrev*SinAlf*CosBt)*KGYRO+KACC*AccYFl;
3597:              		ZNew=(-AccXFlPrev*CosAlf*SinBt*CosGm+AccXFlPrev*SinAlf*SinGm+AccYFlPrev*CosAlf*SinBt*SinGm+AccYFlPrev*SinAlf*CosGm+AccZFlPrev*CosAlf*CosBt)*KGYRO+KACC*AccZFl;
3598:              */
3599:                      if (!Vertical)
004BD8  809775     MOV StatFlgs3, W5
004BDA  208004     MOV #0x800, W4
004BDC  628204     AND W5, W4, W4
004BDE  520FE0     SUB W4, #0x0, [W15]
004BE0  3A00F1     BRA NZ, 0x4DC4
3600:                      {
3601:                      if (!RotAlfaXRes)
004BE2  809764     MOV StatFlgs2, W4
004BE4  620270     AND W4, #0x10, W4
004BE6  520FE0     SUB W4, #0x0, [W15]
004BE8  3A004E     BRA NZ, 0x4C86
3602:                      {
3603:                      	if ((YNew==0)&&(ZNew==0))
004BEA  8151A4     MOV YNew, W4
004BEC  8151B5     MOV 0x2A36, W5
004BEE  B81160     MUL.UU W2, #0, W2
004BF0  BE0004     MOV.D W4, W0
004BF2  0224FC     CALL ___lesf2
004BF4  000000     NOP
004BF6  780200     MOV W0, W4
004BF8  520FE0     SUB W4, #0x0, [W15]
004BFA  3A000E     BRA NZ, 0x4C18
004BFC  8151C4     MOV ZNew, W4
004BFE  8151D5     MOV 0x2A3A, W5
004C00  B81160     MUL.UU W2, #0, W2
004C02  BE0004     MOV.D W4, W0
004C04  0224FC     CALL ___lesf2
004C06  000000     NOP
004C08  780200     MOV W0, W4
004C0A  520FE0     SUB W4, #0x0, [W15]
004C0C  3A0005     BRA NZ, 0x4C18
3604:              		AlfaXRes=AlfaXResPrev;
004C0E  815244     MOV AlfaXResPrev, W4
004C10  815255     MOV 0x2A4A, W5
004C12  8951E4     MOV W4, AlfaXRes
004C14  8951F5     MOV W5, 0x2A3E
004C16  370032     BRA 0x4C7C
3605:              		else
3606:                              {
3607:                             AlfaXRes=atan(XNew/(sqrt(YNew*YNew+ZNew*ZNew)))*57.296;
004C18  815188     MOV XNew, W8
004C1A  815199     MOV 0x2A32, W9
004C1C  8151A6     MOV YNew, W6
004C1E  8151B7     MOV 0x2A36, W7
004C20  8151A4     MOV YNew, W4
004C22  8151B5     MOV 0x2A36, W5
004C24  BE0104     MOV.D W4, W2
004C26  BE0006     MOV.D W6, W0
004C28  022630     CALL ___mulsf3
004C2A  000000     NOP
004C2C  BE0200     MOV.D W0, W4
004C2E  BE0504     MOV.D W4, W10
004C30  8151C6     MOV ZNew, W6
004C32  8151D7     MOV 0x2A3A, W7
004C34  8151C4     MOV ZNew, W4
004C36  8151D5     MOV 0x2A3A, W5
004C38  BE0104     MOV.D W4, W2
004C3A  BE0006     MOV.D W6, W0
004C3C  022630     CALL ___mulsf3
004C3E  000000     NOP
004C40  BE0200     MOV.D W0, W4
004C42  BE0104     MOV.D W4, W2
004C44  BE000A     MOV.D W10, W0
004C46  0222D2     CALL ___addsf3
004C48  000000     NOP
004C4A  BE0200     MOV.D W0, W4
004C4C  BE0004     MOV.D W4, W0
004C4E  02276E     CALL _sqrtf
004C50  000000     NOP
004C52  BE0200     MOV.D W0, W4
004C54  BE0104     MOV.D W4, W2
004C56  BE0008     MOV.D W8, W0
004C58  02245A     CALL ___divsf3
004C5A  000000     NOP
004C5C  BE0200     MOV.D W0, W4
004C5E  BE0004     MOV.D W4, W0
004C60  02238C     CALL _atanf
004C62  000000     NOP
004C64  BE0200     MOV.D W0, W4
004C66  22F1B2     MOV #0x2F1B, W2
004C68  242653     MOV #0x4265, W3
004C6A  BE0004     MOV.D W4, W0
004C6C  022630     CALL ___mulsf3
004C6E  000000     NOP
004C70  BE0200     MOV.D W0, W4
004C72  8951E4     MOV W4, AlfaXRes
004C74  8951F5     MOV W5, 0x2A3E
3608:                             Starting2=0;
004C76  809614     MOV 0x12C2, W4
004C78  A18004     BCLR W4, #8
004C7A  889614     MOV W4, 0x12C2
3609:                              }
3610:                              AlfaXResPrev=AlfaXRes;
004C7C  8151E4     MOV AlfaXRes, W4
004C7E  8151F5     MOV 0x2A3E, W5
004C80  895244     MOV W4, AlfaXResPrev
004C82  895255     MOV W5, 0x2A4A
004C84  370051     BRA 0x4D28
3611:                      }
3612:                      else
3613:                      {
3614:                    		if ((XNew==0)&&(ZNew==0))
004C86  815184     MOV XNew, W4
004C88  815195     MOV 0x2A32, W5
004C8A  B81160     MUL.UU W2, #0, W2
004C8C  BE0004     MOV.D W4, W0
004C8E  0224FC     CALL ___lesf2
004C90  000000     NOP
004C92  780200     MOV W0, W4
004C94  520FE0     SUB W4, #0x0, [W15]
004C96  3A000E     BRA NZ, 0x4CB4
004C98  8151C4     MOV ZNew, W4
004C9A  8151D5     MOV 0x2A3A, W5
004C9C  B81160     MUL.UU W2, #0, W2
004C9E  BE0004     MOV.D W4, W0
004CA0  0224FC     CALL ___lesf2
004CA2  000000     NOP
004CA4  780200     MOV W0, W4
004CA6  520FE0     SUB W4, #0x0, [W15]
004CA8  3A0005     BRA NZ, 0x4CB4
3615:              		AlfaZRes=AlfaZResPrev;
004CAA  815284     MOV AlfaZResPrev, W4
004CAC  815295     MOV 0x2A52, W5
004CAE  895224     MOV W4, AlfaZRes
004CB0  895235     MOV W5, 0x2A46
004CB2  370032     BRA 0x4D18
3616:                              else
3617:                              {
3618:                             AlfaZRes=atan(ZNew/(sqrt(XNew*XNew+YNew*YNew)))*57.296;
004CB4  8151C8     MOV ZNew, W8
004CB6  8151D9     MOV 0x2A3A, W9
004CB8  815186     MOV XNew, W6
004CBA  815197     MOV 0x2A32, W7
004CBC  815184     MOV XNew, W4
004CBE  815195     MOV 0x2A32, W5
004CC0  BE0104     MOV.D W4, W2
004CC2  BE0006     MOV.D W6, W0
004CC4  022630     CALL ___mulsf3
004CC6  000000     NOP
004CC8  BE0200     MOV.D W0, W4
004CCA  BE0504     MOV.D W4, W10
004CCC  8151A6     MOV YNew, W6
004CCE  8151B7     MOV 0x2A36, W7
004CD0  8151A4     MOV YNew, W4
004CD2  8151B5     MOV 0x2A36, W5
004CD4  BE0104     MOV.D W4, W2
004CD6  BE0006     MOV.D W6, W0
004CD8  022630     CALL ___mulsf3
004CDA  000000     NOP
004CDC  BE0200     MOV.D W0, W4
004CDE  BE0104     MOV.D W4, W2
004CE0  BE000A     MOV.D W10, W0
004CE2  0222D2     CALL ___addsf3
004CE4  000000     NOP
004CE6  BE0200     MOV.D W0, W4
004CE8  BE0004     MOV.D W4, W0
004CEA  02276E     CALL _sqrtf
004CEC  000000     NOP
004CEE  BE0200     MOV.D W0, W4
004CF0  BE0104     MOV.D W4, W2
004CF2  BE0008     MOV.D W8, W0
004CF4  02245A     CALL ___divsf3
004CF6  000000     NOP
004CF8  BE0200     MOV.D W0, W4
004CFA  BE0004     MOV.D W4, W0
004CFC  02238C     CALL _atanf
004CFE  000000     NOP
004D00  BE0200     MOV.D W0, W4
004D02  22F1B2     MOV #0x2F1B, W2
004D04  242653     MOV #0x4265, W3
004D06  BE0004     MOV.D W4, W0
004D08  022630     CALL ___mulsf3
004D0A  000000     NOP
004D0C  BE0200     MOV.D W0, W4
004D0E  895224     MOV W4, AlfaZRes
004D10  895235     MOV W5, 0x2A46
3619:                             Starting2=0;
004D12  809614     MOV 0x12C2, W4
004D14  A18004     BCLR W4, #8
004D16  889614     MOV W4, 0x12C2
3620:                              }
3621:                              AlfaZResPrev=AlfaZRes;
004D18  815224     MOV AlfaZRes, W4
004D1A  815235     MOV 0x2A46, W5
004D1C  895284     MOV W4, AlfaZResPrev
004D1E  895295     MOV W5, 0x2A52
3622:                              AlfaXRes=AlfaZRes;
004D20  815224     MOV AlfaZRes, W4
004D22  815235     MOV 0x2A46, W5
004D24  8951E4     MOV W4, AlfaXRes
004D26  8951F5     MOV W5, 0x2A3E
3623:                      }
3624:              
3625:              		if ((XNew==0)&&(ZNew==0))
004D28  815184     MOV XNew, W4
004D2A  815195     MOV 0x2A32, W5
004D2C  B81160     MUL.UU W2, #0, W2
004D2E  BE0004     MOV.D W4, W0
004D30  0224FC     CALL ___lesf2
004D32  000000     NOP
004D34  780200     MOV W0, W4
004D36  520FE0     SUB W4, #0x0, [W15]
004D38  3A000E     BRA NZ, 0x4D56
004D3A  8151C4     MOV ZNew, W4
004D3C  8151D5     MOV 0x2A3A, W5
004D3E  B81160     MUL.UU W2, #0, W2
004D40  BE0004     MOV.D W4, W0
004D42  0224FC     CALL ___lesf2
004D44  000000     NOP
004D46  780200     MOV W0, W4
004D48  520FE0     SUB W4, #0x0, [W15]
004D4A  3A0005     BRA NZ, 0x4D56
3626:              		AlfaYRes=AlfaYResPrev;
004D4C  815264     MOV AlfaYResPrev, W4
004D4E  815275     MOV 0x2A4E, W5
004D50  895204     MOV W4, AlfaYRes
004D52  895215     MOV W5, 0x2A42
004D54  370032     BRA 0x4DBA
3627:                              else
3628:                              {
3629:                             AlfaYRes=atan(YNew/(sqrt(XNew*XNew+ZNew*ZNew)))*57.296;
004D56  8151A8     MOV YNew, W8
004D58  8151B9     MOV 0x2A36, W9
004D5A  815186     MOV XNew, W6
004D5C  815197     MOV 0x2A32, W7
004D5E  815184     MOV XNew, W4
004D60  815195     MOV 0x2A32, W5
004D62  BE0104     MOV.D W4, W2
004D64  BE0006     MOV.D W6, W0
004D66  022630     CALL ___mulsf3
004D68  000000     NOP
004D6A  BE0200     MOV.D W0, W4
004D6C  BE0504     MOV.D W4, W10
004D6E  8151C6     MOV ZNew, W6
004D70  8151D7     MOV 0x2A3A, W7
004D72  8151C4     MOV ZNew, W4
004D74  8151D5     MOV 0x2A3A, W5
004D76  BE0104     MOV.D W4, W2
004D78  BE0006     MOV.D W6, W0
004D7A  022630     CALL ___mulsf3
004D7C  000000     NOP
004D7E  BE0200     MOV.D W0, W4
004D80  BE0104     MOV.D W4, W2
004D82  BE000A     MOV.D W10, W0
004D84  0222D2     CALL ___addsf3
004D86  000000     NOP
004D88  BE0200     MOV.D W0, W4
004D8A  BE0004     MOV.D W4, W0
004D8C  02276E     CALL _sqrtf
004D8E  000000     NOP
004D90  BE0200     MOV.D W0, W4
004D92  BE0104     MOV.D W4, W2
004D94  BE0008     MOV.D W8, W0
004D96  02245A     CALL ___divsf3
004D98  000000     NOP
004D9A  BE0200     MOV.D W0, W4
004D9C  BE0004     MOV.D W4, W0
004D9E  02238C     CALL _atanf
004DA0  000000     NOP
004DA2  BE0200     MOV.D W0, W4
004DA4  22F1B2     MOV #0x2F1B, W2
004DA6  242653     MOV #0x4265, W3
004DA8  BE0004     MOV.D W4, W0
004DAA  022630     CALL ___mulsf3
004DAC  000000     NOP
004DAE  BE0200     MOV.D W0, W4
004DB0  895204     MOV W4, AlfaYRes
004DB2  895215     MOV W5, 0x2A42
3630:                             Starting2=0;
004DB4  809614     MOV 0x12C2, W4
004DB6  A18004     BCLR W4, #8
004DB8  889614     MOV W4, 0x12C2
3631:                              }
3632:                              AlfaYResPrev=AlfaYRes;
004DBA  815204     MOV AlfaYRes, W4
004DBC  815215     MOV 0x2A42, W5
004DBE  895264     MOV W4, AlfaYResPrev
004DC0  895275     MOV W5, 0x2A4E
004DC2  37009E     BRA 0x4F00
3633:              
3634:              
3635:              
3636:                              }
3637:                      else
3638:                      {
3639:                //      if (!RotAlfaXRes)
3640:                      {
3641:                      	if ((YNew==0)&&(ZNew==0))
004DC4  8151A4     MOV YNew, W4
004DC6  8151B5     MOV 0x2A36, W5
004DC8  B81160     MUL.UU W2, #0, W2
004DCA  BE0004     MOV.D W4, W0
004DCC  0224FC     CALL ___lesf2
004DCE  000000     NOP
004DD0  780200     MOV W0, W4
004DD2  520FE0     SUB W4, #0x0, [W15]
004DD4  3A000E     BRA NZ, 0x4DF2
004DD6  8151C4     MOV ZNew, W4
004DD8  8151D5     MOV 0x2A3A, W5
004DDA  B81160     MUL.UU W2, #0, W2
004DDC  BE0004     MOV.D W4, W0
004DDE  0224FC     CALL ___lesf2
004DE0  000000     NOP
004DE2  780200     MOV W0, W4
004DE4  520FE0     SUB W4, #0x0, [W15]
004DE6  3A0005     BRA NZ, 0x4DF2
3642:              		AlfaXRes=AlfaXResPrev;
004DE8  815244     MOV AlfaXResPrev, W4
004DEA  815255     MOV 0x2A4A, W5
004DEC  8951E4     MOV W4, AlfaXRes
004DEE  8951F5     MOV W5, 0x2A3E
004DF0  370032     BRA 0x4E56
3643:              		else
3644:                              {
3645:                             AlfaXRes=atan(XNew/(sqrt(YNew*YNew+ZNew*ZNew)))*57.296;
004DF2  815188     MOV XNew, W8
004DF4  815199     MOV 0x2A32, W9
004DF6  8151A6     MOV YNew, W6
004DF8  8151B7     MOV 0x2A36, W7
004DFA  8151A4     MOV YNew, W4
004DFC  8151B5     MOV 0x2A36, W5
004DFE  BE0104     MOV.D W4, W2
004E00  BE0006     MOV.D W6, W0
004E02  022630     CALL ___mulsf3
004E04  000000     NOP
004E06  BE0200     MOV.D W0, W4
004E08  BE0504     MOV.D W4, W10
004E0A  8151C6     MOV ZNew, W6
004E0C  8151D7     MOV 0x2A3A, W7
004E0E  8151C4     MOV ZNew, W4
004E10  8151D5     MOV 0x2A3A, W5
004E12  BE0104     MOV.D W4, W2
004E14  BE0006     MOV.D W6, W0
004E16  022630     CALL ___mulsf3
004E18  000000     NOP
004E1A  BE0200     MOV.D W0, W4
004E1C  BE0104     MOV.D W4, W2
004E1E  BE000A     MOV.D W10, W0
004E20  0222D2     CALL ___addsf3
004E22  000000     NOP
004E24  BE0200     MOV.D W0, W4
004E26  BE0004     MOV.D W4, W0
004E28  02276E     CALL _sqrtf
004E2A  000000     NOP
004E2C  BE0200     MOV.D W0, W4
004E2E  BE0104     MOV.D W4, W2
004E30  BE0008     MOV.D W8, W0
004E32  02245A     CALL ___divsf3
004E34  000000     NOP
004E36  BE0200     MOV.D W0, W4
004E38  BE0004     MOV.D W4, W0
004E3A  02238C     CALL _atanf
004E3C  000000     NOP
004E3E  BE0200     MOV.D W0, W4
004E40  22F1B2     MOV #0x2F1B, W2
004E42  242653     MOV #0x4265, W3
004E44  BE0004     MOV.D W4, W0
004E46  022630     CALL ___mulsf3
004E48  000000     NOP
004E4A  BE0200     MOV.D W0, W4
004E4C  8951E4     MOV W4, AlfaXRes
004E4E  8951F5     MOV W5, 0x2A3E
3646:                             Starting2=0;
004E50  809614     MOV 0x12C2, W4
004E52  A18004     BCLR W4, #8
004E54  889614     MOV W4, 0x12C2
3647:                              }
3648:                              AlfaXResPrev=AlfaXRes;
004E56  8151E4     MOV AlfaXRes, W4
004E58  8151F5     MOV 0x2A3E, W5
004E5A  895244     MOV W4, AlfaXResPrev
004E5C  895255     MOV W5, 0x2A4A
3649:                      }
3650:                  //    else
3651:                      {
3652:                    		if ((XNew==0)&&(ZNew==0))
004E5E  815184     MOV XNew, W4
004E60  815195     MOV 0x2A32, W5
004E62  B81160     MUL.UU W2, #0, W2
004E64  BE0004     MOV.D W4, W0
004E66  0224FC     CALL ___lesf2
004E68  000000     NOP
004E6A  780200     MOV W0, W4
004E6C  520FE0     SUB W4, #0x0, [W15]
004E6E  3A000E     BRA NZ, 0x4E8C
004E70  8151C4     MOV ZNew, W4
004E72  8151D5     MOV 0x2A3A, W5
004E74  B81160     MUL.UU W2, #0, W2
004E76  BE0004     MOV.D W4, W0
004E78  0224FC     CALL ___lesf2
004E7A  000000     NOP
004E7C  780200     MOV W0, W4
004E7E  520FE0     SUB W4, #0x0, [W15]
004E80  3A0005     BRA NZ, 0x4E8C
3653:              		AlfaZRes=AlfaZResPrev;
004E82  815284     MOV AlfaZResPrev, W4
004E84  815295     MOV 0x2A52, W5
004E86  895224     MOV W4, AlfaZRes
004E88  895235     MOV W5, 0x2A46
004E8A  370032     BRA 0x4EF0
3654:                              else
3655:                              {
3656:                             AlfaZRes=atan(ZNew/(sqrt(XNew*XNew+YNew*YNew)))*57.296;
004E8C  8151C8     MOV ZNew, W8
004E8E  8151D9     MOV 0x2A3A, W9
004E90  815186     MOV XNew, W6
004E92  815197     MOV 0x2A32, W7
004E94  815184     MOV XNew, W4
004E96  815195     MOV 0x2A32, W5
004E98  BE0104     MOV.D W4, W2
004E9A  BE0006     MOV.D W6, W0
004E9C  022630     CALL ___mulsf3
004E9E  000000     NOP
004EA0  BE0200     MOV.D W0, W4
004EA2  BE0504     MOV.D W4, W10
004EA4  8151A6     MOV YNew, W6
004EA6  8151B7     MOV 0x2A36, W7
004EA8  8151A4     MOV YNew, W4
004EAA  8151B5     MOV 0x2A36, W5
004EAC  BE0104     MOV.D W4, W2
004EAE  BE0006     MOV.D W6, W0
004EB0  022630     CALL ___mulsf3
004EB2  000000     NOP
004EB4  BE0200     MOV.D W0, W4
004EB6  BE0104     MOV.D W4, W2
004EB8  BE000A     MOV.D W10, W0
004EBA  0222D2     CALL ___addsf3
004EBC  000000     NOP
004EBE  BE0200     MOV.D W0, W4
004EC0  BE0004     MOV.D W4, W0
004EC2  02276E     CALL _sqrtf
004EC4  000000     NOP
004EC6  BE0200     MOV.D W0, W4
004EC8  BE0104     MOV.D W4, W2
004ECA  BE0008     MOV.D W8, W0
004ECC  02245A     CALL ___divsf3
004ECE  000000     NOP
004ED0  BE0200     MOV.D W0, W4
004ED2  BE0004     MOV.D W4, W0
004ED4  02238C     CALL _atanf
004ED6  000000     NOP
004ED8  BE0200     MOV.D W0, W4
004EDA  22F1B2     MOV #0x2F1B, W2
004EDC  242653     MOV #0x4265, W3
004EDE  BE0004     MOV.D W4, W0
004EE0  022630     CALL ___mulsf3
004EE2  000000     NOP
004EE4  BE0200     MOV.D W0, W4
004EE6  895224     MOV W4, AlfaZRes
004EE8  895235     MOV W5, 0x2A46
3657:                             Starting2=0;
004EEA  809614     MOV 0x12C2, W4
004EEC  A18004     BCLR W4, #8
004EEE  889614     MOV W4, 0x12C2
3658:                              }
3659:                              AlfaZResPrev=AlfaZRes;
004EF0  815224     MOV AlfaZRes, W4
004EF2  815235     MOV 0x2A46, W5
004EF4  895284     MOV W4, AlfaZResPrev
004EF6  895295     MOV W5, 0x2A52
3660:                              AlfaYRes=AlfaZRes;
004EF8  815224     MOV AlfaZRes, W4
004EFA  815235     MOV 0x2A46, W5
004EFC  895204     MOV W4, AlfaYRes
004EFE  895215     MOV W5, 0x2A42
3661:                      }
3662:              /*
3663:              		if ((XNew==0)&&(ZNew==0))
3664:              		AlfaYRes=AlfaYResPrev;
3665:                              else
3666:                              {
3667:                             AlfaYRes=atan(YNew/(sqrt(XNew*XNew+ZNew*ZNew)))*57.296;
3668:                             Starting2=0;
3669:                              }
3670:                              AlfaYResPrev=AlfaYRes;
3671:              
3672:              */
3673:              
3674:                              }
3675:              
3676:              
3677:                              
3678:                              if (Starting2)
004F00  809615     MOV 0x12C2, W5
004F02  201004     MOV #0x100, W4
004F04  628204     AND W5, W4, W4
004F06  520FE0     SUB W4, #0x0, [W15]
004F08  320004     BRA Z, 0x4F12
3679:                              {
3680:                                  Starting2=0;
004F0A  809614     MOV 0x12C2, W4
004F0C  A18004     BCLR W4, #8
004F0E  889614     MOV W4, 0x12C2
3681:                                  return;
004F10  37153C     BRA 0x798A
3682:                              }
3683:              
3684:              
3685:              //                AlfaYRes=TiltTST;
3686:              
3687:                              TiltXThis=(int)(AlfaXRes*100);
004F12  8151E4     MOV AlfaXRes, W4
004F14  8151F5     MOV 0x2A3E, W5
004F16  200002     MOV #0x0, W2
004F18  242C83     MOV #0x42C8, W3
004F1A  BE0004     MOV.D W4, W0
004F1C  022630     CALL ___mulsf3
004F1E  000000     NOP
004F20  BE0200     MOV.D W0, W4
004F22  BE0004     MOV.D W4, W0
004F24  022504     CALL ___fixsfsi
004F26  000000     NOP
004F28  BE0200     MOV.D W0, W4
004F2A  780204     MOV W4, W4
004F2C  895344     MOV W4, TiltXThis
3688:                              TiltYThis=(int)(AlfaYRes*100);
004F2E  815204     MOV AlfaYRes, W4
004F30  815215     MOV 0x2A42, W5
004F32  200002     MOV #0x0, W2
004F34  242C83     MOV #0x42C8, W3
004F36  BE0004     MOV.D W4, W0
004F38  022630     CALL ___mulsf3
004F3A  000000     NOP
004F3C  BE0200     MOV.D W0, W4
004F3E  BE0004     MOV.D W4, W0
004F40  022504     CALL ___fixsfsi
004F42  000000     NOP
004F44  BE0200     MOV.D W0, W4
004F46  780204     MOV W4, W4
004F48  895354     MOV W4, TiltYThis
3689:              
3690:                              AccXFlPrev=XNew;
004F4A  815184     MOV XNew, W4
004F4C  815195     MOV 0x2A32, W5
004F4E  895124     MOV W4, AccXFlPrev
004F50  895135     MOV W5, 0x2A26
3691:                              AccYFlPrev=YNew;
004F52  8151A4     MOV YNew, W4
004F54  8151B5     MOV 0x2A36, W5
004F56  895144     MOV W4, AccYFlPrev
004F58  895155     MOV W5, 0x2A2A
3692:                              AccZFlPrev=ZNew;
004F5A  8151C4     MOV ZNew, W4
004F5C  8151D5     MOV 0x2A3A, W5
004F5E  895164     MOV W4, AccZFlPrev
004F60  895175     MOV W5, 0x2A2E
004F62  37001E     BRA 0x4FA0
3693:              
3694:                          }
3695:                              else
3696:                              {
3697:                              Starting=0;
004F64  8095E4     MOV Flgs, W4
004F66  A1F004     BCLR W4, #15
004F68  8895E4     MOV W4, Flgs
3698:                              AccXFlPrev=AccXFl;
004F6A  80BD54     MOV AccXFl, W4
004F6C  DEA2CF     ASR W4, #15, W5
004F6E  BE0004     MOV.D W4, W0
004F70  02257C     CALL ___floatsisf
004F72  000000     NOP
004F74  BE0200     MOV.D W0, W4
004F76  895124     MOV W4, AccXFlPrev
004F78  895135     MOV W5, 0x2A26
3699:                              AccYFlPrev=AccYFl;
004F7A  80BD64     MOV AccYFl, W4
004F7C  DEA2CF     ASR W4, #15, W5
004F7E  BE0004     MOV.D W4, W0
004F80  02257C     CALL ___floatsisf
004F82  000000     NOP
004F84  BE0200     MOV.D W0, W4
004F86  895144     MOV W4, AccYFlPrev
004F88  895155     MOV W5, 0x2A2A
3700:                              AccZFlPrev=AccZFl;
004F8A  80BD74     MOV AccZFl, W4
004F8C  DEA2CF     ASR W4, #15, W5
004F8E  BE0004     MOV.D W4, W0
004F90  02257C     CALL ___floatsisf
004F92  000000     NOP
004F94  BE0200     MOV.D W0, W4
004F96  895164     MOV W4, AccZFlPrev
004F98  895175     MOV W5, 0x2A2E
3701:                              Starting2=1;
004F9A  809614     MOV 0x12C2, W4
004F9C  A08004     BSET W4, #8
004F9E  889614     MOV W4, 0x12C2
3702:                              }
3703:              
3704:                      if (!RotAlfaXRes)
004FA0  809764     MOV StatFlgs2, W4
004FA2  620270     AND W4, #0x10, W4
004FA4  520FE0     SUB W4, #0x0, [W15]
004FA6  3A0023     BRA NZ, 0x4FEE
3705:                      {
3706:                      GyroZFilter=GyroZFilter*KFilterPrev+((long int)GyroZFl)*KFilter;
004FA8  809FD6     MOV GyroZFilter, W6
004FAA  809FE7     MOV 0x13FC, W7
004FAC  818054     MOV KFilterPrev, W4
004FAE  818065     MOV 0x300C, W5
004FB0  B83884     MUL.UU W7, W4, W0
004FB2  B82986     MUL.UU W5, W6, W2
004FB4  780082     MOV W2, W1
004FB6  400001     ADD W0, W1, W0
004FB8  780306     MOV W6, W6
004FBA  780204     MOV W4, W4
004FBC  B83404     MUL.UU W6, W4, W8
004FBE  400009     ADD W0, W9, W0
004FC0  780480     MOV W0, W9
004FC2  80C124     MOV GyroZFl, W4
004FC4  80C135     MOV 0x1826, W5
004FC6  BE0004     MOV.D W4, W0
004FC8  022504     CALL ___fixsfsi
004FCA  000000     NOP
004FCC  BE0300     MOV.D W0, W6
004FCE  818074     MOV KFilter, W4
004FD0  818085     MOV 0x3010, W5
004FD2  B83884     MUL.UU W7, W4, W0
004FD4  B82986     MUL.UU W5, W6, W2
004FD6  780082     MOV W2, W1
004FD8  400001     ADD W0, W1, W0
004FDA  780306     MOV W6, W6
004FDC  780204     MOV W4, W4
004FDE  B83204     MUL.UU W6, W4, W4
004FE0  400005     ADD W0, W5, W0
004FE2  780280     MOV W0, W5
004FE4  420208     ADD W4, W8, W4
004FE6  4A8289     ADDC W5, W9, W5
004FE8  889FD4     MOV W4, GyroZFilter
004FEA  889FE5     MOV W5, 0x13FC
004FEC  370022     BRA 0x5032
3707:                      }
3708:                      else
3709:                      {
3710:                      GyroZFilter=GyroZFilter*KFilterPrev+((long int)GyroYFl)*KFilter;
004FEE  809FD6     MOV GyroZFilter, W6
004FF0  809FE7     MOV 0x13FC, W7
004FF2  818054     MOV KFilterPrev, W4
004FF4  818065     MOV 0x300C, W5
004FF6  B83884     MUL.UU W7, W4, W0
004FF8  B82986     MUL.UU W5, W6, W2
004FFA  780082     MOV W2, W1
004FFC  400001     ADD W0, W1, W0
004FFE  780306     MOV W6, W6
005000  780204     MOV W4, W4
005002  B83404     MUL.UU W6, W4, W8
005004  400009     ADD W0, W9, W0
005006  780480     MOV W0, W9
005008  80C104     MOV GyroYFl, W4
00500A  80C115     MOV 0x1822, W5
00500C  BE0004     MOV.D W4, W0
00500E  022504     CALL ___fixsfsi
005010  000000     NOP
005012  BE0300     MOV.D W0, W6
005014  818074     MOV KFilter, W4
005016  818085     MOV 0x3010, W5
005018  B83884     MUL.UU W7, W4, W0
00501A  B82986     MUL.UU W5, W6, W2
00501C  780082     MOV W2, W1
00501E  400001     ADD W0, W1, W0
005020  780306     MOV W6, W6
005022  780204     MOV W4, W4
005024  B83204     MUL.UU W6, W4, W4
005026  400005     ADD W0, W5, W0
005028  780280     MOV W0, W5
00502A  420208     ADD W4, W8, W4
00502C  4A8289     ADDC W5, W9, W5
00502E  889FD4     MOV W4, GyroZFilter
005030  889FE5     MOV W5, 0x13FC
3711:                      }
3712:                      GyroZFilter=GyroZFilter>>7;
005032  809FD4     MOV GyroZFilter, W4
005034  809FE5     MOV 0x13FC, W5
005036  DD2B49     SL W5, #9, W6
005038  DE2247     LSR W4, #7, W4
00503A  730204     IOR W6, W4, W4
00503C  DEAAC7     ASR W5, #7, W5
00503E  889FD4     MOV W4, GyroZFilter
005040  889FE5     MOV W5, 0x13FC
3713:              
3714:              
3715:              //-----------START  PWM  ----------------------------------------------
3716:              #ifdef PROTECT
3717:                          //ProtectValue=ReadProgramMemory(0x24d6);
3718:                          //ProtectValue=ReadProgramMemory(0x1f24);
3719:                          if (((unsigned int)(ReadProgramMemory(0x1f24)))!=0x0f85)
3720:                          //    if (ProtectValue!=0x0f85)
3721:                              CriticalError=CRERR_SEC_ERROR_3;
3722:              #endif
3723:              
3724:              
3725:              if (!DirectControlMotor)
005042  809744     MOV StatFlgs, W4
005044  620261     AND W4, #0x1, W4
005046  520FE0     SUB W4, #0x0, [W15]
005048  3A1196     BRA NZ, 0x7376
3726:              {
3727:                      
3728:                  
3729:                  BreakPressedPrev=BreakPressed;
00504A  809614     MOV 0x12C2, W4
00504C  624261     AND.B W4, #0x1, W4
00504E  FB8204     ZE W4, W4
005050  620261     AND W4, #0x1, W4
005052  DD2249     SL W4, #9, W4
005054  809666     MOV Flgs4, W6
005056  2FDFF5     MOV #0xFDFF, W5
005058  630285     AND W6, W5, W5
00505A  728204     IOR W5, W4, W4
00505C  889664     MOV W4, Flgs4
3730:                  if (Vector)
00505E  809684     MOV Flgs5, W4
005060  620270     AND W4, #0x10, W4
005062  520FE0     SUB W4, #0x0, [W15]
005064  320001     BRA Z, 0x5068
3731:                  IEC3bits.T8IE = 0;
005066  A96826     BCLR IEC3, #3
3732:                  TestBreak();
005068  027C84     CALL TestBreak
00506A  000001     NOP
3733:                  if (Monocycle)
00506C  809745     MOV StatFlgs, W5
00506E  280004     MOV #0x8000, W4
005070  628204     AND W5, W4, W4
005072  520FE0     SUB W4, #0x0, [W15]
005074  320003     BRA Z, 0x507C
3734:                      BreakPressed=0;
005076  809614     MOV 0x12C2, W4
005078  A10004     BCLR W4, #0
00507A  889614     MOV W4, 0x12C2
3735:                  
3736:                  if (Joystick&&(_2WDMode))
00507C  809775     MOV StatFlgs3, W5
00507E  200204     MOV #0x20, W4
005080  628204     AND W5, W4, W4
005082  520FE0     SUB W4, #0x0, [W15]
005084  320007     BRA Z, 0x5094
005086  230C94     MOV #0x30C9, W4
005088  784214     MOV.B [W4], W4
00508A  524FE0     SUB.B W4, #0x0, [W15]
00508C  320003     BRA Z, 0x5094
3737:                      AnalogBreak=0;
00508E  809744     MOV StatFlgs, W4
005090  A1C004     BCLR W4, #12
005092  889744     MOV W4, StatFlgs
3738:                  
3739:                  if (!_2WDMode)
005094  230C94     MOV #0x30C9, W4
005096  784214     MOV.B [W4], W4
005098  524FE0     SUB.B W4, #0x0, [W15]
00509A  3A0003     BRA NZ, 0x50A2
3740:                      Joystick=0;
00509C  809774     MOV StatFlgs3, W4
00509E  A15004     BCLR W4, #5
0050A0  889774     MOV W4, StatFlgs3
3741:                      
3742:                  
3743:                  
3744:              if (!Monocycle)
0050A2  809745     MOV StatFlgs, W5
0050A4  280004     MOV #0x8000, W4
0050A6  628204     AND W5, W4, W4
0050A8  520FE0     SUB W4, #0x0, [W15]
0050AA  3A0B1B     BRA NZ, 0x66E2
3745:              {
3746:                  
3747:                  
3748:                  if (AnalogBreak)
0050AC  809745     MOV StatFlgs, W5
0050AE  210004     MOV #0x1000, W4
0050B0  628204     AND W5, W4, W4
0050B2  520FE0     SUB W4, #0x0, [W15]
0050B4  320079     BRA Z, 0x51A8
3749:                  {
3750:                      SmoothBreak=0;
0050B6  809744     MOV StatFlgs, W4
0050B8  A15004     BCLR W4, #5
0050BA  889744     MOV W4, StatFlgs
3751:                      BreakTMP=ADCThrottleBreak;
0050BC  8093E4     MOV ADCThrottleBreak, W4
0050BE  89FF74     MOV W4, BreakTMP
3752:                      if (BreakTMP>BreakThresholdUp)
0050C0  81FF75     MOV BreakTMP, W5
0050C2  8094B4     MOV BreakThresholdUp, W4
0050C4  528F84     SUB W5, W4, [W15]
0050C6  340002     BRA LE, 0x50CC
3753:                          BreakTMP=BreakThresholdUp;
0050C8  8094B4     MOV BreakThresholdUp, W4
0050CA  89FF74     MOV W4, BreakTMP
3754:                      BreakTMP=BreakTMP-BreakThresholdDn;
0050CC  81FF75     MOV BreakTMP, W5
0050CE  8094C4     MOV BreakThresholdDn, W4
0050D0  528204     SUB W5, W4, W4
0050D2  89FF74     MOV W4, BreakTMP
3755:                      if (BreakTMP<0)
0050D4  81FF74     MOV BreakTMP, W4
0050D6  520FE0     SUB W4, #0x0, [W15]
0050D8  3D0002     BRA GE, 0x50DE
3756:                          BreakTMP=0;
0050DA  EB0200     CLR W4
0050DC  89FF74     MOV W4, BreakTMP
3757:                      
3758:                      if (TimerRegenOff>0)
0050DE  818544     MOV TimerRegenOff, W4
0050E0  520FE0     SUB W4, #0x0, [W15]
0050E2  320003     BRA Z, 0x50EA
3759:                          TimerRegenOff--;
0050E4  818544     MOV TimerRegenOff, W4
0050E6  E90204     DEC W4, W4
0050E8  898544     MOV W4, TimerRegenOff
3760:                      if ((UBT>RegenOff)&&!TimerRegenOff)
0050EA  817E65     MOV UBT, W5
0050EC  8180F4     MOV RegenOff, W4
0050EE  528F84     SUB W5, W4, [W15]
0050F0  360013     BRA LEU, 0x5118
0050F2  818544     MOV TimerRegenOff, W4
0050F4  520FE0     SUB W4, #0x0, [W15]
0050F6  3A0010     BRA NZ, 0x5118
3761:                  {
3762:                          BreakTMP=0;
0050F8  EB0200     CLR W4
0050FA  89FF74     MOV W4, BreakTMP
3763:                          TimerRegenOff=1000;
0050FC  203E84     MOV #0x3E8, W4
0050FE  898544     MOV W4, TimerRegenOff
3764:                          if ((!Sounds)&&(!AlarmOn))
005100  2124A4     MOV #0x124A, W4
005102  784214     MOV.B [W4], W4
005104  524FE0     SUB.B W4, #0x0, [W15]
005106  3A0008     BRA NZ, 0x5118
005108  809635     MOV 0x12C6, W5
00510A  240004     MOV #0x4000, W4
00510C  628204     AND W5, W4, W4
00510E  520FE0     SUB W4, #0x0, [W15]
005110  3A0003     BRA NZ, 0x5118
3765:                          SoundNum=18;
005112  2124B5     MOV #0x124B, W5
005114  B3C124     MOV.B #0x12, W4
005116  784A84     MOV.B W4, [W5]
3766:                      
3767:                  }
3768:                      if (TimerRegenOff)
005118  818544     MOV TimerRegenOff, W4
00511A  520FE0     SUB W4, #0x0, [W15]
00511C  320002     BRA Z, 0x5122
3769:                      {
3770:                          BreakTMP=0;
00511E  EB0200     CLR W4
005120  89FF74     MOV W4, BreakTMP
3771:                      }
3772:                      
3773:                      if (BreakTMP>50)
005122  81FF75     MOV BreakTMP, W5
005124  200324     MOV #0x32, W4
005126  528F84     SUB W5, W4, [W15]
005128  340006     BRA LE, 0x5136
3774:                      {
3775:                          BreakPressed=1;
00512A  809614     MOV 0x12C2, W4
00512C  A00004     BSET W4, #0
00512E  889614     MOV W4, 0x12C2
3776:                          ThrottleTmp=BreakTMP;
005130  81FF74     MOV BreakTMP, W4
005132  89FF34     MOV W4, ThrottleTmp
005134  3700EB     BRA 0x530C
3777:                      }
3778:                      else
3779:                      {
3780:                          if (!BreakPressed)
005136  809614     MOV 0x12C2, W4
005138  620261     AND W4, #0x1, W4
00513A  520FE0     SUB W4, #0x0, [W15]
00513C  3A0019     BRA NZ, 0x5170
3781:                          {
3782:              
3783:               
3784:                              
3785:                              
3786:                              
3787:                              
3788:                              if (!WheelingNew)
00513E  8096D4     MOV 0x12DA, W4
005140  620268     AND W4, #0x8, W4
005142  520FE0     SUB W4, #0x0, [W15]
005144  3A0003     BRA NZ, 0x514C
3789:                              {
3790:                          ThrottleTmp=ADCThrottle;
005146  809354     MOV ADCThrottle, W4
005148  89FF34     MOV W4, ThrottleTmp
00514A  370002     BRA 0x5150
3791:                              }
3792:                              else
3793:                          ThrottleTmp=0;        
00514C  EB0200     CLR W4
00514E  89FF34     MOV W4, ThrottleTmp
3794:              
3795:                          if (ThrottleTmp>SensorThresholdUp)
005150  81FF35     MOV ThrottleTmp, W5
005152  809484     MOV SensorThresholdUp, W4
005154  528F84     SUB W5, W4, [W15]
005156  340002     BRA LE, 0x515C
3796:                              ThrottleTmp=SensorThresholdUp;
005158  809484     MOV SensorThresholdUp, W4
00515A  89FF34     MOV W4, ThrottleTmp
3797:                              
3798:                          ThrottleTmp=ThrottleTmp-SensorThresholdDn;
00515C  81FF35     MOV ThrottleTmp, W5
00515E  809474     MOV SensorThresholdDn, W4
005160  528204     SUB W5, W4, W4
005162  89FF34     MOV W4, ThrottleTmp
3799:              
3800:                          if (ThrottleTmp<0)
005164  81FF34     MOV ThrottleTmp, W4
005166  520FE0     SUB W4, #0x0, [W15]
005168  3D00D1     BRA GE, 0x530C
3801:                              ThrottleTmp=0;
00516A  EB0200     CLR W4
00516C  89FF34     MOV W4, ThrottleTmp
00516E  3700CE     BRA 0x530C
3802:                          }
3803:                          else
3804:                          {
3805:                          ThrottleTmp=ADCThrottle;
005170  809354     MOV ADCThrottle, W4
005172  89FF34     MOV W4, ThrottleTmp
3806:              
3807:                          if (ThrottleTmp>SensorThresholdUp)
005174  81FF35     MOV ThrottleTmp, W5
005176  809484     MOV SensorThresholdUp, W4
005178  528F84     SUB W5, W4, [W15]
00517A  340002     BRA LE, 0x5180
3808:                              ThrottleTmp=SensorThresholdUp;
00517C  809484     MOV SensorThresholdUp, W4
00517E  89FF34     MOV W4, ThrottleTmp
3809:                          ThrottleTmp=ThrottleTmp-SensorThresholdDn;
005180  81FF35     MOV ThrottleTmp, W5
005182  809474     MOV SensorThresholdDn, W4
005184  528204     SUB W5, W4, W4
005186  89FF34     MOV W4, ThrottleTmp
3810:              
3811:                          if (ThrottleTmp<0)
005188  81FF34     MOV ThrottleTmp, W4
00518A  520FE0     SUB W4, #0x0, [W15]
00518C  3D0002     BRA GE, 0x5192
3812:                              ThrottleTmp=0;
00518E  EB0200     CLR W4
005190  89FF34     MOV W4, ThrottleTmp
3813:                          if (ThrottleTmp<80)
005192  81FF35     MOV ThrottleTmp, W5
005194  2004F4     MOV #0x4F, W4
005196  528F84     SUB W5, W4, [W15]
005198  3C0004     BRA GT, 0x51A2
3814:                          {
3815:                          BreakPressed=0;
00519A  809614     MOV 0x12C2, W4
00519C  A10004     BCLR W4, #0
00519E  889614     MOV W4, 0x12C2
0051A0  3700B5     BRA 0x530C
3816:                          }
3817:                          else
3818:                              ThrottleTmp=0;
0051A2  EB0200     CLR W4
0051A4  89FF34     MOV W4, ThrottleTmp
0051A6  3700B2     BRA 0x530C
3819:                          
3820:                          }
3821:                      }
3822:                      
3823:              
3824:                      
3825:                      
3826:                  }
3827:                  else
3828:                  {
3829:                  
3830:                      ThrottleTmp=ADCThrottle;
0051A8  809354     MOV ADCThrottle, W4
0051AA  89FF34     MOV W4, ThrottleTmp
3831:                      if (BreakPressed)
0051AC  809614     MOV 0x12C2, W4
0051AE  620261     AND W4, #0x1, W4
0051B0  520FE0     SUB W4, #0x0, [W15]
0051B2  320059     BRA Z, 0x5266
3832:                      {
3833:                          if (ButtonBreakOnly)
0051B4  809775     MOV StatFlgs3, W5
0051B6  210004     MOV #0x1000, W4
0051B8  628204     AND W5, W4, W4
0051BA  520FE0     SUB W4, #0x0, [W15]
0051BC  320057     BRA Z, 0x526C
3834:                          {
3835:                              if (ButtonBreakOnlyTime!=0)
0051BE  818414     MOV ButtonBreakOnlyTime, W4
0051C0  520FE0     SUB W4, #0x0, [W15]
0051C2  32004E     BRA Z, 0x5260
3836:                              {
3837:                                  if (!ButtonBreakOnlyPrev)
0051C4  8096D5     MOV 0x12DA, W5
0051C6  201004     MOV #0x100, W4
0051C8  628204     AND W5, W4, W4
0051CA  520FE0     SUB W4, #0x0, [W15]
0051CC  3A002E     BRA NZ, 0x522A
3838:                                  {
3839:                                      ButtonBreakOnlyPrev=1;
0051CE  8096D4     MOV 0x12DA, W4
0051D0  A08004     BSET W4, #8
0051D2  8896D4     MOV W4, 0x12DA
3840:                                      ThrottleTmp=0;
0051D4  EB0200     CLR W4
0051D6  89FF34     MOV W4, ThrottleTmp
3841:                                      ButtonBreakOnlyTimeAdd=((float)ButtonBreakOnlyTime)*((float)2.5);
0051D8  818414     MOV ButtonBreakOnlyTime, W4
0051DA  200005     MOV #0x0, W5
0051DC  BE0004     MOV.D W4, W0
0051DE  022582     CALL ___floatunsisf
0051E0  000000     NOP
0051E2  BE0200     MOV.D W0, W4
0051E4  200002     MOV #0x0, W2
0051E6  240203     MOV #0x4020, W3
0051E8  BE0004     MOV.D W4, W0
0051EA  022630     CALL ___mulsf3
0051EC  000000     NOP
0051EE  BE0200     MOV.D W0, W4
0051F0  889214     MOV W4, ButtonBreakOnlyTimeAdd
0051F2  889225     MOV W5, 0x1244
3842:                                      if (ButtonBreakOnlyTimeAdd!=0)
0051F4  809214     MOV ButtonBreakOnlyTimeAdd, W4
0051F6  809225     MOV 0x1244, W5
0051F8  B81160     MUL.UU W2, #0, W2
0051FA  BE0004     MOV.D W4, W0
0051FC  022586     CALL ___nesf2
0051FE  000000     NOP
005200  780200     MOV W0, W4
005202  520FE0     SUB W4, #0x0, [W15]
005204  32000F     BRA Z, 0x5224
3843:                                      ButtonBreakOnlyTimeAdd=((float)ButtonBreakOnlyPWM)/((float)ButtonBreakOnlyTimeAdd);
005206  8180D4     MOV ButtonBreakOnlyPWM, W4
005208  200005     MOV #0x0, W5
00520A  BE0004     MOV.D W4, W0
00520C  022582     CALL ___floatunsisf
00520E  000000     NOP
005210  BE0300     MOV.D W0, W6
005212  809214     MOV ButtonBreakOnlyTimeAdd, W4
005214  809225     MOV 0x1244, W5
005216  BE0104     MOV.D W4, W2
005218  BE0006     MOV.D W6, W0
00521A  02245A     CALL ___divsf3
00521C  000000     NOP
00521E  BE0200     MOV.D W0, W4
005220  889214     MOV W4, ButtonBreakOnlyTimeAdd
005222  889225     MOV W5, 0x1244
3844:                                      ThrottleTmpAdd=0;
005224  EB0200     CLR W4
005226  8A0014     MOV W4, ThrottleTmpAdd
005228  370021     BRA 0x526C
3845:                                  }
3846:                                  else
3847:                                  {
3848:                                      if (ThrottleTmp<ButtonBreakOnlyPWM)
00522A  81FF34     MOV ThrottleTmp, W4
00522C  780284     MOV W4, W5
00522E  8180D4     MOV ButtonBreakOnlyPWM, W4
005230  528F84     SUB W5, W4, [W15]
005232  310013     BRA C, 0x525A
3849:                                      ThrottleTmpAdd=ThrottleTmpAdd+ButtonBreakOnlyTimeAdd;
005234  820014     MOV ThrottleTmpAdd, W4
005236  DEA2CF     ASR W4, #15, W5
005238  BE0004     MOV.D W4, W0
00523A  02257C     CALL ___floatsisf
00523C  000000     NOP
00523E  BE0300     MOV.D W0, W6
005240  809214     MOV ButtonBreakOnlyTimeAdd, W4
005242  809225     MOV 0x1244, W5
005244  BE0104     MOV.D W4, W2
005246  BE0006     MOV.D W6, W0
005248  0222D2     CALL ___addsf3
00524A  000000     NOP
00524C  BE0200     MOV.D W0, W4
00524E  BE0004     MOV.D W4, W0
005250  022504     CALL ___fixsfsi
005252  000000     NOP
005254  BE0200     MOV.D W0, W4
005256  780204     MOV W4, W4
005258  8A0014     MOV W4, ThrottleTmpAdd
3850:                                      ThrottleTmp=ThrottleTmpAdd;
00525A  820014     MOV ThrottleTmpAdd, W4
00525C  89FF34     MOV W4, ThrottleTmp
00525E  370006     BRA 0x526C
3851:                                  }
3852:                              }
3853:                              else
3854:                                  ThrottleTmp=ButtonBreakOnlyPWM;
005260  8180D4     MOV ButtonBreakOnlyPWM, W4
005262  89FF34     MOV W4, ThrottleTmp
005264  370003     BRA 0x526C
3855:                          }
3856:                      }
3857:                      else
3858:                          ButtonBreakOnlyPrev=0;
005266  8096D4     MOV 0x12DA, W4
005268  A18004     BCLR W4, #8
00526A  8896D4     MOV W4, 0x12DA
3859:                      
3860:                      if (ThrottleTmp>SensorThresholdUp)
00526C  81FF35     MOV ThrottleTmp, W5
00526E  809484     MOV SensorThresholdUp, W4
005270  528F84     SUB W5, W4, [W15]
005272  340002     BRA LE, 0x5278
3861:                          ThrottleTmp=SensorThresholdUp;
005274  809484     MOV SensorThresholdUp, W4
005276  89FF34     MOV W4, ThrottleTmp
3862:                      ThrottleTmp=ThrottleTmp-SensorThresholdDn;
005278  81FF35     MOV ThrottleTmp, W5
00527A  809474     MOV SensorThresholdDn, W4
00527C  528204     SUB W5, W4, W4
00527E  89FF34     MOV W4, ThrottleTmp
3863:                      
3864:              
3865:                              if (AlarmOn)
005280  809635     MOV 0x12C6, W5
005282  240004     MOV #0x4000, W4
005284  628204     AND W5, W4, W4
005286  520FE0     SUB W4, #0x0, [W15]
005288  320015     BRA Z, 0x52B4
3866:                              {
3867:                                  if (ThrottleTmp>150)
00528A  81FF35     MOV ThrottleTmp, W5
00528C  200964     MOV #0x96, W4
00528E  528F84     SUB W5, W4, [W15]
005290  34000F     BRA LE, 0x52B0
3868:                                  {
3869:                                      if (!HorningH)
005292  809635     MOV 0x12C6, W5
005294  280004     MOV #0x8000, W4
005296  628204     AND W5, W4, W4
005298  520FE0     SUB W4, #0x0, [W15]
00529A  3A000A     BRA NZ, 0x52B0
3870:                                      {
3871:                                      HorningH=1;
00529C  809634     MOV 0x12C6, W4
00529E  A0F004     BSET W4, #15
0052A0  889634     MOV W4, 0x12C6
3872:                                      if (!Sounds)
0052A2  2124A4     MOV #0x124A, W4
0052A4  784214     MOV.B [W4], W4
0052A6  524FE0     SUB.B W4, #0x0, [W15]
0052A8  3A0003     BRA NZ, 0x52B0
3873:                                          SoundNum=14;
0052AA  2124B5     MOV #0x124B, W5
0052AC  B3C0E4     MOV.B #0xE, W4
0052AE  784A84     MOV.B W4, [W5]
3874:                                      }
3875:                                  }
3876:                              ThrottleTmp=0;        
0052B0  EB0200     CLR W4
0052B2  89FF34     MOV W4, ThrottleTmp
3877:                              }
3878:                      
3879:                      
3880:                    
3881:                      
3882:                      
3883:                         if (Joystick)
0052B4  809775     MOV StatFlgs3, W5
0052B6  200204     MOV #0x20, W4
0052B8  628204     AND W5, W4, W4
0052BA  520FE0     SUB W4, #0x0, [W15]
0052BC  320022     BRA Z, 0x5302
3884:                         {
3885:                          ThrottleTmp=ThrottleTmp-JoystickCalibrX+SensorThresholdDn;
0052BE  81FF35     MOV ThrottleTmp, W5
0052C0  809454     MOV JoystickCalibrX, W4
0052C2  528284     SUB W5, W4, W5
0052C4  809474     MOV SensorThresholdDn, W4
0052C6  428204     ADD W5, W4, W4
0052C8  89FF34     MOV W4, ThrottleTmp
3886:                          if (ThrottleTmp>0)
0052CA  81FF34     MOV ThrottleTmp, W4
0052CC  520FE0     SUB W4, #0x0, [W15]
0052CE  34000C     BRA LE, 0x52E8
3887:                          {
3888:                              if (ThrottleTmp>JoistickDeadZone)
0052D0  81FF35     MOV ThrottleTmp, W5
0052D2  818284     MOV JoistickDeadZone, W4
0052D4  528F84     SUB W5, W4, [W15]
0052D6  340005     BRA LE, 0x52E2
3889:                                  ThrottleTmp=ThrottleTmp-JoistickDeadZone;
0052D8  81FF35     MOV ThrottleTmp, W5
0052DA  818284     MOV JoistickDeadZone, W4
0052DC  528204     SUB W5, W4, W4
0052DE  89FF34     MOV W4, ThrottleTmp
0052E0  370015     BRA 0x530C
3890:                              else
3891:                                  ThrottleTmp=0;
0052E2  EB0200     CLR W4
0052E4  89FF34     MOV W4, ThrottleTmp
0052E6  370012     BRA 0x530C
3892:                          }
3893:                          else
3894:                          {
3895:                              if (ThrottleTmp<-JoistickDeadZone)
0052E8  818284     MOV JoistickDeadZone, W4
0052EA  EA0284     NEG W4, W5
0052EC  81FF34     MOV ThrottleTmp, W4
0052EE  528F84     SUB W5, W4, [W15]
0052F0  340005     BRA LE, 0x52FC
3896:                                  ThrottleTmp=ThrottleTmp+JoistickDeadZone;
0052F2  81FF35     MOV ThrottleTmp, W5
0052F4  818284     MOV JoistickDeadZone, W4
0052F6  428204     ADD W5, W4, W4
0052F8  89FF34     MOV W4, ThrottleTmp
0052FA  370008     BRA 0x530C
3897:                              else
3898:                                  ThrottleTmp=0;
0052FC  EB0200     CLR W4
0052FE  89FF34     MOV W4, ThrottleTmp
005300  370005     BRA 0x530C
3899:                          }
3900:                         }
3901:                         else
3902:                         {
3903:                               
3904:                          if (ThrottleTmp<0)
005302  81FF34     MOV ThrottleTmp, W4
005304  520FE0     SUB W4, #0x0, [W15]
005306  3D0002     BRA GE, 0x530C
3905:                              ThrottleTmp=0;
005308  EB0200     CLR W4
00530A  89FF34     MOV W4, ThrottleTmp
3906:                         }
3907:                      
3908:                      
3909:                  }
3910:                      
3911:                  ThrottleTmpMixed=ThrottleTmp;
00530C  81FF34     MOV ThrottleTmp, W4
00530E  89FF44     MOV W4, ThrottleTmpMixed
3912:                  
3913:                  
3914:                  
3915:                  
3916:                  
3917:                  
3918:                  
3919:                  if (SlowStart&&(!PWM_Mode))
005310  809765     MOV StatFlgs2, W5
005312  201004     MOV #0x100, W4
005314  628204     AND W5, W4, W4
005316  520FE0     SUB W4, #0x0, [W15]
005318  32002F     BRA Z, 0x5378
00531A  809765     MOV StatFlgs2, W5
00531C  210004     MOV #0x1000, W4
00531E  628204     AND W5, W4, W4
005320  520FE0     SUB W4, #0x0, [W15]
005322  3A002A     BRA NZ, 0x5378
3920:                  {
3921:                  if (!BreakPressed)
005324  809614     MOV 0x12C2, W4
005326  620261     AND W4, #0x1, W4
005328  520FE0     SUB W4, #0x0, [W15]
00532A  3A0022     BRA NZ, 0x5370
00536E  37000B     BRA 0x5386
005376  370007     BRA 0x5386
005380  000000     NOP
005382  370001     BRA 0x5386
005384  000000     NOP
3922:                  {
3923:                      if (Spd1FlPlus<SlowStrtSpd)
00532C  240D04     MOV #0x40D0, W4
00532E  784214     MOV.B [W4], W4
005330  FB8204     ZE W4, W4
005332  DEA2CF     ASR W4, #15, W5
005334  BE0004     MOV.D W4, W0
005336  02257C     CALL ___floatsisf
005338  000000     NOP
00533A  BE0300     MOV.D W0, W6
00533C  81C384     MOV Spd1FlPlus, W4
00533E  81C395     MOV 0x3872, W5
005340  B3C018     MOV.B #0x1, W8
005342  BE0104     MOV.D W4, W2
005344  BE0006     MOV.D W6, W0
005346  022500     CALL ___gtsf2
005348  000000     NOP
00534A  780200     MOV W0, W4
00534C  520FE0     SUB W4, #0x0, [W15]
00534E  3C0001     BRA GT, 0x5352
005350  EB4400     CLR.B W8
005352  544FE0     SUB.B W8, #0x0, [W15]
005354  320015     BRA Z, 0x5380
3924:                      {
3925:                      ThrottleTmpMustBe=ThrottleTmp;
005356  81FF34     MOV ThrottleTmp, W4
005358  89FF64     MOV W4, ThrottleTmpMustBe
3926:                      if (!SlStrt)
00535A  809695     MOV 0x12D2, W5
00535C  280004     MOV #0x8000, W4
00535E  628204     AND W5, W4, W4
005360  520FE0     SUB W4, #0x0, [W15]
005362  3A0010     BRA NZ, 0x5384
3927:                          {
3928:                          SlStrt=1;
005364  809694     MOV 0x12D2, W4
005366  A0F004     BSET W4, #15
005368  889694     MOV W4, 0x12D2
3929:                          ThrottleTmpChng=ThrottleTmp;
00536A  81FF34     MOV ThrottleTmp, W4
00536C  89FF54     MOV W4, ThrottleTmpChng
3930:                          }
3931:                      }
3932:                  }
3933:                  else
3934:                      SlStrt=0;
005370  809694     MOV 0x12D2, W4
005372  A1F004     BCLR W4, #15
005374  889694     MOV W4, 0x12D2
3935:                  }
3936:                  else
3937:                  SlStrt=0;
005378  809694     MOV 0x12D2, W4
00537A  A1F004     BCLR W4, #15
00537C  889694     MOV W4, 0x12D2
00537E  370003     BRA 0x5386
3938:                  
3939:                  if (SlStrt)
005386  809695     MOV 0x12D2, W5
005388  280004     MOV #0x8000, W4
00538A  628204     AND W5, W4, W4
00538C  520FE0     SUB W4, #0x0, [W15]
00538E  320078     BRA Z, 0x5480
3940:                  {
3941:                              if (ThrottleTmpChng>ThrottleTmp)
005390  81FF55     MOV ThrottleTmpChng, W5
005392  81FF34     MOV ThrottleTmp, W4
005394  528F84     SUB W5, W4, [W15]
005396  340018     BRA LE, 0x53C8
3942:                                  if (Spd1FlPlus>=SlowStrtSpd)
005398  240D04     MOV #0x40D0, W4
00539A  784214     MOV.B [W4], W4
00539C  FB8204     ZE W4, W4
00539E  DEA2CF     ASR W4, #15, W5
0053A0  BE0004     MOV.D W4, W0
0053A2  02257C     CALL ___floatsisf
0053A4  000000     NOP
0053A6  BE0300     MOV.D W0, W6
0053A8  81C384     MOV Spd1FlPlus, W4
0053AA  81C395     MOV 0x3872, W5
0053AC  B3C018     MOV.B #0x1, W8
0053AE  BE0104     MOV.D W4, W2
0053B0  BE0006     MOV.D W6, W0
0053B2  0224FC     CALL ___lesf2
0053B4  000000     NOP
0053B6  780200     MOV W0, W4
0053B8  520FE0     SUB W4, #0x0, [W15]
0053BA  340001     BRA LE, 0x53BE
0053BC  EB4400     CLR.B W8
0053BE  544FE0     SUB.B W8, #0x0, [W15]
0053C0  320003     BRA Z, 0x53C8
3943:                                  SlStrt=0;
0053C2  809694     MOV 0x12D2, W4
0053C4  A1F004     BCLR W4, #15
0053C6  889694     MOV W4, 0x12D2
3944:              
3945:                      if (ThrottleTmpChng<ThrottleTmpMustBe)
0053C8  81FF55     MOV ThrottleTmpChng, W5
0053CA  81FF64     MOV ThrottleTmpMustBe, W4
0053CC  528F84     SUB W5, W4, [W15]
0053CE  3D0022     BRA GE, 0x5414
3946:                      {
3947:                          ThrottleTmpChng=ThrottleTmpChng+ThrottleTmpChngMem;
0053D0  2329A4     MOV #0x329A, W4
0053D2  784214     MOV.B [W4], W4
0053D4  FB0284     SE W4, W5
0053D6  81FF54     MOV ThrottleTmpChng, W4
0053D8  428204     ADD W5, W4, W4
0053DA  89FF54     MOV W4, ThrottleTmpChng
3948:                          if (ThrottleTmpChng>=ThrottleTmpMustBe)
0053DC  81FF55     MOV ThrottleTmpChng, W5
0053DE  81FF64     MOV ThrottleTmpMustBe, W4
0053E0  528F84     SUB W5, W4, [W15]
0053E2  350018     BRA LT, 0x5414
3949:                                  if (Spd1FlPlus>=SlowStrtSpd)
0053E4  240D04     MOV #0x40D0, W4
0053E6  784214     MOV.B [W4], W4
0053E8  FB8204     ZE W4, W4
0053EA  DEA2CF     ASR W4, #15, W5
0053EC  BE0004     MOV.D W4, W0
0053EE  02257C     CALL ___floatsisf
0053F0  000000     NOP
0053F2  BE0300     MOV.D W0, W6
0053F4  81C384     MOV Spd1FlPlus, W4
0053F6  81C395     MOV 0x3872, W5
0053F8  B3C018     MOV.B #0x1, W8
0053FA  BE0104     MOV.D W4, W2
0053FC  BE0006     MOV.D W6, W0
0053FE  0224FC     CALL ___lesf2
005400  000000     NOP
005402  780200     MOV W0, W4
005404  520FE0     SUB W4, #0x0, [W15]
005406  340001     BRA LE, 0x540A
005408  EB4400     CLR.B W8
00540A  544FE0     SUB.B W8, #0x0, [W15]
00540C  320003     BRA Z, 0x5414
3950:                              SlStrt=0;
00540E  809694     MOV 0x12D2, W4
005410  A1F004     BCLR W4, #15
005412  889694     MOV W4, 0x12D2
3951:                      }
3952:                      if (ThrottleTmpChng>ThrottleTmpMustBe)
005414  81FF55     MOV ThrottleTmpChng, W5
005416  81FF64     MOV ThrottleTmpMustBe, W4
005418  528F84     SUB W5, W4, [W15]
00541A  34002B     BRA LE, 0x5472
3953:                      {
3954:                          if (ThrottleTmpChng>=ThrottleTmpChngMem)
00541C  2329A4     MOV #0x329A, W4
00541E  784214     MOV.B [W4], W4
005420  FB0284     SE W4, W5
005422  81FF54     MOV ThrottleTmpChng, W4
005424  528F84     SUB W5, W4, [W15]
005426  3C0007     BRA GT, 0x5436
3955:                          ThrottleTmpChng=ThrottleTmpChng-ThrottleTmpChngMem;
005428  81FF55     MOV ThrottleTmpChng, W5
00542A  2329A4     MOV #0x329A, W4
00542C  784214     MOV.B [W4], W4
00542E  FB0204     SE W4, W4
005430  528204     SUB W5, W4, W4
005432  89FF54     MOV W4, ThrottleTmpChng
005434  370002     BRA 0x543A
3956:                          else
3957:                              ThrottleTmpChng=0;
005436  EB0200     CLR W4
005438  89FF54     MOV W4, ThrottleTmpChng
3958:                          if (ThrottleTmpChng<=ThrottleTmpMustBe)
00543A  81FF55     MOV ThrottleTmpChng, W5
00543C  81FF64     MOV ThrottleTmpMustBe, W4
00543E  528F84     SUB W5, W4, [W15]
005440  3C0018     BRA GT, 0x5472
3959:                                  if (Spd1FlPlus>=SlowStrtSpd)
005442  240D04     MOV #0x40D0, W4
005444  784214     MOV.B [W4], W4
005446  FB8204     ZE W4, W4
005448  DEA2CF     ASR W4, #15, W5
00544A  BE0004     MOV.D W4, W0
00544C  02257C     CALL ___floatsisf
00544E  000000     NOP
005450  BE0300     MOV.D W0, W6
005452  81C384     MOV Spd1FlPlus, W4
005454  81C395     MOV 0x3872, W5
005456  B3C018     MOV.B #0x1, W8
005458  BE0104     MOV.D W4, W2
00545A  BE0006     MOV.D W6, W0
00545C  0224FC     CALL ___lesf2
00545E  000000     NOP
005460  780200     MOV W0, W4
005462  520FE0     SUB W4, #0x0, [W15]
005464  340001     BRA LE, 0x5468
005466  EB4400     CLR.B W8
005468  544FE0     SUB.B W8, #0x0, [W15]
00546A  320003     BRA Z, 0x5472
3960:                              SlStrt=0;
00546C  809694     MOV 0x12D2, W4
00546E  A1F004     BCLR W4, #15
005470  889694     MOV W4, 0x12D2
3961:                      }
3962:              
3963:                      ThrottleTmp=ThrottleTmpChng;
005472  81FF54     MOV ThrottleTmpChng, W4
005474  89FF34     MOV W4, ThrottleTmp
3964:                      if (ThrottleTmp<0)
005476  81FF34     MOV ThrottleTmp, W4
005478  520FE0     SUB W4, #0x0, [W15]
00547A  3D0002     BRA GE, 0x5480
3965:                          ThrottleTmp=0;
00547C  EB0200     CLR W4
00547E  89FF34     MOV W4, ThrottleTmp
3966:                  }
3967:                  
3968:                  
3969:                  
3970:                      if (PWM_Mode&&(!SlowStart))
005480  809765     MOV StatFlgs2, W5
005482  210004     MOV #0x1000, W4
005484  628204     AND W5, W4, W4
005486  520FE0     SUB W4, #0x0, [W15]
005488  32014E     BRA Z, 0x5726
00548A  809765     MOV StatFlgs2, W5
00548C  201004     MOV #0x100, W4
00548E  628204     AND W5, W4, W4
005490  520FE0     SUB W4, #0x0, [W15]
005492  3A0149     BRA NZ, 0x5726
3971:                      {
3972:              
3973:                          if (!BreakPressed)
005494  809614     MOV 0x12C2, W4
005496  620261     AND W4, #0x1, W4
005498  520FE0     SUB W4, #0x0, [W15]
00549A  3A012B     BRA NZ, 0x56F2
3974:                          {
3975:                              if ((BreakPressedPrev)&&(!BreakPressed)&&(!ThrottleTmp))
00549C  809665     MOV Flgs4, W5
00549E  202004     MOV #0x200, W4
0054A0  628204     AND W5, W4, W4
0054A2  520FE0     SUB W4, #0x0, [W15]
0054A4  320012     BRA Z, 0x54CA
0054A6  809614     MOV 0x12C2, W4
0054A8  620261     AND W4, #0x1, W4
0054AA  520FE0     SUB W4, #0x0, [W15]
0054AC  3A000E     BRA NZ, 0x54CA
0054AE  81FF34     MOV ThrottleTmp, W4
0054B0  520FE0     SUB W4, #0x0, [W15]
0054B2  3A000B     BRA NZ, 0x54CA
3976:                                  {
3977:                                  ESumm_PWM_Mode=0;
0054B4  B82260     MUL.UU W4, #0, W4
0054B6  889924     MOV W4, ESumm_PWM_Mode
0054B8  889935     MOV W5, 0x1326
3978:                                  PWM_Mode_Target=ThrottleTmp;
0054BA  81FF34     MOV ThrottleTmp, W4
0054BC  DEA2CF     ASR W4, #15, W5
0054BE  BE0004     MOV.D W4, W0
0054C0  02257C     CALL ___floatsisf
0054C2  000000     NOP
0054C4  BE0200     MOV.D W0, W4
0054C6  889904     MOV W4, PWM_Mode_Target
0054C8  889915     MOV W5, 0x1322
3979:                                  }
3980:              
3981:                              if (PWM_Mode_ZeroThrottle)
0054CA  809765     MOV StatFlgs2, W5
0054CC  220004     MOV #0x2000, W4
0054CE  628204     AND W5, W4, W4
0054D0  520FE0     SUB W4, #0x0, [W15]
0054D2  320067     BRA Z, 0x55A2
3982:                              {
3983:                                  if (!Joystick)
0054D4  809775     MOV StatFlgs3, W5
0054D6  200204     MOV #0x20, W4
0054D8  628204     AND W5, W4, W4
0054DA  520FE0     SUB W4, #0x0, [W15]
0054DC  3A003C     BRA NZ, 0x5556
3984:                                  {
3985:                                  if (ThrottleTmp<30)
0054DE  81FF34     MOV ThrottleTmp, W4
0054E0  520FFD     SUB W4, #0x1D, [W15]
0054E2  3C005F     BRA GT, 0x55A2
3986:                                  {
3987:                                     if ((!StrongMode)&&(!SIN_MIDDLE))
0054E4  8095F5     MOV 0x12BE, W5
0054E6  240004     MOV #0x4000, W4
0054E8  628204     AND W5, W4, W4
0054EA  520FE0     SUB W4, #0x0, [W15]
0054EC  3A0008     BRA NZ, 0x54FE
0054EE  809765     MOV StatFlgs2, W5
0054F0  240004     MOV #0x4000, W4
0054F2  628204     AND W5, W4, W4
0054F4  520FE0     SUB W4, #0x0, [W15]
0054F6  3A0003     BRA NZ, 0x54FE
3988:                                     ESumm_PWM_Mode=0; 
0054F8  B82260     MUL.UU W4, #0, W4
0054FA  889924     MOV W4, ESumm_PWM_Mode
0054FC  889935     MOV W5, 0x1326
3989:                                     if (StrongMode&&(Spd1ResPlus<StrongModeSpdFilterOff))
0054FE  8095F5     MOV 0x12BE, W5
005500  240004     MOV #0x4000, W4
005502  628204     AND W5, W4, W4
005504  520FE0     SUB W4, #0x0, [W15]
005506  320016     BRA Z, 0x5534
005508  817F44     MOV Spd1ResPlus, W4
00550A  DEA2CF     ASR W4, #15, W5
00550C  BE0004     MOV.D W4, W0
00550E  02257C     CALL ___floatsisf
005510  000000     NOP
005512  BE0300     MOV.D W0, W6
005514  8156D4     MOV StrongModeSpdFilterOff, W4
005516  8156E5     MOV 0x2ADC, W5
005518  B3C018     MOV.B #0x1, W8
00551A  BE0104     MOV.D W4, W2
00551C  BE0006     MOV.D W6, W0
00551E  0224FC     CALL ___lesf2
005520  000000     NOP
005522  780200     MOV W0, W4
005524  520FE0     SUB W4, #0x0, [W15]
005526  350001     BRA LT, 0x552A
005528  EB4400     CLR.B W8
00552A  544FE0     SUB.B W8, #0x0, [W15]
00552C  320003     BRA Z, 0x5534
3990:                                     ESumm_PWM_Mode=0; 
00552E  B82260     MUL.UU W4, #0, W4
005530  889924     MOV W4, ESumm_PWM_Mode
005532  889935     MOV W5, 0x1326
3991:                                     if (SIN_MIDDLE)
005534  809765     MOV StatFlgs2, W5
005536  240004     MOV #0x4000, W4
005538  628204     AND W5, W4, W4
00553A  520FE0     SUB W4, #0x0, [W15]
00553C  320003     BRA Z, 0x5544
3992:                                     ESumm_PWM_Mode=0; 
00553E  B82260     MUL.UU W4, #0, W4
005540  889924     MOV W4, ESumm_PWM_Mode
005542  889935     MOV W5, 0x1326
3993:                                     if (MixedMode2)
005544  809765     MOV StatFlgs2, W5
005546  208004     MOV #0x800, W4
005548  628204     AND W5, W4, W4
00554A  520FE0     SUB W4, #0x0, [W15]
00554C  32002A     BRA Z, 0x55A2
3994:                                     ESumm_PWM_Mode=0; 
00554E  B82260     MUL.UU W4, #0, W4
005550  889924     MOV W4, ESumm_PWM_Mode
005552  889935     MOV W5, 0x1326
005554  370026     BRA 0x55A2
3995:                                  }
3996:                                  }
3997:                                  else
3998:                                  {
3999:                                     if ((ThrottleTmp<30)&&(ThrottleTmp>-30))
005556  81FF34     MOV ThrottleTmp, W4
005558  520FFD     SUB W4, #0x1D, [W15]
00555A  3C0023     BRA GT, 0x55A2
00555C  81FF34     MOV ThrottleTmp, W4
00555E  420FFD     ADD W4, #0x1D, [W15]
005560  350020     BRA LT, 0x55A2
4000:                                      {
4001:                                         if ((!StrongMode)&&(!SIN_MIDDLE))
005562  8095F5     MOV 0x12BE, W5
005564  240004     MOV #0x4000, W4
005566  628204     AND W5, W4, W4
005568  520FE0     SUB W4, #0x0, [W15]
00556A  3A0008     BRA NZ, 0x557C
00556C  809765     MOV StatFlgs2, W5
00556E  240004     MOV #0x4000, W4
005570  628204     AND W5, W4, W4
005572  520FE0     SUB W4, #0x0, [W15]
005574  3A0003     BRA NZ, 0x557C
4002:                                         ESumm_PWM_Mode=0; 
005576  B82260     MUL.UU W4, #0, W4
005578  889924     MOV W4, ESumm_PWM_Mode
00557A  889935     MOV W5, 0x1326
4003:                                         if (StrongMode&&(Spd1ResPlus<2))
00557C  8095F5     MOV 0x12BE, W5
00557E  240004     MOV #0x4000, W4
005580  628204     AND W5, W4, W4
005582  520FE0     SUB W4, #0x0, [W15]
005584  320006     BRA Z, 0x5592
005586  817F44     MOV Spd1ResPlus, W4
005588  520FE1     SUB W4, #0x1, [W15]
00558A  3C0003     BRA GT, 0x5592
4004:                                         ESumm_PWM_Mode=0; 
00558C  B82260     MUL.UU W4, #0, W4
00558E  889924     MOV W4, ESumm_PWM_Mode
005590  889935     MOV W5, 0x1326
4005:                                         if (SIN_MIDDLE)
005592  809765     MOV StatFlgs2, W5
005594  240004     MOV #0x4000, W4
005596  628204     AND W5, W4, W4
005598  520FE0     SUB W4, #0x0, [W15]
00559A  320003     BRA Z, 0x55A2
4006:                                         ESumm_PWM_Mode=0; 
00559C  B82260     MUL.UU W4, #0, W4
00559E  889924     MOV W4, ESumm_PWM_Mode
0055A0  889935     MOV W5, 0x1326
4007:                                      }
4008:                                          
4009:                                  }
4010:              
4011:              
4012:              
4013:              
4014:                                  
4015:                                  
4016:                                  
4017:                              }
4018:                              
4019:              
4020:                              E_PWM_Mode=ThrottleTmp-PWM_Mode_Target;
0055A2  81FF34     MOV ThrottleTmp, W4
0055A4  DEA2CF     ASR W4, #15, W5
0055A6  BE0004     MOV.D W4, W0
0055A8  02257C     CALL ___floatsisf
0055AA  000000     NOP
0055AC  BE0300     MOV.D W0, W6
0055AE  809904     MOV PWM_Mode_Target, W4
0055B0  809915     MOV 0x1322, W5
0055B2  BE0104     MOV.D W4, W2
0055B4  BE0006     MOV.D W6, W0
0055B6  0222D0     CALL ___subsf3
0055B8  000000     NOP
0055BA  BE0200     MOV.D W0, W4
0055BC  8898E4     MOV W4, E_PWM_Mode
0055BE  8898F5     MOV W5, 0x131E
4021:              
4022:                              Ep_PWM_Mode=ThrottleTmp*Kp_PWM_Mode;
0055C0  81FF34     MOV ThrottleTmp, W4
0055C2  DEA2CF     ASR W4, #15, W5
0055C4  BE0004     MOV.D W4, W0
0055C6  02257C     CALL ___floatsisf
0055C8  000000     NOP
0055CA  BE0300     MOV.D W0, W6
0055CC  81B764     MOV Kp_PWM_Mode, W4
0055CE  81B775     MOV 0x36EE, W5
0055D0  BE0104     MOV.D W4, W2
0055D2  BE0006     MOV.D W6, W0
0055D4  022630     CALL ___mulsf3
0055D6  000000     NOP
0055D8  BE0200     MOV.D W0, W4
0055DA  889944     MOV W4, Ep_PWM_Mode
0055DC  889955     MOV W5, 0x132A
4023:                              
4024:                              if (E_PWM_Mode>0)
0055DE  8098E4     MOV E_PWM_Mode, W4
0055E0  8098F5     MOV 0x131E, W5
0055E2  B3C018     MOV.B #0x1, W8
0055E4  B81160     MUL.UU W2, #0, W2
0055E6  BE0004     MOV.D W4, W0
0055E8  022500     CALL ___gtsf2
0055EA  000000     NOP
0055EC  780200     MOV W0, W4
0055EE  520FE0     SUB W4, #0x0, [W15]
0055F0  3C0001     BRA GT, 0x55F4
0055F2  EB4400     CLR.B W8
0055F4  544FE0     SUB.B W8, #0x0, [W15]
0055F6  320014     BRA Z, 0x5620
4025:                                  ESumm_PWM_Mode=ESumm_PWM_Mode+E_PWM_Mode*Ki_PWM_Mode;
0055F8  8098E6     MOV E_PWM_Mode, W6
0055FA  8098F7     MOV 0x131E, W7
0055FC  8182A4     MOV Ki_PWM_Mode, W4
0055FE  8182B5     MOV 0x3056, W5
005600  BE0104     MOV.D W4, W2
005602  BE0006     MOV.D W6, W0
005604  022630     CALL ___mulsf3
005606  000000     NOP
005608  BE0200     MOV.D W0, W4
00560A  BE0304     MOV.D W4, W6
00560C  809924     MOV ESumm_PWM_Mode, W4
00560E  809935     MOV 0x1326, W5
005610  BE0104     MOV.D W4, W2
005612  BE0006     MOV.D W6, W0
005614  0222D2     CALL ___addsf3
005616  000000     NOP
005618  BE0200     MOV.D W0, W4
00561A  889924     MOV W4, ESumm_PWM_Mode
00561C  889935     MOV W5, 0x1326
00561E  370013     BRA 0x5646
4026:                              else
4027:                                  ESumm_PWM_Mode=ESumm_PWM_Mode+E_PWM_Mode*Ki_PWM_ModeOff;
005620  8098E6     MOV E_PWM_Mode, W6
005622  8098F7     MOV 0x131E, W7
005624  8182C4     MOV Ki_PWM_ModeOff, W4
005626  8182D5     MOV 0x305A, W5
005628  BE0104     MOV.D W4, W2
00562A  BE0006     MOV.D W6, W0
00562C  022630     CALL ___mulsf3
00562E  000000     NOP
005630  BE0200     MOV.D W0, W4
005632  BE0304     MOV.D W4, W6
005634  809924     MOV ESumm_PWM_Mode, W4
005636  809935     MOV 0x1326, W5
005638  BE0104     MOV.D W4, W2
00563A  BE0006     MOV.D W6, W0
00563C  0222D2     CALL ___addsf3
00563E  000000     NOP
005640  BE0200     MOV.D W0, W4
005642  889924     MOV W4, ESumm_PWM_Mode
005644  889935     MOV W5, 0x1326
4028:                              
4029:                              /*if (ESumm_PWM_Mode>(SensorThresholdUp-SensorThresholdDn))
4030:                                  ESumm_PWM_Mode=SensorThresholdUp-SensorThresholdDn;
4031:                              if (ESumm_PWM_Mode<0)
4032:                                  ESumm_PWM_Mode=0;
4033:                              */
4034:                              PWM_Mode_Target=ESumm_PWM_Mode+Ep_PWM_Mode;
005646  809926     MOV ESumm_PWM_Mode, W6
005648  809937     MOV 0x1326, W7
00564A  809944     MOV Ep_PWM_Mode, W4
00564C  809955     MOV 0x132A, W5
00564E  BE0104     MOV.D W4, W2
005650  BE0006     MOV.D W6, W0
005652  0222D2     CALL ___addsf3
005654  000000     NOP
005656  BE0200     MOV.D W0, W4
005658  889904     MOV W4, PWM_Mode_Target
00565A  889915     MOV W5, 0x1322
4035:                              
4036:                              
4037:                              if (PWM_Mode_Target>(SensorThresholdUp-SensorThresholdDn))
00565C  809485     MOV SensorThresholdUp, W5
00565E  809474     MOV SensorThresholdDn, W4
005660  528204     SUB W5, W4, W4
005662  DEA2CF     ASR W4, #15, W5
005664  BE0004     MOV.D W4, W0
005666  02257C     CALL ___floatsisf
005668  000000     NOP
00566A  BE0300     MOV.D W0, W6
00566C  809904     MOV PWM_Mode_Target, W4
00566E  809915     MOV 0x1322, W5
005670  B3C018     MOV.B #0x1, W8
005672  BE0104     MOV.D W4, W2
005674  BE0006     MOV.D W6, W0
005676  0224FC     CALL ___lesf2
005678  000000     NOP
00567A  780200     MOV W0, W4
00567C  520FE0     SUB W4, #0x0, [W15]
00567E  350001     BRA LT, 0x5682
005680  EB4400     CLR.B W8
005682  544FE0     SUB.B W8, #0x0, [W15]
005684  320015     BRA Z, 0x56B0
4038:                              {
4039:                                  PWM_Mode_Target=SensorThresholdUp-SensorThresholdDn;
005686  809485     MOV SensorThresholdUp, W5
005688  809474     MOV SensorThresholdDn, W4
00568A  528204     SUB W5, W4, W4
00568C  DEA2CF     ASR W4, #15, W5
00568E  BE0004     MOV.D W4, W0
005690  02257C     CALL ___floatsisf
005692  000000     NOP
005694  BE0200     MOV.D W0, W4
005696  889904     MOV W4, PWM_Mode_Target
005698  889915     MOV W5, 0x1322
4040:                                  ESumm_PWM_Mode=PWM_Mode_Target-Ep_PWM_Mode;
00569A  809906     MOV PWM_Mode_Target, W6
00569C  809917     MOV 0x1322, W7
00569E  809944     MOV Ep_PWM_Mode, W4
0056A0  809955     MOV 0x132A, W5
0056A2  BE0104     MOV.D W4, W2
0056A4  BE0006     MOV.D W6, W0
0056A6  0222D0     CALL ___subsf3
0056A8  000000     NOP
0056AA  BE0200     MOV.D W0, W4
0056AC  889924     MOV W4, ESumm_PWM_Mode
0056AE  889935     MOV W5, 0x1326
4041:                              }
4042:                              if (!Joystick)
0056B0  809775     MOV StatFlgs3, W5
0056B2  200204     MOV #0x20, W4
0056B4  628204     AND W5, W4, W4
0056B6  520FE0     SUB W4, #0x0, [W15]
0056B8  3A0013     BRA NZ, 0x56E0
4043:                              if (PWM_Mode_Target<0)
0056BA  809904     MOV PWM_Mode_Target, W4
0056BC  809915     MOV 0x1322, W5
0056BE  B3C018     MOV.B #0x1, W8
0056C0  B81160     MUL.UU W2, #0, W2
0056C2  BE0004     MOV.D W4, W0
0056C4  0224FC     CALL ___lesf2
0056C6  000000     NOP
0056C8  780200     MOV W0, W4
0056CA  520FE0     SUB W4, #0x0, [W15]
0056CC  350001     BRA LT, 0x56D0
0056CE  EB4400     CLR.B W8
0056D0  544FE0     SUB.B W8, #0x0, [W15]
0056D2  320006     BRA Z, 0x56E0
4044:                              {
4045:                                  PWM_Mode_Target=0;
0056D4  B82260     MUL.UU W4, #0, W4
0056D6  889904     MOV W4, PWM_Mode_Target
0056D8  889915     MOV W5, 0x1322
4046:                                  ESumm_PWM_Mode=0;
0056DA  B82260     MUL.UU W4, #0, W4
0056DC  889924     MOV W4, ESumm_PWM_Mode
0056DE  889935     MOV W5, 0x1326
4047:                              }
4048:                              
4049:                              
4050:                              ThrottleTmp=PWM_Mode_Target;
0056E0  809904     MOV PWM_Mode_Target, W4
0056E2  809915     MOV 0x1322, W5
0056E4  BE0004     MOV.D W4, W0
0056E6  022504     CALL ___fixsfsi
0056E8  000000     NOP
0056EA  BE0200     MOV.D W0, W4
0056EC  780204     MOV W4, W4
0056EE  89FF34     MOV W4, ThrottleTmp
0056F0  37001A     BRA 0x5726
4051:                          }
4052:                          else
4053:                          {
4054:                      if ((BreakPressedPrev)&&(!BreakPressed))
0056F2  809665     MOV Flgs4, W5
0056F4  202004     MOV #0x200, W4
0056F6  628204     AND W5, W4, W4
0056F8  520FE0     SUB W4, #0x0, [W15]
0056FA  320012     BRA Z, 0x5720
0056FC  809614     MOV 0x12C2, W4
0056FE  620261     AND W4, #0x1, W4
005700  520FE0     SUB W4, #0x0, [W15]
005702  3A000E     BRA NZ, 0x5720
4055:                      {
4056:                          if (!ThrottleTmp)
005704  81FF34     MOV ThrottleTmp, W4
005706  520FE0     SUB W4, #0x0, [W15]
005708  3A000B     BRA NZ, 0x5720
4057:                          {
4058:                              ESumm_PWM_Mode=0;
00570A  B82260     MUL.UU W4, #0, W4
00570C  889924     MOV W4, ESumm_PWM_Mode
00570E  889935     MOV W5, 0x1326
4059:                              PWM_Mode_Target=ThrottleTmp;
005710  81FF34     MOV ThrottleTmp, W4
005712  DEA2CF     ASR W4, #15, W5
005714  BE0004     MOV.D W4, W0
005716  02257C     CALL ___floatsisf
005718  000000     NOP
00571A  BE0200     MOV.D W0, W4
00571C  889904     MOV W4, PWM_Mode_Target
00571E  889915     MOV W5, 0x1322
4060:                          }
4061:                      }                
4062:                              
4063:                              Nop();
005720  000000     NOP
4064:                              Nop();
005722  000000     NOP
4065:                              Nop();
005724  000000     NOP
4066:                          }
4067:              
4068:              
4069:              
4070:                              
4071:                      }
4072:                  
4073:                  if (!PWM_Mode)
005726  809765     MOV StatFlgs2, W5
005728  210004     MOV #0x1000, W4
00572A  628204     AND W5, W4, W4
00572C  520FE0     SUB W4, #0x0, [W15]
00572E  3A000B     BRA NZ, 0x5746
4074:                  {
4075:                              ESumm_PWM_Mode=0;
005730  B82260     MUL.UU W4, #0, W4
005732  889924     MOV W4, ESumm_PWM_Mode
005734  889935     MOV W5, 0x1326
4076:                              PWM_Mode_Target=ThrottleTmp;
005736  81FF34     MOV ThrottleTmp, W4
005738  DEA2CF     ASR W4, #15, W5
00573A  BE0004     MOV.D W4, W0
00573C  02257C     CALL ___floatsisf
00573E  000000     NOP
005740  BE0200     MOV.D W0, W4
005742  889904     MOV W4, PWM_Mode_Target
005744  889915     MOV W5, 0x1322
4077:                      
4078:                  }
4079:                  
4080:                  
4081:                //  if (!SpeedControl)    
4082:                  //    Nop();
4083:                  
4084:                      if (SIN_MIDDLE)
005746  809765     MOV StatFlgs2, W5
005748  240004     MOV #0x4000, W4
00574A  628204     AND W5, W4, W4
00574C  520FE0     SUB W4, #0x0, [W15]
00574E  320006     BRA Z, 0x575C
4085:                  {
4086:                      MixedMode=0;
005750  809744     MOV StatFlgs, W4
005752  A1B004     BCLR W4, #11
005754  889744     MOV W4, StatFlgs
4087:                      MixedMode2=0;
005756  809764     MOV StatFlgs2, W4
005758  A1B004     BCLR W4, #11
00575A  889764     MOV W4, StatFlgs2
4088:                  }
4089:              
4090:                      if (MixedMode)
00575C  809745     MOV StatFlgs, W5
00575E  208004     MOV #0x800, W4
005760  628204     AND W5, W4, W4
005762  520FE0     SUB W4, #0x0, [W15]
005764  32004B     BRA Z, 0x57FC
4091:                      {
4092:                          CntMixedMode++;
005766  81FFB4     MOV CntMixedMode, W4
005768  E80204     INC W4, W4
00576A  89FFB4     MOV W4, CntMixedMode
4093:                          if (CntMixedMode>CntMixedModeMax)
00576C  81FFB5     MOV CntMixedMode, W5
00576E  81FFE4     MOV CntMixedModeMax, W4
005770  528F84     SUB W5, W4, [W15]
005772  340044     BRA LE, 0x57FC
4094:                          {
4095:                              CntMixedMode=0;
005774  EB0200     CLR W4
005776  89FFB4     MOV W4, CntMixedMode
4096:                              DiffMixed=ThrottleTmpMixed-ThrottleTmpPrev;
005778  81FF45     MOV ThrottleTmpMixed, W5
00577A  81FF94     MOV ThrottleTmpPrev, W4
00577C  528204     SUB W5, W4, W4
00577E  89FFA4     MOV W4, DiffMixed
4097:                              ThrottleTmpPrev=ThrottleTmpMixed;
005780  81FF44     MOV ThrottleTmpMixed, W4
005782  89FF94     MOV W4, ThrottleTmpPrev
4098:                                                  
4099:                              
4100:                              if (!((BtPID_Activated&&StrongModePID)||(SpeedControlPID&&StrongModePID)))
005784  809685     MOV Flgs5, W5
005786  210004     MOV #0x1000, W4
005788  628204     AND W5, W4, W4
00578A  520FE0     SUB W4, #0x0, [W15]
00578C  320005     BRA Z, 0x5798
00578E  809745     MOV StatFlgs, W5
005790  220004     MOV #0x2000, W4
005792  628204     AND W5, W4, W4
005794  520FE0     SUB W4, #0x0, [W15]
005796  3A0032     BRA NZ, 0x57FC
005798  8095F5     MOV 0x12BE, W5
00579A  210004     MOV #0x1000, W4
00579C  628204     AND W5, W4, W4
00579E  520FE0     SUB W4, #0x0, [W15]
0057A0  320005     BRA Z, 0x57AC
0057A2  809745     MOV StatFlgs, W5
0057A4  220004     MOV #0x2000, W4
0057A6  628204     AND W5, W4, W4
0057A8  520FE0     SUB W4, #0x0, [W15]
0057AA  3A0028     BRA NZ, 0x57FC
4101:                              {
4102:                                  
4103:                                  if (!MixedModeSlowSpeedOff)
0057AC  809765     MOV StatFlgs2, W5
0057AE  204004     MOV #0x400, W4
0057B0  628204     AND W5, W4, W4
0057B2  520FE0     SUB W4, #0x0, [W15]
0057B4  3A000C     BRA NZ, 0x57CE
4104:                                  {
4105:                                      if (DiffMixed<-MixedModeLevelOff)
0057B6  81FFD4     MOV MixedModeLevelOff, W4
0057B8  EA0284     NEG W4, W5
0057BA  81FFA4     MOV DiffMixed, W4
0057BC  528F84     SUB W5, W4, [W15]
0057BE  340017     BRA LE, 0x57EE
4106:                                      {
4107:                                      StrongMode=0;
0057C0  8095F4     MOV 0x12BE, W4
0057C2  A1E004     BCLR W4, #14
0057C4  8895F4     MOV W4, 0x12BE
4108:                                      StrongModeMixedMustOn=0;
0057C6  809694     MOV 0x12D2, W4
0057C8  A18004     BCLR W4, #8
0057CA  889694     MOV W4, 0x12D2
0057CC  370010     BRA 0x57EE
4109:                                      }
4110:                                  }
4111:                                  else
4112:                                  {
4113:                                      if ((Spd1ResPlus<MixedModeSlowSpeed)&&(ThrottleTmp<200))
0057CE  236EA4     MOV #0x36EA, W4
0057D0  784214     MOV.B [W4], W4
0057D2  FB8284     ZE W4, W5
0057D4  817F44     MOV Spd1ResPlus, W4
0057D6  528F84     SUB W5, W4, [W15]
0057D8  34000A     BRA LE, 0x57EE
0057DA  81FF35     MOV ThrottleTmp, W5
0057DC  200C74     MOV #0xC7, W4
0057DE  528F84     SUB W5, W4, [W15]
0057E0  3C0006     BRA GT, 0x57EE
4114:                                      {
4115:                                      StrongMode=0;
0057E2  8095F4     MOV 0x12BE, W4
0057E4  A1E004     BCLR W4, #14
0057E6  8895F4     MOV W4, 0x12BE
4116:                                      StrongModeMixedMustOn=0;
0057E8  809694     MOV 0x12D2, W4
0057EA  A18004     BCLR W4, #8
0057EC  889694     MOV W4, 0x12D2
4117:                                      }
4118:                                  }
4119:                                      
4120:                                      if (DiffMixed>MixedModeLevelOn)
0057EE  81FFA5     MOV DiffMixed, W5
0057F0  81FFC4     MOV MixedModeLevelOn, W4
0057F2  528F84     SUB W5, W4, [W15]
0057F4  340003     BRA LE, 0x57FC
4121:                                      {
4122:                                      StrongModeMixedMustOn=1;
0057F6  809694     MOV 0x12D2, W4
0057F8  A08004     BSET W4, #8
0057FA  889694     MOV W4, 0x12D2
4123:                                      }
4124:                              }
4125:                          }
4126:                      }
4127:                  
4128:                  /*if (Vector)
4129:                  {
4130:                      if (Curr1>62)
4131:                      {
4132:                      TrapezoidaRAM1_Temp=TrapezoidaRAM1;
4133:                      SetOverCurrTrapezoida=1;
4134:                      TrapezoidaRAM1=1;
4135:                      }
4136:                      if ((Curr1<33)&&(SetOverCurrTrapezoida))
4137:                      {
4138:                      SetOverCurrTrapezoida=0;
4139:                      TrapezoidaRAM1=TrapezoidaRAM1_Temp;
4140:                      }
4141:                      
4142:                  }
4143:                          */
4144:                      if (StrongModeMixedMustOn)
0057FC  809695     MOV 0x12D2, W5
0057FE  201004     MOV #0x100, W4
005800  628204     AND W5, W4, W4
005802  520FE0     SUB W4, #0x0, [W15]
005804  32000E     BRA Z, 0x5822
4145:                      {
4146:                          if ((Curr1>CurrMixed)&&(!BreakPressed))
005806  8094F5     MOV Curr1, W5
005808  81FFF4     MOV CurrMixed, W4
00580A  528F84     SUB W5, W4, [W15]
00580C  34000A     BRA LE, 0x5822
00580E  809614     MOV 0x12C2, W4
005810  620261     AND W4, #0x1, W4
005812  520FE0     SUB W4, #0x0, [W15]
005814  3A0006     BRA NZ, 0x5822
4147:                          {
4148:                              StrongModeMixedMustOn=0;
005816  809694     MOV 0x12D2, W4
005818  A18004     BCLR W4, #8
00581A  889694     MOV W4, 0x12D2
4149:                              StrongMode=1;
00581C  8095F4     MOV 0x12BE, W4
00581E  A0E004     BSET W4, #14
005820  8895F4     MOV W4, 0x12BE
4150:                          }
4151:                      }
4152:                  
4153:                  
4154:                  
4155:                      if (MixedMode)
005822  809745     MOV StatFlgs, W5
005824  208004     MOV #0x800, W4
005826  628204     AND W5, W4, W4
005828  520FE0     SUB W4, #0x0, [W15]
00582A  320007     BRA Z, 0x583A
4156:                      {
4157:                          if (BreakPressed)
00582C  809614     MOV 0x12C2, W4
00582E  620261     AND W4, #0x1, W4
005830  520FE0     SUB W4, #0x0, [W15]
005832  320003     BRA Z, 0x583A
4158:                              StrongMode=0;
005834  8095F4     MOV 0x12BE, W4
005836  A1E004     BCLR W4, #14
005838  8895F4     MOV W4, 0x12BE
4159:                      }        
4160:              
4161:                  
4162:                  
4163:                              if (StartingMove)
00583A  809605     MOV Flgs1, W5
00583C  200204     MOV #0x20, W4
00583E  628204     AND W5, W4, W4
005840  520FE0     SUB W4, #0x0, [W15]
005842  320016     BRA Z, 0x5870
4164:                                      {
4165:                                          StartingMove=0;
005844  809604     MOV Flgs1, W4
005846  A15004     BCLR W4, #5
005848  889604     MOV W4, Flgs1
4166:                                          if (Sensorless)
00584A  809755     MOV StatFlgs1, W5
00584C  200204     MOV #0x20, W4
00584E  628204     AND W5, W4, W4
005850  520FE0     SUB W4, #0x0, [W15]
005852  320004     BRA Z, 0x585C
4167:                                              SoundNum=9;
005854  2124B5     MOV #0x124B, W5
005856  B3C094     MOV.B #0x9, W4
005858  784A84     MOV.B W4, [W5]
00585A  370003     BRA 0x5862
4168:                                          else
4169:                                              SoundNum=11;
00585C  2124B5     MOV #0x124B, W5
00585E  B3C0B4     MOV.B #0xB, W4
005860  784A84     MOV.B W4, [W5]
4170:                                          if (ThrottleTmp>100)
005862  81FF35     MOV ThrottleTmp, W5
005864  200644     MOV #0x64, W4
005866  528F84     SUB W5, W4, [W15]
005868  340003     BRA LE, 0x5870
4171:                                              CriticalError=CRERR_THROTTLE_ON_HIGH;
00586A  214075     MOV #0x1407, W5
00586C  B3C014     MOV.B #0x1, W4
00586E  784A84     MOV.B W4, [W5]
4172:                                      }
4173:                      
4174:                  
4175:                              if (CriticalError==CRERR_THROTTLE_AFTER_TUNING)
005870  214074     MOV #0x1407, W4
005872  784214     MOV.B [W4], W4
005874  524FE9     SUB.B W4, #0x9, [W15]
005876  3A000E     BRA NZ, 0x5894
4176:                              {
4177:                                  if (ThrottleTmp<100)
005878  81FF35     MOV ThrottleTmp, W5
00587A  200634     MOV #0x63, W4
00587C  528F84     SUB W5, W4, [W15]
00587E  3C000A     BRA GT, 0x5894
4178:                                  {
4179:                                  CriticalError=0;
005880  214075     MOV #0x1407, W5
005882  EB4200     CLR.B W4
005884  784A84     MOV.B W4, [W5]
4180:                                  BuzzerMacroOff
005886  A98E54     BCLR LATF, #4
005888  809775     MOV StatFlgs3, W5
00588A  202004     MOV #0x200, W4
00588C  628204     AND W5, W4, W4
00588E  520FE0     SUB W4, #0x0, [W15]
005890  3A0001     BRA NZ, 0x5894
005892  A84E35     BSET 0xE35, #2
4181:                                  }
4182:                              }
4183:                  
4184:                  
4185:                      if ((PID_On)&&(BreakPressed))
005894  809655     MOV 0x12CA, W5
005896  202004     MOV #0x200, W4
005898  628204     AND W5, W4, W4
00589A  520FE0     SUB W4, #0x0, [W15]
00589C  32001E     BRA Z, 0x58DA
00589E  809614     MOV 0x12C2, W4
0058A0  620261     AND W4, #0x1, W4
0058A2  520FE0     SUB W4, #0x0, [W15]
0058A4  32001A     BRA Z, 0x58DA
4186:                      {
4187:                          if ((StrongMode)&&(BtPID_Activated)&&(StrongModePID)) //&&(!SpeedControl))
0058A6  8095F5     MOV 0x12BE, W5
0058A8  240004     MOV #0x4000, W4
0058AA  628204     AND W5, W4, W4
0058AC  520FE0     SUB W4, #0x0, [W15]
0058AE  32000D     BRA Z, 0x58CA
0058B0  809685     MOV Flgs5, W5
0058B2  210004     MOV #0x1000, W4
0058B4  628204     AND W5, W4, W4
0058B6  520FE0     SUB W4, #0x0, [W15]
0058B8  320008     BRA Z, 0x58CA
0058BA  809745     MOV StatFlgs, W5
0058BC  220004     MOV #0x2000, W4
0058BE  628204     AND W5, W4, W4
0058C0  520FE0     SUB W4, #0x0, [W15]
0058C2  320003     BRA Z, 0x58CA
4188:                          {
4189:                          PID_On=0;
0058C4  809654     MOV 0x12CA, W4
0058C6  A19004     BCLR W4, #9
0058C8  889654     MOV W4, 0x12CA
4190:                          }
4191:                          if (!StrongMode)
0058CA  8095F5     MOV 0x12BE, W5
0058CC  240004     MOV #0x4000, W4
0058CE  628204     AND W5, W4, W4
0058D0  520FE0     SUB W4, #0x0, [W15]
0058D2  3A0003     BRA NZ, 0x58DA
4192:                          {
4193:                          PID_On=0;
0058D4  809654     MOV 0x12CA, W4
0058D6  A19004     BCLR W4, #9
0058D8  889654     MOV W4, 0x12CA
4194:                          }
4195:                      }
4196:                  
4197:                  
4198:                  
4199:                  
4200:              
4201:                      if (SpeedControl&&SpeedControlPID&&BreakPressed)
0058DA  809754     MOV StatFlgs1, W4
0058DC  620262     AND W4, #0x2, W4
0058DE  520FE0     SUB W4, #0x0, [W15]
0058E0  32001F     BRA Z, 0x5920
0058E2  8095F5     MOV 0x12BE, W5
0058E4  210004     MOV #0x1000, W4
0058E6  628204     AND W5, W4, W4
0058E8  520FE0     SUB W4, #0x0, [W15]
0058EA  32001A     BRA Z, 0x5920
0058EC  809614     MOV 0x12C2, W4
0058EE  620261     AND W4, #0x1, W4
0058F0  520FE0     SUB W4, #0x0, [W15]
0058F2  320016     BRA Z, 0x5920
4202:                                  {
4203:                                  SoundNum=10;
0058F4  2124B5     MOV #0x124B, W5
0058F6  B3C0A4     MOV.B #0xA, W4
0058F8  784A84     MOV.B W4, [W5]
4204:                                  SpeedControlPID=0;
0058FA  8095F4     MOV 0x12BE, W4
0058FC  A1C004     BCLR W4, #12
0058FE  8895F4     MOV W4, 0x12BE
4205:                                  if (StrongModePID)
005900  809745     MOV StatFlgs, W5
005902  220004     MOV #0x2000, W4
005904  628204     AND W5, W4, W4
005906  520FE0     SUB W4, #0x0, [W15]
005908  32000B     BRA Z, 0x5920
4206:                                      StrongMode=PrevStrongMode;
00590A  809694     MOV 0x12D2, W4
00590C  DE224A     LSR W4, #10, W4
00590E  624261     AND.B W4, #0x1, W4
005910  FB8204     ZE W4, W4
005912  620261     AND W4, #0x1, W4
005914  DD224E     SL W4, #14, W4
005916  8095F6     MOV 0x12BE, W6
005918  2BFFF5     MOV #0xBFFF, W5
00591A  630285     AND W6, W5, W5
00591C  728204     IOR W5, W4, W4
00591E  8895F4     MOV W4, 0x12BE
4207:                                  }
4208:              
4209:                      if (SpeedControl&&(BreakPressed)&&(!StrongMode))
005920  809754     MOV StatFlgs1, W4
005922  620262     AND W4, #0x2, W4
005924  520FE0     SUB W4, #0x0, [W15]
005926  32000F     BRA Z, 0x5946
005928  809614     MOV 0x12C2, W4
00592A  620261     AND W4, #0x1, W4
00592C  520FE0     SUB W4, #0x0, [W15]
00592E  32000B     BRA Z, 0x5946
005930  8095F5     MOV 0x12BE, W5
005932  240004     MOV #0x4000, W4
005934  628204     AND W5, W4, W4
005936  520FE0     SUB W4, #0x0, [W15]
005938  3A0006     BRA NZ, 0x5946
4210:                      {
4211:                          ESumm=0;
00593A  B82260     MUL.UU W4, #0, W4
00593C  889B84     MOV W4, ESumm
00593E  889B95     MOV W5, 0x1372
4212:                          ECurr1Summ=0;
005940  B82260     MUL.UU W4, #0, W4
005942  89F564     MOV W4, ECurr1Summ
005944  89F575     MOV W5, 0x3EAE
4213:                      }
4214:                 
4215:                      if (StrongModeMotorOff)
005946  809775     MOV StatFlgs3, W5
005948  280004     MOV #0x8000, W4
00594A  628204     AND W5, W4, W4
00594C  520FE0     SUB W4, #0x0, [W15]
00594E  320017     BRA Z, 0x597E
4216:                      {
4217:                      if (StrongMode&&!MixedMode2)
005950  8095F5     MOV 0x12BE, W5
005952  240004     MOV #0x4000, W4
005954  628204     AND W5, W4, W4
005956  520FE0     SUB W4, #0x0, [W15]
005958  320012     BRA Z, 0x597E
00595A  809765     MOV StatFlgs2, W5
00595C  208004     MOV #0x800, W4
00595E  628204     AND W5, W4, W4
005960  520FE0     SUB W4, #0x0, [W15]
005962  3A000D     BRA NZ, 0x597E
4218:                      {
4219:              
4220:                          if (!SIN_MIDDLE)
005964  809765     MOV StatFlgs2, W5
005966  240004     MOV #0x4000, W4
005968  628204     AND W5, W4, W4
00596A  520FE0     SUB W4, #0x0, [W15]
00596C  3A0008     BRA NZ, 0x597E
4221:                          {
4222:                          if (!Monocycle)
00596E  809745     MOV StatFlgs, W5
005970  280004     MOV #0x8000, W4
005972  628204     AND W5, W4, W4
005974  520FE0     SUB W4, #0x0, [W15]
005976  3A0003     BRA NZ, 0x597E
4223:                          BreakPressed=0;
005978  809614     MOV 0x12C2, W4
00597A  A10004     BCLR W4, #0
00597C  889614     MOV W4, 0x12C2
4224:                          }
4225:              
4226:                      }
4227:                      }
4228:                  
4229:                  
4230:                      if (SmoothBreak)
00597E  809745     MOV StatFlgs, W5
005980  200204     MOV #0x20, W4
005982  628204     AND W5, W4, W4
005984  520FE0     SUB W4, #0x0, [W15]
005986  32005E     BRA Z, 0x5A44
4231:                      {
4232:                      if ((!BreakPressedPrev)&&(BreakPressed))
005988  809665     MOV Flgs4, W5
00598A  202004     MOV #0x200, W4
00598C  628204     AND W5, W4, W4
00598E  520FE0     SUB W4, #0x0, [W15]
005990  3A001B     BRA NZ, 0x59C8
005992  809614     MOV 0x12C2, W4
005994  620261     AND W4, #0x1, W4
005996  520FE0     SUB W4, #0x0, [W15]
005998  320017     BRA Z, 0x59C8
4233:                      {
4234:                          if (ThrottleTmp)
00599A  81FF34     MOV ThrottleTmp, W4
00599C  520FE0     SUB W4, #0x0, [W15]
00599E  320014     BRA Z, 0x59C8
4235:                          {
4236:                      if ((UBTNoRegen>UBatHi)&&(!Sounds))
0059A0  817E75     MOV UBTNoRegen, W5
0059A2  818364     MOV UBatHi, W4
0059A4  528F84     SUB W5, W4, [W15]
0059A6  360007     BRA LEU, 0x59B6
0059A8  2124A4     MOV #0x124A, W4
0059AA  784214     MOV.B [W4], W4
0059AC  524FE0     SUB.B W4, #0x0, [W15]
0059AE  3A0003     BRA NZ, 0x59B6
4237:                          SoundNum=18;
0059B0  2124B5     MOV #0x124B, W5
0059B2  B3C124     MOV.B #0x12, W4
0059B4  784A84     MOV.B W4, [W5]
4238:                              BreakPressed=0;
0059B6  809614     MOV 0x12C2, W4
0059B8  A10004     BCLR W4, #0
0059BA  889614     MOV W4, 0x12C2
4239:                              BreakCntOn=3;
0059BC  243045     MOV #0x4304, W5
0059BE  B3C034     MOV.B #0x3, W4
0059C0  784A84     MOV.B W4, [W5]
4240:                              DisconnectMotor=1;
0059C2  809684     MOV Flgs5, W4
0059C4  A0F004     BSET W4, #15
0059C6  889684     MOV W4, Flgs5
4241:                          }
4242:                      }
4243:                  
4244:                      if ((BreakPressedPrev)&&(!BreakPressed))
0059C8  809665     MOV Flgs4, W5
0059CA  202004     MOV #0x200, W4
0059CC  628204     AND W5, W4, W4
0059CE  520FE0     SUB W4, #0x0, [W15]
0059D0  320010     BRA Z, 0x59F2
0059D2  809614     MOV 0x12C2, W4
0059D4  620261     AND W4, #0x1, W4
0059D6  520FE0     SUB W4, #0x0, [W15]
0059D8  3A000C     BRA NZ, 0x59F2
4245:                      {
4246:                          if (ThrottleTmp)
0059DA  81FF34     MOV ThrottleTmp, W4
0059DC  520FE0     SUB W4, #0x0, [W15]
0059DE  320009     BRA Z, 0x59F2
4247:                          {
4248:                              DisconnectMotor=0;
0059E0  809684     MOV Flgs5, W4
0059E2  A1F004     BCLR W4, #15
0059E4  889684     MOV W4, Flgs5
4249:                              BreakPressed=1;
0059E6  809614     MOV 0x12C2, W4
0059E8  A00004     BSET W4, #0
0059EA  889614     MOV W4, 0x12C2
4250:                              BreakCntOff=3;
0059EC  243055     MOV #0x4305, W5
0059EE  B3C034     MOV.B #0x3, W4
0059F0  784A84     MOV.B W4, [W5]
4251:                          }
4252:                      }
4253:                /*          if ((BreakPressedUp)&&(!ThrottleTmp))
4254:                      {
4255:                      BreakPressedUp=0;
4256:                      DisconnectMotor=0;
4257:                      }
4258:              */
4259:                       if (BreakPressedUp)
0059F2  809694     MOV 0x12D2, W4
0059F4  620261     AND W4, #0x1, W4
0059F6  520FE0     SUB W4, #0x0, [W15]
0059F8  320006     BRA Z, 0x5A06
4260:                      {
4261:                      BreakPressedUp=0;
0059FA  809694     MOV 0x12D2, W4
0059FC  A10004     BCLR W4, #0
0059FE  889694     MOV W4, 0x12D2
4262:                      DisconnectMotor=0;
005A00  809684     MOV Flgs5, W4
005A02  A1F004     BCLR W4, #15
005A04  889684     MOV W4, Flgs5
4263:                      }
4264:                      
4265:                      if (StrongModeMotorOff)
005A06  809775     MOV StatFlgs3, W5
005A08  280004     MOV #0x8000, W4
005A0A  628204     AND W5, W4, W4
005A0C  520FE0     SUB W4, #0x0, [W15]
005A0E  32001A     BRA Z, 0x5A44
4266:                      {
4267:                      if (StrongMode&&!MixedMode2)
005A10  8095F5     MOV 0x12BE, W5
005A12  240004     MOV #0x4000, W4
005A14  628204     AND W5, W4, W4
005A16  520FE0     SUB W4, #0x0, [W15]
005A18  320015     BRA Z, 0x5A44
005A1A  809765     MOV StatFlgs2, W5
005A1C  208004     MOV #0x800, W4
005A1E  628204     AND W5, W4, W4
005A20  520FE0     SUB W4, #0x0, [W15]
005A22  3A0010     BRA NZ, 0x5A44
4268:                      {
4269:              
4270:                          if (!SIN_MIDDLE)
005A24  809765     MOV StatFlgs2, W5
005A26  240004     MOV #0x4000, W4
005A28  628204     AND W5, W4, W4
005A2A  520FE0     SUB W4, #0x0, [W15]
005A2C  3A000B     BRA NZ, 0x5A44
4271:                          {
4272:                              if (!Monocycle)
005A2E  809745     MOV StatFlgs, W5
005A30  280004     MOV #0x8000, W4
005A32  628204     AND W5, W4, W4
005A34  520FE0     SUB W4, #0x0, [W15]
005A36  3A0003     BRA NZ, 0x5A3E
4273:                          BreakPressed=0;
005A38  809614     MOV 0x12C2, W4
005A3A  A10004     BCLR W4, #0
005A3C  889614     MOV W4, 0x12C2
4274:                           DisconnectMotor=0;
005A3E  809684     MOV Flgs5, W4
005A40  A1F004     BCLR W4, #15
005A42  889684     MOV W4, Flgs5
4275:                          }
4276:                      }
4277:                      }
4278:                      
4279:                      }
4280:                  
4281:                  
4282:                  if ((UBT>RegenOff)&&BreakPressed&&!AnalogBreak)
005A44  817E65     MOV UBT, W5
005A46  8180F4     MOV RegenOff, W4
005A48  528F84     SUB W5, W4, [W15]
005A4A  36001A     BRA LEU, 0x5A80
005A4C  809614     MOV 0x12C2, W4
005A4E  620261     AND W4, #0x1, W4
005A50  520FE0     SUB W4, #0x0, [W15]
005A52  320016     BRA Z, 0x5A80
005A54  809745     MOV StatFlgs, W5
005A56  210004     MOV #0x1000, W4
005A58  628204     AND W5, W4, W4
005A5A  520FE0     SUB W4, #0x0, [W15]
005A5C  3A0011     BRA NZ, 0x5A80
4283:                  {
4284:                          ThrottleTmp=0;
005A5E  EB0200     CLR W4
005A60  89FF34     MOV W4, ThrottleTmp
4285:                          BreakPressed=0;
005A62  809614     MOV 0x12C2, W4
005A64  A10004     BCLR W4, #0
005A66  889614     MOV W4, 0x12C2
4286:                          //DisconnectMotor=0;
4287:                          if ((!Sounds)&&(!AlarmOn))
005A68  2124A4     MOV #0x124A, W4
005A6A  784214     MOV.B [W4], W4
005A6C  524FE0     SUB.B W4, #0x0, [W15]
005A6E  3A0008     BRA NZ, 0x5A80
005A70  809635     MOV 0x12C6, W5
005A72  240004     MOV #0x4000, W4
005A74  628204     AND W5, W4, W4
005A76  520FE0     SUB W4, #0x0, [W15]
005A78  3A0003     BRA NZ, 0x5A80
4288:                          SoundNum=18;
005A7A  2124B5     MOV #0x124B, W5
005A7C  B3C124     MOV.B #0x12, W4
005A7E  784A84     MOV.B W4, [W5]
4289:                      
4290:                  }
4291:                  
4292:                      if ((UBTNoRegen>UBatHi)&&BreakPressed)
005A80  817E75     MOV UBTNoRegen, W5
005A82  818364     MOV UBatHi, W4
005A84  528F84     SUB W5, W4, [W15]
005A86  360012     BRA LEU, 0x5AAC
005A88  809614     MOV 0x12C2, W4
005A8A  620261     AND W4, #0x1, W4
005A8C  520FE0     SUB W4, #0x0, [W15]
005A8E  32000E     BRA Z, 0x5AAC
4293:                      {
4294:                          ThrottleTmp=0;
005A90  EB0200     CLR W4
005A92  89FF34     MOV W4, ThrottleTmp
4295:                          //BreakPressed=0;
4296:                          //DisconnectMotor=0;
4297:                          if ((!Sounds)&&(!AlarmOn))
005A94  2124A4     MOV #0x124A, W4
005A96  784214     MOV.B [W4], W4
005A98  524FE0     SUB.B W4, #0x0, [W15]
005A9A  3A0008     BRA NZ, 0x5AAC
005A9C  809635     MOV 0x12C6, W5
005A9E  240004     MOV #0x4000, W4
005AA0  628204     AND W5, W4, W4
005AA2  520FE0     SUB W4, #0x0, [W15]
005AA4  3A0003     BRA NZ, 0x5AAC
4298:                          SoundNum=18;
005AA6  2124B5     MOV #0x124B, W5
005AA8  B3C124     MOV.B #0x12, W4
005AAA  784A84     MOV.B W4, [W5]
4299:                      }
4300:                          
4301:                  if (Vector)
005AAC  809684     MOV Flgs5, W4
005AAE  620270     AND W4, #0x10, W4
005AB0  520FE0     SUB W4, #0x0, [W15]
005AB2  320001     BRA Z, 0x5AB6
4302:                  IEC3bits.T8IE = 1;
005AB4  A86826     BSET IEC3, #3
4303:              
4304:                      if (BreakPressed)
005AB6  809614     MOV 0x12C2, W4
005AB8  620261     AND W4, #0x1, W4
005ABA  520FE0     SUB W4, #0x0, [W15]
005ABC  320003     BRA Z, 0x5AC4
4305:                              DisconnectMotor=0;
005ABE  809684     MOV Flgs5, W4
005AC0  A1F004     BCLR W4, #15
005AC2  889684     MOV W4, Flgs5
4306:                      
4307:                          
4308:                      
4309:                      
4310:                      
4311:                  if ((Wheeling)&&(BreakPressed))
005AC4  809665     MOV Flgs4, W5
005AC6  208004     MOV #0x800, W4
005AC8  628204     AND W5, W4, W4
005ACA  520FE0     SUB W4, #0x0, [W15]
005ACC  32000D     BRA Z, 0x5AE8
005ACE  809614     MOV 0x12C2, W4
005AD0  620261     AND W4, #0x1, W4
005AD2  520FE0     SUB W4, #0x0, [W15]
005AD4  320009     BRA Z, 0x5AE8
4312:                  {
4313:                  Wheeling=0;
005AD6  809664     MOV Flgs4, W4
005AD8  A1B004     BCLR W4, #11
005ADA  889664     MOV W4, Flgs4
4314:                  StrongMode=0;
005ADC  8095F4     MOV 0x12BE, W4
005ADE  A1E004     BCLR W4, #14
005AE0  8895F4     MOV W4, 0x12BE
4315:                  SoundNum=10;
005AE2  2124B5     MOV #0x124B, W5
005AE4  B3C0A4     MOV.B #0xA, W4
005AE6  784A84     MOV.B W4, [W5]
4316:                  }
4317:              
4318:                  
4319:                  
4320:                  if (!Break1||BreakPressed)
005AE8  807195     MOV PORTD, W5
005AEA  210004     MOV #0x1000, W4
005AEC  628204     AND W5, W4, W4
005AEE  520FE0     SUB W4, #0x0, [W15]
005AF0  320004     BRA Z, 0x5AFA
005AF2  809614     MOV 0x12C2, W4
005AF4  620261     AND W4, #0x1, W4
005AF6  520FE0     SUB W4, #0x0, [W15]
005AF8  320004     BRA Z, 0x5B02
4321:                      StpLightsNew=1;
005AFA  8096D4     MOV 0x12DA, W4
005AFC  A07004     BSET W4, #7
005AFE  8896D4     MOV W4, 0x12DA
005B00  370003     BRA 0x5B08
4322:                  else
4323:                      StpLightsNew=0;
005B02  8096D4     MOV 0x12DA, W4
005B04  A17004     BCLR W4, #7
005B06  8896D4     MOV W4, 0x12DA
4324:                  
4325:                  if (BreakPressed)
005B08  809614     MOV 0x12C2, W4
005B0A  620261     AND W4, #0x1, W4
005B0C  520FE0     SUB W4, #0x0, [W15]
005B0E  32000D     BRA Z, 0x5B2A
4326:                  {
4327:                      if (StpLights)
005B10  809775     MOV StatFlgs3, W5
005B12  220004     MOV #0x2000, W4
005B14  628204     AND W5, W4, W4
005B16  520FE0     SUB W4, #0x0, [W15]
005B18  320004     BRA Z, 0x5B22
4328:                          StopLights=1;
005B1A  809694     MOV 0x12D2, W4
005B1C  A0E004     BSET W4, #14
005B1E  889694     MOV W4, 0x12D2
005B20  370007     BRA 0x5B30
4329:                      else
4330:                          StopLights=0;
005B22  809694     MOV 0x12D2, W4
005B24  A1E004     BCLR W4, #14
005B26  889694     MOV W4, 0x12D2
005B28  370003     BRA 0x5B30
4331:                  }
4332:                  else
4333:                      StopLights=0;
005B2A  809694     MOV 0x12D2, W4
005B2C  A1E004     BCLR W4, #14
005B2E  889694     MOV W4, 0x12D2
4334:                      
4335:              
4336:              //        if (!Wheeling)
4337:                  if (!((!NoBalance)&&(Wheeling)))
005B30  8095E5     MOV Flgs, W5
005B32  208004     MOV #0x800, W4
005B34  628204     AND W5, W4, W4
005B36  520FE0     SUB W4, #0x0, [W15]
005B38  3A0005     BRA NZ, 0x5B44
005B3A  809665     MOV Flgs4, W5
005B3C  208004     MOV #0x800, W4
005B3E  628204     AND W5, W4, W4
005B40  520FE0     SUB W4, #0x0, [W15]
005B42  3A0558     BRA NZ, 0x65F4
4338:                      {
4339:              
4340:              
4341:              
4342:              
4343:              
4344:                          if (AlarmOn)
005B44  809635     MOV 0x12C6, W5
005B46  240004     MOV #0x4000, W4
005B48  628204     AND W5, W4, W4
005B4A  520FE0     SUB W4, #0x0, [W15]
005B4C  320003     BRA Z, 0x5B54
4345:                          {
4346:                              BreakPressed=1;
005B4E  809614     MOV 0x12C2, W4
005B50  A00004     BSET W4, #0
005B52  889614     MOV W4, 0x12C2
4347:                          }
4348:                  if (AlmOffing)
005B54  809665     MOV Flgs4, W5
005B56  280004     MOV #0x8000, W4
005B58  628204     AND W5, W4, W4
005B5A  520FE0     SUB W4, #0x0, [W15]
005B5C  320006     BRA Z, 0x5B6A
4349:                  {
4350:                      AlmOffing=0;
005B5E  809664     MOV Flgs4, W4
005B60  A1F004     BCLR W4, #15
005B62  889664     MOV W4, Flgs4
4351:                      BreakPressedPrev=1;
005B64  809664     MOV Flgs4, W4
005B66  A09004     BSET W4, #9
005B68  889664     MOV W4, Flgs4
4352:                  }
4353:              
4354:                  
4355:                  if (BreakPressedPrev!=BreakPressed)
005B6A  809664     MOV Flgs4, W4
005B6C  DE2249     LSR W4, #9, W4
005B6E  6242E1     AND.B W4, #0x1, W5
005B70  809614     MOV 0x12C2, W4
005B72  624261     AND.B W4, #0x1, W4
005B74  52CF84     SUB.B W5, W4, [W15]
005B76  32005A     BRA Z, 0x5C2C
4356:                  {
4357:                      if (BreakPressed)
005B78  809614     MOV 0x12C2, W4
005B7A  620261     AND W4, #0x1, W4
005B7C  520FE0     SUB W4, #0x0, [W15]
005B7E  320012     BRA Z, 0x5BA4
4358:                      {
4359:                              Forward1=0;
005B80  8095E4     MOV Flgs, W4
005B82  A16004     BCLR W4, #6
005B84  8895E4     MOV W4, Flgs
4360:                              IEC1bits.CNIE = 0;
005B86  A96822     BCLR IEC1, #3
4361:                              PrevForward1=0;
005B88  8095E4     MOV Flgs, W4
005B8A  A19004     BCLR W4, #9
005B8C  8895E4     MOV W4, Flgs
4362:                              Sensor1=ReadSensor1_B();
005B8E  071981     RCALL ReadSensor1_B
005B90  784200     MOV.B W0, W4
005B92  212465     MOV #0x1246, W5
005B94  784A84     MOV.B W4, [W5]
4363:                              Sensor1_Prev=Sensor1;
005B96  212464     MOV #0x1246, W4
005B98  784214     MOV.B [W4], W4
005B9A  212475     MOV #0x1247, W5
005B9C  784A84     MOV.B W4, [W5]
4364:                              Phases1();
005B9E  07189B     RCALL Phases1
4365:                              IEC1bits.CNIE = 1;
005BA0  A86822     BSET IEC1, #3
005BA2  370044     BRA 0x5C2C
4366:              
4367:              
4368:                      }
4369:                      else
4370:                      {
4371:                          if (!Vector)
005BA4  809684     MOV Flgs5, W4
005BA6  620270     AND W4, #0x10, W4
005BA8  520FE0     SUB W4, #0x0, [W15]
005BAA  3A0012     BRA NZ, 0x5BD0
4372:                          {
4373:                              Forward1=1;
005BAC  8095E4     MOV Flgs, W4
005BAE  A06004     BSET W4, #6
005BB0  8895E4     MOV W4, Flgs
4374:                              IEC1bits.CNIE = 0;
005BB2  A96822     BCLR IEC1, #3
4375:                              PrevForward1=1;
005BB4  8095E4     MOV Flgs, W4
005BB6  A09004     BSET W4, #9
005BB8  8895E4     MOV W4, Flgs
4376:                              Sensor1=ReadSensor1_F();
005BBA  0719A7     RCALL ReadSensor1_F
005BBC  784200     MOV.B W0, W4
005BBE  212465     MOV #0x1246, W5
005BC0  784A84     MOV.B W4, [W5]
4377:                              Sensor1_Prev=Sensor1;
005BC2  212464     MOV #0x1246, W4
005BC4  784214     MOV.B [W4], W4
005BC6  212475     MOV #0x1247, W5
005BC8  784A84     MOV.B W4, [W5]
4378:                              Phases1();
005BCA  071885     RCALL Phases1
4379:                              IEC1bits.CNIE = 1;
005BCC  A86822     BSET IEC1, #3
005BCE  37002B     BRA 0x5C26
4380:                          }
4381:                          else
4382:                                      {
4383:                            IEC3bits.T8IE = 0;
005BD0  A96826     BCLR IEC3, #3
4384:                          if (!DirPWM1)
005BD2  809754     MOV StatFlgs1, W4
005BD4  620261     AND W4, #0x1, W4
005BD6  520FE0     SUB W4, #0x0, [W15]
005BD8  3A0011     BRA NZ, 0x5BFC
4385:                          {
4386:                      if (Forward1)
005BDA  8095E5     MOV Flgs, W5
005BDC  200404     MOV #0x40, W4
005BDE  628204     AND W5, W4, W4
005BE0  520FE0     SUB W4, #0x0, [W15]
005BE2  320006     BRA Z, 0x5BF0
4387:                      Sensor1=ReadSensor1_F_V();
005BE4  027028     CALL ReadSensor1_F_V
005BE6  000001     NOP
005BE8  784200     MOV.B W0, W4
005BEA  212465     MOV #0x1246, W5
005BEC  784A84     MOV.B W4, [W5]
005BEE  370016     BRA 0x5C1C
4388:                      else
4389:                      Sensor1=ReadSensor1_B_V();
005BF0  026FDA     CALL ReadSensor1_B_V
005BF2  000001     NOP
005BF4  784200     MOV.B W0, W4
005BF6  212465     MOV #0x1246, W5
005BF8  784A84     MOV.B W4, [W5]
005BFA  370010     BRA 0x5C1C
4390:                          }
4391:                          else
4392:                          {
4393:                      if (Forward1)
005BFC  8095E5     MOV Flgs, W5
005BFE  200404     MOV #0x40, W4
005C00  628204     AND W5, W4, W4
005C02  520FE0     SUB W4, #0x0, [W15]
005C04  320006     BRA Z, 0x5C12
4394:                      Sensor1=ReadSensor1_B_V();
005C06  026FDA     CALL ReadSensor1_B_V
005C08  000001     NOP
005C0A  784200     MOV.B W0, W4
005C0C  212465     MOV #0x1246, W5
005C0E  784A84     MOV.B W4, [W5]
005C10  370005     BRA 0x5C1C
4395:                      else
4396:                      Sensor1=ReadSensor1_F_V();
005C12  027028     CALL ReadSensor1_F_V
005C14  000001     NOP
005C16  784200     MOV.B W0, W4
005C18  212465     MOV #0x1246, W5
005C1A  784A84     MOV.B W4, [W5]
4397:                          }
4398:              
4399:                         
4400:                            Sensor1_Prev=Sensor1;
005C1C  212464     MOV #0x1246, W4
005C1E  784214     MOV.B [W4], W4
005C20  212475     MOV #0x1247, W5
005C22  784A84     MOV.B W4, [W5]
4401:                      IEC3bits.T8IE = 1;
005C24  A86826     BSET IEC3, #3
4402:                      }
4403:                          OffingBreak=1;
005C26  809604     MOV Flgs1, W4
005C28  A02004     BSET W4, #2
005C2A  889604     MOV W4, Flgs1
4404:              
4405:              
4406:                      }
4407:                  }
4408:              
4409:              
4410:              
4411:              
4412:              
4413:                          if (!Joystick)
005C2C  809775     MOV StatFlgs3, W5
005C2E  200204     MOV #0x20, W4
005C30  628204     AND W5, W4, W4
005C32  520FE0     SUB W4, #0x0, [W15]
005C34  3A000B     BRA NZ, 0x5C4C
4414:                      Throttle=SensorThresholdUp-SensorThresholdDn;
005C36  809485     MOV SensorThresholdUp, W5
005C38  809474     MOV SensorThresholdDn, W4
005C3A  528204     SUB W5, W4, W4
005C3C  DEA2CF     ASR W4, #15, W5
005C3E  BE0004     MOV.D W4, W0
005C40  02257C     CALL ___floatsisf
005C42  000000     NOP
005C44  BE0200     MOV.D W0, W4
005C46  889824     MOV W4, Throttle
005C48  889835     MOV W5, 0x1306
005C4A  37001C     BRA 0x5C84
4415:                          else
4416:                          {
4417:                              if (ThrottleTmp>0)
005C4C  81FF34     MOV ThrottleTmp, W4
005C4E  520FE0     SUB W4, #0x0, [W15]
005C50  34000D     BRA LE, 0x5C6C
4418:                                  Throttle=SensorThresholdUp-JoystickCalibrX-JoistickDeadZone;
005C52  809485     MOV SensorThresholdUp, W5
005C54  809454     MOV JoystickCalibrX, W4
005C56  528284     SUB W5, W4, W5
005C58  818284     MOV JoistickDeadZone, W4
005C5A  528204     SUB W5, W4, W4
005C5C  DEA2CF     ASR W4, #15, W5
005C5E  BE0004     MOV.D W4, W0
005C60  02257C     CALL ___floatsisf
005C62  000000     NOP
005C64  BE0200     MOV.D W0, W4
005C66  889824     MOV W4, Throttle
005C68  889835     MOV W5, 0x1306
005C6A  37000C     BRA 0x5C84
4419:                              else
4420:                                  Throttle=JoystickCalibrX-SensorThresholdDn-JoistickDeadZone;
005C6C  809455     MOV JoystickCalibrX, W5
005C6E  809474     MOV SensorThresholdDn, W4
005C70  528284     SUB W5, W4, W5
005C72  818284     MOV JoistickDeadZone, W4
005C74  528204     SUB W5, W4, W4
005C76  DEA2CF     ASR W4, #15, W5
005C78  BE0004     MOV.D W4, W0
005C7A  02257C     CALL ___floatsisf
005C7C  000000     NOP
005C7E  BE0200     MOV.D W0, W4
005C80  889824     MOV W4, Throttle
005C82  889835     MOV W5, 0x1306
4421:                          }
4422:                      
4423:                      
4424:              
4425:              
4426:              
4427:              
4428:              
4429:              
4430:              
4431:              
4432:              
4433:                          if (AlarmOn)
005C84  809635     MOV 0x12C6, W5
005C86  240004     MOV #0x4000, W4
005C88  628204     AND W5, W4, W4
005C8A  520FE0     SUB W4, #0x0, [W15]
005C8C  320002     BRA Z, 0x5C92
4434:                          {
4435:                              ThrottleTmp=SensorThresholdUp;
005C8E  809484     MOV SensorThresholdUp, W4
005C90  89FF34     MOV W4, ThrottleTmp
4436:                          }
4437:              
4438:                      if (!BreakPressed)
005C92  809614     MOV 0x12C2, W4
005C94  620261     AND W4, #0x1, W4
005C96  520FE0     SUB W4, #0x0, [W15]
005C98  3A0105     BRA NZ, 0x5EA4
4439:                      {
4440:                          if (HvOptions)
005C9A  809665     MOV Flgs4, W5
005C9C  201004     MOV #0x100, W4
005C9E  628204     AND W5, W4, W4
005CA0  520FE0     SUB W4, #0x0, [W15]
005CA2  320010     BRA Z, 0x5CC4
4441:                      KThrottle=MAX_PWM/Throttle;
005CA4  8212F4     MOV MAX_PWM, W4
005CA6  DEA2CF     ASR W4, #15, W5
005CA8  BE0004     MOV.D W4, W0
005CAA  02257C     CALL ___floatsisf
005CAC  000000     NOP
005CAE  BE0300     MOV.D W0, W6
005CB0  809824     MOV Throttle, W4
005CB2  809835     MOV 0x1306, W5
005CB4  BE0104     MOV.D W4, W2
005CB6  BE0006     MOV.D W6, W0
005CB8  02245A     CALL ___divsf3
005CBA  000000     NOP
005CBC  BE0200     MOV.D W0, W4
005CBE  889844     MOV W4, KThrottle
005CC0  889855     MOV W5, 0x130A
005CC2  370003     BRA 0x5CCA
4442:                          else
4443:                      KThrottle=0;
005CC4  B82260     MUL.UU W4, #0, W4
005CC6  889844     MOV W4, KThrottle
005CC8  889855     MOV W5, 0x130A
4444:              
4445:                      PWM1Temp=ThrottleTmp*KThrottle;
005CCA  81FF34     MOV ThrottleTmp, W4
005CCC  DEA2CF     ASR W4, #15, W5
005CCE  BE0004     MOV.D W4, W0
005CD0  02257C     CALL ___floatsisf
005CD2  000000     NOP
005CD4  BE0300     MOV.D W0, W6
005CD6  809844     MOV KThrottle, W4
005CD8  809855     MOV 0x130A, W5
005CDA  BE0104     MOV.D W4, W2
005CDC  BE0006     MOV.D W6, W0
005CDE  022630     CALL ___mulsf3
005CE0  000000     NOP
005CE2  BE0200     MOV.D W0, W4
005CE4  BE0004     MOV.D W4, W0
005CE6  022504     CALL ___fixsfsi
005CE8  000000     NOP
005CEA  BE0200     MOV.D W0, W4
005CEC  8A1854     MOV W4, PWM1Temp
005CEE  8A1865     MOV W5, 0x430C
4446:              
4447:                      if ((SpeedControl||AntiPolice)&&(!SpeedControlPID)&&(!Sensorless))
005CF0  809754     MOV StatFlgs1, W4
005CF2  620262     AND W4, #0x2, W4
005CF4  520FE0     SUB W4, #0x0, [W15]
005CF6  3A0005     BRA NZ, 0x5D02
005CF8  809765     MOV StatFlgs2, W5
005CFA  202004     MOV #0x200, W4
005CFC  628204     AND W5, W4, W4
005CFE  520FE0     SUB W4, #0x0, [W15]
005D00  320053     BRA Z, 0x5DA8
005D02  8095F5     MOV 0x12BE, W5
005D04  210004     MOV #0x1000, W4
005D06  628204     AND W5, W4, W4
005D08  520FE0     SUB W4, #0x0, [W15]
005D0A  3A004E     BRA NZ, 0x5DA8
005D0C  809755     MOV StatFlgs1, W5
005D0E  200204     MOV #0x20, W4
005D10  628204     AND W5, W4, W4
005D12  520FE0     SUB W4, #0x0, [W15]
005D14  3A0049     BRA NZ, 0x5DA8
4448:                      {
4449:                          if (!CurrentControlOnly)
005D16  809775     MOV StatFlgs3, W5
005D18  204004     MOV #0x400, W4
005D1A  628204     AND W5, W4, W4
005D1C  520FE0     SUB W4, #0x0, [W15]
005D1E  3A0028     BRA NZ, 0x5D70
005D6E  370091     BRA 0x5E92
005DA6  370075     BRA 0x5E92
4450:                              Spd1UST=((float)(PWM1Temp*(long int)MaxSpd))/(((float)MAX_PWM)*ImpToKmH1_t);
005D20  230C54     MOV #0x30C5, W4
005D22  784214     MOV.B [W4], W4
005D24  FB8304     ZE W4, W6
005D26  200007     MOV #0x0, W7
005D28  821854     MOV PWM1Temp, W4
005D2A  821865     MOV 0x430C, W5
005D2C  B83884     MUL.UU W7, W4, W0
005D2E  B82986     MUL.UU W5, W6, W2
005D30  780082     MOV W2, W1
005D32  400001     ADD W0, W1, W0
005D34  780306     MOV W6, W6
005D36  780204     MOV W4, W4
005D38  B83204     MUL.UU W6, W4, W4
005D3A  400005     ADD W0, W5, W0
005D3C  780280     MOV W0, W5
005D3E  BE0004     MOV.D W4, W0
005D40  02257C     CALL ___floatsisf
005D42  000000     NOP
005D44  BE0400     MOV.D W0, W8
005D46  8212F4     MOV MAX_PWM, W4
005D48  DEA2CF     ASR W4, #15, W5
005D4A  BE0004     MOV.D W4, W0
005D4C  02257C     CALL ___floatsisf
005D4E  000000     NOP
005D50  BE0300     MOV.D W0, W6
005D52  817E24     MOV ImpToKmH1_t, W4
005D54  817E35     MOV 0x2FC6, W5
005D56  BE0104     MOV.D W4, W2
005D58  BE0006     MOV.D W6, W0
005D5A  022630     CALL ___mulsf3
005D5C  000000     NOP
005D5E  BE0200     MOV.D W0, W4
005D60  BE0104     MOV.D W4, W2
005D62  BE0008     MOV.D W8, W0
005D64  02245A     CALL ___divsf3
005D66  000000     NOP
005D68  BE0200     MOV.D W0, W4
005D6A  897F74     MOV W4, Spd1UST
005D6C  897F85     MOV W5, 0x2FF0
4451:                          else
4452:                              CurrUstCurrentOnly=(CurrentMaxCurrentOnlyWork*PWM1Temp)/((float)MAX_PWM);
005D70  821854     MOV PWM1Temp, W4
005D72  821865     MOV 0x430C, W5
005D74  BE0004     MOV.D W4, W0
005D76  02257C     CALL ___floatsisf
005D78  000000     NOP
005D7A  BE0300     MOV.D W0, W6
005D7C  818604     MOV CurrentMaxCurrentOnlyWork, W4
005D7E  818615     MOV 0x30C2, W5
005D80  BE0104     MOV.D W4, W2
005D82  BE0006     MOV.D W6, W0
005D84  022630     CALL ___mulsf3
005D86  000000     NOP
005D88  BE0200     MOV.D W0, W4
005D8A  BE0404     MOV.D W4, W8
005D8C  8212F4     MOV MAX_PWM, W4
005D8E  DEA2CF     ASR W4, #15, W5
005D90  BE0004     MOV.D W4, W0
005D92  02257C     CALL ___floatsisf
005D94  000000     NOP
005D96  BE0200     MOV.D W0, W4
005D98  BE0104     MOV.D W4, W2
005D9A  BE0008     MOV.D W8, W0
005D9C  02245A     CALL ___divsf3
005D9E  000000     NOP
005DA0  BE0200     MOV.D W0, W4
005DA2  889804     MOV W4, CurrUstCurrentOnly
005DA4  889815     MOV W5, 0x1302
4453:                      }
4454:                      
4455:                      else
4456:                      {
4457:                          if (SpeedControlPID)
005DA8  8095F5     MOV 0x12BE, W5
005DAA  210004     MOV #0x1000, W4
005DAC  628204     AND W5, W4, W4
005DAE  520FE0     SUB W4, #0x0, [W15]
005DB0  320027     BRA Z, 0x5E00
4458:              //        Spd1UST_Tmp=(float)((float)PWM1Temp/(float)MaxSpdCoeff);
4459:                          Spd1UST_Tmp=((float)(PWM1Temp*(long int)MaxSpd))/(((float)MAX_PWM)*ImpToKmH1_t);
005DB2  230C54     MOV #0x30C5, W4
005DB4  784214     MOV.B [W4], W4
005DB6  FB8304     ZE W4, W6
005DB8  200007     MOV #0x0, W7
005DBA  821854     MOV PWM1Temp, W4
005DBC  821865     MOV 0x430C, W5
005DBE  B83884     MUL.UU W7, W4, W0
005DC0  B82986     MUL.UU W5, W6, W2
005DC2  780082     MOV W2, W1
005DC4  400001     ADD W0, W1, W0
005DC6  780306     MOV W6, W6
005DC8  780204     MOV W4, W4
005DCA  B83204     MUL.UU W6, W4, W4
005DCC  400005     ADD W0, W5, W0
005DCE  780280     MOV W0, W5
005DD0  BE0004     MOV.D W4, W0
005DD2  02257C     CALL ___floatsisf
005DD4  000000     NOP
005DD6  BE0400     MOV.D W0, W8
005DD8  8212F4     MOV MAX_PWM, W4
005DDA  DEA2CF     ASR W4, #15, W5
005DDC  BE0004     MOV.D W4, W0
005DDE  02257C     CALL ___floatsisf
005DE0  000000     NOP
005DE2  BE0300     MOV.D W0, W6
005DE4  817E24     MOV ImpToKmH1_t, W4
005DE6  817E35     MOV 0x2FC6, W5
005DE8  BE0104     MOV.D W4, W2
005DEA  BE0006     MOV.D W6, W0
005DEC  022630     CALL ___mulsf3
005DEE  000000     NOP
005DF0  BE0200     MOV.D W0, W4
005DF2  BE0104     MOV.D W4, W2
005DF4  BE0008     MOV.D W8, W0
005DF6  02245A     CALL ___divsf3
005DF8  000000     NOP
005DFA  BE0200     MOV.D W0, W4
005DFC  897F94     MOV W4, Spd1UST_Tmp
005DFE  897FA5     MOV W5, 0x2FF4
4460:                          if (!Sensorless)
005E00  809755     MOV StatFlgs1, W5
005E02  200204     MOV #0x20, W4
005E04  628204     AND W5, W4, W4
005E06  520FE0     SUB W4, #0x0, [W15]
005E08  3A0044     BRA NZ, 0x5E92
4461:                          {
4462:                              if (!AntiPolice)
005E0A  809765     MOV StatFlgs2, W5
005E0C  202004     MOV #0x200, W4
005E0E  628204     AND W5, W4, W4
005E10  520FE0     SUB W4, #0x0, [W15]
005E12  3A001F     BRA NZ, 0x5E52
4463:                      PWM1Temp=(((float)PWM1Temp)/100)*MAX_PWM_MEM_WORK;
005E14  821854     MOV PWM1Temp, W4
005E16  821865     MOV 0x430C, W5
005E18  BE0004     MOV.D W4, W0
005E1A  02257C     CALL ___floatsisf
005E1C  000000     NOP
005E1E  BE0200     MOV.D W0, W4
005E20  200002     MOV #0x0, W2
005E22  242C83     MOV #0x42C8, W3
005E24  BE0004     MOV.D W4, W0
005E26  02245A     CALL ___divsf3
005E28  000000     NOP
005E2A  BE0200     MOV.D W0, W4
005E2C  BE0404     MOV.D W4, W8
005E2E  809994     MOV MAX_PWM_MEM_WORK, W4
005E30  200005     MOV #0x0, W5
005E32  BE0004     MOV.D W4, W0
005E34  022582     CALL ___floatunsisf
005E36  000000     NOP
005E38  BE0200     MOV.D W0, W4
005E3A  BE0104     MOV.D W4, W2
005E3C  BE0008     MOV.D W8, W0
005E3E  022630     CALL ___mulsf3
005E40  000000     NOP
005E42  BE0200     MOV.D W0, W4
005E44  BE0004     MOV.D W4, W0
005E46  022504     CALL ___fixsfsi
005E48  000000     NOP
005E4A  BE0200     MOV.D W0, W4
005E4C  8A1854     MOV W4, PWM1Temp
005E4E  8A1865     MOV W5, 0x430C
005E50  370020     BRA 0x5E92
4464:                              else
4465:                              {
4466:                      PWM1Temp=(((float)PWM1Temp)/100)*(float)AntiPolicePower;
005E52  821854     MOV PWM1Temp, W4
005E54  821865     MOV 0x430C, W5
005E56  BE0004     MOV.D W4, W0
005E58  02257C     CALL ___floatsisf
005E5A  000000     NOP
005E5C  BE0200     MOV.D W0, W4
005E5E  200002     MOV #0x0, W2
005E60  242C83     MOV #0x42C8, W3
005E62  BE0004     MOV.D W4, W0
005E64  02245A     CALL ___divsf3
005E66  000000     NOP
005E68  BE0200     MOV.D W0, W4
005E6A  BE0404     MOV.D W4, W8
005E6C  240D14     MOV #0x40D1, W4
005E6E  784214     MOV.B [W4], W4
005E70  FB8204     ZE W4, W4
005E72  200005     MOV #0x0, W5
005E74  BE0004     MOV.D W4, W0
005E76  022582     CALL ___floatunsisf
005E78  000000     NOP
005E7A  BE0200     MOV.D W0, W4
005E7C  BE0104     MOV.D W4, W2
005E7E  BE0008     MOV.D W8, W0
005E80  022630     CALL ___mulsf3
005E82  000000     NOP
005E84  BE0200     MOV.D W0, W4
005E86  BE0004     MOV.D W4, W0
005E88  022504     CALL ___fixsfsi
005E8A  000000     NOP
005E8C  BE0200     MOV.D W0, W4
005E8E  8A1854     MOV W4, PWM1Temp
005E90  8A1865     MOV W5, 0x430C
4467:                              }
4468:                          }
4469:                      }
4470:                      if (DisconnectMotor)
005E92  809685     MOV Flgs5, W5
005E94  280004     MOV #0x8000, W4
005E96  628204     AND W5, W4, W4
005E98  520FE0     SUB W4, #0x0, [W15]
005E9A  3200B2     BRA Z, 0x6000
4471:                          Spd1UST=0;
005E9C  B82260     MUL.UU W4, #0, W4
005E9E  897F74     MOV W4, Spd1UST
005EA0  897F85     MOV W5, 0x2FF0
005EA2  3700AE     BRA 0x6000
4472:              
4473:                      }
4474:                      else
4475:                      {
4476:              
4477:                          if (ThrottleTmp<(BreakThreshold-SensorThresholdDn))
005EA4  809495     MOV BreakThreshold, W5
005EA6  809474     MOV SensorThresholdDn, W4
005EA8  528284     SUB W5, W4, W5
005EAA  81FF34     MOV ThrottleTmp, W4
005EAC  528F84     SUB W5, W4, [W15]
005EAE  340053     BRA LE, 0x5F56
4478:                          {
4479:                          if (HvOptions)
005EB0  809665     MOV Flgs4, W5
005EB2  201004     MOV #0x100, W4
005EB4  628204     AND W5, W4, W4
005EB6  520FE0     SUB W4, #0x0, [W15]
005EB8  320016     BRA Z, 0x5EE6
4480:                      KThrottle=(float)KFirstBreak/(float)(BreakThreshold-SensorThresholdDn);
005EBA  8094A4     MOV KFirstBreak, W4
005EBC  DEA2CF     ASR W4, #15, W5
005EBE  BE0004     MOV.D W4, W0
005EC0  02257C     CALL ___floatsisf
005EC2  000000     NOP
005EC4  BE0400     MOV.D W0, W8
005EC6  809495     MOV BreakThreshold, W5
005EC8  809474     MOV SensorThresholdDn, W4
005ECA  528204     SUB W5, W4, W4
005ECC  DEA2CF     ASR W4, #15, W5
005ECE  BE0004     MOV.D W4, W0
005ED0  02257C     CALL ___floatsisf
005ED2  000000     NOP
005ED4  BE0200     MOV.D W0, W4
005ED6  BE0104     MOV.D W4, W2
005ED8  BE0008     MOV.D W8, W0
005EDA  02245A     CALL ___divsf3
005EDC  000000     NOP
005EDE  BE0200     MOV.D W0, W4
005EE0  889844     MOV W4, KThrottle
005EE2  889855     MOV W5, 0x130A
005EE4  370003     BRA 0x5EEC
4481:                          else
4482:                      KThrottle=0;
005EE6  B82260     MUL.UU W4, #0, W4
005EE8  889844     MOV W4, KThrottle
005EEA  889855     MOV W5, 0x130A
4483:                          PWM1Temp=KFirstBreak-(ThrottleTmp*KThrottle);
005EEC  8094A4     MOV KFirstBreak, W4
005EEE  DEA2CF     ASR W4, #15, W5
005EF0  BE0004     MOV.D W4, W0
005EF2  02257C     CALL ___floatsisf
005EF4  000000     NOP
005EF6  BE0400     MOV.D W0, W8
005EF8  81FF34     MOV ThrottleTmp, W4
005EFA  DEA2CF     ASR W4, #15, W5
005EFC  BE0004     MOV.D W4, W0
005EFE  02257C     CALL ___floatsisf
005F00  000000     NOP
005F02  BE0300     MOV.D W0, W6
005F04  809844     MOV KThrottle, W4
005F06  809855     MOV 0x130A, W5
005F08  BE0104     MOV.D W4, W2
005F0A  BE0006     MOV.D W6, W0
005F0C  022630     CALL ___mulsf3
005F0E  000000     NOP
005F10  BE0200     MOV.D W0, W4
005F12  BE0104     MOV.D W4, W2
005F14  BE0008     MOV.D W8, W0
005F16  0222D0     CALL ___subsf3
005F18  000000     NOP
005F1A  BE0200     MOV.D W0, W4
005F1C  BE0004     MOV.D W4, W0
005F1E  022504     CALL ___fixsfsi
005F20  000000     NOP
005F22  BE0200     MOV.D W0, W4
005F24  8A1854     MOV W4, PWM1Temp
005F26  8A1865     MOV W5, 0x430C
4484:                          if (PWM1Temp<0)
005F28  821854     MOV PWM1Temp, W4
005F2A  821865     MOV 0x430C, W5
005F2C  520FE0     SUB W4, #0x0, [W15]
005F2E  5A8FE0     SUBB W5, #0x0, [W15]
005F30  3D0003     BRA GE, 0x5F38
4485:                              PWM1Temp=0;
005F32  B82260     MUL.UU W4, #0, W4
005F34  8A1854     MOV W4, PWM1Temp
005F36  8A1865     MOV W5, 0x430C
4486:                          if (PWM1Temp==KFirstBreak)
005F38  8094A4     MOV KFirstBreak, W4
005F3A  B92361     MUL.SU W4, #1, W6
005F3C  821854     MOV PWM1Temp, W4
005F3E  821865     MOV 0x430C, W5
005F40  530F84     SUB W6, W4, [W15]
005F42  5B8F85     SUBB W7, W5, [W15]
005F44  3A0004     BRA NZ, 0x5F4E
4487:                              PWM1Temp=MAX_PWM;
005F46  8212F4     MOV MAX_PWM, W4
005F48  DEA2CF     ASR W4, #15, W5
005F4A  8A1854     MOV W4, PWM1Temp
005F4C  8A1865     MOV W5, 0x430C
4488:                          _1stBreak=1;
005F4E  809664     MOV Flgs4, W4
005F50  A0A004     BSET W4, #10
005F52  889664     MOV W4, Flgs4
005F54  37004F     BRA 0x5FF4
4489:                          }
4490:                          else
4491:                          {
4492:                          if (HvOptions)
005F56  809665     MOV Flgs4, W5
005F58  201004     MOV #0x100, W4
005F5A  628204     AND W5, W4, W4
005F5C  520FE0     SUB W4, #0x0, [W15]
005F5E  320016     BRA Z, 0x5F8C
4493:                      KThrottle=(float)MAX_PWM/(float)(SensorThresholdUp-BreakThreshold);
005F60  8212F4     MOV MAX_PWM, W4
005F62  DEA2CF     ASR W4, #15, W5
005F64  BE0004     MOV.D W4, W0
005F66  02257C     CALL ___floatsisf
005F68  000000     NOP
005F6A  BE0400     MOV.D W0, W8
005F6C  809485     MOV SensorThresholdUp, W5
005F6E  809494     MOV BreakThreshold, W4
005F70  528204     SUB W5, W4, W4
005F72  DEA2CF     ASR W4, #15, W5
005F74  BE0004     MOV.D W4, W0
005F76  02257C     CALL ___floatsisf
005F78  000000     NOP
005F7A  BE0200     MOV.D W0, W4
005F7C  BE0104     MOV.D W4, W2
005F7E  BE0008     MOV.D W8, W0
005F80  02245A     CALL ___divsf3
005F82  000000     NOP
005F84  BE0200     MOV.D W0, W4
005F86  889844     MOV W4, KThrottle
005F88  889855     MOV W5, 0x130A
005F8A  370003     BRA 0x5F92
4494:                          else
4495:                      KThrottle=0;
005F8C  B82260     MUL.UU W4, #0, W4
005F8E  889844     MOV W4, KThrottle
005F90  889855     MOV W5, 0x130A
4496:                          PWM1Temp=ThrottleTmp-(BreakThreshold-SensorThresholdDn);
005F92  809475     MOV SensorThresholdDn, W5
005F94  809494     MOV BreakThreshold, W4
005F96  528284     SUB W5, W4, W5
005F98  81FF34     MOV ThrottleTmp, W4
005F9A  428204     ADD W5, W4, W4
005F9C  DEA2CF     ASR W4, #15, W5
005F9E  8A1854     MOV W4, PWM1Temp
005FA0  8A1865     MOV W5, 0x430C
4497:                          PWM1Temp=MAX_PWM-((float)PWM1Temp*KThrottle);
005FA2  8212F4     MOV MAX_PWM, W4
005FA4  DEA2CF     ASR W4, #15, W5
005FA6  BE0004     MOV.D W4, W0
005FA8  02257C     CALL ___floatsisf
005FAA  000000     NOP
005FAC  BE0400     MOV.D W0, W8
005FAE  821854     MOV PWM1Temp, W4
005FB0  821865     MOV 0x430C, W5
005FB2  BE0004     MOV.D W4, W0
005FB4  02257C     CALL ___floatsisf
005FB6  000000     NOP
005FB8  BE0300     MOV.D W0, W6
005FBA  809844     MOV KThrottle, W4
005FBC  809855     MOV 0x130A, W5
005FBE  BE0104     MOV.D W4, W2
005FC0  BE0006     MOV.D W6, W0
005FC2  022630     CALL ___mulsf3
005FC4  000000     NOP
005FC6  BE0200     MOV.D W0, W4
005FC8  BE0104     MOV.D W4, W2
005FCA  BE0008     MOV.D W8, W0
005FCC  0222D0     CALL ___subsf3
005FCE  000000     NOP
005FD0  BE0200     MOV.D W0, W4
005FD2  BE0004     MOV.D W4, W0
005FD4  022504     CALL ___fixsfsi
005FD6  000000     NOP
005FD8  BE0200     MOV.D W0, W4
005FDA  8A1854     MOV W4, PWM1Temp
005FDC  8A1865     MOV W5, 0x430C
4498:                          if (PWM1Temp<0)
005FDE  821854     MOV PWM1Temp, W4
005FE0  821865     MOV 0x430C, W5
005FE2  520FE0     SUB W4, #0x0, [W15]
005FE4  5A8FE0     SUBB W5, #0x0, [W15]
005FE6  3D0003     BRA GE, 0x5FEE
4499:                              PWM1Temp=0;
005FE8  B82260     MUL.UU W4, #0, W4
005FEA  8A1854     MOV W4, PWM1Temp
005FEC  8A1865     MOV W5, 0x430C
4500:              
4501:                              _1stBreak=0;
005FEE  809664     MOV Flgs4, W4
005FF0  A1A004     BCLR W4, #10
005FF2  889664     MOV W4, Flgs4
4502:              
4503:                          }
4504:              
4505:                          PWM1Temp=-PWM1Temp;
005FF4  821854     MOV PWM1Temp, W4
005FF6  821865     MOV 0x430C, W5
005FF8  120260     SUBR W4, #0x0, W4
005FFA  1A82E0     SUBBR W5, #0x0, W5
005FFC  8A1854     MOV W4, PWM1Temp
005FFE  8A1865     MOV W5, 0x430C
4506:              
4507:                      }
4508:              
4509:                      if (!SpeedControlPrev)
006000  8096A4     MOV Flgs6, W4
006002  620262     AND W4, #0x2, W4
006004  520FE0     SUB W4, #0x0, [W15]
006006  3A0007     BRA NZ, 0x6016
4510:                          if (SpeedControl)
006008  809754     MOV StatFlgs1, W4
00600A  620262     AND W4, #0x2, W4
00600C  520FE0     SUB W4, #0x0, [W15]
00600E  320003     BRA Z, 0x6016
4511:                               ECurr1Summ=0;
006010  B82260     MUL.UU W4, #0, W4
006012  89F564     MOV W4, ECurr1Summ
006014  89F575     MOV W5, 0x3EAE
4512:              
4513:                      SpeedControlPrev=SpeedControl;
006016  809754     MOV StatFlgs1, W4
006018  D10204     LSR W4, W4
00601A  624261     AND.B W4, #0x1, W4
00601C  FB8204     ZE W4, W4
00601E  620261     AND W4, #0x1, W4
006020  420204     ADD W4, W4, W4
006022  8096A6     MOV Flgs6, W6
006024  2FFFD5     MOV #0xFFFD, W5
006026  630285     AND W6, W5, W5
006028  728204     IOR W5, W4, W4
00602A  8896A4     MOV W4, Flgs6
4514:                      
4515:                      if (SpeedControl&&(!BreakPressed)&&(!DisconnectMotor))
00602C  809754     MOV StatFlgs1, W4
00602E  620262     AND W4, #0x2, W4
006030  520FE0     SUB W4, #0x0, [W15]
006032  320011     BRA Z, 0x6056
006034  809614     MOV 0x12C2, W4
006036  620261     AND W4, #0x1, W4
006038  520FE0     SUB W4, #0x0, [W15]
00603A  3A000D     BRA NZ, 0x6056
00603C  809685     MOV Flgs5, W5
00603E  280004     MOV #0x8000, W4
006040  628204     AND W5, W4, W4
006042  520FE0     SUB W4, #0x0, [W15]
006044  3A0008     BRA NZ, 0x6056
4516:                      {
4517:                          if (!PID_On)
006046  809655     MOV 0x12CA, W5
006048  202004     MOV #0x200, W4
00604A  628204     AND W5, W4, W4
00604C  520FE0     SUB W4, #0x0, [W15]
00604E  3A0003     BRA NZ, 0x6056
4518:                              StrtPID_On=1;
006050  809604     MOV Flgs1, W4
006052  A0C004     BSET W4, #12
006054  889604     MOV W4, Flgs1
4519:                      }
4520:                      AutoPIDStateMachine();
006056  02B35C     CALL AutoPIDStateMachine
006058  000001     NOP
4521:              //-------------  START PID  ---------------------------
4522:                   if (StrtPID_On)
00605A  809605     MOV Flgs1, W5
00605C  210004     MOV #0x1000, W4
00605E  628204     AND W5, W4, W4
006060  520FE0     SUB W4, #0x0, [W15]
006062  320037     BRA Z, 0x60D2
4523:                   {
4524:                  StrtPID_On=0;
006064  809604     MOV Flgs1, W4
006066  A1C004     BCLR W4, #12
006068  889604     MOV W4, Flgs1
4525:                  
4526:                  ESumm=CurrentControlCurr;
00606A  8217F4     MOV CurrentControlCurr, W4
00606C  821805     MOV 0x4300, W5
00606E  BE0004     MOV.D W4, W0
006070  02257C     CALL ___floatsisf
006072  000000     NOP
006074  BE0200     MOV.D W0, W4
006076  889B84     MOV W4, ESumm
006078  889B95     MOV W5, 0x1372
4527:                  ECurr1Summ=PWM1Temp;
00607A  821854     MOV PWM1Temp, W4
00607C  821865     MOV 0x430C, W5
00607E  BE0004     MOV.D W4, W0
006080  02257C     CALL ___floatsisf
006082  000000     NOP
006084  BE0200     MOV.D W0, W4
006086  89F564     MOV W4, ECurr1Summ
006088  89F575     MOV W5, 0x3EAE
4528:                  
4529:                  /*if (KiNoMan!=0)
4530:                  ESumm=((float)PWM1Temp)/KiNoMan;
4531:                  else
4532:                  ESumm=0;*/
4533:                  E=0;
00608A  B82260     MUL.UU W4, #0, W4
00608C  889BA4     MOV W4, E
00608E  889BB5     MOV W5, 0x1376
4534:                  if (PWM1Temp<0)
006090  821854     MOV PWM1Temp, W4
006092  821865     MOV 0x430C, W5
006094  520FE0     SUB W4, #0x0, [W15]
006096  5A8FE0     SUBB W5, #0x0, [W15]
006098  3D0004     BRA GE, 0x60A2
4535:                          PWM_Minus=1;
00609A  809604     MOV Flgs1, W4
00609C  A0F004     BSET W4, #15
00609E  889604     MOV W4, Flgs1
0060A0  370003     BRA 0x60A8
4536:                  else
4537:                          PWM_Minus=0;
0060A2  809604     MOV Flgs1, W4
0060A4  A1F004     BCLR W4, #15
0060A6  889604     MOV W4, Flgs1
4538:                  Spd1UST_Tmp=0;
0060A8  B82260     MUL.UU W4, #0, W4
0060AA  897F94     MOV W4, Spd1UST_Tmp
0060AC  897FA5     MOV W5, 0x2FF4
4539:                  PID_On=1;
0060AE  809654     MOV 0x12CA, W4
0060B0  A09004     BSET W4, #9
0060B2  889654     MOV W4, 0x12CA
4540:                  Spd1UST=(float)Spd1Res;
0060B4  817F14     MOV Spd1Res, W4
0060B6  DEA2CF     ASR W4, #15, W5
0060B8  BE0004     MOV.D W4, W0
0060BA  02257C     CALL ___floatsisf
0060BC  000000     NOP
0060BE  BE0200     MOV.D W0, W4
0060C0  897F74     MOV W4, Spd1UST
0060C2  897F85     MOV W5, 0x2FF0
4541:                  PWMTempPID=PWM1Temp;
0060C4  821854     MOV PWM1Temp, W4
0060C6  821865     MOV 0x430C, W5
0060C8  89FEA4     MOV W4, PWMTempPID
0060CA  89FEB5     MOV W5, 0x3FD6
4542:                  FlgPID=1;
0060CC  809614     MOV 0x12C2, W4
0060CE  A06004     BSET W4, #6
0060D0  889614     MOV W4, 0x12C2
4543:                   }
4544:                      
4545:                  
4546:                     if (PID_On)
0060D2  809655     MOV 0x12CA, W5
0060D4  202004     MOV #0x200, W4
0060D6  628204     AND W5, W4, W4
0060D8  520FE0     SUB W4, #0x0, [W15]
0060DA  32028C     BRA Z, 0x65F4
4547:                      {
4548:                      Spd1UST=Spd1UST-((float)PI_Curr1Res)*KTemperatureSPDControl;
0060DC  817F78     MOV Spd1UST, W8
0060DE  817F89     MOV 0x2FF0, W9
0060E0  81F404     MOV PI_Curr1Res, W4
0060E2  81F415     MOV 0x3E82, W5
0060E4  BE0004     MOV.D W4, W0
0060E6  02257C     CALL ___floatsisf
0060E8  000000     NOP
0060EA  BE0300     MOV.D W0, W6
0060EC  81B794     MOV KTemperatureSPDControl, W4
0060EE  81B7A5     MOV 0x36F4, W5
0060F0  BE0104     MOV.D W4, W2
0060F2  BE0006     MOV.D W6, W0
0060F4  022630     CALL ___mulsf3
0060F6  000000     NOP
0060F8  BE0200     MOV.D W0, W4
0060FA  BE0104     MOV.D W4, W2
0060FC  BE0008     MOV.D W8, W0
0060FE  0222D0     CALL ___subsf3
006100  000000     NOP
006102  BE0200     MOV.D W0, W4
006104  897F74     MOV W4, Spd1UST
006106  897F85     MOV W5, 0x2FF0
4549:                  //    if (!Joystick)
4550:                      if (Spd1UST<0)
006108  817F74     MOV Spd1UST, W4
00610A  817F85     MOV 0x2FF0, W5
00610C  B3C018     MOV.B #0x1, W8
00610E  B81160     MUL.UU W2, #0, W2
006110  BE0004     MOV.D W4, W0
006112  0224FC     CALL ___lesf2
006114  000000     NOP
006116  780200     MOV W0, W4
006118  520FE0     SUB W4, #0x0, [W15]
00611A  350001     BRA LT, 0x611E
00611C  EB4400     CLR.B W8
00611E  544FE0     SUB.B W8, #0x0, [W15]
006120  320003     BRA Z, 0x6128
4551:                          Spd1UST=0;
006122  B82260     MUL.UU W4, #0, W4
006124  897F74     MOV W4, Spd1UST
006126  897F85     MOV W5, 0x2FF0
4552:                      if (!CurrentControlOnly)
006128  809775     MOV StatFlgs3, W5
00612A  204004     MOV #0x400, W4
00612C  628204     AND W5, W4, W4
00612E  520FE0     SUB W4, #0x0, [W15]
006130  3A0104     BRA NZ, 0x633A
4553:                      {
4554:                      if (HvSpd1_PID)//&&(!MorePWM))
006132  809605     MOV Flgs1, W5
006134  204004     MOV #0x400, W4
006136  628204     AND W5, W4, W4
006138  520FE0     SUB W4, #0x0, [W15]
00613A  320085     BRA Z, 0x6246
4555:                          {
4556:                          HvSpd1_PID=0;
00613C  809604     MOV Flgs1, W4
00613E  A1A004     BCLR W4, #10
006140  889604     MOV W4, Flgs1
4557:              
4558:              
4559:                          E=Spd1UST-Spd1Res;
006142  817F78     MOV Spd1UST, W8
006144  817F89     MOV 0x2FF0, W9
006146  817F14     MOV Spd1Res, W4
006148  DEA2CF     ASR W4, #15, W5
00614A  BE0004     MOV.D W4, W0
00614C  02257C     CALL ___floatsisf
00614E  000000     NOP
006150  BE0200     MOV.D W0, W4
006152  BE0104     MOV.D W4, W2
006154  BE0008     MOV.D W8, W0
006156  0222D0     CALL ___subsf3
006158  000000     NOP
00615A  BE0200     MOV.D W0, W4
00615C  889BA4     MOV W4, E
00615E  889BB5     MOV W5, 0x1376
4560:                          if (E==0)
006160  809BA4     MOV E, W4
006162  809BB5     MOV 0x1376, W5
006164  B81160     MUL.UU W2, #0, W2
006166  BE0004     MOV.D W4, W0
006168  0224FC     CALL ___lesf2
00616A  000000     NOP
00616C  780200     MOV W0, W4
00616E  520FE0     SUB W4, #0x0, [W15]
006170  3A0004     BRA NZ, 0x617A
4561:                              E=-1;
006172  200004     MOV #0x0, W4
006174  2BF805     MOV #0xBF80, W5
006176  889BA4     MOV W4, E
006178  889BB5     MOV W5, 0x1376
4562:                          
4563:                          Ep=E*KpNoMan;
00617A  809BA6     MOV E, W6
00617C  809BB7     MOV 0x1376, W7
00617E  809BE4     MOV KpNoMan, W4
006180  809BF5     MOV 0x137E, W5
006182  BE0104     MOV.D W4, W2
006184  BE0006     MOV.D W6, W0
006186  022630     CALL ___mulsf3
006188  000000     NOP
00618A  BE0200     MOV.D W0, W4
00618C  889A84     MOV W4, Ep
00618E  889A95     MOV W5, 0x1352
4564:              
4565:              
4566:                      ESumm=ESumm+E*KiNoMan;//+Ed;
006190  809BA6     MOV E, W6
006192  809BB7     MOV 0x1376, W7
006194  809B44     MOV KiNoMan, W4
006196  809B55     MOV 0x136A, W5
006198  BE0104     MOV.D W4, W2
00619A  BE0006     MOV.D W6, W0
00619C  022630     CALL ___mulsf3
00619E  000000     NOP
0061A0  BE0200     MOV.D W0, W4
0061A2  BE0304     MOV.D W4, W6
0061A4  809B84     MOV ESumm, W4
0061A6  809B95     MOV 0x1372, W5
0061A8  BE0104     MOV.D W4, W2
0061AA  BE0006     MOV.D W6, W0
0061AC  0222D2     CALL ___addsf3
0061AE  000000     NOP
0061B0  BE0200     MOV.D W0, W4
0061B2  889B84     MOV W4, ESumm
0061B4  889B95     MOV W5, 0x1372
4567:              
4568:                   //   if (Spd1UST==0)
4569:                     // ESumm=0;
4570:              
4571:              
4572:                          Ei=ESumm;
0061B6  809B84     MOV ESumm, W4
0061B8  809B95     MOV 0x1372, W5
0061BA  889AC4     MOV W4, Ei
0061BC  889AD5     MOV W5, 0x135A
4573:                          EPID_Res=Ep+Ei;
0061BE  809A86     MOV Ep, W6
0061C0  809A97     MOV 0x1352, W7
0061C2  809AC4     MOV Ei, W4
0061C4  809AD5     MOV 0x135A, W5
0061C6  BE0104     MOV.D W4, W2
0061C8  BE0006     MOV.D W6, W0
0061CA  0222D2     CALL ___addsf3
0061CC  000000     NOP
0061CE  BE0200     MOV.D W0, W4
0061D0  88C144     MOV W4, EPID_Res
0061D2  88C155     MOV W5, 0x182A
4574:                          
4575:                          if (EPID_Res<0)
0061D4  80C144     MOV EPID_Res, W4
0061D6  80C155     MOV 0x182A, W5
0061D8  B3C018     MOV.B #0x1, W8
0061DA  B81160     MUL.UU W2, #0, W2
0061DC  BE0004     MOV.D W4, W0
0061DE  0224FC     CALL ___lesf2
0061E0  000000     NOP
0061E2  780200     MOV W0, W4
0061E4  520FE0     SUB W4, #0x0, [W15]
0061E6  350001     BRA LT, 0x61EA
0061E8  EB4400     CLR.B W8
0061EA  544FE0     SUB.B W8, #0x0, [W15]
0061EC  320006     BRA Z, 0x61FA
4576:                          {
4577:                              EPID_Res=0;
0061EE  B82260     MUL.UU W4, #0, W4
0061F0  88C144     MOV W4, EPID_Res
0061F2  88C155     MOV W5, 0x182A
4578:                              ESumm=0;
0061F4  B82260     MUL.UU W4, #0, W4
0061F6  889B84     MOV W4, ESumm
0061F8  889B95     MOV W5, 0x1372
4579:                          }
4580:                          
4581:                
4582:                          if (EPID_Res>MAX_PWM_CONST)//<<CURRMASS_SHIFT))
0061FA  8092D4     MOV MAX_PWM_CONST, W4
0061FC  DEA2CF     ASR W4, #15, W5
0061FE  BE0004     MOV.D W4, W0
006200  02257C     CALL ___floatsisf
006202  000000     NOP
006204  BE0300     MOV.D W0, W6
006206  80C144     MOV EPID_Res, W4
006208  80C155     MOV 0x182A, W5
00620A  B3C018     MOV.B #0x1, W8
00620C  BE0104     MOV.D W4, W2
00620E  BE0006     MOV.D W6, W0
006210  0224FC     CALL ___lesf2
006212  000000     NOP
006214  780200     MOV W0, W4
006216  520FE0     SUB W4, #0x0, [W15]
006218  350001     BRA LT, 0x621C
00621A  EB4400     CLR.B W8
00621C  544FE0     SUB.B W8, #0x0, [W15]
00621E  320013     BRA Z, 0x6246
4583:                          {
4584:                              EPID_Res=MAX_PWM_CONST;//<<CURRMASS_SHIFT;
006220  8092D4     MOV MAX_PWM_CONST, W4
006222  DEA2CF     ASR W4, #15, W5
006224  BE0004     MOV.D W4, W0
006226  02257C     CALL ___floatsisf
006228  000000     NOP
00622A  BE0200     MOV.D W0, W4
00622C  88C144     MOV W4, EPID_Res
00622E  88C155     MOV W5, 0x182A
4585:                              ESumm=EPID_Res-Ep;
006230  80C146     MOV EPID_Res, W6
006232  80C157     MOV 0x182A, W7
006234  809A84     MOV Ep, W4
006236  809A95     MOV 0x1352, W5
006238  BE0104     MOV.D W4, W2
00623A  BE0006     MOV.D W6, W0
00623C  0222D0     CALL ___subsf3
00623E  000000     NOP
006240  BE0200     MOV.D W0, W4
006242  889B84     MOV W4, ESumm
006244  889B95     MOV W5, 0x1372
4586:                          }
4587:              
4588:                          
4589:                          }
4590:                          
4591:                          
4592:                      if (StrongModePID&&!StrongMode&&SpeedControlPID)
006246  809745     MOV StatFlgs, W5
006248  220004     MOV #0x2000, W4
00624A  628204     AND W5, W4, W4
00624C  520FE0     SUB W4, #0x0, [W15]
00624E  320018     BRA Z, 0x6280
006250  8095F5     MOV 0x12BE, W5
006252  240004     MOV #0x4000, W4
006254  628204     AND W5, W4, W4
006256  520FE0     SUB W4, #0x0, [W15]
006258  3A0013     BRA NZ, 0x6280
00625A  8095F5     MOV 0x12BE, W5
00625C  210004     MOV #0x1000, W4
00625E  628204     AND W5, W4, W4
006260  520FE0     SUB W4, #0x0, [W15]
006262  32000E     BRA Z, 0x6280
4593:                      {
4594:                          //  if ((CurrentControlCurr>>CURRMASS_SHIFT)>CurrMixed)
4595:                            {
4596:                                PrevStrongMode=StrongMode;
006264  8095F4     MOV 0x12BE, W4
006266  DE224E     LSR W4, #14, W4
006268  624261     AND.B W4, #0x1, W4
00626A  FB8204     ZE W4, W4
00626C  620261     AND W4, #0x1, W4
00626E  DD224A     SL W4, #10, W4
006270  809696     MOV 0x12D2, W6
006272  2FBFF5     MOV #0xFBFF, W5
006274  630285     AND W6, W5, W5
006276  728204     IOR W5, W4, W4
006278  889694     MOV W4, 0x12D2
4597:                                StrongMode=1;
00627A  8095F4     MOV 0x12BE, W4
00627C  A0E004     BSET W4, #14
00627E  8895F4     MOV W4, 0x12BE
4598:                            }
4599:                      }
4600:              
4601:                      if (StrongModePID&&!StrongMode&&!SpeedControl)
006280  809745     MOV StatFlgs, W5
006282  220004     MOV #0x2000, W4
006284  628204     AND W5, W4, W4
006286  520FE0     SUB W4, #0x0, [W15]
006288  320017     BRA Z, 0x62B8
00628A  8095F5     MOV 0x12BE, W5
00628C  240004     MOV #0x4000, W4
00628E  628204     AND W5, W4, W4
006290  520FE0     SUB W4, #0x0, [W15]
006292  3A0012     BRA NZ, 0x62B8
006294  809754     MOV StatFlgs1, W4
006296  620262     AND W4, #0x2, W4
006298  520FE0     SUB W4, #0x0, [W15]
00629A  3A000E     BRA NZ, 0x62B8
4602:                      {
4603:              //              if ((CurrentControlCurr>>CURRMASS_SHIFT)>CurrMixed)
4604:                            {
4605:                                PrevStrongMode=StrongMode;
00629C  8095F4     MOV 0x12BE, W4
00629E  DE224E     LSR W4, #14, W4
0062A0  624261     AND.B W4, #0x1, W4
0062A2  FB8204     ZE W4, W4
0062A4  620261     AND W4, #0x1, W4
0062A6  DD224A     SL W4, #10, W4
0062A8  809696     MOV 0x12D2, W6
0062AA  2FBFF5     MOV #0xFBFF, W5
0062AC  630285     AND W6, W5, W5
0062AE  728204     IOR W5, W4, W4
0062B0  889694     MOV W4, 0x12D2
4606:                                StrongMode=1;
0062B2  8095F4     MOV 0x12BE, W4
0062B4  A0E004     BSET W4, #14
0062B6  8895F4     MOV W4, 0x12BE
4607:                            }
4608:                      }
4609:                      if (EPID_Res>MAX_PWM_CONST)
0062B8  8092D4     MOV MAX_PWM_CONST, W4
0062BA  DEA2CF     ASR W4, #15, W5
0062BC  BE0004     MOV.D W4, W0
0062BE  02257C     CALL ___floatsisf
0062C0  000000     NOP
0062C2  BE0300     MOV.D W0, W6
0062C4  80C144     MOV EPID_Res, W4
0062C6  80C155     MOV 0x182A, W5
0062C8  B3C018     MOV.B #0x1, W8
0062CA  BE0104     MOV.D W4, W2
0062CC  BE0006     MOV.D W6, W0
0062CE  0224FC     CALL ___lesf2
0062D0  000000     NOP
0062D2  780200     MOV W0, W4
0062D4  520FE0     SUB W4, #0x0, [W15]
0062D6  350001     BRA LT, 0x62DA
0062D8  EB4400     CLR.B W8
0062DA  544FE0     SUB.B W8, #0x0, [W15]
0062DC  320008     BRA Z, 0x62EE
4610:                          EPID_Res=MAX_PWM_CONST;
0062DE  8092D4     MOV MAX_PWM_CONST, W4
0062E0  DEA2CF     ASR W4, #15, W5
0062E2  BE0004     MOV.D W4, W0
0062E4  02257C     CALL ___floatsisf
0062E6  000000     NOP
0062E8  BE0200     MOV.D W0, W4
0062EA  88C144     MOV W4, EPID_Res
0062EC  88C155     MOV W5, 0x182A
4611:                      if (EPID_Res<-MAX_PWM_CONST)
0062EE  8092D4     MOV MAX_PWM_CONST, W4
0062F0  EA0204     NEG W4, W4
0062F2  DEA2CF     ASR W4, #15, W5
0062F4  BE0004     MOV.D W4, W0
0062F6  02257C     CALL ___floatsisf
0062F8  000000     NOP
0062FA  BE0300     MOV.D W0, W6
0062FC  80C144     MOV EPID_Res, W4
0062FE  80C155     MOV 0x182A, W5
006300  B3C018     MOV.B #0x1, W8
006302  BE0104     MOV.D W4, W2
006304  BE0006     MOV.D W6, W0
006306  022500     CALL ___gtsf2
006308  000000     NOP
00630A  780200     MOV W0, W4
00630C  520FE0     SUB W4, #0x0, [W15]
00630E  3C0001     BRA GT, 0x6312
006310  EB4400     CLR.B W8
006312  544FE0     SUB.B W8, #0x0, [W15]
006314  320009     BRA Z, 0x6328
4612:                          EPID_Res=-MAX_PWM_CONST;
006316  8092D4     MOV MAX_PWM_CONST, W4
006318  EA0204     NEG W4, W4
00631A  DEA2CF     ASR W4, #15, W5
00631C  BE0004     MOV.D W4, W0
00631E  02257C     CALL ___floatsisf
006320  000000     NOP
006322  BE0200     MOV.D W0, W4
006324  88C144     MOV W4, EPID_Res
006326  88C155     MOV W5, 0x182A
4613:                      
4614:                      
4615:                          PWM1_Mem=(int)EPID_Res;
006328  80C144     MOV EPID_Res, W4
00632A  80C155     MOV 0x182A, W5
00632C  BE0004     MOV.D W4, W0
00632E  022504     CALL ___fixsfsi
006330  000000     NOP
006332  BE0200     MOV.D W0, W4
006334  780204     MOV W4, W4
006336  8892C4     MOV W4, PWM1_Mem
006338  37000C     BRA 0x6352
4616:              
4617:                      }
4618:                      else
4619:                      {
4620:                          EPID_Res=CurrUstCurrentOnly;
00633A  809804     MOV CurrUstCurrentOnly, W4
00633C  809815     MOV 0x1302, W5
00633E  88C144     MOV W4, EPID_Res
006340  88C155     MOV W5, 0x182A
4621:                          PWM1_Mem=(int)EPID_Res;
006342  80C144     MOV EPID_Res, W4
006344  80C155     MOV 0x182A, W5
006346  BE0004     MOV.D W4, W0
006348  022504     CALL ___fixsfsi
00634A  000000     NOP
00634C  BE0200     MOV.D W0, W4
00634E  780204     MOV W4, W4
006350  8892C4     MOV W4, PWM1_Mem
4622:                      }
4623:                          EPID_ResTmp=EPID_Res;
006352  80C144     MOV EPID_Res, W4
006354  80C155     MOV 0x182A, W5
006356  88C164     MOV W4, EPID_ResTmp
006358  88C175     MOV W5, 0x182E
4624:                          //----------------
4625:                      if (CurrentControlOnly)
00635A  809775     MOV StatFlgs3, W5
00635C  204004     MOV #0x400, W4
00635E  628204     AND W5, W4, W4
006360  520FE0     SUB W4, #0x0, [W15]
006362  320092     BRA Z, 0x6488
4626:                      {
4627:              
4628:              CurrentControlCurrUst=(long int)EPID_Res;
006364  80C144     MOV EPID_Res, W4
006366  80C155     MOV 0x182A, W5
006368  BE0004     MOV.D W4, W0
00636A  022504     CALL ___fixsfsi
00636C  000000     NOP
00636E  BE0200     MOV.D W0, W4
006370  89C344     MOV W4, CurrentControlCurrUst
006372  89C355     MOV W5, 0x386A
4629:              //KiCurr=0;
4630:                  if (CurrentControlCurr<0)
006374  8217F4     MOV CurrentControlCurr, W4
006376  821805     MOV 0x4300, W5
006378  520FE0     SUB W4, #0x0, [W15]
00637A  5A8FE0     SUBB W5, #0x0, [W15]
00637C  3D0003     BRA GE, 0x6384
4631:                      CurrentControlCurr=0;
00637E  B82260     MUL.UU W4, #0, W4
006380  8A17F4     MOV W4, CurrentControlCurr
006382  8A1805     MOV W5, 0x4300
4632:                  ECurr1=CurrentControlCurrUst-CurrentControlCurr;
006384  81C344     MOV CurrentControlCurrUst, W4
006386  81C355     MOV 0x386A, W5
006388  780304     MOV W4, W6
00638A  8217F4     MOV CurrentControlCurr, W4
00638C  821805     MOV 0x4300, W5
00638E  780204     MOV W4, W4
006390  530204     SUB W6, W4, W4
006392  89F484     MOV W4, ECurr1
4633:                  EpCurr1=ECurr1*KpCurr;
006394  81F484     MOV ECurr1, W4
006396  DEA2CF     ASR W4, #15, W5
006398  BE0004     MOV.D W4, W0
00639A  02257C     CALL ___floatsisf
00639C  000000     NOP
00639E  BE0300     MOV.D W0, W6
0063A0  81F464     MOV KpCurr, W4
0063A2  81F475     MOV 0x3E8E, W5
0063A4  BE0104     MOV.D W4, W2
0063A6  BE0006     MOV.D W6, W0
0063A8  022630     CALL ___mulsf3
0063AA  000000     NOP
0063AC  BE0200     MOV.D W0, W4
0063AE  89F584     MOV W4, EpCurr1
0063B0  89F595     MOV W5, 0x3EB2
4634:                  ECurr1Summ=ECurr1Summ+(float)ECurr1*KiCurr;
0063B2  81F484     MOV ECurr1, W4
0063B4  DEA2CF     ASR W4, #15, W5
0063B6  BE0004     MOV.D W4, W0
0063B8  02257C     CALL ___floatsisf
0063BA  000000     NOP
0063BC  BE0300     MOV.D W0, W6
0063BE  81F444     MOV KiCurr, W4
0063C0  81F455     MOV 0x3E8A, W5
0063C2  BE0104     MOV.D W4, W2
0063C4  BE0006     MOV.D W6, W0
0063C6  022630     CALL ___mulsf3
0063C8  000000     NOP
0063CA  BE0200     MOV.D W0, W4
0063CC  BE0304     MOV.D W4, W6
0063CE  81F564     MOV ECurr1Summ, W4
0063D0  81F575     MOV 0x3EAE, W5
0063D2  BE0104     MOV.D W4, W2
0063D4  BE0006     MOV.D W6, W0
0063D6  0222D2     CALL ___addsf3
0063D8  000000     NOP
0063DA  BE0200     MOV.D W0, W4
0063DC  89F564     MOV W4, ECurr1Summ
0063DE  89F575     MOV W5, 0x3EAE
4635:                 
4636:                  CurrControlPIRes=(long int)ECurr1Summ+(long int)EpCurr1;
0063E0  81F564     MOV ECurr1Summ, W4
0063E2  81F575     MOV 0x3EAE, W5
0063E4  BE0004     MOV.D W4, W0
0063E6  022504     CALL ___fixsfsi
0063E8  000000     NOP
0063EA  BE0400     MOV.D W0, W8
0063EC  81F584     MOV EpCurr1, W4
0063EE  81F595     MOV 0x3EB2, W5
0063F0  BE0004     MOV.D W4, W0
0063F2  022504     CALL ___fixsfsi
0063F4  000000     NOP
0063F6  BE0200     MOV.D W0, W4
0063F8  420208     ADD W4, W8, W4
0063FA  4A8289     ADDC W5, W9, W5
0063FC  89F424     MOV W4, CurrControlPIRes
0063FE  89F435     MOV W5, 0x3E86
4637:                  
4638:                  if (CurrControlPIRes>MAX_PWM)
006400  8212F4     MOV MAX_PWM, W4
006402  B92361     MUL.SU W4, #1, W6
006404  81F424     MOV CurrControlPIRes, W4
006406  81F435     MOV 0x3E86, W5
006408  530F84     SUB W6, W4, [W15]
00640A  5B8F85     SUBB W7, W5, [W15]
00640C  3D0014     BRA GE, 0x6436
4639:                  {
4640:                      CurrControlPIRes=MAX_PWM;
00640E  8212F4     MOV MAX_PWM, W4
006410  DEA2CF     ASR W4, #15, W5
006412  89F424     MOV W4, CurrControlPIRes
006414  89F435     MOV W5, 0x3E86
4641:                      ECurr1Summ=CurrControlPIRes-(long int)EpCurr1;
006416  81F428     MOV CurrControlPIRes, W8
006418  81F439     MOV 0x3E86, W9
00641A  81F584     MOV EpCurr1, W4
00641C  81F595     MOV 0x3EB2, W5
00641E  BE0004     MOV.D W4, W0
006420  022504     CALL ___fixsfsi
006422  000000     NOP
006424  BE0200     MOV.D W0, W4
006426  540204     SUB W8, W4, W4
006428  5C8285     SUBB W9, W5, W5
00642A  BE0004     MOV.D W4, W0
00642C  02257C     CALL ___floatsisf
00642E  000000     NOP
006430  BE0200     MOV.D W0, W4
006432  89F564     MOV W4, ECurr1Summ
006434  89F575     MOV W5, 0x3EAE
4642:              
4643:                  }
4644:                  if (CurrControlPIRes<0)
006436  81F424     MOV CurrControlPIRes, W4
006438  81F435     MOV 0x3E86, W5
00643A  520FE0     SUB W4, #0x0, [W15]
00643C  5A8FE0     SUBB W5, #0x0, [W15]
00643E  3D0020     BRA GE, 0x6480
4645:                  {
4646:                      CurrControlPIRes=0;
006440  B82260     MUL.UU W4, #0, W4
006442  89F424     MOV W4, CurrControlPIRes
006444  89F435     MOV W5, 0x3E86
4647:                      if (KiCurr!=0)
006446  81F444     MOV KiCurr, W4
006448  81F455     MOV 0x3E8A, W5
00644A  B81160     MUL.UU W2, #0, W2
00644C  BE0004     MOV.D W4, W0
00644E  022586     CALL ___nesf2
006450  000000     NOP
006452  780200     MOV W0, W4
006454  520FE0     SUB W4, #0x0, [W15]
006456  320011     BRA Z, 0x647A
4648:                          ECurr1Summ=CurrControlPIRes-(long int)EpCurr1;
006458  81F428     MOV CurrControlPIRes, W8
00645A  81F439     MOV 0x3E86, W9
00645C  81F584     MOV EpCurr1, W4
00645E  81F595     MOV 0x3EB2, W5
006460  BE0004     MOV.D W4, W0
006462  022504     CALL ___fixsfsi
006464  000000     NOP
006466  BE0200     MOV.D W0, W4
006468  540204     SUB W8, W4, W4
00646A  5C8285     SUBB W9, W5, W5
00646C  BE0004     MOV.D W4, W0
00646E  02257C     CALL ___floatsisf
006470  000000     NOP
006472  BE0200     MOV.D W0, W4
006474  89F564     MOV W4, ECurr1Summ
006476  89F575     MOV W5, 0x3EAE
006478  370003     BRA 0x6480
4649:                      else
4650:                          ECurr1Summ=0;
00647A  B82260     MUL.UU W4, #0, W4
00647C  89F564     MOV W4, ECurr1Summ
00647E  89F575     MOV W5, 0x3EAE
4651:                  }
4652:                  
4653:                  
4654:                  
4655:                  
4656:                  
4657:              
4658:                  PWM1_Mem=(int)CurrControlPIRes;
006480  81F424     MOV CurrControlPIRes, W4
006482  81F435     MOV 0x3E86, W5
006484  780204     MOV W4, W4
006486  8892C4     MOV W4, PWM1_Mem
4659:                      }
4660:                  //----------------
4661:                          
4662:                  
4663:                  
4664:              
4665:                      //PWM1_Mem=(int)EPID_Res;
4666:              
4667:              
4668:              
4669:                      if (!PWM_Minus)
006488  809605     MOV Flgs1, W5
00648A  280004     MOV #0x8000, W4
00648C  628204     AND W5, W4, W4
00648E  520FE0     SUB W4, #0x0, [W15]
006490  3A0077     BRA NZ, 0x6580
4670:                      {
4671:                          if (FlgPID)
006492  809615     MOV 0x12C2, W5
006494  200404     MOV #0x40, W4
006496  628204     AND W5, W4, W4
006498  520FE0     SUB W4, #0x0, [W15]
00649A  320019     BRA Z, 0x64CE
4672:                          {
4673:                              if (PWMTempPID>100)
00649C  81FEA6     MOV PWMTempPID, W6
00649E  81FEB7     MOV 0x3FD6, W7
0064A0  200644     MOV #0x64, W4
0064A2  200005     MOV #0x0, W5
0064A4  530F84     SUB W6, W4, [W15]
0064A6  5B8F85     SUBB W7, W5, [W15]
0064A8  34000F     BRA LE, 0x64C8
4674:                              {
4675:                                  if (PWM1Temp<(PWMTempPID-100))
0064AA  81FEA6     MOV PWMTempPID, W6
0064AC  81FEB7     MOV 0x3FD6, W7
0064AE  2FF9C4     MOV #0xFF9C, W4
0064B0  2FFFF5     MOV #0xFFFF, W5
0064B2  420306     ADD W4, W6, W6
0064B4  4A8387     ADDC W5, W7, W7
0064B6  821854     MOV PWM1Temp, W4
0064B8  821865     MOV 0x430C, W5
0064BA  530F84     SUB W6, W4, [W15]
0064BC  5B8F85     SUBB W7, W5, [W15]
0064BE  340007     BRA LE, 0x64CE
4676:                                      FlgPID=0;
0064C0  809614     MOV 0x12C2, W4
0064C2  A16004     BCLR W4, #6
0064C4  889614     MOV W4, 0x12C2
0064C6  370003     BRA 0x64CE
4677:                              }
4678:                              else
4679:                                      FlgPID=0;
0064C8  809614     MOV 0x12C2, W4
0064CA  A16004     BCLR W4, #6
0064CC  889614     MOV W4, 0x12C2
4680:                          }
4681:                          if ((PWM1Temp>(PWM1_Mem+80))&&(!SpeedControl)&&(!FlgPID))
0064CE  8092C4     MOV PWM1_Mem, W4
0064D0  B00504     ADD #0x50, W4
0064D2  B92361     MUL.SU W4, #1, W6
0064D4  821854     MOV PWM1Temp, W4
0064D6  821865     MOV 0x430C, W5
0064D8  530F84     SUB W6, W4, [W15]
0064DA  5B8F85     SUBB W7, W5, [W15]
0064DC  3D000C     BRA GE, 0x64F6
0064DE  809754     MOV StatFlgs1, W4
0064E0  620262     AND W4, #0x2, W4
0064E2  520FE0     SUB W4, #0x0, [W15]
0064E4  3A0008     BRA NZ, 0x64F6
0064E6  809615     MOV 0x12C2, W5
0064E8  200404     MOV #0x40, W4
0064EA  628204     AND W5, W4, W4
0064EC  520FE0     SUB W4, #0x0, [W15]
0064EE  3A0003     BRA NZ, 0x64F6
4682:                              PID_On=0;
0064F0  809654     MOV 0x12CA, W4
0064F2  A19004     BCLR W4, #9
0064F4  889654     MOV W4, 0x12CA
4683:              
4684:                          if (SpeedControlPIDOffCnt)
0064F6  8087C4     MOV SpeedControlPIDOffCnt, W4
0064F8  520FE0     SUB W4, #0x0, [W15]
0064FA  320003     BRA Z, 0x6502
4685:                              SpeedControlPIDOffCnt--;
0064FC  8087C4     MOV SpeedControlPIDOffCnt, W4
0064FE  E90204     DEC W4, W4
006500  8887C4     MOV W4, SpeedControlPIDOffCnt
4686:                          if (Spd1UST_Tmp>(Spd1UST+4)&&SpeedControlPID&&!FlgPID&&(!SpeedControlPIDOffCnt))
006502  817F74     MOV Spd1UST, W4
006504  817F85     MOV 0x2FF0, W5
006506  200002     MOV #0x0, W2
006508  240803     MOV #0x4080, W3
00650A  BE0004     MOV.D W4, W0
00650C  0222D2     CALL ___addsf3
00650E  000000     NOP
006510  BE0200     MOV.D W0, W4
006512  BE0304     MOV.D W4, W6
006514  817F94     MOV Spd1UST_Tmp, W4
006516  817FA5     MOV 0x2FF4, W5
006518  B3C018     MOV.B #0x1, W8
00651A  BE0104     MOV.D W4, W2
00651C  BE0006     MOV.D W6, W0
00651E  0224FC     CALL ___lesf2
006520  000000     NOP
006522  780200     MOV W0, W4
006524  520FE0     SUB W4, #0x0, [W15]
006526  350001     BRA LT, 0x652A
006528  EB4400     CLR.B W8
00652A  544FE0     SUB.B W8, #0x0, [W15]
00652C  320023     BRA Z, 0x6574
00652E  8095F5     MOV 0x12BE, W5
006530  210004     MOV #0x1000, W4
006532  628204     AND W5, W4, W4
006534  520FE0     SUB W4, #0x0, [W15]
006536  32001E     BRA Z, 0x6574
006538  809615     MOV 0x12C2, W5
00653A  200404     MOV #0x40, W4
00653C  628204     AND W5, W4, W4
00653E  520FE0     SUB W4, #0x0, [W15]
006540  3A0019     BRA NZ, 0x6574
006542  8087C4     MOV SpeedControlPIDOffCnt, W4
006544  520FE0     SUB W4, #0x0, [W15]
006546  3A0016     BRA NZ, 0x6574
4687:                          {
4688:                           SpeedControlPID=0;
006548  8095F4     MOV 0x12BE, W4
00654A  A1C004     BCLR W4, #12
00654C  8895F4     MOV W4, 0x12BE
4689:                           SoundNum=10;
00654E  2124B5     MOV #0x124B, W5
006550  B3C0A4     MOV.B #0xA, W4
006552  784A84     MOV.B W4, [W5]
4690:                              if (StrongModePID)
006554  809745     MOV StatFlgs, W5
006556  220004     MOV #0x2000, W4
006558  628204     AND W5, W4, W4
00655A  520FE0     SUB W4, #0x0, [W15]
00655C  32000B     BRA Z, 0x6574
4691:                                  StrongMode=PrevStrongMode;
00655E  809694     MOV 0x12D2, W4
006560  DE224A     LSR W4, #10, W4
006562  624261     AND.B W4, #0x1, W4
006564  FB8204     ZE W4, W4
006566  620261     AND W4, #0x1, W4
006568  DD224E     SL W4, #14, W4
00656A  8095F6     MOV 0x12BE, W6
00656C  2BFFF5     MOV #0xBFFF, W5
00656E  630285     AND W6, W5, W5
006570  728204     IOR W5, W4, W4
006572  8895F4     MOV W4, 0x12BE
4692:                          }
4693:                          
4694:                         // if (!Joystick)
4695:                      if (PWM1_Mem<0)
006574  8092C4     MOV PWM1_Mem, W4
006576  520FE0     SUB W4, #0x0, [W15]
006578  3D0039     BRA GE, 0x65EC
4696:                          PWM1_Mem=0;
00657A  EB0200     CLR W4
00657C  8892C4     MOV W4, PWM1_Mem
00657E  370036     BRA 0x65EC
4697:                      }
4698:                      else
4699:                      {
4700:                          if (FlgPID)
006580  809615     MOV 0x12C2, W5
006582  200404     MOV #0x40, W4
006584  628204     AND W5, W4, W4
006586  520FE0     SUB W4, #0x0, [W15]
006588  320018     BRA Z, 0x65BA
4701:                          {
4702:                              if (PWMTempPID<-100)
00658A  81FEA6     MOV PWMTempPID, W6
00658C  81FEB7     MOV 0x3FD6, W7
00658E  2FF9C4     MOV #0xFF9C, W4
006590  2FFFF5     MOV #0xFFFF, W5
006592  530F84     SUB W6, W4, [W15]
006594  5B8F85     SUBB W7, W5, [W15]
006596  3D000E     BRA GE, 0x65B4
4703:                              {
4704:                                  if (PWM1Temp>(PWMTempPID+100))
006598  81FEA4     MOV PWMTempPID, W4
00659A  81FEB5     MOV 0x3FD6, W5
00659C  BE0304     MOV.D W4, W6
00659E  B00646     ADD #0x64, W6
0065A0  B08007     ADDC #0x0, W7
0065A2  821854     MOV PWM1Temp, W4
0065A4  821865     MOV 0x430C, W5
0065A6  530F84     SUB W6, W4, [W15]
0065A8  5B8F85     SUBB W7, W5, [W15]
0065AA  3D0007     BRA GE, 0x65BA
4705:                                      FlgPID=0;
0065AC  809614     MOV 0x12C2, W4
0065AE  A16004     BCLR W4, #6
0065B0  889614     MOV W4, 0x12C2
0065B2  370003     BRA 0x65BA
4706:                              }
4707:                              else
4708:                                      FlgPID=0;
0065B4  809614     MOV 0x12C2, W4
0065B6  A16004     BCLR W4, #6
0065B8  889614     MOV W4, 0x12C2
4709:                          }
4710:              
4711:                          if ((PWM1Temp<(PWM1_Mem-50))&&(!SpeedControl)&&(!FlgPID))
0065BA  8092C4     MOV PWM1_Mem, W4
0065BC  B10324     SUB #0x32, W4
0065BE  B92361     MUL.SU W4, #1, W6
0065C0  821854     MOV PWM1Temp, W4
0065C2  821865     MOV 0x430C, W5
0065C4  530F84     SUB W6, W4, [W15]
0065C6  5B8F85     SUBB W7, W5, [W15]
0065C8  34000C     BRA LE, 0x65E2
0065CA  809754     MOV StatFlgs1, W4
0065CC  620262     AND W4, #0x2, W4
0065CE  520FE0     SUB W4, #0x0, [W15]
0065D0  3A0008     BRA NZ, 0x65E2
0065D2  809615     MOV 0x12C2, W5
0065D4  200404     MOV #0x40, W4
0065D6  628204     AND W5, W4, W4
0065D8  520FE0     SUB W4, #0x0, [W15]
0065DA  3A0003     BRA NZ, 0x65E2
4712:                              PID_On=0;
0065DC  809654     MOV 0x12CA, W4
0065DE  A19004     BCLR W4, #9
0065E0  889654     MOV W4, 0x12CA
4713:                         // if (!Joystick)
4714:                      if (PWM1_Mem>0)
0065E2  8092C4     MOV PWM1_Mem, W4
0065E4  520FE0     SUB W4, #0x0, [W15]
0065E6  340002     BRA LE, 0x65EC
4715:                          PWM1_Mem=0;
0065E8  EB0200     CLR W4
0065EA  8892C4     MOV W4, PWM1_Mem
4716:                      }
4717:              
4718:                          
4719:              
4720:                      PWM1Temp=PWM1_Mem;
0065EC  8092C4     MOV PWM1_Mem, W4
0065EE  DEA2CF     ASR W4, #15, W5
0065F0  8A1854     MOV W4, PWM1Temp
0065F2  8A1865     MOV W5, 0x430C
4721:                      }
4722:              
4723:                  }
4724:                      
4725:              //-------------  END  PID  ---------------------------
4726:                      
4727:                      if (!Monocycle)
0065F4  809745     MOV StatFlgs, W5
0065F6  280004     MOV #0x8000, W4
0065F8  628204     AND W5, W4, W4
0065FA  520FE0     SUB W4, #0x0, [W15]
0065FC  3A0072     BRA NZ, 0x66E2
4728:                      {
4729:                      if (!BreakPressed)
0065FE  809614     MOV 0x12C2, W4
006600  620261     AND W4, #0x1, W4
006602  520FE0     SUB W4, #0x0, [W15]
006604  3A004C     BRA NZ, 0x669E
4730:                      {
4731:                          
4732:                          //DisconnectMotor=0;
4733:                          if (!(DisconnectMotor||HvBreak))
006606  809685     MOV Flgs5, W5
006608  280004     MOV #0x8000, W4
00660A  628204     AND W5, W4, W4
00660C  520FE0     SUB W4, #0x0, [W15]
00660E  3A0043     BRA NZ, 0x6696
006610  8096A4     MOV Flgs6, W4
006612  620264     AND W4, #0x4, W4
006614  520FE0     SUB W4, #0x0, [W15]
006616  3A003F     BRA NZ, 0x6696
4734:                          {
4735:                      if ((PWM1Temp>20)||((PWM1Temp<-20)&&Joystick))
006618  821856     MOV PWM1Temp, W6
00661A  821867     MOV 0x430C, W7
00661C  200144     MOV #0x14, W4
00661E  200005     MOV #0x0, W5
006620  530F84     SUB W6, W4, [W15]
006622  5B8F85     SUBB W7, W5, [W15]
006624  3C000C     BRA GT, 0x663E
006626  821856     MOV PWM1Temp, W6
006628  821867     MOV 0x430C, W7
00662A  2FFEC4     MOV #0xFFEC, W4
00662C  2FFFF5     MOV #0xFFFF, W5
00662E  530F84     SUB W6, W4, [W15]
006630  5B8F85     SUBB W7, W5, [W15]
006632  3D001A     BRA GE, 0x6668
006634  809775     MOV StatFlgs3, W5
006636  200204     MOV #0x20, W4
006638  628204     AND W5, W4, W4
00663A  520FE0     SUB W4, #0x0, [W15]
00663C  320015     BRA Z, 0x6668
00668A  37002B     BRA 0x66E2
006692  000000     NOP
006694  370026     BRA 0x66E2
4736:                      {
4737:                      TmrActive=1;
00663E  809644     MOV Flgs3, W4
006640  A0A004     BSET W4, #10
006642  889644     MOV W4, Flgs3
4738:                        if (!(StartingMoveCnt&&CriticalError))
006644  8183E4     MOV StartingMoveCnt, W4
006646  520FE0     SUB W4, #0x0, [W15]
006648  320004     BRA Z, 0x6652
00664A  214074     MOV #0x1407, W4
00664C  784214     MOV.B [W4], W4
00664E  524FE0     SUB.B W4, #0x0, [W15]
006650  3A001D     BRA NZ, 0x668C
006666  370015     BRA 0x6692
00668C  000000     NOP
00668E  370001     BRA 0x6692
006690  000000     NOP
4739:                        {
4740:                            if (DS)
006652  8096B5     MOV 0x12D6, W5
006654  208004     MOV #0x800, W4
006656  628204     AND W5, W4, W4
006658  520FE0     SUB W4, #0x0, [W15]
00665A  32001A     BRA Z, 0x6690
4741:                            {
4742:                              DS=0;
00665C  8096B4     MOV 0x12D6, W4
00665E  A1B004     BCLR W4, #11
006660  8896B4     MOV W4, 0x12D6
4743:                              RdSensors();
006662  0270B6     CALL RdSensors
006664  000001     NOP
4744:                            }
4745:                        }
4746:                      }
4747:                      else
4748:                          {
4749:                          if ((!StrongMode)&&(!AutoNastroykaState))
006668  8095F5     MOV 0x12BE, W5
00666A  240004     MOV #0x4000, W4
00666C  628204     AND W5, W4, W4
00666E  520FE0     SUB W4, #0x0, [W15]
006670  3A0006     BRA NZ, 0x667E
006672  81BEF4     MOV AutoNastroykaState, W4
006674  520FE0     SUB W4, #0x0, [W15]
006676  3A0003     BRA NZ, 0x667E
4750:                          DS=1;
006678  8096B4     MOV 0x12D6, W4
00667A  A0B004     BSET W4, #11
00667C  8896B4     MOV W4, 0x12D6
4751:                          SoundTmr=0;
00667E  809654     MOV 0x12CA, W4
006680  A1E004     BCLR W4, #14
006682  889654     MOV W4, 0x12CA
4752:                          TimerCnt=0;
006684  B82260     MUL.UU W4, #0, W4
006686  89BA64     MOV W4, TimerCnt
006688  89BA75     MOV W5, 0x374E
4753:                          }
4754:                          }
4755:                          else
4756:                          {
4757:                          DS=1;
006696  8096B4     MOV 0x12D6, W4
006698  A0B004     BSET W4, #11
00669A  8896B4     MOV W4, 0x12D6
00669C  370022     BRA 0x66E2
4758:                          }
4759:                      }
4760:                      else
4761:                      {
4762:                      if ((PWM1Temp<-MAX_PWM+20)&&(_1stBreak))
00669E  8212F4     MOV MAX_PWM, W4
0066A0  120274     SUBR W4, #0x14, W4
0066A2  B92361     MUL.SU W4, #1, W6
0066A4  821854     MOV PWM1Temp, W4
0066A6  821865     MOV 0x430C, W5
0066A8  530F84     SUB W6, W4, [W15]
0066AA  5B8F85     SUBB W7, W5, [W15]
0066AC  340009     BRA LE, 0x66C0
0066AE  809665     MOV Flgs4, W5
0066B0  204004     MOV #0x400, W4
0066B2  628204     AND W5, W4, W4
0066B4  520FE0     SUB W4, #0x0, [W15]
0066B6  320004     BRA Z, 0x66C0
4763:                          DS=1;
0066B8  8096B4     MOV 0x12D6, W4
0066BA  A0B004     BSET W4, #11
0066BC  8896B4     MOV W4, 0x12D6
0066BE  370011     BRA 0x66E2
4764:                      else
4765:                      {
4766:                      if (!(StartingMoveCnt&&CriticalError))
0066C0  8183E4     MOV StartingMoveCnt, W4
0066C2  520FE0     SUB W4, #0x0, [W15]
0066C4  320004     BRA Z, 0x66CE
0066C6  214074     MOV #0x1407, W4
0066C8  784214     MOV.B [W4], W4
0066CA  524FE0     SUB.B W4, #0x0, [W15]
0066CC  3A000A     BRA NZ, 0x66E2
4767:                      {
4768:                            if (DS)
0066CE  8096B5     MOV 0x12D6, W5
0066D0  208004     MOV #0x800, W4
0066D2  628204     AND W5, W4, W4
0066D4  520FE0     SUB W4, #0x0, [W15]
0066D6  320005     BRA Z, 0x66E2
4769:                            {
4770:                              DS=0;
0066D8  8096B4     MOV 0x12D6, W4
0066DA  A1B004     BCLR W4, #11
0066DC  8896B4     MOV W4, 0x12D6
4771:                              RdSensors();
0066DE  0270B6     CALL RdSensors
0066E0  000001     NOP
4772:                            }
4773:                      }
4774:              
4775:                      }
4776:              
4777:                      }
4778:                  }
4779:              }
4780:                  
4781:              
4782:              //--------------   START  WHEELING ------------------------
4783:              
4784:              
4785:              
4786:                  if ((NoBalance)&&(Wheeling))
0066E2  8095E5     MOV Flgs, W5
0066E4  208004     MOV #0x800, W4
0066E6  628204     AND W5, W4, W4
0066E8  520FE0     SUB W4, #0x0, [W15]
0066EA  32006D     BRA Z, 0x67C6
0066EC  809665     MOV Flgs4, W5
0066EE  208004     MOV #0x800, W4
0066F0  628204     AND W5, W4, W4
0066F2  520FE0     SUB W4, #0x0, [W15]
0066F4  320068     BRA Z, 0x67C6
4787:                  {
4788:              if ((AlfaXRes>-YLimit)&&(AlfaXRes<YLimit)&&(AlfaYRes>(TiltZad-1))&&(AlfaYRes<(TiltZad+1)))
0066F6  818304     MOV YLimit, W4
0066F8  EA0204     NEG W4, W4
0066FA  DEA2CF     ASR W4, #15, W5
0066FC  BE0004     MOV.D W4, W0
0066FE  02257C     CALL ___floatsisf
006700  000000     NOP
006702  BE0300     MOV.D W0, W6
006704  8151E4     MOV AlfaXRes, W4
006706  8151F5     MOV 0x2A3E, W5
006708  B3C018     MOV.B #0x1, W8
00670A  BE0104     MOV.D W4, W2
00670C  BE0006     MOV.D W6, W0
00670E  0224FC     CALL ___lesf2
006710  000000     NOP
006712  780200     MOV W0, W4
006714  520FE0     SUB W4, #0x0, [W15]
006716  350001     BRA LT, 0x671A
006718  EB4400     CLR.B W8
00671A  544FE0     SUB.B W8, #0x0, [W15]
00671C  320054     BRA Z, 0x67C6
00671E  818304     MOV YLimit, W4
006720  DEA2CF     ASR W4, #15, W5
006722  BE0004     MOV.D W4, W0
006724  02257C     CALL ___floatsisf
006726  000000     NOP
006728  BE0300     MOV.D W0, W6
00672A  8151E4     MOV AlfaXRes, W4
00672C  8151F5     MOV 0x2A3E, W5
00672E  B3C018     MOV.B #0x1, W8
006730  BE0104     MOV.D W4, W2
006732  BE0006     MOV.D W6, W0
006734  022500     CALL ___gtsf2
006736  000000     NOP
006738  780200     MOV W0, W4
00673A  520FE0     SUB W4, #0x0, [W15]
00673C  3C0001     BRA GT, 0x6740
00673E  EB4400     CLR.B W8
006740  544FE0     SUB.B W8, #0x0, [W15]
006742  320041     BRA Z, 0x67C6
006744  8155D4     MOV TiltZad, W4
006746  8155E5     MOV 0x2ABC, W5
006748  200002     MOV #0x0, W2
00674A  23F803     MOV #0x3F80, W3
00674C  BE0004     MOV.D W4, W0
00674E  0222D0     CALL ___subsf3
006750  000000     NOP
006752  BE0200     MOV.D W0, W4
006754  BE0304     MOV.D W4, W6
006756  815204     MOV AlfaYRes, W4
006758  815215     MOV 0x2A42, W5
00675A  B3C018     MOV.B #0x1, W8
00675C  BE0104     MOV.D W4, W2
00675E  BE0006     MOV.D W6, W0
006760  0224FC     CALL ___lesf2
006762  000000     NOP
006764  780200     MOV W0, W4
006766  520FE0     SUB W4, #0x0, [W15]
006768  350001     BRA LT, 0x676C
00676A  EB4400     CLR.B W8
00676C  544FE0     SUB.B W8, #0x0, [W15]
00676E  32002B     BRA Z, 0x67C6
006770  8155D4     MOV TiltZad, W4
006772  8155E5     MOV 0x2ABC, W5
006774  200002     MOV #0x0, W2
006776  23F803     MOV #0x3F80, W3
006778  BE0004     MOV.D W4, W0
00677A  0222D2     CALL ___addsf3
00677C  000000     NOP
00677E  BE0200     MOV.D W0, W4
006780  BE0304     MOV.D W4, W6
006782  815204     MOV AlfaYRes, W4
006784  815215     MOV 0x2A42, W5
006786  B3C018     MOV.B #0x1, W8
006788  BE0104     MOV.D W4, W2
00678A  BE0006     MOV.D W6, W0
00678C  022500     CALL ___gtsf2
00678E  000000     NOP
006790  780200     MOV W0, W4
006792  520FE0     SUB W4, #0x0, [W15]
006794  3C0001     BRA GT, 0x6798
006796  EB4400     CLR.B W8
006798  544FE0     SUB.B W8, #0x0, [W15]
00679A  320015     BRA Z, 0x67C6
4789:              {
4790:                  NoBalance=0;
00679C  8095E4     MOV Flgs, W4
00679E  A1B004     BCLR W4, #11
0067A0  8895E4     MOV W4, Flgs
4791:                  SoundNum=1;
0067A2  2124B5     MOV #0x124B, W5
0067A4  B3C014     MOV.B #0x1, W4
0067A6  784A84     MOV.B W4, [W5]
4792:                  ESumm=((float)PWM1Temp)/Ki;
0067A8  821854     MOV PWM1Temp, W4
0067AA  821865     MOV 0x430C, W5
0067AC  BE0004     MOV.D W4, W0
0067AE  02257C     CALL ___floatsisf
0067B0  000000     NOP
0067B2  BE0300     MOV.D W0, W6
0067B4  809B04     MOV Ki, W4
0067B6  809B15     MOV 0x1362, W5
0067B8  BE0104     MOV.D W4, W2
0067BA  BE0006     MOV.D W6, W0
0067BC  02245A     CALL ___divsf3
0067BE  000000     NOP
0067C0  BE0200     MOV.D W0, W4
0067C2  889B84     MOV W4, ESumm
0067C4  889B95     MOV W5, 0x1372
4793:              }
4794:                  }
4795:                  if ((!NoBalance)&&(Wheeling))
0067C6  8095E5     MOV Flgs, W5
0067C8  208004     MOV #0x800, W4
0067CA  628204     AND W5, W4, W4
0067CC  520FE0     SUB W4, #0x0, [W15]
0067CE  3A00DD     BRA NZ, 0x698A
0067D0  809665     MOV Flgs4, W5
0067D2  208004     MOV #0x800, W4
0067D4  628204     AND W5, W4, W4
0067D6  520FE0     SUB W4, #0x0, [W15]
0067D8  3200D8     BRA Z, 0x698A
4796:                  {
4797:              
4798:              if ((AlfaXRes<-XLimit)||(AlfaXRes>XLimit)||(AlfaYRes<(TiltZad-YLimit))||(AlfaYRes>(TiltZad+YLimit)))
0067DA  8182F4     MOV XLimit, W4
0067DC  EA0204     NEG W4, W4
0067DE  DEA2CF     ASR W4, #15, W5
0067E0  BE0004     MOV.D W4, W0
0067E2  02257C     CALL ___floatsisf
0067E4  000000     NOP
0067E6  BE0300     MOV.D W0, W6
0067E8  8151E4     MOV AlfaXRes, W4
0067EA  8151F5     MOV 0x2A3E, W5
0067EC  B3C018     MOV.B #0x1, W8
0067EE  BE0104     MOV.D W4, W2
0067F0  BE0006     MOV.D W6, W0
0067F2  022500     CALL ___gtsf2
0067F4  000000     NOP
0067F6  780200     MOV W0, W4
0067F8  520FE0     SUB W4, #0x0, [W15]
0067FA  3C0001     BRA GT, 0x67FE
0067FC  EB4400     CLR.B W8
0067FE  544FE0     SUB.B W8, #0x0, [W15]
006800  3A0049     BRA NZ, 0x6894
006802  8182F4     MOV XLimit, W4
006804  DEA2CF     ASR W4, #15, W5
006806  BE0004     MOV.D W4, W0
006808  02257C     CALL ___floatsisf
00680A  000000     NOP
00680C  BE0300     MOV.D W0, W6
00680E  8151E4     MOV AlfaXRes, W4
006810  8151F5     MOV 0x2A3E, W5
006812  B3C018     MOV.B #0x1, W8
006814  BE0104     MOV.D W4, W2
006816  BE0006     MOV.D W6, W0
006818  0224FC     CALL ___lesf2
00681A  000000     NOP
00681C  780200     MOV W0, W4
00681E  520FE0     SUB W4, #0x0, [W15]
006820  350001     BRA LT, 0x6824
006822  EB4400     CLR.B W8
006824  544FE0     SUB.B W8, #0x0, [W15]
006826  3A0036     BRA NZ, 0x6894
006828  8155D8     MOV TiltZad, W8
00682A  8155E9     MOV 0x2ABC, W9
00682C  818304     MOV YLimit, W4
00682E  DEA2CF     ASR W4, #15, W5
006830  BE0004     MOV.D W4, W0
006832  02257C     CALL ___floatsisf
006834  000000     NOP
006836  BE0200     MOV.D W0, W4
006838  BE0104     MOV.D W4, W2
00683A  BE0008     MOV.D W8, W0
00683C  0222D0     CALL ___subsf3
00683E  000000     NOP
006840  BE0200     MOV.D W0, W4
006842  BE0304     MOV.D W4, W6
006844  815204     MOV AlfaYRes, W4
006846  815215     MOV 0x2A42, W5
006848  B3C018     MOV.B #0x1, W8
00684A  BE0104     MOV.D W4, W2
00684C  BE0006     MOV.D W6, W0
00684E  022500     CALL ___gtsf2
006850  000000     NOP
006852  780200     MOV W0, W4
006854  520FE0     SUB W4, #0x0, [W15]
006856  3C0001     BRA GT, 0x685A
006858  EB4400     CLR.B W8
00685A  544FE0     SUB.B W8, #0x0, [W15]
00685C  3A001B     BRA NZ, 0x6894
00685E  818304     MOV YLimit, W4
006860  DEA2CF     ASR W4, #15, W5
006862  BE0004     MOV.D W4, W0
006864  02257C     CALL ___floatsisf
006866  000000     NOP
006868  BE0300     MOV.D W0, W6
00686A  8155D4     MOV TiltZad, W4
00686C  8155E5     MOV 0x2ABC, W5
00686E  BE0104     MOV.D W4, W2
006870  BE0006     MOV.D W6, W0
006872  0222D2     CALL ___addsf3
006874  000000     NOP
006876  BE0200     MOV.D W0, W4
006878  BE0304     MOV.D W4, W6
00687A  815204     MOV AlfaYRes, W4
00687C  815215     MOV 0x2A42, W5
00687E  B3C018     MOV.B #0x1, W8
006880  BE0104     MOV.D W4, W2
006882  BE0006     MOV.D W6, W0
006884  0224FC     CALL ___lesf2
006886  000000     NOP
006888  780200     MOV W0, W4
00688A  520FE0     SUB W4, #0x0, [W15]
00688C  350001     BRA LT, 0x6890
00688E  EB4400     CLR.B W8
006890  544FE0     SUB.B W8, #0x0, [W15]
006892  320009     BRA Z, 0x68A6
4799:              {
4800:                                  SoundNum=10;
006894  2124B5     MOV #0x124B, W5
006896  B3C0A4     MOV.B #0xA, W4
006898  784A84     MOV.B W4, [W5]
4801:                                  StrongMode=0;
00689A  8095F4     MOV 0x12BE, W4
00689C  A1E004     BCLR W4, #14
00689E  8895F4     MOV W4, 0x12BE
4802:                                  Wheeling=0;
0068A0  809664     MOV Flgs4, W4
0068A2  A1B004     BCLR W4, #11
0068A4  889664     MOV W4, Flgs4
4803:              
4804:              }
4805:              
4806:              
4807:                      if (DirBalance)
0068A6  809754     MOV StatFlgs1, W4
0068A8  620264     AND W4, #0x4, W4
0068AA  520FE0     SUB W4, #0x0, [W15]
0068AC  32000C     BRA Z, 0x68C6
4808:                      E=TiltZad-AlfaYRes;
0068AE  8155D6     MOV TiltZad, W6
0068B0  8155E7     MOV 0x2ABC, W7
0068B2  815204     MOV AlfaYRes, W4
0068B4  815215     MOV 0x2A42, W5
0068B6  BE0104     MOV.D W4, W2
0068B8  BE0006     MOV.D W6, W0
0068BA  0222D0     CALL ___subsf3
0068BC  000000     NOP
0068BE  BE0200     MOV.D W0, W4
0068C0  889BA4     MOV W4, E
0068C2  889BB5     MOV W5, 0x1376
0068C4  37000B     BRA 0x68DC
4809:                      else
4810:                      E=-TiltZad+AlfaYRes;
0068C6  815206     MOV AlfaYRes, W6
0068C8  815217     MOV 0x2A42, W7
0068CA  8155D4     MOV TiltZad, W4
0068CC  8155E5     MOV 0x2ABC, W5
0068CE  BE0104     MOV.D W4, W2
0068D0  BE0006     MOV.D W6, W0
0068D2  0222D0     CALL ___subsf3
0068D4  000000     NOP
0068D6  BE0200     MOV.D W0, W4
0068D8  889BA4     MOV W4, E
0068DA  889BB5     MOV W5, 0x1376
4811:              
4812:              
4813:                      Ep=E*Kp;
0068DC  809BA6     MOV E, W6
0068DE  809BB7     MOV 0x1376, W7
0068E0  809AE4     MOV Kp, W4
0068E2  809AF5     MOV 0x135E, W5
0068E4  BE0104     MOV.D W4, W2
0068E6  BE0006     MOV.D W6, W0
0068E8  022630     CALL ___mulsf3
0068EA  000000     NOP
0068EC  BE0200     MOV.D W0, W4
0068EE  889A84     MOV W4, Ep
0068F0  889A95     MOV W5, 0x1352
4814:              
4815:                      ESumm=ESumm+E;
0068F2  809B86     MOV ESumm, W6
0068F4  809B97     MOV 0x1372, W7
0068F6  809BA4     MOV E, W4
0068F8  809BB5     MOV 0x1376, W5
0068FA  BE0104     MOV.D W4, W2
0068FC  BE0006     MOV.D W6, W0
0068FE  0222D2     CALL ___addsf3
006900  000000     NOP
006902  BE0200     MOV.D W0, W4
006904  889B84     MOV W4, ESumm
006906  889B95     MOV W5, 0x1372
4816:              
4817:                      if (ESumm>1000000)
006908  809B84     MOV ESumm, W4
00690A  809B95     MOV 0x1372, W5
00690C  B3C018     MOV.B #0x1, W8
00690E  224002     MOV #0x2400, W2
006910  249743     MOV #0x4974, W3
006912  BE0004     MOV.D W4, W0
006914  022500     CALL ___gtsf2
006916  000000     NOP
006918  780200     MOV W0, W4
00691A  520FE0     SUB W4, #0x0, [W15]
00691C  3C0001     BRA GT, 0x6920
00691E  EB4400     CLR.B W8
006920  544FE0     SUB.B W8, #0x0, [W15]
006922  320004     BRA Z, 0x692C
4818:                          ESumm=1000000;
006924  224004     MOV #0x2400, W4
006926  249745     MOV #0x4974, W5
006928  889B84     MOV W4, ESumm
00692A  889B95     MOV W5, 0x1372
4819:                      if (ESumm<-1000000)
00692C  809B84     MOV ESumm, W4
00692E  809B95     MOV 0x1372, W5
006930  B3C018     MOV.B #0x1, W8
006932  224002     MOV #0x2400, W2
006934  2C9743     MOV #0xC974, W3
006936  BE0004     MOV.D W4, W0
006938  0224FC     CALL ___lesf2
00693A  000000     NOP
00693C  780200     MOV W0, W4
00693E  520FE0     SUB W4, #0x0, [W15]
006940  350001     BRA LT, 0x6944
006942  EB4400     CLR.B W8
006944  544FE0     SUB.B W8, #0x0, [W15]
006946  320004     BRA Z, 0x6950
4820:                          ESumm=-1000000;
006948  224004     MOV #0x2400, W4
00694A  2C9745     MOV #0xC974, W5
00694C  889B84     MOV W4, ESumm
00694E  889B95     MOV W5, 0x1372
4821:              
4822:              	Ei=ESumm*Ki;
006950  809B86     MOV ESumm, W6
006952  809B97     MOV 0x1372, W7
006954  809B04     MOV Ki, W4
006956  809B15     MOV 0x1362, W5
006958  BE0104     MOV.D W4, W2
00695A  BE0006     MOV.D W6, W0
00695C  022630     CALL ___mulsf3
00695E  000000     NOP
006960  BE0200     MOV.D W0, W4
006962  889AC4     MOV W4, Ei
006964  889AD5     MOV W5, 0x135A
4823:                      PWM1Temp=(int)Ep+(int)Ei;
006966  809A84     MOV Ep, W4
006968  809A95     MOV 0x1352, W5
00696A  BE0004     MOV.D W4, W0
00696C  022504     CALL ___fixsfsi
00696E  000000     NOP
006970  BE0200     MOV.D W0, W4
006972  780404     MOV W4, W8
006974  809AC4     MOV Ei, W4
006976  809AD5     MOV 0x135A, W5
006978  BE0004     MOV.D W4, W0
00697A  022504     CALL ___fixsfsi
00697C  000000     NOP
00697E  BE0200     MOV.D W0, W4
006980  780204     MOV W4, W4
006982  440204     ADD W8, W4, W4
006984  DEA2CF     ASR W4, #15, W5
006986  8A1854     MOV W4, PWM1Temp
006988  8A1865     MOV W5, 0x430C
4824:              
4825:                  }
4826:              
4827:              
4828:              //--------------   END  WHEELING ------------------------
4829:              
4830:              //--------------   START  MONOCYCLE ------------------------
4831:              
4832:                  if (!StartingMoveCnt)
00698A  8183E4     MOV StartingMoveCnt, W4
00698C  520FE0     SUB W4, #0x0, [W15]
00698E  3A03FC     BRA NZ, 0x7188
4833:                  {
4834:                      if (Monocycle)
006990  809745     MOV StatFlgs, W5
006992  280004     MOV #0x8000, W4
006994  628204     AND W5, W4, W4
006996  520FE0     SUB W4, #0x0, [W15]
006998  3203F7     BRA Z, 0x7188
4835:                      {
4836:                          if (TiltZadAdd<TiltZadAddMustBe)
00699A  8155F6     MOV TiltZadAdd, W6
00699C  815607     MOV 0x2AC0, W7
00699E  815654     MOV TiltZadAddMustBe, W4
0069A0  815665     MOV 0x2ACC, W5
0069A2  B3C018     MOV.B #0x1, W8
0069A4  BE0104     MOV.D W4, W2
0069A6  BE0006     MOV.D W6, W0
0069A8  0224FC     CALL ___lesf2
0069AA  000000     NOP
0069AC  780200     MOV W0, W4
0069AE  520FE0     SUB W4, #0x0, [W15]
0069B0  350001     BRA LT, 0x69B4
0069B2  EB4400     CLR.B W8
0069B4  544FE0     SUB.B W8, #0x0, [W15]
0069B6  32000A     BRA Z, 0x69CC
4837:                          TiltZadAdd=TiltZadAdd+0.02;
0069B8  8155F4     MOV TiltZadAdd, W4
0069BA  815605     MOV 0x2AC0, W5
0069BC  2D70A2     MOV #0xD70A, W2
0069BE  23CA33     MOV #0x3CA3, W3
0069C0  BE0004     MOV.D W4, W0
0069C2  0222D2     CALL ___addsf3
0069C4  000000     NOP
0069C6  BE0200     MOV.D W0, W4
0069C8  8955F4     MOV W4, TiltZadAdd
0069CA  895605     MOV W5, 0x2AC0
4838:                          if (TiltZadAdd>TiltZadAddMustBe)
0069CC  8155F6     MOV TiltZadAdd, W6
0069CE  815607     MOV 0x2AC0, W7
0069D0  815654     MOV TiltZadAddMustBe, W4
0069D2  815665     MOV 0x2ACC, W5
0069D4  B3C018     MOV.B #0x1, W8
0069D6  BE0104     MOV.D W4, W2
0069D8  BE0006     MOV.D W6, W0
0069DA  022500     CALL ___gtsf2
0069DC  000000     NOP
0069DE  780200     MOV W0, W4
0069E0  520FE0     SUB W4, #0x0, [W15]
0069E2  3C0001     BRA GT, 0x69E6
0069E4  EB4400     CLR.B W8
0069E6  544FE0     SUB.B W8, #0x0, [W15]
0069E8  32000A     BRA Z, 0x69FE
4839:                          TiltZadAdd=TiltZadAdd-0.02;
0069EA  8155F4     MOV TiltZadAdd, W4
0069EC  815605     MOV 0x2AC0, W5
0069EE  2D70A2     MOV #0xD70A, W2
0069F0  23CA33     MOV #0x3CA3, W3
0069F2  BE0004     MOV.D W4, W0
0069F4  0222D0     CALL ___subsf3
0069F6  000000     NOP
0069F8  BE0200     MOV.D W0, W4
0069FA  8955F4     MOV W4, TiltZadAdd
0069FC  895605     MOV W5, 0x2AC0
4840:                              
4841:                          if (TiltZadAdd>0)
0069FE  8155F4     MOV TiltZadAdd, W4
006A00  815605     MOV 0x2AC0, W5
006A02  B3C018     MOV.B #0x1, W8
006A04  B81160     MUL.UU W2, #0, W2
006A06  BE0004     MOV.D W4, W0
006A08  022500     CALL ___gtsf2
006A0A  000000     NOP
006A0C  780200     MOV W0, W4
006A0E  520FE0     SUB W4, #0x0, [W15]
006A10  3C0001     BRA GT, 0x6A14
006A12  EB4400     CLR.B W8
006A14  544FE0     SUB.B W8, #0x0, [W15]
006A16  320020     BRA Z, 0x6A58
4842:                          {
4843:                              if (TiltZadAdd>MaxAngleStopBreak)
006A18  236FE4     MOV #0x36FE, W4
006A1A  784214     MOV.B [W4], W4
006A1C  FB8204     ZE W4, W4
006A1E  DEA2CF     ASR W4, #15, W5
006A20  BE0004     MOV.D W4, W0
006A22  02257C     CALL ___floatsisf
006A24  000000     NOP
006A26  BE0300     MOV.D W0, W6
006A28  8155F4     MOV TiltZadAdd, W4
006A2A  815605     MOV 0x2AC0, W5
006A2C  B3C018     MOV.B #0x1, W8
006A2E  BE0104     MOV.D W4, W2
006A30  BE0006     MOV.D W6, W0
006A32  0224FC     CALL ___lesf2
006A34  000000     NOP
006A36  780200     MOV W0, W4
006A38  520FE0     SUB W4, #0x0, [W15]
006A3A  350001     BRA LT, 0x6A3E
006A3C  EB4400     CLR.B W8
006A3E  544FE0     SUB.B W8, #0x0, [W15]
006A40  32002C     BRA Z, 0x6A9A
4844:                                  TiltZadAdd=MaxAngleStopBreak;
006A42  236FE4     MOV #0x36FE, W4
006A44  784214     MOV.B [W4], W4
006A46  FB8204     ZE W4, W4
006A48  200005     MOV #0x0, W5
006A4A  BE0004     MOV.D W4, W0
006A4C  022582     CALL ___floatunsisf
006A4E  000000     NOP
006A50  BE0200     MOV.D W0, W4
006A52  8955F4     MOV W4, TiltZadAdd
006A54  895605     MOV W5, 0x2AC0
006A56  370021     BRA 0x6A9A
4845:                          }
4846:                          else
4847:                          {
4848:                              if (TiltZadAdd<-MaxAngleStopBreak)
006A58  236FE4     MOV #0x36FE, W4
006A5A  784214     MOV.B [W4], W4
006A5C  FB8204     ZE W4, W4
006A5E  EA0204     NEG W4, W4
006A60  DEA2CF     ASR W4, #15, W5
006A62  BE0004     MOV.D W4, W0
006A64  02257C     CALL ___floatsisf
006A66  000000     NOP
006A68  BE0300     MOV.D W0, W6
006A6A  8155F4     MOV TiltZadAdd, W4
006A6C  815605     MOV 0x2AC0, W5
006A6E  B3C018     MOV.B #0x1, W8
006A70  BE0104     MOV.D W4, W2
006A72  BE0006     MOV.D W6, W0
006A74  022500     CALL ___gtsf2
006A76  000000     NOP
006A78  780200     MOV W0, W4
006A7A  520FE0     SUB W4, #0x0, [W15]
006A7C  3C0001     BRA GT, 0x6A80
006A7E  EB4400     CLR.B W8
006A80  544FE0     SUB.B W8, #0x0, [W15]
006A82  32000B     BRA Z, 0x6A9A
4849:                                  TiltZadAdd=-MaxAngleStopBreak;
006A84  236FE4     MOV #0x36FE, W4
006A86  784214     MOV.B [W4], W4
006A88  FB8204     ZE W4, W4
006A8A  EA0204     NEG W4, W4
006A8C  DEA2CF     ASR W4, #15, W5
006A8E  BE0004     MOV.D W4, W0
006A90  02257C     CALL ___floatsisf
006A92  000000     NOP
006A94  BE0200     MOV.D W0, W4
006A96  8955F4     MOV W4, TiltZadAdd
006A98  895605     MOV W5, 0x2AC0
4850:                          }
4851:                          
4852:                              
4853:              //            StrongMode=1;
4854:                          
4855:                          if (Spd1ResPlus>Spd1KpLevel)
006A9A  817F45     MOV Spd1ResPlus, W5
006A9C  8213A4     MOV Spd1KpLevel, W4
006A9E  528F84     SUB W5, W4, [W15]
006AA0  340016     BRA LE, 0x6ACE
4856:                          {
4857:                              KpAddSpd=Spd1ResPlus-Spd1KpLevel;
006AA2  817F45     MOV Spd1ResPlus, W5
006AA4  8213A4     MOV Spd1KpLevel, W4
006AA6  528204     SUB W5, W4, W4
006AA8  DEA2CF     ASR W4, #15, W5
006AAA  BE0004     MOV.D W4, W0
006AAC  02257C     CALL ___floatsisf
006AAE  000000     NOP
006AB0  BE0200     MOV.D W0, W4
006AB2  889864     MOV W4, KpAddSpd
006AB4  889875     MOV W5, 0x130E
4858:                              KpAddSpd=KpAddSpd*KpKpSpd;
006AB6  809866     MOV KpAddSpd, W6
006AB8  809877     MOV 0x130E, W7
006ABA  809884     MOV KpKpSpd, W4
006ABC  809895     MOV 0x1312, W5
006ABE  BE0104     MOV.D W4, W2
006AC0  BE0006     MOV.D W6, W0
006AC2  022630     CALL ___mulsf3
006AC4  000000     NOP
006AC6  BE0200     MOV.D W0, W4
006AC8  889864     MOV W4, KpAddSpd
006ACA  889875     MOV W5, 0x130E
006ACC  370003     BRA 0x6AD4
4859:                          }
4860:                          else
4861:                              KpAddSpd=0;
006ACE  B82260     MUL.UU W4, #0, W4
006AD0  889864     MOV W4, KpAddSpd
006AD2  889875     MOV W5, 0x130E
4862:                          KpMustBe=KpWheelingMem+KpAddSpd;
006AD4  809D46     MOV KpWheelingMem, W6
006AD6  809D57     MOV 0x13AA, W7
006AD8  809864     MOV KpAddSpd, W4
006ADA  809875     MOV 0x130E, W5
006ADC  BE0104     MOV.D W4, W2
006ADE  BE0006     MOV.D W6, W0
006AE0  0222D2     CALL ___addsf3
006AE2  000000     NOP
006AE4  BE0200     MOV.D W0, W4
006AE6  889BC4     MOV W4, KpMustBe
006AE8  889BD5     MOV W5, 0x137A
4863:                          if (KpMustBe>KpMax)
006AEA  809BC6     MOV KpMustBe, W6
006AEC  809BD7     MOV 0x137A, W7
006AEE  809D24     MOV KpMax, W4
006AF0  809D35     MOV 0x13A6, W5
006AF2  B3C018     MOV.B #0x1, W8
006AF4  BE0104     MOV.D W4, W2
006AF6  BE0006     MOV.D W6, W0
006AF8  022500     CALL ___gtsf2
006AFA  000000     NOP
006AFC  780200     MOV W0, W4
006AFE  520FE0     SUB W4, #0x0, [W15]
006B00  3C0001     BRA GT, 0x6B04
006B02  EB4400     CLR.B W8
006B04  544FE0     SUB.B W8, #0x0, [W15]
006B06  320004     BRA Z, 0x6B10
4864:                              KpMustBe=KpMax;
006B08  809D24     MOV KpMax, W4
006B0A  809D35     MOV 0x13A6, W5
006B0C  889BC4     MOV W4, KpMustBe
006B0E  889BD5     MOV W5, 0x137A
4865:              
4866:                          if (LightsTudaSuda)
006B10  809765     MOV StatFlgs2, W5
006B12  200404     MOV #0x40, W4
006B14  628204     AND W5, W4, W4
006B16  520FE0     SUB W4, #0x0, [W15]
006B18  320079     BRA Z, 0x6C0C
4867:                          {
4868:                             if (LightsStopMonoDir)
006B1A  809765     MOV StatFlgs2, W5
006B1C  200804     MOV #0x80, W4
006B1E  628204     AND W5, W4, W4
006B20  520FE0     SUB W4, #0x0, [W15]
006B22  320029     BRA Z, 0x6B76
4869:                             {
4870:                          if (AlfaYRes>0.5)
006B24  815204     MOV AlfaYRes, W4
006B26  815215     MOV 0x2A42, W5
006B28  B3C018     MOV.B #0x1, W8
006B2A  200002     MOV #0x0, W2
006B2C  23F003     MOV #0x3F00, W3
006B2E  BE0004     MOV.D W4, W0
006B30  022500     CALL ___gtsf2
006B32  000000     NOP
006B34  780200     MOV W0, W4
006B36  520FE0     SUB W4, #0x0, [W15]
006B38  3C0001     BRA GT, 0x6B3C
006B3A  EB4400     CLR.B W8
006B3C  544FE0     SUB.B W8, #0x0, [W15]
006B3E  320006     BRA Z, 0x6B4C
4871:                          {
4872:              #if !defined VECTOR
4873:                              Right=1;
4874:                              Left=0;
4875:              #else
4876:                              Right=0;                
006B40  8096C4     MOV Flgs7, W4
006B42  A1E004     BCLR W4, #14
006B44  8896C4     MOV W4, Flgs7
4877:                              Left=1;
006B46  8096C4     MOV Flgs7, W4
006B48  A0F004     BSET W4, #15
006B4A  8896C4     MOV W4, Flgs7
4878:              #endif
4879:                              
4880:                          }
4881:                          if (AlfaYRes<-0.5)
006B4C  815204     MOV AlfaYRes, W4
006B4E  815215     MOV 0x2A42, W5
006B50  B3C018     MOV.B #0x1, W8
006B52  200002     MOV #0x0, W2
006B54  2BF003     MOV #0xBF00, W3
006B56  BE0004     MOV.D W4, W0
006B58  0224FC     CALL ___lesf2
006B5A  000000     NOP
006B5C  780200     MOV W0, W4
006B5E  520FE0     SUB W4, #0x0, [W15]
006B60  350001     BRA LT, 0x6B64
006B62  EB4400     CLR.B W8
006B64  544FE0     SUB.B W8, #0x0, [W15]
006B66  32002F     BRA Z, 0x6BC6
4882:                          {
4883:              #if !defined VECTOR
4884:                              Right=0;
4885:                              Left=1;
4886:              #else
4887:                              Right=1;
006B68  8096C4     MOV Flgs7, W4
006B6A  A0E004     BSET W4, #14
006B6C  8896C4     MOV W4, Flgs7
4888:                              Left=0;
006B6E  8096C4     MOV Flgs7, W4
006B70  A1F004     BCLR W4, #15
006B72  8896C4     MOV W4, Flgs7
006B74  370028     BRA 0x6BC6
4889:              #endif
4890:                          }
4891:                             }
4892:                             else
4893:                             {
4894:                          if (AlfaYRes<0.5)
006B76  815204     MOV AlfaYRes, W4
006B78  815215     MOV 0x2A42, W5
006B7A  B3C018     MOV.B #0x1, W8
006B7C  200002     MOV #0x0, W2
006B7E  23F003     MOV #0x3F00, W3
006B80  BE0004     MOV.D W4, W0
006B82  0224FC     CALL ___lesf2
006B84  000000     NOP
006B86  780200     MOV W0, W4
006B88  520FE0     SUB W4, #0x0, [W15]
006B8A  350001     BRA LT, 0x6B8E
006B8C  EB4400     CLR.B W8
006B8E  544FE0     SUB.B W8, #0x0, [W15]
006B90  320006     BRA Z, 0x6B9E
4895:                          {
4896:              #if !defined VECTOR
4897:                              Right=1;
4898:                              Left=0;
4899:              #else
4900:                              Right=0;
006B92  8096C4     MOV Flgs7, W4
006B94  A1E004     BCLR W4, #14
006B96  8896C4     MOV W4, Flgs7
4901:                              Left=1;
006B98  8096C4     MOV Flgs7, W4
006B9A  A0F004     BSET W4, #15
006B9C  8896C4     MOV W4, Flgs7
4902:              #endif
4903:                          }
4904:                          if (AlfaYRes>-0.5)
006B9E  815204     MOV AlfaYRes, W4
006BA0  815215     MOV 0x2A42, W5
006BA2  B3C018     MOV.B #0x1, W8
006BA4  200002     MOV #0x0, W2
006BA6  2BF003     MOV #0xBF00, W3
006BA8  BE0004     MOV.D W4, W0
006BAA  022500     CALL ___gtsf2
006BAC  000000     NOP
006BAE  780200     MOV W0, W4
006BB0  520FE0     SUB W4, #0x0, [W15]
006BB2  3C0001     BRA GT, 0x6BB6
006BB4  EB4400     CLR.B W8
006BB6  544FE0     SUB.B W8, #0x0, [W15]
006BB8  320006     BRA Z, 0x6BC6
4905:                          {
4906:              #if !defined VECTOR
4907:                              Right=0;
4908:                              Left=1;
4909:              #else
4910:                              Right=1;
006BBA  8096C4     MOV Flgs7, W4
006BBC  A0E004     BSET W4, #14
006BBE  8896C4     MOV W4, Flgs7
4911:                              Left=0;
006BC0  8096C4     MOV Flgs7, W4
006BC2  A1F004     BCLR W4, #15
006BC4  8896C4     MOV W4, Flgs7
4912:              #endif
4913:                          }
4914:                             }
4915:                          if ((AlfaYRes>-0.5)&&(AlfaYRes<0.5))
006BC6  815204     MOV AlfaYRes, W4
006BC8  815215     MOV 0x2A42, W5
006BCA  B3C018     MOV.B #0x1, W8
006BCC  200002     MOV #0x0, W2
006BCE  2BF003     MOV #0xBF00, W3
006BD0  BE0004     MOV.D W4, W0
006BD2  022500     CALL ___gtsf2
006BD4  000000     NOP
006BD6  780200     MOV W0, W4
006BD8  520FE0     SUB W4, #0x0, [W15]
006BDA  3C0001     BRA GT, 0x6BDE
006BDC  EB4400     CLR.B W8
006BDE  544FE0     SUB.B W8, #0x0, [W15]
006BE0  320062     BRA Z, 0x6CA6
006BE2  815204     MOV AlfaYRes, W4
006BE4  815215     MOV 0x2A42, W5
006BE6  B3C018     MOV.B #0x1, W8
006BE8  200002     MOV #0x0, W2
006BEA  23F003     MOV #0x3F00, W3
006BEC  BE0004     MOV.D W4, W0
006BEE  0224FC     CALL ___lesf2
006BF0  000000     NOP
006BF2  780200     MOV W0, W4
006BF4  520FE0     SUB W4, #0x0, [W15]
006BF6  350001     BRA LT, 0x6BFA
006BF8  EB4400     CLR.B W8
006BFA  544FE0     SUB.B W8, #0x0, [W15]
006BFC  320054     BRA Z, 0x6CA6
4916:                          {
4917:              #if !defined VECTOR
4918:                              Right=0;
4919:                              Left=0;
4920:              #else
4921:                              Right=1;
006BFE  8096C4     MOV Flgs7, W4
006C00  A0E004     BSET W4, #14
006C02  8896C4     MOV W4, Flgs7
4922:                              Left=1;
006C04  8096C4     MOV Flgs7, W4
006C06  A0F004     BSET W4, #15
006C08  8896C4     MOV W4, Flgs7
006C0A  37004D     BRA 0x6CA6
4923:              #endif
4924:                          }
4925:                              
4926:                          }
4927:                          else
4928:                          {
4929:                              if (LightsStopMonoDir)
006C0C  809765     MOV StatFlgs2, W5
006C0E  200804     MOV #0x80, W4
006C10  628204     AND W5, W4, W4
006C12  520FE0     SUB W4, #0x0, [W15]
006C14  320016     BRA Z, 0x6C42
4930:                              {
4931:                                  if (AlfaYRes>0.5)
006C16  815204     MOV AlfaYRes, W4
006C18  815215     MOV 0x2A42, W5
006C1A  B3C018     MOV.B #0x1, W8
006C1C  200002     MOV #0x0, W2
006C1E  23F003     MOV #0x3F00, W3
006C20  BE0004     MOV.D W4, W0
006C22  022500     CALL ___gtsf2
006C24  000000     NOP
006C26  780200     MOV W0, W4
006C28  520FE0     SUB W4, #0x0, [W15]
006C2A  3C0001     BRA GT, 0x6C2E
006C2C  EB4400     CLR.B W8
006C2E  544FE0     SUB.B W8, #0x0, [W15]
006C30  320004     BRA Z, 0x6C3A
4932:                                      StopLights=1;
006C32  809694     MOV 0x12D2, W4
006C34  A0E004     BSET W4, #14
006C36  889694     MOV W4, 0x12D2
006C38  370019     BRA 0x6C6C
4933:                                  else
4934:                                      StopLights=0;
006C3A  809694     MOV 0x12D2, W4
006C3C  A1E004     BCLR W4, #14
006C3E  889694     MOV W4, 0x12D2
006C40  370015     BRA 0x6C6C
4935:                              }
4936:                              else
4937:                              {
4938:                                  if (AlfaYRes<-0.5)
006C42  815204     MOV AlfaYRes, W4
006C44  815215     MOV 0x2A42, W5
006C46  B3C018     MOV.B #0x1, W8
006C48  200002     MOV #0x0, W2
006C4A  2BF003     MOV #0xBF00, W3
006C4C  BE0004     MOV.D W4, W0
006C4E  0224FC     CALL ___lesf2
006C50  000000     NOP
006C52  780200     MOV W0, W4
006C54  520FE0     SUB W4, #0x0, [W15]
006C56  350001     BRA LT, 0x6C5A
006C58  EB4400     CLR.B W8
006C5A  544FE0     SUB.B W8, #0x0, [W15]
006C5C  320004     BRA Z, 0x6C66
4939:                                      StopLights=1;
006C5E  809694     MOV 0x12D2, W4
006C60  A0E004     BSET W4, #14
006C62  889694     MOV W4, 0x12D2
006C64  370003     BRA 0x6C6C
4940:                                  else
4941:                                      StopLights=0;
006C66  809694     MOV 0x12D2, W4
006C68  A1E004     BCLR W4, #14
006C6A  889694     MOV W4, 0x12D2
4942:                              }
4943:                              if (GyroZFilter<-GyroZFlTurn)
006C6C  818314     MOV GyroZFlTurn, W4
006C6E  EA0204     NEG W4, W4
006C70  B92361     MUL.SU W4, #1, W6
006C72  809FD4     MOV GyroZFilter, W4
006C74  809FE5     MOV 0x13FC, W5
006C76  530F84     SUB W6, W4, [W15]
006C78  5B8F85     SUBB W7, W5, [W15]
006C7A  340004     BRA LE, 0x6C84
4944:                                  LeftTurn=1;
006C7C  809694     MOV 0x12D2, W4
006C7E  A0C004     BSET W4, #12
006C80  889694     MOV W4, 0x12D2
006C82  370003     BRA 0x6C8A
4945:                              else
4946:                                  LeftTurn=0;
006C84  809694     MOV 0x12D2, W4
006C86  A1C004     BCLR W4, #12
006C88  889694     MOV W4, 0x12D2
4947:                              if (GyroZFilter>GyroZFlTurn)
006C8A  818314     MOV GyroZFlTurn, W4
006C8C  B92361     MUL.SU W4, #1, W6
006C8E  809FD4     MOV GyroZFilter, W4
006C90  809FE5     MOV 0x13FC, W5
006C92  530F84     SUB W6, W4, [W15]
006C94  5B8F85     SUBB W7, W5, [W15]
006C96  3D0004     BRA GE, 0x6CA0
4948:                                  RightTurn=1;
006C98  809694     MOV 0x12D2, W4
006C9A  A0D004     BSET W4, #13
006C9C  889694     MOV W4, 0x12D2
006C9E  370003     BRA 0x6CA6
4949:                              else
4950:                                  RightTurn=0;
006CA0  809694     MOV 0x12D2, W4
006CA2  A1D004     BCLR W4, #13
006CA4  889694     MOV W4, 0x12D2
4951:                          }
4952:                          
4953:                          if (BreakPressedMonocycle)
006CA6  809695     MOV 0x12D2, W5
006CA8  208004     MOV #0x800, W4
006CAA  628204     AND W5, W4, W4
006CAC  520FE0     SUB W4, #0x0, [W15]
006CAE  32000E     BRA Z, 0x6CCC
4954:                          {
4955:                              if (!MonoStopDirection)
006CB0  809764     MOV StatFlgs2, W4
006CB2  620268     AND W4, #0x8, W4
006CB4  520FE0     SUB W4, #0x0, [W15]
006CB6  3A0005     BRA NZ, 0x6CC2
4956:                              TiltZadAddMustBe=30;
006CB8  200004     MOV #0x0, W4
006CBA  241F05     MOV #0x41F0, W5
006CBC  895654     MOV W4, TiltZadAddMustBe
006CBE  895665     MOV W5, 0x2ACC
006CC0  370008     BRA 0x6CD2
4957:                              else
4958:                              TiltZadAddMustBe=-30;
006CC2  200004     MOV #0x0, W4
006CC4  2C1F05     MOV #0xC1F0, W5
006CC6  895654     MOV W4, TiltZadAddMustBe
006CC8  895665     MOV W5, 0x2ACC
006CCA  370003     BRA 0x6CD2
4959:                                  
4960:                          }
4961:                          else
4962:                              TiltZadAddMustBe=0;
006CCC  B82260     MUL.UU W4, #0, W4
006CCE  895654     MOV W4, TiltZadAddMustBe
006CD0  895665     MOV W5, 0x2ACC
4963:                          
4964:                              
4965:                          if (NoBalance)
006CD2  8095E5     MOV Flgs, W5
006CD4  208004     MOV #0x800, W4
006CD6  628204     AND W5, W4, W4
006CD8  520FE0     SUB W4, #0x0, [W15]
006CDA  3200A1     BRA Z, 0x6E1E
4966:                          {
4967:                              TiltZadAddMustBe=0;
006CDC  B82260     MUL.UU W4, #0, W4
006CDE  895654     MOV W4, TiltZadAddMustBe
006CE0  895665     MOV W5, 0x2ACC
4968:                              KpMustBe=0;
006CE2  B82260     MUL.UU W4, #0, W4
006CE4  889BC4     MOV W4, KpMustBe
006CE6  889BD5     MOV W5, 0x137A
4969:                              PWM1Temp=0;
006CE8  B82260     MUL.UU W4, #0, W4
006CEA  8A1854     MOV W4, PWM1Temp
006CEC  8A1865     MOV W5, 0x430C
4970:                              EPrev=0;
006CEE  B82260     MUL.UU W4, #0, W4
006CF0  889C64     MOV W4, EPrev
006CF2  889C75     MOV W5, 0x138E
4971:                              if ((AlfaXRes>-YLimit)&&(AlfaXRes<YLimit)&&(AlfaYRes>(TiltZad-1))&&(AlfaYRes<(TiltZad+1))&&(!CriticalError))
006CF4  818304     MOV YLimit, W4
006CF6  EA0204     NEG W4, W4
006CF8  DEA2CF     ASR W4, #15, W5
006CFA  BE0004     MOV.D W4, W0
006CFC  02257C     CALL ___floatsisf
006CFE  000000     NOP
006D00  BE0300     MOV.D W0, W6
006D02  8151E4     MOV AlfaXRes, W4
006D04  8151F5     MOV 0x2A3E, W5
006D06  B3C018     MOV.B #0x1, W8
006D08  BE0104     MOV.D W4, W2
006D0A  BE0006     MOV.D W6, W0
006D0C  0224FC     CALL ___lesf2
006D0E  000000     NOP
006D10  780200     MOV W0, W4
006D12  520FE0     SUB W4, #0x0, [W15]
006D14  350001     BRA LT, 0x6D18
006D16  EB4400     CLR.B W8
006D18  544FE0     SUB.B W8, #0x0, [W15]
006D1A  320081     BRA Z, 0x6E1E
006D1C  818304     MOV YLimit, W4
006D1E  DEA2CF     ASR W4, #15, W5
006D20  BE0004     MOV.D W4, W0
006D22  02257C     CALL ___floatsisf
006D24  000000     NOP
006D26  BE0300     MOV.D W0, W6
006D28  8151E4     MOV AlfaXRes, W4
006D2A  8151F5     MOV 0x2A3E, W5
006D2C  B3C018     MOV.B #0x1, W8
006D2E  BE0104     MOV.D W4, W2
006D30  BE0006     MOV.D W6, W0
006D32  022500     CALL ___gtsf2
006D34  000000     NOP
006D36  780200     MOV W0, W4
006D38  520FE0     SUB W4, #0x0, [W15]
006D3A  3C0001     BRA GT, 0x6D3E
006D3C  EB4400     CLR.B W8
006D3E  544FE0     SUB.B W8, #0x0, [W15]
006D40  32006E     BRA Z, 0x6E1E
006D42  8155D4     MOV TiltZad, W4
006D44  8155E5     MOV 0x2ABC, W5
006D46  200002     MOV #0x0, W2
006D48  23F803     MOV #0x3F80, W3
006D4A  BE0004     MOV.D W4, W0
006D4C  0222D0     CALL ___subsf3
006D4E  000000     NOP
006D50  BE0200     MOV.D W0, W4
006D52  BE0304     MOV.D W4, W6
006D54  815204     MOV AlfaYRes, W4
006D56  815215     MOV 0x2A42, W5
006D58  B3C018     MOV.B #0x1, W8
006D5A  BE0104     MOV.D W4, W2
006D5C  BE0006     MOV.D W6, W0
006D5E  0224FC     CALL ___lesf2
006D60  000000     NOP
006D62  780200     MOV W0, W4
006D64  520FE0     SUB W4, #0x0, [W15]
006D66  350001     BRA LT, 0x6D6A
006D68  EB4400     CLR.B W8
006D6A  544FE0     SUB.B W8, #0x0, [W15]
006D6C  320058     BRA Z, 0x6E1E
006D6E  8155D4     MOV TiltZad, W4
006D70  8155E5     MOV 0x2ABC, W5
006D72  200002     MOV #0x0, W2
006D74  23F803     MOV #0x3F80, W3
006D76  BE0004     MOV.D W4, W0
006D78  0222D2     CALL ___addsf3
006D7A  000000     NOP
006D7C  BE0200     MOV.D W0, W4
006D7E  BE0304     MOV.D W4, W6
006D80  815204     MOV AlfaYRes, W4
006D82  815215     MOV 0x2A42, W5
006D84  B3C018     MOV.B #0x1, W8
006D86  BE0104     MOV.D W4, W2
006D88  BE0006     MOV.D W6, W0
006D8A  022500     CALL ___gtsf2
006D8C  000000     NOP
006D8E  780200     MOV W0, W4
006D90  520FE0     SUB W4, #0x0, [W15]
006D92  3C0001     BRA GT, 0x6D96
006D94  EB4400     CLR.B W8
006D96  544FE0     SUB.B W8, #0x0, [W15]
006D98  320042     BRA Z, 0x6E1E
006D9A  214074     MOV #0x1407, W4
006D9C  784214     MOV.B [W4], W4
006D9E  524FE0     SUB.B W4, #0x0, [W15]
006DA0  3A003E     BRA NZ, 0x6E1E
4972:                              {
4973:                              NoBalance=0;
006DA2  8095E4     MOV Flgs, W4
006DA4  A1B004     BCLR W4, #11
006DA6  8895E4     MOV W4, Flgs
4974:                              SoundNum=1;
006DA8  2124B5     MOV #0x124B, W5
006DAA  B3C014     MOV.B #0x1, W4
006DAC  784A84     MOV.B W4, [W5]
4975:                              if (StrongModeMem)
006DAE  809764     MOV StatFlgs2, W4
006DB0  620264     AND W4, #0x4, W4
006DB2  520FE0     SUB W4, #0x0, [W15]
006DB4  320003     BRA Z, 0x6DBC
4976:                                  StrongMode=1;
006DB6  8095F4     MOV 0x12BE, W4
006DB8  A0E004     BSET W4, #14
006DBA  8895F4     MOV W4, 0x12BE
4977:                              EPrevFl=1;
006DBC  8096D4     MOV 0x12DA, W4
006DBE  A05004     BSET W4, #5
006DC0  8896D4     MOV W4, 0x12DA
4978:                              if (!WheelingNew)
006DC2  8096D4     MOV 0x12DA, W4
006DC4  620268     AND W4, #0x8, W4
006DC6  520FE0     SUB W4, #0x0, [W15]
006DC8  3A0003     BRA NZ, 0x6DD0
4979:                              ESumm=0;
006DCA  B82260     MUL.UU W4, #0, W4
006DCC  889B84     MOV W4, ESumm
006DCE  889B95     MOV W5, 0x1372
4980:                                     
4981:                            if (DS)
006DD0  8096B5     MOV 0x12D6, W5
006DD2  208004     MOV #0x800, W4
006DD4  628204     AND W5, W4, W4
006DD6  520FE0     SUB W4, #0x0, [W15]
006DD8  320005     BRA Z, 0x6DE4
4982:                            {
4983:                              DS=0;
006DDA  8096B4     MOV 0x12D6, W4
006DDC  A1B004     BCLR W4, #11
006DDE  8896B4     MOV W4, 0x12D6
4984:                              RdSensors();
006DE0  0270B6     CALL RdSensors
006DE2  000001     NOP
4985:                            }
4986:                      
4987:              
4988:                              if (Sensorless)
006DE4  809755     MOV StatFlgs1, W5
006DE6  200204     MOV #0x20, W4
006DE8  628204     AND W5, W4, W4
006DEA  520FE0     SUB W4, #0x0, [W15]
006DEC  320018     BRA Z, 0x6E1E
4989:                              {
4990:                                  Sensorless=0;
006DEE  809754     MOV StatFlgs1, W4
006DF0  A15004     BCLR W4, #5
006DF2  889754     MOV W4, StatFlgs1
4991:                                  SensorlessNotBEMF=0;
006DF4  809654     MOV 0x12CA, W4
006DF6  A14004     BCLR W4, #4
006DF8  889654     MOV W4, 0x12CA
4992:                                  SensorlessStartNoHalls=0;
006DFA  8096B4     MOV 0x12D6, W4
006DFC  A1E004     BCLR W4, #14
006DFE  8896B4     MOV W4, 0x12D6
4993:                                  CurrUst=CurrUstWork;
006E00  81F4E4     MOV CurrUstWork, W4
006E02  89F494     MOV W4, CurrUst
4994:                                  CurrLimit=CurrLimitWork;
006E04  80C1A4     MOV CurrLimitWork, W4
006E06  88C194     MOV W4, CurrLimit
4995:                                  if (VectorMem)
006E08  809755     MOV StatFlgs1, W5
006E0A  204004     MOV #0x400, W4
006E0C  628204     AND W5, W4, W4
006E0E  520FE0     SUB W4, #0x0, [W15]
006E10  320002     BRA Z, 0x6E16
4996:                                      VectorInit();
006E12  076A82     RCALL VectorInit
006E14  370001     BRA 0x6E18
4997:                                  else
4998:                                      TrapeziumInit();
006E16  076B37     RCALL TrapeziumInit
4999:                                  ChangeCVR();
006E18  0745E8     RCALL ChangeCVR
5000:                                  RdSensors();
006E1A  0270B6     CALL RdSensors
006E1C  000001     NOP
5001:                              }
5002:                              }
5003:                          }
5004:                          if (!NoBalance)
006E1E  8095E5     MOV Flgs, W5
006E20  208004     MOV #0x800, W4
006E22  628204     AND W5, W4, W4
006E24  520FE0     SUB W4, #0x0, [W15]
006E26  3A01B0     BRA NZ, 0x7188
5005:                          {
5006:                              if ((AlfaXRes<-XLimit)||(AlfaXRes>XLimit)||(AlfaYRes<(TiltZad-YLimit))||(AlfaYRes>(TiltZad+YLimit)))
006E28  8182F4     MOV XLimit, W4
006E2A  EA0204     NEG W4, W4
006E2C  DEA2CF     ASR W4, #15, W5
006E2E  BE0004     MOV.D W4, W0
006E30  02257C     CALL ___floatsisf
006E32  000000     NOP
006E34  BE0300     MOV.D W0, W6
006E36  8151E4     MOV AlfaXRes, W4
006E38  8151F5     MOV 0x2A3E, W5
006E3A  B3C018     MOV.B #0x1, W8
006E3C  BE0104     MOV.D W4, W2
006E3E  BE0006     MOV.D W6, W0
006E40  022500     CALL ___gtsf2
006E42  000000     NOP
006E44  780200     MOV W0, W4
006E46  520FE0     SUB W4, #0x0, [W15]
006E48  3C0001     BRA GT, 0x6E4C
006E4A  EB4400     CLR.B W8
006E4C  544FE0     SUB.B W8, #0x0, [W15]
006E4E  3A0049     BRA NZ, 0x6EE2
006E50  8182F4     MOV XLimit, W4
006E52  DEA2CF     ASR W4, #15, W5
006E54  BE0004     MOV.D W4, W0
006E56  02257C     CALL ___floatsisf
006E58  000000     NOP
006E5A  BE0300     MOV.D W0, W6
006E5C  8151E4     MOV AlfaXRes, W4
006E5E  8151F5     MOV 0x2A3E, W5
006E60  B3C018     MOV.B #0x1, W8
006E62  BE0104     MOV.D W4, W2
006E64  BE0006     MOV.D W6, W0
006E66  0224FC     CALL ___lesf2
006E68  000000     NOP
006E6A  780200     MOV W0, W4
006E6C  520FE0     SUB W4, #0x0, [W15]
006E6E  350001     BRA LT, 0x6E72
006E70  EB4400     CLR.B W8
006E72  544FE0     SUB.B W8, #0x0, [W15]
006E74  3A0036     BRA NZ, 0x6EE2
006E76  8155D8     MOV TiltZad, W8
006E78  8155E9     MOV 0x2ABC, W9
006E7A  818304     MOV YLimit, W4
006E7C  DEA2CF     ASR W4, #15, W5
006E7E  BE0004     MOV.D W4, W0
006E80  02257C     CALL ___floatsisf
006E82  000000     NOP
006E84  BE0200     MOV.D W0, W4
006E86  BE0104     MOV.D W4, W2
006E88  BE0008     MOV.D W8, W0
006E8A  0222D0     CALL ___subsf3
006E8C  000000     NOP
006E8E  BE0200     MOV.D W0, W4
006E90  BE0304     MOV.D W4, W6
006E92  815204     MOV AlfaYRes, W4
006E94  815215     MOV 0x2A42, W5
006E96  B3C018     MOV.B #0x1, W8
006E98  BE0104     MOV.D W4, W2
006E9A  BE0006     MOV.D W6, W0
006E9C  022500     CALL ___gtsf2
006E9E  000000     NOP
006EA0  780200     MOV W0, W4
006EA2  520FE0     SUB W4, #0x0, [W15]
006EA4  3C0001     BRA GT, 0x6EA8
006EA6  EB4400     CLR.B W8
006EA8  544FE0     SUB.B W8, #0x0, [W15]
006EAA  3A001B     BRA NZ, 0x6EE2
006EAC  818304     MOV YLimit, W4
006EAE  DEA2CF     ASR W4, #15, W5
006EB0  BE0004     MOV.D W4, W0
006EB2  02257C     CALL ___floatsisf
006EB4  000000     NOP
006EB6  BE0300     MOV.D W0, W6
006EB8  8155D4     MOV TiltZad, W4
006EBA  8155E5     MOV 0x2ABC, W5
006EBC  BE0104     MOV.D W4, W2
006EBE  BE0006     MOV.D W6, W0
006EC0  0222D2     CALL ___addsf3
006EC2  000000     NOP
006EC4  BE0200     MOV.D W0, W4
006EC6  BE0304     MOV.D W4, W6
006EC8  815204     MOV AlfaYRes, W4
006ECA  815215     MOV 0x2A42, W5
006ECC  B3C018     MOV.B #0x1, W8
006ECE  BE0104     MOV.D W4, W2
006ED0  BE0006     MOV.D W6, W0
006ED2  0224FC     CALL ___lesf2
006ED4  000000     NOP
006ED6  780200     MOV W0, W4
006ED8  520FE0     SUB W4, #0x0, [W15]
006EDA  350001     BRA LT, 0x6EDE
006EDC  EB4400     CLR.B W8
006EDE  544FE0     SUB.B W8, #0x0, [W15]
006EE0  32000C     BRA Z, 0x6EFA
5007:                              {
5008:                                  SoundNum=10;
006EE2  2124B5     MOV #0x124B, W5
006EE4  B3C0A4     MOV.B #0xA, W4
006EE6  784A84     MOV.B W4, [W5]
5009:                                  StrongMode=0;
006EE8  8095F4     MOV 0x12BE, W4
006EEA  A1E004     BCLR W4, #14
006EEC  8895F4     MOV W4, 0x12BE
5010:                                  DS=1;
006EEE  8096B4     MOV 0x12D6, W4
006EF0  A0B004     BSET W4, #11
006EF2  8896B4     MOV W4, 0x12D6
5011:                                  NoBalance=1;
006EF4  8095E4     MOV Flgs, W4
006EF6  A0B004     BSET W4, #11
006EF8  8895E4     MOV W4, Flgs
5012:                              }
5013:              
5014:                              if (Sensorless)
006EFA  809755     MOV StatFlgs1, W5
006EFC  200204     MOV #0x20, W4
006EFE  628204     AND W5, W4, W4
006F00  520FE0     SUB W4, #0x0, [W15]
006F02  320018     BRA Z, 0x6F34
5015:                              {
5016:                                  Sensorless=0;
006F04  809754     MOV StatFlgs1, W4
006F06  A15004     BCLR W4, #5
006F08  889754     MOV W4, StatFlgs1
5017:                                  SensorlessNotBEMF=0;
006F0A  809654     MOV 0x12CA, W4
006F0C  A14004     BCLR W4, #4
006F0E  889654     MOV W4, 0x12CA
5018:                                  SensorlessStartNoHalls=0;
006F10  8096B4     MOV 0x12D6, W4
006F12  A1E004     BCLR W4, #14
006F14  8896B4     MOV W4, 0x12D6
5019:                                  CurrUst=CurrUstWork;
006F16  81F4E4     MOV CurrUstWork, W4
006F18  89F494     MOV W4, CurrUst
5020:                                  CurrLimit=CurrLimitWork;
006F1A  80C1A4     MOV CurrLimitWork, W4
006F1C  88C194     MOV W4, CurrLimit
5021:                                  if (VectorMem)
006F1E  809755     MOV StatFlgs1, W5
006F20  204004     MOV #0x400, W4
006F22  628204     AND W5, W4, W4
006F24  520FE0     SUB W4, #0x0, [W15]
006F26  320002     BRA Z, 0x6F2C
5022:                                      VectorInit();
006F28  0769F7     RCALL VectorInit
006F2A  370001     BRA 0x6F2E
5023:                                  else
5024:                                      TrapeziumInit();
006F2C  076AAC     RCALL TrapeziumInit
5025:                                  ChangeCVR();
006F2E  07455D     RCALL ChangeCVR
5026:                                  RdSensors();
006F30  0270B6     CALL RdSensors
006F32  000001     NOP
5027:                              }
5028:              
5029:                              if (DirBalance)
006F34  809754     MOV StatFlgs1, W4
006F36  620264     AND W4, #0x4, W4
006F38  520FE0     SUB W4, #0x0, [W15]
006F3A  320014     BRA Z, 0x6F64
5030:                                  E=TiltZad+TiltZadAdd-AlfaYRes;
006F3C  8155D6     MOV TiltZad, W6
006F3E  8155E7     MOV 0x2ABC, W7
006F40  8155F4     MOV TiltZadAdd, W4
006F42  815605     MOV 0x2AC0, W5
006F44  BE0104     MOV.D W4, W2
006F46  BE0006     MOV.D W6, W0
006F48  0222D2     CALL ___addsf3
006F4A  000000     NOP
006F4C  BE0200     MOV.D W0, W4
006F4E  BE0304     MOV.D W4, W6
006F50  815204     MOV AlfaYRes, W4
006F52  815215     MOV 0x2A42, W5
006F54  BE0104     MOV.D W4, W2
006F56  BE0006     MOV.D W6, W0
006F58  0222D0     CALL ___subsf3
006F5A  000000     NOP
006F5C  BE0200     MOV.D W0, W4
006F5E  889BA4     MOV W4, E
006F60  889BB5     MOV W5, 0x1376
006F62  370015     BRA 0x6F8E
5031:                              else
5032:                                  E=-TiltZad-TiltZadAdd+AlfaYRes;
006F64  8155D4     MOV TiltZad, W4
006F66  8155E5     MOV 0x2ABC, W5
006F68  BE0304     MOV.D W4, W6
006F6A  A2F007     BTG W7, #15
006F6C  8155F4     MOV TiltZadAdd, W4
006F6E  815605     MOV 0x2AC0, W5
006F70  BE0104     MOV.D W4, W2
006F72  BE0006     MOV.D W6, W0
006F74  0222D0     CALL ___subsf3
006F76  000000     NOP
006F78  BE0200     MOV.D W0, W4
006F7A  BE0304     MOV.D W4, W6
006F7C  815204     MOV AlfaYRes, W4
006F7E  815215     MOV 0x2A42, W5
006F80  BE0104     MOV.D W4, W2
006F82  BE0006     MOV.D W6, W0
006F84  0222D2     CALL ___addsf3
006F86  000000     NOP
006F88  BE0200     MOV.D W0, W4
006F8A  889BA4     MOV W4, E
006F8C  889BB5     MOV W5, 0x1376
5033:              
5034:                              if (EPrevFl)
006F8E  8096D5     MOV 0x12DA, W5
006F90  200204     MOV #0x20, W4
006F92  628204     AND W5, W4, W4
006F94  520FE0     SUB W4, #0x0, [W15]
006F96  320007     BRA Z, 0x6FA6
5035:                              {
5036:                                  EPrevFl=0;
006F98  8096D4     MOV 0x12DA, W4
006F9A  A15004     BCLR W4, #5
006F9C  8896D4     MOV W4, 0x12DA
5037:                                  EPrev=E;
006F9E  809BA4     MOV E, W4
006FA0  809BB5     MOV 0x1376, W5
006FA2  889C64     MOV W4, EPrev
006FA4  889C75     MOV W5, 0x138E
5038:                              }
5039:                              Ed=E-EPrev;
006FA6  809BA6     MOV E, W6
006FA8  809BB7     MOV 0x1376, W7
006FAA  809C64     MOV EPrev, W4
006FAC  809C75     MOV 0x138E, W5
006FAE  BE0104     MOV.D W4, W2
006FB0  BE0006     MOV.D W6, W0
006FB2  0222D0     CALL ___subsf3
006FB4  000000     NOP
006FB6  BE0200     MOV.D W0, W4
006FB8  889AA4     MOV W4, Ed
006FBA  889AB5     MOV W5, 0x1356
5040:                              EPrev=E;
006FBC  809BA4     MOV E, W4
006FBE  809BB5     MOV 0x1376, W5
006FC0  889C64     MOV W4, EPrev
006FC2  889C75     MOV W5, 0x138E
5041:                              Ed=Ed*Kd;
006FC4  809AA6     MOV Ed, W6
006FC6  809AB7     MOV 0x1356, W7
006FC8  821334     MOV Kd, W4
006FCA  821345     MOV 0x4268, W5
006FCC  BE0104     MOV.D W4, W2
006FCE  BE0006     MOV.D W6, W0
006FD0  022630     CALL ___mulsf3
006FD2  000000     NOP
006FD4  BE0200     MOV.D W0, W4
006FD6  889AA4     MOV W4, Ed
006FD8  889AB5     MOV W5, 0x1356
5042:                      
5043:                              
5044:                              
5045:                              
5046:                              
5047:                              
5048:                              
5049:              
5050:                      KpK=(E*KpKp);
006FDA  809BA6     MOV E, W6
006FDC  809BB7     MOV 0x1376, W7
006FDE  81A5D4     MOV KpKp, W4
006FE0  81A5E5     MOV 0x34BC, W5
006FE2  BE0104     MOV.D W4, W2
006FE4  BE0006     MOV.D W6, W0
006FE6  022630     CALL ___mulsf3
006FE8  000000     NOP
006FEA  BE0200     MOV.D W0, W4
006FEC  89A614     MOV W4, KpK
006FEE  89A625     MOV W5, 0x34C4
5051:                      if (KpK<0)
006FF0  81A614     MOV KpK, W4
006FF2  81A625     MOV 0x34C4, W5
006FF4  B3C018     MOV.B #0x1, W8
006FF6  B81160     MUL.UU W2, #0, W2
006FF8  BE0004     MOV.D W4, W0
006FFA  0224FC     CALL ___lesf2
006FFC  000000     NOP
006FFE  780200     MOV W0, W4
007000  520FE0     SUB W4, #0x0, [W15]
007002  350001     BRA LT, 0x7006
007004  EB4400     CLR.B W8
007006  544FE0     SUB.B W8, #0x0, [W15]
007008  320005     BRA Z, 0x7014
5052:                          KpK=-KpK;
00700A  81A614     MOV KpK, W4
00700C  81A625     MOV 0x34C4, W5
00700E  A2F005     BTG W5, #15
007010  89A614     MOV W4, KpK
007012  89A625     MOV W5, 0x34C4
5053:                      KpK=KpK+1;
007014  81A614     MOV KpK, W4
007016  81A625     MOV 0x34C4, W5
007018  200002     MOV #0x0, W2
00701A  23F803     MOV #0x3F80, W3
00701C  BE0004     MOV.D W4, W0
00701E  0222D2     CALL ___addsf3
007020  000000     NOP
007022  BE0200     MOV.D W0, W4
007024  89A614     MOV W4, KpK
007026  89A625     MOV W5, 0x34C4
5054:                      
5055:                      Kp_p=KpK*Kp;
007028  81A616     MOV KpK, W6
00702A  81A627     MOV 0x34C4, W7
00702C  809AE4     MOV Kp, W4
00702E  809AF5     MOV 0x135E, W5
007030  BE0104     MOV.D W4, W2
007032  BE0006     MOV.D W6, W0
007034  022630     CALL ___mulsf3
007036  000000     NOP
007038  BE0200     MOV.D W0, W4
00703A  89A5F4     MOV W4, Kp_p
00703C  89A605     MOV W5, 0x34C0
5056:                      
5057:                      
5058:                      
5059:                      if (Kp>0)
00703E  809AE4     MOV Kp, W4
007040  809AF5     MOV 0x135E, W5
007042  B3C018     MOV.B #0x1, W8
007044  B81160     MUL.UU W2, #0, W2
007046  BE0004     MOV.D W4, W0
007048  022500     CALL ___gtsf2
00704A  000000     NOP
00704C  780200     MOV W0, W4
00704E  520FE0     SUB W4, #0x0, [W15]
007050  3C0001     BRA GT, 0x7054
007052  EB4400     CLR.B W8
007054  544FE0     SUB.B W8, #0x0, [W15]
007056  320014     BRA Z, 0x7080
5060:                      {
5061:                      if (Kp_p>KpMax)
007058  81A5F6     MOV Kp_p, W6
00705A  81A607     MOV 0x34C0, W7
00705C  809D24     MOV KpMax, W4
00705E  809D35     MOV 0x13A6, W5
007060  B3C018     MOV.B #0x1, W8
007062  BE0104     MOV.D W4, W2
007064  BE0006     MOV.D W6, W0
007066  022500     CALL ___gtsf2
007068  000000     NOP
00706A  780200     MOV W0, W4
00706C  520FE0     SUB W4, #0x0, [W15]
00706E  3C0001     BRA GT, 0x7072
007070  EB4400     CLR.B W8
007072  544FE0     SUB.B W8, #0x0, [W15]
007074  32001B     BRA Z, 0x70AC
5062:                          Kp_p=KpMax;
007076  809D24     MOV KpMax, W4
007078  809D35     MOV 0x13A6, W5
00707A  89A5F4     MOV W4, Kp_p
00707C  89A605     MOV W5, 0x34C0
00707E  370016     BRA 0x70AC
5063:                      }
5064:                      else
5065:                      {
5066:                      if (Kp_p<-KpMax)
007080  809D24     MOV KpMax, W4
007082  809D35     MOV 0x13A6, W5
007084  BE0304     MOV.D W4, W6
007086  A2F007     BTG W7, #15
007088  81A5F4     MOV Kp_p, W4
00708A  81A605     MOV 0x34C0, W5
00708C  B3C018     MOV.B #0x1, W8
00708E  BE0104     MOV.D W4, W2
007090  BE0006     MOV.D W6, W0
007092  022500     CALL ___gtsf2
007094  000000     NOP
007096  780200     MOV W0, W4
007098  520FE0     SUB W4, #0x0, [W15]
00709A  3C0001     BRA GT, 0x709E
00709C  EB4400     CLR.B W8
00709E  544FE0     SUB.B W8, #0x0, [W15]
0070A0  320005     BRA Z, 0x70AC
5067:                          Kp_p=-KpMax;
0070A2  809D24     MOV KpMax, W4
0070A4  809D35     MOV 0x13A6, W5
0070A6  A2F005     BTG W5, #15
0070A8  89A5F4     MOV W4, Kp_p
0070AA  89A605     MOV W5, 0x34C0
5068:                      }
5069:                      
5070:              
5071:              
5072:                      
5073:                              
5074:                              
5075:                              
5076:                              
5077:                              
5078:                              
5079:                              
5080:                              
5081:                              Ep=E*Kp_p;
0070AC  809BA6     MOV E, W6
0070AE  809BB7     MOV 0x1376, W7
0070B0  81A5F4     MOV Kp_p, W4
0070B2  81A605     MOV 0x34C0, W5
0070B4  BE0104     MOV.D W4, W2
0070B6  BE0006     MOV.D W6, W0
0070B8  022630     CALL ___mulsf3
0070BA  000000     NOP
0070BC  BE0200     MOV.D W0, W4
0070BE  889A84     MOV W4, Ep
0070C0  889A95     MOV W5, 0x1352
5082:              
5083:                              ESumm=ESumm+E;
0070C2  809B86     MOV ESumm, W6
0070C4  809B97     MOV 0x1372, W7
0070C6  809BA4     MOV E, W4
0070C8  809BB5     MOV 0x1376, W5
0070CA  BE0104     MOV.D W4, W2
0070CC  BE0006     MOV.D W6, W0
0070CE  0222D2     CALL ___addsf3
0070D0  000000     NOP
0070D2  BE0200     MOV.D W0, W4
0070D4  889B84     MOV W4, ESumm
0070D6  889B95     MOV W5, 0x1372
5084:              
5085:                              if (ESumm>1000000)
0070D8  809B84     MOV ESumm, W4
0070DA  809B95     MOV 0x1372, W5
0070DC  B3C018     MOV.B #0x1, W8
0070DE  224002     MOV #0x2400, W2
0070E0  249743     MOV #0x4974, W3
0070E2  BE0004     MOV.D W4, W0
0070E4  022500     CALL ___gtsf2
0070E6  000000     NOP
0070E8  780200     MOV W0, W4
0070EA  520FE0     SUB W4, #0x0, [W15]
0070EC  3C0001     BRA GT, 0x70F0
0070EE  EB4400     CLR.B W8
0070F0  544FE0     SUB.B W8, #0x0, [W15]
0070F2  320004     BRA Z, 0x70FC
5086:                                  ESumm=1000000;
0070F4  224004     MOV #0x2400, W4
0070F6  249745     MOV #0x4974, W5
0070F8  889B84     MOV W4, ESumm
0070FA  889B95     MOV W5, 0x1372
5087:                              if (ESumm<-1000000)
0070FC  809B84     MOV ESumm, W4
0070FE  809B95     MOV 0x1372, W5
007100  B3C018     MOV.B #0x1, W8
007102  224002     MOV #0x2400, W2
007104  2C9743     MOV #0xC974, W3
007106  BE0004     MOV.D W4, W0
007108  0224FC     CALL ___lesf2
00710A  000000     NOP
00710C  780200     MOV W0, W4
00710E  520FE0     SUB W4, #0x0, [W15]
007110  350001     BRA LT, 0x7114
007112  EB4400     CLR.B W8
007114  544FE0     SUB.B W8, #0x0, [W15]
007116  320004     BRA Z, 0x7120
5088:                                  ESumm=-1000000;
007118  224004     MOV #0x2400, W4
00711A  2C9745     MOV #0xC974, W5
00711C  889B84     MOV W4, ESumm
00711E  889B95     MOV W5, 0x1372
5089:              
5090:                              Ei=ESumm*Ki;
007120  809B86     MOV ESumm, W6
007122  809B97     MOV 0x1372, W7
007124  809B04     MOV Ki, W4
007126  809B15     MOV 0x1362, W5
007128  BE0104     MOV.D W4, W2
00712A  BE0006     MOV.D W6, W0
00712C  022630     CALL ___mulsf3
00712E  000000     NOP
007130  BE0200     MOV.D W0, W4
007132  889AC4     MOV W4, Ei
007134  889AD5     MOV W5, 0x135A
5091:                              PWM1Temp=(int)Ep+(int)Ei+(int)Ed;
007136  809A84     MOV Ep, W4
007138  809A95     MOV 0x1352, W5
00713A  BE0004     MOV.D W4, W0
00713C  022504     CALL ___fixsfsi
00713E  000000     NOP
007140  BE0200     MOV.D W0, W4
007142  780404     MOV W4, W8
007144  809AC4     MOV Ei, W4
007146  809AD5     MOV 0x135A, W5
007148  BE0004     MOV.D W4, W0
00714A  022504     CALL ___fixsfsi
00714C  000000     NOP
00714E  BE0200     MOV.D W0, W4
007150  780204     MOV W4, W4
007152  440404     ADD W8, W4, W8
007154  809AA4     MOV Ed, W4
007156  809AB5     MOV 0x1356, W5
007158  BE0004     MOV.D W4, W0
00715A  022504     CALL ___fixsfsi
00715C  000000     NOP
00715E  BE0200     MOV.D W0, W4
007160  780204     MOV W4, W4
007162  440204     ADD W8, W4, W4
007164  DEA2CF     ASR W4, #15, W5
007166  8A1854     MOV W4, PWM1Temp
007168  8A1865     MOV W5, 0x430C
5092:                              
5093:                              if ((PWM1Temp>600)||(PWM1Temp<-600))
00716A  821856     MOV PWM1Temp, W6
00716C  821867     MOV 0x430C, W7
00716E  202584     MOV #0x258, W4
007170  200005     MOV #0x0, W5
007172  530F84     SUB W6, W4, [W15]
007174  5B8F85     SUBB W7, W5, [W15]
007176  3C0007     BRA GT, 0x7186
007178  821856     MOV PWM1Temp, W6
00717A  821867     MOV 0x430C, W7
00717C  2FDA84     MOV #0xFDA8, W4
00717E  2FFFF5     MOV #0xFFFF, W5
007180  530F84     SUB W6, W4, [W15]
007182  5B8F85     SUBB W7, W5, [W15]
007184  3D0001     BRA GE, 0x7188
5094:                              {
5095:                                  Nop();
007186  000000     NOP
5096:                              }
5097:                              
5098:              
5099:                          }
5100:                      }
5101:                  }
5102:              //--------------   END  MONOCYCLE ------------------------
5103:              
5104:              
5105:              
5106:              
5107:                      if (StrtWheeling)
007188  809665     MOV Flgs4, W5
00718A  210004     MOV #0x1000, W4
00718C  628204     AND W5, W4, W4
00718E  520FE0     SUB W4, #0x0, [W15]
007190  32000F     BRA Z, 0x71B0
5108:                      {
5109:                          PID_On=0;
007192  809654     MOV 0x12CA, W4
007194  A19004     BCLR W4, #9
007196  889654     MOV W4, 0x12CA
5110:                          Wheeling=1;
007198  809664     MOV Flgs4, W4
00719A  A0B004     BSET W4, #11
00719C  889664     MOV W4, Flgs4
5111:                          StrongMode=1;
00719E  8095F4     MOV 0x12BE, W4
0071A0  A0E004     BSET W4, #14
0071A2  8895F4     MOV W4, 0x12BE
5112:                          //ESumm=((float)PWM1Temp)/Ki;
5113:                          StrtWheeling=0;
0071A4  809664     MOV Flgs4, W4
0071A6  A1C004     BCLR W4, #12
0071A8  889664     MOV W4, Flgs4
5114:                          NoBalance=1;
0071AA  8095E4     MOV Flgs, W4
0071AC  A0B004     BSET W4, #11
0071AE  8895E4     MOV W4, Flgs
5115:                      }
5116:              
5117:                          WheelingFunc();
0071B0  02E08C     CALL WheelingFunc
0071B2  000001     NOP
5118:              
5119:                      if ((StateOdm==1)&&(PWM1Temp>20)&&(Spd1ResPlus>1))
0071B4  2426A4     MOV #0x426A, W4
0071B6  784214     MOV.B [W4], W4
0071B8  524FE1     SUB.B W4, #0x1, [W15]
0071BA  3A000D     BRA NZ, 0x71D6
0071BC  821856     MOV PWM1Temp, W6
0071BE  821867     MOV 0x430C, W7
0071C0  200144     MOV #0x14, W4
0071C2  200005     MOV #0x0, W5
0071C4  530F84     SUB W6, W4, [W15]
0071C6  5B8F85     SUBB W7, W5, [W15]
0071C8  340006     BRA LE, 0x71D6
0071CA  817F44     MOV Spd1ResPlus, W4
0071CC  520FE1     SUB W4, #0x1, [W15]
0071CE  340003     BRA LE, 0x71D6
5120:                      {
5121:                          StateOdm=2;
0071D0  2426A5     MOV #0x426A, W5
0071D2  B3C024     MOV.B #0x2, W4
0071D4  784A84     MOV.B W4, [W5]
5122:                      }
5123:              
5124:                      if ((StateOdm==2)&&(PWM1Temp<10)&&(Spd1ResPlus<=1))
0071D6  2426A4     MOV #0x426A, W4
0071D8  784214     MOV.B [W4], W4
0071DA  524FE2     SUB.B W4, #0x2, [W15]
0071DC  3A0012     BRA NZ, 0x7202
0071DE  821856     MOV PWM1Temp, W6
0071E0  821867     MOV 0x430C, W7
0071E2  200094     MOV #0x9, W4
0071E4  200005     MOV #0x0, W5
0071E6  530F84     SUB W6, W4, [W15]
0071E8  5B8F85     SUBB W7, W5, [W15]
0071EA  3C000B     BRA GT, 0x7202
0071EC  817F44     MOV Spd1ResPlus, W4
0071EE  520FE1     SUB W4, #0x1, [W15]
0071F0  3C0008     BRA GT, 0x7202
5125:                      {
5126:                          StateOdm=1;
0071F2  2426A5     MOV #0x426A, W5
0071F4  B3C014     MOV.B #0x1, W4
0071F6  784A84     MOV.B W4, [W5]
5127:                          RecOdometrFl=1;
0071F8  809604     MOV Flgs1, W4
0071FA  A06004     BSET W4, #6
0071FC  889604     MOV W4, Flgs1
5128:                          TmrOdmtrWrCnt=0;
0071FE  EB0200     CLR W4
007200  88A2D4     MOV W4, TmrOdmtrWrCnt
5129:                      }
5130:              
5131:                      if (StateOdm==1)
007202  2426A4     MOV #0x426A, W4
007204  784214     MOV.B [W4], W4
007206  524FE1     SUB.B W4, #0x1, [W15]
007208  3A000C     BRA NZ, 0x7222
5132:                      {
5133:                          TmrOdmtrWrCnt++;
00720A  80A2D4     MOV TmrOdmtrWrCnt, W4
00720C  E80204     INC W4, W4
00720E  88A2D4     MOV W4, TmrOdmtrWrCnt
5134:                          if (TmrOdmtrWrCnt>30000)
007210  80A2D5     MOV TmrOdmtrWrCnt, W5
007212  275304     MOV #0x7530, W4
007214  528F84     SUB W5, W4, [W15]
007216  360005     BRA LEU, 0x7222
5135:                          {
5136:                          RecOdometrFl=1;
007218  809604     MOV Flgs1, W4
00721A  A06004     BSET W4, #6
00721C  889604     MOV W4, Flgs1
5137:                          TmrOdmtrWrCnt=0;
00721E  EB0200     CLR W4
007220  88A2D4     MOV W4, TmrOdmtrWrCnt
5138:                          }
5139:                      }
5140:              
5141:                          if (Lock)
007222  809755     MOV StatFlgs1, W5
007224  201004     MOV #0x100, W4
007226  628204     AND W5, W4, W4
007228  520FE0     SUB W4, #0x0, [W15]
00722A  320003     BRA Z, 0x7232
5142:                          PWM1Temp=0;
00722C  B82260     MUL.UU W4, #0, W4
00722E  8A1854     MOV W4, PWM1Temp
007230  8A1865     MOV W5, 0x430C
5143:              
5144:              
5145:                      if (PWM1Temp>MAX_PWM)
007232  8212F4     MOV MAX_PWM, W4
007234  B92361     MUL.SU W4, #1, W6
007236  821854     MOV PWM1Temp, W4
007238  821865     MOV 0x430C, W5
00723A  530F84     SUB W6, W4, [W15]
00723C  5B8F85     SUBB W7, W5, [W15]
00723E  3D0004     BRA GE, 0x7248
5146:                          PWM1Temp=MAX_PWM;
007240  8212F4     MOV MAX_PWM, W4
007242  DEA2CF     ASR W4, #15, W5
007244  8A1854     MOV W4, PWM1Temp
007246  8A1865     MOV W5, 0x430C
5147:                      if (PWM1Temp<-MAX_PWM)
007248  8212F4     MOV MAX_PWM, W4
00724A  EA0204     NEG W4, W4
00724C  B92361     MUL.SU W4, #1, W6
00724E  821854     MOV PWM1Temp, W4
007250  821865     MOV 0x430C, W5
007252  530F84     SUB W6, W4, [W15]
007254  5B8F85     SUBB W7, W5, [W15]
007256  340005     BRA LE, 0x7262
5148:                      {
5149:                          PWM1Temp=-MAX_PWM;
007258  8212F4     MOV MAX_PWM, W4
00725A  EA0204     NEG W4, W4
00725C  DEA2CF     ASR W4, #15, W5
00725E  8A1854     MOV W4, PWM1Temp
007260  8A1865     MOV W5, 0x430C
5150:                      }
5151:                
5152:              
5153:              
5154:                      PWM1=(int)PWM1Temp;//PWM1+RotAddP+RotAddD+RotAddI;
007262  821854     MOV PWM1Temp, W4
007264  821865     MOV 0x430C, W5
007266  780204     MOV W4, W4
007268  889284     MOV W4, PWM1
5155:                      
5156:              
5157:                      if (OffingBreak)
00726A  809604     MOV Flgs1, W4
00726C  620264     AND W4, #0x4, W4
00726E  520FE0     SUB W4, #0x0, [W15]
007270  320005     BRA Z, 0x727C
5158:                      {
5159:                          OffingBreak=0;
007272  809604     MOV Flgs1, W4
007274  A12004     BCLR W4, #2
007276  889604     MOV W4, Flgs1
5160:                          PWM1=1;
007278  200014     MOV #0x1, W4
00727A  889284     MOV W4, PWM1
5161:                      }
5162:              
5163:              
5164:              
5165:              
5166:                      if (PWM1<0)
00727C  809284     MOV PWM1, W4
00727E  520FE0     SUB W4, #0x0, [W15]
007280  3D000A     BRA GE, 0x7296
5167:                      {
5168:                          PWM1=-PWM1;
007282  809284     MOV PWM1, W4
007284  EA0204     NEG W4, W4
007286  889284     MOV W4, PWM1
5169:                          PWM1Plus=0;
007288  8095E4     MOV Flgs, W4
00728A  A1C004     BCLR W4, #12
00728C  8895E4     MOV W4, Flgs
5170:                          Forward1=0;
00728E  8095E4     MOV Flgs, W4
007290  A16004     BCLR W4, #6
007292  8895E4     MOV W4, Flgs
007294  370009     BRA 0x72A8
5171:                      }
5172:                      else
5173:                      if (PWM1>0)
007296  809284     MOV PWM1, W4
007298  520FE0     SUB W4, #0x0, [W15]
00729A  340006     BRA LE, 0x72A8
5174:                      {
5175:                          Forward1=1;
00729C  8095E4     MOV Flgs, W4
00729E  A06004     BSET W4, #6
0072A0  8895E4     MOV W4, Flgs
5176:                          PWM1Plus=1;
0072A2  8095E4     MOV Flgs, W4
0072A4  A0C004     BSET W4, #12
0072A6  8895E4     MOV W4, Flgs
5177:                      }
5178:              
5179:                      
5180:                //   if (PWM1<100)
5181:                 //     Nop();
5182:              
5183:                      
5184:              
5185:                      if (!PrevForward1)
0072A8  8095E5     MOV Flgs, W5
0072AA  202004     MOV #0x200, W4
0072AC  628204     AND W5, W4, W4
0072AE  520FE0     SUB W4, #0x0, [W15]
0072B0  3A0031     BRA NZ, 0x7314
5186:                      {
5187:                           if (Forward1)
0072B2  8095E5     MOV Flgs, W5
0072B4  200404     MOV #0x40, W4
0072B6  628204     AND W5, W4, W4
0072B8  520FE0     SUB W4, #0x0, [W15]
0072BA  32005F     BRA Z, 0x737A
5188:                          {
5189:                              PrevForward1=1;
0072BC  8095E4     MOV Flgs, W4
0072BE  A09004     BSET W4, #9
0072C0  8895E4     MOV W4, Flgs
5190:                              IEC1bits.CNIE = 0;
0072C2  A96822     BCLR IEC1, #3
5191:                          	IEC3bits.T8IE = 0;
0072C4  A96826     BCLR IEC3, #3
5192:                              if (!Vector)
0072C6  809684     MOV Flgs5, W4
0072C8  620270     AND W4, #0x10, W4
0072CA  520FE0     SUB W4, #0x0, [W15]
0072CC  3A000A     BRA NZ, 0x72E2
5193:                              {
5194:                              Sensor1=ReadSensor1_F();
0072CE  070E1D     RCALL ReadSensor1_F
0072D0  784200     MOV.B W0, W4
0072D2  212465     MOV #0x1246, W5
0072D4  784A84     MOV.B W4, [W5]
5195:                              Sensor1_Prev=Sensor1;
0072D6  212464     MOV #0x1246, W4
0072D8  784214     MOV.B [W4], W4
0072DA  212475     MOV #0x1247, W5
0072DC  784A84     MOV.B W4, [W5]
5196:                              Phases1();
0072DE  070CFB     RCALL Phases1
0072E0  370016     BRA 0x730E
5197:              
5198:                              }
5199:                              else
5200:                              {
5201:                                  if (!DirPWM1)
0072E2  809754     MOV StatFlgs1, W4
0072E4  620261     AND W4, #0x1, W4
0072E6  520FE0     SUB W4, #0x0, [W15]
0072E8  3A0005     BRA NZ, 0x72F4
5202:                              Sensor1=ReadSensor1_F_V();
0072EA  077E9E     RCALL ReadSensor1_F_V
0072EC  784200     MOV.B W0, W4
0072EE  212465     MOV #0x1246, W5
0072F0  784A84     MOV.B W4, [W5]
0072F2  370004     BRA 0x72FC
5203:                                  else
5204:                              Sensor1=ReadSensor1_B_V();
0072F4  077E72     RCALL ReadSensor1_B_V
0072F6  784200     MOV.B W0, W4
0072F8  212465     MOV #0x1246, W5
0072FA  784A84     MOV.B W4, [W5]
5205:                              Sensor1_Prev=Sensor1;
0072FC  212464     MOV #0x1246, W4
0072FE  784214     MOV.B [W4], W4
007300  212475     MOV #0x1247, W5
007302  784A84     MOV.B W4, [W5]
5206:                              Sensor1_Prev_OP=Sensor1_Prev;
007304  212474     MOV #0x1247, W4
007306  784214     MOV.B [W4], W4
007308  210FA5     MOV #0x10FA, W5
00730A  784A84     MOV.B W4, [W5]
5207:                              SVPWM1();
00730C  076A45     RCALL SVPWM1
5208:                              }
5209:                          	IEC3bits.T8IE = 1;
00730E  A86826     BSET IEC3, #3
5210:                              IEC1bits.CNIE = 1;
007310  A86822     BSET IEC1, #3
007312  370033     BRA 0x737A
5211:                          }
5212:              
5213:                     
5214:                      }
5215:                      else
5216:                      {
5217:                          if (!Forward1)
007314  8095E5     MOV Flgs, W5
007316  200404     MOV #0x40, W4
007318  628204     AND W5, W4, W4
00731A  520FE0     SUB W4, #0x0, [W15]
00731C  3A002E     BRA NZ, 0x737A
5218:                          {
5219:                              PrevForward1=0;
00731E  8095E4     MOV Flgs, W4
007320  A19004     BCLR W4, #9
007322  8895E4     MOV W4, Flgs
5220:                              IEC1bits.CNIE = 0;
007324  A96822     BCLR IEC1, #3
5221:                          	IEC3bits.T8IE = 0;
007326  A96826     BCLR IEC3, #3
5222:                              if (!Vector)
007328  809684     MOV Flgs5, W4
00732A  620270     AND W4, #0x10, W4
00732C  520FE0     SUB W4, #0x0, [W15]
00732E  3A000A     BRA NZ, 0x7344
5223:                              {
5224:                              Sensor1=ReadSensor1_B();
007330  070DB0     RCALL ReadSensor1_B
007332  784200     MOV.B W0, W4
007334  212465     MOV #0x1246, W5
007336  784A84     MOV.B W4, [W5]
5225:                              Sensor1_Prev=Sensor1;
007338  212464     MOV #0x1246, W4
00733A  784214     MOV.B [W4], W4
00733C  212475     MOV #0x1247, W5
00733E  784A84     MOV.B W4, [W5]
5226:                              Phases1();
007340  070CCA     RCALL Phases1
007342  370016     BRA 0x7370
5227:              
5228:                              }
5229:                              else
5230:                              {
5231:                                  if (!DirPWM1)
007344  809754     MOV StatFlgs1, W4
007346  620261     AND W4, #0x1, W4
007348  520FE0     SUB W4, #0x0, [W15]
00734A  3A0005     BRA NZ, 0x7356
5232:                              Sensor1=ReadSensor1_B_V();
00734C  077E46     RCALL ReadSensor1_B_V
00734E  784200     MOV.B W0, W4
007350  212465     MOV #0x1246, W5
007352  784A84     MOV.B W4, [W5]
007354  370004     BRA 0x735E
5233:                                  else
5234:                              Sensor1=ReadSensor1_F_V();
007356  077E68     RCALL ReadSensor1_F_V
007358  784200     MOV.B W0, W4
00735A  212465     MOV #0x1246, W5
00735C  784A84     MOV.B W4, [W5]
5235:                              Sensor1_Prev=Sensor1;
00735E  212464     MOV #0x1246, W4
007360  784214     MOV.B [W4], W4
007362  212475     MOV #0x1247, W5
007364  784A84     MOV.B W4, [W5]
5236:                              Sensor1_Prev_OP=Sensor1_Prev;
007366  212474     MOV #0x1247, W4
007368  784214     MOV.B [W4], W4
00736A  210FA5     MOV #0x10FA, W5
00736C  784A84     MOV.B W4, [W5]
5237:                              SVPWM1();
00736E  076A14     RCALL SVPWM1
5238:                              }
5239:                          	IEC3bits.T8IE = 1;
007370  A86826     BSET IEC3, #3
5240:                              IEC1bits.CNIE = 1;
007372  A86822     BSET IEC1, #3
007374  370002     BRA 0x737A
5241:                          }
5242:               
5243:                      }
5244:              
5245:               
5246:              
5247:                      
5248:                      
5249:              
5250:               
5251:                      
5252:              
5253:              
5254:              }
5255:              else
5256:              {
5257:                              PWM1=DIRPWM1;
007376  81F5C4     MOV DIRPWM1, W4
007378  889284     MOV W4, PWM1
5258:              }
5259:              #ifdef PROTECT
5260:                          if (((unsigned int)(ReadProgramMemory(0x11d6)))!=0xf141)
5261:                              CriticalError=CRERR_SEC_ERROR_3;
5262:              #endif
5263:              
5264:                          Spd0TimerStateMachine();
00737A  02BDD6     CALL Spd0TimerStateMachine
00737C  000001     NOP
5265:                          Lights();
00737E  02BB26     CALL Lights
007380  000001     NOP
5266:              
5267:                          if (Monocycle)
5268:                              {
5269:                         //    StrongModeMem=1;
5270:                         //     StrongMode=1;
5271:                            //  MixedMode=0;
5272:                           //   MixedMode2=0;
5273:                              }
5274:                
5275:                      if (MixedMode2)
007382  809765     MOV StatFlgs2, W5
007384  208004     MOV #0x800, W4
007386  628204     AND W5, W4, W4
007388  520FE0     SUB W4, #0x0, [W15]
00738A  32003F     BRA Z, 0x740A
5276:                      {    
5277:                      if (CurrMixed<1)
00738C  81FFF4     MOV CurrMixed, W4
00738E  520FE0     SUB W4, #0x0, [W15]
007390  3C0002     BRA GT, 0x7396
5278:                      CurrMixed=1;
007392  200014     MOV #0x1, W4
007394  89FFF4     MOV W4, CurrMixed
5279:              /*
5280:                          CntMixedMode++;
5281:                          if (CntMixedMode>CntMixedModeMax)
5282:                          {
5283:                              CntMixedMode=0;
5284:                              DiffMixed=ThrottleTmpMixed-ThrottleTmpPrev;
5285:                              ThrottleTmpPrev=ThrottleTmpMixed;
5286:                          }    
5287:                      
5288:                      
5289:                      switch (MixedMode2StateMachine)
5290:                      {
5291:                          case 0:
5292:                              if ((Curr1Show>CurrMixed+14)&&(!BreakPressed))
5293:                              {
5294:                                  if ((DiffMixed>MixedModeLevelOn))
5295:                                  {
5296:                                  StrongMode=1;
5297:                                  MixedMode2StateMachine=1;
5298:                                  }
5299:                              }
5300:                              break;
5301:                          case 1:
5302:                              if ((Curr1Show<CurrMixed||BreakPressed)&&(!WheelingNew))
5303:                              {
5304:                                  StrongMode=0;
5305:                                  MixedMode2StateMachine=0;
5306:                              }
5307:                              if (DiffMixed<-MixedModeLevelOff)
5308:                              {
5309:                                  StrongMode=0;
5310:                                  MixedMode2StateMachine=0;
5311:                              }
5312:                              break;
5313:                      }*/
5314:                      
5315:                      if ((Curr1Show>CurrMixed+14)&&(!BreakPressed))
007396  81FFF4     MOV CurrMixed, W4
007398  42026E     ADD W4, #0xE, W4
00739A  DEA2CF     ASR W4, #15, W5
00739C  BE0004     MOV.D W4, W0
00739E  02257C     CALL ___floatsisf
0073A0  000000     NOP
0073A2  BE0300     MOV.D W0, W6
0073A4  8097E4     MOV Curr1Show, W4
0073A6  8097F5     MOV 0x12FE, W5
0073A8  B3C018     MOV.B #0x1, W8
0073AA  BE0104     MOV.D W4, W2
0073AC  BE0006     MOV.D W6, W0
0073AE  0224FC     CALL ___lesf2
0073B0  000000     NOP
0073B2  780200     MOV W0, W4
0073B4  520FE0     SUB W4, #0x0, [W15]
0073B6  350001     BRA LT, 0x73BA
0073B8  EB4400     CLR.B W8
0073BA  544FE0     SUB.B W8, #0x0, [W15]
0073BC  320007     BRA Z, 0x73CC
0073BE  809614     MOV 0x12C2, W4
0073C0  620261     AND W4, #0x1, W4
0073C2  520FE0     SUB W4, #0x0, [W15]
0073C4  3A0003     BRA NZ, 0x73CC
5316:                              StrongMode=1;
0073C6  8095F4     MOV 0x12BE, W4
0073C8  A0E004     BSET W4, #14
0073CA  8895F4     MOV W4, 0x12BE
5317:                      
5318:                      
5319:                      if ((Curr1Show<CurrMixed||BreakPressed)&&(!WheelingNew))
0073CC  81FFF4     MOV CurrMixed, W4
0073CE  DEA2CF     ASR W4, #15, W5
0073D0  BE0004     MOV.D W4, W0
0073D2  02257C     CALL ___floatsisf
0073D4  000000     NOP
0073D6  BE0300     MOV.D W0, W6
0073D8  8097E4     MOV Curr1Show, W4
0073DA  8097F5     MOV 0x12FE, W5
0073DC  B3C018     MOV.B #0x1, W8
0073DE  BE0104     MOV.D W4, W2
0073E0  BE0006     MOV.D W6, W0
0073E2  022500     CALL ___gtsf2
0073E4  000000     NOP
0073E6  780200     MOV W0, W4
0073E8  520FE0     SUB W4, #0x0, [W15]
0073EA  3C0001     BRA GT, 0x73EE
0073EC  EB4400     CLR.B W8
0073EE  544FE0     SUB.B W8, #0x0, [W15]
0073F0  3A0004     BRA NZ, 0x73FA
0073F2  809614     MOV 0x12C2, W4
0073F4  620261     AND W4, #0x1, W4
0073F6  520FE0     SUB W4, #0x0, [W15]
0073F8  320051     BRA Z, 0x749C
0073FA  8096D4     MOV 0x12DA, W4
0073FC  620268     AND W4, #0x8, W4
0073FE  520FE0     SUB W4, #0x0, [W15]
007400  3A004D     BRA NZ, 0x749C
5320:                              StrongMode=0;
007402  8095F4     MOV 0x12BE, W4
007404  A1E004     BCLR W4, #14
007406  8895F4     MOV W4, 0x12BE
007408  370049     BRA 0x749C
5321:                      
5322:                      
5323:                      }
5324:                      else
5325:                      {
5326:                          if (MixedModeSlowSpeedOff)
00740A  809765     MOV StatFlgs2, W5
00740C  204004     MOV #0x400, W4
00740E  628204     AND W5, W4, W4
007410  520FE0     SUB W4, #0x0, [W15]
007412  320044     BRA Z, 0x749C
5327:                          {
5328:                          if (StrongModeMem)
007414  809764     MOV StatFlgs2, W4
007416  620264     AND W4, #0x4, W4
007418  520FE0     SUB W4, #0x0, [W15]
00741A  320040     BRA Z, 0x749C
5329:                          {
5330:                          if (StrongMode)
00741C  8095F5     MOV 0x12BE, W5
00741E  240004     MOV #0x4000, W4
007420  628204     AND W5, W4, W4
007422  520FE0     SUB W4, #0x0, [W15]
007424  320025     BRA Z, 0x7470
5331:                                  {
5332:                                      if (Spd1ResPlus<MixedModeSlowSpeedFl)//&&(ThrottleTmp<200))
007426  817F44     MOV Spd1ResPlus, W4
007428  DEA2CF     ASR W4, #15, W5
00742A  BE0004     MOV.D W4, W0
00742C  02257C     CALL ___floatsisf
00742E  000000     NOP
007430  BE0300     MOV.D W0, W6
007432  817FD4     MOV MixedModeSlowSpeedFl, W4
007434  817FE5     MOV 0x2FFC, W5
007436  B3C018     MOV.B #0x1, W8
007438  BE0104     MOV.D W4, W2
00743A  BE0006     MOV.D W6, W0
00743C  0224FC     CALL ___lesf2
00743E  000000     NOP
007440  780200     MOV W0, W4
007442  520FE0     SUB W4, #0x0, [W15]
007444  350001     BRA LT, 0x7448
007446  EB4400     CLR.B W8
007448  544FE0     SUB.B W8, #0x0, [W15]
00744A  320028     BRA Z, 0x749C
5333:                                      {
5334:                                      PrevStrongMode=StrongMode;
00744C  8095F4     MOV 0x12BE, W4
00744E  DE224E     LSR W4, #14, W4
007450  624261     AND.B W4, #0x1, W4
007452  FB8204     ZE W4, W4
007454  620261     AND W4, #0x1, W4
007456  DD224A     SL W4, #10, W4
007458  809696     MOV 0x12D2, W6
00745A  2FBFF5     MOV #0xFBFF, W5
00745C  630285     AND W6, W5, W5
00745E  728204     IOR W5, W4, W4
007460  889694     MOV W4, 0x12D2
5335:                                      StrongMode=0;
007462  8095F4     MOV 0x12BE, W4
007464  A1E004     BCLR W4, #14
007466  8895F4     MOV W4, 0x12BE
5336:                                      StrongModeMixedMustOn=0;
007468  809694     MOV 0x12D2, W4
00746A  A18004     BCLR W4, #8
00746C  889694     MOV W4, 0x12D2
00746E  370016     BRA 0x749C
5337:                                      }
5338:                                  }
5339:                          else
5340:                                  {
5341:                                      if (Spd1ResPlus>=MixedModeSlowSpeedFl)//&&(ThrottleTmp<200))
007470  817F44     MOV Spd1ResPlus, W4
007472  DEA2CF     ASR W4, #15, W5
007474  BE0004     MOV.D W4, W0
007476  02257C     CALL ___floatsisf
007478  000000     NOP
00747A  BE0300     MOV.D W0, W6
00747C  817FD4     MOV MixedModeSlowSpeedFl, W4
00747E  817FE5     MOV 0x2FFC, W5
007480  B3C018     MOV.B #0x1, W8
007482  BE0104     MOV.D W4, W2
007484  BE0006     MOV.D W6, W0
007486  022500     CALL ___gtsf2
007488  000000     NOP
00748A  780200     MOV W0, W4
00748C  520FE0     SUB W4, #0x0, [W15]
00748E  3D0001     BRA GE, 0x7492
007490  EB4400     CLR.B W8
007492  544FE0     SUB.B W8, #0x0, [W15]
007494  320003     BRA Z, 0x749C
5342:                                      {
5343:                                      StrongMode=1;
007496  8095F4     MOV 0x12BE, W4
007498  A0E004     BSET W4, #14
00749A  8895F4     MOV W4, 0x12BE
5344:                                      }
5345:                                  }
5346:                          }
5347:                      }
5348:                      }
5349:                          
5350:                          
5351:                          
5352:                /*  if (Vector&&TrapezoidaWhenBigCurrent)
5353:                  {
5354:                      
5355:                      if ((Curr1>(BigCurrent+250))&&(!SetOverCurrTrapezoida))
5356:                      {
5357:                      TrapezoidaRAM1_Temp=TrapezoidaRAM1;
5358:                      SetOverCurrTrapezoida=1;
5359:                      TrapezoidaRAM1=1;
5360:                      }
5361:                      if ((Curr1<BigCurrent)&&(SetOverCurrTrapezoida))
5362:                      {
5363:                      SetOverCurrTrapezoida=0;
5364:                      TrapezoidaRAM1=TrapezoidaRAM1_Temp;
5365:                      }
5366:                      
5367:                  }
5368:              */
5369:              
5370:                     /*     
5371:                if (Vector&&TrapezoidaWhenBigCurrent)
5372:                  {
5373:                      
5374:                      if ((Curr1>(625))&&(!SetOverCurrTrapezoida))
5375:                      {
5376:                      TrapezoidaRAM1_Temp=TrapezoidaRAM1;
5377:                      SetOverCurrTrapezoida=1;
5378:                      TrapezoidaRAM1=1;
5379:                      }
5380:                      if ((Curr1<500)&&(SetOverCurrTrapezoida))
5381:                      {
5382:                      SetOverCurrTrapezoida=0;
5383:                      TrapezoidaRAM1=TrapezoidaRAM1_Temp;
5384:                      }
5385:                      
5386:                  }
5387:                   */       
5388:                          
5389:                          
5390:                          
5391:                        
5392:                if (Vector&&TrapezoidaWhenBigCurrent)
00749C  809684     MOV Flgs5, W4
00749E  620270     AND W4, #0x10, W4
0074A0  520FE0     SUB W4, #0x0, [W15]
0074A2  320037     BRA Z, 0x7512
0074A4  809774     MOV StatFlgs3, W4
0074A6  620270     AND W4, #0x10, W4
0074A8  520FE0     SUB W4, #0x0, [W15]
0074AA  320033     BRA Z, 0x7512
5393:                  {
5394:                      
5395:                      if ((Curr1>(BigCurrent+50))&&(!SetOverCurrTrapezoida))
0074AC  80B644     MOV BigCurrent, W4
0074AE  200325     MOV #0x32, W5
0074B0  428284     ADD W5, W4, W5
0074B2  8094F4     MOV Curr1, W4
0074B4  528F84     SUB W5, W4, [W15]
0074B6  3D0016     BRA GE, 0x74E4
0074B8  8096B5     MOV 0x12D6, W5
0074BA  200804     MOV #0x80, W4
0074BC  628204     AND W5, W4, W4
0074BE  520FE0     SUB W4, #0x0, [W15]
0074C0  3A0011     BRA NZ, 0x74E4
5396:                      {
5397:                      TrapezoidaRAM1_Temp=TrapezoidaRAM1;
0074C2  809754     MOV StatFlgs1, W4
0074C4  DE224C     LSR W4, #12, W4
0074C6  624261     AND.B W4, #0x1, W4
0074C8  FB8204     ZE W4, W4
0074CA  620261     AND W4, #0x1, W4
0074CC  DD2246     SL W4, #6, W4
0074CE  8096B6     MOV 0x12D6, W6
0074D0  2FFBF5     MOV #0xFFBF, W5
0074D2  630285     AND W6, W5, W5
0074D4  728204     IOR W5, W4, W4
0074D6  8896B4     MOV W4, 0x12D6
5398:                      SetOverCurrTrapezoida=1;
0074D8  8096B4     MOV 0x12D6, W4
0074DA  A07004     BSET W4, #7
0074DC  8896B4     MOV W4, 0x12D6
5399:                      TrapezoidaRAM1=1;
0074DE  809754     MOV StatFlgs1, W4
0074E0  A0C004     BSET W4, #12
0074E2  889754     MOV W4, StatFlgs1
5400:                      }
5401:                      if ((Curr1<BigCurrent)&&(SetOverCurrTrapezoida))
0074E4  8094F5     MOV Curr1, W5
0074E6  80B644     MOV BigCurrent, W4
0074E8  528F84     SUB W5, W4, [W15]
0074EA  3D0013     BRA GE, 0x7512
0074EC  8096B5     MOV 0x12D6, W5
0074EE  200804     MOV #0x80, W4
0074F0  628204     AND W5, W4, W4
0074F2  520FE0     SUB W4, #0x0, [W15]
0074F4  32000E     BRA Z, 0x7512
5402:                      {
5403:                      SetOverCurrTrapezoida=0;
0074F6  8096B4     MOV 0x12D6, W4
0074F8  A17004     BCLR W4, #7
0074FA  8896B4     MOV W4, 0x12D6
5404:                      TrapezoidaRAM1=TrapezoidaRAM1_Temp;
0074FC  8096B4     MOV 0x12D6, W4
0074FE  DE2246     LSR W4, #6, W4
007500  624261     AND.B W4, #0x1, W4
007502  FB8204     ZE W4, W4
007504  620261     AND W4, #0x1, W4
007506  DD224C     SL W4, #12, W4
007508  809756     MOV StatFlgs1, W6
00750A  2EFFF5     MOV #0xEFFF, W5
00750C  630285     AND W6, W5, W5
00750E  728204     IOR W5, W4, W4
007510  889754     MOV W4, StatFlgs1
5405:                      }
5406:                      
5407:                  }
5408:                          
5409:                          
5410:                      if (Sensorless)
007512  809755     MOV StatFlgs1, W5
007514  200204     MOV #0x20, W4
007516  628204     AND W5, W4, W4
007518  520FE0     SUB W4, #0x0, [W15]
00751A  320065     BRA Z, 0x75E6
5411:                      {
5412:                                  if (ManualStart)
00751C  809745     MOV StatFlgs, W5
00751E  202004     MOV #0x200, W4
007520  628204     AND W5, W4, W4
007522  520FE0     SUB W4, #0x0, [W15]
007524  32000A     BRA Z, 0x753A
5413:                                  {
5414:                                   //StateSensorlessMotorStart=7;
5415:                                   //SensorlessStartNoHalls=1;
5416:                    //               if (HvZ_Cr)
5417:                                   {
5418:                                   if ((PWM1>100)&&(PWM1<750))
007526  809285     MOV PWM1, W5
007528  200644     MOV #0x64, W4
00752A  528F84     SUB W5, W4, [W15]
00752C  340006     BRA LE, 0x753A
00752E  809285     MOV PWM1, W5
007530  202ED4     MOV #0x2ED, W4
007532  528F84     SUB W5, W4, [W15]
007534  3C0002     BRA GT, 0x753A
5419:                                       PWM1=750;
007536  202EE4     MOV #0x2EE, W4
007538  889284     MOV W4, PWM1
5420:                  //                     DS=0;
5421:                                   }
5422:                      //             else
5423:                                   {
5424:                        //               PWM1=0;
5425:                   //                    DS=1;
5426:                                   }
5427:                                  }
5428:              
5429:                          
5430:                                  if (Spd1ResPlus<25)
00753A  817F44     MOV Spd1ResPlus, W4
00753C  520FF8     SUB W4, #0x18, [W15]
00753E  3C0003     BRA GT, 0x7546
5431:                                  CntZeroConst=3;
007540  2426C5     MOV #0x426C, W5
007542  B3C034     MOV.B #0x3, W4
007544  784A84     MOV.B W4, [W5]
5432:                                  if (Spd1ResPlus>35)
007546  817F45     MOV Spd1ResPlus, W5
007548  200234     MOV #0x23, W4
00754A  528F84     SUB W5, W4, [W15]
00754C  340003     BRA LE, 0x7554
5433:                                  CntZeroConst=1;
00754E  2426C5     MOV #0x426C, W5
007550  B3C014     MOV.B #0x1, W4
007552  784A84     MOV.B W4, [W5]
5434:              
5435:                                  
5436:                          if ((PWM1>750)&&(!StateSensorlessMotorStart)&&(Spd1Res<1))
007554  809285     MOV PWM1, W5
007556  202EE4     MOV #0x2EE, W4
007558  528F84     SUB W5, W4, [W15]
00755A  340009     BRA LE, 0x756E
00755C  231CD4     MOV #0x31CD, W4
00755E  784214     MOV.B [W4], W4
007560  524FE0     SUB.B W4, #0x0, [W15]
007562  3A0005     BRA NZ, 0x756E
007564  817F14     MOV Spd1Res, W4
007566  520FE0     SUB W4, #0x0, [W15]
007568  3C0002     BRA GT, 0x756E
5437:                              SensorlessMotorStartInit();
00756A  02870A     CALL SensorlessMotorStartInit
00756C  000001     NOP
5438:              
5439:                          if ((PWM1<700)&&(StateSensorlessMotorStart)&&(StateSensorlessMotorStart<6))
00756E  809285     MOV PWM1, W5
007570  202BB4     MOV #0x2BB, W4
007572  528F84     SUB W5, W4, [W15]
007574  3C000A     BRA GT, 0x758A
007576  231CD4     MOV #0x31CD, W4
007578  784214     MOV.B [W4], W4
00757A  524FE0     SUB.B W4, #0x0, [W15]
00757C  320006     BRA Z, 0x758A
00757E  231CD4     MOV #0x31CD, W4
007580  784214     MOV.B [W4], W4
007582  524FE5     SUB.B W4, #0x5, [W15]
007584  3E0002     BRA GTU, 0x758A
5440:                              SensorlessMotorStopStarting();
007586  028932     CALL SensorlessMotorStopStarting
007588  000001     NOP
5441:              
5442:                          if (SensorlessNotBEMF)
00758A  809654     MOV 0x12CA, W4
00758C  620270     AND W4, #0x10, W4
00758E  520FE0     SUB W4, #0x0, [W15]
007590  320012     BRA Z, 0x75B6
5443:                          {
5444:                          PWM1=SenosrlessPWM1;
007592  8092E4     MOV SenosrlessPWM1, W4
007594  889284     MOV W4, PWM1
5445:                          if (!(StartingMoveCnt&&CriticalError))
007596  8183E4     MOV StartingMoveCnt, W4
007598  520FE0     SUB W4, #0x0, [W15]
00759A  320004     BRA Z, 0x75A4
00759C  214074     MOV #0x1407, W4
00759E  784214     MOV.B [W4], W4
0075A0  524FE0     SUB.B W4, #0x0, [W15]
0075A2  3A0009     BRA NZ, 0x75B6
5446:                           {
5447:                            if (DS)
0075A4  8096B5     MOV 0x12D6, W5
0075A6  208004     MOV #0x800, W4
0075A8  628204     AND W5, W4, W4
0075AA  520FE0     SUB W4, #0x0, [W15]
0075AC  320004     BRA Z, 0x75B6
5448:                            {
5449:                              DS=0;
0075AE  8096B4     MOV 0x12D6, W4
0075B0  A1B004     BCLR W4, #11
0075B2  8896B4     MOV W4, 0x12D6
5450:                              RdSensors();
0075B4  077D80     RCALL RdSensors
5451:                            }
5452:                           }   
5453:              
5454:                          }
5455:                          SensorlessMotorStart();
0075B6  02876C     CALL SensorlessMotorStart
0075B8  000001     NOP
5456:                          if ((!StateSensorlessMotorStart)&&(Spd1Res<3))
0075BA  231CD4     MOV #0x31CD, W4
0075BC  784214     MOV.B [W4], W4
0075BE  524FE0     SUB.B W4, #0x0, [W15]
0075C0  3A0005     BRA NZ, 0x75CC
0075C2  817F14     MOV Spd1Res, W4
0075C4  520FE2     SUB W4, #0x2, [W15]
0075C6  3C0002     BRA GT, 0x75CC
5457:                              PWM1=0;
0075C8  EB0200     CLR W4
0075CA  889284     MOV W4, PWM1
5458:                          if ((StateSensorlessMotorStart>6)&&(Spd1Res<(SensorllessSpdThreshold-2)))
0075CC  231CD4     MOV #0x31CD, W4
0075CE  784214     MOV.B [W4], W4
0075D0  524FE6     SUB.B W4, #0x6, [W15]
0075D2  360009     BRA LEU, 0x75E6
0075D4  2140B4     MOV #0x140B, W4
0075D6  784214     MOV.B [W4], W4
0075D8  FB8204     ZE W4, W4
0075DA  E98284     DEC2 W4, W5
0075DC  817F14     MOV Spd1Res, W4
0075DE  528F84     SUB W5, W4, [W15]
0075E0  340002     BRA LE, 0x75E6
5459:                              PWM1=0;
0075E2  EB0200     CLR W4
0075E4  889284     MOV W4, PWM1
5460:                      }
5461:              //SensorTSTKeys=4;
5462:              
5463:                  
5464:              //#ifdef TEST_PWM_KEYS
5465:                          if (TEST_PWM_KEYS)
0075E6  809655     MOV 0x12CA, W5
0075E8  204004     MOV #0x400, W4
0075EA  628204     AND W5, W4, W4
0075EC  520FE0     SUB W4, #0x0, [W15]
0075EE  32001D     BRA Z, 0x762A
5466:                          {
5467:                       //   SensorTSTKeys=1;
5468:                          
5469:                //          if (!Vector)
5470:                //          VectorInit();
5471:                         // SensorTSTKeys=2;
5472:                          
5473:                          
5474:                          
5475:                          
5476:                     if (Sensor1!=SensorTSTKeys)
0075F0  212464     MOV #0x1246, W4
0075F2  784294     MOV.B [W4], W5
0075F4  240224     MOV #0x4022, W4
0075F6  784214     MOV.B [W4], W4
0075F8  52CF84     SUB.B W5, W4, [W15]
0075FA  320012     BRA Z, 0x7620
5477:                      {
5478:                              Sensor1=SensorTSTKeys;
0075FC  240224     MOV #0x4022, W4
0075FE  784214     MOV.B [W4], W4
007600  212465     MOV #0x1246, W5
007602  784A84     MOV.B W4, [W5]
5479:                              StrongMode=1;
007604  8095F4     MOV 0x12BE, W4
007606  A0E004     BSET W4, #14
007608  8895F4     MOV W4, 0x12BE
5480:                      if (Sensor1_Prev!=Sensor1)
00760A  212474     MOV #0x1247, W4
00760C  784294     MOV.B [W4], W5
00760E  212464     MOV #0x1246, W4
007610  784214     MOV.B [W4], W4
007612  52CF84     SUB.B W5, W4, [W15]
007614  320005     BRA Z, 0x7620
5481:                      {
5482:                              Sensor1_Prev=Sensor1;
007616  212464     MOV #0x1246, W4
007618  784214     MOV.B [W4], W4
00761A  212475     MOV #0x1247, W5
00761C  784A84     MOV.B W4, [W5]
5483:                              Phases1();
00761E  070B5B     RCALL Phases1
5484:              
5485:                              
5486:                      }
5487:                      }
5488:                      DS=0;
007620  8096B4     MOV 0x12D6, W4
007622  A1B004     BCLR W4, #11
007624  8896B4     MOV W4, 0x12D6
5489:              
5490:                    //  PWM1=300;
5491:                      PWM1=DIRPWM1_TstKeys;
007626  809314     MOV DIRPWM1_TstKeys, W4
007628  889284     MOV W4, PWM1
5492:                          }
5493:              //#endif
5494:                              if (StartingMoveCnt)
00762A  8183E4     MOV StartingMoveCnt, W4
00762C  520FE0     SUB W4, #0x0, [W15]
00762E  320006     BRA Z, 0x763C
5495:                              {
5496:                               ECurr1Summ=0;
007630  B82260     MUL.UU W4, #0, W4
007632  89F564     MOV W4, ECurr1Summ
007634  89F575     MOV W5, 0x3EAE
5497:                                  DS=1;
007636  8096B4     MOV 0x12D6, W4
007638  A0B004     BSET W4, #11
00763A  8896B4     MOV W4, 0x12D6
5498:                              }
5499:                                  
5500:              #if defined VECTOR
5501:                          ZeroThroottle=1;
00763C  809744     MOV StatFlgs, W4
00763E  A08004     BSET W4, #8
007640  889744     MOV W4, StatFlgs
5502:              #endif
5503:                      
5504:                          if ((ZeroThroottle)&&(!Monocycle))
007642  809745     MOV StatFlgs, W5
007644  201004     MOV #0x100, W4
007646  628204     AND W5, W4, W4
007648  520FE0     SUB W4, #0x0, [W15]
00764A  320017     BRA Z, 0x767A
00764C  809745     MOV StatFlgs, W5
00764E  280004     MOV #0x8000, W4
007650  628204     AND W5, W4, W4
007652  520FE0     SUB W4, #0x0, [W15]
007654  3A0012     BRA NZ, 0x767A
5505:                          {
5506:                              if (ADCThroottleZero<200)
007656  809365     MOV ADCThroottleZero, W5
007658  200C74     MOV #0xC7, W4
00765A  528F84     SUB W5, W4, [W15]
00765C  3E000B     BRA GTU, 0x7674
007672  370007     BRA 0x7682
007678  370004     BRA 0x7682
007680  000000     NOP
5507:                              {
5508:                                  CntZeroThroottle++;
00765E  817F04     MOV CntZeroThroottle, W4
007660  E80204     INC W4, W4
007662  897F04     MOV W4, CntZeroThroottle
5509:                                  if (CntZeroThroottle>100)
007664  817F05     MOV CntZeroThroottle, W5
007666  200644     MOV #0x64, W4
007668  528F84     SUB W5, W4, [W15]
00766A  36000A     BRA LEU, 0x7680
5510:                                  {
5511:                                      CriticalError=CRERR_THROTTLE_ZERO_ERR;
00766C  214075     MOV #0x1407, W5
00766E  B3C024     MOV.B #0x2, W4
007670  784A84     MOV.B W4, [W5]
5512:                                  }
5513:                              }
5514:                              else
5515:                                  CntZeroThroottle=0;
007674  EB0200     CLR W4
007676  897F04     MOV W4, CntZeroThroottle
5516:                          } 
5517:                          else
5518:                                  CntZeroThroottle=0;
00767A  EB0200     CLR W4
00767C  897F04     MOV W4, CntZeroThroottle
00767E  370001     BRA 0x7682
5519:                      
5520:                              if (CriticalError)
007682  214074     MOV #0x1407, W4
007684  784214     MOV.B [W4], W4
007686  524FE0     SUB.B W4, #0x0, [W15]
007688  320015     BRA Z, 0x76B4
5521:                              {
5522:                                  if (CriticalError!=CRERR_UBAT_LOW)
00768A  214074     MOV #0x1407, W4
00768C  784214     MOV.B [W4], W4
00768E  524FE3     SUB.B W4, #0x3, [W15]
007690  320005     BRA Z, 0x769C
5523:                                  {
5524:                                  BuzzerOnEvent=1;
007692  2308F5     MOV #0x308F, W5
007694  B3C014     MOV.B #0x1, W4
007696  784A84     MOV.B W4, [W5]
5525:                                  BuzzerMacroOn;
007698  02BC12     CALL BzFuncOn
00769A  000001     NOP
5526:                                  }
5527:                                  if (!((CriticalError==CRERR_UBAT_LOW)&&(Monocycle)))
00769C  214074     MOV #0x1407, W4
00769E  784214     MOV.B [W4], W4
0076A0  524FE3     SUB.B W4, #0x3, [W15]
0076A2  3A0005     BRA NZ, 0x76AE
0076A4  809745     MOV StatFlgs, W5
0076A6  280004     MOV #0x8000, W4
0076A8  628204     AND W5, W4, W4
0076AA  520FE0     SUB W4, #0x0, [W15]
0076AC  3A0003     BRA NZ, 0x76B4
5528:                                  DS=1;
0076AE  8096B4     MOV 0x12D6, W4
0076B0  A0B004     BSET W4, #11
0076B2  8896B4     MOV W4, 0x12D6
5529:                              }
5530:                      
5531:                      
5532:                      
5533:                      
5534:                      
5535:                      
5536:                      AutoNastroyka_Func();
0076B4  02BEA4     CALL AutoNastroyka_Func
0076B6  000001     NOP
5537:                      
5538:                      
5539:                      
5540:                           ChangePWM1(PWM1);
0076B8  809284     MOV PWM1, W4
0076BA  780004     MOV W4, W0
0076BC  0710A5     RCALL ChangePWM1
5541:                          PWM1Prev=PWM1;
0076BE  809284     MOV PWM1, W4
0076C0  8892B4     MOV W4, PWM1Prev
5542:              
5543:                           if (Vector)
0076C2  809684     MOV Flgs5, W4
0076C4  620270     AND W4, #0x10, W4
0076C6  520FE0     SUB W4, #0x0, [W15]
0076C8  320005     BRA Z, 0x76D4
5544:                                  //if (T45Over)
5545:                                  {
5546:                              IEC1bits.CNIE = 0;
0076CA  A96822     BCLR IEC1, #3
5547:                          	IEC3bits.T8IE = 0;
0076CC  A96826     BCLR IEC3, #3
5548:                                  SVPWM1_SetPWM();
0076CE  07737E     RCALL SVPWM1_SetPWM
5549:                          	IEC3bits.T8IE = 1;
0076D0  A86826     BSET IEC3, #3
5550:                              IEC1bits.CNIE = 1;
0076D2  A86822     BSET IEC1, #3
5551:                                  }
5552:              
5553:              
5554:              
5555:              //FIN  PWM------------------------------
5556:              
5557:              if (DoNotTestBMS)
0076D4  809754     MOV StatFlgs1, W4
0076D6  620270     AND W4, #0x10, W4
0076D8  520FE0     SUB W4, #0x0, [W15]
0076DA  320043     BRA Z, 0x7762
5558:              {
5559:              #if !defined VECTOR
5560:              #if defined ISOLATED
5561:                  if (HvPacketUBat)
5562:              #endif
5563:              #endif
5564:                  {
5565:                      HvPacketUBat=0;
0076DC  8095F4     MOV 0x12BE, W4
0076DE  A17004     BCLR W4, #7
0076E0  8895F4     MOV W4, 0x12BE
5566:              #if defined NO_UBT
5567:                      UBT=100;
5568:              #endif
5569:                      
5570:                      
5571:                      if (UBT>UBtLim2)
0076E2  817E65     MOV UBT, W5
0076E4  818344     MOV UBtLim2, W4
0076E6  528F84     SUB W5, W4, [W15]
0076E8  36000C     BRA LEU, 0x7702
5572:                      {
5573:                          CntUBTLow=0;
0076EA  EB0200     CLR W4
0076EC  89BA44     MOV W4, CntUBTLow
5574:                          CntUBtLim1=0;
0076EE  EB0200     CLR W4
0076F0  89BA54     MOV W4, CntUBtLim1
5575:                          if (CriticalError==CRERR_UBAT_LOW)
0076F2  214074     MOV #0x1407, W4
0076F4  784214     MOV.B [W4], W4
0076F6  524FE3     SUB.B W4, #0x3, [W15]
0076F8  3A004D     BRA NZ, 0x7794
5576:                              CriticalError=0;
0076FA  214075     MOV #0x1407, W5
0076FC  EB4200     CLR.B W4
0076FE  784A84     MOV.B W4, [W5]
007700  370049     BRA 0x7794
5577:                          
5578:                      }
5579:                      else
5580:                      if (UBT>UBtLim1)
007702  817E65     MOV UBT, W5
007704  818334     MOV UBtLim1, W4
007706  528F84     SUB W5, W4, [W15]
007708  360014     BRA LEU, 0x7732
5581:                      {
5582:                          CntUBTLow=0;
00770A  EB0200     CLR W4
00770C  89BA44     MOV W4, CntUBTLow
5583:                          
5584:                          if (CntUBtLim1<100)
00770E  81BA55     MOV CntUBtLim1, W5
007710  200634     MOV #0x63, W4
007712  528F84     SUB W5, W4, [W15]
007714  3E0004     BRA GTU, 0x771E
5585:                          CntUBtLim1++;
007716  81BA54     MOV CntUBtLim1, W4
007718  E80204     INC W4, W4
00771A  89BA54     MOV W4, CntUBtLim1
00771C  37003B     BRA 0x7794
5586:                          else
5587:                          {
5588:                              CntUBtLim1=0;
00771E  EB0200     CLR W4
007720  89BA54     MOV W4, CntUBtLim1
5589:                          if (!Sounds)
007722  2124A4     MOV #0x124A, W4
007724  784214     MOV.B [W4], W4
007726  524FE0     SUB.B W4, #0x0, [W15]
007728  3A0035     BRA NZ, 0x7794
5590:                          SoundNum=4;
00772A  2124B5     MOV #0x124B, W5
00772C  B3C044     MOV.B #0x4, W4
00772E  784A84     MOV.B W4, [W5]
007730  370031     BRA 0x7794
5591:                          }
5592:                      }
5593:                      else
5594:                      {
5595:                          if (!Sounds)
007732  2124A4     MOV #0x124A, W4
007734  784214     MOV.B [W4], W4
007736  524FE0     SUB.B W4, #0x0, [W15]
007738  3A0003     BRA NZ, 0x7740
5596:                          SoundNum=5;
00773A  2124B5     MOV #0x124B, W5
00773C  B3C054     MOV.B #0x5, W4
00773E  784A84     MOV.B W4, [W5]
5597:              //#if !defined TEST_PWM_KEYS
5598:                          if (!TEST_PWM_KEYS)
007740  809655     MOV 0x12CA, W5
007742  204004     MOV #0x400, W4
007744  628204     AND W5, W4, W4
007746  520FE0     SUB W4, #0x0, [W15]
007748  3A0025     BRA NZ, 0x7794
5599:                          {
5600:                          if (CntUBTLow<500)
00774A  81BA45     MOV CntUBTLow, W5
00774C  201F34     MOV #0x1F3, W4
00774E  528F84     SUB W5, W4, [W15]
007750  3E0004     BRA GTU, 0x775A
5601:                              CntUBTLow++;
007752  81BA44     MOV CntUBTLow, W4
007754  E80204     INC W4, W4
007756  89BA44     MOV W4, CntUBTLow
007758  37001D     BRA 0x7794
5602:                          else
5603:                          CriticalError=CRERR_UBAT_LOW;
00775A  214075     MOV #0x1407, W5
00775C  B3C034     MOV.B #0x3, W4
00775E  784A84     MOV.B W4, [W5]
007760  370019     BRA 0x7794
5604:                          }
5605:              //#endif
5606:                      }
5607:                  }
5608:              }
5609:              
5610:              else
5611:              {
5612:              
5613:                      if (BMS_L==0)
007762  2124F4     MOV #0x124F, W4
007764  784214     MOV.B [W4], W4
007766  524FE0     SUB.B W4, #0x0, [W15]
007768  3A0002     BRA NZ, 0x776E
5614:                      {
5615:                          Nop();
00776A  000000     NOP
00776C  370013     BRA 0x7794
5616:                      }
5617:                      else
5618:                      if (BMS_L==1)
00776E  2124F4     MOV #0x124F, W4
007770  784214     MOV.B [W4], W4
007772  524FE1     SUB.B W4, #0x1, [W15]
007774  3A0008     BRA NZ, 0x7786
5619:                      {
5620:                          if (!Sounds)
007776  2124A4     MOV #0x124A, W4
007778  784214     MOV.B [W4], W4
00777A  524FE0     SUB.B W4, #0x0, [W15]
00777C  3A000B     BRA NZ, 0x7794
5621:                          SoundNum=4;
00777E  2124B5     MOV #0x124B, W5
007780  B3C044     MOV.B #0x4, W4
007782  784A84     MOV.B W4, [W5]
007784  370007     BRA 0x7794
5622:                      }
5623:                      else
5624:                      {
5625:                          if (!Sounds)
007786  2124A4     MOV #0x124A, W4
007788  784214     MOV.B [W4], W4
00778A  524FE0     SUB.B W4, #0x0, [W15]
00778C  3A0003     BRA NZ, 0x7794
5626:                          SoundNum=5;
00778E  2124B5     MOV #0x124B, W5
007790  B3C054     MOV.B #0x5, W4
007792  784A84     MOV.B W4, [W5]
5627:                      }
5628:              }
5629:              
5630:              
5631:              AlfaXResTmpAlm=AccXFl;
007794  80BD54     MOV AccXFl, W4
007796  895374     MOV W4, AlfaXResTmpAlm
5632:              AlfaYResTmpAlm=AccYFl;
007798  80BD64     MOV AccYFl, W4
00779A  895384     MOV W4, AlfaYResTmpAlm
5633:              AlfaZResTmpAlm=AccZFl;
00779C  80BD74     MOV AccZFl, W4
00779E  895394     MOV W4, AlfaZResTmpAlm
5634:              
5635:              int k;
5636:              long int tmpL=0;
0077A0  B82260     MUL.UU W4, #0, W4
0077A2  980714     MOV W4, [W14+2]
0077A4  980725     MOV W5, [W14+4]
5637:              
5638:              for (k=0;k<(ACC_AV_TTL-1);k++)
0077A6  EB0200     CLR W4
0077A8  780F04     MOV W4, [W14]
0077AA  37000B     BRA 0x77C2
0077C0  E80F1E     INC [W14], [W14]
0077C2  200FE4     MOV #0xFE, W4
0077C4  78029E     MOV [W14], W5
0077C6  528F84     SUB W5, W4, [W15]
0077C8  34FFF1     BRA LE, 0x77AC
5639:              AccXAv[k]=AccXAv[k+1];
0077AC  E8021E     INC [W14], W4
0077AE  420284     ADD W4, W4, W5
0077B0  238804     MOV #0x3880, W4
0077B2  428204     ADD W5, W4, W4
0077B4  780294     MOV [W4], W5
0077B6  78021E     MOV [W14], W4
0077B8  420304     ADD W4, W4, W6
0077BA  238804     MOV #0x3880, W4
0077BC  430204     ADD W6, W4, W4
0077BE  780A05     MOV W5, [W4]
5640:              AccXAv[ACC_AV_TTL-1]=AccXFl;
0077CA  80BD54     MOV AccXFl, W4
0077CC  89D3F4     MOV W4, 0x3A7E
5641:              
5642:              for (k=0;k<ACC_AV_TTL;k++)
0077CE  EB0200     CLR W4
0077D0  780F04     MOV W4, [W14]
0077D2  37000D     BRA 0x77EE
0077EC  E80F1E     INC [W14], [W14]
0077EE  200FF4     MOV #0xFF, W4
0077F0  78029E     MOV [W14], W5
0077F2  528F84     SUB W5, W4, [W15]
0077F4  34FFEF     BRA LE, 0x77D4
5643:                  tmpL=tmpL+(long int)AccXAv[k];
0077D4  78021E     MOV [W14], W4
0077D6  420284     ADD W4, W4, W5
0077D8  238804     MOV #0x3880, W4
0077DA  428204     ADD W5, W4, W4
0077DC  780214     MOV [W4], W4
0077DE  DEA2CF     ASR W4, #15, W5
0077E0  90031E     MOV [W14+2], W6
0077E2  9003AE     MOV [W14+4], W7
0077E4  420206     ADD W4, W6, W4
0077E6  4A8287     ADDC W5, W7, W5
0077E8  980714     MOV W4, [W14+2]
0077EA  980725     MOV W5, [W14+4]
5644:              AccXAvRes=(int)(tmpL>>ACC_AV_SHFT);
0077F6  90021E     MOV [W14+2], W4
0077F8  9002AE     MOV [W14+4], W5
0077FA  DD2B48     SL W5, #8, W6
0077FC  DE2248     LSR W4, #8, W4
0077FE  730204     IOR W6, W4, W4
007800  DEAAC8     ASR W5, #8, W5
007802  780204     MOV W4, W4
007804  889544     MOV W4, AccXAvRes
5645:              
5646:              
5647:              tmpL=0;
007806  B82260     MUL.UU W4, #0, W4
007808  980714     MOV W4, [W14+2]
00780A  980725     MOV W5, [W14+4]
5648:              for (k=0;k<(ACC_AV_TTL-1);k++)
00780C  EB0200     CLR W4
00780E  780F04     MOV W4, [W14]
007810  37000B     BRA 0x7828
007826  E80F1E     INC [W14], [W14]
007828  200FE4     MOV #0xFE, W4
00782A  78029E     MOV [W14], W5
00782C  528F84     SUB W5, W4, [W15]
00782E  34FFF1     BRA LE, 0x7812
5649:              AccYAv[k]=AccYAv[k+1];
007812  E8021E     INC [W14], W4
007814  420284     ADD W4, W4, W5
007816  23A804     MOV #0x3A80, W4
007818  428204     ADD W5, W4, W4
00781A  780294     MOV [W4], W5
00781C  78021E     MOV [W14], W4
00781E  420304     ADD W4, W4, W6
007820  23A804     MOV #0x3A80, W4
007822  430204     ADD W6, W4, W4
007824  780A05     MOV W5, [W4]
5650:              AccYAv[ACC_AV_TTL-1]=AccYFl;
007830  80BD64     MOV AccYFl, W4
007832  89E3F4     MOV W4, 0x3C7E
5651:              
5652:              for (k=0;k<ACC_AV_TTL;k++)
007834  EB0200     CLR W4
007836  780F04     MOV W4, [W14]
007838  37000D     BRA 0x7854
007852  E80F1E     INC [W14], [W14]
007854  200FF4     MOV #0xFF, W4
007856  78029E     MOV [W14], W5
007858  528F84     SUB W5, W4, [W15]
00785A  34FFEF     BRA LE, 0x783A
5653:                  tmpL=tmpL+AccYAv[k];
00783A  78021E     MOV [W14], W4
00783C  420284     ADD W4, W4, W5
00783E  23A804     MOV #0x3A80, W4
007840  428204     ADD W5, W4, W4
007842  780214     MOV [W4], W4
007844  DEA2CF     ASR W4, #15, W5
007846  90031E     MOV [W14+2], W6
007848  9003AE     MOV [W14+4], W7
00784A  420206     ADD W4, W6, W4
00784C  4A8287     ADDC W5, W7, W5
00784E  980714     MOV W4, [W14+2]
007850  980725     MOV W5, [W14+4]
5654:              AccYAvRes=(int)(tmpL>>ACC_AV_SHFT);
00785C  90021E     MOV [W14+2], W4
00785E  9002AE     MOV [W14+4], W5
007860  DD2948     SL W5, #8, W2
007862  DE2248     LSR W4, #8, W4
007864  710204     IOR W2, W4, W4
007866  DEAAC8     ASR W5, #8, W5
007868  780204     MOV W4, W4
00786A  889554     MOV W4, AccYAvRes
5655:              
5656:              
5657:              tmpL=0;
00786C  B82260     MUL.UU W4, #0, W4
00786E  980714     MOV W4, [W14+2]
007870  980725     MOV W5, [W14+4]
5658:              for (k=0;k<(ACC_AV_TTL-1);k++)
007872  EB0200     CLR W4
007874  780F04     MOV W4, [W14]
007876  37000B     BRA 0x788E
00788C  E80F1E     INC [W14], [W14]
00788E  200FE4     MOV #0xFE, W4
007890  78029E     MOV [W14], W5
007892  528F84     SUB W5, W4, [W15]
007894  34FFF1     BRA LE, 0x7878
5659:              AccZAv[k]=AccZAv[k+1];
007878  E8021E     INC [W14], W4
00787A  420284     ADD W4, W4, W5
00787C  23C804     MOV #0x3C80, W4
00787E  428204     ADD W5, W4, W4
007880  780294     MOV [W4], W5
007882  78021E     MOV [W14], W4
007884  420304     ADD W4, W4, W6
007886  23C804     MOV #0x3C80, W4
007888  430204     ADD W6, W4, W4
00788A  780A05     MOV W5, [W4]
5660:              AccZAv[ACC_AV_TTL-1]=AccZFl;
007896  80BD74     MOV AccZFl, W4
007898  89F3F4     MOV W4, 0x3E7E
5661:              
5662:              for (k=0;k<ACC_AV_TTL;k++)
00789A  EB0200     CLR W4
00789C  780F04     MOV W4, [W14]
00789E  37000D     BRA 0x78BA
0078B8  E80F1E     INC [W14], [W14]
0078BA  200FF4     MOV #0xFF, W4
0078BC  78029E     MOV [W14], W5
0078BE  528F84     SUB W5, W4, [W15]
0078C0  34FFEF     BRA LE, 0x78A0
5663:                   tmpL=tmpL+AccZAv[k];
0078A0  78021E     MOV [W14], W4
0078A2  420284     ADD W4, W4, W5
0078A4  23C804     MOV #0x3C80, W4
0078A6  428204     ADD W5, W4, W4
0078A8  780214     MOV [W4], W4
0078AA  DEA2CF     ASR W4, #15, W5
0078AC  90031E     MOV [W14+2], W6
0078AE  9003AE     MOV [W14+4], W7
0078B0  420206     ADD W4, W6, W4
0078B2  4A8287     ADDC W5, W7, W5
0078B4  980714     MOV W4, [W14+2]
0078B6  980725     MOV W5, [W14+4]
5664:              AccZAvRes=(int)(tmpL>>ACC_AV_SHFT);
0078C2  90021E     MOV [W14+2], W4
0078C4  9002AE     MOV [W14+4], W5
0078C6  DD2B48     SL W5, #8, W6
0078C8  DE2248     LSR W4, #8, W4
0078CA  730204     IOR W6, W4, W4
0078CC  DEAAC8     ASR W5, #8, W5
0078CE  780204     MOV W4, W4
0078D0  889564     MOV W4, AccZAvRes
5665:              
5666:              
5667:              
5668:              
5669:              if (AlarmOn)
0078D2  809635     MOV 0x12C6, W5
0078D4  240004     MOV #0x4000, W4
0078D6  628204     AND W5, W4, W4
0078D8  520FE0     SUB W4, #0x0, [W15]
0078DA  320001     BRA Z, 0x78DE
5670:              {
5671:                  Alm();
0078DC  076119     RCALL Alm
5672:              }
5673:              
5674:                  CntSamples++;
0078DE  8099E4     MOV CntSamples, W4
0078E0  8099F5     MOV 0x133E, W5
0078E2  420261     ADD W4, #0x1, W4
0078E4  4A82E0     ADDC W5, #0x0, W5
0078E6  8899E4     MOV W4, CntSamples
0078E8  8899F5     MOV W5, 0x133E
5675:              
5676:                      SndPhDeb200();
0078EA  0279F2     CALL SndPhDeb200
0078EC  000001     NOP
5677:                      SndPhDeb400();
0078EE  027A9A     CALL SndPhDeb400
0078F0  000001     NOP
5678:              
5679:              
5680:                      SndNeutralDeb200();
0078F2  027B3C     CALL SndNeutralDeb200
0078F4  000001     NOP
5681:                      SndNeutralDeb400();
0078F6  027BE4     CALL SndNeutralDeb400
0078F8  000001     NOP
5682:              
5683:              
5684:                  TrmFlashMass();
0078FA  075B92     RCALL TrmFlashMass
5685:                  TrmFlashMass2();
0078FC  075BE2     RCALL TrmFlashMass2
5686:                  SendStateOfSinTest();
0078FE  02CA62     CALL SendStateOfSinTest
007900  000001     NOP
5687:                  TrmErrorsHC05();
007902  075C2E     RCALL TrmErrorsHC05
5688:                  SendProfileMassToPC();
007904  02B78E     CALL SendProfileMassToPC
007906  000001     NOP
5689:                  SendFlashMassToPC();
007908  02B618     CALL SendFlashMassToPC
00790A  000001     NOP
5690:                  SendFlashMass2ToPC();
00790C  02B6D2     CALL SendFlashMass2ToPC
00790E  000001     NOP
5691:                  CmdOK();
007910  02B848     CALL CmdOK
007912  000001     NOP
5692:                  CmdOK2();
007914  02B8DA     CALL CmdOK2
007916  000001     NOP
5693:                  CmdOK3();
007918  02B96C     CALL CmdOK3
00791A  000001     NOP
5694:                  CmdSendUnlockMSG();
00791C  02BA60     CALL CmdSendUnlockMSG
00791E  000001     NOP
5695:                  TrmDataPacketHC05();
007920  074F69     RCALL TrmDataPacketHC05
5696:              
5697:              
5698:                  if (_2WDMode==1)
007922  230C94     MOV #0x30C9, W4
007924  784214     MOV.B [W4], W4
007926  524FE1     SUB.B W4, #0x1, [W15]
007928  3A0002     BRA NZ, 0x792E
5699:                  TrmControls_U3();
00792A  02D708     CALL TrmControls_U3
00792C  000001     NOP
5700:              
5701:                  if (_2WDMode==2)
00792E  230C94     MOV #0x30C9, W4
007930  784214     MOV.B [W4], W4
007932  524FE2     SUB.B W4, #0x2, [W15]
007934  3A0002     BRA NZ, 0x793A
5702:                  RecSlave2WDControls();
007936  02DD3E     CALL RecSlave2WDControls
007938  000001     NOP
5703:              
5704:                  
5705:                  PI_Chager();
00793A  02D39A     CALL PI_Chager
00793C  000001     NOP
5706:              
5707:                  if (BuzzerOnAlways)
00793E  809635     MOV 0x12C6, W5
007940  201004     MOV #0x100, W4
007942  628204     AND W5, W4, W4
007944  520FE0     SUB W4, #0x0, [W15]
007946  320005     BRA Z, 0x7952
5708:                      {
5709:                      BuzzerOnEvent=2;
007948  2308F5     MOV #0x308F, W5
00794A  B3C024     MOV.B #0x2, W4
00794C  784A84     MOV.B W4, [W5]
5710:                      BuzzerMacroOn//Buzzer=1;
00794E  02BC12     CALL BzFuncOn
007950  000001     NOP
5711:                      }
5712:              
5713:                  
5714:                                  if (NoSecret)
007952  809665     MOV Flgs4, W5
007954  240004     MOV #0x4000, W4
007956  628204     AND W5, W4, W4
007958  520FE0     SUB W4, #0x0, [W15]
00795A  320005     BRA Z, 0x7966
5715:                      {
5716:                      BuzzerOnEvent=3;
00795C  2308F5     MOV #0x308F, W5
00795E  B3C034     MOV.B #0x3, W4
007960  784A84     MOV.B W4, [W5]
5717:                      BuzzerMacroOn//Buzzer=1;
007962  02BC12     CALL BzFuncOn
007964  000001     NOP
5718:                      }
5719:              
5720:              //Light=0;
5721:              
5722:              
5723:              //                         TST_PIN=0;
5724:                
5725:              
5726:                      
5727:              #if defined SERVICE
5728:                      if (TestU3ChangeSpd)
5729:              #else
5730:                          if (0)
5731:              #endif
5732:                      {
5733:                      if (!StartCnt)
5734:                          {
5735:                          TestU3ChangeSpd=0;
5736:                          U4_9600_On(); 
5737:                          CntU3Off=700;
5738:                          }
5739:                      }
5740:                                     if (CntU3Off)
007966  817EB4     MOV CntU3Off, W4
007968  520FE0     SUB W4, #0x0, [W15]
00796A  32000F     BRA Z, 0x798A
5741:                                     {
5742:                                         CntU3Off--;
00796C  817EB4     MOV CntU3Off, W4
00796E  E90204     DEC W4, W4
007970  897EB4     MOV W4, CntU3Off
5743:                                         if (!CntU3Off)
007972  817EB4     MOV CntU3Off, W4
007974  520FE0     SUB W4, #0x0, [W15]
007976  3A0009     BRA NZ, 0x798A
5744:                                         {
5745:                                             if (!_2WDMode)
007978  230C94     MOV #0x30C9, W4
00797A  784214     MOV.B [W4], W4
00797C  524FE0     SUB.B W4, #0x0, [W15]
00797E  3A0005     BRA NZ, 0x798A
5746:                                              U3MODEbits.UARTEN = 0;
007980  A9E251     BCLR 0x251, #7
007982  370003     BRA 0x798A
5747:                                         }
5748:                                     }
5749:              
5750:              
5751:              
5752:              }
00798A  BE054F     MOV.D [--W15], W10
00798C  BE044F     MOV.D [--W15], W8
00798E  FA8000     ULNK
007990  060000     RETURN
5753:              float kdkj;
5754:              
5755:              void InitSegAll(void)
5756:              {
007992  FA0000     LNK #0x0
5757:                  Flgs4.Flags=0;
007994  B82260     MUL.UU W4, #0, W4
007996  889664     MOV W4, Flgs4
007998  889675     MOV W5, 0x12CE
5758:                  Flgs5.Flags=0;
00799A  B82260     MUL.UU W4, #0, W4
00799C  889684     MOV W4, Flgs5
00799E  889695     MOV W5, 0x12D2
5759:              
5760:              
5761:                 kdkj=ImpToKmH;
0079A0  2D7C74     MOV #0xD7C7, W4
0079A2  23EA75     MOV #0x3EA7, W5
0079A4  8A0694     MOV W4, kdkj
0079A6  8A06A5     MOV W5, 0x40D4
5762:                 kdkj=ImpNa10Metr;
0079A8  245714     MOV #0x4571, W4
0079AA  244895     MOV #0x4489, W5
0079AC  8A0694     MOV W4, kdkj
0079AE  8A06A5     MOV W5, 0x40D4
5763:                 kdkj=_CmImp;
0079B0  21D774     MOV #0x1D77, W4
0079B2  23F695     MOV #0x3F69, W5
0079B4  8A0694     MOV W4, kdkj
0079B6  8A06A5     MOV W5, 0x40D4
5764:              
5765:                  StartCnt=128;
0079B8  216D15     MOV #0x16D1, W5
0079BA  B3C804     MOV.B #0x80, W4
0079BC  784A84     MOV.B W4, [W5]
5766:              
5767:                  HvOptions=0;
0079BE  809664     MOV Flgs4, W4
0079C0  A18004     BCLR W4, #8
0079C2  889664     MOV W4, Flgs4
5768:              
5769:                  
5770:              
5771:                 InitSensorsNear();
0079C4  0762D0     RCALL InitSensorsNear
5772:                  OSC_Init();
0079C6  0701A4     RCALL OSC_Init
5773:                 InitPorts();
0079C8  0701B5     RCALL InitPorts
5774:                  InitBLDCPorts();
0079CA  07095B     RCALL InitBLDCPorts
5775:              
5776:              //    T3Init();
5777:                  //T5Init();
5778:                  //T7Init();
5779:                  T9Init();
0079CC  070656     RCALL T9Init
5780:                  //T4_5Init();
5781:              
5782:                  CNT_U=500;
0079CE  201F44     MOV #0x1F4, W4
0079D0  89B8C4     MOV W4, CNT_U
5783:              
5784:              
5785:                 InitPort_U4();
0079D2  074DE7     RCALL InitPort_U4
5786:                UARTInit_U4();
0079D4  074D7E     RCALL UARTInit_U4
5787:              #if !defined VECTOR
5788:              #if defined ISOLATED    
5789:                  KEY_BT=0;
5790:              #else
5791:                  KEY_BT=1;
5792:              #endif
5793:              #else
5794:                  KEY_BT=0;
0079D6  A9EE64     BCLR LATG, #7
5795:              #endif
5796:                  
5797:                 InitOC4();
0079D8  072B38     RCALL InitOC4
5798:                // InitOC1();
5799:              //   InitOC2();
5800:              #if defined VECTORS
5801:                 InitOC3();
5802:              #endif
5803:              
5804:              //    InitPWM();
5805:              
5806:              
5807:                 //InitAccSPI();
5808:                 InitGyroSPI();
0079DA  072BDF     RCALL InitGyroSPI
5809:              
5810:              
5811:                 T3Init();
0079DC  07066D     RCALL T3Init
5812:                 
5813:              
5814:                  InitFlash();
0079DE  072D01     RCALL InitFlash
5815:              
5816:              
5817:              
5818:              
5819:              
5820:                  
5821:                  OdometrSectorNumConst=50;
0079E0  200324     MOV #0x32, W4
0079E2  200005     MOV #0x0, W5
0079E4  898454     MOV W4, OdometrSectorNumConst
0079E6  898465     MOV W5, 0x308C
5822:              
5823:                  OdometrCnt=250;
0079E8  230785     MOV #0x3078, W5
0079EA  B3CFA4     MOV.B #0xFA, W4
0079EC  784A84     MOV.B W4, [W5]
5824:                  OdometrErased=0;
0079EE  809604     MOV Flgs1, W4
0079F0  A13004     BCLR W4, #3
0079F2  889604     MOV W4, Flgs1
5825:              
5826:              
5827:              
5828:              
5829:              
5830:                  ADC1Init();
0079F4  0701DF     RCALL ADC1Init
5831:                  
5832:              
5833:                  //Comparator3_Init();
5834:                  Comparator2_Init();
0079F6  074084     RCALL Comparator2_Init
5835:                  Sensor1=0;
0079F8  212465     MOV #0x1246, W5
0079FA  EB4200     CLR.B W4
0079FC  784A84     MOV.B W4, [W5]
5836:                  Sensor1_Prev=0;
0079FE  212475     MOV #0x1247, W5
007A00  EB4200     CLR.B W4
007A02  784A84     MOV.B W4, [W5]
5837:              
5838:                  Sensor2=0;
007A04  2124C5     MOV #0x124C, W5
007A06  EB4200     CLR.B W4
007A08  784A84     MOV.B W4, [W5]
5839:                  Sensor2_Prev=0;
007A0A  2124D5     MOV #0x124D, W5
007A0C  EB4200     CLR.B W4
007A0E  784A84     MOV.B W4, [W5]
5840:              
5841:                  UDPOpened=0;
007A10  8095E4     MOV Flgs, W4
007A12  A14004     BCLR W4, #4
007A14  8895E4     MOV W4, Flgs
5842:              
5843:                  CntUDPFill=0;
007A16  EB0200     CLR W4
007A18  889324     MOV W4, CntUDPFill
5844:                  CntUDPFillConst=10;
007A1A  2000A4     MOV #0xA, W4
007A1C  889334     MOV W4, CntUDPFillConst
5845:                  CntSamples=0;
007A1E  B82260     MUL.UU W4, #0, W4
007A20  8899E4     MOV W4, CntSamples
007A22  8899F5     MOV W5, 0x133E
5846:                  ErrorCode=0;
007A24  216D05     MOV #0x16D0, W5
007A26  EB4200     CLR.B W4
007A28  784A84     MOV.B W4, [W5]
5847:                  TiltTimoutConst=50;
007A2A  216D45     MOV #0x16D4, W5
007A2C  B3C324     MOV.B #0x32, W4
007A2E  784A84     MOV.B W4, [W5]
5848:                  TiltTimoutCnt=TiltTimoutConst;
007A30  216D44     MOV #0x16D4, W4
007A32  784214     MOV.B [W4], W4
007A34  216D35     MOV #0x16D3, W5
007A36  784A84     MOV.B W4, [W5]
5849:              
5850:                  TiltZad=0;
007A38  B82260     MUL.UU W4, #0, W4
007A3A  8955D4     MOV W4, TiltZad
007A3C  8955E5     MOV W5, 0x2ABC
5851:                  //TiltYCorr=2;
5852:                  ESumm=0;
007A3E  B82260     MUL.UU W4, #0, W4
007A40  889B84     MOV W4, ESumm
007A42  889B95     MOV W5, 0x1372
5853:              
5854:                  //KpMustBe=100;
5855:                  Kp=50;
007A44  200004     MOV #0x0, W4
007A46  242485     MOV #0x4248, W5
007A48  889AE4     MOV W4, Kp
007A4A  889AF5     MOV W5, 0x135E
5856:                  
5857:                  //Kd=0;
5858:                  //Ki=0;
5859:              
5860:                  PhaseCnt1=0;
007A4C  B82260     MUL.UU W4, #0, W4
007A4E  889A04     MOV W4, PhaseCnt1
007A50  889A15     MOV W5, 0x1342
5861:                  PhaseCnt2=0;
007A52  B82260     MUL.UU W4, #0, W4
007A54  889A24     MOV W4, PhaseCnt2
007A56  889A35     MOV W5, 0x1346
5862:                  CntNoBalance=0;
007A58  230C45     MOV #0x30C4, W5
007A5A  EB4200     CLR.B W4
007A5C  784A84     MOV.B W4, [W5]
5863:              
5864:              
5865:              Transmitting_U3=0;
007A5E  8095E4     MOV Flgs, W4
007A60  A10004     BCLR W4, #0
007A62  8895E4     MOV W4, Flgs
5866:              GettingPacketU3_FL=0;
007A64  8095E4     MOV Flgs, W4
007A66  A11004     BCLR W4, #1
007A68  8895E4     MOV W4, Flgs
5867:              CHK_Err_U3=0;
007A6A  8095E4     MOV Flgs, W4
007A6C  A12004     BCLR W4, #2
007A6E  8895E4     MOV W4, Flgs
5868:              HvDataPacketU3_FL=0;
007A70  8095E4     MOV Flgs, W4
007A72  A13004     BCLR W4, #3
007A74  8895E4     MOV W4, Flgs
5869:              UDPOpened=0;
007A76  8095E4     MOV Flgs, W4
007A78  A14004     BCLR W4, #4
007A7A  8895E4     MOV W4, Flgs
5870:              MustTrm=0;
007A7C  8095E4     MOV Flgs, W4
007A7E  A15004     BCLR W4, #5
007A80  8895E4     MOV W4, Flgs
5871:              NoBalance=1;
007A82  8095E4     MOV Flgs, W4
007A84  A0B004     BSET W4, #11
007A86  8895E4     MOV W4, Flgs
5872:              
5873:              
5874:              
5875:              
5876:              NoBalanceCode=2;
007A88  216D25     MOV #0x16D2, W5
007A8A  B3C024     MOV.B #0x2, W4
007A8C  784A84     MOV.B W4, [W5]
5877:              PrevForward1=0;
007A8E  8095E4     MOV Flgs, W4
007A90  A19004     BCLR W4, #9
007A92  8895E4     MOV W4, Flgs
5878:              PrevForward2=0;
007A94  8095E4     MOV Flgs, W4
007A96  A1A004     BCLR W4, #10
007A98  8895E4     MOV W4, Flgs
5879:              HvAccData=0;
007A9A  8095E4     MOV Flgs, W4
007A9C  A1D004     BCLR W4, #13
007A9E  8895E4     MOV W4, Flgs
5880:              HvGyroData=0;
007AA0  8095E4     MOV Flgs, W4
007AA2  A1E004     BCLR W4, #14
007AA4  8895E4     MOV W4, Flgs
5881:              Starting=1;
007AA6  8095E4     MOV Flgs, W4
007AA8  A0F004     BSET W4, #15
007AAA  8895E4     MOV W4, Flgs
5882:              
5883:              CalibrateAcc=0;
007AAC  8095F4     MOV 0x12BE, W4
007AAE  A11004     BCLR W4, #1
007AB0  8895F4     MOV W4, 0x12BE
5884:              MustTrmFlashMass=0;
007AB2  8095F4     MOV 0x12BE, W4
007AB4  A12004     BCLR W4, #2
007AB6  8895F4     MOV W4, 0x12BE
5885:              SendPhase=0;
007AB8  8095F4     MOV 0x12BE, W4
007ABA  A14004     BCLR W4, #4
007ABC  8895F4     MOV W4, 0x12BE
5886:              TakingPacketUbat=0;
007ABE  8095F4     MOV 0x12BE, W4
007AC0  A16004     BCLR W4, #6
007AC2  8895F4     MOV W4, 0x12BE
5887:              HvPacketUBat=0;
007AC4  8095F4     MOV 0x12BE, W4
007AC6  A17004     BCLR W4, #7
007AC8  8895F4     MOV W4, 0x12BE
5888:              CanSensor1=1;
007ACA  8095F4     MOV 0x12BE, W4
007ACC  A09004     BSET W4, #9
007ACE  8895F4     MOV W4, 0x12BE
5889:              CanSensor2=1;
007AD0  8095F4     MOV 0x12BE, W4
007AD2  A0A004     BSET W4, #10
007AD4  8895F4     MOV W4, 0x12BE
5890:              HvSpd1=0;
007AD6  8095F4     MOV 0x12BE, W4
007AD8  A1B004     BCLR W4, #11
007ADA  8895F4     MOV W4, 0x12BE
5891:              
5892:              MeasuringSpd1=0;
007ADC  8095F4     MOV 0x12BE, W4
007ADE  A1D004     BCLR W4, #13
007AE0  8895F4     MOV W4, 0x12BE
5893:              
5894:              
5895:                  //SoundNum=11;
5896:              
5897:              
5898:              StartingMoveCnt=400;
007AE2  201904     MOV #0x190, W4
007AE4  8983E4     MOV W4, StartingMoveCnt
5899:              StartingMove=0;
007AE6  809604     MOV Flgs1, W4
007AE8  A15004     BCLR W4, #5
007AEA  889604     MOV W4, Flgs1
5900:              
5901:              But4Pressed=0;
007AEC  809604     MOV Flgs1, W4
007AEE  A17004     BCLR W4, #7
007AF0  889604     MOV W4, Flgs1
5902:              ButBPressed=0;
007AF2  809604     MOV Flgs1, W4
007AF4  A18004     BCLR W4, #8
007AF6  889604     MOV W4, Flgs1
5903:              HvBt4=0;
007AF8  809604     MOV Flgs1, W4
007AFA  A19004     BCLR W4, #9
007AFC  889604     MOV W4, Flgs1
5904:              
5905:              Drebezg4=0;
007AFE  809604     MOV Flgs1, W4
007B00  A1B004     BCLR W4, #11
007B02  889604     MOV W4, Flgs1
5906:              //DrebezgB=0;
5907:              HvToChangeNumSpdLimFl=0;
007B04  809604     MOV Flgs1, W4
007B06  A1D004     BCLR W4, #13
007B08  889604     MOV W4, Flgs1
5908:              Stopping=0;
007B0A  809664     MOV Flgs4, W4
007B0C  A17004     BCLR W4, #7
007B0E  889664     MOV W4, Flgs4
5909:              PreStopping=0;
007B10  809614     MOV 0x12C2, W4
007B12  A1B004     BCLR W4, #11
007B14  889614     MOV W4, 0x12C2
5910:              
5911:              HvToPrg=0;
007B16  809614     MOV 0x12C2, W4
007B18  A12004     BCLR W4, #2
007B1A  889614     MOV W4, 0x12C2
5912:              RecOdometrFl=0;
007B1C  809604     MOV Flgs1, W4
007B1E  A16004     BCLR W4, #6
007B20  889604     MOV W4, Flgs1
5913:              NoValidTilt=0;
007B22  809614     MOV 0x12C2, W4
007B24  A15004     BCLR W4, #5
007B26  889614     MOV W4, 0x12C2
5914:              ErrorTiltFl=0;
007B28  809614     MOV 0x12C2, W4
007B2A  A17004     BCLR W4, #7
007B2C  889614     MOV W4, 0x12C2
5915:              OnTransmittHC05=0;
007B2E  809614     MOV 0x12C2, W4
007B30  A19004     BCLR W4, #9
007B32  889614     MOV W4, 0x12C2
5916:              HvReplyHC05=0;
007B34  809614     MOV 0x12C2, W4
007B36  A1A004     BCLR W4, #10
007B38  889614     MOV W4, 0x12C2
5917:              ChangingTiltSensor=0;
007B3A  809624     MOV Flgs2, W4
007B3C  A14004     BCLR W4, #4
007B3E  889624     MOV W4, Flgs2
5918:              //NoAutoTrm=1;
5919:              
5920:              
5921:              
5922:              
5923:              
5924:              
5925:              
5926:                      CntRecAcc=2;
007B40  217CE5     MOV #0x17CE, W5
007B42  B3C024     MOV.B #0x2, W4
007B44  784A84     MOV.B W4, [W5]
5927:                      CntRecGyro=2;
007B46  218305     MOV #0x1830, W5
007B48  B3C024     MOV.B #0x2, W4
007B4A  784A84     MOV.B W4, [W5]
5928:                      
5929:              #if !defined LSM6DS33
5930:                      
5931:              #if !defined VECTOR_MPU_6000
5932:                  Acc_txBuf[0] = 0x20|0x40;//Addr | autoincrement
5933:                  Acc_txBuf[1] = 0x27;
5934:              
5935:                  TxRxSPI_ACC(2);
5936:                  while (!HvAccData);
5937:                       HvAccData=0;
5938:              #endif
5939:              #if !defined VECTOR
5940:                  Gyro_txBuf[0] = 0x20|0x40;//Addr | autoincrement
5941:                  Gyro_txBuf[1] = 0x3f;
5942:                  TxRxSPI_GYRO(2);
5943:                  while (!HvGyroData);
5944:                       HvGyroData=0;
5945:              
5946:                  Gyro_txBuf[0] = 0x24|0x40;//Addr | autoincrement
5947:                  Gyro_txBuf[1] = 0x80;
5948:                  TxRxSPI_GYRO(2);
5949:                  while (!HvGyroData);
5950:                       HvGyroData=0;
5951:              
5952:              #else
5953:                       HvToTest=1;
007B4C  8096B4     MOV 0x12D6, W4
007B4E  A08004     BSET W4, #8
007B50  8896B4     MOV W4, 0x12D6
5954:                       MPU60000Init();
007B52  02CFC0     CALL MPU60000Init
007B54  000001     NOP
5955:              #endif
5956:              
5957:              #else
5958:                      LSM6DS33_Init();
5959:              #endif
5960:                  
5961:              
5962:                  TiltYSumm=0;
007B56  B82260     MUL.UU W4, #0, W4
007B58  895454     MOV W4, TiltYSumm
007B5A  895465     MOV W5, 0x2A8C
5963:              
5964:                  CntTiltYSumm=0;
007B5C  B82260     MUL.UU W4, #0, W4
007B5E  895474     MOV W4, CntTiltYSumm
007B60  895485     MOV W5, 0x2A90
5965:              
5966:              
5967:                  ReadOdometr();
007B62  074025     RCALL ReadOdometr
5968:                  ReadErrors();
007B64  074BA5     RCALL ReadErrors
5969:              
5970:              
5971:                  if (ReadOptions())
007B66  072D97     RCALL ReadOptions
007B68  784200     MOV.B W0, W4
007B6A  524FE0     SUB.B W4, #0x0, [W15]
007B6C  320003     BRA Z, 0x7B74
5972:                      HvOptions=1;
007B6E  809664     MOV Flgs4, W4
007B70  A08004     BSET W4, #8
007B72  889664     MOV W4, Flgs4
5973:              
5974:                  if (Monocycle)
007B74  809745     MOV StatFlgs, W5
007B76  280004     MOV #0x8000, W4
007B78  628204     AND W5, W4, W4
007B7A  520FE0     SUB W4, #0x0, [W15]
007B7C  320003     BRA Z, 0x7B84
5975:                      MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
007B7E  20B544     MOV #0xB54, W4
007B80  8892D4     MOV W4, MAX_PWM_CONST
007B82  370002     BRA 0x7B88
5976:                  else
5977:                  {
5978:                      if (1)//(PWM32Bits)
5979:                      MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
007B84  20B544     MOV #0xB54, W4
007B86  8892D4     MOV W4, MAX_PWM_CONST
5980:                      else
5981:                      MAX_PWM_CONST=MAX_PWM_CONST_EBIKE;
5982:                  }
5983:                  
5984:                  
5985:                  for (l=0;l<CURRMASS_SIZE;l++)
007B88  EB0200     CLR W4
007B8A  89C334     MOV W4, l
007B8C  370009     BRA 0x7BA0
007B9A  81C334     MOV l, W4
007B9C  E80204     INC W4, W4
007B9E  89C334     MOV W4, l
007BA0  81C335     MOV l, W5
007BA2  2003F4     MOV #0x3F, W4
007BA4  528F84     SUB W5, W4, [W15]
007BA6  36FFF3     BRA LEU, 0x7B8E
5986:                  Curr1Mass[l]=ZeroCurr1;
007B8E  81C334     MOV l, W4
007B90  809535     MOV ZeroCurr1, W5
007B92  420304     ADD W4, W4, W6
007B94  237E64     MOV #0x37E6, W4
007B96  430204     ADD W6, W4, W4
007B98  780A05     MOV W5, [W4]
5987:              
5988:                  AccXFilter=0;
007BA8  B82260     MUL.UU W4, #0, W4
007BAA  897FF4     MOV W4, AccXFilter
007BAC  898005     MOV W5, 0x3000
5989:                  AccYFilter=0;
007BAE  B82260     MUL.UU W4, #0, W4
007BB0  898014     MOV W4, AccYFilter
007BB2  898025     MOV W5, 0x3004
5990:                  AccZFilter=0;
007BB4  B82260     MUL.UU W4, #0, W4
007BB6  898034     MOV W4, AccZFilter
007BB8  898045     MOV W5, 0x3008
5991:                  GyroZFilter=0;
007BBA  B82260     MUL.UU W4, #0, W4
007BBC  889FD4     MOV W4, GyroZFilter
007BBE  889FE5     MOV W5, 0x13FC
5992:                  KFilterPrev=127;
007BC0  2007F4     MOV #0x7F, W4
007BC2  200005     MOV #0x0, W5
007BC4  898054     MOV W4, KFilterPrev
007BC6  898065     MOV W5, 0x300C
5993:                  KFilter=128-KFilterPrev;
007BC8  818054     MOV KFilterPrev, W4
007BCA  818065     MOV 0x300C, W5
007BCC  200806     MOV #0x80, W6
007BCE  200007     MOV #0x0, W7
007BD0  530204     SUB W6, W4, W4
007BD2  5B8285     SUBB W7, W5, W5
007BD4  898074     MOV W4, KFilter
007BD6  898085     MOV W5, 0x3010
5994:              
5995:                  
5996:                  GZFTempPrev=0;
007BD8  B82260     MUL.UU W4, #0, W4
007BDA  898094     MOV W4, GZFTempPrev
007BDC  8980A5     MOV W5, 0x3014
5997:                  KdRot=0;
007BDE  B82260     MUL.UU W4, #0, W4
007BE0  889CC4     MOV W4, KdRot
007BE2  889CD5     MOV W5, 0x139A
5998:              
5999:                  _1sCntConst=50;
007BE4  200324     MOV #0x32, W4
007BE6  897EE4     MOV W4, _1sCntConst
6000:                  _1sCnt1=_1sCntConst;
007BE8  817EE4     MOV _1sCntConst, W4
007BEA  897ED4     MOV W4, _1sCnt1
6001:              
6002:                  Spd1Res=0;
007BEC  EB0200     CLR W4
007BEE  897F14     MOV W4, Spd1Res
6003:                  Spd1Cnt=0;
007BF0  EB0200     CLR W4
007BF2  897F54     MOV W4, Spd1Cnt
6004:              
6005:              
6006:              
6007:              
6008:              ESummSpd=0;
007BF4  B82260     MUL.UU W4, #0, W4
007BF6  898204     MOV W4, ESummSpd
007BF8  898215     MOV W5, 0x3042
6009:              
6010:              
6011:              
6012:              DirectControlMotor=0;
007BFA  809744     MOV StatFlgs, W4
007BFC  A10004     BCLR W4, #0
007BFE  889744     MOV W4, StatFlgs
6013:              
6014:              TemperatureCnt=550;
007C00  202264     MOV #0x226, W4
007C02  8983D4     MOV W4, TemperatureCnt
6015:              TemperatureFl=0;
007C04  809604     MOV Flgs1, W4
007C06  A14004     BCLR W4, #4
007C08  889604     MOV W4, Flgs1
6016:              
6017:              Odometr10m=0;
007C0A  EB0200     CLR W4
007C0C  8983F4     MOV W4, Odometr10m
6018:              
6019:              
6020:              Bt1CntConst=10;
007C0E  230985     MOV #0x3098, W5
007C10  B3C0A4     MOV.B #0xA, W4
007C12  784A84     MOV.B W4, [W5]
6021:              Bt2CntConst=10;
007C14  230995     MOV #0x3099, W5
007C16  B3C0A4     MOV.B #0xA, W4
007C18  784A84     MOV.B W4, [W5]
6022:              Bt3CntConst=10;
007C1A  2309A5     MOV #0x309A, W5
007C1C  B3C0A4     MOV.B #0xA, W4
007C1E  784A84     MOV.B W4, [W5]
6023:              Bt4CntConst=10;
007C20  2309B5     MOV #0x309B, W5
007C22  B3C0A4     MOV.B #0xA, W4
007C24  784A84     MOV.B W4, [W5]
6024:              
6025:              AlfaYResPrevAv=0;
007C26  B82260     MUL.UU W4, #0, W4
007C28  8994E4     MOV W4, AlfaYResPrevAv
007C2A  8994F5     MOV W5, 0x329E
6026:              CntDiffTiltLimit=0;
007C2C  234A15     MOV #0x34A1, W5
007C2E  EB4200     CLR.B W4
007C30  784A84     MOV.B W4, [W5]
6027:              
6028:              AddTiltLimit=2;//10;
007C32  200004     MOV #0x0, W4
007C34  240005     MOV #0x4000, W5
007C36  89A594     MOV W4, AddTiltLimit
007C38  89A5A5     MOV W5, 0x34B4
6029:              
6030:              
6031:              KpSPD=0;
007C3A  EB0200     CLR W4
007C3C  898134     MOV W4, KpSPD
6032:              
6033:              Preas1DnCnt=Preas2DnCnt=PhasesPerRev1;
007C3E  821424     MOV PhasesPerRev1, W4
007C40  8A1444     MOV W4, Preas2DnCnt
007C42  821444     MOV Preas2DnCnt, W4
007C44  8A1404     MOV W4, Preas1DnCnt
6034:              Preas1UpCnt=Preas2UpCnt=Diametr1;
007C46  821434     MOV Diametr1, W4
007C48  8A1454     MOV W4, Preas2UpCnt
007C4A  821454     MOV Preas2UpCnt, W4
007C4C  8A1414     MOV W4, Preas1UpCnt
6035:              
6036:              
6037:              
6038:              KpSPDMustBe=KpSPDMove;
007C4E  818174     MOV KpSPDMove, W4
007C50  898184     MOV W4, KpSPDMustBe
6039:              SetKpSPD_UP();
007C52  075CD9     RCALL SetKpSPD_UP
6040:              Unicycle=0;
007C54  809744     MOV StatFlgs, W4
007C56  A17004     BCLR W4, #7
007C58  889744     MOV W4, StatFlgs
6041:              if (Unicycle)
007C5A  809745     MOV StatFlgs, W5
007C5C  200804     MOV #0x80, W4
007C5E  628204     AND W5, W4, W4
007C60  520FE0     SUB W4, #0x0, [W15]
007C62  320003     BRA Z, 0x7C6A
6042:              
6043:              CntHrnLConst=5;
007C64  2373D5     MOV #0x373D, W5
007C66  B3C054     MOV.B #0x5, W4
007C68  784A84     MOV.B W4, [W5]
6044:              
6045:              SetTmrConst();
007C6A  0761B0     RCALL SetTmrConst
6046:              
6047:              
6048:              
6049:              TestVibroLR=0;
007C6C  809654     MOV 0x12CA, W4
007C6E  A17004     BCLR W4, #7
007C70  889654     MOV W4, 0x12CA
6050:              
6051:              
6052:              
6053:                
6054:                
6055:                StateInd=1;
007C72  237D65     MOV #0x37D6, W5
007C74  B3C014     MOV.B #0x1, W4
007C76  784A84     MOV.B W4, [W5]
6056:                  
6057:              
6058:              
6059:              
6060:                  RdSensors();
007C78  077A1E     RCALL RdSensors
6061:              #if !defined VECTOR
6062:              #if !defined ISOLATED
6063:              if ((Sensor1==7)||(Sensor1==0)||Sensorless)
6064:              {
6065:                  SensorlessInit();//7777777777777777777777777777777777777777777777777777777777777777777
6066:                      SoundNum=9;
6067:              
6068:              }
6069:              else
6070:              
6071:              {
6072:                  if (Vector)
6073:                      VectorInit();
6074:                  else
6075:                      TrapeziumInit();
6076:              }
6077:              #else
6078:                  if (Vector)
6079:                      VectorInit();
6080:                  else
6081:                      TrapeziumInit();
6082:              #endif
6083:              #else
6084:              if (0)//((Sensor1==7)||(Sensor1==0)||Sensorless)
6085:              {
6086:                  SensorlessInit();//7777777777777777777777777777777777777777777777777777777777777777777
6087:                      SoundNum=9;
6088:              
6089:              }
6090:              else
6091:              
6092:              {
6093:                  if (Vector)
007C7A  809684     MOV Flgs5, W4
007C7C  620270     AND W4, #0x10, W4
007C7E  520FE0     SUB W4, #0x0, [W15]
007C80  320002     BRA Z, 0x7C86
6094:                      VectorInit();
007C82  07634A     RCALL VectorInit
007C84  370001     BRA 0x7C88
6095:                  else
6096:                      TrapeziumInit();
007C86  0763FF     RCALL TrapeziumInit
6097:              }
6098:              #endif
6099:                  RdSensors();
007C88  077A16     RCALL RdSensors
6100:              
6101:              
6102:              
6103:                  NullPtr=1;
007C8A  809624     MOV Flgs2, W4
007C8C  A05004     BSET W4, #5
007C8E  889624     MOV W4, Flgs2
6104:                  NullPtrRot=1;
007C90  809624     MOV Flgs2, W4
007C92  A07004     BSET W4, #7
007C94  889624     MOV W4, Flgs2
6105:              
6106:              
6107:              Forward1=1;
007C96  8095E4     MOV Flgs, W4
007C98  A06004     BSET W4, #6
007C9A  8895E4     MOV W4, Flgs
6108:              StartingBTN=1;
007C9C  809684     MOV Flgs5, W4
007C9E  A0E004     BSET W4, #14
007CA0  889684     MOV W4, Flgs5
6109:              Locked=1;
007CA2  809694     MOV 0x12D2, W4
007CA4  A06004     BSET W4, #6
007CA6  889694     MOV W4, 0x12D2
6110:              
6111:              
6112:              if (Monocycle)
007CA8  809745     MOV StatFlgs, W5
007CAA  280004     MOV #0x8000, W4
007CAC  628204     AND W5, W4, W4
007CAE  520FE0     SUB W4, #0x0, [W15]
007CB0  320003     BRA Z, 0x7CB8
6113:                  SoundNum=1;
007CB2  2124B5     MOV #0x124B, W5
007CB4  B3C014     MOV.B #0x1, W4
007CB6  784A84     MOV.B W4, [W5]
6114:              
6115:                  AntiPolice=0;
007CB8  809764     MOV StatFlgs2, W4
007CBA  A19004     BCLR W4, #9
007CBC  889764     MOV W4, StatFlgs2
6116:                  if (AntiPolice)
007CBE  809765     MOV StatFlgs2, W5
007CC0  202004     MOV #0x200, W4
007CC2  628204     AND W5, W4, W4
007CC4  520FE0     SUB W4, #0x0, [W15]
007CC6  32000B     BRA Z, 0x7CDE
6117:                  {
6118:                      if (SpeedControl)
007CC8  809754     MOV StatFlgs1, W4
007CCA  620262     AND W4, #0x2, W4
007CCC  520FE0     SUB W4, #0x0, [W15]
007CCE  320004     BRA Z, 0x7CD8
6119:                          SpeedControlTmp=1;
007CD0  8096A4     MOV Flgs6, W4
007CD2  A00004     BSET W4, #0
007CD4  8896A4     MOV W4, Flgs6
007CD6  370003     BRA 0x7CDE
6120:                      else
6121:                          SpeedControlTmp=0;
007CD8  8096A4     MOV Flgs6, W4
007CDA  A10004     BCLR W4, #0
007CDC  8896A4     MOV W4, Flgs6
6122:                      //SpeedControl=1;
6123:              //    MaxSpdCoeff=(int)((((float)MAX_PWM)*ImpToKmH1_t)/((float)SlowStrtSpd/ImpToKmH1_t));
6124:                  }
6125:              
6126:                      SpeedControlPrev=SpeedControl;
007CDE  809754     MOV StatFlgs1, W4
007CE0  D10204     LSR W4, W4
007CE2  624261     AND.B W4, #0x1, W4
007CE4  FB8204     ZE W4, W4
007CE6  620261     AND W4, #0x1, W4
007CE8  420204     ADD W4, W4, W4
007CEA  8096A6     MOV Flgs6, W6
007CEC  2FFFD5     MOV #0xFFFD, W5
007CEE  630285     AND W6, W5, W5
007CF0  728204     IOR W5, W4, W4
007CF2  8896A4     MOV W4, Flgs6
6127:              
6128:              #ifdef MPU6050        
6129:                      WriteMPU6050(107,1,0);
6130:                      HvMPU6050=0;
6131:              
6132:                      if (!MPU6050Err)
6133:                      {
6134:                      MPU6050_TimeOut=10;
6135:                      ReadMPU6050(0x1A, 3);
6136:                      while ((!HvMPU6050)&&(MPU6050_TimeOut));
6137:                        if (!MPU6050_TimeOut)
6138:                        {
6139:                          MPU6050Err=5;
6140:                          CloseI2C1();
6141:                          IEC1bits.MI2C1IE=0;
6142:                          if (Monocycle)
6143:                              CriticalError=CRERR_MPU6050;
6144:                        }
6145:                      }
6146:                      else
6147:                          if (Monocycle)
6148:                              CriticalError=CRERR_MPU6050;
6149:              #endif 
6150:                      
6151:                      
6152:                      
6153:                     
6154:                      
6155:                      
6156:                   
6157:                     
6158:                     
6159:                     
6160:              //    if (_2WDMode)
6161:                      {
6162:                      InitPort_U3();
007CF4  070E51     RCALL InitPort_U3
6163:                      UARTInit_U3();
007CF6  070DD8     RCALL UARTInit_U3
6164:                      }
6165:                     CalibrateJOYSTICK=1;
007CF8  8096C4     MOV Flgs7, W4
007CFA  A05004     BSET W4, #5
007CFC  8896C4     MOV W4, Flgs7
6166:                     InitSensorsNear();
007CFE  076133     RCALL InitSensorsNear
6167:                      TestU3ChangeSpd=1;   
007D00  8096D4     MOV 0x12DA, W4
007D02  A00004     BSET W4, #0
007D04  8896D4     MOV W4, 0x12DA
6168:                     
6169:                       InitReady=1; 
007D06  809664     MOV Flgs4, W4
007D08  A0D004     BSET W4, #13
007D0A  889664     MOV W4, Flgs4
6170:                     
6171:                     
6172:                     
6173:              }
007D0C  FA8000     ULNK
007D0E  060000     RETURN
6174:              
6175:              
6176:              
6177:              void OSC_Init(void)
6178:                  {
007D10  FA0000     LNK #0x0
6179:                        CLKDIVbits.PLLPOST = 0;         // N1=2
007D12  803A24     MOV CLKDIV, W4
007D14  A16004     BCLR W4, #6
007D16  A17004     BCLR W4, #7
007D18  883A24     MOV W4, CLKDIV
6180:              #if !defined INT_FRC          
6181:                  CLKDIVbits.PLLPRE = 0;          // N2=2
007D1A  803A25     MOV CLKDIV, W5
007D1C  2FFE04     MOV #0xFFE0, W4
007D1E  628204     AND W5, W4, W4
007D20  883A24     MOV W4, CLKDIV
6182:                 // OSCTUN = 0;                     // Tune FRC oscillator, if FRC is used
6183:                  PLLFBDbits.PLLDIV=118;
007D22  803A35     MOV PLLFBD, W5
007D24  2FE004     MOV #0xFE00, W4
007D26  628284     AND W5, W4, W5
007D28  200764     MOV #0x76, W4
007D2A  728204     IOR W5, W4, W4
007D2C  883A34     MOV W4, PLLFBD
6184:              #else
6185:                  CLKDIVbits.PLLPRE = 2;          // N2=2
6186:                  OSCTUN = 0;                     // Tune FRC oscillator, if FRC is used
6187:                  PLLFBDbits.PLLDIV=128;
6188:              #endif
6189:                  // Disable Watch Dog Timer
6190:                  RCONbits.SWDTEN = 0;
007D2E  A9A740     BCLR RCON, #5
6191:              
6192:              /*
6193:                  ACLKCON3bits.ASRCSEL=1;
6194:                  ACLKCON3bits.FRCSEL=0;
6195:                  ACLKCON3bits.SELACLK=1;
6196:              
6197:              
6198:                  ACLKDIV3bits.APLLDIV=0b111;
6199:                  ACLKCON3bits.APLLPRE = 1;
6200:                  ACLKCON3bits.APLLPOST = 0b110;
6201:                  ACLKCON3bits.ENAPLL = 1;
6202:              */
6203:                  }
007D30  FA8000     ULNK
007D32  060000     RETURN
6204:              
6205:              
6206:              void InitPorts(void)
6207:              {
007D34  FA0000     LNK #0x0
6208:              
6209:              //BLDC 1
6210:              
6211:              DS=1;
007D36  8096B4     MOV 0x12D6, W4
007D38  A0B004     BSET W4, #11
007D3A  8896B4     MOV W4, 0x12D6
6212:              
6213:              #if !defined VECTOR
6214:              TRIS_DS=1;
6215:              #endif
6216:              
6217:              
6218:              TRIS_PWM1_A_H=1;
007D3C  A82E40     BSET TRISE, #1
6219:              ANSEL_PWM1_A_H=0;
007D3E  A92E4E     BCLR ANSELE, #1
6220:              
6221:              TRIS_PWM1_A_L=0;
007D40  A90E40     BCLR TRISE, #0
6222:              ANSEL_PWM1_A_L=0;
007D42  A90E4E     BCLR ANSELE, #0
6223:              
6224:              TRIS_PWM1_B_H=0;
007D44  A96E40     BCLR TRISE, #3
6225:              ANSEL_PWM1_B_H=0;
007D46  A96E4E     BCLR ANSELE, #3
6226:              
6227:              TRIS_PWM1_B_L=0;
007D48  A94E40     BCLR TRISE, #2
6228:              ANSEL_PWM1_B_L=0;
007D4A  A94E4E     BCLR ANSELE, #2
6229:              
6230:              TRIS_PWM1_C_H=0;
007D4C  A9AE40     BCLR TRISE, #5
6231:              ANSEL_PWM1_C_H=0;
007D4E  A9AE4E     BCLR ANSELE, #5
6232:              
6233:              TRIS_PWM1_C_L=0;
007D50  A98E40     BCLR TRISE, #4
6234:              ANSEL_PWM1_C_L=0;
007D52  A98E4E     BCLR ANSELE, #4
6235:              
6236:              TRIS_Hall1_A=1;
007D54  A86E50     BSET TRISF, #3
6237:              CNEN_Hall1_A=1;
007D56  A86E58     BSET CNENF, #3
6238:              
6239:              TRIS_Hall1_B=1;
007D58  A84E50     BSET TRISF, #2
6240:              CNEN_Hall1_B=1;
007D5A  A84E58     BSET CNENF, #2
6241:              
6242:              TRIS_Hall1_C=1;
007D5C  A8AE50     BSET TRISF, #5
6243:              CNEN_Hall1_C=1;
007D5E  A8AE58     BSET CNENF, #5
6244:              
6245:              
6246:              //BLDC 1 END
6247:              
6248:              
6249:              TRIS_But1=1;
007D60  A88E10     BSET TRISB, #4
6250:              
6251:              
6252:              TRIS_But2=1;
007D62  A84E11     BSET 0xE11, #2
6253:              ANSEL_But2=0;
007D64  A94E1F     BCLR 0xE1F, #2
6254:              
6255:              TRIS_But3=1;
007D66  A86E11     BSET 0xE11, #3
6256:              ANSEL_But3=0;
007D68  A96E1F     BCLR 0xE1F, #3
6257:              
6258:              TRIS_But4=1;
007D6A  A8EE31     BSET 0xE31, #7
6259:              ANSEL_But1=0;
007D6C  A98E1E     BCLR ANSELB, #4
6260:              //CNPU_But4=1;
6261:              #if !defined REV2
6262:              ANSEL_But4=0;
6263:              TRIS_But5=1;
6264:              ANSEL_But5=0;
6265:              #else
6266:              CNPU_But1=1;
007D6E  A88E1A     BSET CNPUB, #4
6267:              CNPU_But2=1;
007D70  A84E1B     BSET 0xE1B, #2
6268:              CNPU_But3=1;
007D72  A86E1B     BSET 0xE1B, #3
6269:              CNPU_But4=1;
007D74  A8EE3B     BSET 0xE3B, #7
6270:              #endif
6271:              
6272:              
6273:              TRISBuzzer=0;
007D76  A98E50     BCLR TRISF, #4
6274:              Buzzer=0;
007D78  A98E54     BCLR LATF, #4
6275:              
6276:              #if !defined REV2
6277:              TRISLight=0;
6278:              Light=0;
6279:              #endif
6280:              
6281:              TRISHorn=0;
007D7A  A94E31     BCLR 0xE31, #2
6282:              #if !defined VECTORS
6283:              Horn=1;
007D7C  A84E35     BSET 0xE35, #2
6284:              #else
6285:              //Horn=0;
6286:                  OC3R=0;
6287:              #endif
6288:              
6289:              
6290:              TRISSpd1Sensor=1;
007D7E  A86E00     BSET TRISA, #3
6291:              TRISSpd2Sensor=1;
007D80  A88E00     BSET TRISA, #4
6292:              
6293:              TRIS_Break1=1;
007D82  A88E31     BSET 0xE31, #4
6294:              TRIS_Break2=1;
007D84  A86E30     BSET TRISD, #3
6295:              CNPU_Break1=1;
007D86  A88E3B     BSET 0xE3B, #4
6296:              CNPU_Break2=1;
007D88  A86E3A     BSET CNPUD, #3
6297:              
6298:              TRISRight=0;
007D8A  A98E30     BCLR TRISD, #4
6299:              
6300:              TRISLeft=0;
007D8C  A9AE30     BCLR TRISD, #5
6301:              #if !defined VECTOR
6302:              Right=0;
6303:              Left=0;
6304:              #else
6305:              Right=1;
007D8E  8096C4     MOV Flgs7, W4
007D90  A0E004     BSET W4, #14
007D92  8896C4     MOV W4, Flgs7
6306:              Left=1;
007D94  8096C4     MOV Flgs7, W4
007D96  A0F004     BSET W4, #15
007D98  8896C4     MOV W4, Flgs7
6307:              #endif
6308:              
6309:              
6310:              
6311:              TRIS_PAS=1;
007D9A  A8EE00     BSET TRISA, #7
6312:              ANSEL_PAS=0;
007D9C  A9EE0E     BCLR ANSELA, #7
6313:              
6314:              ANSELAbits.ANSA7=1;
007D9E  A8EE0E     BSET ANSELA, #7
6315:              
6316:              
6317:              #if defined ISOLATED
6318:              TRIS_UBt_SCK=0;
6319:              TRIS_UBt_DATA=1;
6320:              ANSEL_UBt_SCK=0;
6321:              ANSEL_UBt_DATA=0;
6322:              UBt_SCK=0;
6323:              #endif
6324:              
6325:              //TRIS_TST_PIN=0;
6326:              #if defined VECTORMS
6327:              ChagerOut=0;
007DA0  A90E64     BCLR LATG, #0
6328:              TRIS_ChagerOut=0;
007DA2  A90E60     BCLR TRISG, #0
6329:              TRIS_ChagerIn=1;
007DA4  A82E60     BSET TRISG, #1
6330:              CNPU_ChagerIn=1;
007DA6  A82E6A     BSET CNPUG, #1
6331:              #endif
6332:              
6333:              
6334:              TRIS_ALARM_LED=0;
007DA8  A9AE61     BCLR 0xE61, #5
6335:              TRIS_MODE_LED=0;
007DAA  A9EE61     BCLR 0xE61, #7
6336:              
6337:              ALARM_LED=0;
007DAC  A9AE65     BCLR 0xE65, #5
6338:              MODE_LED=0;
007DAE  A9EE65     BCLR 0xE65, #7
6339:              }
007DB0  FA8000     ULNK
007DB2  060000     RETURN
6340:              
6341:              
6342:              void ADC1Init(void)
6343:              {
007DB4  FA0002     LNK #0x2
6344:              
6345:              /* Set port configuration */
6346:              //ANSELA = ANSELC = ANSELD = ANSELE = ANSELG = 0x0000;
6347:              //ANSELB = 0x012C; // Ensure AN2, AN3, AN5 and AN8 are analog
6348:              /* Initialize ADC module */
6349:              AD1CON1 = 0x04E4; // Enable 12-bit mode, auto-sample and auto-conversion
007DB6  204E44     MOV #0x4E4, W4
007DB8  881904     MOV W4, AD1CON1
6350:              AD1CON2 = 0x0408; // Sample 4 channels alternately using channel scanning
007DBA  204084     MOV #0x408, W4
007DBC  881914     MOV W4, AD1CON2
6351:              #if defined REV2
6352:              #if !defined VECTOR
6353:              #if !defined ISOLATED    
6354:              AD1CON2bits.SMPI=8;
6355:              #else
6356:              AD1CON2bits.SMPI=7;
6357:              #endif
6358:              #else
6359:              AD1CON2bits.SMPI=13;
007DBE  801915     MOV AD1CON2, W5
007DC0  2FF834     MOV #0xFF83, W4
007DC2  628284     AND W5, W4, W5
007DC4  200344     MOV #0x34, W4
007DC6  728204     IOR W5, W4, W4
007DC8  881914     MOV W4, AD1CON2
6360:              #endif
6361:              AD1CON3 = 0xff;//0x0F0F; // Sample for 15*TAD before converting
007DCA  200FF4     MOV #0xFF, W4
007DCC  881924     MOV W4, AD1CON3
6362:              AD1CON4 = 0x0000;
007DCE  EB0200     CLR W4
007DD0  881994     MOV W4, AD1CON4
6363:              #if !defined VECTOR
6364:              #if !defined ISOLATED    
6365:                  AD1CSSH=0b1000000010101111;
6366:              #else
6367:                  //AD1CSSH=0b0100000010001111;
6368:                  AD1CSSH=0b1000000010001111;
6369:              #endif
6370:              #else
6371:                  AD1CSSH=0b1100000011111111;
007DD2  2C0FF4     MOV #0xC0FF, W4
007DD4  881974     MOV W4, AD1CSSH
6372:              #endif
6373:                  
6374:                  
6375:                  
6376:              #else
6377:              AD1CON2bits.SMPI=9;
6378:              AD1CON3 = 5;//0x0F0F; // Sample for 15*TAD before converting
6379:              AD1CON4 = 0x0000;
6380:                  AD1CSSH=0b1100000010101111;
6381:              #endif
6382:              
6383:              
6384:              
6385:              #if defined VECTOR
6386:                  AD1CSSL=0b1110000100000000;
007DD6  2E1004     MOV #0xE100, W4
007DD8  881984     MOV W4, AD1CSSL
6387:              #else
6388:                  AD1CSSL=0b10000100000000;
6389:              #endif
6390:               //   AD1CSSL=0b110000000000000;
6391:              //AD1CSSH = 0x0000;
6392:              //AD1CSSL = 0x012C; // Select AN2, AN3, AN5 and AN8 for scanning
6393:              /* Assign MUXA inputs */
6394:              AD1CHS0bits.CH0SA = 0; // CH0SA bits ignored for CH0 +ve input selection
007DDA  801945     MOV AD1CHS0, W5
007DDC  2FFE04     MOV #0xFFE0, W4
007DDE  628204     AND W5, W4, W4
007DE0  881944     MOV W4, AD1CHS0
6395:              AD1CHS0bits.CH0NA = 0; // Select VREF- for CH0 -ve input
007DE2  A9E328     BCLR AD1CHS0, #7
6396:              
6397:              
6398:              AD1CON1bits.SSRC=7;//
007DE4  801904     MOV AD1CON1, W4
007DE6  A05004     BSET W4, #5
007DE8  A06004     BSET W4, #6
007DEA  A07004     BSET W4, #7
007DEC  881904     MOV W4, AD1CON1
6399:              AD1CON1bits.SSRCG=0;
007DEE  A98320     BCLR AD1CON1, #4
6400:              
6401:              /* Enable ADC module and provide ADC stabilization delay */
6402:              AD1CON1bits.ADON = 1;
007DF0  A8E321     BSET 0x321, #7
6403:                  IFS0bits.AD1IF=0;
007DF2  A9A801     BCLR 0x801, #5
6404:                  IPC3bits.AD1IP=3;
007DF4  804234     MOV IPC3, W4
007DF6  A04004     BSET W4, #4
007DF8  A05004     BSET W4, #5
007DFA  A16004     BCLR W4, #6
007DFC  884234     MOV W4, IPC3
6405:                  IEC0bits.AD1IE=1;
007DFE  A8A821     BSET 0x821, #5
6406:              
6407:              int k;
6408:              for (k=0;k<20000;k++);
007E00  EB0200     CLR W4
007E02  780F04     MOV W4, [W14]
007E04  370001     BRA 0x7E08
007E06  E80F1E     INC [W14], [W14]
007E08  24E1F4     MOV #0x4E1F, W4
007E0A  78029E     MOV [W14], W5
007E0C  528F84     SUB W5, W4, [W15]
007E0E  34FFFB     BRA LE, 0x7E06
6409:              
6410:              
6411:              TRISFbits.TRISF13=0;
007E10  A9AE51     BCLR 0xE51, #5
6412:              
6413:              }
007E12  FA8000     ULNK
007E14  060000     RETURN
6414:              
6415:              
6416:              
6417:              void __attribute__((interrupt, auto_psv))  _AD1Interrupt( void )
6418:              {
007E16  BE9F84     MOV.D W4, [W15++]
007E18  BE9F86     MOV.D W6, [W15++]
007E1A  F80032     PUSH DSRPAG
007E1C  202004     MOV #0x200, W4
007E1E  880194     MOV W4, DSRPAG
007E20  000000     NOP
007E22  FA0002     LNK #0x2
6419:                  
6420:                  
6421:               //   LATFbits.LATF13=!LATFbits.LATF13;
6422:                    //  LATFbits.LATF13=1;
6423:                  
6424:                  IFS0bits.AD1IF=0;
007E24  A9A801     BCLR 0x801, #5
6425:              #if defined REV2
6426:              #if !defined VECTOR
6427:              #if !defined ISOLATED    
6428:                  ADCThrottle=ADC1BUF0;
6429:                  Crr1=ADC1BUF1;
6430:              
6431:                  if (CntT_ADC<64)
6432:                  {
6433:                  T1_ADC=T1_ADC+ADC1BUF2;
6434:                  T3_ADC=T3_ADC+ADC1BUF3;
6435:                  T4_ADC=T4_ADC+ADC1BUF4;
6436:                  T2_ADC=T2_ADC+ADC1BUF8;
6437:                  CntT_ADC++;
6438:                  }
6439:              
6440:                  ADCThrottleBreak=ADC1BUF7;
6441:              
6442:                  ADCThroottleZero=ADC1BUF5;
6443:                  
6444:                  UBT=ADC1BUF6;
6445:              #else
6446:                  if (GAZ_IMMITATOR)
6447:                      ADCThrottle=GazImm;
6448:                  else
6449:                      ADCThrottle=ADC1BUF0;
6450:                  Crr1=ADC1BUF1;
6451:              
6452:                  if (CntT_ADC<64)
6453:                  {
6454:                  T1_ADC=T1_ADC+ADC1BUF2;
6455:                  T3_ADC=T3_ADC+ADC1BUF3;
6456:                  T4_ADC=T4_ADC+ADC1BUF4;
6457:                  T2_ADC=T2_ADC+ADC1BUF7;
6458:                  CntT_ADC++;
6459:                  }
6460:              
6461:                  ADCThrottleBreak=ADC1BUF6;
6462:              
6463:                  ADCThroottleZero=ADC1BUF5;
6464:                  
6465:               //   UBT=ADC1BUF6;
6466:                  
6467:              #endif
6468:              #else
6469:                  if (GAZ_IMMITATOR)
007E26  8096B5     MOV 0x12D6, W5
007E28  200204     MOV #0x20, W4
007E2A  628204     AND W5, W4, W4
007E2C  520FE0     SUB W4, #0x0, [W15]
007E2E  320003     BRA Z, 0x7E36
6470:                      ADCThrottle=GazImm;
007E30  8093F4     MOV GazImm, W4
007E32  889354     MOV W4, ADCThrottle
007E34  370002     BRA 0x7E3A
6471:                  else
6472:                      ADCThrottle=ADC1BUF0;
007E36  801804     MOV ADC1BUF0, W4
007E38  889354     MOV W4, ADCThrottle
6473:                  Crr1=ADC1BUF1;
007E3A  801814     MOV ADC1BUF1, W4
007E3C  889524     MOV W4, Crr1
6474:              
6475:                  _5V=ADC1BUF2;
007E3E  801824     MOV ADC1BUF2, W4
007E40  88BD84     MOV W4, _5V
6476:                  _3V=ADC1BUF3;
007E42  801834     MOV ADC1BUF3, W4
007E44  88BD94     MOV W4, _3V
6477:                  CurrA_P=ADC1BUF4;
007E46  801844     MOV ADC1BUF4, W4
007E48  88BDA4     MOV W4, CurrA_P
6478:                  CurrA_N=ADC1BUF5;
007E4A  801854     MOV ADC1BUF5, W4
007E4C  88BDB4     MOV W4, CurrA_N
6479:                  CurrC_P=ADC1BUF6;
007E4E  801864     MOV ADC1BUF6, W4
007E50  88BDC4     MOV W4, CurrC_P
6480:                  CurrC_N=ADC1BUF7;
007E52  801874     MOV ADC1BUF7, W4
007E54  88BDD4     MOV W4, CurrC_N
6481:                  _12V=ADC1BUF8;
007E56  801884     MOV ADC1BUF8, W4
007E58  88BDE4     MOV W4, _12V
6482:                    UBT=ADC1BUF9;
007E5A  801894     MOV ADC1BUF9, W4
007E5C  897E64     MOV W4, UBT
6483:                    LightSensor=ADC1BUFA;
007E5E  8018A4     MOV ADC1BUFA, W4
007E60  898374     MOV W4, LightSensor
6484:                  ADCThrottleBreak=ADC1BUFB;
007E62  8018B4     MOV ADC1BUFB, W4
007E64  8893E4     MOV W4, ADCThrottleBreak
6485:                  
6486:                  
6487:                  if (CntT_ADC<64)
007E66  8204B5     MOV CntT_ADC, W5
007E68  2003F4     MOV #0x3F, W4
007E6A  528F84     SUB W5, W4, [W15]
007E6C  3E0033     BRA GTU, 0x7ED4
6488:                  {
6489:                  T2_ADC=T2_ADC+ADC1BUFC;
007E6E  8018C4     MOV ADC1BUFC, W4
007E70  B82361     MUL.UU W4, #1, W6
007E72  820414     MOV T2_ADC, W4
007E74  820425     MOV 0x4084, W5
007E76  420206     ADD W4, W6, W4
007E78  4A8287     ADDC W5, W7, W5
007E7A  8A0414     MOV W4, T2_ADC
007E7C  8A0425     MOV W5, 0x4084
6490:                  T1_ADC=T1_ADC+ADC1BUFD;
007E7E  8018D4     MOV ADC1BUFD, W4
007E80  B82361     MUL.UU W4, #1, W6
007E82  8203F4     MOV T1_ADC, W4
007E84  820405     MOV 0x4080, W5
007E86  420206     ADD W4, W6, W4
007E88  4A8287     ADDC W5, W7, W5
007E8A  8A03F4     MOV W4, T1_ADC
007E8C  8A0405     MOV W5, 0x4080
6491:                  
6492:                  CurrA_P_Summ=CurrA_P_Summ+CurrA_P;
007E8E  80BDA4     MOV CurrA_P, W4
007E90  B92361     MUL.SU W4, #1, W6
007E92  80BDF4     MOV CurrA_P_Summ, W4
007E94  80BE05     MOV 0x17C0, W5
007E96  420206     ADD W4, W6, W4
007E98  4A8287     ADDC W5, W7, W5
007E9A  88BDF4     MOV W4, CurrA_P_Summ
007E9C  88BE05     MOV W5, 0x17C0
6493:                  CurrA_N_Summ=CurrA_N_Summ+CurrA_N;
007E9E  80BDB4     MOV CurrA_N, W4
007EA0  B92361     MUL.SU W4, #1, W6
007EA2  80BE14     MOV CurrA_N_Summ, W4
007EA4  80BE25     MOV 0x17C4, W5
007EA6  420206     ADD W4, W6, W4
007EA8  4A8287     ADDC W5, W7, W5
007EAA  88BE14     MOV W4, CurrA_N_Summ
007EAC  88BE25     MOV W5, 0x17C4
6494:                  CurrC_P_Summ=CurrC_P_Summ+CurrC_P;
007EAE  80BDC4     MOV CurrC_P, W4
007EB0  B92361     MUL.SU W4, #1, W6
007EB2  80BE34     MOV CurrC_P_Summ, W4
007EB4  80BE45     MOV 0x17C8, W5
007EB6  420206     ADD W4, W6, W4
007EB8  4A8287     ADDC W5, W7, W5
007EBA  88BE34     MOV W4, CurrC_P_Summ
007EBC  88BE45     MOV W5, 0x17C8
6495:                  CurrC_N_Summ=CurrC_N_Summ+CurrC_N;
007EBE  80BDD4     MOV CurrC_N, W4
007EC0  B92361     MUL.SU W4, #1, W6
007EC2  80BE54     MOV CurrC_N_Summ, W4
007EC4  80BE65     MOV 0x17CC, W5
007EC6  420206     ADD W4, W6, W4
007EC8  4A8287     ADDC W5, W7, W5
007ECA  88BE54     MOV W4, CurrC_N_Summ
007ECC  88BE65     MOV W5, 0x17CC
6496:                  
6497:                  CntT_ADC++;
007ECE  8204B4     MOV CntT_ADC, W4
007ED0  E80204     INC W4, W4
007ED2  8A04B4     MOV W4, CntT_ADC
6498:                  
6499:              
6500:                  }
6501:              
6502:              
6503:                //  ADCThroottleZero=ADC1BUF5;
6504:                  
6505:               //   UBT=ADC1BUF6;
6506:              #endif
6507:              #else
6508:                  ADCThrottle=ADC1BUF0;
6509:                  Crr1=ADC1BUF1;
6510:              
6511:                  if (CntT_ADC<64)
6512:                  {
6513:                  T1_ADC=T1_ADC+ADC1BUF2;
6514:                  T4_ADC=T4_ADC+ADC1BUF3;
6515:                  T5_ADC=T5_ADC+ADC1BUF4;
6516:                  T6_ADC=T6_ADC+ADC1BUF5;
6517:                  }
6518:                  
6519:                  UBT=ADC1BUF6;
6520:              #endif
6521:               
6522:                  if (!BreakPressed)
007ED4  809614     MOV 0x12C2, W4
007ED6  620261     AND W4, #0x1, W4
007ED8  520FE0     SUB W4, #0x0, [W15]
007EDA  3A0002     BRA NZ, 0x7EE0
6523:                      UBTNoRegen=UBT;
007EDC  817E64     MOV UBT, W4
007EDE  897E74     MOV W4, UBTNoRegen
6524:              #if !defined REV2    
6525:                  ADCThrottleBreak=ADC1BUF7;
6526:              
6527:                  if (CntT_ADC<64)
6528:                  {
6529:                  T3_ADC=T3_ADC+ADC1BUF8;
6530:                  T2_ADC=T2_ADC+ADC1BUF9;
6531:                  CntT_ADC++;
6532:                  }
6533:              #endif
6534:              /*
6535:                  if (FillCurrentMass)
6536:                  {
6537:                       if (CntPhase<MassTMPSIZE)
6538:                      {
6539:              MassTMPPhase[CntPhase]=Curr1/10;
6540:              MassTMPNeutral[CntPhase]=0;//PDC1/6;
6541:              CntPhase++;
6542:                      }    
6543:                  }
6544:                  */
6545:              
6546:              /*
6547:              if (CURRENT_PROTECTION)
6548:              {
6549:                      Curr1_int=ZeroCurr1+1-Crr1;
6550:              
6551:                  if (Curr1_int>CurrUst)
6552:                  {
6553:                      if (!SensorlessNotBEMF)    
6554:                          if (!StartCnt)
6555:                          {
6556:                              CurrProtectSoundCnt++;
6557:                              if (CurrProtectSoundCnt>10)
6558:                              {
6559:                                  CurrProtectSoundCnt=0;
6560:                                  if (CurrLimitSound)
6561:                                  SoundNum=1;
6562:                              }
6563:                          }
6564:                  PID_On=0;
6565:                  ECurr1=Curr1_int-CurrUst;
6566:                  EpCurr1=ECurr1*KpCurr;
6567:                  ECurr1Summ=ECurr1Summ+(float)ECurr1*KiCurr;
6568:                  if (ECurr1Summ>MAX_PWM)
6569:                      ECurr1Summ=MAX_PWM;
6570:              
6571:                  }
6572:                  else
6573:                  {
6574:                      EpCurr1=0;
6575:                      if (ECurr1Summ>0)
6576:                      {
6577:                      ECurr1=CurrUst-Curr1_int;
6578:                      ECurr1Summ=ECurr1Summ-((float)ECurr1*KiCurr);
6579:                      if (ECurr1Summ<0)
6580:                          ECurr1Summ=0;
6581:                      }
6582:                      else
6583:                      {
6584:                          ECurr1Summ=0;
6585:                      }
6586:                  }
6587:                  PI_Curr1Res=(unsigned long int)ECurr1Summ+(unsigned long int)EpCurr1+PI_Temperature;
6588:                  if (PI_Curr1Res>MAX_PWM)
6589:                      PI_Curr1Res=MAX_PWM;
6590:              
6591:                  }*/
6592:                      //LATFbits.LATF13=0;
6593:                  
6594:              
6595:                  
6596:                  if (_2WDMode==2)
007EE0  230C94     MOV #0x30C9, W4
007EE2  784214     MOV.B [W4], W4
007EE4  524FE2     SUB.B W4, #0x2, [W15]
007EE6  3A000E     BRA NZ, 0x7F04
6597:                  {
6598:                      if (!Joystick)
007EE8  809775     MOV StatFlgs3, W5
007EEA  200204     MOV #0x20, W4
007EEC  628204     AND W5, W4, W4
007EEE  520FE0     SUB W4, #0x0, [W15]
007EF0  3A0005     BRA NZ, 0x7EFC
6599:                      {
6600:                  ADCThrottle=SlaveADCThrottle;
007EF2  8155B4     MOV SlaveADCThrottle, W4
007EF4  889354     MOV W4, ADCThrottle
6601:                  ADCThrottleBreak=SlaveADCThrottleBreak;
007EF6  8155C4     MOV SlaveADCThrottleBreak, W4
007EF8  8893E4     MOV W4, ADCThrottleBreak
007EFA  370004     BRA 0x7F04
6602:                      }
6603:                      else
6604:                      {
6605:                  ADCThrottle=SlaveADCThrottleBreak;
007EFC  8155C4     MOV SlaveADCThrottleBreak, W4
007EFE  889354     MOV W4, ADCThrottle
6606:                  ADCThrottleBreak=0;
007F00  EB0200     CLR W4
007F02  8893E4     MOV W4, ADCThrottleBreak
6607:                      }
6608:                  }
6609:                  
6610:                  if (_2WDMode==1)
007F04  230C94     MOV #0x30C9, W4
007F06  784214     MOV.B [W4], W4
007F08  524FE1     SUB.B W4, #0x1, [W15]
007F0A  3A0010     BRA NZ, 0x7F2C
6611:                  {
6612:                      if (Joystick)
007F0C  809775     MOV StatFlgs3, W5
007F0E  200204     MOV #0x20, W4
007F10  628204     AND W5, W4, W4
007F12  520FE0     SUB W4, #0x0, [W15]
007F14  32000B     BRA Z, 0x7F2C
6613:                      {
6614:                          if (ChangeAxis)
007F16  809775     MOV StatFlgs3, W5
007F18  200804     MOV #0x80, W4
007F1A  628204     AND W5, W4, W4
007F1C  520FE0     SUB W4, #0x0, [W15]
007F1E  320006     BRA Z, 0x7F2C
6615:                          {
6616:                  int Tmm=ADCThrottle;
007F20  809354     MOV ADCThrottle, W4
007F22  780F04     MOV W4, [W14]
6617:                          ADCThrottle=ADCThrottleBreak;
007F24  8093E4     MOV ADCThrottleBreak, W4
007F26  889354     MOV W4, ADCThrottle
6618:                          ADCThrottleBreak=Tmm;
007F28  78021E     MOV [W14], W4
007F2A  8893E4     MOV W4, ADCThrottleBreak
6619:                          }
6620:                      }
6621:                  }
6622:                  
6623:              #if defined VECTOR
6624:                  if (ADCThrottle>ThrottleLevelUpOff)
007F2C  818294     MOV ThrottleLevelUpOff, W4
007F2E  780284     MOV W4, W5
007F30  809354     MOV ADCThrottle, W4
007F32  528F84     SUB W5, W4, [W15]
007F34  310003     BRA C, 0x7F3C
6625:                      ADCThroottleZero=0;
007F36  EB0200     CLR W4
007F38  889364     MOV W4, ADCThroottleZero
007F3A  370002     BRA 0x7F40
6626:                  else
6627:                      ADCThroottleZero=300;
007F3C  2012C4     MOV #0x12C, W4
007F3E  889364     MOV W4, ADCThroottleZero
6628:              #endif
6629:                          
6630:                          
6631:                  HvADC1=1;
007F40  8096C4     MOV Flgs7, W4
007F42  A06004     BSET W4, #6
007F44  8896C4     MOV W4, Flgs7
6632:                  
6633:              }
007F46  FA8000     ULNK
007F48  F90032     POP DSRPAG
007F4A  BE034F     MOV.D [--W15], W6
007F4C  BE024F     MOV.D [--W15], W4
007F4E  064000     RETFIE
6634:              
6635:              
6636:              
6637:              
6638:              void ADC2Init(void)
6639:              {
007F50  FA0002     LNK #0x2
6640:              
6641:              /* Set port configuration */
6642:              //ANSELA = ANSELC = ANSELD = ANSELE = ANSELG = 0x0000;
6643:              //ANSELB = 0x012C; // Ensure AN2, AN3, AN5 and AN8 are analog
6644:              /* Initialize ADC module */
6645:              AD2CON1 = 0x04E4; // Enable 12-bit mode, auto-sample and auto-conversion
007F52  204E44     MOV #0x4E4, W4
007F54  881B04     MOV W4, AD2CON1
6646:              AD2CON2 = 0x0408; // Sample 4 channels alternately using channel scanning
007F56  204084     MOV #0x408, W4
007F58  881B14     MOV W4, AD2CON2
6647:              #if defined REV2
6648:              //AD2CON2bits.CHPS=0x10;
6649:              //AD2CON1bits.SIMSAM=1;
6650:              #endif
6651:              AD2CON3 = 5;//0x0F0F; // Sample for 15*TAD before converting
007F5A  200054     MOV #0x5, W4
007F5C  881B24     MOV W4, AD2CON3
6652:              AD2CON4 = 0x0000;
007F5E  EB0200     CLR W4
007F60  881B94     MOV W4, AD2CON4
6653:                  //AD2CSSH=0b000000000100000;
6654:                 // AD2CSSL=0b00000000001110;
6655:               AD2CSSL=0b00000000000111;
007F62  200074     MOV #0x7, W4
007F64  881B84     MOV W4, AD2CSSL
6656:               //   AD1CSSL=0b110000000000000;
6657:              //AD1CSSH = 0x0000;
6658:              //AD1CSSL = 0x012C; // Select AN2, AN3, AN5 and AN8 for scanning
6659:              /* Assign MUXA inputs */
6660:              AD2CHS0bits.CH0SA = 0; // CH0SA bits ignored for CH0 +ve input selection
007F66  801B45     MOV AD2CHS0, W5
007F68  2FFE04     MOV #0xFFE0, W4
007F6A  628204     AND W5, W4, W4
007F6C  881B44     MOV W4, AD2CHS0
6661:              AD2CHS0bits.CH0NA = 0; // Select VREF- for CH0 -ve input
007F6E  A9E368     BCLR AD2CHS0, #7
6662:              
6663:              
6664:              AD2CON1bits.SSRC=3;
007F70  801B04     MOV AD2CON1, W4
007F72  A05004     BSET W4, #5
007F74  A06004     BSET W4, #6
007F76  A17004     BCLR W4, #7
007F78  881B04     MOV W4, AD2CON1
6665:              AD2CON1bits.SSRCG=0;
007F7A  A98360     BCLR AD2CON1, #4
6666:              
6667:              /* Enable ADC module and provide ADC stabilization delay */
6668:              AD2CON1bits.ADON = 1;
007F7C  A8E361     BSET 0x361, #7
6669:                  IFS1bits.AD2IF=0;
007F7E  A9A802     BCLR IFS1, #5
6670:                  IPC5bits.AD2IP=7;
007F80  804254     MOV IPC5, W4
007F82  A04004     BSET W4, #4
007F84  A05004     BSET W4, #5
007F86  A06004     BSET W4, #6
007F88  884254     MOV W4, IPC5
6671:                  IEC1bits.AD2IE=1;
007F8A  A8A822     BSET IEC1, #5
6672:              
6673:              int k;
6674:              for (k=0;k<20000;k++);
007F8C  EB0200     CLR W4
007F8E  780F04     MOV W4, [W14]
007F90  370001     BRA 0x7F94
007F92  E80F1E     INC [W14], [W14]
007F94  24E1F4     MOV #0x4E1F, W4
007F96  78029E     MOV [W14], W5
007F98  528F84     SUB W5, W4, [W15]
007F9A  34FFFB     BRA LE, 0x7F92
6675:              
6676:              
6677:              }
007F9C  FA8000     ULNK
007F9E  060000     RETURN
6678:              
6679:              
6680:              void __attribute__((interrupt, auto_psv))  _AD2Interrupt( void )
6681:              {
007FA0  F80036     PUSH RCOUNT
007FA2  BE9F80     MOV.D W0, [W15++]
007FA4  BE9F82     MOV.D W2, [W15++]
007FA6  BE9F84     MOV.D W4, [W15++]
007FA8  BE9F86     MOV.D W6, [W15++]
007FAA  F80032     PUSH DSRPAG
007FAC  202000     MOV #0x200, W0
007FAE  880190     MOV W0, DSRPAG
007FB0  000000     NOP
007FB2  FA0006     LNK #0x6
6682:              unsigned long int TmL;
6683:              unsigned char SnT;
6684:              //Light=1;
6685:              
6686:                  IFS1bits.AD2IF=0;
007FB4  A9A802     BCLR IFS1, #5
6687:              
6688:                //  if (Sensor1_Prev==1)
6689:              
6690:                  MotorPhaseC=ADC2BUF0;
007FB6  801A04     MOV ADC2BUF0, W4
007FB8  8A00A4     MOV W4, MotorPhaseC
6691:                  MotorPhaseB=ADC2BUF1;
007FBA  801A14     MOV ADC2BUF1, W4
007FBC  8A0094     MOV W4, MotorPhaseB
6692:                  MotorPhaseA=ADC2BUF2;
007FBE  801A24     MOV ADC2BUF2, W4
007FC0  8A0084     MOV W4, MotorPhaseA
6693:              
6694:              
6695:                  MotorNeutralVoltage = (MotorPhaseA + MotorPhaseB + MotorPhaseC) / 3; 
007FC2  820085     MOV MotorPhaseA, W5
007FC4  820094     MOV MotorPhaseB, W4
007FC6  428284     ADD W5, W4, W5
007FC8  8200A4     MOV MotorPhaseC, W4
007FCA  428284     ADD W5, W4, W5
007FCC  200034     MOV #0x3, W4
007FCE  090011     REPEAT #0x11
007FD0  D88284     DIV.UW W5, W4
007FD2  780200     MOV W0, W4
007FD4  8A00B4     MOV W4, MotorNeutralVoltage
6696:              
6697:                  SnT=ReadSensor1_B();
007FD6  07075D     RCALL ReadSensor1_B
007FD8  784200     MOV.B W0, W4
007FDA  784F04     MOV.B W4, [W14]
6698:                  /*
6699:                  if (SnT==6)
6700:                      Horn=1;
6701:                  else
6702:                      Horn=0;
6703:                  */
6704:                /*if (Sensor1_Prev==6)
6705:                      Light=1;
6706:                  else
6707:                      Light=0;
6708:              */    
6709:                  
6710:                  if (Sensor1_PrevSensorless!=Sensor1_Prev)
007FDC  212484     MOV #0x1248, W4
007FDE  784294     MOV.B [W4], W5
007FE0  212474     MOV #0x1247, W4
007FE2  784214     MOV.B [W4], W4
007FE4  52CF84     SUB.B W5, W4, [W15]
007FE6  32000C     BRA Z, 0x8000
6711:                  {
6712:                      Sensor1_PrevSensorless=Sensor1_Prev;
007FE8  212474     MOV #0x1247, W4
007FEA  784214     MOV.B [W4], W4
007FEC  212485     MOV #0x1248, W5
007FEE  784A84     MOV.B W4, [W5]
6713:                      CntTicks=0;
007FF0  EB0200     CLR W4
007FF2  89BEA4     MOV W4, CntTicks
6714:                      CntAcqSensor++;
007FF4  210FC4     MOV #0x10FC, W4
007FF6  784214     MOV.B [W4], W4
007FF8  E84204     INC.B W4, W4
007FFA  210FC5     MOV #0x10FC, W5
007FFC  784A84     MOV.B W4, [W5]
007FFE  370003     BRA 0x8006
6715:                  }
6716:                  else
6717:                      CntTicks++;
008000  81BEA4     MOV CntTicks, W4
008002  E80204     INC W4, W4
008004  89BEA4     MOV W4, CntTicks
6718:                                          
6719:                  
6720:                  
6721:                                      if ((Sensor1_Prev==SensorTST)&&(!SendingMass)&&(!SendingNeutral))
008006  212474     MOV #0x1247, W4
008008  784294     MOV.B [W4], W5
00800A  243124     MOV #0x4312, W4
00800C  784214     MOV.B [W4], W4
00800E  52CF84     SUB.B W5, W4, [W15]
008010  3A001C     BRA NZ, 0x804A
008012  8095E5     MOV Flgs, W5
008014  200804     MOV #0x80, W4
008016  628204     AND W5, W4, W4
008018  520FE0     SUB W4, #0x0, [W15]
00801A  3A0017     BRA NZ, 0x804A
00801C  8095F5     MOV 0x12BE, W5
00801E  280004     MOV #0x8000, W4
008020  628204     AND W5, W4, W4
008022  520FE0     SUB W4, #0x0, [W15]
008024  3A0012     BRA NZ, 0x804A
6722:              //                        if ((!SendingMass)&&(!SendingNeutral))
6723:                                      {
6724:                                          if (CntPhase<MassTMPSIZE)
008026  821375     MOV CntPhase, W5
008028  203E74     MOV #0x3E7, W4
00802A  528F84     SUB W5, W4, [W15]
00802C  3E000E     BRA GTU, 0x804A
6725:                                          {
6726:                                          MassTMPPhase[CntPhase]=MotorPhaseC;
00802E  821374     MOV CntPhase, W4
008030  8200A5     MOV MotorPhaseC, W5
008032  420304     ADD W4, W4, W6
008034  218404     MOV #0x1840, W4
008036  430204     ADD W6, W4, W4
008038  780A05     MOV W5, [W4]
6727:                                          MassTMPNeutral[CntPhase++]=MotorNeutralVoltage;
00803A  821374     MOV CntPhase, W4
00803C  8200B6     MOV MotorNeutralVoltage, W6
00803E  420384     ADD W4, W4, W7
008040  220105     MOV #0x2010, W5
008042  438285     ADD W7, W5, W5
008044  780A86     MOV W6, [W5]
008046  E80204     INC W4, W4
008048  8A1374     MOV W4, CntPhase
6728:                                          }
6729:                                      }
6730:                                      /*else
6731:                                      {
6732:                                          if (CntPhase)
6733:                                          {
6734:                                          CntPhase=0;
6735:                                          }
6736:                                      }*/
6737:              
6738:                  if (ManualStart)
00804A  809745     MOV StatFlgs, W5
00804C  202004     MOV #0x200, W4
00804E  628204     AND W5, W4, W4
008050  520FE0     SUB W4, #0x0, [W15]
008052  320012     BRA Z, 0x8078
6739:                  {
6740:                      if (!CanZeroCrossing)
008054  809645     MOV Flgs3, W5
008056  280004     MOV #0x8000, W4
008058  628204     AND W5, W4, W4
00805A  520FE0     SUB W4, #0x0, [W15]
00805C  3A000B     BRA NZ, 0x8074
6741:                      {
6742:                          CntCanZeroCrossing++;
00805E  818404     MOV CntCanZeroCrossing, W4
008060  E80204     INC W4, W4
008062  898404     MOV W4, CntCanZeroCrossing
6743:                          if (CntCanZeroCrossing>20000)
008064  818405     MOV CntCanZeroCrossing, W5
008066  24E204     MOV #0x4E20, W4
008068  528F84     SUB W5, W4, [W15]
00806A  360006     BRA LEU, 0x8078
6744:                              CanZeroCrossing=1;
00806C  809644     MOV Flgs3, W4
00806E  A0F004     BSET W4, #15
008070  889644     MOV W4, Flgs3
008072  370002     BRA 0x8078
6745:                      }
6746:                      else
6747:                          CntCanZeroCrossing=0;
008074  EB0200     CLR W4
008076  898404     MOV W4, CntCanZeroCrossing
6748:                  }
6749:                  
6750:                  if (CanZeroCrossing)
008078  809645     MOV Flgs3, W5
00807A  280004     MOV #0x8000, W4
00807C  628204     AND W5, W4, W4
00807E  520FE0     SUB W4, #0x0, [W15]
008080  320266     BRA Z, 0x854E
6751:                  {
6752:              
6753:                      if (DirPWM1)
008082  809754     MOV StatFlgs1, W4
008084  620261     AND W4, #0x1, W4
008086  520FE0     SUB W4, #0x0, [W15]
008088  3200C2     BRA Z, 0x820E
6754:                      {
6755:                  switch (Sensor1_Prev)
00808A  212474     MOV #0x1247, W4
00808C  784214     MOV.B [W4], W4
00808E  FB8204     ZE W4, W4
008090  B92361     MUL.SU W4, #1, W6
008092  EB8200     SETM W4
008094  EB8280     SETM W5
008096  420206     ADD W4, W6, W4
008098  4A8287     ADDC W5, W7, W5
00809A  200056     MOV #0x5, W6
00809C  200007     MOV #0x0, W7
00809E  520F86     SUB W4, W6, [W15]
0080A0  5A8F87     SUBB W5, W7, [W15]
0080A2  3E0177     BRA GTU, 0x8392
0080A4  010604     BRA W4
0080A6  370005     BRA 0x80B2
0080A8  370021     BRA 0x80EC
0080AA  37003D     BRA 0x8126
0080AC  370059     BRA 0x8160
0080AE  370075     BRA 0x819A
0080B0  370091     BRA 0x81D4
6756:                  {
6757:                      case 1:
6758:                             if(MotorPhaseC > MotorNeutralVoltage)
0080B2  8200A5     MOV MotorPhaseC, W5
0080B4  8200B4     MOV MotorNeutralVoltage, W4
0080B6  528F84     SUB W5, W4, [W15]
0080B8  360014     BRA LEU, 0x80E2
6759:                          {
6760:                              if (CntTicks>5)
0080BA  81BEA4     MOV CntTicks, W4
0080BC  520FE5     SUB W4, #0x5, [W15]
0080BE  36016B     BRA LEU, 0x8396
6761:                              {
6762:                              if (CntZero)
0080C0  2183E4     MOV #0x183E, W4
0080C2  784214     MOV.B [W4], W4
0080C4  524FE0     SUB.B W4, #0x0, [W15]
0080C6  320169     BRA Z, 0x839A
6763:                              {
6764:                              CntZero--;
0080C8  2183E4     MOV #0x183E, W4
0080CA  784214     MOV.B [W4], W4
0080CC  E94204     DEC.B W4, W4
0080CE  2183E5     MOV #0x183E, W5
0080D0  784A84     MOV.B W4, [W5]
6765:                              if (!CntZero)
0080D2  2183E4     MOV #0x183E, W4
0080D4  784214     MOV.B [W4], W4
0080D6  524FE0     SUB.B W4, #0x0, [W15]
0080D8  3A0162     BRA NZ, 0x839E
6766:                              {
6767:              //                    if (SensorlessNotBEMF)
6768:                              HvZeroCrossing=1;
0080DA  809624     MOV Flgs2, W4
0080DC  A0D004     BSET W4, #13
0080DE  889624     MOV W4, Flgs2
6769:                    //          MassTMPNeutral[CntPhase-1]=200;
6770:                                  }
6771:                              }
6772:                              }
6773:                          }
6774:                          else
6775:                          {
6776:                              CntZero=CntZeroConst;
0080E2  2426C4     MOV #0x426C, W4
0080E4  784214     MOV.B [W4], W4
0080E6  2183E5     MOV #0x183E, W5
0080E8  784A84     MOV.B W4, [W5]
6777:                          }
6778:                             break;
0080E0  3701A1     BRA 0x8424
0080EA  37019C     BRA 0x8424
008396  000000     NOP
008398  370045     BRA 0x8424
00839A  000000     NOP
00839C  370043     BRA 0x8424
00839E  000000     NOP
0083A0  370041     BRA 0x8424
6779:                      case 2:
6780:                             if(MotorPhaseA > MotorNeutralVoltage)
0080EC  820085     MOV MotorPhaseA, W5
0080EE  8200B4     MOV MotorNeutralVoltage, W4
0080F0  528F84     SUB W5, W4, [W15]
0080F2  360014     BRA LEU, 0x811C
6781:                          {
6782:                              if (CntTicks>5)
0080F4  81BEA4     MOV CntTicks, W4
0080F6  520FE5     SUB W4, #0x5, [W15]
0080F8  360154     BRA LEU, 0x83A2
6783:                              {
6784:                              if (CntZero)
0080FA  2183E4     MOV #0x183E, W4
0080FC  784214     MOV.B [W4], W4
0080FE  524FE0     SUB.B W4, #0x0, [W15]
008100  320152     BRA Z, 0x83A6
6785:                              {
6786:                              CntZero--;
008102  2183E4     MOV #0x183E, W4
008104  784214     MOV.B [W4], W4
008106  E94204     DEC.B W4, W4
008108  2183E5     MOV #0x183E, W5
00810A  784A84     MOV.B W4, [W5]
6787:                              if (!CntZero)
00810C  2183E4     MOV #0x183E, W4
00810E  784214     MOV.B [W4], W4
008110  524FE0     SUB.B W4, #0x0, [W15]
008112  3A014B     BRA NZ, 0x83AA
6788:                              {
6789:              //                    if (SensorlessNotBEMF)
6790:                              HvZeroCrossing=1;
008114  809624     MOV Flgs2, W4
008116  A0D004     BSET W4, #13
008118  889624     MOV W4, Flgs2
6791:                              
6792:                    //          MassTMPNeutral[CntPhase-1]=200;
6793:                                  }
6794:                              }
6795:                              }
6796:                          }
6797:                          else
6798:                          {
6799:                              CntZero=CntZeroConst;
00811C  2426C4     MOV #0x426C, W4
00811E  784214     MOV.B [W4], W4
008120  2183E5     MOV #0x183E, W5
008122  784A84     MOV.B W4, [W5]
6800:                          }
6801:                             break;
00811A  370184     BRA 0x8424
008124  37017F     BRA 0x8424
0083A2  000000     NOP
0083A4  37003F     BRA 0x8424
0083A6  000000     NOP
0083A8  37003D     BRA 0x8424
0083AA  000000     NOP
0083AC  37003B     BRA 0x8424
6802:                      case 3:
6803:                             if(MotorPhaseB < MotorNeutralVoltage)
008126  820095     MOV MotorPhaseB, W5
008128  8200B4     MOV MotorNeutralVoltage, W4
00812A  528F84     SUB W5, W4, [W15]
00812C  310014     BRA C, 0x8156
6804:                          {
6805:                              if (CntTicks>5)
00812E  81BEA4     MOV CntTicks, W4
008130  520FE5     SUB W4, #0x5, [W15]
008132  36013D     BRA LEU, 0x83AE
6806:                              {
6807:                              if (CntZero)
008134  2183E4     MOV #0x183E, W4
008136  784214     MOV.B [W4], W4
008138  524FE0     SUB.B W4, #0x0, [W15]
00813A  32013B     BRA Z, 0x83B2
6808:                              {
6809:                              CntZero--;
00813C  2183E4     MOV #0x183E, W4
00813E  784214     MOV.B [W4], W4
008140  E94204     DEC.B W4, W4
008142  2183E5     MOV #0x183E, W5
008144  784A84     MOV.B W4, [W5]
6810:                              if (!CntZero)
008146  2183E4     MOV #0x183E, W4
008148  784214     MOV.B [W4], W4
00814A  524FE0     SUB.B W4, #0x0, [W15]
00814C  3A0134     BRA NZ, 0x83B6
6811:                              {
6812:              //                    if (SensorlessNotBEMF)
6813:                              HvZeroCrossing=1;
00814E  809624     MOV Flgs2, W4
008150  A0D004     BSET W4, #13
008152  889624     MOV W4, Flgs2
6814:                              
6815:                     //         MassTMPNeutral[CntPhase-1]=200;
6816:                                  }
6817:                              }
6818:                              }
6819:                          }
6820:                          else
6821:                          {
6822:                              CntZero=CntZeroConst;
008156  2426C4     MOV #0x426C, W4
008158  784214     MOV.B [W4], W4
00815A  2183E5     MOV #0x183E, W5
00815C  784A84     MOV.B W4, [W5]
6823:                          }
6824:                             break;
008154  370167     BRA 0x8424
00815E  370162     BRA 0x8424
0083AE  000000     NOP
0083B0  370039     BRA 0x8424
0083B2  000000     NOP
0083B4  370037     BRA 0x8424
0083B6  000000     NOP
0083B8  370035     BRA 0x8424
6825:              
6826:                      case 4:
6827:                             if(MotorPhaseB > MotorNeutralVoltage)
008160  820095     MOV MotorPhaseB, W5
008162  8200B4     MOV MotorNeutralVoltage, W4
008164  528F84     SUB W5, W4, [W15]
008166  360014     BRA LEU, 0x8190
6828:                         {
6829:                              if (CntTicks>5)
008168  81BEA4     MOV CntTicks, W4
00816A  520FE5     SUB W4, #0x5, [W15]
00816C  360126     BRA LEU, 0x83BA
6830:                              {
6831:                              if (CntZero)
00816E  2183E4     MOV #0x183E, W4
008170  784214     MOV.B [W4], W4
008172  524FE0     SUB.B W4, #0x0, [W15]
008174  320124     BRA Z, 0x83BE
6832:                              {
6833:                              CntZero--;
008176  2183E4     MOV #0x183E, W4
008178  784214     MOV.B [W4], W4
00817A  E94204     DEC.B W4, W4
00817C  2183E5     MOV #0x183E, W5
00817E  784A84     MOV.B W4, [W5]
6834:                              if (!CntZero)
008180  2183E4     MOV #0x183E, W4
008182  784214     MOV.B [W4], W4
008184  524FE0     SUB.B W4, #0x0, [W15]
008186  3A011D     BRA NZ, 0x83C2
6835:                              {
6836:              //                    if (SensorlessNotBEMF)
6837:                              HvZeroCrossing=1;
008188  809624     MOV Flgs2, W4
00818A  A0D004     BSET W4, #13
00818C  889624     MOV W4, Flgs2
6838:                       //       MassTMPNeutral[CntPhase-1]=200;
6839:                                  }
6840:                              }
6841:                              }
6842:                          }
6843:                          else
6844:                          {
6845:                              CntZero=CntZeroConst;
008190  2426C4     MOV #0x426C, W4
008192  784214     MOV.B [W4], W4
008194  2183E5     MOV #0x183E, W5
008196  784A84     MOV.B W4, [W5]
6846:                          }
6847:                             break;
00818E  37014A     BRA 0x8424
008198  370145     BRA 0x8424
0083BA  000000     NOP
0083BC  370033     BRA 0x8424
0083BE  000000     NOP
0083C0  370031     BRA 0x8424
0083C2  000000     NOP
0083C4  37002F     BRA 0x8424
6848:                      case 5:
6849:                             if(MotorPhaseA < MotorNeutralVoltage)
00819A  820085     MOV MotorPhaseA, W5
00819C  8200B4     MOV MotorNeutralVoltage, W4
00819E  528F84     SUB W5, W4, [W15]
0081A0  310014     BRA C, 0x81CA
6850:                          {
6851:                              if (CntTicks>5)
0081A2  81BEA4     MOV CntTicks, W4
0081A4  520FE5     SUB W4, #0x5, [W15]
0081A6  36010F     BRA LEU, 0x83C6
6852:                              {
6853:                              if (CntZero)
0081A8  2183E4     MOV #0x183E, W4
0081AA  784214     MOV.B [W4], W4
0081AC  524FE0     SUB.B W4, #0x0, [W15]
0081AE  32010D     BRA Z, 0x83CA
6854:                              {
6855:                              CntZero--;
0081B0  2183E4     MOV #0x183E, W4
0081B2  784214     MOV.B [W4], W4
0081B4  E94204     DEC.B W4, W4
0081B6  2183E5     MOV #0x183E, W5
0081B8  784A84     MOV.B W4, [W5]
6856:                              if (!CntZero)
0081BA  2183E4     MOV #0x183E, W4
0081BC  784214     MOV.B [W4], W4
0081BE  524FE0     SUB.B W4, #0x0, [W15]
0081C0  3A0106     BRA NZ, 0x83CE
6857:                              {
6858:              //                    if (SensorlessNotBEMF)
6859:                              HvZeroCrossing=1;
0081C2  809624     MOV Flgs2, W4
0081C4  A0D004     BSET W4, #13
0081C6  889624     MOV W4, Flgs2
6860:                      //        MassTMPNeutral[CntPhase-1]=200;
6861:                                  }
6862:                              }
6863:                              }
6864:                          }
6865:                          else
6866:                          {
6867:                              CntZero=CntZeroConst;
0081CA  2426C4     MOV #0x426C, W4
0081CC  784214     MOV.B [W4], W4
0081CE  2183E5     MOV #0x183E, W5
0081D0  784A84     MOV.B W4, [W5]
6868:                          }
6869:                             break;
0081C8  37012D     BRA 0x8424
0081D2  370128     BRA 0x8424
0083C6  000000     NOP
0083C8  37002D     BRA 0x8424
0083CA  000000     NOP
0083CC  37002B     BRA 0x8424
0083CE  000000     NOP
0083D0  370029     BRA 0x8424
6870:                      case 6:
6871:                             if(MotorPhaseC < MotorNeutralVoltage)
0081D4  8200A5     MOV MotorPhaseC, W5
0081D6  8200B4     MOV MotorNeutralVoltage, W4
0081D8  528F84     SUB W5, W4, [W15]
0081DA  310014     BRA C, 0x8204
6872:                         {
6873:                              if (CntTicks>5)
0081DC  81BEA4     MOV CntTicks, W4
0081DE  520FE5     SUB W4, #0x5, [W15]
0081E0  3600F8     BRA LEU, 0x83D2
6874:                              {
6875:                              if (CntZero)
0081E2  2183E4     MOV #0x183E, W4
0081E4  784214     MOV.B [W4], W4
0081E6  524FE0     SUB.B W4, #0x0, [W15]
0081E8  3200F6     BRA Z, 0x83D6
6876:                              {
6877:                              CntZero--;
0081EA  2183E4     MOV #0x183E, W4
0081EC  784214     MOV.B [W4], W4
0081EE  E94204     DEC.B W4, W4
0081F0  2183E5     MOV #0x183E, W5
0081F2  784A84     MOV.B W4, [W5]
6878:                              if (!CntZero)
0081F4  2183E4     MOV #0x183E, W4
0081F6  784214     MOV.B [W4], W4
0081F8  524FE0     SUB.B W4, #0x0, [W15]
0081FA  3A00EF     BRA NZ, 0x83DA
6879:                              {
6880:              //                    if (SensorlessNotBEMF)
6881:                              HvZeroCrossing=1;
0081FC  809624     MOV Flgs2, W4
0081FE  A0D004     BSET W4, #13
008200  889624     MOV W4, Flgs2
6882:                              
6883:                          //    MassTMPNeutral[CntPhase-1]=200;
6884:                                  }
6885:                              }
6886:                              }
6887:                          }
6888:                          else
6889:                          {
6890:                              CntZero=CntZeroConst;
008204  2426C4     MOV #0x426C, W4
008206  784214     MOV.B [W4], W4
008208  2183E5     MOV #0x183E, W5
00820A  784A84     MOV.B W4, [W5]
6891:                          }
6892:                             break;
008202  370110     BRA 0x8424
00820C  37010B     BRA 0x8424
008392  000000     NOP
008394  370047     BRA 0x8424
0083D2  000000     NOP
0083D4  370027     BRA 0x8424
0083D6  000000     NOP
0083D8  370025     BRA 0x8424
0083DA  000000     NOP
0083DC  370023     BRA 0x8424
6893:                                      
6894:                  }
6895:                  }
6896:                      else
6897:                      {
6898:                              switch (Sensor1_Prev)
00820E  212474     MOV #0x1247, W4
008210  784214     MOV.B [W4], W4
008212  FB8204     ZE W4, W4
008214  B92361     MUL.SU W4, #1, W6
008216  EB8200     SETM W4
008218  EB8280     SETM W5
00821A  420206     ADD W4, W6, W4
00821C  4A8287     ADDC W5, W7, W5
00821E  200056     MOV #0x5, W6
008220  200007     MOV #0x0, W7
008222  520F86     SUB W4, W6, [W15]
008224  5A8F87     SUBB W5, W7, [W15]
008226  3E00FE     BRA GTU, 0x8424
008228  010604     BRA W4
00822A  370005     BRA 0x8236
00822C  370021     BRA 0x8270
00822E  37003D     BRA 0x82AA
008230  370059     BRA 0x82E4
008232  370075     BRA 0x831E
008234  370091     BRA 0x8358
6899:                  {
6900:                      case 1:
6901:                             if(MotorPhaseC < MotorNeutralVoltage)
008236  8200A5     MOV MotorPhaseC, W5
008238  8200B4     MOV MotorNeutralVoltage, W4
00823A  528F84     SUB W5, W4, [W15]
00823C  310014     BRA C, 0x8266
6902:                          {
6903:                              if (CntTicks>5)
00823E  81BEA4     MOV CntTicks, W4
008240  520FE5     SUB W4, #0x5, [W15]
008242  3600CD     BRA LEU, 0x83DE
6904:                              {
6905:                              if (CntZero)
008244  2183E4     MOV #0x183E, W4
008246  784214     MOV.B [W4], W4
008248  524FE0     SUB.B W4, #0x0, [W15]
00824A  3200CB     BRA Z, 0x83E2
6906:                              {
6907:                              CntZero--;
00824C  2183E4     MOV #0x183E, W4
00824E  784214     MOV.B [W4], W4
008250  E94204     DEC.B W4, W4
008252  2183E5     MOV #0x183E, W5
008254  784A84     MOV.B W4, [W5]
6908:                              if (!CntZero)
008256  2183E4     MOV #0x183E, W4
008258  784214     MOV.B [W4], W4
00825A  524FE0     SUB.B W4, #0x0, [W15]
00825C  3A00C4     BRA NZ, 0x83E6
6909:                              {
6910:              //                    if (SensorlessNotBEMF)
6911:                              HvZeroCrossing=1;
00825E  809624     MOV Flgs2, W4
008260  A0D004     BSET W4, #13
008262  889624     MOV W4, Flgs2
6912:                      //        MassTMPNeutral[CntPhase-1]=200;
6913:                                  }
6914:                              }
6915:                              }
6916:                          }
6917:                          else
6918:                          {
6919:                              CntZero=CntZeroConst;
008266  2426C4     MOV #0x426C, W4
008268  784214     MOV.B [W4], W4
00826A  2183E5     MOV #0x183E, W5
00826C  784A84     MOV.B W4, [W5]
6920:                          }
6921:                             break;
008264  3700DF     BRA 0x8424
00826E  3700DA     BRA 0x8424
0083DE  000000     NOP
0083E0  370021     BRA 0x8424
0083E2  000000     NOP
0083E4  37001F     BRA 0x8424
0083E6  000000     NOP
0083E8  37001D     BRA 0x8424
6922:                      case 2:
6923:                             if(MotorPhaseA < MotorNeutralVoltage)
008270  820085     MOV MotorPhaseA, W5
008272  8200B4     MOV MotorNeutralVoltage, W4
008274  528F84     SUB W5, W4, [W15]
008276  310014     BRA C, 0x82A0
6924:                          {
6925:                              if (CntTicks>5)
008278  81BEA4     MOV CntTicks, W4
00827A  520FE5     SUB W4, #0x5, [W15]
00827C  3600B6     BRA LEU, 0x83EA
6926:                              {
6927:                              if (CntZero)
00827E  2183E4     MOV #0x183E, W4
008280  784214     MOV.B [W4], W4
008282  524FE0     SUB.B W4, #0x0, [W15]
008284  3200B4     BRA Z, 0x83EE
6928:                              {
6929:                              CntZero--;
008286  2183E4     MOV #0x183E, W4
008288  784214     MOV.B [W4], W4
00828A  E94204     DEC.B W4, W4
00828C  2183E5     MOV #0x183E, W5
00828E  784A84     MOV.B W4, [W5]
6930:                              if (!CntZero)
008290  2183E4     MOV #0x183E, W4
008292  784214     MOV.B [W4], W4
008294  524FE0     SUB.B W4, #0x0, [W15]
008296  3A00AD     BRA NZ, 0x83F2
6931:                              {
6932:              //                    if (SensorlessNotBEMF)
6933:                              HvZeroCrossing=1;
008298  809624     MOV Flgs2, W4
00829A  A0D004     BSET W4, #13
00829C  889624     MOV W4, Flgs2
6934:                              
6935:                              
6936:                      //        MassTMPNeutral[CntPhase-1]=200;
6937:                                  }
6938:                              }
6939:                              }
6940:                          }
6941:                          else
6942:                          {
6943:                              CntZero=CntZeroConst;
0082A0  2426C4     MOV #0x426C, W4
0082A2  784214     MOV.B [W4], W4
0082A4  2183E5     MOV #0x183E, W5
0082A6  784A84     MOV.B W4, [W5]
6944:                          }
6945:                             break;
00829E  3700C2     BRA 0x8424
0082A8  3700BD     BRA 0x8424
0083EA  000000     NOP
0083EC  37001B     BRA 0x8424
0083EE  000000     NOP
0083F0  370019     BRA 0x8424
0083F2  000000     NOP
0083F4  370017     BRA 0x8424
6946:                      case 3:
6947:                             if(MotorPhaseB > MotorNeutralVoltage)
0082AA  820095     MOV MotorPhaseB, W5
0082AC  8200B4     MOV MotorNeutralVoltage, W4
0082AE  528F84     SUB W5, W4, [W15]
0082B0  360014     BRA LEU, 0x82DA
6948:                          {
6949:                              if (CntTicks>5)
0082B2  81BEA4     MOV CntTicks, W4
0082B4  520FE5     SUB W4, #0x5, [W15]
0082B6  36009F     BRA LEU, 0x83F6
6950:                              {
6951:                              if (CntZero)
0082B8  2183E4     MOV #0x183E, W4
0082BA  784214     MOV.B [W4], W4
0082BC  524FE0     SUB.B W4, #0x0, [W15]
0082BE  32009D     BRA Z, 0x83FA
6952:                              {
6953:                              CntZero--;
0082C0  2183E4     MOV #0x183E, W4
0082C2  784214     MOV.B [W4], W4
0082C4  E94204     DEC.B W4, W4
0082C6  2183E5     MOV #0x183E, W5
0082C8  784A84     MOV.B W4, [W5]
6954:                              if (!CntZero)
0082CA  2183E4     MOV #0x183E, W4
0082CC  784214     MOV.B [W4], W4
0082CE  524FE0     SUB.B W4, #0x0, [W15]
0082D0  3A0096     BRA NZ, 0x83FE
6955:                              {
6956:              //                    if (SensorlessNotBEMF)
6957:                              HvZeroCrossing=1;
0082D2  809624     MOV Flgs2, W4
0082D4  A0D004     BSET W4, #13
0082D6  889624     MOV W4, Flgs2
6958:                    //         MassTMPNeutral[CntPhase-1]=200;
6959:                                  }
6960:                              }
6961:                              }
6962:                          }
6963:                          else
6964:                          {
6965:                              CntZero=CntZeroConst;
0082DA  2426C4     MOV #0x426C, W4
0082DC  784214     MOV.B [W4], W4
0082DE  2183E5     MOV #0x183E, W5
0082E0  784A84     MOV.B W4, [W5]
6966:                          }
6967:                             break;
0082D8  3700A5     BRA 0x8424
0082E2  3700A0     BRA 0x8424
0083F6  000000     NOP
0083F8  370015     BRA 0x8424
0083FA  000000     NOP
0083FC  370013     BRA 0x8424
0083FE  000000     NOP
008400  370011     BRA 0x8424
6968:              
6969:                      case 4:
6970:                             if(MotorPhaseB < MotorNeutralVoltage)
0082E4  820095     MOV MotorPhaseB, W5
0082E6  8200B4     MOV MotorNeutralVoltage, W4
0082E8  528F84     SUB W5, W4, [W15]
0082EA  310014     BRA C, 0x8314
6971:                         {
6972:                              if (CntTicks>5)
0082EC  81BEA4     MOV CntTicks, W4
0082EE  520FE5     SUB W4, #0x5, [W15]
0082F0  360088     BRA LEU, 0x8402
6973:                              {
6974:                              if (CntZero)
0082F2  2183E4     MOV #0x183E, W4
0082F4  784214     MOV.B [W4], W4
0082F6  524FE0     SUB.B W4, #0x0, [W15]
0082F8  320086     BRA Z, 0x8406
6975:                              {
6976:                              CntZero--;
0082FA  2183E4     MOV #0x183E, W4
0082FC  784214     MOV.B [W4], W4
0082FE  E94204     DEC.B W4, W4
008300  2183E5     MOV #0x183E, W5
008302  784A84     MOV.B W4, [W5]
6977:                              if (!CntZero)
008304  2183E4     MOV #0x183E, W4
008306  784214     MOV.B [W4], W4
008308  524FE0     SUB.B W4, #0x0, [W15]
00830A  3A007F     BRA NZ, 0x840A
6978:                              {
6979:              //                    if (SensorlessNotBEMF)
6980:                              HvZeroCrossing=1;
00830C  809624     MOV Flgs2, W4
00830E  A0D004     BSET W4, #13
008310  889624     MOV W4, Flgs2
6981:                     //         MassTMPNeutral[CntPhase-1]=200;
6982:                                  }
6983:                              }
6984:                              }
6985:                          }
6986:                          else
6987:                          {
6988:                              CntZero=CntZeroConst;
008314  2426C4     MOV #0x426C, W4
008316  784214     MOV.B [W4], W4
008318  2183E5     MOV #0x183E, W5
00831A  784A84     MOV.B W4, [W5]
6989:                          }
6990:                             break;
008312  370088     BRA 0x8424
00831C  370083     BRA 0x8424
008402  000000     NOP
008404  37000F     BRA 0x8424
008406  000000     NOP
008408  37000D     BRA 0x8424
00840A  000000     NOP
00840C  37000B     BRA 0x8424
6991:                      case 5:
6992:                             if(MotorPhaseA > MotorNeutralVoltage)
00831E  820085     MOV MotorPhaseA, W5
008320  8200B4     MOV MotorNeutralVoltage, W4
008322  528F84     SUB W5, W4, [W15]
008324  360014     BRA LEU, 0x834E
6993:                          {
6994:                              if (CntTicks>5)
008326  81BEA4     MOV CntTicks, W4
008328  520FE5     SUB W4, #0x5, [W15]
00832A  360071     BRA LEU, 0x840E
6995:                              {
6996:                              if (CntZero)
00832C  2183E4     MOV #0x183E, W4
00832E  784214     MOV.B [W4], W4
008330  524FE0     SUB.B W4, #0x0, [W15]
008332  32006F     BRA Z, 0x8412
6997:                              {
6998:                              CntZero--;
008334  2183E4     MOV #0x183E, W4
008336  784214     MOV.B [W4], W4
008338  E94204     DEC.B W4, W4
00833A  2183E5     MOV #0x183E, W5
00833C  784A84     MOV.B W4, [W5]
6999:                              if (!CntZero)
00833E  2183E4     MOV #0x183E, W4
008340  784214     MOV.B [W4], W4
008342  524FE0     SUB.B W4, #0x0, [W15]
008344  3A0068     BRA NZ, 0x8416
7000:                              {
7001:              //                    if (SensorlessNotBEMF)
7002:                              HvZeroCrossing=1;
008346  809624     MOV Flgs2, W4
008348  A0D004     BSET W4, #13
00834A  889624     MOV W4, Flgs2
7003:                              
7004:                         //     MassTMPNeutral[CntPhase-1]=200;
7005:                                  }
7006:                              }
7007:                              }
7008:                          }
7009:                          else
7010:                          {
7011:                              CntZero=CntZeroConst;
00834E  2426C4     MOV #0x426C, W4
008350  784214     MOV.B [W4], W4
008352  2183E5     MOV #0x183E, W5
008354  784A84     MOV.B W4, [W5]
7012:                          }
7013:                             break;
00834C  37006B     BRA 0x8424
008356  370066     BRA 0x8424
00840E  000000     NOP
008410  370009     BRA 0x8424
008412  000000     NOP
008414  370007     BRA 0x8424
008416  000000     NOP
008418  370005     BRA 0x8424
7014:                      case 6:
7015:                             if(MotorPhaseC > MotorNeutralVoltage)
008358  8200A5     MOV MotorPhaseC, W5
00835A  8200B4     MOV MotorNeutralVoltage, W4
00835C  528F84     SUB W5, W4, [W15]
00835E  360014     BRA LEU, 0x8388
7016:                         {
7017:                              if (CntTicks>5)
008360  81BEA4     MOV CntTicks, W4
008362  520FE5     SUB W4, #0x5, [W15]
008364  36005A     BRA LEU, 0x841A
7018:                              {
7019:                              if (CntZero)
008366  2183E4     MOV #0x183E, W4
008368  784214     MOV.B [W4], W4
00836A  524FE0     SUB.B W4, #0x0, [W15]
00836C  320058     BRA Z, 0x841E
7020:                              {
7021:                              CntZero--;
00836E  2183E4     MOV #0x183E, W4
008370  784214     MOV.B [W4], W4
008372  E94204     DEC.B W4, W4
008374  2183E5     MOV #0x183E, W5
008376  784A84     MOV.B W4, [W5]
7022:                              if (!CntZero)
008378  2183E4     MOV #0x183E, W4
00837A  784214     MOV.B [W4], W4
00837C  524FE0     SUB.B W4, #0x0, [W15]
00837E  3A0051     BRA NZ, 0x8422
7023:                              {
7024:              //                    if (SensorlessNotBEMF)
7025:                              HvZeroCrossing=1;
008380  809624     MOV Flgs2, W4
008382  A0D004     BSET W4, #13
008384  889624     MOV W4, Flgs2
7026:                              
7027:                      //        MassTMPNeutral[CntPhase-1]=200;
7028:                                  }
7029:                              }
7030:                              }
7031:                          }
7032:                          else
7033:                          {
7034:                              CntZero=CntZeroConst;
008388  2426C4     MOV #0x426C, W4
00838A  784214     MOV.B [W4], W4
00838C  2183E5     MOV #0x183E, W5
00838E  784A84     MOV.B W4, [W5]
7035:                          }
7036:                             break;
008386  37004E     BRA 0x8424
008390  370049     BRA 0x8424
00841A  000000     NOP
00841C  370003     BRA 0x8424
00841E  000000     NOP
008420  370001     BRA 0x8424
008422  000000     NOP
7037:                                      
7038:                  }
7039:                      }
7040:                                  
7041:                         
7042:                      
7043:                                  
7044:                  
7045:                  if (HvZeroCrossing)
008424  809625     MOV Flgs2, W5
008426  220004     MOV #0x2000, W4
008428  628204     AND W5, W4, W4
00842A  520FE0     SUB W4, #0x0, [W15]
00842C  32008D     BRA Z, 0x8548
7046:                      {
7047:                      
7048:                      MassTMPNeutral[CntPhase-1]=200;
00842E  821374     MOV CntPhase, W4
008430  E90204     DEC W4, W4
008432  420284     ADD W4, W4, W5
008434  220104     MOV #0x2010, W4
008436  428204     ADD W5, W4, W4
008438  200C85     MOV #0xC8, W5
00843A  780A05     MOV W5, [W4]
7049:                      
7050:                      
7051:              //        if (CntHvZ_Cr<10)
7052:                //          CntHvZ_Cr++;
7053:                  //    else
7054:                          HvZ_Cr=1;
00843C  809694     MOV 0x12D2, W4
00843E  A09004     BSET W4, #9
008440  889694     MOV W4, 0x12D2
7055:              
7056:              
7057:                          Odometr++;
008442  818384     MOV Odometr, W4
008444  818395     MOV 0x3072, W5
008446  420261     ADD W4, #0x1, W4
008448  4A82E0     ADDC W5, #0x0, W5
00844A  898384     MOV W4, Odometr
00844C  898395     MOV W5, 0x3072
7058:                          Distance++;
00844E  81B8A4     MOV Distance, W4
008450  81B8B5     MOV 0x3716, W5
008452  420261     ADD W4, #0x1, W4
008454  4A82E0     ADDC W5, #0x0, W5
008456  89B8A4     MOV W4, Distance
008458  89B8B5     MOV W5, 0x3716
7059:              
7060:                      if (!MeasuringSpd1)
00845A  8095F5     MOV 0x12BE, W5
00845C  220004     MOV #0x2000, W4
00845E  628204     AND W5, W4, W4
008460  520FE0     SUB W4, #0x0, [W15]
008462  3A0006     BRA NZ, 0x8470
7061:                          {
7062:                          _1sCnt1=0;
008464  EB0200     CLR W4
008466  897ED4     MOV W4, _1sCnt1
7063:                          MeasuringSpd1=1;
008468  8095F4     MOV 0x12BE, W4
00846A  A0D004     BSET W4, #13
00846C  8895F4     MOV W4, 0x12BE
00846E  37000C     BRA 0x8488
7064:                          }
7065:                      else
7066:                          {
7067:                          if (Forward1)
008470  8095E5     MOV Flgs, W5
008472  200404     MOV #0x40, W4
008474  628204     AND W5, W4, W4
008476  520FE0     SUB W4, #0x0, [W15]
008478  320004     BRA Z, 0x8482
7068:                              Spd1Cnt++;
00847A  817F54     MOV Spd1Cnt, W4
00847C  E80204     INC W4, W4
00847E  897F54     MOV W4, Spd1Cnt
008480  370003     BRA 0x8488
7069:                          else
7070:                              Spd1Cnt--;
008482  817F54     MOV Spd1Cnt, W4
008484  E90204     DEC W4, W4
008486  897F54     MOV W4, Spd1Cnt
7071:                          }
7072:              
7073:                      
7074:                      
7075:                      
7076:                      SensorBEMF=Sensor1_Prev;
008488  212474     MOV #0x1247, W4
00848A  784214     MOV.B [W4], W4
00848C  230795     MOV #0x3079, W5
00848E  784A84     MOV.B W4, [W5]
7077:                      CanZeroCrossing=0;
008490  809644     MOV Flgs3, W4
008492  A1F004     BCLR W4, #15
008494  889644     MOV W4, Flgs3
7078:                      HvZeroCrossing=0;
008496  809624     MOV Flgs2, W4
008498  A1D004     BCLR W4, #13
00849A  889624     MOV W4, Flgs2
7079:                  CntZero=CntZeroConst;
00849C  2426C4     MOV #0x426C, W4
00849E  784214     MOV.B [W4], W4
0084A0  2183E5     MOV #0x183E, W5
0084A2  784A84     MOV.B W4, [W5]
7080:                      //Light=!Light;
7081:                      CntBEMF++;                
0084A4  210FD4     MOV #0x10FD, W4
0084A6  784214     MOV.B [W4], W4
0084A8  E84204     INC.B W4, W4
0084AA  210FD5     MOV #0x10FD, W5
0084AC  784A84     MOV.B W4, [W5]
7082:                      
7083:              
7084:                                          TmL=TMR4;
0084AE  8008A4     MOV TMR4, W4
0084B0  200005     MOV #0x0, W5
0084B2  980714     MOV W4, [W14+2]
0084B4  980725     MOV W5, [W14+4]
7085:                                  Phase1PeriodTek=TMR5HLD;
0084B6  8008B4     MOV TMR5HLD, W4
0084B8  200005     MOV #0x0, W5
0084BA  8888F4     MOV W4, Phase1PeriodTek
0084BC  888905     MOV W5, 0x1120
7086:                                  Phase1PeriodTek=(Phase1PeriodTek<<16)+TmL;
0084BE  8088F4     MOV Phase1PeriodTek, W4
0084C0  808905     MOV 0x1120, W5
0084C2  DD22C0     SL W4, #0, W5
0084C4  200004     MOV #0x0, W4
0084C6  BE0304     MOV.D W4, W6
0084C8  90021E     MOV [W14+2], W4
0084CA  9002AE     MOV [W14+4], W5
0084CC  420206     ADD W4, W6, W4
0084CE  4A8287     ADDC W5, W7, W5
0084D0  8888F4     MOV W4, Phase1PeriodTek
0084D2  888905     MOV W5, 0x1120
7087:              
7088:                                  Phase1Period1=(Phase1PeriodPrev+Phase1PeriodTek)>>1;
0084D4  8088D6     MOV Phase1PeriodPrev, W6
0084D6  8088E7     MOV 0x111C, W7
0084D8  8088F4     MOV Phase1PeriodTek, W4
0084DA  808905     MOV 0x1120, W5
0084DC  420206     ADD W4, W6, W4
0084DE  4A8287     ADDC W5, W7, W5
0084E0  D18285     ASR W5, W5
0084E2  D38204     RRC W4, W4
0084E4  888894     MOV W4, Phase1Period1
0084E6  8888A5     MOV W5, 0x1114
7089:                                  Phase1PeriodPrev=Phase1PeriodTek;
0084E8  8088F4     MOV Phase1PeriodTek, W4
0084EA  808905     MOV 0x1120, W5
0084EC  8888D4     MOV W4, Phase1PeriodPrev
0084EE  8888E5     MOV W5, 0x111C
7090:              
7091:              
7092:                                  if (Phase1PeriodTek<Phase1Period1)
0084F0  8088F6     MOV Phase1PeriodTek, W6
0084F2  808907     MOV 0x1120, W7
0084F4  808894     MOV Phase1Period1, W4
0084F6  8088A5     MOV 0x1114, W5
0084F8  530F84     SUB W6, W4, [W15]
0084FA  5B8F85     SUBB W7, W5, [W15]
0084FC  3D001A     BRA GE, 0x8532
7093:                                  {
7094:                                     TMR7Sensorless=Phase1Period1>>1;
0084FE  808894     MOV Phase1Period1, W4
008500  8088A5     MOV 0x1114, W5
008502  D18285     ASR W5, W5
008504  D38204     RRC W4, W4
008506  888914     MOV W4, TMR7Sensorless
008508  888925     MOV W5, 0x1124
7095:              
7096:                                      TMR7HLD=TMR7Sensorless>>16;
00850A  808914     MOV TMR7Sensorless, W4
00850C  808925     MOV 0x1124, W5
00850E  DEAA40     ASR W5, #0, W4
008510  DEA2CF     ASR W4, #15, W5
008512  780204     MOV W4, W4
008514  880924     MOV W4, TMR7HLD
7097:                                      TMR6=TMR7Sensorless;
008516  808914     MOV TMR7Sensorless, W4
008518  808925     MOV 0x1124, W5
00851A  780204     MOV W4, W4
00851C  880914     MOV W4, TMR6
7098:              
7099:              
7100:                                     PR7=Phase1Period1>>16;
00851E  808894     MOV Phase1Period1, W4
008520  8088A5     MOV 0x1114, W5
008522  DEAA40     ASR W5, #0, W4
008524  DEA2CF     ASR W4, #15, W5
008526  780204     MOV W4, W4
008528  880954     MOV W4, PR7
7101:                                     PR6=Phase1Period1;
00852A  808894     MOV Phase1Period1, W4
00852C  8088A5     MOV 0x1114, W5
00852E  780204     MOV W4, W4
008530  880944     MOV W4, PR6
7102:              
7103:                                  }
7104:              
7105:                                  Phase1Period2=TMR7Sensorless;
008532  808914     MOV TMR7Sensorless, W4
008534  808925     MOV 0x1124, W5
008536  8888B4     MOV W4, Phase1Period2
008538  8888C5     MOV W5, 0x1118
7106:              
7107:                                  TMR5HLD=0;
00853A  EB0200     CLR W4
00853C  8808B4     MOV W4, TMR5HLD
7108:                                  TMR4=0;
00853E  EB0200     CLR W4
008540  8808A4     MOV W4, TMR4
7109:                                  TMR5=0;
008542  EB0200     CLR W4
008544  8808C4     MOV W4, TMR5
008546  370003     BRA 0x854E
7110:              
7111:              
7112:              
7113:                      }
7114:                  else
7115:                      {
7116:              //        CntHvZ_Cr=0;
7117:                      HvZ_Cr=0;
008548  809694     MOV 0x12D2, W4
00854A  A19004     BCLR W4, #9
00854C  889694     MOV W4, 0x12D2
7118:                      }
7119:                  }
7120:              
7121:                  if (CntAcqSensor>20)
00854E  210FC4     MOV #0x10FC, W4
008550  784214     MOV.B [W4], W4
008552  524FF4     SUB.B W4, #0x14, [W15]
008554  360044     BRA LEU, 0x85DE
7122:                  {
7123:                      CntBEMFMax=CntBEMF;
008556  210FD4     MOV #0x10FD, W4
008558  784214     MOV.B [W4], W4
00855A  210FE5     MOV #0x10FE, W5
00855C  784A84     MOV.B W4, [W5]
7124:                      if ((CntBEMF>=19))
00855E  210FD4     MOV #0x10FD, W4
008560  784214     MOV.B [W4], W4
008562  524FF2     SUB.B W4, #0x12, [W15]
008564  360029     BRA LEU, 0x85B8
7125:                      {
7126:                          if (SensorlessStartNoHalls&&(SensorLessTimerConst<40))
008566  8096B5     MOV 0x12D6, W5
008568  240004     MOV #0x4000, W4
00856A  628204     AND W5, W4, W4
00856C  520FE0     SUB W4, #0x0, [W15]
00856E  320011     BRA Z, 0x8592
008570  8218A5     MOV SensorLessTimerConst, W5
008572  200274     MOV #0x27, W4
008574  528F84     SUB W5, W4, [W15]
008576  3E000D     BRA GTU, 0x8592
7127:                          {
7128:                          if (SensorlessNotBEMF)
008578  809654     MOV 0x12CA, W4
00857A  620270     AND W4, #0x10, W4
00857C  520FE0     SUB W4, #0x0, [W15]
00857E  320003     BRA Z, 0x8586
7129:                          SoundNum=12;
008580  2124B5     MOV #0x124B, W5
008582  B3C0C4     MOV.B #0xC, W4
008584  784A84     MOV.B W4, [W5]
7130:                          SensorlessNotBEMF=0;
008586  809654     MOV 0x12CA, W4
008588  A14004     BCLR W4, #4
00858A  889654     MOV W4, 0x12CA
7131:                          SensorlessStartNoHalls=0;
00858C  8096B4     MOV 0x12D6, W4
00858E  A1E004     BCLR W4, #14
008590  8896B4     MOV W4, 0x12D6
7132:                          }
7133:                          if (!SensorlessStartNoHalls)
008592  8096B5     MOV 0x12D6, W5
008594  240004     MOV #0x4000, W4
008596  628204     AND W5, W4, W4
008598  520FE0     SUB W4, #0x0, [W15]
00859A  3A001A     BRA NZ, 0x85D0
7134:                          {
7135:                          if (SensorlessNotBEMF)
00859C  809654     MOV 0x12CA, W4
00859E  620270     AND W4, #0x10, W4
0085A0  520FE0     SUB W4, #0x0, [W15]
0085A2  320003     BRA Z, 0x85AA
7136:                          SoundNum=12;
0085A4  2124B5     MOV #0x124B, W5
0085A6  B3C0C4     MOV.B #0xC, W4
0085A8  784A84     MOV.B W4, [W5]
7137:                          SensorlessNotBEMF=0;
0085AA  809654     MOV 0x12CA, W4
0085AC  A14004     BCLR W4, #4
0085AE  889654     MOV W4, 0x12CA
7138:                          SensorlessStartNoHalls=0;
0085B0  8096B4     MOV 0x12D6, W4
0085B2  A1E004     BCLR W4, #14
0085B4  8896B4     MOV W4, 0x12D6
0085B6  37000C     BRA 0x85D0
7139:                          }
7140:              
7141:                      }
7142:                      else
7143:                      {
7144:                          if (!ManualStart)
0085B8  809745     MOV StatFlgs, W5
0085BA  202004     MOV #0x200, W4
0085BC  628204     AND W5, W4, W4
0085BE  520FE0     SUB W4, #0x0, [W15]
0085C0  3A0007     BRA NZ, 0x85D0
7145:                          {
7146:                              if (CntBEMF<10)
0085C2  210FD4     MOV #0x10FD, W4
0085C4  784214     MOV.B [W4], W4
0085C6  524FE9     SUB.B W4, #0x9, [W15]
0085C8  3E0003     BRA GTU, 0x85D0
7147:                              SensorlessNotBEMF=1;
0085CA  809654     MOV 0x12CA, W4
0085CC  A04004     BSET W4, #4
0085CE  889654     MOV W4, 0x12CA
7148:                          }
7149:                      }
7150:                      
7151:                      CntAcqSensor=CntBEMF=0;
0085D0  210FD5     MOV #0x10FD, W5
0085D2  EB4200     CLR.B W4
0085D4  784A84     MOV.B W4, [W5]
0085D6  210FD4     MOV #0x10FD, W4
0085D8  784214     MOV.B [W4], W4
0085DA  210FC5     MOV #0x10FC, W5
0085DC  784A84     MOV.B W4, [W5]
7152:                  }
7153:                  
7154:                  
7155:                  Nop();
0085DE  000000     NOP
7156:                  Nop();
0085E0  000000     NOP
7157:                  Nop();
0085E2  000000     NOP
7158:              
7159:              //Light=0;
7160:              
7161:               
7162:              
7163:                
7164:              }
0085E4  FA8000     ULNK
0085E6  F90032     POP DSRPAG
0085E8  BE034F     MOV.D [--W15], W6
0085EA  BE024F     MOV.D [--W15], W4
0085EC  BE014F     MOV.D [--W15], W2
0085EE  BE004F     MOV.D [--W15], W0
0085F0  F90036     POP RCOUNT
0085F2  064000     RETFIE
7165:              
7166:              
7167:              void SensorlessInit(void)
7168:              {
0085F4  FA0000     LNK #0x0
7169:              #if defined ISOLATED
7170:                  return;
7171:              #endif
7172:                  
7173:                  if (SensorlessInitialized)
0085F6  809695     MOV 0x12D2, W5
0085F8  200204     MOV #0x20, W4
0085FA  628204     AND W5, W4, W4
0085FC  520FE0     SUB W4, #0x0, [W15]
0085FE  3A003A     BRA NZ, 0x8674
7174:                      return;
008674  000000     NOP
7175:                  SpeedControl=0;
008600  809754     MOV StatFlgs1, W4
008602  A11004     BCLR W4, #1
008604  889754     MOV W4, StatFlgs1
7176:                  SensorlessInitialized=1;
008606  809694     MOV 0x12D2, W4
008608  A05004     BSET W4, #5
00860A  889694     MOV W4, 0x12D2
7177:                  MAX_PWM=MAX_PWM_SENSORLESS_CONST;
00860C  20B544     MOV #0xB54, W4
00860E  8A12F4     MOV W4, MAX_PWM
7178:                  Sensorless=1;
008610  809754     MOV StatFlgs1, W4
008612  A05004     BSET W4, #5
008614  889754     MOV W4, StatFlgs1
7179:                  Vector=0;
008616  809684     MOV Flgs5, W4
008618  A14004     BCLR W4, #4
00861A  889684     MOV W4, Flgs5
7180:                  IPC22bits.U4RXIP = 5;//6;
00861C  804364     MOV IPC22, W4
00861E  A00004     BSET W4, #0
008620  A11004     BCLR W4, #1
008622  A02004     BSET W4, #2
008624  884364     MOV W4, IPC22
7181:                  IPC20bits.U3RXIP = 5;//6;
008626  804344     MOV IPC20, W4
008628  A08004     BSET W4, #8
00862A  A19004     BCLR W4, #9
00862C  A0A004     BSET W4, #10
00862E  884344     MOV W4, IPC20
7182:                  IPC2bits.T3IP = 5;//6;
008630  804224     MOV IPC2, W4
008632  A00004     BSET W4, #0
008634  A11004     BCLR W4, #1
008636  A02004     BSET W4, #2
008638  884224     MOV W4, IPC2
7183:                  ADC2Init();
00863A  07FC8A     RCALL ADC2Init
7184:                  InitPWM();
00863C  07797A     RCALL InitPWM
7185:                  T4_5Init();
00863E  075E9E     RCALL T4_5Init
7186:                  T6_7Init();
008640  075ECA     RCALL T6_7Init
7187:                  CntAcqSensor=0;
008642  210FC5     MOV #0x10FC, W5
008644  EB4200     CLR.B W4
008646  784A84     MOV.B W4, [W5]
7188:                  CntBEMF=0;
008648  210FD5     MOV #0x10FD, W5
00864A  EB4200     CLR.B W4
00864C  784A84     MOV.B W4, [W5]
7189:                  if (!ManualStart)
00864E  809745     MOV StatFlgs, W5
008650  202004     MOV #0x200, W4
008652  628204     AND W5, W4, W4
008654  520FE0     SUB W4, #0x0, [W15]
008656  3A0003     BRA NZ, 0x865E
7190:                  SensorlessNotBEMF=1;
008658  809654     MOV 0x12CA, W4
00865A  A04004     BSET W4, #4
00865C  889654     MOV W4, 0x12CA
7191:                  SpeedControl=0;
00865E  809754     MOV StatFlgs1, W4
008660  A11004     BCLR W4, #1
008662  889754     MOV W4, StatFlgs1
7192:                  if (ManualStart)
008664  809745     MOV StatFlgs, W5
008666  202004     MOV #0x200, W4
008668  628204     AND W5, W4, W4
00866A  520FE0     SUB W4, #0x0, [W15]
00866C  320004     BRA Z, 0x8676
7193:                  SensorlessManualStartInit();
00866E  02BA00     CALL SensorlessManualStartInit
008670  000001     NOP
008672  370001     BRA 0x8676
7194:              }
008676  FA8000     ULNK
008678  060000     RETURN
7195:              
7196:              
7197:              void T9Init(void)
7198:              {
00867A  FA0000     LNK #0x0
7199:                  	TMR9 = 0;
00867C  EB0200     CLR W4
00867E  8809A4     MOV W4, TMR9
7200:              	T9CON = 0x8000;//0x8030;
008680  280004     MOV #0x8000, W4
008682  8809E4     MOV W4, T9CON
7201:               	PR9 = 10000;//0xffff;//500 Hz Int
008684  227104     MOV #0x2710, W4
008686  8809C4     MOV W4, PR9
7202:              	IPC13bits.T9IP = 7;
008688  8042D4     MOV IPC13, W4
00868A  A00004     BSET W4, #0
00868C  A01004     BSET W4, #1
00868E  A02004     BSET W4, #2
008690  8842D4     MOV W4, IPC13
7203:               	IEC3bits.T9IE = 0;
008692  A98826     BCLR IEC3, #4
7204:              
7205:              }
008694  FA8000     ULNK
008696  060000     RETURN
7206:              
7207:              
7208:              void __attribute__((interrupt, auto_psv))  _T9Interrupt( void )
7209:              {
008698  F80032     PUSH DSRPAG
00869A  781F88     MOV W8, [W15++]
00869C  202008     MOV #0x200, W8
00869E  880198     MOV W8, DSRPAG
0086A0  000000     NOP
0086A2  78044F     MOV [--W15], W8
0086A4  FA0000     LNK #0x0
7210:               	IFS3bits.T9IF = 0;
0086A6  A98806     BCLR IFS3, #4
7211:                      IEC3bits.T9IE = 0;
0086A8  A98826     BCLR IEC3, #4
7212:                      Nop();
0086AA  000000     NOP
7213:                      Nop();
0086AC  000000     NOP
7214:                      Nop();
0086AE  000000     NOP
7215:                      Nop();
0086B0  000000     NOP
7216:              
7217:              
7218:              
7219:              
7220:              }
0086B2  FA8000     ULNK
0086B4  F90032     POP DSRPAG
0086B6  064000     RETFIE
7221:              
7222:              
7223:              
7224:              void T3Init(void)
7225:              {
0086B8  FA0000     LNK #0x0
7226:                  	TMR3 = 0;
0086BA  EB0200     CLR W4
0086BC  880854     MOV W4, TMR3
7227:              	T3CON = 0x8010;
0086BE  280104     MOV #0x8010, W4
0086C0  880894     MOV W4, T3CON
7228:               	PR3 = 3750;//938;//2000 Hz Int          //15000;//500 Hz Int
0086C2  20EA64     MOV #0xEA6, W4
0086C4  880874     MOV W4, PR3
7229:              	IPC2bits.T3IP = 7;
0086C6  804224     MOV IPC2, W4
0086C8  A00004     BSET W4, #0
0086CA  A01004     BSET W4, #1
0086CC  A02004     BSET W4, #2
0086CE  884224     MOV W4, IPC2
7230:               	IEC0bits.T3IE = 1;
0086D0  A80821     BSET 0x821, #0
7231:              
7232:              }
0086D2  FA8000     ULNK
0086D4  060000     RETURN
7233:              
7234:              
7235:              
7236:              void __attribute__((interrupt, auto_psv))  _T3Interrupt( void )
7237:              {
0086D6  F80036     PUSH RCOUNT
0086D8  BE9F80     MOV.D W0, [W15++]
0086DA  BE9F82     MOV.D W2, [W15++]
0086DC  BE9F84     MOV.D W4, [W15++]
0086DE  BE9F86     MOV.D W6, [W15++]
0086E0  781F88     MOV W8, [W15++]
0086E2  F80032     PUSH DSRPAG
0086E4  202000     MOV #0x200, W0
0086E6  880190     MOV W0, DSRPAG
0086E8  000000     NOP
0086EA  FA0000     LNK #0x0
7238:              unsigned char Secret1,Secret2,Chk,Check;
7239:              
7240:              
7241:               	IFS0bits.T3IF = 0;
0086EC  A90801     BCLR 0x801, #0
7242:              	//GreenLed = !GreenLed;
7243:              #if defined BMS
7244:                      //GetBMS();
7245:              #endif
7246:              
7247:                  /*T3Cnt1--;
7248:                  if (T3Cnt1)
7249:                      return;
7250:                  T3Cnt1=4;
7251:                  */
7252:                  if (MPU6050_TimeOut)
0086EE  80B634     MOV MPU6050_TimeOut, W4
0086F0  520FE0     SUB W4, #0x0, [W15]
0086F2  320003     BRA Z, 0x86FA
7253:                  MPU6050_TimeOut--;
0086F4  80B634     MOV MPU6050_TimeOut, W4
0086F6  E90204     DEC W4, W4
0086F8  88B634     MOV W4, MPU6050_TimeOut
7254:                  
7255:                  if (PWM1_B_L)
0086FA  807224     MOV LATE, W4
0086FC  620264     AND W4, #0x4, W4
0086FE  520FE0     SUB W4, #0x0, [W15]
008700  320002     BRA Z, 0x8706
7256:                  {
7257:                      Nop();
008702  000000     NOP
7258:                      Nop();
008704  000000     NOP
7259:                  }
7260:                  
7261:                  if (PEN1_B_L)
008706  806215     MOV IOCON2, W5
008708  240004     MOV #0x4000, W4
00870A  628204     AND W5, W4, W4
00870C  520FE0     SUB W4, #0x0, [W15]
00870E  320002     BRA Z, 0x8714
7262:                  {
7263:                      Nop();
008710  000000     NOP
7264:                      Nop();
008712  000000     NOP
7265:                  }
7266:                  
7267:                  
7268:              #if defined VECTOR    
7269:                  if (DS)
008714  8096B5     MOV 0x12D6, W5
008716  208004     MOV #0x800, W4
008718  628204     AND W5, W4, W4
00871A  520FE0     SUB W4, #0x0, [W15]
00871C  32000C     BRA Z, 0x8736
7270:                  {
7271:                      
7272:                  PWM1_A_H=0;
00871E  A92E44     BCLR LATE, #1
7273:                  PWM1_A_L=0;
008720  A90E44     BCLR LATE, #0
7274:                  PWM1_B_H=0;
008722  A96E44     BCLR LATE, #3
7275:                  PWM1_B_L=0;
008724  A94E44     BCLR LATE, #2
7276:                  PWM1_C_H=0;
008726  A9AE44     BCLR LATE, #5
7277:                  PWM1_C_L=0;
008728  A98E44     BCLR LATE, #4
7278:              
7279:                  
7280:                  PEN1_A_H=0;
00872A  A9EC23     BCLR 0xC23, #7
7281:                  PEN1_A_L=0;
00872C  A9CC23     BCLR 0xC23, #6
7282:                  PEN1_B_H=0;
00872E  A9EC43     BCLR 0xC43, #7
7283:                  PEN1_B_L=0;
008730  A9CC43     BCLR 0xC43, #6
7284:                  PEN1_C_H=0;
008732  A9EC63     BCLR 0xC63, #7
7285:                  PEN1_C_L=0;
008734  A9CC63     BCLR 0xC63, #6
7286:              
7287:                  }
7288:                  
7289:              #endif
7290:                  
7291:                  
7292:                     if (Hv2WDMasterCnt)
008736  821394     MOV Hv2WDMasterCnt, W4
008738  520FE0     SUB W4, #0x0, [W15]
00873A  320009     BRA Z, 0x874E
7293:                     {
7294:                         Hv2WDMasterCnt--;
00873C  821394     MOV Hv2WDMasterCnt, W4
00873E  E90204     DEC W4, W4
008740  8A1394     MOV W4, Hv2WDMasterCnt
7295:                             if (!Hv2WDMasterCnt)
008742  821394     MOV Hv2WDMasterCnt, W4
008744  520FE0     SUB W4, #0x0, [W15]
008746  3A0003     BRA NZ, 0x874E
7296:                                 Hv2WDMaster=0;
008748  809664     MOV Flgs4, W4
00874A  A10004     BCLR W4, #0
00874C  889664     MOV W4, Flgs4
7297:                     }
7298:                         
7299:                  
7300:              
7301:                  
7302:                  
7303:                  
7304:                 
7305:                              if (Sensorless)
00874E  809755     MOV StatFlgs1, W5
008750  200204     MOV #0x20, W4
008752  628204     AND W5, W4, W4
008754  520FE0     SUB W4, #0x0, [W15]
008756  320099     BRA Z, 0x888A
7306:                      {
7307:                                  if ((SensorlessNotBEMF)&&(SensorlessStartNoHalls))
008758  809654     MOV 0x12CA, W4
00875A  620270     AND W4, #0x10, W4
00875C  520FE0     SUB W4, #0x0, [W15]
00875E  320095     BRA Z, 0x888A
008760  8096B5     MOV 0x12D6, W5
008762  240004     MOV #0x4000, W4
008764  628204     AND W5, W4, W4
008766  520FE0     SUB W4, #0x0, [W15]
008768  320090     BRA Z, 0x888A
7308:                                  {
7309:                      if (SensorLessTimer)
00876A  820124     MOV SensorLessTimer, W4
00876C  520FE0     SUB W4, #0x0, [W15]
00876E  320003     BRA Z, 0x8776
7310:                          SensorLessTimer--;
008770  820124     MOV SensorLessTimer, W4
008772  E90204     DEC W4, W4
008774  8A0124     MOV W4, SensorLessTimer
7311:              
7312:                          Vector=0;
008776  809684     MOV Flgs5, W4
008778  A14004     BCLR W4, #4
00877A  889684     MOV W4, Flgs5
7313:              
7314:              //2 6 4 5 1 3
7315:                  
7316:              
7317:                          if (!SensorLessTimer)
00877C  820124     MOV SensorLessTimer, W4
00877E  520FE0     SUB W4, #0x0, [W15]
008780  3A0084     BRA NZ, 0x888A
7318:                          {
7319:                              SensorLessTimer=SensorLessTimerConst;
008782  8218A4     MOV SensorLessTimerConst, W4
008784  8A0124     MOV W4, SensorLessTimer
7320:                              SensorLessStartStage++;
008786  240214     MOV #0x4021, W4
008788  784214     MOV.B [W4], W4
00878A  E84204     INC.B W4, W4
00878C  240215     MOV #0x4021, W5
00878E  784A84     MOV.B W4, [W5]
7321:                              if ((Alignment)&&(!ManualStart))
008790  8096A5     MOV Flgs6, W5
008792  204004     MOV #0x400, W4
008794  628204     AND W5, W4, W4
008796  520FE0     SUB W4, #0x0, [W15]
008798  320008     BRA Z, 0x87AA
00879A  809745     MOV StatFlgs, W5
00879C  202004     MOV #0x200, W4
00879E  628204     AND W5, W4, W4
0087A0  520FE0     SUB W4, #0x0, [W15]
0087A2  3A0003     BRA NZ, 0x87AA
7322:                                  SensorLessStartStage=0;
0087A4  240215     MOV #0x4021, W5
0087A6  EB4200     CLR.B W4
0087A8  784A84     MOV.B W4, [W5]
7323:                              
7324:                                      if (SensorLessStartStage>5)
0087AA  240214     MOV #0x4021, W4
0087AC  784214     MOV.B [W4], W4
0087AE  524FE5     SUB.B W4, #0x5, [W15]
0087B0  360003     BRA LEU, 0x87B8
7325:                                              SensorLessStartStage=0;
0087B2  240215     MOV #0x4021, W5
0087B4  EB4200     CLR.B W4
0087B6  784A84     MOV.B W4, [W5]
7326:                              if (!DirPWM1)
0087B8  809754     MOV StatFlgs1, W4
0087BA  620261     AND W4, #0x1, W4
0087BC  520FE0     SUB W4, #0x0, [W15]
0087BE  3A0029     BRA NZ, 0x8812
7327:                              {
7328:                          switch (SensorLessStartStage)
0087C0  240214     MOV #0x4021, W4
0087C2  784214     MOV.B [W4], W4
0087C4  FB8204     ZE W4, W4
0087C6  DEA2CF     ASR W4, #15, W5
0087C8  200056     MOV #0x5, W6
0087CA  200007     MOV #0x0, W7
0087CC  520F86     SUB W4, W6, [W15]
0087CE  5A8F87     SUBB W5, W7, [W15]
0087D0  3E0048     BRA GTU, 0x8862
0087D2  010604     BRA W4
0087D4  370005     BRA 0x87E0
0087D6  370008     BRA 0x87E8
0087D8  37000B     BRA 0x87F0
0087DA  37000E     BRA 0x87F8
0087DC  370011     BRA 0x8800
0087DE  370015     BRA 0x880A
7329:                          {
7330:                              case 0:
7331:                                  Sensor1=3;
0087E0  212465     MOV #0x1246, W5
0087E2  B3C034     MOV.B #0x3, W4
0087E4  784A84     MOV.B W4, [W5]
7332:                                  break;
0087E6  37003E     BRA 0x8864
7333:                              case 1:
7334:                                  Sensor1=1;
0087E8  212465     MOV #0x1246, W5
0087EA  B3C014     MOV.B #0x1, W4
0087EC  784A84     MOV.B W4, [W5]
7335:                                  break;
0087EE  37003A     BRA 0x8864
7336:                              case 2:
7337:                                  Sensor1=5;
0087F0  212465     MOV #0x1246, W5
0087F2  B3C054     MOV.B #0x5, W4
0087F4  784A84     MOV.B W4, [W5]
7338:                                  break;
0087F6  370036     BRA 0x8864
7339:                              case 3:
7340:                                  Sensor1=4;
0087F8  212465     MOV #0x1246, W5
0087FA  B3C044     MOV.B #0x4, W4
0087FC  784A84     MOV.B W4, [W5]
7341:                                  break;
0087FE  370032     BRA 0x8864
7342:                              case 4:
7343:                                  Sensor1=6;
008800  212465     MOV #0x1246, W5
008802  B3C064     MOV.B #0x6, W4
008804  784A84     MOV.B W4, [W5]
7344:                                  break;
008806  000000     NOP
008808  37002D     BRA 0x8864
7345:                              case 5:
7346:                                  Sensor1=2;
00880A  212465     MOV #0x1246, W5
00880C  B3C024     MOV.B #0x2, W4
00880E  784A84     MOV.B W4, [W5]
7347:                                  break;
008810  370029     BRA 0x8864
008862  000000     NOP
7348:                          }
7349:                              }
7350:                              else
7351:                              {
7352:                          switch (SensorLessStartStage)
008812  240214     MOV #0x4021, W4
008814  784214     MOV.B [W4], W4
008816  FB8204     ZE W4, W4
008818  DEA2CF     ASR W4, #15, W5
00881A  200056     MOV #0x5, W6
00881C  200007     MOV #0x0, W7
00881E  520F86     SUB W4, W6, [W15]
008820  5A8F87     SUBB W5, W7, [W15]
008822  3E0020     BRA GTU, 0x8864
008824  010604     BRA W4
008826  370005     BRA 0x8832
008828  370008     BRA 0x883A
00882A  37000B     BRA 0x8842
00882C  37000E     BRA 0x884A
00882E  370011     BRA 0x8852
008830  370014     BRA 0x885A
7353:                          {
7354:                              case 0:
7355:                                  Sensor1=2;
008832  212465     MOV #0x1246, W5
008834  B3C024     MOV.B #0x2, W4
008836  784A84     MOV.B W4, [W5]
7356:                                  break;
008838  370015     BRA 0x8864
7357:                              case 1:
7358:                                  Sensor1=6;
00883A  212465     MOV #0x1246, W5
00883C  B3C064     MOV.B #0x6, W4
00883E  784A84     MOV.B W4, [W5]
7359:                                  break;
008840  370011     BRA 0x8864
7360:                              case 2:
7361:                                  Sensor1=4;
008842  212465     MOV #0x1246, W5
008844  B3C044     MOV.B #0x4, W4
008846  784A84     MOV.B W4, [W5]
7362:                                  break;
008848  37000D     BRA 0x8864
7363:                              case 3:
7364:                                  Sensor1=5;
00884A  212465     MOV #0x1246, W5
00884C  B3C054     MOV.B #0x5, W4
00884E  784A84     MOV.B W4, [W5]
7365:                                  break;
008850  370009     BRA 0x8864
7366:                              case 4:
7367:                                  Sensor1=1;
008852  212465     MOV #0x1246, W5
008854  B3C014     MOV.B #0x1, W4
008856  784A84     MOV.B W4, [W5]
7368:                                  break;
008858  370005     BRA 0x8864
7369:                              case 5:
7370:                                  Sensor1=3;
00885A  212465     MOV #0x1246, W5
00885C  B3C034     MOV.B #0x3, W4
00885E  784A84     MOV.B W4, [W5]
7371:                                  break;
008860  370001     BRA 0x8864
7372:                          }
7373:                                  
7374:                              }
7375:                              //Sensor1=ChangeSensorOrder(Sensor1,SensOrder1);
7376:                              Sensor1_Prev=Sensor1;
008864  212464     MOV #0x1246, W4
008866  784214     MOV.B [W4], W4
008868  212475     MOV #0x1247, W5
00886A  784A84     MOV.B W4, [W5]
7377:                              Phases1();
00886C  070234     RCALL Phases1
7378:                              CanZeroCrossing=1;
00886E  809644     MOV Flgs3, W4
008870  A0F004     BSET W4, #15
008872  889644     MOV W4, Flgs3
7379:                              if ((!SensorLessOnCnt)&&(ManualStart))
008874  80A2E4     MOV SensorLessOnCnt, W4
008876  520FE0     SUB W4, #0x0, [W15]
008878  3A0008     BRA NZ, 0x888A
00887A  809745     MOV StatFlgs, W5
00887C  202004     MOV #0x200, W4
00887E  628204     AND W5, W4, W4
008880  520FE0     SUB W4, #0x0, [W15]
008882  320003     BRA Z, 0x888A
7380:                               SensorlessNotBEMF=0;
008884  809654     MOV 0x12CA, W4
008886  A14004     BCLR W4, #4
008888  889654     MOV W4, 0x12CA
7381:              
7382:                          }
7383:              
7384:                              }
7385:              
7386:                      }
7387:              
7388:              
7389:              
7390:              
7391:                      T3Cnt--;
00888A  2425C4     MOV #0x425C, W4
00888C  784214     MOV.B [W4], W4
00888E  E94204     DEC.B W4, W4
008890  2425C5     MOV #0x425C, W5
008892  784A84     MOV.B W4, [W5]
7392:                      if (T3Cnt)
008894  2425C4     MOV #0x425C, W4
008896  784214     MOV.B [W4], W4
008898  524FE0     SUB.B W4, #0x0, [W15]
00889A  3A01E9     BRA NZ, 0x8C6E
7393:                          return;
008C6E  000000     NOP
7394:                      T3Cnt=4;
00889C  2425C5     MOV #0x425C, W5
00889E  B3C044     MOV.B #0x4, W4
0088A0  784A84     MOV.B W4, [W5]
7395:              
7396:              #if defined MPU6050
7397:                      if (MI2C1Interrupt_TimeOut)
7398:                      {
7399:                          MI2C1Interrupt_TimeOut--;
7400:                          if (!MI2C1Interrupt_TimeOut)
7401:                          {
7402:                             CloseI2C1();
7403:                             IEC1bits.MI2C1IE=0;
7404:                             MPU6050Err=10;
7405:                          }
7406:                      }
7407:              #endif        
7408:                      
7409:                      
7410:                      
7411:              
7412:                      
7413:                       if (PWMCON1bits.FLTSTAT||PWMCON2bits.FLTSTAT||PWMCON3bits.FLTSTAT)
0088A2  806105     MOV PWMCON1, W5
0088A4  280004     MOV #0x8000, W4
0088A6  628204     AND W5, W4, W4
0088A8  520FE0     SUB W4, #0x0, [W15]
0088AA  3A000A     BRA NZ, 0x88C0
0088AC  806205     MOV PWMCON2, W5
0088AE  280004     MOV #0x8000, W4
0088B0  628204     AND W5, W4, W4
0088B2  520FE0     SUB W4, #0x0, [W15]
0088B4  3A0005     BRA NZ, 0x88C0
0088B6  806305     MOV PWMCON3, W5
0088B8  280004     MOV #0x8000, W4
0088BA  628204     AND W5, W4, W4
0088BC  520FE0     SUB W4, #0x0, [W15]
0088BE  320022     BRA Z, 0x8904
7414:                          {
7415:                           //Amplitude2=0;
7416:                          if (FLTSTATCnt)
0088C0  81C3A4     MOV FLTSTATCnt, W4
0088C2  520FE0     SUB W4, #0x0, [W15]
0088C4  32001C     BRA Z, 0x88FE
0088FC  370007     BRA 0x890C
008902  370004     BRA 0x890C
00890A  000000     NOP
7417:                              {
7418:                              FLTSTATCnt--;
0088C6  81C3A4     MOV FLTSTATCnt, W4
0088C8  E90204     DEC W4, W4
0088CA  89C3A4     MOV W4, FLTSTATCnt
7419:                              if (!FLTSTATCnt)
0088CC  81C3A4     MOV FLTSTATCnt, W4
0088CE  520FE0     SUB W4, #0x0, [W15]
0088D0  3A001C     BRA NZ, 0x890A
7420:                                  {
7421:                                  PWMCON1bits.FLTIEN=0;
0088D2  A98C21     BCLR 0xC21, #4
7422:                                  PWMCON1bits.FLTIEN=1;
0088D4  A88C21     BSET 0xC21, #4
7423:                                  FCLCON1bits.FLTMOD=0;
0088D6  806124     MOV FCLCON1, W4
0088D8  A10004     BCLR W4, #0
0088DA  A11004     BCLR W4, #1
0088DC  886124     MOV W4, FCLCON1
7424:              
7425:                                  PWMCON2bits.FLTIEN=0;
0088DE  A98C41     BCLR 0xC41, #4
7426:                                  PWMCON2bits.FLTIEN=1;
0088E0  A88C41     BSET 0xC41, #4
7427:                                  FCLCON2bits.FLTMOD=0;
0088E2  806224     MOV FCLCON2, W4
0088E4  A10004     BCLR W4, #0
0088E6  A11004     BCLR W4, #1
0088E8  886224     MOV W4, FCLCON2
7428:              
7429:                                  PWMCON3bits.FLTIEN=0;
0088EA  A98C61     BCLR 0xC61, #4
7430:                                  PWMCON3bits.FLTIEN=1;
0088EC  A88C61     BSET 0xC61, #4
7431:                                  FCLCON3bits.FLTMOD=0;
0088EE  806324     MOV FCLCON3, W4
0088F0  A10004     BCLR W4, #0
0088F2  A11004     BCLR W4, #1
0088F4  886324     MOV W4, FCLCON3
7432:              
7433:                                      InitPWM_Vector();
0088F6  075E7C     RCALL InitPWM_Vector
7434:              
7435:                                  
7436:                                  
7437:                                  FLTSTATCnt=FLTSTATCntConst;
0088F8  821814     MOV FLTSTATCntConst, W4
0088FA  89C3A4     MOV W4, FLTSTATCnt
7438:                                  
7439:                                  }
7440:                              }
7441:                                      else
7442:                                  FLTSTATCnt=FLTSTATCntConst;
0088FE  821814     MOV FLTSTATCntConst, W4
008900  89C3A4     MOV W4, FLTSTATCnt
7443:              
7444:                          }
7445:                      else
7446:                          FLTSTATCnt=FLTSTATCntConst;
008904  821814     MOV FLTSTATCntConst, W4
008906  89C3A4     MOV W4, FLTSTATCnt
008908  370001     BRA 0x890C
7447:                      
7448:                      
7449:                      
7450:                      
7451:                      
7452:                      
7453:                      
7454:                      
7455:                      
7456:                      
7457:                      
7458:                      
7459:                      
7460:                      
7461:                      
7462:                      
7463:                      
7464:                      
7465:                      
7466:                      
7467:                      
7468:                  if (TimerCntWhenLock)
00890C  81BD64     MOV TimerCntWhenLock, W4
00890E  520FE0     SUB W4, #0x0, [W15]
008910  320003     BRA Z, 0x8918
7469:                  {
7470:                      TimerCntWhenLock--;
008912  81BD64     MOV TimerCntWhenLock, W4
008914  E90204     DEC W4, W4
008916  89BD64     MOV W4, TimerCntWhenLock
7471:                  }
7472:              
7473:                  if (LockTMR)
008918  820154     MOV LockTMR, W4
00891A  820165     MOV 0x402C, W5
00891C  520FE0     SUB W4, #0x0, [W15]
00891E  5A8FE0     SUBB W5, #0x0, [W15]
008920  320011     BRA Z, 0x8944
7474:                  {
7475:                      LockTMR--;
008922  820154     MOV LockTMR, W4
008924  820165     MOV 0x402C, W5
008926  520261     SUB W4, #0x1, W4
008928  5A82E0     SUBB W5, #0x0, W5
00892A  8A0154     MOV W4, LockTMR
00892C  8A0165     MOV W5, 0x402C
7476:                      if (!LockTMR)
00892E  820154     MOV LockTMR, W4
008930  820165     MOV 0x402C, W5
008932  520FE0     SUB W4, #0x0, [W15]
008934  5A8FE0     SUBB W5, #0x0, [W15]
008936  3A0006     BRA NZ, 0x8944
7477:                      {
7478:                          SoundNum=20;
008938  2124B5     MOV #0x124B, W5
00893A  B3C144     MOV.B #0x14, W4
00893C  784A84     MOV.B W4, [W5]
7479:                          Locked=1;
00893E  809694     MOV 0x12D2, W4
008940  A06004     BSET W4, #6
008942  889694     MOV W4, 0x12D2
7480:                      }
7481:                  }
7482:              
7483:              
7484:              
7485:                  if (Sounds)
008944  2124A4     MOV #0x124A, W4
008946  784214     MOV.B [W4], W4
008948  524FE0     SUB.B W4, #0x0, [W15]
00894A  320024     BRA Z, 0x8994
7486:                  {
7487:                      if (Buzzer)
00894C  8072A4     MOV LATF, W4
00894E  620270     AND W4, #0x10, W4
008950  520FE0     SUB W4, #0x0, [W15]
008952  320015     BRA Z, 0x897E
7488:                      {
7489:                          BuzzerOnTime--;
008954  8093C4     MOV BuzzerOnTime, W4
008956  E90204     DEC W4, W4
008958  8893C4     MOV W4, BuzzerOnTime
7490:                          if (!BuzzerOnTime)
00895A  8093C4     MOV BuzzerOnTime, W4
00895C  520FE0     SUB W4, #0x0, [W15]
00895E  3A003A     BRA NZ, 0x89D4
7491:                          {
7492:                          BuzzerOnTime=BuzzerOnTimeConst;
008960  8093A4     MOV BuzzerOnTimeConst, W4
008962  8893C4     MOV W4, BuzzerOnTime
7493:                          BuzzerMacroOff//Buzzer=0;
008964  A98E54     BCLR LATF, #4
008966  809775     MOV StatFlgs3, W5
008968  202004     MOV #0x200, W4
00896A  628204     AND W5, W4, W4
00896C  520FE0     SUB W4, #0x0, [W15]
00896E  3A0001     BRA NZ, 0x8972
008970  A84E35     BSET 0xE35, #2
7494:                          Sounds--;
008972  2124A4     MOV #0x124A, W4
008974  784214     MOV.B [W4], W4
008976  E94204     DEC.B W4, W4
008978  2124A5     MOV #0x124A, W5
00897A  784A84     MOV.B W4, [W5]
00897C  37002B     BRA 0x89D4
7495:                          /*if (AlarmOn)
7496:                          {
7497:                              AccToMemALM();
7498:                              if (HorningL)
7499:                                  HorningL=0;
7500:                              if (HorningH)
7501:                                  HorningH=0;
7502:                          }*/
7503:                          }
7504:                      }
7505:                      else
7506:                      {
7507:                          BuzzerOffTime--;
00897E  8093D4     MOV BuzzerOffTime, W4
008980  E90204     DEC W4, W4
008982  8893D4     MOV W4, BuzzerOffTime
7508:                          if (!BuzzerOffTime)
008984  8093D4     MOV BuzzerOffTime, W4
008986  520FE0     SUB W4, #0x0, [W15]
008988  3A0025     BRA NZ, 0x89D4
7509:                          {
7510:                              BuzzerOffTime=BuzzerOffTimeConst;
00898A  8093B4     MOV BuzzerOffTimeConst, W4
00898C  8893D4     MOV W4, BuzzerOffTime
7511:                  //    {
7512:               //       BuzzerOnEvent=4;
7513:                      BuzzerMacroOn//Buzzer=1;
00898E  02BC12     CALL BzFuncOn
008990  000001     NOP
008992  370020     BRA 0x89D4
7514:                 //     }
7515:                          }
7516:                      }
7517:                  }
7518:                  else
7519:                  {
7520:                          if (AlarmOn)
008994  809635     MOV 0x12C6, W5
008996  240004     MOV #0x4000, W4
008998  628204     AND W5, W4, W4
00899A  520FE0     SUB W4, #0x0, [W15]
00899C  32001B     BRA Z, 0x89D4
7521:                          {
7522:                              if (HorningL||HorningH)
00899E  809625     MOV Flgs2, W5
0089A0  210004     MOV #0x1000, W4
0089A2  628204     AND W5, W4, W4
0089A4  520FE0     SUB W4, #0x0, [W15]
0089A6  3A0005     BRA NZ, 0x89B2
0089A8  809635     MOV 0x12C6, W5
0089AA  280004     MOV #0x8000, W4
0089AC  628204     AND W5, W4, W4
0089AE  520FE0     SUB W4, #0x0, [W15]
0089B0  320001     BRA Z, 0x89B4
7523:                              AccToMemALM();
0089B2  07587E     RCALL AccToMemALM
7524:                              if (HorningL)
0089B4  809625     MOV Flgs2, W5
0089B6  210004     MOV #0x1000, W4
0089B8  628204     AND W5, W4, W4
0089BA  520FE0     SUB W4, #0x0, [W15]
0089BC  320003     BRA Z, 0x89C4
7525:                                  HorningL=0;
0089BE  809624     MOV Flgs2, W4
0089C0  A1C004     BCLR W4, #12
0089C2  889624     MOV W4, Flgs2
7526:                              if (HorningH)
0089C4  809635     MOV 0x12C6, W5
0089C6  280004     MOV #0x8000, W4
0089C8  628204     AND W5, W4, W4
0089CA  520FE0     SUB W4, #0x0, [W15]
0089CC  320003     BRA Z, 0x89D4
7527:                                  HorningH=0;
0089CE  809634     MOV 0x12C6, W4
0089D0  A1F004     BCLR W4, #15
0089D2  889634     MOV W4, 0x12C6
7528:                          }
7529:                  }
7530:              
7531:              
7532:              
7533:              
7534:              
7535:              
7536:                       if (CntAfterActivate)
0089D4  81BEC4     MOV CntAfterActivate, W4
0089D6  520FE0     SUB W4, #0x0, [W15]
0089D8  320003     BRA Z, 0x89E0
7537:                           CntAfterActivate--;
0089DA  81BEC4     MOV CntAfterActivate, W4
0089DC  E90204     DEC W4, W4
0089DE  89BEC4     MOV W4, CntAfterActivate
7538:              
7539:              
7540:                       CntSegMain--;
0089E0  243084     MOV #0x4308, W4
0089E2  784214     MOV.B [W4], W4
0089E4  E94204     DEC.B W4, W4
0089E6  243085     MOV #0x4308, W5
0089E8  784A84     MOV.B W4, [W5]
7541:                       if (!CntSegMain)
0089EA  243084     MOV #0x4308, W4
0089EC  784214     MOV.B [W4], W4
0089EE  524FE0     SUB.B W4, #0x0, [W15]
0089F0  3A0004     BRA NZ, 0x89FA
7542:                       {
7543:                           CntSegMain=2;
0089F2  243085     MOV #0x4308, W5
0089F4  B3C024     MOV.B #0x2, W4
0089F6  784A84     MOV.B W4, [W5]
7544:                           IEC1bits.OC4IE=1;
0089F8  A84823     BSET 0x823, #2
7545:                       }
7546:              
7547:              
7548:              
7549:              
7550:                      CntMustStorageData--;
0089FA  821734     MOV CntMustStorageData, W4
0089FC  E90204     DEC W4, W4
0089FE  8A1734     MOV W4, CntMustStorageData
7551:                      if (!CntMustStorageData)
008A00  821734     MOV CntMustStorageData, W4
008A02  520FE0     SUB W4, #0x0, [W15]
008A04  3A0002     BRA NZ, 0x8A0A
7552:                      {
7553:                      CntMustStorageData=CNTSTOR_CONST;
008A06  203E84     MOV #0x3E8, W4
008A08  8A1734     MOV W4, CntMustStorageData
7554:                      }
7555:              
7556:                    if (BMSDelayCnt)
008A0A  242974     MOV #0x4297, W4
008A0C  784214     MOV.B [W4], W4
008A0E  524FE0     SUB.B W4, #0x0, [W15]
008A10  320005     BRA Z, 0x8A1C
7557:                        BMSDelayCnt--;
008A12  242974     MOV #0x4297, W4
008A14  784214     MOV.B [W4], W4
008A16  E94204     DEC.B W4, W4
008A18  242975     MOV #0x4297, W5
008A1A  784A84     MOV.B W4, [W5]
7558:              
7559:              
7560:                      if (CntPause)
008A1C  81BA34     MOV CntPause, W4
008A1E  520FE0     SUB W4, #0x0, [W15]
008A20  320003     BRA Z, 0x8A28
7561:                          CntPause--;
008A22  81BA34     MOV CntPause, W4
008A24  E90204     DEC W4, W4
008A26  89BA34     MOV W4, CntPause
7562:              
7563:              if (UseTmr&&TmrActive)
008A28  2373E4     MOV #0x373E, W4
008A2A  784214     MOV.B [W4], W4
008A2C  524FE0     SUB.B W4, #0x0, [W15]
008A2E  32001C     BRA Z, 0x8A68
008A30  809645     MOV Flgs3, W5
008A32  204004     MOV #0x400, W4
008A34  628204     AND W5, W4, W4
008A36  520FE0     SUB W4, #0x0, [W15]
008A38  320017     BRA Z, 0x8A68
7564:              {
7565:              
7566:                  if (TimerCnt<=TimerConst)
008A3A  81BA66     MOV TimerCnt, W6
008A3C  81BA77     MOV 0x374E, W7
008A3E  81BA84     MOV TimerConst, W4
008A40  81BA95     MOV 0x3752, W5
008A42  530F84     SUB W6, W4, [W15]
008A44  5B8F85     SUBB W7, W5, [W15]
008A46  3E0010     BRA GTU, 0x8A68
7567:                  {
7568:                      TimerCnt++;
008A48  81BA64     MOV TimerCnt, W4
008A4A  81BA75     MOV 0x374E, W5
008A4C  420261     ADD W4, #0x1, W4
008A4E  4A82E0     ADDC W5, #0x0, W5
008A50  89BA64     MOV W4, TimerCnt
008A52  89BA75     MOV W5, 0x374E
7569:              
7570:                      if (TimerCnt>=TimerConst)
008A54  81BA66     MOV TimerCnt, W6
008A56  81BA77     MOV 0x374E, W7
008A58  81BA84     MOV TimerConst, W4
008A5A  81BA95     MOV 0x3752, W5
008A5C  530F84     SUB W6, W4, [W15]
008A5E  5B8F85     SUBB W7, W5, [W15]
008A60  390003     BRA NC, 0x8A68
7571:                      {
7572:                          SoundTmr=1;
008A62  809654     MOV 0x12CA, W4
008A64  A0E004     BSET W4, #14
008A66  889654     MOV W4, 0x12CA
7573:                      }
7574:                  }
7575:              }
7576:              
7577:                      if (CntOnDelay)
008A68  821744     MOV CntOnDelay, W4
008A6A  520FE0     SUB W4, #0x0, [W15]
008A6C  320003     BRA Z, 0x8A74
7578:                          CntOnDelay--;
008A6E  821744     MOV CntOnDelay, W4
008A70  E90204     DEC W4, W4
008A72  8A1744     MOV W4, CntOnDelay
7579:              
7580:                      IndCnt--;
008A74  237D74     MOV #0x37D7, W4
008A76  784214     MOV.B [W4], W4
008A78  E94204     DEC.B W4, W4
008A7A  237D75     MOV #0x37D7, W5
008A7C  784A84     MOV.B W4, [W5]
7581:                      if (!IndCnt)
008A7E  237D74     MOV #0x37D7, W4
008A80  784214     MOV.B [W4], W4
008A82  524FE0     SUB.B W4, #0x0, [W15]
008A84  3A0013     BRA NZ, 0x8AAC
7582:                      {
7583:                      OnIndFl=!OnIndFl;
008A86  809655     MOV 0x12CA, W5
008A88  210004     MOV #0x1000, W4
008A8A  628204     AND W5, W4, W4
008A8C  A7F004     BTSC W4, #15
008A8E  EA0204     NEG W4, W4
008A90  E90204     DEC W4, W4
008A92  DE224F     LSR W4, #15, W4
008A94  784204     MOV.B W4, W4
008A96  FB8204     ZE W4, W4
008A98  620261     AND W4, #0x1, W4
008A9A  DD224C     SL W4, #12, W4
008A9C  809656     MOV 0x12CA, W6
008A9E  2EFFF5     MOV #0xEFFF, W5
008AA0  630285     AND W6, W5, W5
008AA2  728204     IOR W5, W4, W4
008AA4  889654     MOV W4, 0x12CA
7584:                      IndCnt=125;
008AA6  237D75     MOV #0x37D7, W5
008AA8  B3C7D4     MOV.B #0x7D, W4
008AAA  784A84     MOV.B W4, [W5]
7585:                      }
7586:              
7587:              
7588:                      if (CntHorningL)
008AAC  81B814     MOV CntHorningL, W4
008AAE  520FE0     SUB W4, #0x0, [W15]
008AB0  320009     BRA Z, 0x8AC4
7589:                      {
7590:                          CntHorningL--;
008AB2  81B814     MOV CntHorningL, W4
008AB4  E90204     DEC W4, W4
008AB6  89B814     MOV W4, CntHorningL
7591:                          if (!CntHorningL)
008AB8  81B814     MOV CntHorningL, W4
008ABA  520FE0     SUB W4, #0x0, [W15]
008ABC  3A0003     BRA NZ, 0x8AC4
7592:                          CntHrnL=0;
008ABE  2373C5     MOV #0x373C, W5
008AC0  EB4200     CLR.B W4
008AC2  784A84     MOV.B W4, [W5]
7593:                      }
7594:              
7595:                      if (TimeOutHC05)
008AC4  821474     MOV TimeOutHC05, W4
008AC6  520FE0     SUB W4, #0x0, [W15]
008AC8  320003     BRA Z, 0x8AD0
7596:                          TimeOutHC05--;
008ACA  821474     MOV TimeOutHC05, W4
008ACC  E90204     DEC W4, W4
008ACE  8A1474     MOV W4, TimeOutHC05
7597:              
7598:                      if (CntU4TimeOut)
008AD0  8213F4     MOV CntU4TimeOut, W4
008AD2  520FE0     SUB W4, #0x0, [W15]
008AD4  320009     BRA Z, 0x8AE8
7599:                      {
7600:                  CntU4TimeOut--;
008AD6  8213F4     MOV CntU4TimeOut, W4
008AD8  E90204     DEC W4, W4
008ADA  8A13F4     MOV W4, CntU4TimeOut
7601:                  if (!CntU4TimeOut)
008ADC  8213F4     MOV CntU4TimeOut, W4
008ADE  520FE0     SUB W4, #0x0, [W15]
008AE0  3A0003     BRA NZ, 0x8AE8
7602:                  GettingPacketU4_FL=0;
008AE2  809614     MOV 0x12C2, W4
008AE4  A1F004     BCLR W4, #15
008AE6  889614     MOV W4, 0x12C2
7603:                      }
7604:              
7605:                    MyTimeOut--;
008AE8  8194C4     MOV MyTimeOut, W4
008AEA  E90204     DEC W4, W4
008AEC  8994C4     MOV W4, MyTimeOut
7606:                    if (TiltControlCnt)
008AEE  8213E4     MOV TiltControlCnt, W4
008AF0  520FE0     SUB W4, #0x0, [W15]
008AF2  320004     BRA Z, 0x8AFC
7607:                    TiltControlCnt--;
008AF4  8213E4     MOV TiltControlCnt, W4
008AF6  E90204     DEC W4, W4
008AF8  8A13E4     MOV W4, TiltControlCnt
008AFA  370001     BRA 0x8AFE
7608:                    else
7609:                        Nop();
008AFC  000000     NOP
7610:              
7611:                      if (StartingMoveCnt)
008AFE  8183E4     MOV StartingMoveCnt, W4
008B00  520FE0     SUB W4, #0x0, [W15]
008B02  320009     BRA Z, 0x8B16
7612:                      {
7613:                          StartingMoveCnt--;
008B04  8183E4     MOV StartingMoveCnt, W4
008B06  E90204     DEC W4, W4
008B08  8983E4     MOV W4, StartingMoveCnt
7614:                                  if (!StartingMoveCnt)
008B0A  8183E4     MOV StartingMoveCnt, W4
008B0C  520FE0     SUB W4, #0x0, [W15]
008B0E  3A0003     BRA NZ, 0x8B16
7615:                                  {
7616:                                      StartingMove=1;
008B10  809604     MOV Flgs1, W4
008B12  A05004     BSET W4, #5
008B14  889604     MOV W4, Flgs1
7617:                                      
7618:                                  }
7619:                      }
7620:              
7621:                      if (SensorLessOnCnt)
008B16  80A2E4     MOV SensorLessOnCnt, W4
008B18  520FE0     SUB W4, #0x0, [W15]
008B1A  320003     BRA Z, 0x8B22
7622:                          SensorLessOnCnt--;
008B1C  80A2E4     MOV SensorLessOnCnt, W4
008B1E  E90204     DEC W4, W4
008B20  88A2E4     MOV W4, SensorLessOnCnt
7623:              
7624:                    
7625:                      if (TemperatureCnt)
008B22  8183D4     MOV TemperatureCnt, W4
008B24  520FE0     SUB W4, #0x0, [W15]
008B26  320005     BRA Z, 0x8B32
7626:                      {
7627:                          TemperatureCnt=750;
008B28  202EE4     MOV #0x2EE, W4
008B2A  8983D4     MOV W4, TemperatureCnt
7628:                          TemperatureFl=0;
008B2C  809604     MOV Flgs1, W4
008B2E  A14004     BCLR W4, #4
008B30  889604     MOV W4, Flgs1
7629:                      }
7630:              
7631:              
7632:              /*
7633:                      if (OdometrCnt)
7634:                          OdometrCnt--;
7635:                      else
7636:                      {
7637:                          if (!OdometrErased)
7638:                          {
7639:                              WriteStat_FLASH(0);
7640:                              EraseSector_FLASH(4096);
7641:                              WriteStat_FLASH(0x3c);
7642:              
7643:                              OdometrErased=1;
7644:                          }
7645:                      }
7646:              
7647:              */
7648:              
7649:               
7650:              
7651:                          
7652:                          if (TiltZad<TiltZadTmp)
008B32  8155D6     MOV TiltZad, W6
008B34  8155E7     MOV 0x2ABC, W7
008B36  815614     MOV TiltZadTmp, W4
008B38  815625     MOV 0x2AC4, W5
008B3A  B3C018     MOV.B #0x1, W8
008B3C  BE0104     MOV.D W4, W2
008B3E  BE0006     MOV.D W6, W0
008B40  0224FC     CALL ___lesf2
008B42  000000     NOP
008B44  780200     MOV W0, W4
008B46  520FE0     SUB W4, #0x0, [W15]
008B48  350001     BRA LT, 0x8B4C
008B4A  EB4400     CLR.B W8
008B4C  544FE0     SUB.B W8, #0x0, [W15]
008B4E  320026     BRA Z, 0x8B9C
7653:                          {
7654:                              TiltZad=TiltZad+0.01;//TiltChng;
008B50  8155D4     MOV TiltZad, W4
008B52  8155E5     MOV 0x2ABC, W5
008B54  2D70A2     MOV #0xD70A, W2
008B56  23C233     MOV #0x3C23, W3
008B58  BE0004     MOV.D W4, W0
008B5A  0222D2     CALL ___addsf3
008B5C  000000     NOP
008B5E  BE0200     MOV.D W0, W4
008B60  8955D4     MOV W4, TiltZad
008B62  8955E5     MOV W5, 0x2ABC
7655:                              if (TiltZad>=TiltZadTmp)
008B64  8155D6     MOV TiltZad, W6
008B66  8155E7     MOV 0x2ABC, W7
008B68  815614     MOV TiltZadTmp, W4
008B6A  815625     MOV 0x2AC4, W5
008B6C  B3C018     MOV.B #0x1, W8
008B6E  BE0104     MOV.D W4, W2
008B70  BE0006     MOV.D W6, W0
008B72  022500     CALL ___gtsf2
008B74  000000     NOP
008B76  780200     MOV W0, W4
008B78  520FE0     SUB W4, #0x0, [W15]
008B7A  3D0001     BRA GE, 0x8B7E
008B7C  EB4400     CLR.B W8
008B7E  544FE0     SUB.B W8, #0x0, [W15]
008B80  320032     BRA Z, 0x8BE6
7656:                              {
7657:                                   if (TiltZadTmp==0)
008B82  815614     MOV TiltZadTmp, W4
008B84  815625     MOV 0x2AC4, W5
008B86  B81160     MUL.UU W2, #0, W2
008B88  BE0004     MOV.D W4, W0
008B8A  0224FC     CALL ___lesf2
008B8C  000000     NOP
008B8E  780200     MOV W0, W4
008B90  520FE0     SUB W4, #0x0, [W15]
008B92  3A0029     BRA NZ, 0x8BE6
7658:                                      TiltZad=0;
008B94  B82260     MUL.UU W4, #0, W4
008B96  8955D4     MOV W4, TiltZad
008B98  8955E5     MOV W5, 0x2ABC
008B9A  370025     BRA 0x8BE6
7659:                              }
7660:                          }
7661:                          else
7662:                          {
7663:                              TiltZad=TiltZad-0.01;//TiltChng;
008B9C  8155D4     MOV TiltZad, W4
008B9E  8155E5     MOV 0x2ABC, W5
008BA0  2D70A2     MOV #0xD70A, W2
008BA2  23C233     MOV #0x3C23, W3
008BA4  BE0004     MOV.D W4, W0
008BA6  0222D0     CALL ___subsf3
008BA8  000000     NOP
008BAA  BE0200     MOV.D W0, W4
008BAC  8955D4     MOV W4, TiltZad
008BAE  8955E5     MOV W5, 0x2ABC
7664:                              if (TiltZad<=TiltZadTmp)
008BB0  8155D6     MOV TiltZad, W6
008BB2  8155E7     MOV 0x2ABC, W7
008BB4  815614     MOV TiltZadTmp, W4
008BB6  815625     MOV 0x2AC4, W5
008BB8  B3C018     MOV.B #0x1, W8
008BBA  BE0104     MOV.D W4, W2
008BBC  BE0006     MOV.D W6, W0
008BBE  0224FC     CALL ___lesf2
008BC0  000000     NOP
008BC2  780200     MOV W0, W4
008BC4  520FE0     SUB W4, #0x0, [W15]
008BC6  340001     BRA LE, 0x8BCA
008BC8  EB4400     CLR.B W8
008BCA  544FE0     SUB.B W8, #0x0, [W15]
008BCC  32000C     BRA Z, 0x8BE6
7665:                              {
7666:                                   if (TiltZadTmp==0)
008BCE  815614     MOV TiltZadTmp, W4
008BD0  815625     MOV 0x2AC4, W5
008BD2  B81160     MUL.UU W2, #0, W2
008BD4  BE0004     MOV.D W4, W0
008BD6  0224FC     CALL ___lesf2
008BD8  000000     NOP
008BDA  780200     MOV W0, W4
008BDC  520FE0     SUB W4, #0x0, [W15]
008BDE  3A0003     BRA NZ, 0x8BE6
7667:                                      TiltZad=0;
008BE0  B82260     MUL.UU W4, #0, W4
008BE2  8955D4     MOV W4, TiltZad
008BE4  8955E5     MOV W5, 0x2ABC
7668:                              }
7669:                          }
7670:              
7671:                   //   }
7672:              
7673:              
7674:                  if (MeasuringSpd1)
008BE6  8095F5     MOV 0x12BE, W5
008BE8  220004     MOV #0x2000, W4
008BEA  628204     AND W5, W4, W4
008BEC  520FE0     SUB W4, #0x0, [W15]
008BEE  320017     BRA Z, 0x8C1E
7675:                  {
7676:                  _1sCnt1++;
008BF0  817ED4     MOV _1sCnt1, W4
008BF2  E80204     INC W4, W4
008BF4  897ED4     MOV W4, _1sCnt1
7677:                  if (_1sCnt1>=_1sCntConst)
008BF6  817ED5     MOV _1sCnt1, W5
008BF8  817EE4     MOV _1sCntConst, W4
008BFA  528F84     SUB W5, W4, [W15]
008BFC  390021     BRA NC, 0x8C40
7678:                  {
7679:                      Spd1Res=Spd1Cnt;
008BFE  817F54     MOV Spd1Cnt, W4
008C00  897F14     MOV W4, Spd1Res
7680:                      Spd1Cnt=0;
008C02  EB0200     CLR W4
008C04  897F54     MOV W4, Spd1Cnt
7681:                      HvSpd1=1;
008C06  8095F4     MOV 0x12BE, W4
008C08  A0B004     BSET W4, #11
008C0A  8895F4     MOV W4, 0x12BE
7682:                      HvSpd1_PID=1;
008C0C  809604     MOV Flgs1, W4
008C0E  A0A004     BSET W4, #10
008C10  889604     MOV W4, Flgs1
7683:                      MeasuringSpd1=0;
008C12  8095F4     MOV 0x12BE, W4
008C14  A1D004     BCLR W4, #13
008C16  8895F4     MOV W4, 0x12BE
7684:                      _1sCnt1=0;
008C18  EB0200     CLR W4
008C1A  897ED4     MOV W4, _1sCnt1
008C1C  370011     BRA 0x8C40
7685:                  }
7686:                  }
7687:                  else
7688:                  {
7689:                  _1sCnt1++;
008C1E  817ED4     MOV _1sCnt1, W4
008C20  E80204     INC W4, W4
008C22  897ED4     MOV W4, _1sCnt1
7690:                  if (_1sCnt1>=_1sCntConst)
008C24  817ED5     MOV _1sCnt1, W5
008C26  817EE4     MOV _1sCntConst, W4
008C28  528F84     SUB W5, W4, [W15]
008C2A  39000A     BRA NC, 0x8C40
7691:                  {
7692:                      _1sCnt1=0;
008C2C  EB0200     CLR W4
008C2E  897ED4     MOV W4, _1sCnt1
7693:                      Spd1Res=0;
008C30  EB0200     CLR W4
008C32  897F14     MOV W4, Spd1Res
7694:                      HvSpd1_PID=1;
008C34  809604     MOV Flgs1, W4
008C36  A0A004     BSET W4, #10
008C38  889604     MOV W4, Flgs1
7695:                      HvSpd1=1;
008C3A  8095F4     MOV 0x12BE, W4
008C3C  A0B004     BSET W4, #11
008C3E  8895F4     MOV W4, 0x12BE
7696:                  }
7697:                  }
7698:              
7699:              
7700:                      CntRecAcc--;
008C40  217CE4     MOV #0x17CE, W4
008C42  784214     MOV.B [W4], W4
008C44  E94204     DEC.B W4, W4
008C46  217CE5     MOV #0x17CE, W5
008C48  784A84     MOV.B W4, [W5]
7701:                      if (!CntRecAcc)
008C4A  217CE4     MOV #0x17CE, W4
008C4C  784214     MOV.B [W4], W4
008C4E  524FE0     SUB.B W4, #0x0, [W15]
008C50  3A000F     BRA NZ, 0x8C70
7702:                      {
7703:                          CntRecAcc=2;
008C52  217CE5     MOV #0x17CE, W5
008C54  B3C024     MOV.B #0x2, W4
008C56  784A84     MOV.B W4, [W5]
7704:              #if !defined LSM6DS33
7705:              #if !defined MPU6050     
7706:              #if !defined VECTOR_MPU_6000
7707:                          Acc_txBuf[0]=0x27;
7708:                          Acc_txBuf[0]=Acc_txBuf[0]|0xc0;//Addr | autoincrement | read
7709:                          TxRxSPI_ACC(0x10);
7710:              #endif
7711:              #if defined VECTOR            
7712:                         if (MPU6000_Initialized)
008C58  8096B5     MOV 0x12D6, W5
008C5A  202004     MOV #0x200, W4
008C5C  628204     AND W5, W4, W4
008C5E  520FE0     SUB W4, #0x0, [W15]
008C60  320007     BRA Z, 0x8C70
7713:                          {
7714:                          Gyro_txBuf[0] = 0x80|0x3b;
008C62  217CF5     MOV #0x17CF, W5
008C64  B3CBB4     MOV.B #0xBB, W4
008C66  784A84     MOV.B W4, [W5]
7715:                          TxRxSPI_GYRO(15);
008C68  2000F0     MOV #0xF, W0
008C6A  07239E     RCALL TxRxSPI_GYRO
008C6C  370001     BRA 0x8C70
7716:                          }
7717:              #else
7718:                        
7719:                          if (!TemperatureFl)
7720:                          {
7721:                          Gyro_txBuf[0] = 0x26|0xc0;//Addr | autoincrement  //0xf|0xc0;//
7722:                          /*Gyro_rxBuf[0]=0;
7723:                          Gyro_rxBuf[1]=0;
7724:                          Gyro_rxBuf[2]=0;
7725:                          Gyro_rxBuf[3]=0;
7726:                          Gyro_rxBuf[4]=0;
7727:                          Gyro_rxBuf[5]=0;
7728:                          Gyro_rxBuf[6]=0;
7729:                          Gyro_rxBuf[7]=0;
7730:                          Gyro_rxBuf[8]=0;
7731:                          Gyro_rxBuf[9]=0;*/
7732:                          TxRxSPI_GYRO(9);
7733:                          }
7734:                          else
7735:                          {
7736:                          Gyro_txBuf[0] = 0x26|0xc0;//Addr | autoincrement
7737:                          Gyro_rxBuf[0]=0;
7738:                          Gyro_rxBuf[1]=0;
7739:                          Gyro_rxBuf[2]=0;
7740:                          Gyro_rxBuf[3]=0;
7741:                          Gyro_rxBuf[4]=0;
7742:                          Gyro_rxBuf[5]=0;
7743:                          Gyro_rxBuf[6]=0;
7744:                          Gyro_rxBuf[7]=0;
7745:                          Gyro_rxBuf[8]=0;
7746:                          Gyro_rxBuf[9]=0;
7747:                          TxRxSPI_GYRO(4);
7748:                          }
7749:              #endif
7750:              #else
7751:                          if (HvMPU6050)
7752:                          {
7753:                              HvMPU6050=0;
7754:                          //if (!TmpFlg)
7755:                              if (InitReady)
7756:                          ReadMPU6050(0x3b, 14);
7757:                          }
7758:              #endif
7759:                          
7760:              #else
7761:                            if (LSM6DS33_Initialized)
7762:                          {
7763:                          Gyro_txBuf[0] = 0x20|0x80;
7764:                          TxRxSPI_GYRO(15);
7765:                              
7766:                              //HvGyroData=1;
7767:                              //HvAccData=1;
7768:                              //IEC1bits.OC4IE=1;
7769:                          }
7770:                        
7771:              #endif
7772:                          
7773:                      }
7774:              /*
7775:                      CntRecGyro--;
7776:                      if (!CntRecGyro)
7777:                      {
7778:                          CntRecGyro=2;
7779:                          Gyro_txBuf[0] = 0x27|0xc0;//Addr | autoincrement
7780:                          TxRxSPI_GYRO(8);
7781:                      }
7782:              
7783:              */
7784:              /*
7785:                      if (TiltTimoutCnt)
7786:                      TiltTimoutCnt--;
7787:              
7788:                         if ((!TiltTimoutCnt)&&(!Unicycle))
7789:                         {
7790:                          //ErrorCode=1;
7791:              
7792:                             Stopping=1;
7793:              
7794:                          if (!ErrorTiltFl)
7795:                          {
7796:                          WriteErr_Fl=1;
7797:                          ErrorTiltFl=1;
7798:                          }
7799:                         }*/
7800:              /*if (!DirectControlMotor)
7801:              {
7802:                              if ((ErrorCode)||(NoBalance))
7803:                      {
7804:                         if (!AlarmOn)
7805:                         {
7806:                          DS=1;
7807:                         }
7808:                         else
7809:                         {
7810:                          DS=0;
7811:                         }
7812:              
7813:                           ChangePWM1(0);
7814:                           
7815:              
7816:                      }
7817:              }*/
7818:              #if !defined VECTOR
7819:              #if defined ISOLATED
7820:              
7821:                      CNT_U--;
7822:                      if (!CNT_U)
7823:                      {
7824:                           CNT_U=1;
7825:                          if (!TakingPacketUbat)
7826:                          {
7827:                             UBt_SCK=0;
7828:                             TakingPacketUbat=1;
7829:                             CNT_U_Bits=0;
7830:                          }
7831:                          else
7832:                          {
7833:                              if (!UBt_SCK)
7834:                                  UBt_SCK=1;
7835:                              else
7836:                              {
7837:                                  if (UBt_DATA)
7838:                                      UBat=UBat|1;
7839:                                  else
7840:                                      UBat=UBat&0xfffffffe;
7841:                                  UBt_SCK=0;
7842:                                  CNT_U_Bits++;
7843:                                  if (CNT_U_Bits>=32)
7844:                                  {
7845:                                      CNT_U_Bits=0;
7846:                                      TakingPacketUbat=0;
7847:                                      CNT_U=500;
7848:                                     UBt_SCK=1;
7849:                                     Secret2=(unsigned char)UBat;
7850:                                     Secret1=(unsigned char)(UBat>>24);
7851:                                     UBT=(unsigned char)(UBat>>16);
7852:                                     HvUBT=1;
7853:                                     Chk=(unsigned char)(UBat>>8);
7854:              
7855:                                     Check=UBT+Secret1+Secret2;
7856:                                     Check=~Check;
7857:              
7858:                                     Secret1=Secret1-UBT;
7859:                                     Secret2=Secret2+UBT;
7860:              
7861:                                     
7862:                           //          UBT=50;
7863:                                     
7864:                                     
7865:                                     if (Check==Chk)
7866:                                     {
7867:                                      HvPacketUBat=1;
7868:              #if defined U_2_2k
7869:                                      UBT=UBT*143;
7870:                                      UBT=UBT/100;
7871:              #endif
7872:                                     }
7873:                                     else
7874:                                      HvPacketUBat=0;
7875:              
7876:                                     Nop();
7877:                                     Nop();
7878:                                     Nop();
7879:              
7880:                                  if ((Secret1!=0x15)||(Secret2!=0x9a))
7881:                                  {
7882:              #if !defined NO_UBT
7883:                   //                   CriticalError=CRERR_SECRET_UBT;
7884:              #endif
7885:                                     Nop();
7886:                                     Nop();
7887:                                     Nop();
7888:              
7889:                                  }
7890:                                  else
7891:                                  {
7892:                                     Nop();
7893:                                     Nop();
7894:                                     Nop();
7895:                                  }
7896:              
7897:              
7898:                                  }
7899:                                  else
7900:                                  {
7901:                                      UBat=UBat<<1;
7902:                                  }
7903:              
7904:              
7905:                              }
7906:              
7907:                          }
7908:                      }
7909:              #endif
7910:              #endif
7911:              
7912:              
7913:              }
008C70  FA8000     ULNK
008C72  F90032     POP DSRPAG
008C74  78044F     MOV [--W15], W8
008C76  BE034F     MOV.D [--W15], W6
008C78  BE024F     MOV.D [--W15], W4
008C7A  BE014F     MOV.D [--W15], W2
008C7C  BE004F     MOV.D [--W15], W0
008C7E  F90036     POP RCOUNT
008C80  064000     RETFIE
7914:              
7915:              
7916:              void InitBLDCPorts(void)
7917:              {
008C82  FA0000     LNK #0x0
7918:              
7919:              PWM1_A_H=0;
008C84  A92E44     BCLR LATE, #1
7920:              PWM1_A_L=0;
008C86  A90E44     BCLR LATE, #0
7921:              PWM1_B_H=0;
008C88  A96E44     BCLR LATE, #3
7922:              PWM1_B_L=0;
008C8A  A94E44     BCLR LATE, #2
7923:              PWM1_C_H=0;
008C8C  A9AE44     BCLR LATE, #5
7924:              PWM1_C_L=0;
008C8E  A98E44     BCLR LATE, #4
7925:              
7926:              
7927:              
7928:              
7929:                  //BLDC 1
7930:              
7931:              //A:
7932:              #if !defined VECTOR
7933:              TRIS_DS=0;
7934:              #endif
7935:              
7936:              
7937:              TRIS_PWM1_A_H=0;
008C90  A92E40     BCLR TRISE, #1
7938:              ANSEL_PWM1_A_H=0;
008C92  A92E4E     BCLR ANSELE, #1
7939:              
7940:              TRIS_PWM1_A_L=0;
008C94  A90E40     BCLR TRISE, #0
7941:              ANSEL_PWM1_A_L=0;
008C96  A90E4E     BCLR ANSELE, #0
7942:              
7943:              //B:
7944:              
7945:              TRIS_PWM1_B_H=0;
008C98  A96E40     BCLR TRISE, #3
7946:              ANSEL_PWM1_B_H=0;
008C9A  A96E4E     BCLR ANSELE, #3
7947:              
7948:              TRIS_PWM1_B_L=0;
008C9C  A94E40     BCLR TRISE, #2
7949:              ANSEL_PWM1_B_L=0;
008C9E  A94E4E     BCLR ANSELE, #2
7950:              
7951:              //C:
7952:              
7953:              TRIS_PWM1_C_H=0;
008CA0  A9AE40     BCLR TRISE, #5
7954:              ANSEL_PWM1_C_H=0;
008CA2  A9AE4E     BCLR ANSELE, #5
7955:              
7956:              TRIS_PWM1_C_L=0;
008CA4  A98E40     BCLR TRISE, #4
7957:              ANSEL_PWM1_C_L=0;
008CA6  A98E4E     BCLR ANSELE, #4
7958:              
7959:              
7960:              //HALL:
7961:              
7962:              CNEN_Hall1_A=1;
008CA8  A86E58     BSET CNENF, #3
7963:              
7964:              
7965:              CNEN_Hall1_B=1;
008CAA  A84E58     BSET CNENF, #2
7966:              
7967:              
7968:              CNEN_Hall1_C=1;
008CAC  A8AE58     BSET CNENF, #5
7969:              
7970:              
7971:              
7972:              //BLDC 1 END
7973:              
7974:              
7975:              
7976:              PWM1_A_H=0;
008CAE  A92E44     BCLR LATE, #1
7977:              PWM1_A_L=0;
008CB0  A90E44     BCLR LATE, #0
7978:              PWM1_B_H=0;
008CB2  A96E44     BCLR LATE, #3
7979:              PWM1_B_L=0;
008CB4  A94E44     BCLR LATE, #2
7980:              PWM1_C_H=0;
008CB6  A9AE44     BCLR LATE, #5
7981:              PWM1_C_L=0;
008CB8  A98E44     BCLR LATE, #4
7982:              
7983:              
7984:              
7985:              
7986:              TRIS_Hall1_A=1;
008CBA  A86E50     BSET TRISF, #3
7987:              TRIS_Hall1_B=1;
008CBC  A84E50     BSET TRISF, #2
7988:              TRIS_Hall1_C=1;
008CBE  A8AE50     BSET TRISF, #5
7989:              
7990:              
7991:              IPC4bits.CNIP = 4;
008CC0  804244     MOV IPC4, W4
008CC2  A1C004     BCLR W4, #12
008CC4  A1D004     BCLR W4, #13
008CC6  A0E004     BSET W4, #14
008CC8  884244     MOV W4, IPC4
7992:              IEC1bits.CNIE = 1;
008CCA  A86822     BSET IEC1, #3
7993:              
7994:              DS=0;
008CCC  8096B4     MOV 0x12D6, W4
008CCE  A1B004     BCLR W4, #11
008CD0  8896B4     MOV W4, 0x12D6
7995:              
7996:              }
008CD2  FA8000     ULNK
008CD4  060000     RETURN
7997:              
7998:              
7999:                  
8000:              
8001:              void Phases1(void)
8002:              {
008CD6  FA0002     LNK #0x2
8003:              unsigned char LowDrv,HiDrv;
8004:              
8005:              if ((Vector)&&(!BreakPressed))
008CD8  809684     MOV Flgs5, W4
008CDA  620270     AND W4, #0x10, W4
008CDC  520FE0     SUB W4, #0x0, [W15]
008CDE  320004     BRA Z, 0x8CE8
008CE0  809614     MOV 0x12C2, W4
008CE2  620261     AND W4, #0x1, W4
008CE4  520FE0     SUB W4, #0x0, [W15]
008CE6  3200D0     BRA Z, 0x8E88
8006:                  return;
008E88  000000     NOP
008E8A  370001     BRA 0x8E8E
8007:              if (ChagerViaMotor)
008CE8  809604     MOV Flgs1, W4
008CEA  620262     AND W4, #0x2, W4
008CEC  520FE0     SUB W4, #0x0, [W15]
008CEE  3A00CE     BRA NZ, 0x8E8C
8008:                  return;
008E8C  000000     NOP
8009:              
8010:              
8011:                  PWM1_A_H=0;
008CF0  A92E44     BCLR LATE, #1
8012:                  PWM1_A_L=0;
008CF2  A90E44     BCLR LATE, #0
8013:                  PWM1_B_H=0;
008CF4  A96E44     BCLR LATE, #3
8014:                  PWM1_B_L=0;
008CF6  A94E44     BCLR LATE, #2
8015:                  PWM1_C_H=0;
008CF8  A9AE44     BCLR LATE, #5
8016:                  PWM1_C_L=0;
008CFA  A98E44     BCLR LATE, #4
8017:              
8018:              
8019:                      if ((Sensor1<7)&&(Sensor1>0))
008CFC  212464     MOV #0x1246, W4
008CFE  784214     MOV.B [W4], W4
008D00  524FE6     SUB.B W4, #0x6, [W15]
008D02  3E0012     BRA GTU, 0x8D28
008D04  212464     MOV #0x1246, W4
008D06  784214     MOV.B [W4], W4
008D08  524FE0     SUB.B W4, #0x0, [W15]
008D0A  32000E     BRA Z, 0x8D28
8020:                  {
8021:                  LowDrv=LowDrive[Sensor1];
008D0C  212464     MOV #0x1246, W4
008D0E  784214     MOV.B [W4], W4
008D10  FB8204     ZE W4, W4
008D12  2A96A5     MOV #0xA96A, W5
008D14  428204     ADD W5, W4, W4
008D16  784F14     MOV.B [W4], [W14]
8022:                  HiDrv=HiDrive[Sensor1];
008D18  212464     MOV #0x1246, W4
008D1A  784214     MOV.B [W4], W4
008D1C  FB8204     ZE W4, W4
008D1E  2A9715     MOV #0xA971, W5
008D20  428204     ADD W5, W4, W4
008D22  784294     MOV.B [W4], W5
008D24  984715     MOV.B W5, [W14+1]
008D26  37000A     BRA 0x8D3C
8023:                  }
8024:                  else
8025:                  {
8026:                  LowDrv=0;
008D28  EB4200     CLR.B W4
008D2A  784F04     MOV.B W4, [W14]
8027:                  HiDrv=0;
008D2C  EB4200     CLR.B W4
008D2E  984714     MOV.B W4, [W14+1]
8028:              
8029:                  PEN1_A_H=0;
008D30  A9EC23     BCLR 0xC23, #7
8030:                  PEN1_A_L=0;
008D32  A9CC23     BCLR 0xC23, #6
8031:                  PEN1_B_H=0;
008D34  A9EC43     BCLR 0xC43, #7
8032:                  PEN1_B_L=0;
008D36  A9CC43     BCLR 0xC43, #6
8033:                  PEN1_C_H=0;
008D38  A9EC63     BCLR 0xC63, #7
8034:                  PEN1_C_L=0;
008D3A  A9CC63     BCLR 0xC63, #6
8035:              
8036:              
8037:                  }
8038:              
8039:                         if (HiDrv&1)
008D3C  90421E     MOV.B [W14+1], W4
008D3E  FB8204     ZE W4, W4
008D40  620261     AND W4, #0x1, W4
008D42  784204     MOV.B W4, W4
008D44  524FE0     SUB.B W4, #0x0, [W15]
008D46  32001B     BRA Z, 0x8D7E
8040:                          {//A
8041:                             if (BreakPressed)
008D48  809614     MOV 0x12C2, W4
008D4A  620261     AND W4, #0x1, W4
008D4C  520FE0     SUB W4, #0x0, [W15]
008D4E  32000A     BRA Z, 0x8D64
8042:                             {
8043:                          PEN1_A_H=0;
008D50  A9EC23     BCLR 0xC23, #7
8044:                          if (_1stBreak)
008D52  809665     MOV Flgs4, W5
008D54  204004     MOV #0x400, W4
008D56  628204     AND W5, W4, W4
008D58  520FE0     SUB W4, #0x0, [W15]
008D5A  320002     BRA Z, 0x8D60
8045:                          PEN1_A_L=0;//1;
008D5C  A9CC23     BCLR 0xC23, #6
008D5E  37000B     BRA 0x8D76
8046:                          else
8047:                          PEN1_A_L=1;
008D60  A8CC23     BSET 0xC23, #6
008D62  370009     BRA 0x8D76
8048:                          
8049:                             }
8050:                             else
8051:                             {
8052:                          PEN1_A_H=1;
008D64  A8EC23     BSET 0xC23, #7
8053:                          if (StrongMode)
008D66  8095F5     MOV 0x12BE, W5
008D68  240004     MOV #0x4000, W4
008D6A  628204     AND W5, W4, W4
008D6C  520FE0     SUB W4, #0x0, [W15]
008D6E  320002     BRA Z, 0x8D74
8054:                          PEN1_A_L=1;
008D70  A8CC23     BSET 0xC23, #6
008D72  370001     BRA 0x8D76
8055:                          else
8056:                          PEN1_A_L=0;
008D74  A9CC23     BCLR 0xC23, #6
8057:                             }
8058:                          PEN1_B_H=0;
008D76  A9EC43     BCLR 0xC43, #7
8059:                          PEN1_B_L=0;
008D78  A9CC43     BCLR 0xC43, #6
8060:                          PEN1_C_H=0;
008D7A  A9EC63     BCLR 0xC63, #7
8061:                          PEN1_C_L=0;
008D7C  A9CC63     BCLR 0xC63, #6
8062:                          }
8063:                          if (HiDrv&2)
008D7E  90421E     MOV.B [W14+1], W4
008D80  FB8204     ZE W4, W4
008D82  620262     AND W4, #0x2, W4
008D84  520FE0     SUB W4, #0x0, [W15]
008D86  32001B     BRA Z, 0x8DBE
8064:                          {//B
8065:                          PEN1_A_H=0;
008D88  A9EC23     BCLR 0xC23, #7
8066:                          PEN1_A_L=0;
008D8A  A9CC23     BCLR 0xC23, #6
8067:                             if (BreakPressed)
008D8C  809614     MOV 0x12C2, W4
008D8E  620261     AND W4, #0x1, W4
008D90  520FE0     SUB W4, #0x0, [W15]
008D92  32000A     BRA Z, 0x8DA8
8068:                             {
8069:                          PEN1_B_H=0;
008D94  A9EC43     BCLR 0xC43, #7
8070:                          if (_1stBreak)
008D96  809665     MOV Flgs4, W5
008D98  204004     MOV #0x400, W4
008D9A  628204     AND W5, W4, W4
008D9C  520FE0     SUB W4, #0x0, [W15]
008D9E  320002     BRA Z, 0x8DA4
8071:                          PEN1_B_L=0;//1;
008DA0  A9CC43     BCLR 0xC43, #6
008DA2  37000B     BRA 0x8DBA
8072:                          else
8073:                          PEN1_B_L=1;
008DA4  A8CC43     BSET 0xC43, #6
008DA6  370009     BRA 0x8DBA
8074:              
8075:                          
8076:                             }
8077:                             else
8078:                             {
8079:                          PEN1_B_H=1;
008DA8  A8EC43     BSET 0xC43, #7
8080:                          if (StrongMode)
008DAA  8095F5     MOV 0x12BE, W5
008DAC  240004     MOV #0x4000, W4
008DAE  628204     AND W5, W4, W4
008DB0  520FE0     SUB W4, #0x0, [W15]
008DB2  320002     BRA Z, 0x8DB8
8081:                          PEN1_B_L=1;
008DB4  A8CC43     BSET 0xC43, #6
008DB6  370001     BRA 0x8DBA
8082:                          else
8083:                          PEN1_B_L=0;
008DB8  A9CC43     BCLR 0xC43, #6
8084:              
8085:                             }
8086:                          PEN1_C_H=0;
008DBA  A9EC63     BCLR 0xC63, #7
8087:                          PEN1_C_L=0;
008DBC  A9CC63     BCLR 0xC63, #6
8088:                          }
8089:                          if (HiDrv&4)
008DBE  90421E     MOV.B [W14+1], W4
008DC0  FB8204     ZE W4, W4
008DC2  620264     AND W4, #0x4, W4
008DC4  520FE0     SUB W4, #0x0, [W15]
008DC6  32001B     BRA Z, 0x8DFE
8090:                          {//C
8091:                          PEN1_A_H=0;
008DC8  A9EC23     BCLR 0xC23, #7
8092:                          PEN1_A_L=0;
008DCA  A9CC23     BCLR 0xC23, #6
8093:                          PEN1_B_H=0;
008DCC  A9EC43     BCLR 0xC43, #7
8094:                          PEN1_B_L=0;
008DCE  A9CC43     BCLR 0xC43, #6
8095:                             if (BreakPressed)
008DD0  809614     MOV 0x12C2, W4
008DD2  620261     AND W4, #0x1, W4
008DD4  520FE0     SUB W4, #0x0, [W15]
008DD6  32000A     BRA Z, 0x8DEC
8096:                             {
8097:                          PEN1_C_H=0;
008DD8  A9EC63     BCLR 0xC63, #7
8098:                          if (_1stBreak)
008DDA  809665     MOV Flgs4, W5
008DDC  204004     MOV #0x400, W4
008DDE  628204     AND W5, W4, W4
008DE0  520FE0     SUB W4, #0x0, [W15]
008DE2  320002     BRA Z, 0x8DE8
8099:                          PEN1_C_L=0;//1;
008DE4  A9CC63     BCLR 0xC63, #6
008DE6  37000B     BRA 0x8DFE
8100:                          else
8101:                          PEN1_C_L=1;
008DE8  A8CC63     BSET 0xC63, #6
008DEA  370009     BRA 0x8DFE
8102:                          
8103:                             }
8104:                             else
8105:                             {
8106:                          PEN1_C_H=1;
008DEC  A8EC63     BSET 0xC63, #7
8107:                          if (StrongMode)
008DEE  8095F5     MOV 0x12BE, W5
008DF0  240004     MOV #0x4000, W4
008DF2  628204     AND W5, W4, W4
008DF4  520FE0     SUB W4, #0x0, [W15]
008DF6  320002     BRA Z, 0x8DFC
8108:                          PEN1_C_L=1;
008DF8  A8CC63     BSET 0xC63, #6
008DFA  370001     BRA 0x8DFE
8109:                          else
8110:                          PEN1_C_L=0;
008DFC  A9CC63     BCLR 0xC63, #6
8111:                             }
8112:                          }
8113:                  if (!BreakPressed)
008DFE  809614     MOV 0x12C2, W4
008E00  620261     AND W4, #0x1, W4
008E02  520FE0     SUB W4, #0x0, [W15]
008E04  3A0014     BRA NZ, 0x8E2E
8114:                  {
8115:                      if (LowDrv&1)
008E06  78429E     MOV.B [W14], W5
008E08  FB8205     ZE W5, W4
008E0A  620261     AND W4, #0x1, W4
008E0C  784204     MOV.B W4, W4
008E0E  524FE0     SUB.B W4, #0x0, [W15]
008E10  320001     BRA Z, 0x8E14
8116:                          PWM1_A_L=1;//PEN1_A_L=1;//
008E12  A80E44     BSET LATE, #0
8117:                      if (LowDrv&2)
008E14  78429E     MOV.B [W14], W5
008E16  FB8205     ZE W5, W4
008E18  620262     AND W4, #0x2, W4
008E1A  520FE0     SUB W4, #0x0, [W15]
008E1C  320001     BRA Z, 0x8E20
8118:                          PWM1_B_L=1;//PEN1_B_L=1;//
008E1E  A84E44     BSET LATE, #2
8119:                      if (LowDrv&4)
008E20  78429E     MOV.B [W14], W5
008E22  FB8205     ZE W5, W4
008E24  620264     AND W4, #0x4, W4
008E26  520FE0     SUB W4, #0x0, [W15]
008E28  320032     BRA Z, 0x8E8E
8120:                          PWM1_C_L=1;//PEN1_C_L=1;//
008E2A  A88E44     BSET LATE, #4
008E2C  370030     BRA 0x8E8E
8121:                  }
8122:                  else
8123:                  {
8124:                      if (_1stBreak)
008E2E  809665     MOV Flgs4, W5
008E30  204004     MOV #0x400, W4
008E32  628204     AND W5, W4, W4
008E34  520FE0     SUB W4, #0x0, [W15]
008E36  320014     BRA Z, 0x8E60
8125:                      {
8126:                      if (LowDrv&1)
008E38  78429E     MOV.B [W14], W5
008E3A  FB8205     ZE W5, W4
008E3C  620261     AND W4, #0x1, W4
008E3E  784204     MOV.B W4, W4
008E40  524FE0     SUB.B W4, #0x0, [W15]
008E42  320001     BRA Z, 0x8E46
8127:                          PEN1_A_L=1;//PWM1_A_L=1;//
008E44  A8CC23     BSET 0xC23, #6
8128:                      if (LowDrv&2)
008E46  78429E     MOV.B [W14], W5
008E48  FB8205     ZE W5, W4
008E4A  620262     AND W4, #0x2, W4
008E4C  520FE0     SUB W4, #0x0, [W15]
008E4E  320001     BRA Z, 0x8E52
8129:                          PEN1_B_L=1;//PWM1_B_L=1;//
008E50  A8CC43     BSET 0xC43, #6
8130:                      if (LowDrv&4)
008E52  78429E     MOV.B [W14], W5
008E54  FB8205     ZE W5, W4
008E56  620264     AND W4, #0x4, W4
008E58  520FE0     SUB W4, #0x0, [W15]
008E5A  320019     BRA Z, 0x8E8E
8131:                          PEN1_C_L=1;//PWM1_C_L=1;//
008E5C  A8CC63     BSET 0xC63, #6
008E5E  370017     BRA 0x8E8E
8132:                      }
8133:                      else
8134:                      {
8135:                      if (LowDrv&1)
008E60  78429E     MOV.B [W14], W5
008E62  FB8205     ZE W5, W4
008E64  620261     AND W4, #0x1, W4
008E66  784204     MOV.B W4, W4
008E68  524FE0     SUB.B W4, #0x0, [W15]
008E6A  320001     BRA Z, 0x8E6E
8136:                          PWM1_A_L=1;//PEN1_A_L=1;//
008E6C  A80E44     BSET LATE, #0
8137:                      if (LowDrv&2)
008E6E  78429E     MOV.B [W14], W5
008E70  FB8205     ZE W5, W4
008E72  620262     AND W4, #0x2, W4
008E74  520FE0     SUB W4, #0x0, [W15]
008E76  320001     BRA Z, 0x8E7A
8138:                          PWM1_B_L=1;//PEN1_B_L=1;//
008E78  A84E44     BSET LATE, #2
8139:                      if (LowDrv&4)
008E7A  78429E     MOV.B [W14], W5
008E7C  FB8205     ZE W5, W4
008E7E  620264     AND W4, #0x4, W4
008E80  520FE0     SUB W4, #0x0, [W15]
008E82  320005     BRA Z, 0x8E8E
8140:                          PWM1_C_L=1;//PEN1_C_L=1;//
008E84  A88E44     BSET LATE, #4
008E86  370003     BRA 0x8E8E
8141:                      }
8142:                  }
8143:              
8144:              
8145:              }
008E8E  FA8000     ULNK
008E90  060000     RETURN
8146:              
8147:              
8148:              
8149:              unsigned char ReadSensor1_B(void)
8150:              {
008E92  FA0002     LNK #0x2
8151:              unsigned char    Sens=0;
008E94  EB4200     CLR.B W4
008E96  784F04     MOV.B W4, [W14]
8152:              #if !defined DIRMOTOR
8153:                  if (Hall1_A)
8154:                  {
8155:                      Sens=Sens|1;
8156:                  }
8157:              
8158:                  if (Hall1_B)
8159:                  {
8160:                      Sens=Sens|2;
8161:                  }
8162:              
8163:                  if (Hall1_C)
8164:                  {
8165:                      Sens=Sens|4;
8166:                  }
8167:              #endif
8168:              #if defined DIRMOTOR
8169:                          if (!DirPWM1)
008E98  809754     MOV StatFlgs1, W4
008E9A  620261     AND W4, #0x1, W4
008E9C  520FE0     SUB W4, #0x0, [W15]
008E9E  3A0011     BRA NZ, 0x8EC2
8170:                          {
8171:                  if (Hall1_A)
008EA0  807294     MOV PORTF, W4
008EA2  620268     AND W4, #0x8, W4
008EA4  520FE0     SUB W4, #0x0, [W15]
008EA6  320001     BRA Z, 0x8EAA
8172:                  {
8173:                      Sens=Sens|1;
008EA8  A0041E     BSET.B [W14], #0
8174:                  }
8175:              
8176:                  if (Hall1_B)
008EAA  807294     MOV PORTF, W4
008EAC  620264     AND W4, #0x4, W4
008EAE  520FE0     SUB W4, #0x0, [W15]
008EB0  320001     BRA Z, 0x8EB4
8177:                  {
8178:                      Sens=Sens|2;
008EB2  A0141E     BSET.B [W14], #1
8179:                  }
8180:              
8181:                  if (Hall1_C)
008EB4  807295     MOV PORTF, W5
008EB6  200204     MOV #0x20, W4
008EB8  628204     AND W5, W4, W4
008EBA  520FE0     SUB W4, #0x0, [W15]
008EBC  320012     BRA Z, 0x8EE2
8182:                  {
8183:                      Sens=Sens|4;
008EBE  A0241E     BSET.B [W14], #2
008EC0  370010     BRA 0x8EE2
8184:                  }
8185:              
8186:                          }
8187:                          else
8188:                          {
8189:                  if (!Hall1_A)
008EC2  807294     MOV PORTF, W4
008EC4  620268     AND W4, #0x8, W4
008EC6  520FE0     SUB W4, #0x0, [W15]
008EC8  3A0001     BRA NZ, 0x8ECC
8190:                  {
8191:                      Sens=Sens|1;
008ECA  A0041E     BSET.B [W14], #0
8192:                  }
8193:              
8194:                  if (!Hall1_B)
008ECC  807294     MOV PORTF, W4
008ECE  620264     AND W4, #0x4, W4
008ED0  520FE0     SUB W4, #0x0, [W15]
008ED2  3A0001     BRA NZ, 0x8ED6
8195:                  {
8196:                      Sens=Sens|2;
008ED4  A0141E     BSET.B [W14], #1
8197:                  }
8198:              
8199:                  if (!Hall1_C)
008ED6  807295     MOV PORTF, W5
008ED8  200204     MOV #0x20, W4
008EDA  628204     AND W5, W4, W4
008EDC  520FE0     SUB W4, #0x0, [W15]
008EDE  3A0001     BRA NZ, 0x8EE2
8200:                  {
8201:                      Sens=Sens|4;
008EE0  A0241E     BSET.B [W14], #2
8202:                  }
8203:              
8204:                          }
8205:              #endif
8206:                  if ((Sens==0)||(Sens==7))
008EE2  78421E     MOV.B [W14], W4
008EE4  524FE0     SUB.B W4, #0x0, [W15]
008EE6  320003     BRA Z, 0x8EEE
008EE8  78421E     MOV.B [W14], W4
008EEA  524FE7     SUB.B W4, #0x7, [W15]
008EEC  3A0003     BRA NZ, 0x8EF4
8207:                      HallErrCnt++;
008EEE  81A6A4     MOV HallErrCnt, W4
008EF0  E80204     INC W4, W4
008EF2  89A6A4     MOV W4, HallErrCnt
8208:              
8209:                  Sens=ChangeSensorOrder(Sens,SensOrder1);
008EF4  212494     MOV #0x1249, W4
008EF6  784214     MOV.B [W4], W4
008EF8  784084     MOV.B W4, W1
008EFA  78401E     MOV.B [W14], W0
008EFC  0758DF     RCALL ChangeSensorOrder
008EFE  784200     MOV.B W0, W4
008F00  784F04     MOV.B W4, [W14]
8210:              
8211:              return Sens;
008F02  78421E     MOV.B [W14], W4
8212:              }
008F04  784004     MOV.B W4, W0
008F06  FA8000     ULNK
008F08  060000     RETURN
8213:              unsigned char ReadSensor1_F(void)
8214:              {
008F0A  FA0002     LNK #0x2
8215:              unsigned char    Sens=0;
008F0C  EB4200     CLR.B W4
008F0E  784F04     MOV.B W4, [W14]
8216:              #if !defined DIRMOTOR
8217:                  if (!Hall1_A)
8218:                  {
8219:                      Sens=Sens|1;
8220:                  }
8221:              
8222:                  if (!Hall1_B)
8223:                  {
8224:                      Sens=Sens|2;
8225:                  }
8226:              
8227:                  if (!Hall1_C)
8228:                  {
8229:                      Sens=Sens|4;
8230:                  }
8231:              #endif
8232:              #if defined DIRMOTOR
8233:                          if (!DirPWM1)
008F10  809754     MOV StatFlgs1, W4
008F12  620261     AND W4, #0x1, W4
008F14  520FE0     SUB W4, #0x0, [W15]
008F16  3A0011     BRA NZ, 0x8F3A
8234:                          {
8235:                  if (!Hall1_A)
008F18  807294     MOV PORTF, W4
008F1A  620268     AND W4, #0x8, W4
008F1C  520FE0     SUB W4, #0x0, [W15]
008F1E  3A0001     BRA NZ, 0x8F22
8236:                  {
8237:                      Sens=Sens|1;
008F20  A0041E     BSET.B [W14], #0
8238:                  }
8239:              
8240:                  if (!Hall1_B)
008F22  807294     MOV PORTF, W4
008F24  620264     AND W4, #0x4, W4
008F26  520FE0     SUB W4, #0x0, [W15]
008F28  3A0001     BRA NZ, 0x8F2C
8241:                  {
8242:                      Sens=Sens|2;
008F2A  A0141E     BSET.B [W14], #1
8243:                  }
8244:              
8245:                  if (!Hall1_C)
008F2C  807295     MOV PORTF, W5
008F2E  200204     MOV #0x20, W4
008F30  628204     AND W5, W4, W4
008F32  520FE0     SUB W4, #0x0, [W15]
008F34  3A0012     BRA NZ, 0x8F5A
8246:                  {
8247:                      Sens=Sens|4;
008F36  A0241E     BSET.B [W14], #2
008F38  370010     BRA 0x8F5A
8248:                  }
8249:              
8250:                          }
8251:                          else
8252:                          {
8253:                  if (Hall1_A)
008F3A  807294     MOV PORTF, W4
008F3C  620268     AND W4, #0x8, W4
008F3E  520FE0     SUB W4, #0x0, [W15]
008F40  320001     BRA Z, 0x8F44
8254:                  {
8255:                      Sens=Sens|1;
008F42  A0041E     BSET.B [W14], #0
8256:                  }
8257:              
8258:                  if (Hall1_B)
008F44  807294     MOV PORTF, W4
008F46  620264     AND W4, #0x4, W4
008F48  520FE0     SUB W4, #0x0, [W15]
008F4A  320001     BRA Z, 0x8F4E
8259:                  {
8260:                      Sens=Sens|2;
008F4C  A0141E     BSET.B [W14], #1
8261:                  }
8262:              
8263:                  if (Hall1_C)
008F4E  807295     MOV PORTF, W5
008F50  200204     MOV #0x20, W4
008F52  628204     AND W5, W4, W4
008F54  520FE0     SUB W4, #0x0, [W15]
008F56  320001     BRA Z, 0x8F5A
8264:                  {
8265:                      Sens=Sens|4;
008F58  A0241E     BSET.B [W14], #2
8266:                  }
8267:              
8268:                          }
8269:              #endif
8270:              
8271:              if ((Sens==0)||(Sens==7))
008F5A  78421E     MOV.B [W14], W4
008F5C  524FE0     SUB.B W4, #0x0, [W15]
008F5E  320003     BRA Z, 0x8F66
008F60  78421E     MOV.B [W14], W4
008F62  524FE7     SUB.B W4, #0x7, [W15]
008F64  3A0003     BRA NZ, 0x8F6C
8272:                  HallErrCnt++;
008F66  81A6A4     MOV HallErrCnt, W4
008F68  E80204     INC W4, W4
008F6A  89A6A4     MOV W4, HallErrCnt
8273:              
8274:                  Sens=ChangeSensorOrder(Sens,SensOrder1);
008F6C  212494     MOV #0x1249, W4
008F6E  784214     MOV.B [W4], W4
008F70  784084     MOV.B W4, W1
008F72  78401E     MOV.B [W14], W0
008F74  0758A3     RCALL ChangeSensorOrder
008F76  784200     MOV.B W0, W4
008F78  784F04     MOV.B W4, [W14]
8275:              
8276:              return Sens;
008F7A  78421E     MOV.B [W14], W4
8277:              }
008F7C  784004     MOV.B W4, W0
008F7E  FA8000     ULNK
008F80  060000     RETURN
8278:              
8279:              
8280:              void __attribute__((interrupt, auto_psv)) _CNInterrupt()
8281:              {
008F82  F80036     PUSH RCOUNT
008F84  BE9F80     MOV.D W0, [W15++]
008F86  BE9F82     MOV.D W2, [W15++]
008F88  BE9F84     MOV.D W4, [W15++]
008F8A  BE9F86     MOV.D W6, [W15++]
008F8C  781F88     MOV W8, [W15++]
008F8E  F80032     PUSH DSRPAG
008F90  202000     MOV #0x200, W0
008F92  880190     MOV W0, DSRPAG
008F94  000000     NOP
008F96  FA000C     LNK #0xC
8282:              unsigned long int TmL;
8283:              unsigned int k;
8284:                      IFS1bits.CNIF = 0;
008F98  A96802     BCLR IFS1, #3
8285:              //TST_PIN2=!TST_PIN2;
8286:              
8287:              
8288:                      if ((!Sensorless)||((SensorlessNotBEMF)&&(!SensorlessStartNoHalls)))
008F9A  809755     MOV StatFlgs1, W5
008F9C  200204     MOV #0x20, W4
008F9E  628204     AND W5, W4, W4
008FA0  520FE0     SUB W4, #0x0, [W15]
008FA2  320009     BRA Z, 0x8FB6
008FA4  809654     MOV 0x12CA, W4
008FA6  620270     AND W4, #0x10, W4
008FA8  520FE0     SUB W4, #0x0, [W15]
008FAA  320425     BRA Z, 0x97F6
008FAC  8096B5     MOV 0x12D6, W5
008FAE  240004     MOV #0x4000, W4
008FB0  628204     AND W5, W4, W4
008FB2  520FE0     SUB W4, #0x0, [W15]
008FB4  3A0420     BRA NZ, 0x97F6
8289:                      {
8290:              
8291:              
8292:                      if ((!Vector)||(BreakPressed))
008FB6  809684     MOV Flgs5, W4
008FB8  620270     AND W4, #0x10, W4
008FBA  520FE0     SUB W4, #0x0, [W15]
008FBC  320004     BRA Z, 0x8FC6
008FBE  809614     MOV 0x12C2, W4
008FC0  620261     AND W4, #0x1, W4
008FC2  520FE0     SUB W4, #0x0, [W15]
008FC4  32000F     BRA Z, 0x8FE4
8293:                      {
8294:                      if (Forward1)
008FC6  8095E5     MOV Flgs, W5
008FC8  200404     MOV #0x40, W4
008FCA  628204     AND W5, W4, W4
008FCC  520FE0     SUB W4, #0x0, [W15]
008FCE  320005     BRA Z, 0x8FDA
008FD8  370028     BRA 0x902A
008FE2  370023     BRA 0x902A
8295:                      Sensor1=ReadSensor1_F();
008FD0  07FF9C     RCALL ReadSensor1_F
008FD2  784200     MOV.B W0, W4
008FD4  212465     MOV #0x1246, W5
008FD6  784A84     MOV.B W4, [W5]
8296:                      else
8297:                      Sensor1=ReadSensor1_B();
008FDA  07FF5B     RCALL ReadSensor1_B
008FDC  784200     MOV.B W0, W4
008FDE  212465     MOV #0x1246, W5
008FE0  784A84     MOV.B W4, [W5]
8298:              
8299:               
8300:                      }
8301:                      else
8302:                      {
8303:                            IEC3bits.T8IE = 0;
008FE4  A96826     BCLR IEC3, #3
8304:                          if (!DirPWM1)
008FE6  809754     MOV StatFlgs1, W4
008FE8  620261     AND W4, #0x1, W4
008FEA  520FE0     SUB W4, #0x0, [W15]
008FEC  3A000F     BRA NZ, 0x900C
8305:                          {
8306:                      if (Forward1)
008FEE  8095E5     MOV Flgs, W5
008FF0  200404     MOV #0x40, W4
008FF2  628204     AND W5, W4, W4
008FF4  520FE0     SUB W4, #0x0, [W15]
008FF6  320005     BRA Z, 0x9002
8307:                      Sensor1=ReadSensor1_F_V();
008FF8  077017     RCALL ReadSensor1_F_V
008FFA  784200     MOV.B W0, W4
008FFC  212465     MOV #0x1246, W5
008FFE  784A84     MOV.B W4, [W5]
009000  370013     BRA 0x9028
8308:                      else
8309:                      Sensor1=ReadSensor1_B_V();
009002  076FEB     RCALL ReadSensor1_B_V
009004  784200     MOV.B W0, W4
009006  212465     MOV #0x1246, W5
009008  784A84     MOV.B W4, [W5]
00900A  37000E     BRA 0x9028
8310:                          }
8311:                          else
8312:                          {
8313:                      if (Forward1)
00900C  8095E5     MOV Flgs, W5
00900E  200404     MOV #0x40, W4
009010  628204     AND W5, W4, W4
009012  520FE0     SUB W4, #0x0, [W15]
009014  320005     BRA Z, 0x9020
8314:                      Sensor1=ReadSensor1_B_V();
009016  076FE1     RCALL ReadSensor1_B_V
009018  784200     MOV.B W0, W4
00901A  212465     MOV #0x1246, W5
00901C  784A84     MOV.B W4, [W5]
00901E  370004     BRA 0x9028
8315:                      else
8316:                      Sensor1=ReadSensor1_F_V();
009020  077003     RCALL ReadSensor1_F_V
009022  784200     MOV.B W0, W4
009024  212465     MOV #0x1246, W5
009026  784A84     MOV.B W4, [W5]
8317:                          }
8318:              
8319:                       
8320:                      IEC3bits.T8IE = 1;
009028  A86826     BSET IEC3, #3
8321:              
8322:              
8323:                      }
8324:              
8325:                      if ((Sensor1_Prev!=Sensor1))//&&(CanSensor1))
00902A  212474     MOV #0x1247, W4
00902C  784294     MOV.B [W4], W5
00902E  212464     MOV #0x1246, W4
009030  784214     MOV.B [W4], W4
009032  52CF84     SUB.B W5, W4, [W15]
009034  3203E0     BRA Z, 0x97F6
8326:                      {
8327:                          if ((NearSensors[Sensor1][0]==Sensor1_Prev)||(NearSensors[Sensor1][1]==Sensor1_Prev))
009036  212464     MOV #0x1246, W4
009038  784214     MOV.B [W4], W4
00903A  FB8204     ZE W4, W4
00903C  DD2242     SL W4, #2, W4
00903E  2371C5     MOV #0x371C, W5
009040  428204     ADD W5, W4, W4
009042  784214     MOV.B [W4], W4
009044  FB0284     SE W4, W5
009046  212474     MOV #0x1247, W4
009048  784214     MOV.B [W4], W4
00904A  FB8204     ZE W4, W4
00904C  528F84     SUB W5, W4, [W15]
00904E  32000E     BRA Z, 0x906C
009050  212464     MOV #0x1246, W4
009052  784214     MOV.B [W4], W4
009054  FB8204     ZE W4, W4
009056  DD2242     SL W4, #2, W4
009058  E80204     INC W4, W4
00905A  2371C5     MOV #0x371C, W5
00905C  428204     ADD W5, W4, W4
00905E  784214     MOV.B [W4], W4
009060  FB0284     SE W4, W5
009062  212474     MOV #0x1247, W4
009064  784214     MOV.B [W4], W4
009066  FB8204     ZE W4, W4
009068  528F84     SUB W5, W4, [W15]
00906A  3A0023     BRA NZ, 0x90B2
8328:                          {
8329:                          Odometr++;
00906C  818384     MOV Odometr, W4
00906E  818395     MOV 0x3072, W5
009070  420261     ADD W4, #0x1, W4
009072  4A82E0     ADDC W5, #0x0, W5
009074  898384     MOV W4, Odometr
009076  898395     MOV W5, 0x3072
8330:                          Distance++;
009078  81B8A4     MOV Distance, W4
00907A  81B8B5     MOV 0x3716, W5
00907C  420261     ADD W4, #0x1, W4
00907E  4A82E0     ADDC W5, #0x0, W5
009080  89B8A4     MOV W4, Distance
009082  89B8B5     MOV W5, 0x3716
8331:                          Odometr10m++;
009084  8183F4     MOV Odometr10m, W4
009086  E80204     INC W4, W4
009088  8983F4     MOV W4, Odometr10m
8332:                          if (Odometr10m>=ImpNa10Metr)
00908A  8183F4     MOV Odometr10m, W4
00908C  200005     MOV #0x0, W5
00908E  BE0004     MOV.D W4, W0
009090  022582     CALL ___floatunsisf
009092  000000     NOP
009094  BE0200     MOV.D W0, W4
009096  B3C018     MOV.B #0x1, W8
009098  245712     MOV #0x4571, W2
00909A  244893     MOV #0x4489, W3
00909C  BE0004     MOV.D W4, W0
00909E  022500     CALL ___gtsf2
0090A0  000000     NOP
0090A2  780200     MOV W0, W4
0090A4  520FE0     SUB W4, #0x0, [W15]
0090A6  3D0001     BRA GE, 0x90AA
0090A8  EB4400     CLR.B W8
0090AA  544FE0     SUB.B W8, #0x0, [W15]
0090AC  320002     BRA Z, 0x90B2
8333:                          {
8334:                          Odometr10m=0;
0090AE  EB0200     CLR W4
0090B0  8983F4     MOV W4, Odometr10m
8335:                          //RecOdometrFl=1;
8336:                          }
8337:              
8338:                          }
8339:              
8340:              
8341:                          Sensor1_Prev=Sensor1;
0090B2  212464     MOV #0x1246, W4
0090B4  784214     MOV.B [W4], W4
0090B6  212475     MOV #0x1247, W5
0090B8  784A84     MOV.B W4, [W5]
8342:              
8343:              
8344:                                  if (HallDelay1_F_UP)
0090BA  809675     MOV 0x12CE, W5
0090BC  200404     MOV #0x40, W4
0090BE  628204     AND W5, W4, W4
0090C0  520FE0     SUB W4, #0x0, [W15]
0090C2  320013     BRA Z, 0x90EA
8345:                                  {
8346:                          if (HallDelay1_F<HallDelay1_FMustBe)
0090C4  2425A4     MOV #0x425A, W4
0090C6  784294     MOV.B [W4], W5
0090C8  2110E4     MOV #0x110E, W4
0090CA  784214     MOV.B [W4], W4
0090CC  52CF84     SUB.B W5, W4, [W15]
0090CE  3D0008     BRA GE, 0x90E0
8347:                              HallDelay1_F=HallDelay1_F++;
0090D0  2425A4     MOV #0x425A, W4
0090D2  784214     MOV.B [W4], W4
0090D4  2425A5     MOV #0x425A, W5
0090D6  784A84     MOV.B W4, [W5]
0090D8  E84204     INC.B W4, W4
0090DA  2425A5     MOV #0x425A, W5
0090DC  784A84     MOV.B W4, [W5]
0090DE  370017     BRA 0x910E
8348:                          else
8349:                              HallDelay1_F=HallDelay1_FMustBe;
0090E0  2110E4     MOV #0x110E, W4
0090E2  784214     MOV.B [W4], W4
0090E4  2425A5     MOV #0x425A, W5
0090E6  784A84     MOV.B W4, [W5]
0090E8  370012     BRA 0x910E
8350:                                  }
8351:                                  else
8352:                                  {
8353:                          if (HallDelay1_F>HallDelay1_FMustBe)
0090EA  2425A4     MOV #0x425A, W4
0090EC  784294     MOV.B [W4], W5
0090EE  2110E4     MOV #0x110E, W4
0090F0  784214     MOV.B [W4], W4
0090F2  52CF84     SUB.B W5, W4, [W15]
0090F4  340008     BRA LE, 0x9106
8354:                              HallDelay1_F=HallDelay1_F--;
0090F6  2425A4     MOV #0x425A, W4
0090F8  784214     MOV.B [W4], W4
0090FA  2425A5     MOV #0x425A, W5
0090FC  784A84     MOV.B W4, [W5]
0090FE  E94204     DEC.B W4, W4
009100  2425A5     MOV #0x425A, W5
009102  784A84     MOV.B W4, [W5]
009104  370004     BRA 0x910E
8355:                          else
8356:                              HallDelay1_F=HallDelay1_FMustBe;
009106  2110E4     MOV #0x110E, W4
009108  784214     MOV.B [W4], W4
00910A  2425A5     MOV #0x425A, W5
00910C  784A84     MOV.B W4, [W5]
8357:                                  }
8358:              
8359:              
8360:                                  if (HallDelay1_B_UP)
00910E  809675     MOV 0x12CE, W5
009110  200804     MOV #0x80, W4
009112  628204     AND W5, W4, W4
009114  520FE0     SUB W4, #0x0, [W15]
009116  320013     BRA Z, 0x913E
8361:                                  {
8362:                          if (HallDelay1_B<HallDelay1_BMustBe)
009118  2425B4     MOV #0x425B, W4
00911A  784294     MOV.B [W4], W5
00911C  2110F4     MOV #0x110F, W4
00911E  784214     MOV.B [W4], W4
009120  52CF84     SUB.B W5, W4, [W15]
009122  3D0008     BRA GE, 0x9134
8363:                              HallDelay1_B=HallDelay1_B++;
009124  2425B4     MOV #0x425B, W4
009126  784214     MOV.B [W4], W4
009128  2425B5     MOV #0x425B, W5
00912A  784A84     MOV.B W4, [W5]
00912C  E84204     INC.B W4, W4
00912E  2425B5     MOV #0x425B, W5
009130  784A84     MOV.B W4, [W5]
009132  370017     BRA 0x9162
8364:                          else
8365:                              HallDelay1_B=HallDelay1_BMustBe;
009134  2110F4     MOV #0x110F, W4
009136  784214     MOV.B [W4], W4
009138  2425B5     MOV #0x425B, W5
00913A  784A84     MOV.B W4, [W5]
00913C  370012     BRA 0x9162
8366:                                  }
8367:                                  else
8368:                                  {
8369:                          if (HallDelay1_B>HallDelay1_BMustBe)
00913E  2425B4     MOV #0x425B, W4
009140  784294     MOV.B [W4], W5
009142  2110F4     MOV #0x110F, W4
009144  784214     MOV.B [W4], W4
009146  52CF84     SUB.B W5, W4, [W15]
009148  340008     BRA LE, 0x915A
8370:                              HallDelay1_B=HallDelay1_B--;
00914A  2425B4     MOV #0x425B, W4
00914C  784214     MOV.B [W4], W4
00914E  2425B5     MOV #0x425B, W5
009150  784A84     MOV.B W4, [W5]
009152  E94204     DEC.B W4, W4
009154  2425B5     MOV #0x425B, W5
009156  784A84     MOV.B W4, [W5]
009158  370004     BRA 0x9162
8371:                          else
8372:                              HallDelay1_B=HallDelay1_BMustBe;
00915A  2110F4     MOV #0x110F, W4
00915C  784214     MOV.B [W4], W4
00915E  2425B5     MOV #0x425B, W5
009160  784A84     MOV.B W4, [W5]
8373:                                  }
8374:              
8375:              
8376:              
8377:                          if ((Vector)&&(!BreakPressed))
009162  809684     MOV Flgs5, W4
009164  620270     AND W4, #0x10, W4
009166  520FE0     SUB W4, #0x0, [W15]
009168  320317     BRA Z, 0x9798
00916A  809614     MOV 0x12C2, W4
00916C  620261     AND W4, #0x1, W4
00916E  520FE0     SUB W4, #0x0, [W15]
009170  3A0313     BRA NZ, 0x9798
8378:                          {
8379:              #ifdef HALFTABLE
8380:                     //    if (Theta1Cnt>10)
8381:              #else
8382:                     //    if ((Theta1Cnt>3)||(T45Over))
8383:              #endif
8384:                          {
8385:              
8386:                                  TmL=TMR4;
009172  8008A4     MOV TMR4, W4
009174  200005     MOV #0x0, W5
009176  980714     MOV W4, [W14+2]
009178  980725     MOV W5, [W14+4]
8387:                                  Phase1Period1=TMR5HLD;
00917A  8008B4     MOV TMR5HLD, W4
00917C  200005     MOV #0x0, W5
00917E  888894     MOV W4, Phase1Period1
009180  8888A5     MOV W5, 0x1114
8388:                                  Phase1Period1=(Phase1Period1<<16)+TmL;
009182  808894     MOV Phase1Period1, W4
009184  8088A5     MOV 0x1114, W5
009186  DD22C0     SL W4, #0, W5
009188  200004     MOV #0x0, W4
00918A  BE0304     MOV.D W4, W6
00918C  90021E     MOV [W14+2], W4
00918E  9002AE     MOV [W14+4], W5
009190  420206     ADD W4, W6, W4
009192  4A8287     ADDC W5, W7, W5
009194  888894     MOV W4, Phase1Period1
009196  8888A5     MOV W5, 0x1114
8389:              
8390:                                  TMR5HLD=0;
009198  EB0200     CLR W4
00919A  8808B4     MOV W4, TMR5HLD
8391:                                  TMR4=0;
00919C  EB0200     CLR W4
00919E  8808A4     MOV W4, TMR4
8392:                                  TMR5=0;
0091A0  EB0200     CLR W4
0091A2  8808C4     MOV W4, TMR5
8393:              
8394:                                  switch (Sensor1_Prev)
0091A4  212474     MOV #0x1247, W4
0091A6  784214     MOV.B [W4], W4
0091A8  FB8204     ZE W4, W4
0091AA  B92361     MUL.SU W4, #1, W6
0091AC  EB8200     SETM W4
0091AE  EB8280     SETM W5
0091B0  420206     ADD W4, W6, W4
0091B2  4A8287     ADDC W5, W7, W5
0091B4  200056     MOV #0x5, W6
0091B6  200007     MOV #0x0, W7
0091B8  520F86     SUB W4, W6, [W15]
0091BA  5A8F87     SUBB W5, W7, [W15]
0091BC  3E0025     BRA GTU, 0x9208
0091BE  010604     BRA W4
0091C0  370005     BRA 0x91CC
0091C2  370009     BRA 0x91D6
0091C4  37000D     BRA 0x91E0
0091C6  370011     BRA 0x91EA
0091C8  370015     BRA 0x91F4
0091CA  370019     BRA 0x91FE
8395:                                  {
8396:                                      case 1:
8397:                                          PhP1=Phase1Period1;
0091CC  808894     MOV Phase1Period1, W4
0091CE  8088A5     MOV 0x1114, W5
0091D0  889154     MOV W4, PhP1
0091D2  889165     MOV W5, 0x122C
8398:                                          break;
0091D4  370019     BRA 0x9208
8399:                                      case 2:
8400:                                          PhP2=Phase1Period1;
0091D6  808894     MOV Phase1Period1, W4
0091D8  8088A5     MOV 0x1114, W5
0091DA  889174     MOV W4, PhP2
0091DC  889185     MOV W5, 0x1230
8401:                                          break;
0091DE  370014     BRA 0x9208
8402:                                      case 3:
8403:                                          PhP3=Phase1Period1;
0091E0  808894     MOV Phase1Period1, W4
0091E2  8088A5     MOV 0x1114, W5
0091E4  889194     MOV W4, PhP3
0091E6  8891A5     MOV W5, 0x1234
8404:                                          break;
0091E8  37000F     BRA 0x9208
8405:                                      case 4:
8406:                                          PhP4=Phase1Period1;
0091EA  808894     MOV Phase1Period1, W4
0091EC  8088A5     MOV 0x1114, W5
0091EE  8891B4     MOV W4, PhP4
0091F0  8891C5     MOV W5, 0x1238
8407:                                          break;
0091F2  37000A     BRA 0x9208
8408:                                      case 5:
8409:                                          PhP5=Phase1Period1;
0091F4  808894     MOV Phase1Period1, W4
0091F6  8088A5     MOV 0x1114, W5
0091F8  8891D4     MOV W4, PhP5
0091FA  8891E5     MOV W5, 0x123C
8410:                                          break;
0091FC  370005     BRA 0x9208
8411:                                      case 6:
8412:                                          PhP6=Phase1Period1;
0091FE  808894     MOV Phase1Period1, W4
009200  8088A5     MOV 0x1114, W5
009202  8891F4     MOV W4, PhP6
009204  889205     MOV W5, 0x1240
8413:                                          break;
009206  000000     NOP
8414:                                  }
8415:              
8416:              
8417:                                  if (CalibrateHalls)
009208  8096B5     MOV 0x12D6, W5
00920A  210004     MOV #0x1000, W4
00920C  628204     AND W5, W4, W4
00920E  520FE0     SUB W4, #0x0, [W15]
009210  320172     BRA Z, 0x94F6
8418:                                  {
8419:              
8420:                                      switch (NextHallClbr)
009212  214544     MOV #0x1454, W4
009214  784214     MOV.B [W4], W4
009216  FB8204     ZE W4, W4
009218  B92361     MUL.SU W4, #1, W6
00921A  EB8200     SETM W4
00921C  EB8280     SETM W5
00921E  420206     ADD W4, W6, W4
009220  4A8287     ADDC W5, W7, W5
009222  200056     MOV #0x5, W6
009224  200007     MOV #0x0, W7
009226  520F86     SUB W4, W6, [W15]
009228  5A8F87     SUBB W5, W7, [W15]
00922A  3E0165     BRA GTU, 0x94F6
00922C  010604     BRA W4
00922E  370005     BRA 0x923A
009230  37003A     BRA 0x92A6
009232  37006F     BRA 0x9312
009234  3700A4     BRA 0x937E
009236  3700D9     BRA 0x93EA
009238  37010E     BRA 0x9456
8421:                                      {
8422:                                          case 1:
8423:                                              if (Sensor1_Prev==1)
00923A  212474     MOV #0x1247, W4
00923C  784214     MOV.B [W4], W4
00923E  524FE1     SUB.B W4, #0x1, [W15]
009240  3A0143     BRA NZ, 0x94C8
8424:                                              {
8425:                                      CalibrHallsMass[CntCalibrHalls]=Phase1Period1;
009242  214554     MOV #0x1455, W4
009244  784214     MOV.B [W4], W4
009246  FB8304     ZE W4, W6
009248  808894     MOV Phase1Period1, W4
00924A  8088A5     MOV 0x1114, W5
00924C  DD33C2     SL W6, #2, W7
00924E  23EBC6     MOV #0x3EBC, W6
009250  438306     ADD W7, W6, W6
009252  BE8B04     MOV.D W4, [W6]
8426:                                      CntCalibrHalls++;
009254  214554     MOV #0x1455, W4
009256  784214     MOV.B [W4], W4
009258  E84204     INC.B W4, W4
00925A  214555     MOV #0x1455, W5
00925C  784A84     MOV.B W4, [W5]
8427:                                      if (CntCalibrHalls>=CntCalibrHallsMAX)
00925E  214554     MOV #0x1455, W4
009260  784294     MOV.B [W4], W5
009262  B3C3F4     MOV.B #0x3F, W4
009264  52CF84     SUB.B W5, W4, [W15]
009266  360132     BRA LEU, 0x94CC
8428:                                      {
8429:                                          CntCalibrHalls=0;
009268  214555     MOV #0x1455, W5
00926A  EB4200     CLR.B W4
00926C  784A84     MOV.B W4, [W5]
8430:                                          NextHallClbr++;
00926E  214544     MOV #0x1454, W4
009270  784214     MOV.B [W4], W4
009272  E84204     INC.B W4, W4
009274  214545     MOV #0x1454, W5
009276  784A84     MOV.B W4, [W5]
8431:                                          Hall1ClrbRes=0;
009278  B82260     MUL.UU W4, #0, W4
00927A  89FDE4     MOV W4, Hall1ClrbRes
00927C  89FDF5     MOV W5, 0x3FBE
8432:                                          for (k=0;k<CntCalibrHallsMAX;k++)
00927E  EB0200     CLR W4
009280  780F04     MOV W4, [W14]
009282  37000C     BRA 0x929C
00929A  E80F1E     INC [W14], [W14]
00929C  2003F4     MOV #0x3F, W4
00929E  78029E     MOV [W14], W5
0092A0  528F84     SUB W5, W4, [W15]
0092A2  36FFF0     BRA LEU, 0x9284
8433:                                          Hall1ClrbRes=Hall1ClrbRes+CalibrHallsMass[k];
009284  78021E     MOV [W14], W4
009286  DD22C2     SL W4, #2, W5
009288  23EBC4     MOV #0x3EBC, W4
00928A  428204     ADD W5, W4, W4
00928C  BE0314     MOV.D [W4], W6
00928E  81FDE4     MOV Hall1ClrbRes, W4
009290  81FDF5     MOV 0x3FBE, W5
009292  420206     ADD W4, W6, W4
009294  4A8287     ADDC W5, W7, W5
009296  89FDE4     MOV W4, Hall1ClrbRes
009298  89FDF5     MOV W5, 0x3FBE
8434:                                      }
8435:                                              }
8436:                                          break;
0092A4  370128     BRA 0x94F6
0094C8  000000     NOP
0094CA  370015     BRA 0x94F6
0094CC  000000     NOP
0094CE  370013     BRA 0x94F6
8437:                                      
8438:                                          case 2:
8439:                                              if (Sensor1_Prev==2)
0092A6  212474     MOV #0x1247, W4
0092A8  784214     MOV.B [W4], W4
0092AA  524FE2     SUB.B W4, #0x2, [W15]
0092AC  3A0111     BRA NZ, 0x94D0
8440:                                              {
8441:                                      CalibrHallsMass[CntCalibrHalls]=Phase1Period1;
0092AE  214554     MOV #0x1455, W4
0092B0  784214     MOV.B [W4], W4
0092B2  FB8304     ZE W4, W6
0092B4  808894     MOV Phase1Period1, W4
0092B6  8088A5     MOV 0x1114, W5
0092B8  DD33C2     SL W6, #2, W7
0092BA  23EBC6     MOV #0x3EBC, W6
0092BC  438306     ADD W7, W6, W6
0092BE  BE8B04     MOV.D W4, [W6]
8442:                                      CntCalibrHalls++;
0092C0  214554     MOV #0x1455, W4
0092C2  784214     MOV.B [W4], W4
0092C4  E84204     INC.B W4, W4
0092C6  214555     MOV #0x1455, W5
0092C8  784A84     MOV.B W4, [W5]
8443:                                      if (CntCalibrHalls>=CntCalibrHallsMAX)
0092CA  214554     MOV #0x1455, W4
0092CC  784294     MOV.B [W4], W5
0092CE  B3C3F4     MOV.B #0x3F, W4
0092D0  52CF84     SUB.B W5, W4, [W15]
0092D2  360100     BRA LEU, 0x94D4
8444:                                      {
8445:                                          CntCalibrHalls=0;
0092D4  214555     MOV #0x1455, W5
0092D6  EB4200     CLR.B W4
0092D8  784A84     MOV.B W4, [W5]
8446:                                          NextHallClbr++;
0092DA  214544     MOV #0x1454, W4
0092DC  784214     MOV.B [W4], W4
0092DE  E84204     INC.B W4, W4
0092E0  214545     MOV #0x1454, W5
0092E2  784A84     MOV.B W4, [W5]
8447:                                          Hall2ClrbRes=0;
0092E4  B82260     MUL.UU W4, #0, W4
0092E6  89FE04     MOV W4, Hall2ClrbRes
0092E8  89FE15     MOV W5, 0x3FC2
8448:                                          for (k=0;k<CntCalibrHallsMAX;k++)
0092EA  EB0200     CLR W4
0092EC  780F04     MOV W4, [W14]
0092EE  37000C     BRA 0x9308
009306  E80F1E     INC [W14], [W14]
009308  2003F4     MOV #0x3F, W4
00930A  78029E     MOV [W14], W5
00930C  528F84     SUB W5, W4, [W15]
00930E  36FFF0     BRA LEU, 0x92F0
8449:                                          Hall2ClrbRes=Hall2ClrbRes+CalibrHallsMass[k];
0092F0  78021E     MOV [W14], W4
0092F2  DD22C2     SL W4, #2, W5
0092F4  23EBC4     MOV #0x3EBC, W4
0092F6  428204     ADD W5, W4, W4
0092F8  BE0314     MOV.D [W4], W6
0092FA  81FE04     MOV Hall2ClrbRes, W4
0092FC  81FE15     MOV 0x3FC2, W5
0092FE  420206     ADD W4, W6, W4
009300  4A8287     ADDC W5, W7, W5
009302  89FE04     MOV W4, Hall2ClrbRes
009304  89FE15     MOV W5, 0x3FC2
8450:                                      }
8451:                                              }
8452:                                          break;
009310  3700F2     BRA 0x94F6
0094D0  000000     NOP
0094D2  370011     BRA 0x94F6
0094D4  000000     NOP
0094D6  37000F     BRA 0x94F6
8453:                                          case 3:
8454:                                              if (Sensor1_Prev==3)
009312  212474     MOV #0x1247, W4
009314  784214     MOV.B [W4], W4
009316  524FE3     SUB.B W4, #0x3, [W15]
009318  3A00DF     BRA NZ, 0x94D8
8455:                                              {
8456:                                      CalibrHallsMass[CntCalibrHalls]=Phase1Period1;
00931A  214554     MOV #0x1455, W4
00931C  784214     MOV.B [W4], W4
00931E  FB8304     ZE W4, W6
009320  808894     MOV Phase1Period1, W4
009322  8088A5     MOV 0x1114, W5
009324  DD33C2     SL W6, #2, W7
009326  23EBC6     MOV #0x3EBC, W6
009328  438306     ADD W7, W6, W6
00932A  BE8B04     MOV.D W4, [W6]
8457:                                      CntCalibrHalls++;
00932C  214554     MOV #0x1455, W4
00932E  784214     MOV.B [W4], W4
009330  E84204     INC.B W4, W4
009332  214555     MOV #0x1455, W5
009334  784A84     MOV.B W4, [W5]
8458:                                      if (CntCalibrHalls>=CntCalibrHallsMAX)
009336  214554     MOV #0x1455, W4
009338  784294     MOV.B [W4], W5
00933A  B3C3F4     MOV.B #0x3F, W4
00933C  52CF84     SUB.B W5, W4, [W15]
00933E  3600CE     BRA LEU, 0x94DC
8459:                                      {
8460:                                          CntCalibrHalls=0;
009340  214555     MOV #0x1455, W5
009342  EB4200     CLR.B W4
009344  784A84     MOV.B W4, [W5]
8461:                                          NextHallClbr++;
009346  214544     MOV #0x1454, W4
009348  784214     MOV.B [W4], W4
00934A  E84204     INC.B W4, W4
00934C  214545     MOV #0x1454, W5
00934E  784A84     MOV.B W4, [W5]
8462:                                          Hall3ClrbRes=0;
009350  B82260     MUL.UU W4, #0, W4
009352  89FE24     MOV W4, Hall3ClrbRes
009354  89FE35     MOV W5, 0x3FC6
8463:                                          for (k=0;k<CntCalibrHallsMAX;k++)
009356  EB0200     CLR W4
009358  780F04     MOV W4, [W14]
00935A  37000C     BRA 0x9374
009372  E80F1E     INC [W14], [W14]
009374  2003F4     MOV #0x3F, W4
009376  78029E     MOV [W14], W5
009378  528F84     SUB W5, W4, [W15]
00937A  36FFF0     BRA LEU, 0x935C
8464:                                          Hall3ClrbRes=Hall3ClrbRes+CalibrHallsMass[k];
00935C  78021E     MOV [W14], W4
00935E  DD22C2     SL W4, #2, W5
009360  23EBC4     MOV #0x3EBC, W4
009362  428204     ADD W5, W4, W4
009364  BE0314     MOV.D [W4], W6
009366  81FE24     MOV Hall3ClrbRes, W4
009368  81FE35     MOV 0x3FC6, W5
00936A  420206     ADD W4, W6, W4
00936C  4A8287     ADDC W5, W7, W5
00936E  89FE24     MOV W4, Hall3ClrbRes
009370  89FE35     MOV W5, 0x3FC6
8465:                                      }
8466:                                              }
8467:                                          break;
00937C  3700BC     BRA 0x94F6
0094D8  000000     NOP
0094DA  37000D     BRA 0x94F6
0094DC  000000     NOP
0094DE  37000B     BRA 0x94F6
8468:                                          case 4:
8469:                                              if (Sensor1_Prev==4)
00937E  212474     MOV #0x1247, W4
009380  784214     MOV.B [W4], W4
009382  524FE4     SUB.B W4, #0x4, [W15]
009384  3A00AD     BRA NZ, 0x94E0
8470:                                              {
8471:                                      CalibrHallsMass[CntCalibrHalls]=Phase1Period1;
009386  214554     MOV #0x1455, W4
009388  784214     MOV.B [W4], W4
00938A  FB8304     ZE W4, W6
00938C  808894     MOV Phase1Period1, W4
00938E  8088A5     MOV 0x1114, W5
009390  DD33C2     SL W6, #2, W7
009392  23EBC6     MOV #0x3EBC, W6
009394  438306     ADD W7, W6, W6
009396  BE8B04     MOV.D W4, [W6]
8472:                                      CntCalibrHalls++;
009398  214554     MOV #0x1455, W4
00939A  784214     MOV.B [W4], W4
00939C  E84204     INC.B W4, W4
00939E  214555     MOV #0x1455, W5
0093A0  784A84     MOV.B W4, [W5]
8473:                                      if (CntCalibrHalls>=CntCalibrHallsMAX)
0093A2  214554     MOV #0x1455, W4
0093A4  784294     MOV.B [W4], W5
0093A6  B3C3F4     MOV.B #0x3F, W4
0093A8  52CF84     SUB.B W5, W4, [W15]
0093AA  36009C     BRA LEU, 0x94E4
8474:                                      {
8475:                                          CntCalibrHalls=0;
0093AC  214555     MOV #0x1455, W5
0093AE  EB4200     CLR.B W4
0093B0  784A84     MOV.B W4, [W5]
8476:                                          NextHallClbr++;
0093B2  214544     MOV #0x1454, W4
0093B4  784214     MOV.B [W4], W4
0093B6  E84204     INC.B W4, W4
0093B8  214545     MOV #0x1454, W5
0093BA  784A84     MOV.B W4, [W5]
8477:                                          Hall4ClrbRes=0;
0093BC  B82260     MUL.UU W4, #0, W4
0093BE  89FE44     MOV W4, Hall4ClrbRes
0093C0  89FE55     MOV W5, 0x3FCA
8478:                                          for (k=0;k<CntCalibrHallsMAX;k++)
0093C2  EB0200     CLR W4
0093C4  780F04     MOV W4, [W14]
0093C6  37000C     BRA 0x93E0
0093DE  E80F1E     INC [W14], [W14]
0093E0  2003F4     MOV #0x3F, W4
0093E2  78029E     MOV [W14], W5
0093E4  528F84     SUB W5, W4, [W15]
0093E6  36FFF0     BRA LEU, 0x93C8
8479:                                          Hall4ClrbRes=Hall4ClrbRes+CalibrHallsMass[k];
0093C8  78021E     MOV [W14], W4
0093CA  DD22C2     SL W4, #2, W5
0093CC  23EBC4     MOV #0x3EBC, W4
0093CE  428204     ADD W5, W4, W4
0093D0  BE0314     MOV.D [W4], W6
0093D2  81FE44     MOV Hall4ClrbRes, W4
0093D4  81FE55     MOV 0x3FCA, W5
0093D6  420206     ADD W4, W6, W4
0093D8  4A8287     ADDC W5, W7, W5
0093DA  89FE44     MOV W4, Hall4ClrbRes
0093DC  89FE55     MOV W5, 0x3FCA
8480:                                      }
8481:                                              }
8482:                                          break;
0093E8  370086     BRA 0x94F6
0094E0  000000     NOP
0094E2  370009     BRA 0x94F6
0094E4  000000     NOP
0094E6  370007     BRA 0x94F6
8483:                                          case 5:
8484:                                              if (Sensor1_Prev==5)
0093EA  212474     MOV #0x1247, W4
0093EC  784214     MOV.B [W4], W4
0093EE  524FE5     SUB.B W4, #0x5, [W15]
0093F0  3A007B     BRA NZ, 0x94E8
8485:                                              {
8486:                                      CalibrHallsMass[CntCalibrHalls]=Phase1Period1;
0093F2  214554     MOV #0x1455, W4
0093F4  784214     MOV.B [W4], W4
0093F6  FB8304     ZE W4, W6
0093F8  808894     MOV Phase1Period1, W4
0093FA  8088A5     MOV 0x1114, W5
0093FC  DD33C2     SL W6, #2, W7
0093FE  23EBC6     MOV #0x3EBC, W6
009400  438306     ADD W7, W6, W6
009402  BE8B04     MOV.D W4, [W6]
8487:                                      CntCalibrHalls++;
009404  214554     MOV #0x1455, W4
009406  784214     MOV.B [W4], W4
009408  E84204     INC.B W4, W4
00940A  214555     MOV #0x1455, W5
00940C  784A84     MOV.B W4, [W5]
8488:                                      if (CntCalibrHalls>=CntCalibrHallsMAX)
00940E  214554     MOV #0x1455, W4
009410  784294     MOV.B [W4], W5
009412  B3C3F4     MOV.B #0x3F, W4
009414  52CF84     SUB.B W5, W4, [W15]
009416  36006A     BRA LEU, 0x94EC
8489:                                      {
8490:                                          CntCalibrHalls=0;
009418  214555     MOV #0x1455, W5
00941A  EB4200     CLR.B W4
00941C  784A84     MOV.B W4, [W5]
8491:                                          NextHallClbr++;
00941E  214544     MOV #0x1454, W4
009420  784214     MOV.B [W4], W4
009422  E84204     INC.B W4, W4
009424  214545     MOV #0x1454, W5
009426  784A84     MOV.B W4, [W5]
8492:                                          Hall5ClrbRes=0;
009428  B82260     MUL.UU W4, #0, W4
00942A  89FE64     MOV W4, Hall5ClrbRes
00942C  89FE75     MOV W5, 0x3FCE
8493:                                          for (k=0;k<CntCalibrHallsMAX;k++)
00942E  EB0200     CLR W4
009430  780F04     MOV W4, [W14]
009432  37000C     BRA 0x944C
00944A  E80F1E     INC [W14], [W14]
00944C  2003F4     MOV #0x3F, W4
00944E  78029E     MOV [W14], W5
009450  528F84     SUB W5, W4, [W15]
009452  36FFF0     BRA LEU, 0x9434
8494:                                          Hall5ClrbRes=Hall5ClrbRes+CalibrHallsMass[k];
009434  78021E     MOV [W14], W4
009436  DD22C2     SL W4, #2, W5
009438  23EBC4     MOV #0x3EBC, W4
00943A  428204     ADD W5, W4, W4
00943C  BE0314     MOV.D [W4], W6
00943E  81FE64     MOV Hall5ClrbRes, W4
009440  81FE75     MOV 0x3FCE, W5
009442  420206     ADD W4, W6, W4
009444  4A8287     ADDC W5, W7, W5
009446  89FE64     MOV W4, Hall5ClrbRes
009448  89FE75     MOV W5, 0x3FCE
8495:                                      }
8496:                                              }
8497:                                          break;
009454  370050     BRA 0x94F6
0094E8  000000     NOP
0094EA  370005     BRA 0x94F6
0094EC  000000     NOP
0094EE  370003     BRA 0x94F6
8498:                                          case 6:
8499:                                              if (Sensor1_Prev==6)
009456  212474     MOV #0x1247, W4
009458  784214     MOV.B [W4], W4
00945A  524FE6     SUB.B W4, #0x6, [W15]
00945C  3A0049     BRA NZ, 0x94F0
8500:                                              {
8501:                                      CalibrHallsMass[CntCalibrHalls]=Phase1Period1;
00945E  214554     MOV #0x1455, W4
009460  784214     MOV.B [W4], W4
009462  FB8304     ZE W4, W6
009464  808894     MOV Phase1Period1, W4
009466  8088A5     MOV 0x1114, W5
009468  DD33C2     SL W6, #2, W7
00946A  23EBC6     MOV #0x3EBC, W6
00946C  438306     ADD W7, W6, W6
00946E  BE8B04     MOV.D W4, [W6]
8502:                                      CntCalibrHalls++;
009470  214554     MOV #0x1455, W4
009472  784214     MOV.B [W4], W4
009474  E84204     INC.B W4, W4
009476  214555     MOV #0x1455, W5
009478  784A84     MOV.B W4, [W5]
8503:                                      if (CntCalibrHalls>=CntCalibrHallsMAX)
00947A  214554     MOV #0x1455, W4
00947C  784294     MOV.B [W4], W5
00947E  B3C3F4     MOV.B #0x3F, W4
009480  52CF84     SUB.B W5, W4, [W15]
009482  360038     BRA LEU, 0x94F4
8504:                                      {
8505:                                          CntCalibrHalls=0;
009484  214555     MOV #0x1455, W5
009486  EB4200     CLR.B W4
009488  784A84     MOV.B W4, [W5]
8506:                                          NextHallClbr++;
00948A  214544     MOV #0x1454, W4
00948C  784214     MOV.B [W4], W4
00948E  E84204     INC.B W4, W4
009490  214545     MOV #0x1454, W5
009492  784A84     MOV.B W4, [W5]
8507:                                          Hall6ClrbRes=0;
009494  B82260     MUL.UU W4, #0, W4
009496  89FE84     MOV W4, Hall6ClrbRes
009498  89FE95     MOV W5, 0x3FD2
8508:                                          for (k=0;k<CntCalibrHallsMAX;k++)
00949A  EB0200     CLR W4
00949C  780F04     MOV W4, [W14]
00949E  37000C     BRA 0x94B8
0094B6  E80F1E     INC [W14], [W14]
0094B8  2003F4     MOV #0x3F, W4
0094BA  78029E     MOV [W14], W5
0094BC  528F84     SUB W5, W4, [W15]
0094BE  36FFF0     BRA LEU, 0x94A0
8509:                                          Hall6ClrbRes=Hall6ClrbRes+CalibrHallsMass[k];
0094A0  78021E     MOV [W14], W4
0094A2  DD22C2     SL W4, #2, W5
0094A4  23EBC4     MOV #0x3EBC, W4
0094A6  428204     ADD W5, W4, W4
0094A8  BE0314     MOV.D [W4], W6
0094AA  81FE84     MOV Hall6ClrbRes, W4
0094AC  81FE95     MOV 0x3FD2, W5
0094AE  420206     ADD W4, W6, W4
0094B0  4A8287     ADDC W5, W7, W5
0094B2  89FE84     MOV W4, Hall6ClrbRes
0094B4  89FE95     MOV W5, 0x3FD2
8510:                                          SoundNum=1;
0094C0  2124B5     MOV #0x124B, W5
0094C2  B3C014     MOV.B #0x1, W4
0094C4  784A84     MOV.B W4, [W5]
8511:              
8512:                                      }
8513:                                              }
8514:                                          break;
0094C6  370017     BRA 0x94F6
0094F0  000000     NOP
0094F2  370001     BRA 0x94F6
0094F4  000000     NOP
8515:                                      }
8516:                                  }
8517:              
8518:              
8519:                /*                  if (T45OverCnt>=TOverCntMem)
8520:                                  {
8521:                                      T45Over=0;
8522:                                  }
8523:                                  else
8524:                                  {
8525:                                      T45OverCnt++;
8526:                                      Phase1Period1=20000000;
8527:                                  }
8528:              */
8529:              
8530:              
8531:              
8532:                                  //Theta1Cnt=0;
8533:                                  if (!DirPWM1)
0094F6  809754     MOV StatFlgs1, W4
0094F8  620261     AND W4, #0x1, W4
0094FA  520FE0     SUB W4, #0x0, [W15]
0094FC  3A003B     BRA NZ, 0x9574
8534:                                  {
8535:                                  if (Forward1)
0094FE  8095E5     MOV Flgs, W5
009500  200404     MOV #0x40, W4
009502  628204     AND W5, W4, W4
009504  520FE0     SUB W4, #0x0, [W15]
009506  32001B     BRA Z, 0x953E
8536:                                  {
8537:                                  if (HallDelay1_F<0)
009508  2425A4     MOV #0x425A, W4
00950A  784214     MOV.B [W4], W4
00950C  524FE0     SUB.B W4, #0x0, [W15]
00950E  3D0009     BRA GE, 0x9522
8538:                                  {
8539:                                  HallDelayCnt_1=-HallDelay1_F;
009510  2425A4     MOV #0x425A, W4
009512  784214     MOV.B [W4], W4
009514  EA4204     NEG.B W4, W4
009516  214005     MOV #0x1400, W5
009518  784A84     MOV.B W4, [W5]
8540:                                  CanGetHalls1=0;
00951A  809674     MOV 0x12CE, W4
00951C  A14004     BCLR W4, #4
00951E  889674     MOV W4, 0x12CE
009520  370063     BRA 0x95E8
8541:                                  }
8542:                                  else
8543:                                  {
8544:                                      CanGetHalls1=1;
009522  809674     MOV 0x12CE, W4
009524  A04004     BSET W4, #4
009526  889674     MOV W4, 0x12CE
8545:                                      Theta1CntPWMSND=Theta1Cnt;
009528  8212B4     MOV Theta1Cnt, W4
00952A  784204     MOV.B W4, W4
00952C  214025     MOV #0x1402, W5
00952E  784A84     MOV.B W4, [W5]
8546:                                      Theta1Cnt=0;
009530  EB0200     CLR W4
009532  8A12B4     MOV W4, Theta1Cnt
8547:                                      Sensor1_Prev_OP=Sensor1_Prev;
009534  212474     MOV #0x1247, W4
009536  784214     MOV.B [W4], W4
009538  210FA5     MOV #0x10FA, W5
00953A  784A84     MOV.B W4, [W5]
00953C  370055     BRA 0x95E8
8548:                                  }
8549:                                  }
8550:                                  else
8551:                                  {
8552:                                  if (HallDelay1_B<0)
00953E  2425B4     MOV #0x425B, W4
009540  784214     MOV.B [W4], W4
009542  524FE0     SUB.B W4, #0x0, [W15]
009544  3D0009     BRA GE, 0x9558
8553:                                  {
8554:                                  HallDelayCnt_1=-HallDelay1_B;
009546  2425B4     MOV #0x425B, W4
009548  784214     MOV.B [W4], W4
00954A  EA4204     NEG.B W4, W4
00954C  214005     MOV #0x1400, W5
00954E  784A84     MOV.B W4, [W5]
8555:                                  CanGetHalls1=0;
009550  809674     MOV 0x12CE, W4
009552  A14004     BCLR W4, #4
009554  889674     MOV W4, 0x12CE
009556  370048     BRA 0x95E8
8556:                                  }
8557:                                  else
8558:                                  {
8559:                                      CanGetHalls1=1;
009558  809674     MOV 0x12CE, W4
00955A  A04004     BSET W4, #4
00955C  889674     MOV W4, 0x12CE
8560:                                      Theta1CntPWMSND=Theta1Cnt;
00955E  8212B4     MOV Theta1Cnt, W4
009560  784204     MOV.B W4, W4
009562  214025     MOV #0x1402, W5
009564  784A84     MOV.B W4, [W5]
8561:                                      Theta1Cnt=0;
009566  EB0200     CLR W4
009568  8A12B4     MOV W4, Theta1Cnt
8562:                                      Sensor1_Prev_OP=Sensor1_Prev;
00956A  212474     MOV #0x1247, W4
00956C  784214     MOV.B [W4], W4
00956E  210FA5     MOV #0x10FA, W5
009570  784A84     MOV.B W4, [W5]
009572  37003A     BRA 0x95E8
8563:                                  }
8564:                                  }
8565:                         }
8566:                                  else
8567:                                  {
8568:                                  if (!Forward1)
009574  8095E5     MOV Flgs, W5
009576  200404     MOV #0x40, W4
009578  628204     AND W5, W4, W4
00957A  520FE0     SUB W4, #0x0, [W15]
00957C  3A001B     BRA NZ, 0x95B4
8569:                                  {
8570:                                  if (HallDelay1_F<0)
00957E  2425A4     MOV #0x425A, W4
009580  784214     MOV.B [W4], W4
009582  524FE0     SUB.B W4, #0x0, [W15]
009584  3D0009     BRA GE, 0x9598
8571:                                  {
8572:                                  HallDelayCnt_1=-HallDelay1_F;
009586  2425A4     MOV #0x425A, W4
009588  784214     MOV.B [W4], W4
00958A  EA4204     NEG.B W4, W4
00958C  214005     MOV #0x1400, W5
00958E  784A84     MOV.B W4, [W5]
8573:                                  CanGetHalls1=0;
009590  809674     MOV 0x12CE, W4
009592  A14004     BCLR W4, #4
009594  889674     MOV W4, 0x12CE
009596  370028     BRA 0x95E8
8574:                                  }
8575:                                  else
8576:                                  {
8577:                                      CanGetHalls1=1;
009598  809674     MOV 0x12CE, W4
00959A  A04004     BSET W4, #4
00959C  889674     MOV W4, 0x12CE
8578:                                      Theta1CntPWMSND=Theta1Cnt;
00959E  8212B4     MOV Theta1Cnt, W4
0095A0  784204     MOV.B W4, W4
0095A2  214025     MOV #0x1402, W5
0095A4  784A84     MOV.B W4, [W5]
8579:                                      Theta1Cnt=0;
0095A6  EB0200     CLR W4
0095A8  8A12B4     MOV W4, Theta1Cnt
8580:                                      Sensor1_Prev_OP=Sensor1_Prev;
0095AA  212474     MOV #0x1247, W4
0095AC  784214     MOV.B [W4], W4
0095AE  210FA5     MOV #0x10FA, W5
0095B0  784A84     MOV.B W4, [W5]
0095B2  37001A     BRA 0x95E8
8581:                                  }
8582:                                  }
8583:                                  else
8584:                                  {
8585:                                  if (HallDelay1_B<0)
0095B4  2425B4     MOV #0x425B, W4
0095B6  784214     MOV.B [W4], W4
0095B8  524FE0     SUB.B W4, #0x0, [W15]
0095BA  3D0009     BRA GE, 0x95CE
8586:                                  {
8587:                                  HallDelayCnt_1=-HallDelay1_B;
0095BC  2425B4     MOV #0x425B, W4
0095BE  784214     MOV.B [W4], W4
0095C0  EA4204     NEG.B W4, W4
0095C2  214005     MOV #0x1400, W5
0095C4  784A84     MOV.B W4, [W5]
8588:                                  CanGetHalls1=0;
0095C6  809674     MOV 0x12CE, W4
0095C8  A14004     BCLR W4, #4
0095CA  889674     MOV W4, 0x12CE
0095CC  37000D     BRA 0x95E8
8589:                                  }
8590:                                  else
8591:                                  {
8592:                                      CanGetHalls1=1;
0095CE  809674     MOV 0x12CE, W4
0095D0  A04004     BSET W4, #4
0095D2  889674     MOV W4, 0x12CE
8593:                                      Theta1CntPWMSND=Theta1Cnt;
0095D4  8212B4     MOV Theta1Cnt, W4
0095D6  784204     MOV.B W4, W4
0095D8  214025     MOV #0x1402, W5
0095DA  784A84     MOV.B W4, [W5]
8594:                                      Theta1Cnt=0;
0095DC  EB0200     CLR W4
0095DE  8A12B4     MOV W4, Theta1Cnt
8595:                                      Sensor1_Prev_OP=Sensor1_Prev;
0095E0  212474     MOV #0x1247, W4
0095E2  784214     MOV.B [W4], W4
0095E4  210FA5     MOV #0x10FA, W5
0095E6  784A84     MOV.B W4, [W5]
8596:                                  }
8597:                                  }
8598:                         }
8599:              
8600:              
8601:                                  if (PhasePERMASS)
0095E8  2183A4     MOV #0x183A, W4
0095EA  784214     MOV.B [W4], W4
0095EC  524FE0     SUB.B W4, #0x0, [W15]
0095EE  320043     BRA Z, 0x9676
8602:                                  {
8603:                                  for (k=0;k<(PhasePERMASS-1);k++)
0095F0  EB0200     CLR W4
0095F2  780F04     MOV W4, [W14]
0095F4  37000B     BRA 0x960C
00960A  E80F1E     INC [W14], [W14]
00960C  2183A4     MOV #0x183A, W4
00960E  784214     MOV.B [W4], W4
009610  FB8204     ZE W4, W4
009612  E90204     DEC W4, W4
009614  520F9E     SUB W4, [W14], [W15]
009616  3EFFEF     BRA GTU, 0x95F6
8604:                                  Phase1PeriodMass[k]=Phase1PeriodMass[k+1];
0095F6  E8021E     INC [W14], W4
0095F8  DD22C2     SL W4, #2, W5
0095FA  211264     MOV #0x1126, W4
0095FC  428204     ADD W5, W4, W4
0095FE  BE0214     MOV.D [W4], W4
009600  78031E     MOV [W14], W6
009602  DD33C2     SL W6, #2, W7
009604  211266     MOV #0x1126, W6
009606  438306     ADD W7, W6, W6
009608  BE8B04     MOV.D W4, [W6]
8605:              
8606:              
8607:                              Phase1PeriodMass[PhasePERMASS-1]=Phase1Period1;
009618  2183A4     MOV #0x183A, W4
00961A  784214     MOV.B [W4], W4
00961C  FB8204     ZE W4, W4
00961E  E90304     DEC W4, W6
009620  808894     MOV Phase1Period1, W4
009622  8088A5     MOV 0x1114, W5
009624  DD33C2     SL W6, #2, W7
009626  211266     MOV #0x1126, W6
009628  438306     ADD W7, W6, W6
00962A  BE8B04     MOV.D W4, [W6]
8608:              
8609:                              Phase1PeriodSumm=0;
00962C  B82260     MUL.UU W4, #0, W4
00962E  889134     MOV W4, Phase1PeriodSumm
009630  889145     MOV W5, 0x1228
8610:                              for (k=0;k<PhasePERMASS;k++)
009632  EB0200     CLR W4
009634  780F04     MOV W4, [W14]
009636  37000C     BRA 0x9650
00964E  E80F1E     INC [W14], [W14]
009650  2183A4     MOV #0x183A, W4
009652  784214     MOV.B [W4], W4
009654  FB8204     ZE W4, W4
009656  520F9E     SUB W4, [W14], [W15]
009658  3EFFEF     BRA GTU, 0x9638
8611:                              Phase1PeriodSumm=Phase1PeriodSumm+Phase1PeriodMass[k];
009638  78021E     MOV [W14], W4
00963A  DD22C2     SL W4, #2, W5
00963C  211264     MOV #0x1126, W4
00963E  428204     ADD W5, W4, W4
009640  BE0314     MOV.D [W4], W6
009642  809134     MOV Phase1PeriodSumm, W4
009644  809145     MOV 0x1228, W5
009646  420206     ADD W4, W6, W4
009648  4A8287     ADDC W5, W7, W5
00964A  889134     MOV W4, Phase1PeriodSumm
00964C  889145     MOV W5, 0x1228
8612:                              Phase1PeriodSumm=Phase1PeriodSumm>>PhasePERMASS_SHFT;
00965A  809134     MOV Phase1PeriodSumm, W4
00965C  809145     MOV 0x1228, W5
00965E  2183B6     MOV #0x183B, W6
009660  784316     MOV.B [W6], W6
009662  FB8306     ZE W6, W6
009664  780106     MOV W6, W2
009666  E90102     DEC W2, W2
009668  330003     BRA N, 0x9670
00966A  D10285     LSR W5, W5
00966C  D38204     RRC W4, W4
00966E  37FFFB     BRA 0x9666
009670  889134     MOV W4, Phase1PeriodSumm
009672  889145     MOV W5, 0x1228
009674  37006A     BRA 0x974A
8613:                         }
8614:                                  else
8615:                                  {
8616:              long int TmpL;
8617:              char SnPrev;
8618:              Phase1PeriodSumm=Phase1Period1;
009676  808894     MOV Phase1Period1, W4
009678  8088A5     MOV 0x1114, W5
00967A  889134     MOV W4, Phase1PeriodSumm
00967C  889145     MOV W5, 0x1228
8619:              if (!DirPWM1)
00967E  809754     MOV StatFlgs1, W4
009680  620261     AND W4, #0x1, W4
009682  520FE0     SUB W4, #0x0, [W15]
009684  3A0031     BRA NZ, 0x96E8
8620:              {
8621:                 SnPrev=NearSensors[Sensor1_Prev][0];
009686  212474     MOV #0x1247, W4
009688  784214     MOV.B [W4], W4
00968A  FB8204     ZE W4, W4
00968C  DD2242     SL W4, #2, W4
00968E  2371C5     MOV #0x371C, W5
009690  428204     ADD W5, W4, W4
009692  784294     MOV.B [W4], W5
009694  984765     MOV.B W5, [W14+6]
8622:                 TmpL=Phase1Period1*(long int)NearSensors[SnPrev][3];
009696  90426E     MOV.B [W14+6], W4
009698  FB0204     SE W4, W4
00969A  DD2242     SL W4, #2, W4
00969C  420263     ADD W4, #0x3, W4
00969E  2371C5     MOV #0x371C, W5
0096A0  428204     ADD W5, W4, W4
0096A2  784214     MOV.B [W4], W4
0096A4  FB0304     SE W4, W6
0096A6  DEB3CF     ASR W6, #15, W7
0096A8  808894     MOV Phase1Period1, W4
0096AA  8088A5     MOV 0x1114, W5
0096AC  B83884     MUL.UU W7, W4, W0
0096AE  B82986     MUL.UU W5, W6, W2
0096B0  780082     MOV W2, W1
0096B2  400001     ADD W0, W1, W0
0096B4  780306     MOV W6, W6
0096B6  780204     MOV W4, W4
0096B8  B83204     MUL.UU W6, W4, W4
0096BA  400005     ADD W0, W5, W0
0096BC  780280     MOV W0, W5
0096BE  980744     MOV W4, [W14+8]
0096C0  980755     MOV W5, [W14+10]
0096C2  980744     MOV W4, [W14+8]
0096C4  980755     MOV W5, [W14+10]
8623:                 TmpL=TmpL>>7;
0096C6  90024E     MOV [W14+8], W4
0096C8  9002DE     MOV [W14+10], W5
0096CA  DD2B49     SL W5, #9, W6
0096CC  DE2247     LSR W4, #7, W4
0096CE  730204     IOR W6, W4, W4
0096D0  DEAAC7     ASR W5, #7, W5
0096D2  980744     MOV W4, [W14+8]
0096D4  980755     MOV W5, [W14+10]
8624:                 Phase1PeriodSumm=Phase1PeriodSumm+TmpL;
0096D6  809136     MOV Phase1PeriodSumm, W6
0096D8  809147     MOV 0x1228, W7
0096DA  90024E     MOV [W14+8], W4
0096DC  9002DE     MOV [W14+10], W5
0096DE  420206     ADD W4, W6, W4
0096E0  4A8287     ADDC W5, W7, W5
0096E2  889134     MOV W4, Phase1PeriodSumm
0096E4  889145     MOV W5, 0x1228
0096E6  370031     BRA 0x974A
8625:              }
8626:              else
8627:              {
8628:                 SnPrev=NearSensors[Sensor1_Prev][1];
0096E8  212474     MOV #0x1247, W4
0096EA  784214     MOV.B [W4], W4
0096EC  FB8204     ZE W4, W4
0096EE  DD2242     SL W4, #2, W4
0096F0  E80204     INC W4, W4
0096F2  2371C5     MOV #0x371C, W5
0096F4  428204     ADD W5, W4, W4
0096F6  784394     MOV.B [W4], W7
0096F8  984767     MOV.B W7, [W14+6]
8629:                 TmpL=Phase1Period1*(long int)NearSensors[SnPrev][2];
0096FA  90426E     MOV.B [W14+6], W4
0096FC  FB0204     SE W4, W4
0096FE  DD2242     SL W4, #2, W4
009700  E88204     INC2 W4, W4
009702  2371C5     MOV #0x371C, W5
009704  428204     ADD W5, W4, W4
009706  784214     MOV.B [W4], W4
009708  FB0304     SE W4, W6
00970A  DEB3CF     ASR W6, #15, W7
00970C  808894     MOV Phase1Period1, W4
00970E  8088A5     MOV 0x1114, W5
009710  B83884     MUL.UU W7, W4, W0
009712  B82986     MUL.UU W5, W6, W2
009714  780082     MOV W2, W1
009716  400001     ADD W0, W1, W0
009718  780306     MOV W6, W6
00971A  780204     MOV W4, W4
00971C  B83204     MUL.UU W6, W4, W4
00971E  400005     ADD W0, W5, W0
009720  780280     MOV W0, W5
009722  980744     MOV W4, [W14+8]
009724  980755     MOV W5, [W14+10]
009726  980744     MOV W4, [W14+8]
009728  980755     MOV W5, [W14+10]
8630:                 TmpL=TmpL>>7;
00972A  90024E     MOV [W14+8], W4
00972C  9002DE     MOV [W14+10], W5
00972E  DD2B49     SL W5, #9, W6
009730  DE2247     LSR W4, #7, W4
009732  730204     IOR W6, W4, W4
009734  DEAAC7     ASR W5, #7, W5
009736  980744     MOV W4, [W14+8]
009738  980755     MOV W5, [W14+10]
8631:                 Phase1PeriodSumm=Phase1PeriodSumm+TmpL;
00973A  809136     MOV Phase1PeriodSumm, W6
00973C  809147     MOV 0x1228, W7
00973E  90024E     MOV [W14+8], W4
009740  9002DE     MOV [W14+10], W5
009742  420206     ADD W4, W6, W4
009744  4A8287     ADDC W5, W7, W5
009746  889134     MOV W4, Phase1PeriodSumm
009748  889145     MOV W5, 0x1228
8632:              }
8633:              
8634:                                  }
8635:              
8636:              
8637:                              if (1)//(PWM32Bits)
8638:                              Phase1Period1=Phase1PeriodSumm>>4;
00974A  809134     MOV Phase1PeriodSumm, W4
00974C  809145     MOV 0x1228, W5
00974E  DD2BCC     SL W5, #12, W7
009750  DE2244     LSR W4, #4, W4
009752  738204     IOR W7, W4, W4
009754  DE2AC4     LSR W5, #4, W5
009756  888894     MOV W4, Phase1Period1
009758  8888A5     MOV W5, 0x1114
8639:                              else
8640:                              Phase1Period1=Phase1PeriodSumm>>5;
8641:              
8642:              
8643:                              if (Phase1Period1>65530)
00975A  808896     MOV Phase1Period1, W6
00975C  8088A7     MOV 0x1114, W7
00975E  2FFFA4     MOV #0xFFFA, W4
009760  200005     MOV #0x0, W5
009762  530F84     SUB W6, W4, [W15]
009764  5B8F85     SUBB W7, W5, [W15]
009766  34000D     BRA LE, 0x9782
8644:                              {
8645:                                  PR8Temp=(unsigned int)(Phase1Period1>>3);
009768  808894     MOV Phase1Period1, W4
00976A  8088A5     MOV 0x1114, W5
00976C  DD294D     SL W5, #13, W2
00976E  DE2243     LSR W4, #3, W4
009770  710204     IOR W2, W4, W4
009772  DEAAC3     ASR W5, #3, W5
009774  780204     MOV W4, W4
009776  88C084     MOV W4, PR8Temp
8646:                                  T8CONbits.TCKPS=1;
009778  8009D4     MOV T8CON, W4
00977A  A04004     BSET W4, #4
00977C  A15004     BCLR W4, #5
00977E  8809D4     MOV W4, T8CON
009780  37000B     BRA 0x9798
8647:                                  //T45Over=1;
8648:                              }
8649:                              else
8650:                              {
8651:                                  PR8Temp=(unsigned int)Phase1Period1;
009782  808894     MOV Phase1Period1, W4
009784  8088A5     MOV 0x1114, W5
009786  780204     MOV W4, W4
009788  88C084     MOV W4, PR8Temp
8652:                                  T8CONbits.TCKPS=0;
00978A  8009D4     MOV T8CON, W4
00978C  A14004     BCLR W4, #4
00978E  A15004     BCLR W4, #5
009790  8809D4     MOV W4, T8CON
8653:                                  T45Over=0;
009792  809674     MOV 0x12CE, W4
009794  A10004     BCLR W4, #0
009796  889674     MOV W4, 0x12CE
8654:                              }
8655:              
8656:              
8657:                      }
8658:              
8659:                          }
8660:              
8661:                                  //TmL=TMR6;
8662:                                  //Phase1Period2=TMR7HLD;
8663:                                  //Phase1Period2=(Phase1Period2<<16)+TmL;
8664:                          CanZeroCrossing=1;
009798  809644     MOV Flgs3, W4
00979A  A0F004     BSET W4, #15
00979C  889644     MOV W4, Flgs3
8665:                          //Horn=!Horn;
8666:                                  //TMR7HLD=0;
8667:                                  //TMR6=0;
8668:                                  //TMR7=0;
8669:              
8670:              
8671:              
8672:                          Phases1();
00979E  07FA9B     RCALL Phases1
8673:                      
8674:              
8675:              
8676:              
8677:              
8678:              
8679:              
8680:                          if (Forward1)
0097A0  8095E5     MOV Flgs, W5
0097A2  200404     MOV #0x40, W4
0097A4  628204     AND W5, W4, W4
0097A6  520FE0     SUB W4, #0x0, [W15]
0097A8  320004     BRA Z, 0x97B2
8681:                          {
8682:                              BackwardCnt++;
0097AA  808804     MOV BackwardCnt, W4
0097AC  E80204     INC W4, W4
0097AE  888804     MOV W4, BackwardCnt
0097B0  370006     BRA 0x97BE
8683:                          }
8684:                          else
8685:                          {
8686:                              if (BackwardCnt)
0097B2  808804     MOV BackwardCnt, W4
0097B4  520FE0     SUB W4, #0x0, [W15]
0097B6  320003     BRA Z, 0x97BE
8687:                              BackwardCnt--;
0097B8  808804     MOV BackwardCnt, W4
0097BA  E90204     DEC W4, W4
0097BC  888804     MOV W4, BackwardCnt
8688:                          }
8689:                          
8690:                      //Light=!Light;
8691:                      if (!Sensorless)
0097BE  809755     MOV StatFlgs1, W5
0097C0  200204     MOV #0x20, W4
0097C2  628204     AND W5, W4, W4
0097C4  520FE0     SUB W4, #0x0, [W15]
0097C6  3A0017     BRA NZ, 0x97F6
8692:                      {
8693:                          if (!MeasuringSpd1)
0097C8  8095F5     MOV 0x12BE, W5
0097CA  220004     MOV #0x2000, W4
0097CC  628204     AND W5, W4, W4
0097CE  520FE0     SUB W4, #0x0, [W15]
0097D0  3A0006     BRA NZ, 0x97DE
8694:                          {
8695:                          _1sCnt1=0;
0097D2  EB0200     CLR W4
0097D4  897ED4     MOV W4, _1sCnt1
8696:                          MeasuringSpd1=1;
0097D6  8095F4     MOV 0x12BE, W4
0097D8  A0D004     BSET W4, #13
0097DA  8895F4     MOV W4, 0x12BE
0097DC  37000C     BRA 0x97F6
8697:                          }
8698:                      else
8699:                          {
8700:                          if (Forward1)
0097DE  8095E5     MOV Flgs, W5
0097E0  200404     MOV #0x40, W4
0097E2  628204     AND W5, W4, W4
0097E4  520FE0     SUB W4, #0x0, [W15]
0097E6  320004     BRA Z, 0x97F0
8701:                          Spd1Cnt++;
0097E8  817F54     MOV Spd1Cnt, W4
0097EA  E80204     INC W4, W4
0097EC  897F54     MOV W4, Spd1Cnt
0097EE  370003     BRA 0x97F6
8702:                          else
8703:                          Spd1Cnt--;
0097F0  817F54     MOV Spd1Cnt, W4
0097F2  E90204     DEC W4, W4
0097F4  897F54     MOV W4, Spd1Cnt
8704:                          }
8705:                      }
8706:              
8707:                          
8708:                          
8709:                          
8710:                          
8711:                  }
8712:              
8713:              }
8714:              
8715:              
8716:                      
8717:              
8718:                
8719:              
8720:              
8721:              }
0097F6  FA8000     ULNK
0097F8  F90032     POP DSRPAG
0097FA  78044F     MOV [--W15], W8
0097FC  BE034F     MOV.D [--W15], W6
0097FE  BE024F     MOV.D [--W15], W4
009800  BE014F     MOV.D [--W15], W2
009802  BE004F     MOV.D [--W15], W0
009804  F90036     POP RCOUNT
009806  064000     RETFIE
8722:              
8723:              void ChangePWM1(unsigned int PWM)
8724:              {
009808  FA0002     LNK #0x2
00980A  780F00     MOV W0, [W14]
8725:              
8726:                  if (ChagerViaMotor)
00980C  809604     MOV Flgs1, W4
00980E  620262     AND W4, #0x2, W4
009810  520FE0     SUB W4, #0x0, [W15]
009812  320003     BRA Z, 0x981A
8727:                  {
8728:                      SetPWM_ChagerViaMotor();
009814  02D2EE     CALL SetPWM_ChagerViaMotor
009816  000001     NOP
8729:                      return;
009818  370045     BRA 0x98A4
8730:                  }
8731:              
8732:              
8733:                  
8734:                  if ((Vector)&&(!BreakPressed))
00981A  809684     MOV Flgs5, W4
00981C  620270     AND W4, #0x10, W4
00981E  520FE0     SUB W4, #0x0, [W15]
009820  32000B     BRA Z, 0x9838
009822  809614     MOV 0x12C2, W4
009824  620261     AND W4, #0x1, W4
009826  520FE0     SUB W4, #0x0, [W15]
009828  3A0007     BRA NZ, 0x9838
8735:                  {
8736:                      IEC3bits.T8IE = 0;
00982A  A96826     BCLR IEC3, #3
8737:                      Amplitude1=PWM;
00982C  78021E     MOV [W14], W4
00982E  200005     MOV #0x0, W5
009830  889A44     MOV W4, Amplitude1
009832  889A55     MOV W5, 0x134A
8738:                      IEC3bits.T8IE = 1;
009834  A86826     BSET IEC3, #3
8739:                      return;
009836  370036     BRA 0x98A4
8740:                  }
8741:              //#if !defined TEST_PWM_KEYS
8742:                  if (!TEST_PWM_KEYS)
009838  809655     MOV 0x12CA, W5
00983A  204004     MOV #0x400, W4
00983C  628204     AND W5, W4, W4
00983E  520FE0     SUB W4, #0x0, [W15]
009840  3A0015     BRA NZ, 0x986C
8743:                  {
8744:                  if ((CURRENT_PROTECTION)&&(!BreakPressed))
009842  809755     MOV StatFlgs1, W5
009844  220004     MOV #0x2000, W4
009846  628204     AND W5, W4, W4
009848  520FE0     SUB W4, #0x0, [W15]
00984A  320010     BRA Z, 0x986C
00984C  809614     MOV 0x12C2, W4
00984E  620261     AND W4, #0x1, W4
009850  520FE0     SUB W4, #0x0, [W15]
009852  3A000C     BRA NZ, 0x986C
8745:                        {
8746:                        if (PWM>(unsigned int)PI_Curr1Res)
009854  81F404     MOV PI_Curr1Res, W4
009856  81F415     MOV 0x3E82, W5
009858  780204     MOV W4, W4
00985A  520F9E     SUB W4, [W14], [W15]
00985C  310005     BRA C, 0x9868
8747:                      PWM=PWM-(unsigned int)PI_Curr1Res;
00985E  81F404     MOV PI_Curr1Res, W4
009860  81F415     MOV 0x3E82, W5
009862  780204     MOV W4, W4
009864  120F1E     SUBR W4, [W14], [W14]
009866  370002     BRA 0x986C
8748:                        else
8749:                            PWM=0;
009868  EB0200     CLR W4
00986A  780F04     MOV W4, [W14]
8750:                        }
8751:                  }
8752:              //#endif
8753:              
8754:                  PhasePWM=PWM;
00986C  78021E     MOV [W14], W4
00986E  200005     MOV #0x0, W5
009870  89F524     MOV W4, PhasePWM
009872  89F535     MOV W5, 0x3EA6
8755:              
8756:                  
8757:                  
8758:                  if (PWM<DEADTIME_GLUK)
8759:                  {
8760:                      DTR1 = DTR2 = DTR3=DEADTIME*2;     //DTRx Registers are ignored in this mode
8761:                      ALTDTR1 = ALTDTR2 = ALTDTR3=DEADTIME*2;
8762:                      PWM=PWM+DEADTIME+Khard;
8763:                  }    
8764:                  else
8765:                  {
8766:                      DTR1 = DTR2 = DTR3=DEADTIME;     //DTRx Registers are ignored in this mode
009874  200644     MOV #0x64, W4
009876  886354     MOV W4, DTR3
009878  806354     MOV DTR3, W4
00987A  886254     MOV W4, DTR2
00987C  806254     MOV DTR2, W4
00987E  886154     MOV W4, DTR1
8767:                      ALTDTR1 = ALTDTR2 = ALTDTR3=DEADTIME;
009880  200644     MOV #0x64, W4
009882  886364     MOV W4, ALTDTR3
009884  806364     MOV ALTDTR3, W4
009886  886264     MOV W4, ALTDTR2
009888  806264     MOV ALTDTR2, W4
00988A  886164     MOV W4, ALTDTR1
8768:                          PWM=PWM+DEADTIME_2+Khard;
00988C  808844     MOV Khard, W4
00988E  42021E     ADD W4, [W14], W4
009890  200325     MOV #0x32, W5
009892  420F05     ADD W4, W5, [W14]
8769:              
8770:                  }
8771:                  
8772:                  
8773:                  
8774:                  
8775:                  
8776:                  
8777:              
8778:                  
8779:              //    PWM=PWM+DEADTIME_2+Khard;
8780:                  
8781:               //   SEVTCMP=PWM>>1;
8782:              
8783:                  
8784:                  
8785:                  
8786:                  PDC1 = PWM;
009894  78021E     MOV [W14], W4
009896  886134     MOV W4, PDC1
8787:                  PDC2 = PWM;
009898  78029E     MOV [W14], W5
00989A  886235     MOV W5, PDC2
8788:                  PDC3 = PWM;
00989C  78021E     MOV [W14], W4
00989E  886334     MOV W4, PDC3
8789:                  
8790:                  
8791:                  PWM1Show=PWM;
0098A0  78021E     MOV [W14], W4
0098A2  8892A4     MOV W4, PWM1Show
8792:                  
8793:              }
0098A4  FA8000     ULNK
0098A6  060000     RETURN
8794:              
8795:              
8796:              //UART 3
8797:              
8798:              void UARTInit_U3(void)
8799:              {
0098A8  FA0000     LNK #0x0
8800:              
8801:              	IPC20bits.U3TXIP = 2;
0098AA  804344     MOV IPC20, W4
0098AC  A1C004     BCLR W4, #12
0098AE  A0D004     BSET W4, #13
0098B0  A1E004     BCLR W4, #14
0098B2  884344     MOV W4, IPC20
8802:              	IPC20bits.U3RXIP = 7;
0098B4  804344     MOV IPC20, W4
0098B6  A08004     BSET W4, #8
0098B8  A09004     BSET W4, #9
0098BA  A0A004     BSET W4, #10
0098BC  884344     MOV W4, IPC20
8803:              
8804:              
8805:              
8806:              	U3BRG = 129;//34;// 115200
0098BE  200814     MOV #0x81, W4
0098C0  8812C4     MOV W4, U3BRG
8807:              
8808:              
8809:              
8810:              
8811:              	U3MODEbits.UARTEN = 1;		// UART2 is Enabled
0098C2  A8E251     BSET 0x251, #7
8812:              	U3MODEbits.USIDL = 0;		// Continue operation at Idlestate
0098C4  A9A251     BCLR 0x251, #5
8813:              	U3MODEbits.IREN = 0;		// IrDA En/Decoder is disabled
0098C6  A98251     BCLR 0x251, #4
8814:              	U3MODEbits.RTSMD = 1; 		// Simplex mode
0098C8  A86251     BSET 0x251, #3
8815:              	U3MODEbits.UEN = 0b00;		// UxTX and UxRX pins are enabled and used; UxCTS, UxRTS and BCLKx pins are controlled by port latches.
0098CA  801284     MOV U3MODE, W4
0098CC  A18004     BCLR W4, #8
0098CE  A19004     BCLR W4, #9
0098D0  881284     MOV W4, U3MODE
8816:              	U3MODEbits.WAKE = 0;		// Wake-up on start bit is enabled
0098D2  A9E250     BCLR U3MODE, #7
8817:              	U3MODEbits.LPBACK = 0;		// Loop-back is disabled
0098D4  A9C250     BCLR U3MODE, #6
8818:              	U3MODEbits.ABAUD = 0;		// auto baud is disabled
0098D6  A9A250     BCLR U3MODE, #5
8819:              	U3MODEbits.RXINV = 0;		// No RX inversion
0098D8  A98250     BCLR U3MODE, #4
8820:              	U3MODEbits.BRGH = 1;		// low boud rate
0098DA  A86250     BSET U3MODE, #3
8821:              	U3MODEbits.PDSEL = 0b00; 	// 8bit no parity
0098DC  801284     MOV U3MODE, W4
0098DE  A11004     BCLR W4, #1
0098E0  A12004     BCLR W4, #2
0098E2  881284     MOV W4, U3MODE
8822:              	U3MODEbits.STSEL = 0;		// one stop bit
0098E4  A90250     BCLR U3MODE, #0
8823:              
8824:              
8825:              	U3STAbits.UTXISEL0 = 0;
0098E6  A9A253     BCLR 0x253, #5
8826:              	U3STAbits.UTXISEL1 = 0;
0098E8  A9E253     BCLR 0x253, #7
8827:              	U3STA &= 0xDFFF;			// clear TXINV by bit masking
0098EA  801295     MOV U3STA, W5
0098EC  2DFFF4     MOV #0xDFFF, W4
0098EE  628204     AND W5, W4, W4
0098F0  881294     MOV W4, U3STA
8828:              	U3STAbits.UTXBRK = 0;		// sync break tx is disabled
0098F2  A96253     BCLR 0x253, #3
8829:              	U3STAbits.UTXEN = 1;		//transmit  is enabled
0098F4  A84253     BSET 0x253, #2
8830:              	U3STAbits.URXISEL = 0b00;	// interrupt flag bit is set when RXBUF is filled whith 1 character
0098F6  801294     MOV U3STA, W4
0098F8  A16004     BCLR W4, #6
0098FA  A17004     BCLR W4, #7
0098FC  881294     MOV W4, U3STA
8831:              	U3STAbits.ADDEN = 0;		// address detect mode is disabled
0098FE  A9A252     BCLR U3STA, #5
8832:              
8833:              	IFS5bits.U3RXIF = 0;		// clear interrupt flag of rx
009900  A9480A     BCLR IFS5, #2
8834:              	IEC5bits.U3RXIE = 1;		// enable rx recieved data interrupt
009902  A8482A     BSET IEC5, #2
8835:              
8836:              	IFS5bits.U3TXIF = 1;		// clear interrupt flag of rx
009904  A8680A     BSET IFS5, #3
8837:              	IEC5bits.U3TXIE = 0;		// enable rx recieved data interrupt
009906  A9682A     BCLR IEC5, #3
8838:                      //IPC20bits.U3TXIP=6;
8839:              
8840:                 //     U3TXREG = 0xaa;
8841:              
8842:              
8843:              
8844:              }
009908  FA8000     ULNK
00990A  060000     RETURN
8845:              
8846:              
8847:              void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void){
00990C  BE9F84     MOV.D W4, [W15++]
00990E  F80032     PUSH DSRPAG
009910  202004     MOV #0x200, W4
009912  880194     MOV W4, DSRPAG
009914  000000     NOP
009916  FA0000     LNK #0x0
8848:                  IFS5bits.U3TXIF = 0;// Clear TX Interrupt flag
009918  A9680A     BCLR IFS5, #3
8849:                  
8850:                  if (CntTrmSteer<CntTrmSteer_N)
00991A  237DB4     MOV #0x37DB, W4
00991C  784294     MOV.B [W4], W5
00991E  237DA4     MOV #0x37DA, W4
009920  784214     MOV.B [W4], W4
009922  52CF84     SUB.B W5, W4, [W15]
009924  31000E     BRA C, 0x9942
8851:                  {
8852:                  U3TXREG = TrmMass_U3[CntTrmSteer];
009926  237DB4     MOV #0x37DB, W4
009928  784214     MOV.B [W4], W4
00992A  FB8204     ZE W4, W4
00992C  227EC5     MOV #0x27EC, W5
00992E  428204     ADD W5, W4, W4
009930  784214     MOV.B [W4], W4
009932  FB8204     ZE W4, W4
009934  8812A4     MOV W4, U3TXREG
8853:                  CntTrmSteer++;
009936  237DB4     MOV #0x37DB, W4
009938  784214     MOV.B [W4], W4
00993A  E84204     INC.B W4, W4
00993C  237DB5     MOV #0x37DB, W5
00993E  784A84     MOV.B W4, [W5]
009940  370004     BRA 0x994A
8854:                  }
8855:                  else
8856:                  {
8857:                  OnTransmitt_U3=0;
009942  809664     MOV Flgs4, W4
009944  A14004     BCLR W4, #4
009946  889664     MOV W4, Flgs4
8858:                  IEC5bits.U3TXIE = 0;		// enable rx recieved data interrupt
009948  A9682A     BCLR IEC5, #3
8859:                  }
8860:              
8861:              
8862:              
8863:              
8864:              }
00994A  FA8000     ULNK
00994C  F90032     POP DSRPAG
00994E  BE024F     MOV.D [--W15], W4
009950  064000     RETFIE
8865:              
8866:              
8867:              
8868:              void TrmSteer(void)
8869:              {
009952  FA0002     LNK #0x2
8870:                  unsigned char N;
8871:              
8872:                  if (!MustTrm_U3)
009954  809664     MOV Flgs4, W4
009956  620268     AND W4, #0x8, W4
009958  520FE0     SUB W4, #0x0, [W15]
00995A  320019     BRA Z, 0x998E
8873:                      return;
00998E  000000     NOP
009990  370001     BRA 0x9994
8874:                  MustTrm_U3=0;
00995C  809664     MOV Flgs4, W4
00995E  A13004     BCLR W4, #3
009960  889664     MOV W4, Flgs4
8875:                  if (OnTransmitt_U3)
009962  809664     MOV Flgs4, W4
009964  620270     AND W4, #0x10, W4
009966  520FE0     SUB W4, #0x0, [W15]
009968  3A0014     BRA NZ, 0x9992
8876:                      return;
009992  000000     NOP
8877:              
8878:                  N=TrmMass_U3[2];
00996A  227EE4     MOV #0x27EE, W4
00996C  784F14     MOV.B [W4], [W14]
8879:              
8880:                  OnTransmitt_U3=1;
00996E  809664     MOV Flgs4, W4
009970  A04004     BSET W4, #4
009972  889664     MOV W4, Flgs4
8881:                  CntTrmSteer=1;
009974  237DB5     MOV #0x37DB, W5
009976  B3C014     MOV.B #0x1, W4
009978  784A84     MOV.B W4, [W5]
8882:                  CntTrmSteer_N=N+4;
00997A  78429E     MOV.B [W14], W5
00997C  42C264     ADD.B W5, #0x4, W4
00997E  237DA5     MOV #0x37DA, W5
009980  784A84     MOV.B W4, [W5]
8883:              
8884:                  U3TXREG = TrmMass_U3[0];
009982  227EC4     MOV #0x27EC, W4
009984  784214     MOV.B [W4], W4
009986  FB8204     ZE W4, W4
009988  8812A4     MOV W4, U3TXREG
8885:                  IEC5bits.U3TXIE = 1;
00998A  A8682A     BSET IEC5, #3
00998C  370003     BRA 0x9994
8886:              
8887:              
8888:              }
009994  FA8000     ULNK
009996  060000     RETURN
8889:              
8890:              
8891:              
8892:              
8893:              void InitPort_U3(void)
8894:              {
009998  FA0000     LNK #0x0
8895:              TRISFbits.TRISF13=0;
00999A  A9AE51     BCLR 0xE51, #5
8896:              TRISAbits.TRISA1=1;
00999C  A82E00     BSET TRISA, #1
8897:              //ANSELCbits.ANSC3=0;
8898:              RPINR27bits.U3RXR=17;
00999E  8036B5     MOV RPINR27, W5
0099A0  2FF804     MOV #0xFF80, W4
0099A2  628204     AND W5, W4, W4
0099A4  B30114     IOR #0x11, W4
0099A6  8836B4     MOV W4, RPINR27
8899:              RPOR12bits.RP109R=0b011011;
0099A8  8034C5     MOV RPOR12, W5
0099AA  2FFC04     MOV #0xFFC0, W4
0099AC  628204     AND W5, W4, W4
0099AE  B301B4     IOR #0x1B, W4
0099B0  8834C4     MOV W4, RPOR12
8900:              }
0099B2  FA8000     ULNK
0099B4  060000     RETURN
8901:              
8902:              
8903:              void __attribute__((interrupt, auto_psv))   _U3RXInterrupt()
8904:              {																	//?????????????????????????????????????????????????? ?????????? ?????????????????????????????? ????????????????????????? UART2
0099B6  F80036     PUSH RCOUNT
0099B8  BE9F80     MOV.D W0, [W15++]
0099BA  BE9F82     MOV.D W2, [W15++]
0099BC  BE9F84     MOV.D W4, [W15++]
0099BE  BE9F86     MOV.D W6, [W15++]
0099C0  F80032     PUSH DSRPAG
0099C2  202000     MOV #0x200, W0
0099C4  880190     MOV W0, DSRPAG
0099C6  000000     NOP
0099C8  FA0004     LNK #0x4
8905:              																	// ????????????????????????? ?????????? ???????????????????????????????????????????????????????
8906:              unsigned char BtRc;
8907:              	BtRc=U3RXREG;
0099CA  8012B4     MOV U3RXREG, W4
0099CC  784F04     MOV.B W4, [W14]
8908:              	IFS5bits.U3RXIF = 0;					// ????????????????????????? ?????????????????????????
0099CE  A9480A     BCLR IFS5, #2
8909:              
8910:                      if (U3STAbits.OERR)
0099D0  801294     MOV U3STA, W4
0099D2  620262     AND W4, #0x2, W4
0099D4  520FE0     SUB W4, #0x0, [W15]
0099D6  320001     BRA Z, 0x99DA
8911:                      {
8912:                          U3STAbits.OERR=0;
0099D8  A92252     BCLR U3STA, #1
8913:                      }
8914:              
8915:              if (!GettingPacketU3_FL)//???????????????????? ???????????????????? ??????????????????????????????????????????????????, ???????????????????? ??????????????????????????????????? ????????????????????????? ??????????????????????????????
0099DA  8095E4     MOV Flgs, W4
0099DC  620262     AND W4, #0x2, W4
0099DE  520FE0     SUB W4, #0x0, [W15]
0099E0  3A0015     BRA NZ, 0x9A0C
8916:              {
8917:              	if ((BtRc==BtRcPrev_U3)&&(BtRc==0xff))
0099E2  214094     MOV #0x1409, W4
0099E4  784214     MOV.B [W4], W4
0099E6  78429E     MOV.B [W14], W5
0099E8  52CF84     SUB.B W5, W4, [W15]
0099EA  3A000D     BRA NZ, 0x9A06
0099EC  78421E     MOV.B [W14], W4
0099EE  424FE1     ADD.B W4, #0x1, [W15]
0099F0  3A000A     BRA NZ, 0x9A06
8918:              	{
8919:              	BtRcPrev_U3=0; //??????????????????????????????????? ??????????????? ????????????????????????? 0xff ??????????????????????????????, ?????????????????????????????? ????????????????????????? ??????????????????????????????
0099F2  214095     MOV #0x1409, W5
0099F4  EB4200     CLR.B W4
0099F6  784A84     MOV.B W4, [W5]
8920:              	GettingPacketU3_FL=1;
0099F8  8095E4     MOV Flgs, W4
0099FA  A01004     BSET W4, #1
0099FC  8895E4     MOV W4, Flgs
8921:              	CntRec_U3=0;
0099FE  2140A5     MOV #0x140A, W5
009A00  EB4200     CLR.B W4
009A02  784A84     MOV.B W4, [W5]
009A04  370070     BRA 0x9AE6
8922:              	}
8923:              	else
8924:              	{
8925:              	BtRcPrev_U3=BtRc; //????????????????????????????????????????????? ???????????????????????????????????????? ????????????????????
009A06  214094     MOV #0x1409, W4
009A08  784A1E     MOV.B [W14], [W4]
009A0A  37006D     BRA 0x9AE6
8926:              	}
8927:              }
8928:              else
8929:              {
8930:              	if (CntRec_U3>30)
009A0C  2140A4     MOV #0x140A, W4
009A0E  784214     MOV.B [W4], W4
009A10  524FFE     SUB.B W4, #0x1E, [W15]
009A12  360004     BRA LEU, 0x9A1C
8931:              	GettingPacketU3_FL=0; //???????????????????? ??????????????????????????????????? ??????????????????????????????????????????????????????? ???????????????????? ???????????????????????????????????????? ?????????????????????????????? ???????????????????????????????????, ???????????????-??????????????? ?????????????????????????????? - ???????????????????????????????????????? ?????????????????????????
009A14  8095E4     MOV Flgs, W4
009A16  A11004     BCLR W4, #1
009A18  8895E4     MOV W4, Flgs
009A1A  370065     BRA 0x9AE6
8932:              	else
8933:              	{
8934:              	PacketRec_U3[CntRec_U3]=BtRc; //?????????????????????????????? ????????????????????????? ????? ?????????????????????????????? ??????????????????????????????
009A1C  2140A4     MOV #0x140A, W4
009A1E  784214     MOV.B [W4], W4
009A20  FB8204     ZE W4, W4
009A22  214345     MOV #0x1434, W5
009A24  428204     ADD W5, W4, W4
009A26  784A1E     MOV.B [W14], [W4]
8935:              	CntRec_U3++; //????????????????????????????????????????????? ???????????????????????????????????????? ???????????????????????????????????????? ????????????????????
009A28  2140A4     MOV #0x140A, W4
009A2A  784214     MOV.B [W4], W4
009A2C  E84204     INC.B W4, W4
009A2E  2140A5     MOV #0x140A, W5
009A30  784A84     MOV.B W4, [W5]
8936:              		if (CntRec_U3>(PacketRec_U3[0]+1))//????? RecArray[0] ????????????????????????? ?????????????????????????????????????????????????? ????????????????????????? N+1
009A32  2140A4     MOV #0x140A, W4
009A34  784214     MOV.B [W4], W4
009A36  FB8284     ZE W4, W5
009A38  214344     MOV #0x1434, W4
009A3A  784214     MOV.B [W4], W4
009A3C  FB8204     ZE W4, W4
009A3E  E80204     INC W4, W4
009A40  528F84     SUB W5, W4, [W15]
009A42  340051     BRA LE, 0x9AE6
8937:              		{
8938:              		GettingPacketU3_FL=0; //??????????????????????????????????? ??????????????? ?????????????????????????
009A44  8095E4     MOV Flgs, W4
009A46  A11004     BCLR W4, #1
009A48  8895E4     MOV W4, Flgs
8939:                              
8940:                              TiltTimoutCnt=TiltTimoutConst;
009A4A  216D44     MOV #0x16D4, W4
009A4C  784214     MOV.B [W4], W4
009A4E  216D35     MOV #0x16D3, W5
009A50  784A84     MOV.B W4, [W5]
8941:              
8942:                  			if (CalcCheckSumm(PacketRec_U3[0]+1, PacketRec_U3)!=PacketRec_U3[PacketRec_U3[0]+1])//???????????????????????????????????????? ??????????????????????????????????????????????????????? ?????????????????????????
009A52  214344     MOV #0x1434, W4
009A54  784214     MOV.B [W4], W4
009A56  FB8204     ZE W4, W4
009A58  E80204     INC W4, W4
009A5A  214341     MOV #0x1434, W1
009A5C  780004     MOV W4, W0
009A5E  07004B     RCALL CalcCheckSumm
009A60  784200     MOV.B W0, W4
009A62  214345     MOV #0x1434, W5
009A64  784295     MOV.B [W5], W5
009A66  FB8285     ZE W5, W5
009A68  E80285     INC W5, W5
009A6A  214346     MOV #0x1434, W6
009A6C  430285     ADD W6, W5, W5
009A6E  784295     MOV.B [W5], W5
009A70  524F85     SUB.B W4, W5, [W15]
009A72  320004     BRA Z, 0x9A7C
8943:              			{
8944:              			CHK_Err_U3=1; //?????????????????????????????? ??????????????????????????????????????????????????????? ?????????????????????????
009A74  8095E4     MOV Flgs, W4
009A76  A02004     BSET W4, #2
009A78  8895E4     MOV W4, Flgs
009A7A  370035     BRA 0x9AE6
8945:              			}
8946:              			else
8947:              			{
8948:                                      
8949:                                  if (PacketRec_U3[1]!=57)
009A7C  214354     MOV #0x1435, W4
009A7E  784294     MOV.B [W4], W5
009A80  B3C394     MOV.B #0x39, W4
009A82  52CF84     SUB.B W5, W4, [W15]
009A84  320004     BRA Z, 0x9A8E
8950:                                          HvDataPacketU3_FL=1;
009A86  8095E4     MOV Flgs, W4
009A88  A03004     BSET W4, #3
009A8A  8895E4     MOV W4, Flgs
009A8C  37002C     BRA 0x9AE6
8951:                                  else
8952:                                  {
8953:                                      
8954:                                      if ((PacketRec_U3[2]==0)&&(PacketRec_U3[3]==0x73)&&(PacketRec_U3[4]==0xb2))
009A8E  214364     MOV #0x1436, W4
009A90  784214     MOV.B [W4], W4
009A92  524FE0     SUB.B W4, #0x0, [W15]
009A94  3A0028     BRA NZ, 0x9AE6
009A96  214374     MOV #0x1437, W4
009A98  784294     MOV.B [W4], W5
009A9A  B3C734     MOV.B #0x73, W4
009A9C  52CF84     SUB.B W5, W4, [W15]
009A9E  3A0023     BRA NZ, 0x9AE6
009AA0  214384     MOV #0x1438, W4
009AA2  784294     MOV.B [W4], W5
009AA4  B3CB24     MOV.B #0xB2, W4
009AA6  52CF84     SUB.B W5, W4, [W15]
009AA8  3A001E     BRA NZ, 0x9AE6
8955:                                      {
8956:                                          int Tm=PacketRec_U3[6];
009AAA  2143A4     MOV #0x143A, W4
009AAC  784214     MOV.B [W4], W4
009AAE  FB8204     ZE W4, W4
009AB0  980714     MOV W4, [W14+2]
8957:                                          Tm=Tm<<8;
009AB2  90021E     MOV [W14+2], W4
009AB4  DD2248     SL W4, #8, W4
009AB6  980714     MOV W4, [W14+2]
8958:                                          Tm=Tm+PacketRec_U3[5];
009AB8  214394     MOV #0x1439, W4
009ABA  784214     MOV.B [W4], W4
009ABC  FB8204     ZE W4, W4
009ABE  90029E     MOV [W14+2], W5
009AC0  428204     ADD W5, W4, W4
009AC2  980714     MOV W4, [W14+2]
8959:                                          if (Tm==SerNumber)
009AC4  90029E     MOV [W14+2], W5
009AC6  81BAA4     MOV SerNumber, W4
009AC8  528F84     SUB W5, W4, [W15]
009ACA  3A000D     BRA NZ, 0x9AE6
8960:                                          {
8961:                                           	U4MODE = 0;
009ACC  EB0200     CLR W4
009ACE  881584     MOV W4, U4MODE
8962:                                              U4_9600=1;
009AD0  8096D4     MOV 0x12DA, W4
009AD2  A01004     BSET W4, #1
009AD4  8896D4     MOV W4, 0x12DA
8963:                                              MODE_LED=1;
009AD6  A8EE65     BSET 0xE65, #7
8964:                                              UARTInit_U4();
009AD8  073CFC     RCALL UARTInit_U4
8965:                                              SoundNum=2;    
009ADA  2124B5     MOV #0x124B, W5
009ADC  B3C024     MOV.B #0x2, W4
009ADE  784A84     MOV.B W4, [W5]
8966:                                              Locked=0;
009AE0  809694     MOV 0x12D2, W4
009AE2  A16004     BCLR W4, #6
009AE4  889694     MOV W4, 0x12D2
8967:                                          }
8968:                                      }
8969:                                          
8970:              
8971:                                  }
8972:                                          
8973:                                           
8974:              			}
8975:              		}
8976:              	}
8977:              }
8978:              
8979:              
8980:              
8981:              
8982:              
8983:              }
009AE6  FA8000     ULNK
009AE8  F90032     POP DSRPAG
009AEA  BE034F     MOV.D [--W15], W6
009AEC  BE024F     MOV.D [--W15], W4
009AEE  BE014F     MOV.D [--W15], W2
009AF0  BE004F     MOV.D [--W15], W0
009AF2  F90036     POP RCOUNT
009AF4  064000     RETFIE
8984:              //UART 3  End
8985:              
8986:              
8987:              unsigned char CalcCheckSumm(unsigned int N, unsigned char *Mass)
8988:              {
009AF6  FA000A     LNK #0xA
009AF8  980730     MOV W0, [W14+6]
009AFA  980741     MOV W1, [W14+8]
8989:              	unsigned int Summ=0,j,n=N;
009AFC  EB0200     CLR W4
009AFE  780F04     MOV W4, [W14]
009B00  90023E     MOV [W14+6], W4
009B02  980724     MOV W4, [W14+4]
8990:              
8991:              	for (j=0;j<n;j++)
009B04  EB0200     CLR W4
009B06  980714     MOV W4, [W14+2]
009B08  370009     BRA 0x9B1C
009B16  90021E     MOV [W14+2], W4
009B18  E80204     INC W4, W4
009B1A  980714     MOV W4, [W14+2]
009B1C  90029E     MOV [W14+2], W5
009B1E  90022E     MOV [W14+4], W4
009B20  528F84     SUB W5, W4, [W15]
009B22  39FFF3     BRA NC, 0x9B0A
8992:              	Summ=Summ+Mass[j];
009B0A  9002CE     MOV [W14+8], W5
009B0C  90021E     MOV [W14+2], W4
009B0E  428204     ADD W5, W4, W4
009B10  784214     MOV.B [W4], W4
009B12  FB8204     ZE W4, W4
009B14  420F1E     ADD W4, [W14], [W14]
8993:              
8994:              	Summ=~Summ;
009B24  EA8F1E     COM [W14], [W14]
8995:              
8996:              	return (unsigned char) Summ;
009B26  78021E     MOV [W14], W4
009B28  784204     MOV.B W4, W4
8997:              
8998:              }
009B2A  784004     MOV.B W4, W0
009B2C  FA8000     ULNK
009B2E  060000     RETURN
8999:              
9000:              
9001:              
9002:              
9003:              void ReceiveUDP(void)
9004:              {
009B30  FA00E6     LNK #0xE6
009B32  BE9F88     MOV.D W8, [W15++]
9005:              int *Ptr;
9006:              unsigned char Cmmd,Cm;
9007:              if (Hv_HC05)
009B34  8096D5     MOV 0x12DA, W5
009B36  200404     MOV #0x40, W4
009B38  628204     AND W5, W4, W4
009B3A  520FE0     SUB W4, #0x0, [W15]
009B3C  320009     BRA Z, 0x9B50
9008:              {
9009:                  if (!HvPacketU4_FL)
009B3E  809624     MOV Flgs2, W4
009B40  620262     AND W4, #0x2, W4
009B42  520FE0     SUB W4, #0x0, [W15]
009B44  321A4E     BRA Z, 0xCFE2
9010:                      return;
00CFE2  000000     NOP
00CFE4  37002F     BRA 0xD044
9011:                  HvPacketU4_FL=0;
009B46  809624     MOV Flgs2, W4
009B48  A11004     BCLR W4, #1
009B4A  889624     MOV W4, Flgs2
9012:                  Cmmd=RecBytes[1];
009B4C  229274     MOV #0x2927, W4
009B4E  784F14     MOV.B [W4], [W14]
9013:              }
9014:              if (Locked)
009B50  809695     MOV 0x12D2, W5
009B52  200404     MOV #0x40, W4
009B54  628204     AND W5, W4, W4
009B56  520FE0     SUB W4, #0x0, [W15]
009B58  320141     BRA Z, 0x9DDC
9015:              {
9016:                  if (Cmmd!=113)
009B5A  B3C714     MOV.B #0x71, W4
009B5C  78429E     MOV.B [W14], W5
009B5E  52CF84     SUB.B W5, W4, [W15]
009B60  320001     BRA Z, 0x9B64
9017:                      Nop();
009B62  000000     NOP
9018:                  
9019:                                      switch (Cmmd)
009B64  78429E     MOV.B [W14], W5
009B66  FB8205     ZE W5, W4
009B68  200925     MOV #0x92, W5
009B6A  520F85     SUB W4, W5, [W15]
009B6C  320023     BRA Z, 0x9BB4
009B6E  200925     MOV #0x92, W5
009B70  520F85     SUB W4, W5, [W15]
009B72  3C0009     BRA GT, 0x9B86
009B74  200715     MOV #0x71, W5
009B76  520F85     SUB W4, W5, [W15]
009B78  320015     BRA Z, 0x9BA4
009B7A  200725     MOV #0x72, W5
009B7C  520F85     SUB W4, W5, [W15]
009B7E  320016     BRA Z, 0x9BAC
009B80  520FEE     SUB W4, #0xE, [W15]
009B82  32000B     BRA Z, 0x9B9A
009B84  370121     BRA 0x9DC8
009B86  200F45     MOV #0xF4, W5
009B88  520F85     SUB W4, W5, [W15]
009B8A  3200B5     BRA Z, 0x9CF6
009B8C  200FE5     MOV #0xFE, W5
009B8E  520F85     SUB W4, W5, [W15]
009B90  3200B9     BRA Z, 0x9D04
009B92  200F35     MOV #0xF3, W5
009B94  520F85     SUB W4, W5, [W15]
009B96  320035     BRA Z, 0x9C02
009B98  370117     BRA 0x9DC8
9020:                                      {
9021:                                          case 14:
9022:                                          {
9023:                                             OptionsToMass();
009B9A  071E29     RCALL OptionsToMass
9024:                                             MustTrmFlashMass=1;
009B9C  8095F4     MOV 0x12BE, W4
009B9E  A02004     BSET W4, #2
009BA0  8895F4     MOV W4, 0x12BE
9025:                                             break;
009BA2  371A50     BRA 0xD044
9026:                                          }
9027:                                          case 113:
9028:                                          {
9029:                                             MustSendDataPacket=1;
009BA4  809644     MOV Flgs3, W4
009BA6  A07004     BSET W4, #7
009BA8  889644     MOV W4, Flgs3
9030:                                             break;
009BAA  371A4C     BRA 0xD044
9031:                                          }
9032:                                          case 114:
9033:                                          {
9034:                                              NoAutoTrm=1;
009BAC  809744     MOV StatFlgs, W4
009BAE  A0A004     BSET W4, #10
009BB0  889744     MOV W4, StatFlgs
9035:                                             break;
009BB2  371A48     BRA 0xD044
9036:                                          }
9037:                                          
9038:                                          
9039:                                        case 146:
9040:                                          {
9041:                                              if ((RecBytes[2]>0)&&(RecBytes[2]<4))
009BB4  229284     MOV #0x2928, W4
009BB6  784214     MOV.B [W4], W4
009BB8  524FE0     SUB.B W4, #0x0, [W15]
009BBA  321A15     BRA Z, 0xCFE6
009BBC  229284     MOV #0x2928, W4
009BBE  784214     MOV.B [W4], W4
009BC0  524FE3     SUB.B W4, #0x3, [W15]
009BC2  3E1A13     BRA GTU, 0xCFEA
9042:                                              {
9043:                                             Profile=RecBytes[2];
009BC4  229284     MOV #0x2928, W4
009BC6  784214     MOV.B [W4], W4
009BC8  237E25     MOV #0x37E2, W5
009BCA  784A84     MOV.B W4, [W5]
9044:                                             MassToOptionsProfile();
009BCC  077EBE     RCALL MassToOptionsProfile
9045:                                             OptionsToMass();
009BCE  071E0F     RCALL OptionsToMass
9046:                                             MustTrmFlashMass=1;
009BD0  8095F4     MOV 0x12BE, W4
009BD2  A02004     BSET W4, #2
009BD4  8895F4     MOV W4, 0x12BE
9047:                                             
9048:                                              switch (Profile)
009BD6  237E24     MOV #0x37E2, W4
009BD8  784214     MOV.B [W4], W4
009BDA  FB8204     ZE W4, W4
009BDC  520FE2     SUB W4, #0x2, [W15]
009BDE  320008     BRA Z, 0x9BF0
009BE0  520FE3     SUB W4, #0x3, [W15]
009BE2  32000A     BRA Z, 0x9BF8
009BE4  520FE1     SUB W4, #0x1, [W15]
009BE6  3A1A03     BRA NZ, 0xCFEE
9049:                                              {
9050:                                              case 1:
9051:                                              SoundNum=15;
009BE8  2124B5     MOV #0x124B, W5
009BEA  B3C0F4     MOV.B #0xF, W4
009BEC  784A84     MOV.B W4, [W5]
9052:                                              break;
009BEE  370008     BRA 0x9C00
9053:                                              case 2:
9054:                                              SoundNum=16;
009BF0  2124B5     MOV #0x124B, W5
009BF2  B3C104     MOV.B #0x10, W4
009BF4  784A84     MOV.B W4, [W5]
9055:                                              break;
009BF6  370004     BRA 0x9C00
9056:                                              case 3:
9057:                                              SoundNum=17;
009BF8  2124B5     MOV #0x124B, W5
009BFA  B3C114     MOV.B #0x11, W4
009BFC  784A84     MOV.B W4, [W5]
9058:                                              break;
009BFE  000000     NOP
9059:                                              }
9060:                                              }
9061:                                             
9062:                                             break;
009C00  371A21     BRA 0xD044
00CFE6  000000     NOP
00CFE8  37002D     BRA 0xD044
00CFEA  000000     NOP
00CFEC  37002B     BRA 0xD044
00CFEE  000000     NOP
00CFF0  370029     BRA 0xD044
9063:                                          }
9064:                                        
9065:                                        
9066:                                                                    
9067:                                          
9068:                                          
9069:                                          case 243:
9070:                                          {
9071:              if ((RecBytes[2]==0x37)&&(RecBytes[3]==0xac)&&(RecBytes[4]==0x2b)&&(RecBytes[5]==0x33)&&(RecBytes[6]==0xf1)&&(RecBytes[7]==0x91)&&(RecBytes[8]==0x7a)&&(RecBytes[9]==0xb0)&&(RecBytes[10]==0xec)&&(RecBytes[11]==0x46)&&(RecBytes[12]==0x10)&&(RecBytes[13]==0xaa))
009C02  229284     MOV #0x2928, W4
009C04  784294     MOV.B [W4], W5
009C06  B3C374     MOV.B #0x37, W4
009C08  52CF84     SUB.B W5, W4, [W15]
009C0A  3A19F3     BRA NZ, 0xCFF2
009C0C  229294     MOV #0x2929, W4
009C0E  784294     MOV.B [W4], W5
009C10  B3CAC4     MOV.B #0xAC, W4
009C12  52CF84     SUB.B W5, W4, [W15]
009C14  3A19F0     BRA NZ, 0xCFF6
009C16  2292A4     MOV #0x292A, W4
009C18  784294     MOV.B [W4], W5
009C1A  B3C2B4     MOV.B #0x2B, W4
009C1C  52CF84     SUB.B W5, W4, [W15]
009C1E  3A19ED     BRA NZ, 0xCFFA
009C20  2292B4     MOV #0x292B, W4
009C22  784294     MOV.B [W4], W5
009C24  B3C334     MOV.B #0x33, W4
009C26  52CF84     SUB.B W5, W4, [W15]
009C28  3A19EA     BRA NZ, 0xCFFE
009C2A  2292C4     MOV #0x292C, W4
009C2C  784214     MOV.B [W4], W4
009C2E  424FEF     ADD.B W4, #0xF, [W15]
009C30  3A19E8     BRA NZ, 0xD002
009C32  2292D4     MOV #0x292D, W4
009C34  784294     MOV.B [W4], W5
009C36  B3C914     MOV.B #0x91, W4
009C38  52CF84     SUB.B W5, W4, [W15]
009C3A  3A19E5     BRA NZ, 0xD006
009C3C  2292E4     MOV #0x292E, W4
009C3E  784294     MOV.B [W4], W5
009C40  B3C7A4     MOV.B #0x7A, W4
009C42  52CF84     SUB.B W5, W4, [W15]
009C44  3A19E2     BRA NZ, 0xD00A
009C46  2292F4     MOV #0x292F, W4
009C48  784294     MOV.B [W4], W5
009C4A  B3CB04     MOV.B #0xB0, W4
009C4C  52CF84     SUB.B W5, W4, [W15]
009C4E  3A19DF     BRA NZ, 0xD00E
009C50  229304     MOV #0x2930, W4
009C52  784214     MOV.B [W4], W4
009C54  424FF4     ADD.B W4, #0x14, [W15]
009C56  3A19DD     BRA NZ, 0xD012
009C58  229314     MOV #0x2931, W4
009C5A  784294     MOV.B [W4], W5
009C5C  B3C464     MOV.B #0x46, W4
009C5E  52CF84     SUB.B W5, W4, [W15]
009C60  3A19DA     BRA NZ, 0xD016
009C62  229324     MOV #0x2932, W4
009C64  784214     MOV.B [W4], W4
009C66  524FF0     SUB.B W4, #0x10, [W15]
009C68  3A19D8     BRA NZ, 0xD01A
009C6A  229334     MOV #0x2933, W4
009C6C  784294     MOV.B [W4], W5
009C6E  B3CAA4     MOV.B #0xAA, W4
009C70  52CF84     SUB.B W5, W4, [W15]
009C72  3A19D5     BRA NZ, 0xD01E
9072:                  {
9073:                  //PinCodeMassOptionsUnlock  StringPINLenghtOptionsUnlock
9074:              #if !defined BLE
9075:                  LockTMR=450000;
9076:                  SoundNum=19;
9077:                  Locked=0;
9078:              
9079:              #else
9080:                  LockTMR=450000;
009C74  2DDD04     MOV #0xDDD0, W4
009C76  200065     MOV #0x6, W5
009C78  8A0154     MOV W4, LockTMR
009C7A  8A0165     MOV W5, 0x402C
9081:                  
9082:                  
9083:                  if (!StringPINLenghtOptions)
009C7C  230AC4     MOV #0x30AC, W4
009C7E  784214     MOV.B [W4], W4
009C80  524FE0     SUB.B W4, #0x0, [W15]
009C82  3A0004     BRA NZ, 0x9C8C
9084:                  Locked=0;
009C84  809694     MOV 0x12D2, W4
009C86  A16004     BCLR W4, #6
009C88  889694     MOV W4, 0x12D2
009C8A  370028     BRA 0x9CDC
9085:                  else
9086:                  {
9087:                      Locked=0;
009C8C  809694     MOV 0x12D2, W4
009C8E  A16004     BCLR W4, #6
009C90  889694     MOV W4, 0x12D2
9088:                      int i;
9089:                      for (i=0;i<StringPINLenghtOptions;i++)
009C92  EB0200     CLR W4
009C94  980714     MOV W4, [W14+2]
009C96  370010     BRA 0x9CB8
009CB2  90021E     MOV [W14+2], W4
009CB4  E80204     INC W4, W4
009CB6  980714     MOV W4, [W14+2]
009CB8  230AC4     MOV #0x30AC, W4
009CBA  784214     MOV.B [W4], W4
009CBC  FB8284     ZE W4, W5
009CBE  90021E     MOV [W14+2], W4
009CC0  528F84     SUB W5, W4, [W15]
009CC2  3CFFEA     BRA GT, 0x9C98
9090:                      {
9091:                          if (PinCodeMassOptions[i]!=PinCodeMassOptionsUnlock[i])
009C98  217555     MOV #0x1755, W5
009C9A  90021E     MOV [W14+2], W4
009C9C  428204     ADD W5, W4, W4
009C9E  784294     MOV.B [W4], W5
009CA0  2175B6     MOV #0x175B, W6
009CA2  90021E     MOV [W14+2], W4
009CA4  430204     ADD W6, W4, W4
009CA6  784214     MOV.B [W4], W4
009CA8  52CF84     SUB.B W5, W4, [W15]
009CAA  320003     BRA Z, 0x9CB2
9092:                              Locked=1;
009CAC  809694     MOV 0x12D2, W4
009CAE  A06004     BSET W4, #6
009CB0  889694     MOV W4, 0x12D2
9093:                      }
9094:                      if (StringPINLenghtOptions!=StringPINLenghtOptionsUnlock)
009CC4  230AC4     MOV #0x30AC, W4
009CC6  784294     MOV.B [W4], W5
009CC8  230AD4     MOV #0x30AD, W4
009CCA  784214     MOV.B [W4], W4
009CCC  52CF84     SUB.B W5, W4, [W15]
009CCE  320003     BRA Z, 0x9CD6
9095:                              Locked=1;
009CD0  809694     MOV 0x12D2, W4
009CD2  A06004     BSET W4, #6
009CD4  889694     MOV W4, 0x12D2
9096:                      StringPINLenghtOptionsUnlock=0;
009CD6  230AD5     MOV #0x30AD, W5
009CD8  EB4200     CLR.B W4
009CDA  784A84     MOV.B W4, [W5]
9097:                  }
9098:                              if (!Locked)
009CDC  809695     MOV 0x12D2, W5
009CDE  200404     MOV #0x40, W4
009CE0  628204     AND W5, W4, W4
009CE2  520FE0     SUB W4, #0x0, [W15]
009CE4  3A0004     BRA NZ, 0x9CEE
9099:                              SoundNum=19;
009CE6  2124B5     MOV #0x124B, W5
009CE8  B3C134     MOV.B #0x13, W4
009CEA  784A84     MOV.B W4, [W5]
9100:                              else
9101:                              SoundNum=9;
009CEE  2124B5     MOV #0x124B, W5
009CF0  B3C094     MOV.B #0x9, W4
009CF2  784A84     MOV.B W4, [W5]
9102:              #endif
9103:                  }
9104:                                             break;
009CEC  3719AB     BRA 0xD044
009CF4  3719A7     BRA 0xD044
00CFF2  000000     NOP
00CFF4  370027     BRA 0xD044
00CFF6  000000     NOP
00CFF8  370025     BRA 0xD044
00CFFA  000000     NOP
00CFFC  370023     BRA 0xD044
00CFFE  000000     NOP
00D000  370021     BRA 0xD044
00D002  000000     NOP
00D004  37001F     BRA 0xD044
00D006  000000     NOP
00D008  37001D     BRA 0xD044
00D00A  000000     NOP
00D00C  37001B     BRA 0xD044
00D00E  000000     NOP
00D010  370019     BRA 0xD044
00D012  000000     NOP
00D014  370017     BRA 0xD044
00D016  000000     NOP
00D018  370015     BRA 0xD044
00D01A  000000     NOP
00D01C  370013     BRA 0xD044
00D01E  000000     NOP
00D020  370011     BRA 0xD044
9105:                                          }
9106:                                          case 244:
9107:                                          {
9108:                                             OptionsToMass();
009CF6  071D7B     RCALL OptionsToMass
9109:                                             MustTrmFlashMass=1;
009CF8  8095F4     MOV 0x12BE, W4
009CFA  A02004     BSET W4, #2
009CFC  8895F4     MOV W4, 0x12BE
9110:                                             TimerCntWhenLock=700;
009CFE  202BC4     MOV #0x2BC, W4
009D00  89BD64     MOV W4, TimerCntWhenLock
9111:                                             break;
009D02  3719A0     BRA 0xD044
9112:                                          }
9113:                                          
9114:                                          case 254:
9115:                                          {
9116:                                             Cm=RecBytes[2];
009D04  229284     MOV #0x2928, W4
009D06  784294     MOV.B [W4], W5
009D08  985725     MOV.B W5, [W14+18]
9117:              
9118:                                                 switch (Cm)
009D0A  90522E     MOV.B [W14+18], W4
009D0C  FB8204     ZE W4, W4
009D0E  200405     MOV #0x40, W5
009D10  520F85     SUB W4, W5, [W15]
009D12  32000D     BRA Z, 0x9D2E
009D14  200405     MOV #0x40, W5
009D16  520F85     SUB W4, W5, [W15]
009D18  3C0003     BRA GT, 0x9D20
009D1A  520FE1     SUB W4, #0x1, [W15]
009D1C  320050     BRA Z, 0x9DBE
009D1E  370045     BRA 0x9DAA
009D20  200415     MOV #0x41, W5
009D22  520F85     SUB W4, W5, [W15]
009D24  320021     BRA Z, 0x9D68
009D26  2005B5     MOV #0x5B, W5
009D28  520F85     SUB W4, W5, [W15]
009D2A  320033     BRA Z, 0x9D92
009D2C  37003E     BRA 0x9DAA
9119:                                                 {
9120:                                                  case 1:
9121:                                                  break;
009DBE  000000     NOP
009DC0  370001     BRA 0x9DC4
9122:              
9123:                                                  case 64:
9124:                                                  {
9125:                                                      unsigned char p;
9126:                                                  
9127:                                                     for (p=0;p<(RecBytes[0]-2);p++)
009D2E  EB4200     CLR.B W4
009D30  984744     MOV.B W4, [W14+4]
009D32  37000E     BRA 0x9D50
009D4A  90424E     MOV.B [W14+4], W4
009D4C  E84204     INC.B W4, W4
009D4E  984744     MOV.B W4, [W14+4]
009D50  90424E     MOV.B [W14+4], W4
009D52  FB8284     ZE W4, W5
009D54  229264     MOV #0x2926, W4
009D56  784214     MOV.B [W4], W4
009D58  FB8204     ZE W4, W4
009D5A  E98204     DEC2 W4, W4
009D5C  528F84     SUB W5, W4, [W15]
009D5E  35FFEA     BRA LT, 0x9D34
9128:                                                         PinCodeMassOptionsUnlock[p]=RecBytes[p+3];
009D34  90424E     MOV.B [W14+4], W4
009D36  FB8284     ZE W4, W5
009D38  90424E     MOV.B [W14+4], W4
009D3A  FB8204     ZE W4, W4
009D3C  420263     ADD W4, #0x3, W4
009D3E  229266     MOV #0x2926, W6
009D40  430204     ADD W6, W4, W4
009D42  784214     MOV.B [W4], W4
009D44  2175B6     MOV #0x175B, W6
009D46  430285     ADD W6, W5, W5
009D48  784A84     MOV.B W4, [W5]
9129:                                                      StringPINLenghtOptionsUnlock=p;
009D60  230AD4     MOV #0x30AD, W4
009D62  9042CE     MOV.B [W14+4], W5
009D64  784A05     MOV.B W5, [W4]
9130:                                                      break;
009D66  37002E     BRA 0x9DC4
9131:                                                  }
9132:                                                     case 65:
9133:                                                         if (ResetPassWordCnt&&(Sensor1_Prev==1))
009D68  8213B4     MOV ResetPassWordCnt, W4
009D6A  520FE0     SUB W4, #0x0, [W15]
009D6C  32000E     BRA Z, 0x9D8A
009D6E  212474     MOV #0x1247, W4
009D70  784214     MOV.B [W4], W4
009D72  524FE1     SUB.B W4, #0x1, [W15]
009D74  3A000A     BRA NZ, 0x9D8A
9134:                                                         {
9135:                                                             StringPINLenghtOptions=0;
009D76  230AC5     MOV #0x30AC, W5
009D78  EB4200     CLR.B W4
009D7A  784A84     MOV.B W4, [W5]
9136:                                                             Locked=0;
009D7C  809694     MOV 0x12D2, W4
009D7E  A16004     BCLR W4, #6
009D80  889694     MOV W4, 0x12D2
9137:                                                             SoundNum=19;
009D82  2124B5     MOV #0x124B, W5
009D84  B3C134     MOV.B #0x13, W4
009D86  784A84     MOV.B W4, [W5]
9138:                                                         }
9139:                                                         else
9140:                                                             SoundNum=9;
009D8A  2124B5     MOV #0x124B, W5
009D8C  B3C094     MOV.B #0x9, W4
009D8E  784A84     MOV.B W4, [W5]
9141:                                                         break;
009D88  37001D     BRA 0x9DC4
009D90  370019     BRA 0x9DC4
9142:                                                         
9143:                                                         
9144:                                                      case 91:
9145:                                                          {
9146:                                                          SoundNum=12;
009D92  2124B5     MOV #0x124B, W5
009D94  B3C0C4     MOV.B #0xC, W4
009D96  784A84     MOV.B W4, [W5]
9147:                                                          LightMode=RecBytes[3];
009D98  229294     MOV #0x2929, W4
009D9A  784214     MOV.B [W4], W4
009D9C  2308E5     MOV #0x308E, W5
009D9E  784A84     MOV.B W4, [W5]
9148:                                                          OptionsToMass();
009DA0  071D26     RCALL OptionsToMass
9149:                                                          MustTrmFlashMass=1;
009DA2  8095F4     MOV 0x12BE, W4
009DA4  A02004     BSET W4, #2
009DA6  8895F4     MOV W4, 0x12BE
9150:                                                          break;
009DA8  37000D     BRA 0x9DC4
9151:                                                          }
9152:                                                         
9153:                                                         
9154:                                                  default:
9155:                                                  {
9156:                                                       if (!TimerCntWhenLock)
009DAA  81BD64     MOV TimerCntWhenLock, W4
009DAC  520FE0     SUB W4, #0x0, [W15]
009DAE  3A0009     BRA NZ, 0x9DC2
9157:                                                      {
9158:                                                      SendUnlockMSG=1;
009DB0  809694     MOV 0x12D2, W4
009DB2  A07004     BSET W4, #7
009DB4  889694     MOV W4, 0x12D2
9159:                                                      SoundNum=9;
009DB6  2124B5     MOV #0x124B, W5
009DB8  B3C094     MOV.B #0x9, W4
009DBA  784A84     MOV.B W4, [W5]
9160:                                                      }
9161:                                                      break;
009DBC  370003     BRA 0x9DC4
009DC2  000000     NOP
9162:                                                  }
9163:                                                 }
9164:                                           break;     
009DC4  000000     NOP
009DC6  37193E     BRA 0xD044
9165:                                          }
9166:                                           
9167:                                          default:
9168:                                          {
9169:                                              if (!TimerCntWhenLock)
009DC8  81BD64     MOV TimerCntWhenLock, W4
009DCA  520FE0     SUB W4, #0x0, [W15]
009DCC  3A192A     BRA NZ, 0xD022
9170:                                              {
9171:                                              SendUnlockMSG=1;
009DCE  809694     MOV 0x12D2, W4
009DD0  A07004     BSET W4, #7
009DD2  889694     MOV W4, 0x12D2
9172:                                              SoundNum=9;
009DD4  2124B5     MOV #0x124B, W5
009DD6  B3C094     MOV.B #0x9, W4
009DD8  784A84     MOV.B W4, [W5]
9173:                                              }
9174:                                              break;
009DDA  371934     BRA 0xD044
00D022  000000     NOP
00D024  37000F     BRA 0xD044
9175:                                          }
9176:                                      }
9177:              }
9178:              else
9179:              {
9180:                  if ((Cmmd!=14)&&(Cmmd!=113))
009DDC  78421E     MOV.B [W14], W4
009DDE  524FEE     SUB.B W4, #0xE, [W15]
009DE0  320008     BRA Z, 0x9DF2
009DE2  B3C714     MOV.B #0x71, W4
009DE4  78429E     MOV.B [W14], W5
009DE6  52CF84     SUB.B W5, W4, [W15]
009DE8  320004     BRA Z, 0x9DF2
9181:                      LockTMR=450000;
009DEA  2DDD04     MOV #0xDDD0, W4
009DEC  200065     MOV #0x6, W5
009DEE  8A0154     MOV W4, LockTMR
009DF0  8A0165     MOV W5, 0x402C
9182:                  
9183:                                      switch (Cmmd)
009DF2  78429E     MOV.B [W14], W5
009DF4  FB8205     ZE W5, W4
009DF6  B92361     MUL.SU W4, #1, W6
009DF8  EB8200     SETM W4
009DFA  EB8280     SETM W5
009DFC  420206     ADD W4, W6, W4
009DFE  4A8287     ADDC W5, W7, W5
009E00  200FD6     MOV #0xFD, W6
009E02  200007     MOV #0x0, W7
009E04  520F86     SUB W4, W6, [W15]
009E06  5A8F87     SUBB W5, W7, [W15]
009E08  3E191D     BRA GTU, 0xD044
009E0A  010604     BRA W4
009E0C  3700FD     BRA 0xA008
009E0E  37011A     BRA 0xA044
009E10  370133     BRA 0xA078
009E12  370156     BRA 0xA0C0
009E14  37017C     BRA 0xA10E
009E16  370197     BRA 0xA146
009E18  3701AA     BRA 0xA16E
009E1A  3701C0     BRA 0xA19C
009E1C  3701CD     BRA 0xA1B8
009E1E  3701E0     BRA 0xA1E0
009E20  3701E3     BRA 0xA1E8
009E22  3701FE     BRA 0xA220
009E24  370211     BRA 0xA248
009E26  37023E     BRA 0xA2A4
009E28  370242     BRA 0xA2AE
009E2A  370292     BRA 0xA350
009E2C  3702AD     BRA 0xA388
009E2E  3702C0     BRA 0xA3B0
009E30  3702D9     BRA 0xA3E4
009E32  3702EC     BRA 0xA40C
009E34  3702FE     BRA 0xA432
009E36  37030B     BRA 0xA44E
009E38  370373     BRA 0xA520
009E3A  37038E     BRA 0xA558
009E3C  370395     BRA 0xA568
009E3E  37039C     BRA 0xA578
009E40  3703AB     BRA 0xA598
009E42  3703AE     BRA 0xA5A0
009E44  3703C1     BRA 0xA5C8
009E46  3703DA     BRA 0xA5FC
009E48  3703E6     BRA 0xA616
009E4A  3703EE     BRA 0xA628
009E4C  3703F6     BRA 0xA63A
009E4E  37040F     BRA 0xA66E
009E50  37042E     BRA 0xA6AE
009E52  370441     BRA 0xA6D6
009E54  370452     BRA 0xA6FA
009E56  370479     BRA 0xA74A
009E58  37047C     BRA 0xA752
009E5A  370484     BRA 0xA764
009E5C  3704AF     BRA 0xA7BC
009E5E  3704BB     BRA 0xA7D6
009E60  3704C2     BRA 0xA7E6
009E62  3704C9     BRA 0xA7F6
009E64  3704D1     BRA 0xA808
009E66  3704EA     BRA 0xA83C
009E68  370507     BRA 0xA878
009E6A  3718EC     BRA 0xD044
009E6C  37050E     BRA 0xA88A
009E6E  370514     BRA 0xA898
009E70  37051E     BRA 0xA8AE
009E72  370537     BRA 0xA8E2
009E74  37054A     BRA 0xA90A
009E76  370552     BRA 0xA91C
009E78  370555     BRA 0xA924
009E7A  370562     BRA 0xA940
009E7C  37057B     BRA 0xA974
009E7E  370594     BRA 0xA9A8
009E80  37059C     BRA 0xA9BA
009E82  3705A4     BRA 0xA9CC
009E84  3705B9     BRA 0xA9F8
009E86  3718DE     BRA 0xD044
009E88  3705BB     BRA 0xAA00
009E8A  3718DC     BRA 0xD044
009E8C  3705DD     BRA 0xAA48
009E8E  3705FB     BRA 0xAA86
009E90  370626     BRA 0xAADE
009E92  37063F     BRA 0xAB12
009E94  370666     BRA 0xAB62
009E96  370687     BRA 0xABA6
009E98  3706BE     BRA 0xAC16
009E9A  3706E4     BRA 0xAC64
009E9C  37070A     BRA 0xACB2
009E9E  370716     BRA 0xACCC
009EA0  3718D1     BRA 0xD044
009EA2  370719     BRA 0xACD6
009EA4  37071C     BRA 0xACDE
009EA6  37073F     BRA 0xAD26
009EA8  370762     BRA 0xAD6E
009EAA  370799     BRA 0xADDE
009EAC  3707D0     BRA 0xAE4E
009EAE  3707D3     BRA 0xAE56
009EB0  3707DB     BRA 0xAE68
009EB2  3707E3     BRA 0xAE7A
009EB4  3707EA     BRA 0xAE8A
009EB6  3707F1     BRA 0xAE9A
009EB8  3718C5     BRA 0xD044
009EBA  3718C4     BRA 0xD044
009EBC  370802     BRA 0xAEC2
009EBE  370809     BRA 0xAED2
009EC0  370810     BRA 0xAEE2
009EC2  370823     BRA 0xAF0A
009EC4  370836     BRA 0xAF32
009EC6  370849     BRA 0xAF5A
009EC8  370851     BRA 0xAF6C
009ECA  370854     BRA 0xAF74
009ECC  370857     BRA 0xAF7C
009ECE  37085C     BRA 0xAF88
009ED0  37086F     BRA 0xAFB0
009ED2  370882     BRA 0xAFD8
009ED4  370897     BRA 0xB004
009ED6  37089F     BRA 0xB016
009ED8  3708A7     BRA 0xB028
009EDA  3708B0     BRA 0xB03C
009EDC  3708B9     BRA 0xB050
009EDE  3708C2     BRA 0xB064
009EE0  3708CB     BRA 0xB078
009EE2  3708CE     BRA 0xB080
009EE4  3708D1     BRA 0xB088
009EE6  3708D9     BRA 0xB09A
009EE8  3708E1     BRA 0xB0AC
009EEA  3708E9     BRA 0xB0BE
009EEC  370905     BRA 0xB0F8
009EEE  370908     BRA 0xB100
009EF0  37090B     BRA 0xB108
009EF2  37090E     BRA 0xB110
009EF4  370922     BRA 0xB13A
009EF6  370936     BRA 0xB164
009EF8  37094F     BRA 0xB198
009EFA  370956     BRA 0xB1A8
009EFC  37095D     BRA 0xB1B8
009EFE  370970     BRA 0xB1E0
009F00  3718A1     BRA 0xD044
009F02  370977     BRA 0xB1F2
009F04  37098A     BRA 0xB21A
009F06  37189E     BRA 0xD044
009F08  37099C     BRA 0xB242
009F0A  3709BF     BRA 0xB28A
009F0C  3709E2     BRA 0xB2D2
009F0E  3709F5     BRA 0xB2FA
009F10  370A08     BRA 0xB322
009F12  370A1B     BRA 0xB34A
009F14  370A2E     BRA 0xB372
009F16  370A36     BRA 0xB384
009F18  370A3D     BRA 0xB394
009F1A  370A44     BRA 0xB3A4
009F1C  370A47     BRA 0xB3AC
009F1E  370A4A     BRA 0xB3B4
009F20  370A4D     BRA 0xB3BC
009F22  370A50     BRA 0xB3C4
009F24  370A53     BRA 0xB3CC
009F26  370A56     BRA 0xB3D4
009F28  370A79     BRA 0xB41C
009F2A  370A9C     BRA 0xB464
009F2C  370AA4     BRA 0xB476
009F2E  370ABD     BRA 0xB4AA
009F30  371889     BRA 0xD044
009F32  371888     BRA 0xD044
009F34  371887     BRA 0xD044
009F36  371886     BRA 0xD044
009F38  371885     BRA 0xD044
009F3A  371884     BRA 0xD044
009F3C  371883     BRA 0xD044
009F3E  371882     BRA 0xD044
009F40  371881     BRA 0xD044
009F42  371880     BRA 0xD044
009F44  37187F     BRA 0xD044
009F46  37187E     BRA 0xD044
009F48  37187D     BRA 0xD044
009F4A  37187C     BRA 0xD044
009F4C  370AD5     BRA 0xB4F8
009F4E  370AEF     BRA 0xB52E
009F50  370B11     BRA 0xB574
009F52  370B24     BRA 0xB59C
009F54  370B46     BRA 0xB5E2
009F56  370B4F     BRA 0xB5F6
009F58  370B56     BRA 0xB606
009F5A  370B7C     BRA 0xB654
009F5C  370B80     BRA 0xB65E
009F5E  370BA6     BRA 0xB6AC
009F60  370BAA     BRA 0xB6B6
009F62  370BD0     BRA 0xB704
009F64  370BD4     BRA 0xB70E
009F66  370BF7     BRA 0xB756
009F68  370BFF     BRA 0xB768
009F6A  370C0F     BRA 0xB78A
009F6C  370C21     BRA 0xB7B0
009F6E  370C34     BRA 0xB7D8
009F70  370C47     BRA 0xB800
009F72  370C6A     BRA 0xB848
009F74  370C7F     BRA 0xB874
009F76  370C9B     BRA 0xB8AE
009F78  370CA2     BRA 0xB8BE
009F7A  370CAA     BRA 0xB8D0
009F7C  370CB0     BRA 0xB8DE
009F7E  370CB3     BRA 0xB8E6
009F80  370CB6     BRA 0xB8EE
009F82  370CB9     BRA 0xB8F6
009F84  370CBC     BRA 0xB8FE
009F86  370CC3     BRA 0xB90E
009F88  370CCA     BRA 0xB91E
009F8A  370CDB     BRA 0xB942
009F8C  370CEC     BRA 0xB966
009F8E  370D1C     BRA 0xB9C8
009F90  370D23     BRA 0xB9D8
009F92  370D2A     BRA 0xB9E8
009F94  370D30     BRA 0xB9F6
009F96  370D37     BRA 0xBA06
009F98  370D3A     BRA 0xBA0E
009F9A  370D41     BRA 0xBA1E
009F9C  370D48     BRA 0xBA2E
009F9E  370D4B     BRA 0xBA36
009FA0  371851     BRA 0xD044
009FA2  371850     BRA 0xD044
009FA4  37184F     BRA 0xD044
009FA6  37184E     BRA 0xD044
009FA8  370D4A     BRA 0xBA3E
009FAA  370D4D     BRA 0xBA46
009FAC  370D57     BRA 0xBA5C
009FAE  370D61     BRA 0xBA72
009FB0  371849     BRA 0xD044
009FB2  371848     BRA 0xD044
009FB4  371847     BRA 0xD044
009FB6  370D81     BRA 0xBABA
009FB8  370DA4     BRA 0xBB02
009FBA  370DAB     BRA 0xBB12
009FBC  370DB2     BRA 0xBB22
009FBE  370DD0     BRA 0xBB60
009FC0  370DEE     BRA 0xBB9E
009FC2  370E3D     BRA 0xBC3E
009FC4  37183F     BRA 0xD044
009FC6  370E4F     BRA 0xBC66
009FC8  370E68     BRA 0xBC9A
009FCA  370E8E     BRA 0xBCE8
009FCC  370E92     BRA 0xBCF2
009FCE  370EA5     BRA 0xBD1A
009FD0  370EAA     BRA 0xBD26
009FD2  370EC5     BRA 0xBD5E
009FD4  370ED1     BRA 0xBD78
009FD6  371836     BRA 0xD044
009FD8  370EDF     BRA 0xBD98
009FDA  370F02     BRA 0xBDE0
009FDC  370F09     BRA 0xBDF0
009FDE  370F10     BRA 0xBE00
009FE0  370F17     BRA 0xBE10
009FE2  370F1E     BRA 0xBE20
009FE4  370F41     BRA 0xBE68
009FE6  370F5B     BRA 0xBE9E
009FE8  370F60     BRA 0xBEAA
009FEA  370F67     BRA 0xBEBA
009FEC  37182B     BRA 0xD044
009FEE  37182A     BRA 0xD044
009FF0  371829     BRA 0xD044
009FF2  370F6B     BRA 0xBECA
009FF4  370F6F     BRA 0xBED4
009FF6  371826     BRA 0xD044
009FF8  370F74     BRA 0xBEE2
009FFA  371824     BRA 0xD044
009FFC  370F79     BRA 0xBEF0
009FFE  370F86     BRA 0xBF0C
00A000  370F99     BRA 0xBF34
00A002  370FAC     BRA 0xBF5C
00A004  370FBF     BRA 0xBF84
00A006  370FD2     BRA 0xBFAC
9184:                                      {
9185:                                          case 1:
9186:                                          {
9187:                                             int Tm;
9188:                                             Tm=(int)RecBytes[3];
00A008  229294     MOV #0x2929, W4
00A00A  784214     MOV.B [W4], W4
00A00C  FB8204     ZE W4, W4
00A00E  980F24     MOV W4, [W14+20]
9189:                                             Tm=Tm<<8;
00A010  900A2E     MOV [W14+20], W4
00A012  DD2248     SL W4, #8, W4
00A014  980F24     MOV W4, [W14+20]
9190:                                             Tm=Tm+RecBytes[2];
00A016  229284     MOV #0x2928, W4
00A018  784214     MOV.B [W4], W4
00A01A  FB8204     ZE W4, W4
00A01C  900AAE     MOV [W14+20], W5
00A01E  428204     ADD W5, W4, W4
00A020  980F24     MOV W4, [W14+20]
9191:                                             V_MIN_Pre_OFF=(float)Tm;
00A022  900A2E     MOV [W14+20], W4
00A024  DEA2CF     ASR W4, #15, W5
00A026  BE0004     MOV.D W4, W0
00A028  02257C     CALL ___floatsisf
00A02A  000000     NOP
00A02C  BE0200     MOV.D W0, W4
00A02E  BE0004     MOV.D W4, W0
00A030  022546     CALL ___fixunssfsi
00A032  000000     NOP
00A034  BE0200     MOV.D W0, W4
00A036  780204     MOV W4, W4
00A038  89C3D4     MOV W4, V_MIN_Pre_OFF
9192:                                             OptionsToMass();
00A03A  071BD9     RCALL OptionsToMass
9193:                                             MustTrmFlashMass=1;
00A03C  8095F4     MOV 0x12BE, W4
00A03E  A02004     BSET W4, #2
00A040  8895F4     MOV W4, 0x12BE
9194:                                             break;
00A042  371800     BRA 0xD044
9195:                                          }
9196:                                          case 2:
9197:                                          {
9198:                                             int Tm;
9199:                                             Tm=(int)RecBytes[3];
00A044  229294     MOV #0x2929, W4
00A046  784214     MOV.B [W4], W4
00A048  FB8204     ZE W4, W4
00A04A  980F34     MOV W4, [W14+22]
9200:                                             Tm=Tm<<8;
00A04C  900A3E     MOV [W14+22], W4
00A04E  DD2248     SL W4, #8, W4
00A050  980F34     MOV W4, [W14+22]
9201:                                             Tm=Tm+RecBytes[2];
00A052  229284     MOV #0x2928, W4
00A054  784214     MOV.B [W4], W4
00A056  FB8204     ZE W4, W4
00A058  900ABE     MOV [W14+22], W5
00A05A  428204     ADD W5, W4, W4
00A05C  980F34     MOV W4, [W14+22]
9202:                                             KpNoMan=(float)Tm;
00A05E  900A3E     MOV [W14+22], W4
00A060  DEA2CF     ASR W4, #15, W5
00A062  BE0004     MOV.D W4, W0
00A064  02257C     CALL ___floatsisf
00A066  000000     NOP
00A068  BE0200     MOV.D W0, W4
00A06A  889BE4     MOV W4, KpNoMan
00A06C  889BF5     MOV W5, 0x137E
9203:                                             OptionsToMass();
00A06E  071BBF     RCALL OptionsToMass
9204:                                             MustTrmFlashMass=1;
00A070  8095F4     MOV 0x12BE, W4
00A072  A02004     BSET W4, #2
00A074  8895F4     MOV W4, 0x12BE
9205:                                             break;
00A076  3717E6     BRA 0xD044
9206:                                          }
9207:                                          case 3:
9208:                                          {
9209:                                              int Tm;
9210:                                             Tm=(int)RecBytes[3];
00A078  229294     MOV #0x2929, W4
00A07A  784214     MOV.B [W4], W4
00A07C  FB8204     ZE W4, W4
00A07E  980F44     MOV W4, [W14+24]
9211:                                             Tm=Tm<<8;
00A080  900A4E     MOV [W14+24], W4
00A082  DD2248     SL W4, #8, W4
00A084  980F44     MOV W4, [W14+24]
9212:                                             Tm=Tm+RecBytes[2];
00A086  229284     MOV #0x2928, W4
00A088  784214     MOV.B [W4], W4
00A08A  FB8204     ZE W4, W4
00A08C  900ACE     MOV [W14+24], W5
00A08E  428204     ADD W5, W4, W4
00A090  980F44     MOV W4, [W14+24]
9213:                                             KdNoMan=Tm;
00A092  900A4E     MOV [W14+24], W4
00A094  DEA2CF     ASR W4, #15, W5
00A096  BE0004     MOV.D W4, W0
00A098  02257C     CALL ___floatsisf
00A09A  000000     NOP
00A09C  BE0200     MOV.D W0, W4
00A09E  889C24     MOV W4, KdNoMan
00A0A0  889C35     MOV W5, 0x1386
9214:                                             KdNoMan=KdNoMan*10;
00A0A2  809C24     MOV KdNoMan, W4
00A0A4  809C35     MOV 0x1386, W5
00A0A6  200002     MOV #0x0, W2
00A0A8  241203     MOV #0x4120, W3
00A0AA  BE0004     MOV.D W4, W0
00A0AC  022630     CALL ___mulsf3
00A0AE  000000     NOP
00A0B0  BE0200     MOV.D W0, W4
00A0B2  889C24     MOV W4, KdNoMan
00A0B4  889C35     MOV W5, 0x1386
9215:                                             OptionsToMass();
00A0B6  071B9B     RCALL OptionsToMass
9216:                                             MustTrmFlashMass=1;
00A0B8  8095F4     MOV 0x12BE, W4
00A0BA  A02004     BSET W4, #2
00A0BC  8895F4     MOV W4, 0x12BE
9217:                                             break;
00A0BE  3717C2     BRA 0xD044
9218:                                          }
9219:                                          case 4:
9220:                                          {
9221:                                             int Tm;
9222:                                             Tm=(int)RecBytes[3];
00A0C0  229294     MOV #0x2929, W4
00A0C2  784214     MOV.B [W4], W4
00A0C4  FB8204     ZE W4, W4
00A0C6  980F54     MOV W4, [W14+26]
9223:                                             Tm=Tm<<8;
00A0C8  900A5E     MOV [W14+26], W4
00A0CA  DD2248     SL W4, #8, W4
00A0CC  980F54     MOV W4, [W14+26]
9224:                                             Tm=Tm+RecBytes[2];
00A0CE  229284     MOV #0x2928, W4
00A0D0  784214     MOV.B [W4], W4
00A0D2  FB8204     ZE W4, W4
00A0D4  900ADE     MOV [W14+26], W5
00A0D6  428204     ADD W5, W4, W4
00A0D8  980F54     MOV W4, [W14+26]
9225:                                             KiNoMan=Tm;
00A0DA  900A5E     MOV [W14+26], W4
00A0DC  DEA2CF     ASR W4, #15, W5
00A0DE  BE0004     MOV.D W4, W0
00A0E0  02257C     CALL ___floatsisf
00A0E2  000000     NOP
00A0E4  BE0200     MOV.D W0, W4
00A0E6  889B44     MOV W4, KiNoMan
00A0E8  889B55     MOV W5, 0x136A
9226:                                             KiNoMan=KiNoMan/100;
00A0EA  809B44     MOV KiNoMan, W4
00A0EC  809B55     MOV 0x136A, W5
00A0EE  200002     MOV #0x0, W2
00A0F0  242C83     MOV #0x42C8, W3
00A0F2  BE0004     MOV.D W4, W0
00A0F4  02245A     CALL ___divsf3
00A0F6  000000     NOP
00A0F8  BE0200     MOV.D W0, W4
00A0FA  889B44     MOV W4, KiNoMan
00A0FC  889B55     MOV W5, 0x136A
9227:                                             OptionsToMass();
00A0FE  071B77     RCALL OptionsToMass
9228:                                             MustTrmFlashMass=1;
00A100  8095F4     MOV 0x12BE, W4
00A102  A02004     BSET W4, #2
00A104  8895F4     MOV W4, 0x12BE
9229:                                             ESumm=0;
00A106  B82260     MUL.UU W4, #0, W4
00A108  889B84     MOV W4, ESumm
00A10A  889B95     MOV W5, 0x1372
9230:                                             break;
00A10C  37179B     BRA 0xD044
9231:                                          }
9232:                                          case 5:
9233:                                          {
9234:                                             int Tm;
9235:                                             Tm=(int)RecBytes[3];
00A10E  229294     MOV #0x2929, W4
00A110  784214     MOV.B [W4], W4
00A112  FB8204     ZE W4, W4
00A114  980F64     MOV W4, [W14+28]
9236:                                             Tm=Tm<<8;
00A116  900A6E     MOV [W14+28], W4
00A118  DD2248     SL W4, #8, W4
00A11A  980F64     MOV W4, [W14+28]
9237:                                             Tm=Tm+RecBytes[2];
00A11C  229284     MOV #0x2928, W4
00A11E  784214     MOV.B [W4], W4
00A120  FB8204     ZE W4, W4
00A122  900AEE     MOV [W14+28], W5
00A124  428204     ADD W5, W4, W4
00A126  980F64     MOV W4, [W14+28]
9238:                                             KpSPDMove=Tm;
00A128  900A6E     MOV [W14+28], W4
00A12A  898174     MOV W4, KpSPDMove
9239:                                             if (!Stopping)
00A12C  809665     MOV Flgs4, W5
00A12E  200804     MOV #0x80, W4
00A130  628204     AND W5, W4, W4
00A132  520FE0     SUB W4, #0x0, [W15]
00A134  3A0003     BRA NZ, 0xA13C
9240:                                             {
9241:                                             KpSPDMustBe=KpSPDMove;
00A136  818174     MOV KpSPDMove, W4
00A138  898184     MOV W4, KpSPDMustBe
9242:                                             SetKpSPD_UP();
00A13A  074A65     RCALL SetKpSPD_UP
9243:                                             }
9244:                                             OptionsToMass();
00A13C  071B58     RCALL OptionsToMass
9245:                                             MustTrmFlashMass=1;
00A13E  8095F4     MOV 0x12BE, W4
00A140  A02004     BSET W4, #2
00A142  8895F4     MOV W4, 0x12BE
9246:                                             break;
00A144  37177F     BRA 0xD044
9247:                                          }
9248:                                          case 6:
9249:                                          {
9250:                                             int Tm;
9251:                                             Tm=(int)RecBytes[3];
00A146  229294     MOV #0x2929, W4
00A148  784214     MOV.B [W4], W4
00A14A  FB8204     ZE W4, W4
00A14C  980F74     MOV W4, [W14+30]
9252:                                             Tm=Tm<<8;
00A14E  900A7E     MOV [W14+30], W4
00A150  DD2248     SL W4, #8, W4
00A152  980F74     MOV W4, [W14+30]
9253:                                             Tm=Tm+RecBytes[2];
00A154  229284     MOV #0x2928, W4
00A156  784214     MOV.B [W4], W4
00A158  FB8204     ZE W4, W4
00A15A  900AFE     MOV [W14+30], W5
00A15C  428204     ADD W5, W4, W4
00A15E  980F74     MOV W4, [W14+30]
9254:                                             KdSPD=Tm;
00A160  900A7E     MOV [W14+30], W4
00A162  898144     MOV W4, KdSPD
9255:                                             OptionsToMass();
00A164  071B44     RCALL OptionsToMass
9256:                                             MustTrmFlashMass=1;
00A166  8095F4     MOV 0x12BE, W4
00A168  A02004     BSET W4, #2
00A16A  8895F4     MOV W4, 0x12BE
9257:                                             break;
00A16C  37176B     BRA 0xD044
9258:                                          }
9259:                                          case 7:
9260:                                          {
9261:                                             int Tm;
9262:                                             Tm=(int)RecBytes[3];
00A16E  229294     MOV #0x2929, W4
00A170  784214     MOV.B [W4], W4
00A172  FB8204     ZE W4, W4
00A174  981704     MOV W4, [W14+32]
9263:                                             Tm=Tm<<8;
00A176  90120E     MOV [W14+32], W4
00A178  DD2248     SL W4, #8, W4
00A17A  981704     MOV W4, [W14+32]
9264:                                             Tm=Tm+RecBytes[2];
00A17C  229284     MOV #0x2928, W4
00A17E  784214     MOV.B [W4], W4
00A180  FB8204     ZE W4, W4
00A182  90128E     MOV [W14+32], W5
00A184  428204     ADD W5, W4, W4
00A186  981704     MOV W4, [W14+32]
9265:                                             KiSPD=Tm;
00A188  90120E     MOV [W14+32], W4
00A18A  898154     MOV W4, KiSPD
9266:                                             OptionsToMass();
00A18C  071B30     RCALL OptionsToMass
9267:                                             MustTrmFlashMass=1;
00A18E  8095F4     MOV 0x12BE, W4
00A190  A02004     BSET W4, #2
00A192  8895F4     MOV W4, 0x12BE
9268:                                             ESummSpd=0;
00A194  B82260     MUL.UU W4, #0, W4
00A196  898204     MOV W4, ESummSpd
00A198  898215     MOV W5, 0x3042
9269:                                             break;
00A19A  371754     BRA 0xD044
9270:                                          }
9271:                                          case 8:
9272:                                          {
9273:                                              Odometr++;
00A19C  818384     MOV Odometr, W4
00A19E  818395     MOV 0x3072, W5
00A1A0  420261     ADD W4, #0x1, W4
00A1A2  4A82E0     ADDC W5, #0x0, W5
00A1A4  898384     MOV W4, Odometr
00A1A6  898395     MOV W5, 0x3072
9274:                                          WriteOdometrNew();
00A1A8  072DB5     RCALL WriteOdometrNew
9275:                                          SoundNum=1;
00A1AA  2124B5     MOV #0x124B, W5
00A1AC  B3C014     MOV.B #0x1, W4
00A1AE  784A84     MOV.B W4, [W5]
9276:                                          SendPhase=1;
00A1B0  8095F4     MOV 0x12BE, W4
00A1B2  A04004     BSET W4, #4
00A1B4  8895F4     MOV W4, 0x12BE
9277:                                          break;
00A1B6  371746     BRA 0xD044
9278:                                          }
9279:                                          case 9:
9280:                                          {
9281:                                             int Tm;
9282:                                             Tm=(int)RecBytes[3];
00A1B8  229294     MOV #0x2929, W4
00A1BA  784214     MOV.B [W4], W4
00A1BC  FB8204     ZE W4, W4
00A1BE  981714     MOV W4, [W14+34]
9283:                                             Tm=Tm<<8;
00A1C0  90121E     MOV [W14+34], W4
00A1C2  DD2248     SL W4, #8, W4
00A1C4  981714     MOV W4, [W14+34]
9284:                                             Tm=Tm+RecBytes[2];
00A1C6  229284     MOV #0x2928, W4
00A1C8  784214     MOV.B [W4], W4
00A1CA  FB8204     ZE W4, W4
00A1CC  90129E     MOV [W14+34], W5
00A1CE  428204     ADD W5, W4, W4
00A1D0  981714     MOV W4, [W14+34]
9285:                                             SensorlessCurrUst=Tm;
00A1D2  90121E     MOV [W14+34], W4
00A1D4  89F4F4     MOV W4, SensorlessCurrUst
9286:                                             OptionsToMass();
00A1D6  071B0B     RCALL OptionsToMass
9287:                                             MustTrmFlashMass=1;
00A1D8  8095F4     MOV 0x12BE, W4
00A1DA  A02004     BSET W4, #2
00A1DC  8895F4     MOV W4, 0x12BE
9288:                                             break;
00A1DE  371732     BRA 0xD044
9289:                                          }
9290:                                          case 10:
9291:                                          {
9292:                                             Ptr=(int *)&RecBytes[2];
00A1E0  229264     MOV #0x2926, W4
00A1E2  E88204     INC2 W4, W4
00A1E4  981724     MOV W4, [W14+36]
9293:                                 //            CntUDPTrmConst=*Ptr;
9294:                                             break;
00A1E6  37172E     BRA 0xD044
9295:                                          }
9296:                                          case 11:
9297:                                          {
9298:                                             int Tm;
9299:                                             Tm=(int)RecBytes[3];
00A1E8  229294     MOV #0x2929, W4
00A1EA  784214     MOV.B [W4], W4
00A1EC  FB8204     ZE W4, W4
00A1EE  981734     MOV W4, [W14+38]
9300:                                             Tm=Tm<<8;
00A1F0  90123E     MOV [W14+38], W4
00A1F2  DD2248     SL W4, #8, W4
00A1F4  981734     MOV W4, [W14+38]
9301:                                             Tm=Tm+RecBytes[2];
00A1F6  229284     MOV #0x2928, W4
00A1F8  784214     MOV.B [W4], W4
00A1FA  FB8204     ZE W4, W4
00A1FC  9012BE     MOV [W14+38], W5
00A1FE  428204     ADD W5, W4, W4
00A200  981734     MOV W4, [W14+38]
9302:                                             AngleLimitMove=Tm;
00A202  9012BE     MOV [W14+38], W5
00A204  898275     MOV W5, AngleLimitMove
9303:                                             if (!Stopping)
00A206  809665     MOV Flgs4, W5
00A208  200804     MOV #0x80, W4
00A20A  628204     AND W5, W4, W4
00A20C  520FE0     SUB W4, #0x0, [W15]
00A20E  3A0003     BRA NZ, 0xA216
9304:                                             {
9305:                                               AngleLimitMustBe=AngleLimitMove;
00A210  818274     MOV AngleLimitMove, W4
00A212  898264     MOV W4, AngleLimitMustBe
9306:                                               SetAngleLimit_UP();
00A214  074A06     RCALL SetAngleLimit_UP
9307:                                             }
9308:                                             OptionsToMass();
00A216  071AEB     RCALL OptionsToMass
9309:                                             MustTrmFlashMass=1;
00A218  8095F4     MOV 0x12BE, W4
00A21A  A02004     BSET W4, #2
00A21C  8895F4     MOV W4, 0x12BE
9310:                                             break;
00A21E  371712     BRA 0xD044
9311:                                          }
9312:                                          case 12:
9313:                                          {
9314:                                              int Tm;
9315:                                             Tm=(int)RecBytes[3];
00A220  229294     MOV #0x2929, W4
00A222  784214     MOV.B [W4], W4
00A224  FB8204     ZE W4, W4
00A226  981744     MOV W4, [W14+40]
9316:                                             Tm=Tm<<8;
00A228  90124E     MOV [W14+40], W4
00A22A  DD2248     SL W4, #8, W4
00A22C  981744     MOV W4, [W14+40]
9317:                                             Tm=Tm+RecBytes[2];
00A22E  229284     MOV #0x2928, W4
00A230  784214     MOV.B [W4], W4
00A232  FB8204     ZE W4, W4
00A234  9012CE     MOV [W14+40], W5
00A236  428204     ADD W5, W4, W4
00A238  981744     MOV W4, [W14+40]
9318:                                             SenosrlessPWM1_1Const=Tm;
00A23A  90124E     MOV [W14+40], W4
00A23C  8892F4     MOV W4, SenosrlessPWM1_1Const
9319:                                             OptionsToMass();
00A23E  071AD7     RCALL OptionsToMass
9320:                                             MustTrmFlashMass=1;
00A240  8095F4     MOV 0x12BE, W4
00A242  A02004     BSET W4, #2
00A244  8895F4     MOV W4, 0x12BE
9321:                                            break;
00A246  3716FE     BRA 0xD044
9322:                                          }
9323:                                          case 13:
9324:                                          {
9325:                                              int Tm;
9326:                                             Tm=(int)RecBytes[3];
00A248  229294     MOV #0x2929, W4
00A24A  784214     MOV.B [W4], W4
00A24C  FB8204     ZE W4, W4
00A24E  981754     MOV W4, [W14+42]
9327:                                             Tm=Tm<<8;
00A250  90125E     MOV [W14+42], W4
00A252  DD2248     SL W4, #8, W4
00A254  981754     MOV W4, [W14+42]
9328:                                             Tm=Tm+RecBytes[2];
00A256  229284     MOV #0x2928, W4
00A258  784214     MOV.B [W4], W4
00A25A  FB8204     ZE W4, W4
00A25C  9012DE     MOV [W14+42], W5
00A25E  428204     ADD W5, W4, W4
00A260  981754     MOV W4, [W14+42]
9329:                                             KGYRO=Tm;
00A262  90125E     MOV [W14+42], W4
00A264  DEA2CF     ASR W4, #15, W5
00A266  BE0004     MOV.D W4, W0
00A268  02257C     CALL ___floatsisf
00A26A  000000     NOP
00A26C  BE0200     MOV.D W0, W4
00A26E  897DC4     MOV W4, KGYRO
00A270  897DD5     MOV W5, 0x2FBA
9330:                                             KGYRO=KGYRO/1000;
00A272  817DC4     MOV KGYRO, W4
00A274  817DD5     MOV 0x2FBA, W5
00A276  200002     MOV #0x0, W2
00A278  2447A3     MOV #0x447A, W3
00A27A  BE0004     MOV.D W4, W0
00A27C  02245A     CALL ___divsf3
00A27E  000000     NOP
00A280  BE0200     MOV.D W0, W4
00A282  897DC4     MOV W4, KGYRO
00A284  897DD5     MOV W5, 0x2FBA
9331:                                             KACC=1-KGYRO;
00A286  817DC4     MOV KGYRO, W4
00A288  817DD5     MOV 0x2FBA, W5
00A28A  BE0104     MOV.D W4, W2
00A28C  200000     MOV #0x0, W0
00A28E  23F801     MOV #0x3F80, W1
00A290  0222D0     CALL ___subsf3
00A292  000000     NOP
00A294  BE0200     MOV.D W0, W4
00A296  897DE4     MOV W4, KACC
00A298  897DF5     MOV W5, 0x2FBE
9332:                                             OptionsToMass();
00A29A  071AA9     RCALL OptionsToMass
9333:                                             MustTrmFlashMass=1;
00A29C  8095F4     MOV 0x12BE, W4
00A29E  A02004     BSET W4, #2
00A2A0  8895F4     MOV W4, 0x12BE
9334:                                             break;
00A2A2  3716D0     BRA 0xD044
9335:                                          }
9336:                                          case 14:
9337:                                          {
9338:                                             OptionsToMass();
00A2A4  071AA4     RCALL OptionsToMass
9339:                                             MustTrmFlashMass=1;
00A2A6  8095F4     MOV 0x12BE, W4
00A2A8  A02004     BSET W4, #2
00A2AA  8895F4     MOV W4, 0x12BE
9340:                                             break;
00A2AC  3716CB     BRA 0xD044
9341:                                          }
9342:                                          case 15:
9343:                                          {
9344:              
9345:                                              OptionsToMass();
00A2AE  071A9F     RCALL OptionsToMass
9346:                                              
9347:              
9348:              
9349:                                              unsigned char ts,cnt=0;
00A2B0  EB4200     CLR.B W4
00A2B2  984764     MOV.B W4, [W14+6]
9350:                                              do 
9351:                                              {
9352:                                                  
9353:                                                  ts=1;
00A2B4  B3C014     MOV.B #0x1, W4
00A2B6  984754     MOV.B W4, [W14+5]
9354:                                              WriteOptions();
00A2B8  07222A     RCALL WriteOptions
9355:                                              ReadOptions1();
00A2BA  071A59     RCALL ReadOptions1
9356:                                              unsigned int g;
9357:                                              for (g=0;g<sizeof(FlashMass);g++)
00A2BC  EB0200     CLR W4
00A2BE  980744     MOV W4, [W14+8]
00A2C0  37000F     BRA 0xA2E0
00A2DA  90024E     MOV [W14+8], W4
00A2DC  E80204     INC W4, W4
00A2DE  980744     MOV W4, [W14+8]
00A2E0  9002CE     MOV [W14+8], W5
00A2E2  200F24     MOV #0xF2, W4
00A2E4  528F84     SUB W5, W4, [W15]
00A2E6  36FFED     BRA LEU, 0xA2C2
9358:                                              {
9359:                                              if (FlashMass[g]!=FlashMass1[g])
00A2C2  22AE05     MOV #0x2AE0, W5
00A2C4  90024E     MOV [W14+8], W4
00A2C6  428204     ADD W5, W4, W4
00A2C8  784294     MOV.B [W4], W5
00A2CA  22BD36     MOV #0x2BD3, W6
00A2CC  90024E     MOV [W14+8], W4
00A2CE  430204     ADD W6, W4, W4
00A2D0  784214     MOV.B [W4], W4
00A2D2  52CF84     SUB.B W5, W4, [W15]
00A2D4  320002     BRA Z, 0xA2DA
9360:                                                  ts=0;
00A2D6  EB4200     CLR.B W4
00A2D8  984754     MOV.B W4, [W14+5]
9361:                                              }
9362:                                              for (g=0;g<sizeof(ProfileMass);g++)
00A2E8  EB0200     CLR W4
00A2EA  980744     MOV W4, [W14+8]
00A2EC  37000F     BRA 0xA30C
00A306  90024E     MOV [W14+8], W4
00A308  E80204     INC W4, W4
00A30A  980744     MOV W4, [W14+8]
00A30C  9002CE     MOV [W14+8], W5
00A30E  200EF4     MOV #0xEF, W4
00A310  528F84     SUB W5, W4, [W15]
00A312  36FFED     BRA LEU, 0xA2EE
9363:                                              {
9364:                                              if (ProfileMass[g]!=ProfileMass1[g])
00A2EE  22DB95     MOV #0x2DB9, W5
00A2F0  90024E     MOV [W14+8], W4
00A2F2  428204     ADD W5, W4, W4
00A2F4  784294     MOV.B [W4], W5
00A2F6  22EA96     MOV #0x2EA9, W6
00A2F8  90024E     MOV [W14+8], W4
00A2FA  430204     ADD W6, W4, W4
00A2FC  784214     MOV.B [W4], W4
00A2FE  52CF84     SUB.B W5, W4, [W15]
00A300  320002     BRA Z, 0xA306
9365:                                                  ts=0;
00A302  EB4200     CLR.B W4
00A304  984754     MOV.B W4, [W14+5]
9366:                                              }
9367:                                              if (!ts)
00A314  90425E     MOV.B [W14+5], W4
00A316  524FE0     SUB.B W4, #0x0, [W15]
00A318  3A0003     BRA NZ, 0xA320
9368:                                                  cnt++;
00A31A  90426E     MOV.B [W14+6], W4
00A31C  E84204     INC.B W4, W4
00A31E  984764     MOV.B W4, [W14+6]
9369:                                              
9370:                                              }
9371:                                              while ((!ts)&&(cnt<10));
00A320  90425E     MOV.B [W14+5], W4
00A322  524FE0     SUB.B W4, #0x0, [W15]
00A324  3A0003     BRA NZ, 0xA32C
00A326  90426E     MOV.B [W14+6], W4
00A328  524FE9     SUB.B W4, #0x9, [W15]
00A32A  36FFC4     BRA LEU, 0xA2B4
9372:                                              if (cnt<10)
00A32C  90426E     MOV.B [W14+6], W4
00A32E  524FE9     SUB.B W4, #0x9, [W15]
00A330  3E0004     BRA GTU, 0xA33A
9373:                                              {
9374:                                                  SoundNum=1;
00A332  2124B5     MOV #0x124B, W5
00A334  B3C014     MOV.B #0x1, W4
00A336  784A84     MOV.B W4, [W5]
00A338  370003     BRA 0xA340
9375:                                              }
9376:                                              else
9377:                                              {
9378:                                                    SoundNum=9;
00A33A  2124B5     MOV #0x124B, W5
00A33C  B3C094     MOV.B #0x9, W4
00A33E  784A84     MOV.B W4, [W5]
9379:                                              }
9380:                                                  
9381:                                              if (cnt!=0)
00A340  90426E     MOV.B [W14+6], W4
00A342  524FE0     SUB.B W4, #0x0, [W15]
00A344  320001     BRA Z, 0xA348
9382:                                                  Nop();
00A346  000000     NOP
9383:              
9384:                                             MustTrmFlashMass=1;
00A348  8095F4     MOV 0x12BE, W4
00A34A  A02004     BSET W4, #2
00A34C  8895F4     MOV W4, 0x12BE
9385:                                             break;
00A34E  37167A     BRA 0xD044
9386:                                          }
9387:              
9388:                                          case 16:
9389:                                          {
9390:                                             int Tm;
9391:                                             Tm=(int)RecBytes[3];
00A350  229294     MOV #0x2929, W4
00A352  784214     MOV.B [W4], W4
00A354  FB8204     ZE W4, W4
00A356  981764     MOV W4, [W14+44]
9392:                                             Tm=Tm<<8;
00A358  90126E     MOV [W14+44], W4
00A35A  DD2248     SL W4, #8, W4
00A35C  981764     MOV W4, [W14+44]
9393:                                             Tm=Tm+RecBytes[2];
00A35E  229284     MOV #0x2928, W4
00A360  784214     MOV.B [W4], W4
00A362  FB8204     ZE W4, W4
00A364  9012EE     MOV [W14+44], W5
00A366  428204     ADD W5, W4, W4
00A368  981764     MOV W4, [W14+44]
9394:                                             SensorLessCurrLimit=Tm;
00A36A  90126E     MOV [W14+44], W4
00A36C  88C1B4     MOV W4, SensorLessCurrLimit
9395:                                             OptionsToMass();
00A36E  071A3F     RCALL OptionsToMass
9396:                                             MustTrmFlashMass=1;
00A370  8095F4     MOV 0x12BE, W4
00A372  A02004     BSET W4, #2
00A374  8895F4     MOV W4, 0x12BE
9397:                                              if (Sensorless)
00A376  809755     MOV StatFlgs1, W5
00A378  200204     MOV #0x20, W4
00A37A  628204     AND W5, W4, W4
00A37C  520FE0     SUB W4, #0x0, [W15]
00A37E  321653     BRA Z, 0xD026
9398:                                              {
9399:                                              CurrLimit=SensorLessCurrLimit;
00A380  80C1B4     MOV SensorLessCurrLimit, W4
00A382  88C194     MOV W4, CurrLimit
9400:                                              ChangeCVR();
00A384  072B32     RCALL ChangeCVR
9401:                                              }
9402:              
9403:                                             break;
00A386  37165E     BRA 0xD044
00D026  000000     NOP
00D028  37000D     BRA 0xD044
9404:                                          }
9405:                                          case 17:
9406:                                          {
9407:                                              int Tm;
9408:                                             Tm=(int)RecBytes[3];
00A388  229294     MOV #0x2929, W4
00A38A  784214     MOV.B [W4], W4
00A38C  FB8204     ZE W4, W4
00A38E  981774     MOV W4, [W14+46]
9409:                                             Tm=Tm<<8;
00A390  90127E     MOV [W14+46], W4
00A392  DD2248     SL W4, #8, W4
00A394  981774     MOV W4, [W14+46]
9410:                                             Tm=Tm+RecBytes[2];
00A396  229284     MOV #0x2928, W4
00A398  784214     MOV.B [W4], W4
00A39A  FB8204     ZE W4, W4
00A39C  9012FE     MOV [W14+46], W5
00A39E  428204     ADD W5, W4, W4
00A3A0  981774     MOV W4, [W14+46]
9411:                                             V_MIN_Sound=Tm;
00A3A2  90127E     MOV [W14+46], W4
00A3A4  89C3E4     MOV W4, V_MIN_Sound
9412:                                             OptionsToMass();
00A3A6  071A23     RCALL OptionsToMass
9413:                                             MustTrmFlashMass=1;
00A3A8  8095F4     MOV 0x12BE, W4
00A3AA  A02004     BSET W4, #2
00A3AC  8895F4     MOV W4, 0x12BE
9414:                                             break;
00A3AE  37164A     BRA 0xD044
9415:                                          }
9416:              
9417:                                          case 18:
9418:                                          {
9419:                                             //Ptr=(int *)&RecBytes[2];
9420:                                              int Tm;
9421:                                             Tm=(int)RecBytes[3];
00A3B0  229294     MOV #0x2929, W4
00A3B2  784214     MOV.B [W4], W4
00A3B4  FB8204     ZE W4, W4
00A3B6  981F04     MOV W4, [W14+48]
9422:                                             Tm=Tm<<8;
00A3B8  901A0E     MOV [W14+48], W4
00A3BA  DD2248     SL W4, #8, W4
00A3BC  981F04     MOV W4, [W14+48]
9423:                                             Tm=Tm+RecBytes[2];
00A3BE  229284     MOV #0x2928, W4
00A3C0  784214     MOV.B [W4], W4
00A3C2  FB8204     ZE W4, W4
00A3C4  901A8E     MOV [W14+48], W5
00A3C6  428204     ADD W5, W4, W4
00A3C8  981F04     MOV W4, [W14+48]
9424:              
9425:                                             KpKpSpd=(int )Tm;
00A3CA  901A0E     MOV [W14+48], W4
00A3CC  DEA2CF     ASR W4, #15, W5
00A3CE  BE0004     MOV.D W4, W0
00A3D0  02257C     CALL ___floatsisf
00A3D2  000000     NOP
00A3D4  BE0200     MOV.D W0, W4
00A3D6  889884     MOV W4, KpKpSpd
00A3D8  889895     MOV W5, 0x1312
9426:                                             
9427:                                             OptionsToMass();
00A3DA  071A09     RCALL OptionsToMass
9428:                                             MustTrmFlashMass=1;
00A3DC  8095F4     MOV 0x12BE, W4
00A3DE  A02004     BSET W4, #2
00A3E0  8895F4     MOV W4, 0x12BE
9429:                                             break;
00A3E2  371630     BRA 0xD044
9430:                                          }
9431:                                          case 19:
9432:                                          {
9433:                                             int Tm;
9434:                                             Tm=(int)RecBytes[3];
00A3E4  229294     MOV #0x2929, W4
00A3E6  784214     MOV.B [W4], W4
00A3E8  FB8204     ZE W4, W4
00A3EA  981F14     MOV W4, [W14+50]
9435:                                             Tm=Tm<<8;
00A3EC  901A1E     MOV [W14+50], W4
00A3EE  DD2248     SL W4, #8, W4
00A3F0  981F14     MOV W4, [W14+50]
9436:                                             Tm=Tm+RecBytes[2];
00A3F2  229284     MOV #0x2928, W4
00A3F4  784214     MOV.B [W4], W4
00A3F6  FB8204     ZE W4, W4
00A3F8  901A9E     MOV [W14+50], W5
00A3FA  428204     ADD W5, W4, W4
00A3FC  981F14     MOV W4, [W14+50]
9437:                                             V_min_OverV=Tm;
00A3FE  901A1E     MOV [W14+50], W4
00A400  89C3F4     MOV W4, V_min_OverV
9438:                                             OptionsToMass();
00A402  0719F5     RCALL OptionsToMass
9439:                                             MustTrmFlashMass=1;
00A404  8095F4     MOV 0x12BE, W4
00A406  A02004     BSET W4, #2
00A408  8895F4     MOV W4, 0x12BE
9440:                                             break;
00A40A  37161C     BRA 0xD044
9441:                                          }
9442:                                          case 20:
9443:                                          {
9444:              
9445:                                              if ((!Lock)&&(!Spd1ResPlus))
00A40C  809755     MOV StatFlgs1, W5
00A40E  201004     MOV #0x100, W4
00A410  628204     AND W5, W4, W4
00A412  520FE0     SUB W4, #0x0, [W15]
00A414  3A0009     BRA NZ, 0xA428
00A416  817F44     MOV Spd1ResPlus, W4
00A418  520FE0     SUB W4, #0x0, [W15]
00A41A  3A0006     BRA NZ, 0xA428
9446:                                              {
9447:                                          SoundNum=1;
00A41C  2124B5     MOV #0x124B, W5
00A41E  B3C014     MOV.B #0x1, W4
00A420  784A84     MOV.B W4, [W5]
9448:                                             Lock=1;
00A422  809754     MOV StatFlgs1, W4
00A424  A08004     BSET W4, #8
00A426  889754     MOV W4, StatFlgs1
9449:                                              }
9450:                                             OptionsToMass();
00A428  0719E2     RCALL OptionsToMass
9451:                                             MustTrmFlashMass=1;
00A42A  8095F4     MOV 0x12BE, W4
00A42C  A02004     BSET W4, #2
00A42E  8895F4     MOV W4, 0x12BE
9452:                                             break;
00A430  371609     BRA 0xD044
9453:                                          }
9454:                                          case 21:
9455:                                          {
9456:                                              CntSamples=0;
00A432  B82260     MUL.UU W4, #0, W4
00A434  8899E4     MOV W4, CntSamples
00A436  8899F5     MOV W5, 0x133E
9457:                                              TiltYSumm=0;
00A438  B82260     MUL.UU W4, #0, W4
00A43A  895454     MOV W4, TiltYSumm
00A43C  895465     MOV W5, 0x2A8C
9458:                                              ESumm=0;
00A43E  B82260     MUL.UU W4, #0, W4
00A440  889B84     MOV W4, ESumm
00A442  889B95     MOV W5, 0x1372
9459:                                              CntPhase=0;
00A444  EB0200     CLR W4
00A446  8A1374     MOV W4, CntPhase
9460:                                              HallErrCnt=0;
00A448  EB0200     CLR W4
00A44A  89A6A4     MOV W4, HallErrCnt
9461:                                             break;
00A44C  3715FB     BRA 0xD044
9462:                                          }
9463:                                          case 22:
9464:                                          {
9465:                                               if (DirectControlMotor)
00A44E  809744     MOV StatFlgs, W4
00A450  620261     AND W4, #0x1, W4
00A452  520FE0     SUB W4, #0x0, [W15]
00A454  320056     BRA Z, 0xA502
9466:                                              {
9467:                                                   //Sensor1=4;
9468:                                                   Nop();
00A456  000000     NOP
9469:                                                   Nop();
00A458  000000     NOP
9470:                                                   Nop();
00A45A  000000     NOP
9471:                                                           Phases1();
00A45C  07F43C     RCALL Phases1
9472:                                                           Sensor1_Prev=Sensor1;
00A45E  212464     MOV #0x1246, W4
00A460  784214     MOV.B [W4], W4
00A462  212475     MOV #0x1247, W5
00A464  784A84     MOV.B W4, [W5]
9473:              
9474:              
9475:                                                  if (!Vector)
00A466  809684     MOV Flgs5, W4
00A468  620270     AND W4, #0x10, W4
00A46A  520FE0     SUB W4, #0x0, [W15]
00A46C  3A0017     BRA NZ, 0xA49C
9476:                                                  {
9477:                                             PWM1=RecBytes[3];
00A46E  229294     MOV #0x2929, W4
00A470  784214     MOV.B [W4], W4
00A472  FB8204     ZE W4, W4
00A474  889284     MOV W4, PWM1
9478:                                             PWM1=PWM1<<8;
00A476  809284     MOV PWM1, W4
00A478  DD2248     SL W4, #8, W4
00A47A  889284     MOV W4, PWM1
9479:                                             PWM1=PWM1+RecBytes[2];
00A47C  229284     MOV #0x2928, W4
00A47E  784214     MOV.B [W4], W4
00A480  FB8284     ZE W4, W5
00A482  809284     MOV PWM1, W4
00A484  428204     ADD W5, W4, W4
00A486  889284     MOV W4, PWM1
9480:                                             DIRPWM1=PWM1;
00A488  809284     MOV PWM1, W4
00A48A  89F5C4     MOV W4, DIRPWM1
9481:                                             if (DIRPWM1<50)
00A48C  81F5C5     MOV DIRPWM1, W5
00A48E  200314     MOV #0x31, W4
00A490  528F84     SUB W5, W4, [W15]
00A492  3E0027     BRA GTU, 0xA4E2
9482:                                                 RecOdometrFl=1;
00A494  809604     MOV Flgs1, W4
00A496  A06004     BSET W4, #6
00A498  889604     MOV W4, Flgs1
00A49A  370023     BRA 0xA4E2
9483:                                                  }
9484:                                                  else
9485:                                                  {
9486:                                              Amplitude1=RecBytes[3];
00A49C  229294     MOV #0x2929, W4
00A49E  784214     MOV.B [W4], W4
00A4A0  FB8204     ZE W4, W4
00A4A2  200005     MOV #0x0, W5
00A4A4  889A44     MOV W4, Amplitude1
00A4A6  889A55     MOV W5, 0x134A
9487:                                              Amplitude1=Amplitude1<<8;
00A4A8  809A46     MOV Amplitude1, W6
00A4AA  809A57     MOV 0x134A, W7
00A4AC  DD3A48     SL W7, #8, W4
00A4AE  DE32C8     LSR W6, #8, W5
00A4B0  720285     IOR W4, W5, W5
00A4B2  DD3248     SL W6, #8, W4
00A4B4  889A44     MOV W4, Amplitude1
00A4B6  889A55     MOV W5, 0x134A
9488:                                              Amplitude1=Amplitude1+RecBytes[2];
00A4B8  229284     MOV #0x2928, W4
00A4BA  784214     MOV.B [W4], W4
00A4BC  FB8304     ZE W4, W6
00A4BE  200007     MOV #0x0, W7
00A4C0  809A44     MOV Amplitude1, W4
00A4C2  809A55     MOV 0x134A, W5
00A4C4  420206     ADD W4, W6, W4
00A4C6  4A8287     ADDC W5, W7, W5
00A4C8  889A44     MOV W4, Amplitude1
00A4CA  889A55     MOV W5, 0x134A
9489:                                              DIRPWM1=Amplitude1;
00A4CC  809A44     MOV Amplitude1, W4
00A4CE  809A55     MOV 0x134A, W5
00A4D0  780204     MOV W4, W4
00A4D2  89F5C4     MOV W4, DIRPWM1
9490:                                             if (DIRPWM1<50)
00A4D4  81F5C5     MOV DIRPWM1, W5
00A4D6  200314     MOV #0x31, W4
00A4D8  528F84     SUB W5, W4, [W15]
00A4DA  3E0003     BRA GTU, 0xA4E2
9491:                                                 RecOdometrFl=1;
00A4DC  809604     MOV Flgs1, W4
00A4DE  A06004     BSET W4, #6
00A4E0  889604     MOV W4, Flgs1
9492:              
9493:                                       //       Amplitude2=Amplitude1;
9494:              
9495:                                                  }
9496:                                                if (DIRPWM1>1000)           
00A4E2  81F5C5     MOV DIRPWM1, W5
00A4E4  203E84     MOV #0x3E8, W4
00A4E6  528F84     SUB W5, W4, [W15]
00A4E8  360002     BRA LEU, 0xA4EE
9497:                                                    CntPhase=0;
00A4EA  EB0200     CLR W4
00A4EC  8A1374     MOV W4, CntPhase
9498:                                                      
9499:                                                    if (DS)
00A4EE  8096B5     MOV 0x12D6, W5
00A4F0  208004     MOV #0x800, W4
00A4F2  628204     AND W5, W4, W4
00A4F4  520FE0     SUB W4, #0x0, [W15]
00A4F6  321599     BRA Z, 0xD02A
9500:                                                      {
9501:                                                          DS=0;
00A4F8  8096B4     MOV 0x12D6, W4
00A4FA  A1B004     BCLR W4, #11
00A4FC  8896B4     MOV W4, 0x12D6
9502:                                                          RdSensors();
00A4FE  0765DB     RCALL RdSensors
9503:                                                      }
9504:                                                                      
9505:              
9506:              
9507:                                              }
9508:                                               else
9509:                                               {
9510:                                             DIRPWM1_TstKeys=RecBytes[3];
00A502  229294     MOV #0x2929, W4
00A504  784214     MOV.B [W4], W4
00A506  FB8204     ZE W4, W4
00A508  889314     MOV W4, DIRPWM1_TstKeys
9511:                                             DIRPWM1_TstKeys=DIRPWM1_TstKeys<<8;
00A50A  809314     MOV DIRPWM1_TstKeys, W4
00A50C  DD2248     SL W4, #8, W4
00A50E  889314     MOV W4, DIRPWM1_TstKeys
9512:                                             DIRPWM1_TstKeys=DIRPWM1_TstKeys+RecBytes[2];
00A510  229284     MOV #0x2928, W4
00A512  784214     MOV.B [W4], W4
00A514  FB8284     ZE W4, W5
00A516  809314     MOV DIRPWM1_TstKeys, W4
00A518  428204     ADD W5, W4, W4
00A51A  889314     MOV W4, DIRPWM1_TstKeys
9513:                                             
9514:                                                             Phases1();
00A51C  07F3DC     RCALL Phases1
9515:              
9516:                                               }                                     
9517:                                                   
9518:                                                   
9519:                                               break;
00A500  3715A1     BRA 0xD044
00A51E  371592     BRA 0xD044
00D02A  000000     NOP
00D02C  37000B     BRA 0xD044
9520:                                        }
9521:                                          case 23:
9522:                                          {
9523:                                             int Tm;
9524:                                             Tm=(int)RecBytes[3];
00A520  229294     MOV #0x2929, W4
00A522  784214     MOV.B [W4], W4
00A524  FB8204     ZE W4, W4
00A526  981F24     MOV W4, [W14+52]
9525:                                             Tm=Tm<<8;
00A528  901A2E     MOV [W14+52], W4
00A52A  DD2248     SL W4, #8, W4
00A52C  981F24     MOV W4, [W14+52]
9526:                                             Tm=Tm+RecBytes[2];
00A52E  229284     MOV #0x2928, W4
00A530  784214     MOV.B [W4], W4
00A532  FB8204     ZE W4, W4
00A534  901AAE     MOV [W14+52], W5
00A536  428204     ADD W5, W4, W4
00A538  981F24     MOV W4, [W14+52]
9527:                                             MAX_PWM_MEM=Tm;
00A53A  901A2E     MOV [W14+52], W4
00A53C  889984     MOV W4, MAX_PWM_MEM
9528:                                             if (MAX_PWM_MEM>100)
00A53E  809985     MOV MAX_PWM_MEM, W5
00A540  200644     MOV #0x64, W4
00A542  528F84     SUB W5, W4, [W15]
00A544  360002     BRA LEU, 0xA54A
9529:                                             MAX_PWM_MEM=100;
00A546  200644     MOV #0x64, W4
00A548  889984     MOV W4, MAX_PWM_MEM
9530:                                             MAX_PWM_MustBe=MAX_PWM_MEM;
00A54A  809984     MOV MAX_PWM_MEM, W4
00A54C  8899B4     MOV W4, MAX_PWM_MustBe
9531:                                             //MAX_PWM=(MAX_PWM_CONST/100)*MAX_PWM_MEM;
9532:                                             OptionsToMass();
00A54E  07194F     RCALL OptionsToMass
9533:                                             MustTrmFlashMass=1;
00A550  8095F4     MOV 0x12BE, W4
00A552  A02004     BSET W4, #2
00A554  8895F4     MOV W4, 0x12BE
9534:                                             break;
00A556  371576     BRA 0xD044
9535:                                          }
9536:                                          case 24:
9537:                                          {
9538:                                             AutoPID=1;
00A558  809744     MOV StatFlgs, W4
00A55A  A06004     BSET W4, #6
00A55C  889744     MOV W4, StatFlgs
9539:                                             OptionsToMass();
00A55E  071947     RCALL OptionsToMass
9540:                                             MustTrmFlashMass=1;
00A560  8095F4     MOV 0x12BE, W4
00A562  A02004     BSET W4, #2
00A564  8895F4     MOV W4, 0x12BE
9541:                                              break;
00A566  37156E     BRA 0xD044
9542:                                          }
9543:                                          case 25:
9544:                                          {
9545:                                             AutoPID=0;
00A568  809744     MOV StatFlgs, W4
00A56A  A16004     BCLR W4, #6
00A56C  889744     MOV W4, StatFlgs
9546:                                             OptionsToMass();
00A56E  07193F     RCALL OptionsToMass
9547:                                             MustTrmFlashMass=1;
00A570  8095F4     MOV 0x12BE, W4
00A572  A02004     BSET W4, #2
00A574  8895F4     MOV W4, 0x12BE
9548:                                             break;
00A576  371566     BRA 0xD044
9549:                                          }
9550:              
9551:              
9552:                                          case 26:
9553:                                          {
9554:                                              if (Lock)
00A578  809755     MOV StatFlgs1, W5
00A57A  201004     MOV #0x100, W4
00A57C  628204     AND W5, W4, W4
00A57E  520FE0     SUB W4, #0x0, [W15]
00A580  320006     BRA Z, 0xA58E
9555:                                              {
9556:                                              Lock=0;
00A582  809754     MOV StatFlgs1, W4
00A584  A18004     BCLR W4, #8
00A586  889754     MOV W4, StatFlgs1
9557:                                              //BreakPressed=0;
9558:                                              SoundNum=7;
00A588  2124B5     MOV #0x124B, W5
00A58A  B3C074     MOV.B #0x7, W4
00A58C  784A84     MOV.B W4, [W5]
9559:                                              }
9560:                                             OptionsToMass();
00A58E  07192F     RCALL OptionsToMass
9561:                                             MustTrmFlashMass=1;
00A590  8095F4     MOV 0x12BE, W4
00A592  A02004     BSET W4, #2
00A594  8895F4     MOV W4, 0x12BE
9562:                                              break;
00A596  371556     BRA 0xD044
9563:                                          }
9564:              
9565:                                          case 27:
9566:                                          {
9567:                                              CalibrateAcc=1;
00A598  8095F4     MOV 0x12BE, W4
00A59A  A01004     BSET W4, #1
00A59C  8895F4     MOV W4, 0x12BE
9568:                                              break;
00A59E  371552     BRA 0xD044
9569:                                          }
9570:              
9571:              
9572:                                        case 28:
9573:                                          {
9574:                                             int Tm;
9575:                                             Tm=(int)RecBytes[3];
00A5A0  229294     MOV #0x2929, W4
00A5A2  784214     MOV.B [W4], W4
00A5A4  FB8204     ZE W4, W4
00A5A6  981F34     MOV W4, [W14+54]
9576:                                             Tm=Tm<<8;
00A5A8  901A3E     MOV [W14+54], W4
00A5AA  DD2248     SL W4, #8, W4
00A5AC  981F34     MOV W4, [W14+54]
9577:                                             Tm=Tm+RecBytes[2];
00A5AE  229284     MOV #0x2928, W4
00A5B0  784214     MOV.B [W4], W4
00A5B2  FB8204     ZE W4, W4
00A5B4  901ABE     MOV [W14+54], W5
00A5B6  428204     ADD W5, W4, W4
00A5B8  981F34     MOV W4, [W14+54]
9578:                                             MaxSpeed=(int )Tm;
00A5BA  901ABE     MOV [W14+54], W5
00A5BC  8954C5     MOV W5, MaxSpeed
9579:                                             OptionsToMass();
00A5BE  071917     RCALL OptionsToMass
9580:                                             MustTrmFlashMass=1;
00A5C0  8095F4     MOV 0x12BE, W4
00A5C2  A02004     BSET W4, #2
00A5C4  8895F4     MOV W4, 0x12BE
9581:                                              break;
00A5C6  37153E     BRA 0xD044
9582:                                          }
9583:              
9584:                                        case 29:
9585:                                          {
9586:                                              if ((But1Func==4)||(But1Func==5))
00A5C8  2401C4     MOV #0x401C, W4
00A5CA  784214     MOV.B [W4], W4
00A5CC  524FE4     SUB.B W4, #0x4, [W15]
00A5CE  320004     BRA Z, 0xA5D8
00A5D0  2401C4     MOV #0x401C, W4
00A5D2  784214     MOV.B [W4], W4
00A5D4  524FE5     SUB.B W4, #0x5, [W15]
00A5D6  3A0009     BRA NZ, 0xA5EA
9587:                                              {
9588:                                                ProfileMass[13+0]=0;
00A5D8  22DC65     MOV #0x2DC6, W5
00A5DA  EB4200     CLR.B W4
00A5DC  784A84     MOV.B W4, [W5]
9589:                                                ProfileMass[13+SIZE_OF_PROFILE]=0;
00A5DE  22E0C5     MOV #0x2E0C, W5
00A5E0  EB4200     CLR.B W4
00A5E2  784A84     MOV.B W4, [W5]
9590:                                                ProfileMass[13+(SIZE_OF_PROFILE*2)]=0;
00A5E4  22E525     MOV #0x2E52, W5
00A5E6  EB4200     CLR.B W4
00A5E8  784A84     MOV.B W4, [W5]
9591:                                              }
9592:                                             But1Func=RecBytes[2];
00A5EA  229284     MOV #0x2928, W4
00A5EC  784214     MOV.B [W4], W4
00A5EE  2401C5     MOV #0x401C, W5
00A5F0  784A84     MOV.B W4, [W5]
9593:                                             OptionsToMass();
00A5F2  0718FD     RCALL OptionsToMass
9594:                                             MustTrmFlashMass=1;
00A5F4  8095F4     MOV 0x12BE, W4
00A5F6  A02004     BSET W4, #2
00A5F8  8895F4     MOV W4, 0x12BE
9595:                                              break;
00A5FA  371524     BRA 0xD044
9596:                                          }
9597:              
9598:                                        case 30:
9599:                                          {
9600:                                              PhasePERMASS=RecBytes[2];
00A5FC  229284     MOV #0x2928, W4
00A5FE  784214     MOV.B [W4], W4
00A600  2183A5     MOV #0x183A, W5
00A602  784A84     MOV.B W4, [W5]
9601:                                              PhasePERMASS_SHFT=RecBytes[3];
00A604  229294     MOV #0x2929, W4
00A606  784214     MOV.B [W4], W4
00A608  2183B5     MOV #0x183B, W5
00A60A  784A84     MOV.B W4, [W5]
9602:                                              OptionsToMass();
00A60C  0718F0     RCALL OptionsToMass
9603:                                              MustTrmFlashMass=1;
00A60E  8095F4     MOV 0x12BE, W4
00A610  A02004     BSET W4, #2
00A612  8895F4     MOV W4, 0x12BE
9604:                                              break;
00A614  371517     BRA 0xD044
9605:                                          }
9606:              
9607:              
9608:                                        case 31:
9609:                                          {
9610:                                              HallDelayMem1_F=RecBytes[2];
00A616  229284     MOV #0x2928, W4
00A618  784214     MOV.B [W4], W4
00A61A  214565     MOV #0x1456, W5
00A61C  784A84     MOV.B W4, [W5]
9611:                                              OptionsToMass();
00A61E  0718E7     RCALL OptionsToMass
9612:                                              MustTrmFlashMass=1;
00A620  8095F4     MOV 0x12BE, W4
00A622  A02004     BSET W4, #2
00A624  8895F4     MOV W4, 0x12BE
9613:                                             break;
00A626  37150E     BRA 0xD044
9614:                                          }
9615:              
9616:                                        case 32:
9617:                                          {
9618:                                              HallDelayMem1_B=RecBytes[2];
00A628  229284     MOV #0x2928, W4
00A62A  784214     MOV.B [W4], W4
00A62C  214575     MOV #0x1457, W5
00A62E  784A84     MOV.B W4, [W5]
9619:                                              OptionsToMass();
00A630  0718DE     RCALL OptionsToMass
9620:                                              MustTrmFlashMass=1;
00A632  8095F4     MOV 0x12BE, W4
00A634  A02004     BSET W4, #2
00A636  8895F4     MOV W4, 0x12BE
9621:                                              break;
00A638  371505     BRA 0xD044
9622:                                          }
9623:              
9624:                                        case 33:
9625:                                          {
9626:                                              if ((But2Func==4)||(But2Func==5))
00A63A  2401D4     MOV #0x401D, W4
00A63C  784214     MOV.B [W4], W4
00A63E  524FE4     SUB.B W4, #0x4, [W15]
00A640  320004     BRA Z, 0xA64A
00A642  2401D4     MOV #0x401D, W4
00A644  784214     MOV.B [W4], W4
00A646  524FE5     SUB.B W4, #0x5, [W15]
00A648  3A0009     BRA NZ, 0xA65C
9627:                                              {
9628:                                                ProfileMass[14+0]=0;
00A64A  22DC75     MOV #0x2DC7, W5
00A64C  EB4200     CLR.B W4
00A64E  784A84     MOV.B W4, [W5]
9629:                                                ProfileMass[14+SIZE_OF_PROFILE]=0;
00A650  22E0D5     MOV #0x2E0D, W5
00A652  EB4200     CLR.B W4
00A654  784A84     MOV.B W4, [W5]
9630:                                                ProfileMass[14+(SIZE_OF_PROFILE*2)]=0;
00A656  22E535     MOV #0x2E53, W5
00A658  EB4200     CLR.B W4
00A65A  784A84     MOV.B W4, [W5]
9631:                                              }
9632:                                             But2Func=RecBytes[2];
00A65C  229284     MOV #0x2928, W4
00A65E  784214     MOV.B [W4], W4
00A660  2401D5     MOV #0x401D, W5
00A662  784A84     MOV.B W4, [W5]
9633:                                             OptionsToMass();
00A664  0718C4     RCALL OptionsToMass
9634:                                             MustTrmFlashMass=1;
00A666  8095F4     MOV 0x12BE, W4
00A668  A02004     BSET W4, #2
00A66A  8895F4     MOV W4, 0x12BE
9635:                                              break;
00A66C  3714EB     BRA 0xD044
9636:                                          }
9637:              
9638:                                        case 34:
9639:                                          {
9640:                                             //ChangeCurrStateMachine=0;
9641:                                             int Tm;
9642:                                             Tm=(int)RecBytes[3];
00A66E  229294     MOV #0x2929, W4
00A670  784214     MOV.B [W4], W4
00A672  FB8204     ZE W4, W4
00A674  981F44     MOV W4, [W14+56]
9643:                                             Tm=Tm<<8;
00A676  901A4E     MOV [W14+56], W4
00A678  DD2248     SL W4, #8, W4
00A67A  981F44     MOV W4, [W14+56]
9644:                                             Tm=Tm+RecBytes[2];
00A67C  229284     MOV #0x2928, W4
00A67E  784214     MOV.B [W4], W4
00A680  FB8204     ZE W4, W4
00A682  901ACE     MOV [W14+56], W5
00A684  428204     ADD W5, W4, W4
00A686  981F44     MOV W4, [W14+56]
9645:                                             CurrLimitWork=Tm;
00A688  901A4E     MOV [W14+56], W4
00A68A  88C1A4     MOV W4, CurrLimitWork
9646:                                             
9647:                                             if ((!Sensorless)&&(!CurrDecrease))
00A68C  809755     MOV StatFlgs1, W5
00A68E  200204     MOV #0x20, W4
00A690  628204     AND W5, W4, W4
00A692  520FE0     SUB W4, #0x0, [W15]
00A694  3A0006     BRA NZ, 0xA6A2
00A696  8096A4     MOV Flgs6, W4
00A698  620270     AND W4, #0x10, W4
00A69A  520FE0     SUB W4, #0x0, [W15]
00A69C  3A0002     BRA NZ, 0xA6A2
9648:                                                 CurrLimit=CurrLimitWork;
00A69E  80C1A4     MOV CurrLimitWork, W4
00A6A0  88C194     MOV W4, CurrLimit
9649:                                             OptionsToMass();
00A6A2  0718A5     RCALL OptionsToMass
9650:                                             MustTrmFlashMass=1;
00A6A4  8095F4     MOV 0x12BE, W4
00A6A6  A02004     BSET W4, #2
00A6A8  8895F4     MOV W4, 0x12BE
9651:                                              ChangeCVR();
00A6AA  07299F     RCALL ChangeCVR
9652:                                              break;
00A6AC  3714CB     BRA 0xD044
9653:                                          }
9654:              
9655:                                          case 35:
9656:                                          {
9657:                                             int Tm;
9658:                                             Tm=(int)RecBytes[3];
00A6AE  229294     MOV #0x2929, W4
00A6B0  784214     MOV.B [W4], W4
00A6B2  FB8204     ZE W4, W4
00A6B4  981F54     MOV W4, [W14+58]
9659:                                             Tm=Tm<<8;
00A6B6  901A5E     MOV [W14+58], W4
00A6B8  DD2248     SL W4, #8, W4
00A6BA  981F54     MOV W4, [W14+58]
9660:                                             Tm=Tm+RecBytes[2];
00A6BC  229284     MOV #0x2928, W4
00A6BE  784214     MOV.B [W4], W4
00A6C0  FB8204     ZE W4, W4
00A6C2  901ADE     MOV [W14+58], W5
00A6C4  428204     ADD W5, W4, W4
00A6C6  981F54     MOV W4, [W14+58]
9661:                                             SpeedLimit1=Tm;
00A6C8  901A5E     MOV [W14+58], W4
00A6CA  898164     MOV W4, SpeedLimit1
9662:                                              
9663:              
9664:                                             OptionsToMass();
00A6CC  071890     RCALL OptionsToMass
9665:                                             MustTrmFlashMass=1;
00A6CE  8095F4     MOV 0x12BE, W4
00A6D0  A02004     BSET W4, #2
00A6D2  8895F4     MOV W4, 0x12BE
9666:                                             break;
00A6D4  3714B7     BRA 0xD044
9667:                                          }
9668:              
9669:                                          case 36:
9670:                                          {
9671:                                              DirectControlMotor=1;
00A6D6  809744     MOV StatFlgs, W4
00A6D8  A00004     BSET W4, #0
00A6DA  889744     MOV W4, StatFlgs
9672:              
9673:                                              DS=1;
00A6DC  8096B4     MOV 0x12D6, W4
00A6DE  A0B004     BSET W4, #11
00A6E0  8896B4     MOV W4, 0x12D6
9674:              
9675:                                              DIRPWM1=0;
00A6E2  EB0200     CLR W4
00A6E4  89F5C4     MOV W4, DIRPWM1
9676:              
9677:              
9678:              //                                ChangePWM1(0);
9679:              
9680:              
9681:                          Sensor1_Prev=Sensor1;
00A6E6  212464     MOV #0x1246, W4
00A6E8  784214     MOV.B [W4], W4
00A6EA  212475     MOV #0x1247, W5
00A6EC  784A84     MOV.B W4, [W5]
9682:                          Phases1();
00A6EE  07F2F3     RCALL Phases1
9683:              
9684:                                             OptionsToMass();
00A6F0  07187E     RCALL OptionsToMass
9685:                                             MustTrmFlashMass=1;
00A6F2  8095F4     MOV 0x12BE, W4
00A6F4  A02004     BSET W4, #2
00A6F6  8895F4     MOV W4, 0x12BE
9686:                                             break;
00A6F8  3714A5     BRA 0xD044
9687:                                          }
9688:              
9689:                                          case 37:
9690:                                          {
9691:              
9692:                                             DirectControlMotor=0;
00A6FA  809744     MOV StatFlgs, W4
00A6FC  A10004     BCLR W4, #0
00A6FE  889744     MOV W4, StatFlgs
9693:                                             
9694:              
9695:                                                      
9696:                                                      if (DS)
00A700  8096B5     MOV 0x12D6, W5
00A702  208004     MOV #0x800, W4
00A704  628204     AND W5, W4, W4
00A706  520FE0     SUB W4, #0x0, [W15]
00A708  320004     BRA Z, 0xA712
9697:                                                      {
9698:                                                      DS=0;
00A70A  8096B4     MOV 0x12D6, W4
00A70C  A1B004     BCLR W4, #11
00A70E  8896B4     MOV W4, 0x12D6
9699:                                                      RdSensors();
00A710  0764D2     RCALL RdSensors
9700:                                                      }
9701:                      
9702:              
9703:              
9704:              
9705:                                              NullPtr=1;
00A712  809624     MOV Flgs2, W4
00A714  A05004     BSET W4, #5
00A716  889624     MOV W4, Flgs2
9706:                                              NullPtrRot=1;
00A718  809624     MOV Flgs2, W4
00A71A  A07004     BSET W4, #7
00A71C  889624     MOV W4, Flgs2
9707:              
9708:                                              if (Monocycle)
00A71E  809745     MOV StatFlgs, W5
00A720  280004     MOV #0x8000, W4
00A722  628204     AND W5, W4, W4
00A724  520FE0     SUB W4, #0x0, [W15]
00A726  320009     BRA Z, 0xA73A
9709:                                                  {
9710:                                                  ESumm=0;
00A728  B82260     MUL.UU W4, #0, W4
00A72A  889B84     MOV W4, ESumm
00A72C  889B95     MOV W5, 0x1372
9711:                                                  NoBalance=1;
00A72E  8095E4     MOV Flgs, W4
00A730  A0B004     BSET W4, #11
00A732  8895E4     MOV W4, Flgs
9712:                                                  DS=1;
00A734  8096B4     MOV 0x12D6, W4
00A736  A0B004     BSET W4, #11
00A738  8896B4     MOV W4, 0x12D6
9713:                                                  }    
9714:              
9715:                                             
9716:              
9717:                                             NoBalanceCode=3;
00A73A  216D25     MOV #0x16D2, W5
00A73C  B3C034     MOV.B #0x3, W4
00A73E  784A84     MOV.B W4, [W5]
9718:                                             OptionsToMass();
00A740  071856     RCALL OptionsToMass
9719:                                             MustTrmFlashMass=1;
00A742  8095F4     MOV 0x12BE, W4
00A744  A02004     BSET W4, #2
00A746  8895F4     MOV W4, 0x12BE
9720:                                             break;
00A748  37147D     BRA 0xD044
9721:                                          }
9722:              
9723:                                        case 38:
9724:                                          {
9725:                                              CalibrateGyro=1;
00A74A  8095F4     MOV 0x12BE, W4
00A74C  A00004     BSET W4, #0
00A74E  8895F4     MOV W4, 0x12BE
9726:                                              break;
00A750  371479     BRA 0xD044
9727:                                          }
9728:              
9729:                                        case 39:
9730:                                          {
9731:                                              Theta1Zero=RecBytes[2];
00A752  229284     MOV #0x2928, W4
00A754  784214     MOV.B [W4], W4
00A756  213FE5     MOV #0x13FE, W5
00A758  784A84     MOV.B W4, [W5]
9732:                                              OptionsToMass();
00A75A  071849     RCALL OptionsToMass
9733:                                              MustTrmFlashMass=1;
00A75C  8095F4     MOV 0x12BE, W4
00A75E  A02004     BSET W4, #2
00A760  8895F4     MOV W4, 0x12BE
9734:                                              break;
00A762  371470     BRA 0xD044
9735:                                          }
9736:              
9737:                                        case 40:
9738:                                          {
9739:                                             int Tm;
9740:                                             Tm=(int)RecBytes[3];
00A764  229294     MOV #0x2929, W4
00A766  784214     MOV.B [W4], W4
00A768  FB8204     ZE W4, W4
00A76A  981F64     MOV W4, [W14+60]
9741:                                             Tm=Tm<<8;
00A76C  901A6E     MOV [W14+60], W4
00A76E  DD2248     SL W4, #8, W4
00A770  981F64     MOV W4, [W14+60]
9742:                                             Tm=Tm+RecBytes[2];
00A772  229284     MOV #0x2928, W4
00A774  784214     MOV.B [W4], W4
00A776  FB8204     ZE W4, W4
00A778  901AEE     MOV [W14+60], W5
00A77A  428204     ADD W5, W4, W4
00A77C  981F64     MOV W4, [W14+60]
9743:                                             UBatLow=Tm;
00A77E  901A6E     MOV [W14+60], W4
00A780  898324     MOV W4, UBatLow
9744:              #if !defined VECTOR
9745:              #if !defined ISOLATED                               
9746:                                             float UBtFl=(float)UBatLow*(float)38.388;
9747:                                             UBtLim1=(unsigned int)UBtFl;
9748:                                             UBtLim2=UBtLim1+115;
9749:              #else
9750:                                             float UBtFl=(float)UBatLow/(float)0.4167965;
9751:                                             UBtLim1=(unsigned int)UBtFl;
9752:                                             UBtLim2=UBtLim1+7;
9753:              #endif
9754:              #else
9755:                                             float UBtFl=(float)UBatLow*(float)38.388;
00A782  818324     MOV UBatLow, W4
00A784  200005     MOV #0x0, W5
00A786  BE0004     MOV.D W4, W0
00A788  022582     CALL ___floatunsisf
00A78A  000000     NOP
00A78C  BE0200     MOV.D W0, W4
00A78E  28D502     MOV #0x8D50, W2
00A790  242193     MOV #0x4219, W3
00A792  BE0004     MOV.D W4, W0
00A794  022630     CALL ___mulsf3
00A796  000000     NOP
00A798  BE0200     MOV.D W0, W4
00A79A  981F74     MOV W4, [W14+62]
00A79C  982705     MOV W5, [W14+64]
9756:                                             UBtLim1=(unsigned int)UBtFl;
00A79E  90187E     MOV [W14+62], W0
00A7A0  90208E     MOV [W14+64], W1
00A7A2  022546     CALL ___fixunssfsi
00A7A4  000000     NOP
00A7A6  BE0200     MOV.D W0, W4
00A7A8  780204     MOV W4, W4
00A7AA  898334     MOV W4, UBtLim1
9757:                                             UBtLim2=UBtLim1+115;
00A7AC  818334     MOV UBtLim1, W4
00A7AE  B00734     ADD #0x73, W4
00A7B0  898344     MOV W4, UBtLim2
9758:              #endif
9759:                                             OptionsToMass();
00A7B2  07181D     RCALL OptionsToMass
9760:                                             MustTrmFlashMass=1;
00A7B4  8095F4     MOV 0x12BE, W4
00A7B6  A02004     BSET W4, #2
00A7B8  8895F4     MOV W4, 0x12BE
9761:                                              break;
00A7BA  371444     BRA 0xD044
9762:                                          }
9763:              
9764:                                        case 41:
9765:                                          {
9766:                                          Odometr=0;
00A7BC  B82260     MUL.UU W4, #0, W4
00A7BE  898384     MOV W4, Odometr
00A7C0  898395     MOV W5, 0x3072
9767:                                          PhasesCnt2=0;
00A7C2  B82260     MUL.UU W4, #0, W4
00A7C4  8983A4     MOV W4, PhasesCnt2
00A7C6  8983B5     MOV W5, 0x3076
9768:                                          SendPhase=1;
00A7C8  8095F4     MOV 0x12BE, W4
00A7CA  A04004     BSET W4, #4
00A7CC  8895F4     MOV W4, 0x12BE
9769:                                          RecOdometrFl=1;
00A7CE  809604     MOV Flgs1, W4
00A7D0  A06004     BSET W4, #6
00A7D2  889604     MOV W4, Flgs1
9770:                                          break;
00A7D4  371437     BRA 0xD044
9771:                                          }
9772:              
9773:                                        case 42:
9774:                                          {
9775:                                          Beep_10m=1;
00A7D6  809744     MOV StatFlgs, W4
00A7D8  A03004     BSET W4, #3
00A7DA  889744     MOV W4, StatFlgs
9776:                                          OptionsToMass();
00A7DC  071808     RCALL OptionsToMass
9777:                                          MustTrmFlashMass=1;
00A7DE  8095F4     MOV 0x12BE, W4
00A7E0  A02004     BSET W4, #2
00A7E2  8895F4     MOV W4, 0x12BE
9778:                                          break;
00A7E4  37142F     BRA 0xD044
9779:                                          }
9780:              
9781:                                        case 43:
9782:                                          {
9783:                                          Beep_10m=0;
00A7E6  809744     MOV StatFlgs, W4
00A7E8  A13004     BCLR W4, #3
00A7EA  889744     MOV W4, StatFlgs
9784:                                          OptionsToMass();
00A7EC  071800     RCALL OptionsToMass
9785:                                          MustTrmFlashMass=1;
00A7EE  8095F4     MOV 0x12BE, W4
00A7F0  A02004     BSET W4, #2
00A7F2  8895F4     MOV W4, 0x12BE
9786:                                          break;
00A7F4  371427     BRA 0xD044
9787:                                          }
9788:              
9789:                                        case 44:
9790:                                          {
9791:                                              Theta2Zero=RecBytes[2];
00A7F6  229284     MOV #0x2928, W4
00A7F8  784214     MOV.B [W4], W4
00A7FA  213FF5     MOV #0x13FF, W5
00A7FC  784A84     MOV.B W4, [W5]
9792:                                              OptionsToMass();
00A7FE  0717F7     RCALL OptionsToMass
9793:                                              MustTrmFlashMass=1;
00A800  8095F4     MOV 0x12BE, W4
00A802  A02004     BSET W4, #2
00A804  8895F4     MOV W4, 0x12BE
9794:                                              break;
00A806  37141E     BRA 0xD044
9795:                                          }
9796:              
9797:              
9798:                                        case 45:
9799:                                          {
9800:                                              if (!Sensorless)
00A808  809755     MOV StatFlgs1, W5
00A80A  200204     MOV #0x20, W4
00A80C  628204     AND W5, W4, W4
00A80E  520FE0     SUB W4, #0x0, [W15]
00A810  3A0010     BRA NZ, 0xA832
9801:                                              {
9802:                                              VectorMem=1;
00A812  809754     MOV StatFlgs1, W4
00A814  A0A004     BSET W4, #10
00A816  889754     MOV W4, StatFlgs1
9803:                                              Vector=1;
00A818  809684     MOV Flgs5, W4
00A81A  A04004     BSET W4, #4
00A81C  889684     MOV W4, Flgs5
9804:                                              RdSensors();
00A81E  07644B     RCALL RdSensors
9805:                                              Amplitude1=PDC1;
00A820  806134     MOV PDC1, W4
00A822  200005     MOV #0x0, W5
00A824  889A44     MOV W4, Amplitude1
00A826  889A55     MOV W5, 0x134A
9806:                                              Amplitude2=PDC5;
00A828  806534     MOV PDC5, W4
00A82A  200005     MOV #0x0, W5
00A82C  889A64     MOV W4, Amplitude2
00A82E  889A75     MOV W5, 0x134E
9807:                                              VectorInit();
00A830  074D73     RCALL VectorInit
9808:                                              }
9809:                                             OptionsToMass();
00A832  0717DD     RCALL OptionsToMass
9810:                                             MustTrmFlashMass=1;
00A834  8095F4     MOV 0x12BE, W4
00A836  A02004     BSET W4, #2
00A838  8895F4     MOV W4, 0x12BE
9811:              
9812:                                             break;
00A83A  371404     BRA 0xD044
9813:                                          }
9814:              
9815:                                          case 46:
9816:                                          {
9817:                                              VectorMem=0;
00A83C  809754     MOV StatFlgs1, W4
00A83E  A1A004     BCLR W4, #10
00A840  889754     MOV W4, StatFlgs1
9818:                                              Vector=0;
00A842  809684     MOV Flgs5, W4
00A844  A14004     BCLR W4, #4
00A846  889684     MOV W4, Flgs5
9819:                                              if (!Sensorless)
00A848  809755     MOV StatFlgs1, W5
00A84A  200204     MOV #0x20, W4
00A84C  628204     AND W5, W4, W4
00A84E  520FE0     SUB W4, #0x0, [W15]
00A850  3A000E     BRA NZ, 0xA86E
9820:                                              {
9821:                                              RdSensors();
00A852  076431     RCALL RdSensors
9822:                                              TrapeziumInit();
00A854  074E18     RCALL TrapeziumInit
9823:                                              PDC1=Amplitude1;
00A856  809A44     MOV Amplitude1, W4
00A858  809A55     MOV 0x134A, W5
00A85A  780204     MOV W4, W4
00A85C  886134     MOV W4, PDC1
9824:                                              PDC2=Amplitude1;
00A85E  809A44     MOV Amplitude1, W4
00A860  809A55     MOV 0x134A, W5
00A862  780204     MOV W4, W4
00A864  886234     MOV W4, PDC2
9825:                                              PDC3=Amplitude1;
00A866  809A44     MOV Amplitude1, W4
00A868  809A55     MOV 0x134A, W5
00A86A  780204     MOV W4, W4
00A86C  886334     MOV W4, PDC3
9826:                                              }
9827:                                             OptionsToMass();
00A86E  0717BF     RCALL OptionsToMass
9828:                                             MustTrmFlashMass=1;
00A870  8095F4     MOV 0x12BE, W4
00A872  A02004     BSET W4, #2
00A874  8895F4     MOV W4, 0x12BE
9829:                                          
9830:                                              
9831:                                             break;
00A876  3713E6     BRA 0xD044
9832:                                          }
9833:              
9834:                                          case 47:
9835:                                          {
9836:                                             SpeedLimit3=RecBytes[2];
00A878  229284     MOV #0x2928, W4
00A87A  784214     MOV.B [W4], W4
00A87C  230215     MOV #0x3021, W5
00A87E  784A84     MOV.B W4, [W5]
9837:                                             
9838:                                             OptionsToMass();
00A880  0717B6     RCALL OptionsToMass
9839:                                             MustTrmFlashMass=1;
00A882  8095F4     MOV 0x12BE, W4
00A884  A02004     BSET W4, #2
00A886  8895F4     MOV W4, 0x12BE
9840:                                             break;
00A888  3713DD     BRA 0xD044
9841:                                          }
9842:              
9843:                                          case 48:
9844:                                          {
9845:                                             break;
9846:                                          }
9847:              
9848:                                        case 49:
9849:                                          {
9850:                                          SendPhase=1;
00A88A  8095F4     MOV 0x12BE, W4
00A88C  A04004     BSET W4, #4
00A88E  8895F4     MOV W4, 0x12BE
9851:                                          MustTrmErrors=1;
00A890  809624     MOV Flgs2, W4
00A892  A08004     BSET W4, #8
00A894  889624     MOV W4, Flgs2
9852:                                          break;
00A896  3713D6     BRA 0xD044
9853:                                          }
9854:              
9855:              
9856:              
9857:                                        case 50:
9858:                                          {
9859:                                              AnalogBreak=1;
00A898  809744     MOV StatFlgs, W4
00A89A  A0C004     BSET W4, #12
00A89C  889744     MOV W4, StatFlgs
9860:                                              SmoothBreak=0;
00A89E  809744     MOV StatFlgs, W4
00A8A0  A15004     BCLR W4, #5
00A8A2  889744     MOV W4, StatFlgs
9861:                                              OptionsToMass();
00A8A4  0717A4     RCALL OptionsToMass
9862:                                              MustTrmFlashMass=1;
00A8A6  8095F4     MOV 0x12BE, W4
00A8A8  A02004     BSET W4, #2
00A8AA  8895F4     MOV W4, 0x12BE
9863:                                              break;
00A8AC  3713CB     BRA 0xD044
9864:                                          }
9865:              
9866:              
9867:                                        case 51:
9868:                                          {
9869:                                             int Tm;
9870:                                             Tm=(int)RecBytes[3];
00A8AE  229294     MOV #0x2929, W4
00A8B0  784214     MOV.B [W4], W4
00A8B2  FB8204     ZE W4, W4
00A8B4  982714     MOV W4, [W14+66]
9871:                                             Tm=Tm<<8;
00A8B6  90221E     MOV [W14+66], W4
00A8B8  DD2248     SL W4, #8, W4
00A8BA  982714     MOV W4, [W14+66]
9872:                                             Tm=Tm+RecBytes[2];
00A8BC  229284     MOV #0x2928, W4
00A8BE  784214     MOV.B [W4], W4
00A8C0  FB8204     ZE W4, W4
00A8C2  90229E     MOV [W14+66], W5
00A8C4  428204     ADD W5, W4, W4
00A8C6  982714     MOV W4, [W14+66]
9873:                                             KpMax=(float )Tm;
00A8C8  90221E     MOV [W14+66], W4
00A8CA  DEA2CF     ASR W4, #15, W5
00A8CC  BE0004     MOV.D W4, W0
00A8CE  02257C     CALL ___floatsisf
00A8D0  000000     NOP
00A8D2  BE0200     MOV.D W0, W4
00A8D4  889D24     MOV W4, KpMax
00A8D6  889D35     MOV W5, 0x13A6
9874:                                             OptionsToMass();
00A8D8  07178A     RCALL OptionsToMass
9875:                                             MustTrmFlashMass=1;
00A8DA  8095F4     MOV 0x12BE, W4
00A8DC  A02004     BSET W4, #2
00A8DE  8895F4     MOV W4, 0x12BE
9876:                                              break;
00A8E0  3713B1     BRA 0xD044
9877:                                          }
9878:              
9879:              
9880:                                          case 52:
9881:                                          {
9882:                                             int Tm;
9883:                                             Tm=(int)RecBytes[3];
00A8E2  229294     MOV #0x2929, W4
00A8E4  784214     MOV.B [W4], W4
00A8E6  FB8204     ZE W4, W4
00A8E8  982724     MOV W4, [W14+68]
9884:                                             Tm=Tm<<8;
00A8EA  90222E     MOV [W14+68], W4
00A8EC  DD2248     SL W4, #8, W4
00A8EE  982724     MOV W4, [W14+68]
9885:                                             Tm=Tm+RecBytes[2];
00A8F0  229284     MOV #0x2928, W4
00A8F2  784214     MOV.B [W4], W4
00A8F4  FB8204     ZE W4, W4
00A8F6  9022AE     MOV [W14+68], W5
00A8F8  428204     ADD W5, W4, W4
00A8FA  982724     MOV W4, [W14+68]
9886:                                             V_MIN_OFF=Tm;
00A8FC  90222E     MOV [W14+68], W4
00A8FE  89C3C4     MOV W4, V_MIN_OFF
9887:                                             OptionsToMass();
00A900  071776     RCALL OptionsToMass
9888:                                             MustTrmFlashMass=1;
00A902  8095F4     MOV 0x12BE, W4
00A904  A02004     BSET W4, #2
00A906  8895F4     MOV W4, 0x12BE
9889:                                              break;
00A908  37139D     BRA 0xD044
9890:              
9891:              
9892:                                          }
9893:              
9894:                                          case 53:
9895:                                          {
9896:                                             SpdKpMax=RecBytes[2];
00A90A  229284     MOV #0x2928, W4
00A90C  784214     MOV.B [W4], W4
00A90E  2124E5     MOV #0x124E, W5
00A910  784A84     MOV.B W4, [W5]
9897:                                             OptionsToMass();
00A912  07176D     RCALL OptionsToMass
9898:                                             MustTrmFlashMass=1;
00A914  8095F4     MOV 0x12BE, W4
00A916  A02004     BSET W4, #2
00A918  8895F4     MOV W4, 0x12BE
9899:                                             break;
00A91A  371394     BRA 0xD044
9900:                                          }
9901:              
9902:                                          case 54:
9903:                                          {
9904:                                          MustTrmPacketHC05_FL=1;
00A91C  809624     MOV Flgs2, W4
00A91E  A02004     BSET W4, #2
00A920  889624     MOV W4, Flgs2
9905:                                          break;
00A922  371390     BRA 0xD044
9906:                                          }
9907:              
9908:                                        case 55:
9909:                                          {
9910:                                              AnalogBreak=0;
00A924  809744     MOV StatFlgs, W4
00A926  A1C004     BCLR W4, #12
00A928  889744     MOV W4, StatFlgs
9911:                                              BothBreaks=0;
00A92A  809774     MOV StatFlgs3, W4
00A92C  A13004     BCLR W4, #3
00A92E  889774     MOV W4, StatFlgs3
9912:                                              SmoothBreak=1;
00A930  809744     MOV StatFlgs, W4
00A932  A05004     BSET W4, #5
00A934  889744     MOV W4, StatFlgs
9913:                                              OptionsToMass();
00A936  07175B     RCALL OptionsToMass
9914:                                              MustTrmFlashMass=1;
00A938  8095F4     MOV 0x12BE, W4
00A93A  A02004     BSET W4, #2
00A93C  8895F4     MOV W4, 0x12BE
9915:                                              break;
00A93E  371382     BRA 0xD044
9916:                                          }
9917:              
9918:                                          case 56:
9919:                                          {
9920:                                             if ((But3Func==4)||(But3Func==5))
00A940  2401E4     MOV #0x401E, W4
00A942  784214     MOV.B [W4], W4
00A944  524FE4     SUB.B W4, #0x4, [W15]
00A946  320004     BRA Z, 0xA950
00A948  2401E4     MOV #0x401E, W4
00A94A  784214     MOV.B [W4], W4
00A94C  524FE5     SUB.B W4, #0x5, [W15]
00A94E  3A0009     BRA NZ, 0xA962
9921:                                              {
9922:                                                ProfileMass[15+0]=0;
00A950  22DC85     MOV #0x2DC8, W5
00A952  EB4200     CLR.B W4
00A954  784A84     MOV.B W4, [W5]
9923:                                                ProfileMass[15+SIZE_OF_PROFILE]=0;
00A956  22E0E5     MOV #0x2E0E, W5
00A958  EB4200     CLR.B W4
00A95A  784A84     MOV.B W4, [W5]
9924:                                                ProfileMass[15+(SIZE_OF_PROFILE*2)]=0;
00A95C  22E545     MOV #0x2E54, W5
00A95E  EB4200     CLR.B W4
00A960  784A84     MOV.B W4, [W5]
9925:                                              }
9926:                                             But3Func=RecBytes[2];
00A962  229284     MOV #0x2928, W4
00A964  784214     MOV.B [W4], W4
00A966  2401E5     MOV #0x401E, W5
00A968  784A84     MOV.B W4, [W5]
9927:                                             OptionsToMass();
00A96A  071741     RCALL OptionsToMass
9928:                                             MustTrmFlashMass=1;
00A96C  8095F4     MOV 0x12BE, W4
00A96E  A02004     BSET W4, #2
00A970  8895F4     MOV W4, 0x12BE
9929:                                              break;
00A972  371368     BRA 0xD044
9930:                                          }
9931:                                          case 57:
9932:                                          {
9933:                                              if ((But4Func==4)||(But4Func==5))
00A974  2401F4     MOV #0x401F, W4
00A976  784214     MOV.B [W4], W4
00A978  524FE4     SUB.B W4, #0x4, [W15]
00A97A  320004     BRA Z, 0xA984
00A97C  2401F4     MOV #0x401F, W4
00A97E  784214     MOV.B [W4], W4
00A980  524FE5     SUB.B W4, #0x5, [W15]
00A982  3A0009     BRA NZ, 0xA996
9934:                                              {
9935:                                                ProfileMass[16+0]=0;
00A984  22DC95     MOV #0x2DC9, W5
00A986  EB4200     CLR.B W4
00A988  784A84     MOV.B W4, [W5]
9936:                                                ProfileMass[16+SIZE_OF_PROFILE]=0;
00A98A  22E0F5     MOV #0x2E0F, W5
00A98C  EB4200     CLR.B W4
00A98E  784A84     MOV.B W4, [W5]
9937:                                                ProfileMass[16+(SIZE_OF_PROFILE*2)]=0;
00A990  22E555     MOV #0x2E55, W5
00A992  EB4200     CLR.B W4
00A994  784A84     MOV.B W4, [W5]
9938:                                              }
9939:                                             But4Func=RecBytes[2];
00A996  229284     MOV #0x2928, W4
00A998  784214     MOV.B [W4], W4
00A99A  2401F5     MOV #0x401F, W5
00A99C  784A84     MOV.B W4, [W5]
9940:                                             OptionsToMass();
00A99E  071727     RCALL OptionsToMass
9941:                                             MustTrmFlashMass=1;
00A9A0  8095F4     MOV 0x12BE, W4
00A9A2  A02004     BSET W4, #2
00A9A4  8895F4     MOV W4, 0x12BE
9942:                                              break;
00A9A6  37134E     BRA 0xD044
9943:                                          }
9944:              
9945:                                          case 58:
9946:                                          {
9947:                                             MAX_PWM_Revers=RecBytes[2];
00A9A8  229284     MOV #0x2928, W4
00A9AA  784214     MOV.B [W4], W4
00A9AC  FB8204     ZE W4, W4
00A9AE  8899A4     MOV W4, MAX_PWM_Revers
9948:                                             OptionsToMass();
00A9B0  07171E     RCALL OptionsToMass
9949:                                             MustTrmFlashMass=1;
00A9B2  8095F4     MOV 0x12BE, W4
00A9B4  A02004     BSET W4, #2
00A9B6  8895F4     MOV W4, 0x12BE
9950:                                          break;
00A9B8  371345     BRA 0xD044
9951:                                          }
9952:                                          case 59:
9953:                                          {
9954:                                             MaxSpdRevers=RecBytes[2];
00A9BA  229284     MOV #0x2928, W4
00A9BC  784214     MOV.B [W4], W4
00A9BE  230C65     MOV #0x30C6, W5
00A9C0  784A84     MOV.B W4, [W5]
9955:                                             OptionsToMass();
00A9C2  071715     RCALL OptionsToMass
9956:                                             MustTrmFlashMass=1;
00A9C4  8095F4     MOV 0x12BE, W4
00A9C6  A02004     BSET W4, #2
00A9C8  8895F4     MOV W4, 0x12BE
9957:                                          break;
00A9CA  37133C     BRA 0xD044
9958:                                          }
9959:              
9960:                                          case 60:
9961:                                          {
9962:                                          ErrOptions=0;
00A9CC  2305C5     MOV #0x305C, W5
00A9CE  EB4200     CLR.B W4
00A9D0  784A84     MOV.B W4, [W5]
9963:                                          ErrorCode=0;
00A9D2  216D05     MOV #0x16D0, W5
00A9D4  EB4200     CLR.B W4
00A9D6  784A84     MOV.B W4, [W5]
9964:                                          NoBalanceCode=0;
00A9D8  216D25     MOV #0x16D2, W5
00A9DA  EB4200     CLR.B W4
00A9DC  784A84     MOV.B W4, [W5]
9965:                                          MainTiltNumErr=0;
00A9DE  234D25     MOV #0x34D2, W5
00A9E0  EB4200     CLR.B W4
00A9E2  784A84     MOV.B W4, [W5]
9966:                                          SteerTiltNumErr=0;
00A9E4  234D35     MOV #0x34D3, W5
00A9E6  EB4200     CLR.B W4
00A9E8  784A84     MOV.B W4, [W5]
9967:                                          EEPROM_CHK_ERR=0;
00A9EA  809744     MOV StatFlgs, W4
00A9EC  A11004     BCLR W4, #1
00A9EE  889744     MOV W4, StatFlgs
9968:                                          EEPROM_Limit_ERR=0;
00A9F0  809744     MOV StatFlgs, W4
00A9F2  A12004     BCLR W4, #2
00A9F4  889744     MOV W4, StatFlgs
9969:                                          break;
00A9F6  371326     BRA 0xD044
9970:                                          }
9971:              
9972:                                          case 61:
9973:                                          {
9974:                                          WriteErr_Fl=1;
00A9F8  809614     MOV 0x12C2, W4
00A9FA  A04004     BSET W4, #4
00A9FC  889614     MOV W4, 0x12C2
9975:                                          break;
00A9FE  371322     BRA 0xD044
9976:                                          }
9977:                                          case 62:
9978:                                          {
9979:                                             break;
9980:                                          }
9981:              
9982:                                          case 63:
9983:                                          {
9984:                                              int Tm;
9985:                                             Tm=(int)RecBytes[3];
00AA00  229294     MOV #0x2929, W4
00AA02  784214     MOV.B [W4], W4
00AA04  FB8204     ZE W4, W4
00AA06  982734     MOV W4, [W14+70]
9986:                                             Tm=Tm<<8;
00AA08  90223E     MOV [W14+70], W4
00AA0A  DD2248     SL W4, #8, W4
00AA0C  982734     MOV W4, [W14+70]
9987:                                             Tm=Tm+RecBytes[2];
00AA0E  229284     MOV #0x2928, W4
00AA10  784214     MOV.B [W4], W4
00AA12  FB8204     ZE W4, W4
00AA14  9022BE     MOV [W14+70], W5
00AA16  428204     ADD W5, W4, W4
00AA18  982734     MOV W4, [W14+70]
9988:                                             TemperatureMaxOUT_H=Tm;
00AA1A  90223E     MOV [W14+70], W4
00AA1C  DEA2CF     ASR W4, #15, W5
00AA1E  BE0004     MOV.D W4, W0
00AA20  02257C     CALL ___floatsisf
00AA22  000000     NOP
00AA24  BE0200     MOV.D W0, W4
00AA26  8A0254     MOV W4, TemperatureMaxOUT_H
00AA28  8A0265     MOV W5, 0x404C
9989:                                             TemperatureMaxOUT_H=TemperatureMaxOUT_H/10;
00AA2A  820254     MOV TemperatureMaxOUT_H, W4
00AA2C  820265     MOV 0x404C, W5
00AA2E  200002     MOV #0x0, W2
00AA30  241203     MOV #0x4120, W3
00AA32  BE0004     MOV.D W4, W0
00AA34  02245A     CALL ___divsf3
00AA36  000000     NOP
00AA38  BE0200     MOV.D W0, W4
00AA3A  8A0254     MOV W4, TemperatureMaxOUT_H
00AA3C  8A0265     MOV W5, 0x404C
9990:                                             OptionsToMass();
00AA3E  0716D7     RCALL OptionsToMass
9991:                                             MustTrmFlashMass=1;
00AA40  8095F4     MOV 0x12BE, W4
00AA42  A02004     BSET W4, #2
00AA44  8895F4     MOV W4, 0x12BE
9992:                                             break;
00AA46  3712FE     BRA 0xD044
9993:                                          }
9994:              
9995:              
9996:                                          case 64:
9997:                                          {
9998:                                              break;
9999:                                          }
10000:                                         case 65:
10001:                                         {
10002:                                            int Tm;
10003:                                            Tm=(int)RecBytes[3];
00AA48  229294     MOV #0x2929, W4
00AA4A  784214     MOV.B [W4], W4
00AA4C  FB8204     ZE W4, W4
00AA4E  982744     MOV W4, [W14+72]
10004:                                            Tm=Tm<<8;
00AA50  90224E     MOV [W14+72], W4
00AA52  DD2248     SL W4, #8, W4
00AA54  982744     MOV W4, [W14+72]
10005:                                            Tm=Tm+RecBytes[2];
00AA56  229284     MOV #0x2928, W4
00AA58  784214     MOV.B [W4], W4
00AA5A  FB8204     ZE W4, W4
00AA5C  9022CE     MOV [W14+72], W5
00AA5E  428204     ADD W5, W4, W4
00AA60  982744     MOV W4, [W14+72]
10006:                                            KpWheelingMem=(float)Tm;
00AA62  90224E     MOV [W14+72], W4
00AA64  DEA2CF     ASR W4, #15, W5
00AA66  BE0004     MOV.D W4, W0
00AA68  02257C     CALL ___floatsisf
00AA6A  000000     NOP
00AA6C  BE0200     MOV.D W0, W4
00AA6E  889D44     MOV W4, KpWheelingMem
00AA70  889D55     MOV W5, 0x13AA
10007:                                            KpMustBe=KpWheelingMem;
00AA72  809D44     MOV KpWheelingMem, W4
00AA74  809D55     MOV 0x13AA, W5
00AA76  889BC4     MOV W4, KpMustBe
00AA78  889BD5     MOV W5, 0x137A
10008:                                            SetKpMustBe_UP();
00AA7A  074522     RCALL SetKpMustBe_UP
10009:             
10010:                                            OptionsToMass();
00AA7C  0716B8     RCALL OptionsToMass
10011:                                            MustTrmFlashMass=1;
00AA7E  8095F4     MOV 0x12BE, W4
00AA80  A02004     BSET W4, #2
00AA82  8895F4     MOV W4, 0x12BE
10012:                                            break;
00AA84  3712DF     BRA 0xD044
10013:                                         }
10014:             
10015:                                         case 66:
10016:                                         {
10017:                                            int Tm;
10018:                                            Tm=(int)RecBytes[3];
00AA86  229294     MOV #0x2929, W4
00AA88  784214     MOV.B [W4], W4
00AA8A  FB8204     ZE W4, W4
00AA8C  982754     MOV W4, [W14+74]
10019:                                            Tm=Tm<<8;
00AA8E  90225E     MOV [W14+74], W4
00AA90  DD2248     SL W4, #8, W4
00AA92  982754     MOV W4, [W14+74]
10020:                                            Tm=Tm+RecBytes[2];
00AA94  229284     MOV #0x2928, W4
00AA96  784214     MOV.B [W4], W4
00AA98  FB8204     ZE W4, W4
00AA9A  9022DE     MOV [W14+74], W5
00AA9C  428204     ADD W5, W4, W4
00AA9E  982754     MOV W4, [W14+74]
10021:                                            KiWheelingMem=Tm;
00AAA0  90225E     MOV [W14+74], W4
00AAA2  DEA2CF     ASR W4, #15, W5
00AAA4  BE0004     MOV.D W4, W0
00AAA6  02257C     CALL ___floatsisf
00AAA8  000000     NOP
00AAAA  BE0200     MOV.D W0, W4
00AAAC  889B64     MOV W4, KiWheelingMem
00AAAE  889B75     MOV W5, 0x136E
10022:                                            KiWheelingMem=KiWheelingMem/1000;
00AAB0  809B64     MOV KiWheelingMem, W4
00AAB2  809B75     MOV 0x136E, W5
00AAB4  200002     MOV #0x0, W2
00AAB6  2447A3     MOV #0x447A, W3
00AAB8  BE0004     MOV.D W4, W0
00AABA  02245A     CALL ___divsf3
00AABC  000000     NOP
00AABE  BE0200     MOV.D W0, W4
00AAC0  889B64     MOV W4, KiWheelingMem
00AAC2  889B75     MOV W5, 0x136E
10023:                                            KiMustBe=KiWheelingMem;
00AAC4  809B64     MOV KiWheelingMem, W4
00AAC6  809B75     MOV 0x136E, W5
00AAC8  889B24     MOV W4, KiMustBe
00AACA  889B35     MOV W5, 0x1366
10024:                                            SetKi_UP();
00AACC  07453D     RCALL SetKi_UP
10025:             
10026:                                            OptionsToMass();
00AACE  07168F     RCALL OptionsToMass
10027:                                            MustTrmFlashMass=1;
00AAD0  8095F4     MOV 0x12BE, W4
00AAD2  A02004     BSET W4, #2
00AAD4  8895F4     MOV W4, 0x12BE
10028:                                            ESumm=0;
00AAD6  B82260     MUL.UU W4, #0, W4
00AAD8  889B84     MOV W4, ESumm
00AADA  889B95     MOV W5, 0x1372
10029:                                            break;
00AADC  3712B3     BRA 0xD044
10030:                                         }
10031:             
10032:                                       case 67:
10033:                                         {
10034:                                            int Tm;
10035:                                            Tm=(int)RecBytes[3];
00AADE  229294     MOV #0x2929, W4
00AAE0  784214     MOV.B [W4], W4
00AAE2  FB8204     ZE W4, W4
00AAE4  982764     MOV W4, [W14+76]
10036:                                            Tm=Tm<<8;
00AAE6  90226E     MOV [W14+76], W4
00AAE8  DD2248     SL W4, #8, W4
00AAEA  982764     MOV W4, [W14+76]
10037:                                            Tm=Tm+RecBytes[2];
00AAEC  229284     MOV #0x2928, W4
00AAEE  784214     MOV.B [W4], W4
00AAF0  FB8204     ZE W4, W4
00AAF2  9022EE     MOV [W14+76], W5
00AAF4  428204     ADD W5, W4, W4
00AAF6  982764     MOV W4, [W14+76]
10038:                                            KpTemperOUT=(int )Tm;
00AAF8  90226E     MOV [W14+76], W4
00AAFA  DEA2CF     ASR W4, #15, W5
00AAFC  BE0004     MOV.D W4, W0
00AAFE  02257C     CALL ___floatsisf
00AB00  000000     NOP
00AB02  BE0200     MOV.D W0, W4
00AB04  8A03D4     MOV W4, KpTemperOUT
00AB06  8A03E5     MOV W5, 0x407C
10039:                                            OptionsToMass();
00AB08  071672     RCALL OptionsToMass
10040:                                            MustTrmFlashMass=1;
00AB0A  8095F4     MOV 0x12BE, W4
00AB0C  A02004     BSET W4, #2
00AB0E  8895F4     MOV W4, 0x12BE
10041:                                             break;
00AB10  371299     BRA 0xD044
10042:                                         }
10043:                                         case 68:
10044:                                         {
10045:                                            int Tm;
10046:                                            Tm=(int)RecBytes[3];
00AB12  229294     MOV #0x2929, W4
00AB14  784214     MOV.B [W4], W4
00AB16  FB8204     ZE W4, W4
00AB18  982774     MOV W4, [W14+78]
10047:                                            Tm=Tm<<8;
00AB1A  90227E     MOV [W14+78], W4
00AB1C  DD2248     SL W4, #8, W4
00AB1E  982774     MOV W4, [W14+78]
10048:                                            Tm=Tm+RecBytes[2];
00AB20  229284     MOV #0x2928, W4
00AB22  784214     MOV.B [W4], W4
00AB24  FB8204     ZE W4, W4
00AB26  9022FE     MOV [W14+78], W5
00AB28  428204     ADD W5, W4, W4
00AB2A  982774     MOV W4, [W14+78]
10049:                                            TiltZadWheeling=(float )Tm;
00AB2C  90227E     MOV [W14+78], W4
00AB2E  DEA2CF     ASR W4, #15, W5
00AB30  BE0004     MOV.D W4, W0
00AB32  02257C     CALL ___floatsisf
00AB34  000000     NOP
00AB36  BE0200     MOV.D W0, W4
00AB38  895694     MOV W4, TiltZadWheeling
00AB3A  8956A5     MOV W5, 0x2AD4
10050:                                            TiltZadWheeling=TiltZadWheeling/10;
00AB3C  815694     MOV TiltZadWheeling, W4
00AB3E  8156A5     MOV 0x2AD4, W5
00AB40  200002     MOV #0x0, W2
00AB42  241203     MOV #0x4120, W3
00AB44  BE0004     MOV.D W4, W0
00AB46  02245A     CALL ___divsf3
00AB48  000000     NOP
00AB4A  BE0200     MOV.D W0, W4
00AB4C  895694     MOV W4, TiltZadWheeling
00AB4E  8956A5     MOV W5, 0x2AD4
10051:                                            TiltZadTmp=TiltZadWheeling;
00AB50  815694     MOV TiltZadWheeling, W4
00AB52  8156A5     MOV 0x2AD4, W5
00AB54  895614     MOV W4, TiltZadTmp
00AB56  895625     MOV W5, 0x2AC4
10052:                                            OptionsToMass();
00AB58  07164A     RCALL OptionsToMass
10053:                                            MustTrmFlashMass=1;
00AB5A  8095F4     MOV 0x12BE, W4
00AB5C  A02004     BSET W4, #2
00AB5E  8895F4     MOV W4, 0x12BE
10054:                                             break;
00AB60  371271     BRA 0xD044
10055:                                         }
10056:             
10057:                                       case 69:
10058:                                         {
10059:                                            int Tm;
10060:                                            Tm=(int)RecBytes[3];
00AB62  229294     MOV #0x2929, W4
00AB64  784214     MOV.B [W4], W4
00AB66  FB8204     ZE W4, W4
00AB68  982F04     MOV W4, [W14+80]
10061:                                            Tm=Tm<<8;
00AB6A  902A0E     MOV [W14+80], W4
00AB6C  DD2248     SL W4, #8, W4
00AB6E  982F04     MOV W4, [W14+80]
10062:                                            Tm=Tm+RecBytes[2];
00AB70  229284     MOV #0x2928, W4
00AB72  784214     MOV.B [W4], W4
00AB74  FB8204     ZE W4, W4
00AB76  902A8E     MOV [W14+80], W5
00AB78  428204     ADD W5, W4, W4
00AB7A  982F04     MOV W4, [W14+80]
10063:                                            AutoPID_On_CntConst=(float )Tm;
00AB7C  902A0E     MOV [W14+80], W4
00AB7E  DEA2CF     ASR W4, #15, W5
00AB80  BE0004     MOV.D W4, W0
00AB82  02257C     CALL ___floatsisf
00AB84  000000     NOP
00AB86  BE0200     MOV.D W0, W4
00AB88  BE0004     MOV.D W4, W0
00AB8A  022546     CALL ___fixunssfsi
00AB8C  000000     NOP
00AB8E  BE0200     MOV.D W0, W4
00AB90  780204     MOV W4, W4
00AB92  8A18B4     MOV W4, AutoPID_On_CntConst
10064:                                            AutoPID_On_CntConst=AutoPID_On_CntConst*250;
00AB94  8218B5     MOV AutoPID_On_CntConst, W5
00AB96  200FA4     MOV #0xFA, W4
00AB98  B82A84     MUL.UU W5, W4, W4
00AB9A  8A18B4     MOV W4, AutoPID_On_CntConst
10065:                                            OptionsToMass();
00AB9C  071628     RCALL OptionsToMass
10066:                                            MustTrmFlashMass=1;
00AB9E  8095F4     MOV 0x12BE, W4
00ABA0  A02004     BSET W4, #2
00ABA2  8895F4     MOV W4, 0x12BE
10067:                                             
10068:                                             
10069:                                             break;
00ABA4  37124F     BRA 0xD044
10070:                                         }
10071:             
10072:                                       case 70:
10073:                                         {
10074:                                            int Tm;
10075:                                            Tm=(int)RecBytes[3];
00ABA6  229294     MOV #0x2929, W4
00ABA8  784214     MOV.B [W4], W4
00ABAA  FB8204     ZE W4, W4
00ABAC  982F14     MOV W4, [W14+82]
10076:                                            Tm=Tm<<8;
00ABAE  902A1E     MOV [W14+82], W4
00ABB0  DD2248     SL W4, #8, W4
00ABB2  982F14     MOV W4, [W14+82]
10077:                                            Tm=Tm+RecBytes[2];
00ABB4  229284     MOV #0x2928, W4
00ABB6  784214     MOV.B [W4], W4
00ABB8  FB8204     ZE W4, W4
00ABBA  902A9E     MOV [W14+82], W5
00ABBC  428204     ADD W5, W4, W4
00ABBE  982F14     MOV W4, [W14+82]
10078:                                            UBatHiMem=Tm;
00ABC0  902A1E     MOV [W14+82], W4
00ABC2  898354     MOV W4, UBatHiMem
10079:                                            UBatHi=(unsigned int)((float)UBatHiMem*(float)38.388);
00ABC4  818354     MOV UBatHiMem, W4
00ABC6  200005     MOV #0x0, W5
00ABC8  BE0004     MOV.D W4, W0
00ABCA  022582     CALL ___floatunsisf
00ABCC  000000     NOP
00ABCE  BE0200     MOV.D W0, W4
00ABD0  28D502     MOV #0x8D50, W2
00ABD2  242193     MOV #0x4219, W3
00ABD4  BE0004     MOV.D W4, W0
00ABD6  022630     CALL ___mulsf3
00ABD8  000000     NOP
00ABDA  BE0200     MOV.D W0, W4
00ABDC  BE0004     MOV.D W4, W0
00ABDE  022546     CALL ___fixunssfsi
00ABE0  000000     NOP
00ABE2  BE0200     MOV.D W0, W4
00ABE4  780204     MOV W4, W4
00ABE6  898364     MOV W4, UBatHi
10080:             #if !defined VECTOR
10081:             #if !defined ISOLATED
10082:                                            UBatHi=(unsigned int)((float)UBatHiMem*(float)38.388);
10083:             #else
10084:                                            UBatHi=(unsigned int)((float)UBatHiMem/(float)0.4167965);
10085:             #endif
10086:             #else
10087:                                            UBatHi=(unsigned int)((float)UBatHiMem*(float)38.388);
00ABE8  818354     MOV UBatHiMem, W4
00ABEA  200005     MOV #0x0, W5
00ABEC  BE0004     MOV.D W4, W0
00ABEE  022582     CALL ___floatunsisf
00ABF0  000000     NOP
00ABF2  BE0200     MOV.D W0, W4
00ABF4  28D502     MOV #0x8D50, W2
00ABF6  242193     MOV #0x4219, W3
00ABF8  BE0004     MOV.D W4, W0
00ABFA  022630     CALL ___mulsf3
00ABFC  000000     NOP
00ABFE  BE0200     MOV.D W0, W4
00AC00  BE0004     MOV.D W4, W0
00AC02  022546     CALL ___fixunssfsi
00AC04  000000     NOP
00AC06  BE0200     MOV.D W0, W4
00AC08  780204     MOV W4, W4
00AC0A  898364     MOV W4, UBatHi
10088:             #endif
10089:                                            
10090:                                            
10091:                                            
10092:                                            
10093:                                            
10094:                                            OptionsToMass();
00AC0C  0715F0     RCALL OptionsToMass
10095:                                            MustTrmFlashMass=1;
00AC0E  8095F4     MOV 0x12BE, W4
00AC10  A02004     BSET W4, #2
00AC12  8895F4     MOV W4, 0x12BE
10096:                                             break;
00AC14  371217     BRA 0xD044
10097:                                         }
10098:             
10099:                                       case 71:
10100:                                         {
10101:                                            int Tm;
10102:                                            Tm=(int)RecBytes[3];
00AC16  229294     MOV #0x2929, W4
00AC18  784214     MOV.B [W4], W4
00AC1A  FB8204     ZE W4, W4
00AC1C  982F24     MOV W4, [W14+84]
10103:                                            Tm=Tm<<8;
00AC1E  902A2E     MOV [W14+84], W4
00AC20  DD2248     SL W4, #8, W4
00AC22  982F24     MOV W4, [W14+84]
10104:                                            Tm=Tm+RecBytes[2];
00AC24  229284     MOV #0x2928, W4
00AC26  784214     MOV.B [W4], W4
00AC28  FB8204     ZE W4, W4
00AC2A  902AAE     MOV [W14+84], W5
00AC2C  428204     ADD W5, W4, W4
00AC2E  982F24     MOV W4, [W14+84]
10105:                                            KiTemperIN=(float )Tm;
00AC30  902A2E     MOV [W14+84], W4
00AC32  DEA2CF     ASR W4, #15, W5
00AC34  BE0004     MOV.D W4, W0
00AC36  02257C     CALL ___floatsisf
00AC38  000000     NOP
00AC3A  BE0200     MOV.D W0, W4
00AC3C  8A0314     MOV W4, KiTemperIN
00AC3E  8A0325     MOV W5, 0x4064
10106:                                            KiTemperIN=KiTemperIN/100;
00AC40  820314     MOV KiTemperIN, W4
00AC42  820325     MOV 0x4064, W5
00AC44  200002     MOV #0x0, W2
00AC46  242C83     MOV #0x42C8, W3
00AC48  BE0004     MOV.D W4, W0
00AC4A  02245A     CALL ___divsf3
00AC4C  000000     NOP
00AC4E  BE0200     MOV.D W0, W4
00AC50  8A0314     MOV W4, KiTemperIN
00AC52  8A0325     MOV W5, 0x4064
10107:                                            ETemperINSumm=0;
00AC54  B82260     MUL.UU W4, #0, W4
00AC56  8A0354     MOV W4, ETemperINSumm
00AC58  8A0365     MOV W5, 0x406C
10108:                                            OptionsToMass();
00AC5A  0715C9     RCALL OptionsToMass
10109:                                            MustTrmFlashMass=1;
00AC5C  8095F4     MOV 0x12BE, W4
00AC5E  A02004     BSET W4, #2
00AC60  8895F4     MOV W4, 0x12BE
10110:                                             break;
00AC62  3711F0     BRA 0xD044
10111:                                         }
10112:             
10113:             
10114:             
10115:                                         case 72:
10116:                                         {
10117:                                            int Tm;
10118:                                            Tm=(int)RecBytes[3];
00AC64  229294     MOV #0x2929, W4
00AC66  784214     MOV.B [W4], W4
00AC68  FB8204     ZE W4, W4
00AC6A  982F34     MOV W4, [W14+86]
10119:                                            Tm=Tm<<8;
00AC6C  902A3E     MOV [W14+86], W4
00AC6E  DD2248     SL W4, #8, W4
00AC70  982F34     MOV W4, [W14+86]
10120:                                            Tm=Tm+RecBytes[2];
00AC72  229284     MOV #0x2928, W4
00AC74  784214     MOV.B [W4], W4
00AC76  FB8204     ZE W4, W4
00AC78  902ABE     MOV [W14+86], W5
00AC7A  428204     ADD W5, W4, W4
00AC7C  982F34     MOV W4, [W14+86]
10121:                                            KiTemperOUT=(float)Tm;
00AC7E  902A3E     MOV [W14+86], W4
00AC80  DEA2CF     ASR W4, #15, W5
00AC82  BE0004     MOV.D W4, W0
00AC84  02257C     CALL ___floatsisf
00AC86  000000     NOP
00AC88  BE0200     MOV.D W0, W4
00AC8A  8A03B4     MOV W4, KiTemperOUT
00AC8C  8A03C5     MOV W5, 0x4078
10122:                                            KiTemperOUT=KiTemperOUT/100;
00AC8E  8203B4     MOV KiTemperOUT, W4
00AC90  8203C5     MOV 0x4078, W5
00AC92  200002     MOV #0x0, W2
00AC94  242C83     MOV #0x42C8, W3
00AC96  BE0004     MOV.D W4, W0
00AC98  02245A     CALL ___divsf3
00AC9A  000000     NOP
00AC9C  BE0200     MOV.D W0, W4
00AC9E  8A03B4     MOV W4, KiTemperOUT
00ACA0  8A03C5     MOV W5, 0x4078
10123:                                            ETemperOUTSumm=0;
00ACA2  B82260     MUL.UU W4, #0, W4
00ACA4  8A0554     MOV W4, ETemperOUTSumm
00ACA6  8A0565     MOV W5, 0x40AC
10124:                                            OptionsToMass();
00ACA8  0715A2     RCALL OptionsToMass
10125:                                            MustTrmFlashMass=1;
00ACAA  8095F4     MOV 0x12BE, W4
00ACAC  A02004     BSET W4, #2
00ACAE  8895F4     MOV W4, 0x12BE
10126:                                            break;
00ACB0  3711C9     BRA 0xD044
10127:                                         }
10128:             
10129:                                         case 73:
10130:                                         {
10131:                                             Profile=1;
00ACB2  237E25     MOV #0x37E2, W5
00ACB4  B3C014     MOV.B #0x1, W4
00ACB6  784A84     MOV.B W4, [W5]
10132:                                            MassToOptionsProfile();
00ACB8  077648     RCALL MassToOptionsProfile
10133:                                            OptionsToMass();
00ACBA  071599     RCALL OptionsToMass
10134:                                             CopyProfiles();
00ACBC  02B5DC     CALL CopyProfiles
00ACBE  000001     NOP
10135:                                            MassToOptions();
00ACC0  071D82     RCALL MassToOptions
10136:                                            OptionsToMass();
00ACC2  071595     RCALL OptionsToMass
10137:                                            MustTrmFlashMass=1;
00ACC4  8095F4     MOV 0x12BE, W4
00ACC6  A02004     BSET W4, #2
00ACC8  8895F4     MOV W4, 0x12BE
10138:                                            
10139:                                            break;
00ACCA  3711BC     BRA 0xD044
10140:                                         }
10141:             
10142:                                       case 74:
10143:                                         {
10144:                                             SensorTSTKeys=RecBytes[2];
00ACCC  229284     MOV #0x2928, W4
00ACCE  784214     MOV.B [W4], W4
00ACD0  240225     MOV #0x4022, W5
00ACD2  784A84     MOV.B W4, [W5]
10145:                                             break;
00ACD4  3711B7     BRA 0xD044
10146:                                         }
10147:                                         case 75:
10148:                                         {
10149:                                             break;
10150:                                         }
10151:             
10152:                                       case 76:
10153:                                         {
10154:                                             ZeroThroottle=1;
00ACD6  809744     MOV StatFlgs, W4
00ACD8  A08004     BSET W4, #8
00ACDA  889744     MOV W4, StatFlgs
10155:                                             break;
00ACDC  3711B3     BRA 0xD044
10156:                                         }
10157:             
10158:                                       case 77:
10159:                                         {
10160:                                            int Tm;
10161:                                            Tm=(int)RecBytes[3];
00ACDE  229294     MOV #0x2929, W4
00ACE0  784214     MOV.B [W4], W4
00ACE2  FB8204     ZE W4, W4
00ACE4  982F44     MOV W4, [W14+88]
10162:                                            Tm=Tm<<8;
00ACE6  902A4E     MOV [W14+88], W4
00ACE8  DD2248     SL W4, #8, W4
00ACEA  982F44     MOV W4, [W14+88]
10163:                                            Tm=Tm+RecBytes[2];
00ACEC  229284     MOV #0x2928, W4
00ACEE  784214     MOV.B [W4], W4
00ACF0  FB8204     ZE W4, W4
00ACF2  902ACE     MOV [W14+88], W5
00ACF4  428204     ADD W5, W4, W4
00ACF6  982F44     MOV W4, [W14+88]
10164:                                            KpRotOneTwoLeg=(float )Tm;
00ACF8  902A4E     MOV [W14+88], W4
00ACFA  DEA2CF     ASR W4, #15, W5
00ACFC  BE0004     MOV.D W4, W0
00ACFE  02257C     CALL ___floatsisf
00AD00  000000     NOP
00AD02  BE0200     MOV.D W0, W4
00AD04  89A6B4     MOV W4, KpRotOneTwoLeg
00AD06  89A6C5     MOV W5, 0x34D8
10165:                                            KpRotOneTwoLeg=KpRotOneTwoLeg/100;
00AD08  81A6B4     MOV KpRotOneTwoLeg, W4
00AD0A  81A6C5     MOV 0x34D8, W5
00AD0C  200002     MOV #0x0, W2
00AD0E  242C83     MOV #0x42C8, W3
00AD10  BE0004     MOV.D W4, W0
00AD12  02245A     CALL ___divsf3
00AD14  000000     NOP
00AD16  BE0200     MOV.D W0, W4
00AD18  89A6B4     MOV W4, KpRotOneTwoLeg
00AD1A  89A6C5     MOV W5, 0x34D8
10166:                                            OptionsToMass();
00AD1C  071568     RCALL OptionsToMass
10167:                                            MustTrmFlashMass=1;
00AD1E  8095F4     MOV 0x12BE, W4
00AD20  A02004     BSET W4, #2
00AD22  8895F4     MOV W4, 0x12BE
10168:                                             break;
00AD24  37118F     BRA 0xD044
10169:                                         }
10170:             
10171:                                       case 78:
10172:                                         {
10173:                                            int Tm;
10174:                                            Tm=(int)RecBytes[3];
00AD26  229294     MOV #0x2929, W4
00AD28  784214     MOV.B [W4], W4
00AD2A  FB8204     ZE W4, W4
00AD2C  982F54     MOV W4, [W14+90]
10175:                                            Tm=Tm<<8;
00AD2E  902A5E     MOV [W14+90], W4
00AD30  DD2248     SL W4, #8, W4
00AD32  982F54     MOV W4, [W14+90]
10176:                                            Tm=Tm+RecBytes[2];
00AD34  229284     MOV #0x2928, W4
00AD36  784214     MOV.B [W4], W4
00AD38  FB8204     ZE W4, W4
00AD3A  902ADE     MOV [W14+90], W5
00AD3C  428204     ADD W5, W4, W4
00AD3E  982F54     MOV W4, [W14+90]
10177:                                            KiRotOneTwoLeg=(float )Tm;
00AD40  902A5E     MOV [W14+90], W4
00AD42  DEA2CF     ASR W4, #15, W5
00AD44  BE0004     MOV.D W4, W0
00AD46  02257C     CALL ___floatsisf
00AD48  000000     NOP
00AD4A  BE0200     MOV.D W0, W4
00AD4C  89A6D4     MOV W4, KiRotOneTwoLeg
00AD4E  89A6E5     MOV W5, 0x34DC
10178:                                            KiRotOneTwoLeg=KiRotOneTwoLeg/10000;
00AD50  81A6D4     MOV KiRotOneTwoLeg, W4
00AD52  81A6E5     MOV 0x34DC, W5
00AD54  240002     MOV #0x4000, W2
00AD56  2461C3     MOV #0x461C, W3
00AD58  BE0004     MOV.D W4, W0
00AD5A  02245A     CALL ___divsf3
00AD5C  000000     NOP
00AD5E  BE0200     MOV.D W0, W4
00AD60  89A6D4     MOV W4, KiRotOneTwoLeg
00AD62  89A6E5     MOV W5, 0x34DC
10179:                                            OptionsToMass();
00AD64  071544     RCALL OptionsToMass
10180:                                            MustTrmFlashMass=1;
00AD66  8095F4     MOV 0x12BE, W4
00AD68  A02004     BSET W4, #2
00AD6A  8895F4     MOV W4, 0x12BE
10181:                                             break;
00AD6C  37116B     BRA 0xD044
10182:                                         }
10183:             
10184:             
10185:             
10186:                                       case 79:
10187:                                         {
10188:                                            int Tm;
10189:                                            Tm=(int)RecBytes[3];
00AD6E  229294     MOV #0x2929, W4
00AD70  784214     MOV.B [W4], W4
00AD72  FB8204     ZE W4, W4
00AD74  982F64     MOV W4, [W14+92]
10190:                                            Tm=Tm<<8;
00AD76  902A6E     MOV [W14+92], W4
00AD78  DD2248     SL W4, #8, W4
00AD7A  982F64     MOV W4, [W14+92]
10191:                                            Tm=Tm+RecBytes[2];
00AD7C  229284     MOV #0x2928, W4
00AD7E  784214     MOV.B [W4], W4
00AD80  FB8204     ZE W4, W4
00AD82  902AEE     MOV [W14+92], W5
00AD84  428204     ADD W5, W4, W4
00AD86  982F64     MOV W4, [W14+92]
10192:                                            Diametr1=Tm;
00AD88  902A6E     MOV [W14+92], W4
00AD8A  8A1434     MOV W4, Diametr1
10193:                                            CmImp1_t=(float)Diametr1*0.314159/(float)PhasesPerRev1;
00AD8C  821434     MOV Diametr1, W4
00AD8E  200005     MOV #0x0, W5
00AD90  BE0004     MOV.D W4, W0
00AD92  022582     CALL ___floatunsisf
00AD94  000000     NOP
00AD96  BE0200     MOV.D W0, W4
00AD98  2D9732     MOV #0xD973, W2
00AD9A  23EA03     MOV #0x3EA0, W3
00AD9C  BE0004     MOV.D W4, W0
00AD9E  022630     CALL ___mulsf3
00ADA0  000000     NOP
00ADA2  BE0200     MOV.D W0, W4
00ADA4  BE0404     MOV.D W4, W8
00ADA6  821424     MOV PhasesPerRev1, W4
00ADA8  200005     MOV #0x0, W5
00ADAA  BE0004     MOV.D W4, W0
00ADAC  022582     CALL ___floatunsisf
00ADAE  000000     NOP
00ADB0  BE0200     MOV.D W0, W4
00ADB2  BE0104     MOV.D W4, W2
00ADB4  BE0008     MOV.D W8, W0
00ADB6  02245A     CALL ___divsf3
00ADB8  000000     NOP
00ADBA  BE0200     MOV.D W0, W4
00ADBC  897E04     MOV W4, CmImp1_t
00ADBE  897E15     MOV W5, 0x2FC2
10194:                                            ImpToKmH1_t=CmImp1_t*0.36;
00ADC0  817E04     MOV CmImp1_t, W4
00ADC2  817E15     MOV 0x2FC2, W5
00ADC4  251EC2     MOV #0x51EC, W2
00ADC6  23EB83     MOV #0x3EB8, W3
00ADC8  BE0004     MOV.D W4, W0
00ADCA  022630     CALL ___mulsf3
00ADCC  000000     NOP
00ADCE  BE0200     MOV.D W0, W4
00ADD0  897E24     MOV W4, ImpToKmH1_t
00ADD2  897E35     MOV W5, 0x2FC6
10195:                                            OptionsToMass();
00ADD4  07150C     RCALL OptionsToMass
10196:                                            MustTrmFlashMass=1;
00ADD6  8095F4     MOV 0x12BE, W4
00ADD8  A02004     BSET W4, #2
00ADDA  8895F4     MOV W4, 0x12BE
10197:                                             break;
00ADDC  371133     BRA 0xD044
10198:                                         }
10199:             
10200:                                       case 80:
10201:                                         {
10202:                                            int Tm;
10203:                                            Tm=(int)RecBytes[3];
00ADDE  229294     MOV #0x2929, W4
00ADE0  784214     MOV.B [W4], W4
00ADE2  FB8204     ZE W4, W4
00ADE4  982F74     MOV W4, [W14+94]
10204:                                            Tm=Tm<<8;
00ADE6  902A7E     MOV [W14+94], W4
00ADE8  DD2248     SL W4, #8, W4
00ADEA  982F74     MOV W4, [W14+94]
10205:                                            Tm=Tm+RecBytes[2];
00ADEC  229284     MOV #0x2928, W4
00ADEE  784214     MOV.B [W4], W4
00ADF0  FB8204     ZE W4, W4
00ADF2  902AFE     MOV [W14+94], W5
00ADF4  428204     ADD W5, W4, W4
00ADF6  982F74     MOV W4, [W14+94]
10206:                                            PhasesPerRev1=Tm;
00ADF8  902A7E     MOV [W14+94], W4
00ADFA  8A1424     MOV W4, PhasesPerRev1
10207:                                            CmImp1_t=(float)Diametr1*0.314159/(float)PhasesPerRev1;
00ADFC  821434     MOV Diametr1, W4
00ADFE  200005     MOV #0x0, W5
00AE00  BE0004     MOV.D W4, W0
00AE02  022582     CALL ___floatunsisf
00AE04  000000     NOP
00AE06  BE0200     MOV.D W0, W4
00AE08  2D9732     MOV #0xD973, W2
00AE0A  23EA03     MOV #0x3EA0, W3
00AE0C  BE0004     MOV.D W4, W0
00AE0E  022630     CALL ___mulsf3
00AE10  000000     NOP
00AE12  BE0200     MOV.D W0, W4
00AE14  BE0404     MOV.D W4, W8
00AE16  821424     MOV PhasesPerRev1, W4
00AE18  200005     MOV #0x0, W5
00AE1A  BE0004     MOV.D W4, W0
00AE1C  022582     CALL ___floatunsisf
00AE1E  000000     NOP
00AE20  BE0200     MOV.D W0, W4
00AE22  BE0104     MOV.D W4, W2
00AE24  BE0008     MOV.D W8, W0
00AE26  02245A     CALL ___divsf3
00AE28  000000     NOP
00AE2A  BE0200     MOV.D W0, W4
00AE2C  897E04     MOV W4, CmImp1_t
00AE2E  897E15     MOV W5, 0x2FC2
10208:                                            ImpToKmH1_t=CmImp1_t*0.36;
00AE30  817E04     MOV CmImp1_t, W4
00AE32  817E15     MOV 0x2FC2, W5
00AE34  251EC2     MOV #0x51EC, W2
00AE36  23EB83     MOV #0x3EB8, W3
00AE38  BE0004     MOV.D W4, W0
00AE3A  022630     CALL ___mulsf3
00AE3C  000000     NOP
00AE3E  BE0200     MOV.D W0, W4
00AE40  897E24     MOV W4, ImpToKmH1_t
00AE42  897E35     MOV W5, 0x2FC6
10209:              
10210:                                            OptionsToMass();
00AE44  0714D4     RCALL OptionsToMass
10211:                                            MustTrmFlashMass=1;
00AE46  8095F4     MOV 0x12BE, W4
00AE48  A02004     BSET W4, #2
00AE4A  8895F4     MOV W4, 0x12BE
10212:                                             break;
00AE4C  3710FB     BRA 0xD044
10213:                                         }
10214:                                       case 81:
10215:                                         {
10216:                                             ZeroThroottle=0;
00AE4E  809744     MOV StatFlgs, W4
00AE50  A18004     BCLR W4, #8
00AE52  889744     MOV W4, StatFlgs
10217:                                             break;
00AE54  3710F7     BRA 0xD044
10218:                                         }
10219:             
10220:                                       case 82:
10221:                                         {
10222:                                            AutoPID_On_PWM=RecBytes[2];
00AE56  229284     MOV #0x2928, W4
00AE58  784214     MOV.B [W4], W4
00AE5A  240BA5     MOV #0x40BA, W5
00AE5C  784A84     MOV.B W4, [W5]
10223:                                            OptionsToMass();
00AE5E  0714C7     RCALL OptionsToMass
10224:                                            MustTrmFlashMass=1;
00AE60  8095F4     MOV 0x12BE, W4
00AE62  A02004     BSET W4, #2
00AE64  8895F4     MOV W4, 0x12BE
10225:                                           break;
00AE66  3710EE     BRA 0xD044
10226:                                         }
10227:                                       case 83:
10228:                                         {
10229:                                            AutoPID_On_Speed=RecBytes[2];
00AE68  229284     MOV #0x2928, W4
00AE6A  784214     MOV.B [W4], W4
00AE6C  240BB5     MOV #0x40BB, W5
00AE6E  784A84     MOV.B W4, [W5]
10230:                                            OptionsToMass();
00AE70  0714BE     RCALL OptionsToMass
10231:                                            MustTrmFlashMass=1;
00AE72  8095F4     MOV 0x12BE, W4
00AE74  A02004     BSET W4, #2
00AE76  8895F4     MOV W4, 0x12BE
10232:                                           break;
00AE78  3710E5     BRA 0xD044
10233:                                         }
10234:             
10235:             
10236:             
10237:                                         case 84:
10238:                                         {
10239:                                            StrongModePID=1;
00AE7A  809744     MOV StatFlgs, W4
00AE7C  A0D004     BSET W4, #13
00AE7E  889744     MOV W4, StatFlgs
10240:                                            OptionsToMass();
00AE80  0714B6     RCALL OptionsToMass
10241:                                            MustTrmFlashMass=1;
00AE82  8095F4     MOV 0x12BE, W4
00AE84  A02004     BSET W4, #2
00AE86  8895F4     MOV W4, 0x12BE
10242:                                             break;
00AE88  3710DD     BRA 0xD044
10243:                                         }
10244:             
10245:                                         case 85:
10246:                                         {
10247:                                            StrongModePID=0;
00AE8A  809744     MOV StatFlgs, W4
00AE8C  A1D004     BCLR W4, #13
00AE8E  889744     MOV W4, StatFlgs
10248:                                            OptionsToMass();
00AE90  0714AE     RCALL OptionsToMass
10249:                                            MustTrmFlashMass=1;
00AE92  8095F4     MOV 0x12BE, W4
00AE94  A02004     BSET W4, #2
00AE96  8895F4     MOV W4, 0x12BE
10250:                                            break;
00AE98  3710D5     BRA 0xD044
10251:                                         }
10252:             
10253:                                       case 86:
10254:                                         {
10255:                                            int Tm;
10256:                                            Tm=(int)RecBytes[3];
00AE9A  229294     MOV #0x2929, W4
00AE9C  784214     MOV.B [W4], W4
00AE9E  FB8204     ZE W4, W4
00AEA0  983704     MOV W4, [W14+96]
10257:                                            Tm=Tm<<8;
00AEA2  90320E     MOV [W14+96], W4
00AEA4  DD2248     SL W4, #8, W4
00AEA6  983704     MOV W4, [W14+96]
10258:                                            Tm=Tm+RecBytes[2];
00AEA8  229284     MOV #0x2928, W4
00AEAA  784214     MOV.B [W4], W4
00AEAC  FB8204     ZE W4, W4
00AEAE  90328E     MOV [W14+96], W5
00AEB0  428204     ADD W5, W4, W4
00AEB2  983704     MOV W4, [W14+96]
10259:                                            StartRotFreshmanL=(int )Tm;
00AEB4  90320E     MOV [W14+96], W4
00AEB6  89B7C4     MOV W4, StartRotFreshmanL
10260:                                            OptionsToMass();
00AEB8  07149A     RCALL OptionsToMass
10261:                                            MustTrmFlashMass=1;
00AEBA  8095F4     MOV 0x12BE, W4
00AEBC  A02004     BSET W4, #2
00AEBE  8895F4     MOV W4, 0x12BE
10262:                                             break;
00AEC0  3710C1     BRA 0xD044
10263:                                         }
10264:                                         case 87:
10265:                                         {
10266:                                             break;
10267:                                         }
10268:             
10269:                                       case 88:
10270:                                         {
10271:                                             break;
10272:                                         }
10273:             
10274:                                       case 89:
10275:                                         {
10276:                                            SmoothBreak=1;
00AEC2  809744     MOV StatFlgs, W4
00AEC4  A05004     BSET W4, #5
00AEC6  889744     MOV W4, StatFlgs
10277:                                            OptionsToMass();
00AEC8  071492     RCALL OptionsToMass
10278:                                            MustTrmFlashMass=1;
00AECA  8095F4     MOV 0x12BE, W4
00AECC  A02004     BSET W4, #2
00AECE  8895F4     MOV W4, 0x12BE
10279:                                             break;
00AED0  3710B9     BRA 0xD044
10280:                                         }
10281:             
10282:                                       case 90:
10283:                                         {
10284:                                            SmoothBreak=0;
00AED2  809744     MOV StatFlgs, W4
00AED4  A15004     BCLR W4, #5
00AED6  889744     MOV W4, StatFlgs
10285:                                            OptionsToMass();
00AED8  07148A     RCALL OptionsToMass
10286:                                            MustTrmFlashMass=1;
00AEDA  8095F4     MOV 0x12BE, W4
00AEDC  A02004     BSET W4, #2
00AEDE  8895F4     MOV W4, 0x12BE
10287:                                             break;
00AEE0  3710B1     BRA 0xD044
10288:                                         }
10289:             
10290:                                       case 91:
10291:                                         {
10292:                                            int Tm;
10293:                                            Tm=(int)RecBytes[3];
00AEE2  229294     MOV #0x2929, W4
00AEE4  784214     MOV.B [W4], W4
00AEE6  FB8204     ZE W4, W4
00AEE8  983714     MOV W4, [W14+98]
10294:                                            Tm=Tm<<8;
00AEEA  90321E     MOV [W14+98], W4
00AEEC  DD2248     SL W4, #8, W4
00AEEE  983714     MOV W4, [W14+98]
10295:                                            Tm=Tm+RecBytes[2];
00AEF0  229284     MOV #0x2928, W4
00AEF2  784214     MOV.B [W4], W4
00AEF4  FB8204     ZE W4, W4
00AEF6  90329E     MOV [W14+98], W5
00AEF8  428204     ADD W5, W4, W4
00AEFA  983714     MOV W4, [W14+98]
10296:                                            CurrUstSpd0=(int )Tm;
00AEFC  90329E     MOV [W14+98], W5
00AEFE  89F4A5     MOV W5, CurrUstSpd0
10297:                                            OptionsToMass();
00AF00  071476     RCALL OptionsToMass
10298:                                            MustTrmFlashMass=1;
00AF02  8095F4     MOV 0x12BE, W4
00AF04  A02004     BSET W4, #2
00AF06  8895F4     MOV W4, 0x12BE
10299:                                             break;
00AF08  37109D     BRA 0xD044
10300:                                         }
10301:             
10302:                                       case 92:
10303:                                         {
10304:                                            int Tm;
10305:                                            Tm=(int)RecBytes[3];
00AF0A  229294     MOV #0x2929, W4
00AF0C  784214     MOV.B [W4], W4
00AF0E  FB8204     ZE W4, W4
00AF10  983724     MOV W4, [W14+100]
10306:                                            Tm=Tm<<8;
00AF12  90322E     MOV [W14+100], W4
00AF14  DD2248     SL W4, #8, W4
00AF16  983724     MOV W4, [W14+100]
10307:                                            Tm=Tm+RecBytes[2];
00AF18  229284     MOV #0x2928, W4
00AF1A  784214     MOV.B [W4], W4
00AF1C  FB8204     ZE W4, W4
00AF1E  9032AE     MOV [W14+100], W5
00AF20  428204     ADD W5, W4, W4
00AF22  983724     MOV W4, [W14+100]
10308:                                            CurrPhaseLimitSpd0=(int )Tm;
00AF24  90322E     MOV [W14+100], W4
00AF26  89B7B4     MOV W4, CurrPhaseLimitSpd0
10309:                                            OptionsToMass();
00AF28  071462     RCALL OptionsToMass
10310:                                            MustTrmFlashMass=1;
00AF2A  8095F4     MOV 0x12BE, W4
00AF2C  A02004     BSET W4, #2
00AF2E  8895F4     MOV W4, 0x12BE
10311:                                             break;
00AF30  371089     BRA 0xD044
10312:                                         }
10313:             
10314:                                       case 93:
10315:                                         {
10316:                                            int Tm;
10317:                                            Tm=(int)RecBytes[3];
00AF32  229294     MOV #0x2929, W4
00AF34  784214     MOV.B [W4], W4
00AF36  FB8204     ZE W4, W4
00AF38  983734     MOV W4, [W14+102]
10318:                                            Tm=Tm<<8;
00AF3A  90323E     MOV [W14+102], W4
00AF3C  DD2248     SL W4, #8, W4
00AF3E  983734     MOV W4, [W14+102]
10319:                                            Tm=Tm+RecBytes[2];
00AF40  229284     MOV #0x2928, W4
00AF42  784214     MOV.B [W4], W4
00AF44  FB8204     ZE W4, W4
00AF46  9032BE     MOV [W14+102], W5
00AF48  428204     ADD W5, W4, W4
00AF4A  983734     MOV W4, [W14+102]
10320:                                            CurrLimitSpd0=(int )Tm;
00AF4C  90323E     MOV [W14+102], W4
00AF4E  89B7E4     MOV W4, CurrLimitSpd0
10321:                                            OptionsToMass();
00AF50  07144E     RCALL OptionsToMass
10322:                                            MustTrmFlashMass=1;
00AF52  8095F4     MOV 0x12BE, W4
00AF54  A02004     BSET W4, #2
00AF56  8895F4     MOV W4, 0x12BE
10323:                                             break;
00AF58  371075     BRA 0xD044
10324:                                         }
10325:             
10326:                                       case 94:
10327:                                         {
10328:                                            MaxAngleStopBreak=RecBytes[2];
00AF5A  229284     MOV #0x2928, W4
00AF5C  784214     MOV.B [W4], W4
00AF5E  236FE5     MOV #0x36FE, W5
00AF60  784A84     MOV.B W4, [W5]
10329:                                            OptionsToMass();
00AF62  071445     RCALL OptionsToMass
10330:                                            MustTrmFlashMass=1;
00AF64  8095F4     MOV 0x12BE, W4
00AF66  A02004     BSET W4, #2
00AF68  8895F4     MOV W4, 0x12BE
10331:                                             break;
00AF6A  37106C     BRA 0xD044
10332:                                         }
10333:             
10334:                                       case 95:
10335:                                         {
10336:                                             MustTrmFlashMassForSaveOptPC=1;
00AF6C  809694     MOV 0x12D2, W4
00AF6E  A01004     BSET W4, #1
00AF70  889694     MOV W4, 0x12D2
10337:                                           break;
00AF72  371068     BRA 0xD044
10338:                                         }
10339:                                       case 96:
10340:                                         {
10341:                                             MustTrmProfileMass=1;
00AF74  809694     MOV 0x12D2, W4
00AF76  A02004     BSET W4, #2
00AF78  889694     MOV W4, 0x12D2
10342:                                           break;
00AF7A  371064     BRA 0xD044
10343:                                         }
10344:             
10345:                                       case 97:
10346:                                         {
10347:                                           DefaultOptions();
00AF7C  074360     RCALL DefaultOptions
10348:                                           OptionsToMass();
00AF7E  071437     RCALL OptionsToMass
10349:                                           MustTrmFlashMass=1;
00AF80  8095F4     MOV 0x12BE, W4
00AF82  A02004     BSET W4, #2
00AF84  8895F4     MOV W4, 0x12BE
10350:                                           break;
00AF86  37105E     BRA 0xD044
10351:                                         }
10352:             
10353:                                       case 98:
10354:                                         {
10355:                                            int Tm;
10356:                                            Tm=(int)RecBytes[3];
00AF88  229294     MOV #0x2929, W4
00AF8A  784214     MOV.B [W4], W4
00AF8C  FB8204     ZE W4, W4
00AF8E  983744     MOV W4, [W14+104]
10357:                                            Tm=Tm<<8;
00AF90  90324E     MOV [W14+104], W4
00AF92  DD2248     SL W4, #8, W4
00AF94  983744     MOV W4, [W14+104]
10358:                                            Tm=Tm+RecBytes[2];
00AF96  229284     MOV #0x2928, W4
00AF98  784214     MOV.B [W4], W4
00AF9A  FB8204     ZE W4, W4
00AF9C  9032CE     MOV [W14+104], W5
00AF9E  428204     ADD W5, W4, W4
00AFA0  983744     MOV W4, [W14+104]
10359:                                            BeepPauseConstAlm=(int )Tm;
00AFA2  90324E     MOV [W14+104], W4
00AFA4  898574     MOV W4, BeepPauseConstAlm
10360:                                            OptionsToMass();
00AFA6  071423     RCALL OptionsToMass
10361:                                            MustTrmFlashMass=1;
00AFA8  8095F4     MOV 0x12BE, W4
00AFAA  A02004     BSET W4, #2
00AFAC  8895F4     MOV W4, 0x12BE
10362:                                             break;
00AFAE  37104A     BRA 0xD044
10363:                                         }
10364:             
10365:                                       case 99:
10366:                                         {
10367:                                            int Tm;
10368:                                            Tm=(int)RecBytes[3];
00AFB0  229294     MOV #0x2929, W4
00AFB2  784214     MOV.B [W4], W4
00AFB4  FB8204     ZE W4, W4
00AFB6  983754     MOV W4, [W14+106]
10369:                                            Tm=Tm<<8;
00AFB8  90325E     MOV [W14+106], W4
00AFBA  DD2248     SL W4, #8, W4
00AFBC  983754     MOV W4, [W14+106]
10370:                                            Tm=Tm+RecBytes[2];
00AFBE  229284     MOV #0x2928, W4
00AFC0  784214     MOV.B [W4], W4
00AFC2  FB8204     ZE W4, W4
00AFC4  9032DE     MOV [W14+106], W5
00AFC6  428204     ADD W5, W4, W4
00AFC8  983754     MOV W4, [W14+106]
10371:                                            BzOnCntSeriaConstAlm=(int )Tm;
00AFCA  90325E     MOV [W14+106], W4
00AFCC  8980C4     MOV W4, BzOnCntSeriaConstAlm
10372:                                            OptionsToMass();
00AFCE  07140F     RCALL OptionsToMass
10373:                                            MustTrmFlashMass=1;
00AFD0  8095F4     MOV 0x12BE, W4
00AFD2  A02004     BSET W4, #2
00AFD4  8895F4     MOV W4, 0x12BE
10374:                                             break;
00AFD6  371036     BRA 0xD044
10375:                                         }
10376:             
10377:                                       case 100:
10378:                                         {
10379:                                            int Tm;
10380:                                            Tm=(int)RecBytes[3];
00AFD8  229294     MOV #0x2929, W4
00AFDA  784214     MOV.B [W4], W4
00AFDC  FB8204     ZE W4, W4
00AFDE  983764     MOV W4, [W14+108]
10381:                                            Tm=Tm<<8;
00AFE0  90326E     MOV [W14+108], W4
00AFE2  DD2248     SL W4, #8, W4
00AFE4  983764     MOV W4, [W14+108]
10382:                                            Tm=Tm+RecBytes[2];
00AFE6  229284     MOV #0x2928, W4
00AFE8  784214     MOV.B [W4], W4
00AFEA  FB8204     ZE W4, W4
00AFEC  9032EE     MOV [W14+108], W5
00AFEE  428204     ADD W5, W4, W4
00AFF0  983764     MOV W4, [W14+108]
10383:                                            CntSingleBeepAlm=(int )Tm;
00AFF2  90326E     MOV [W14+108], W4
00AFF4  784204     MOV.B W4, W4
00AFF6  230AA5     MOV #0x30AA, W5
00AFF8  784A84     MOV.B W4, [W5]
10384:                                            OptionsToMass();
00AFFA  0713F9     RCALL OptionsToMass
10385:                                            MustTrmFlashMass=1;
00AFFC  8095F4     MOV 0x12BE, W4
00AFFE  A02004     BSET W4, #2
00B000  8895F4     MOV W4, 0x12BE
10386:                                             break;
00B002  371020     BRA 0xD044
10387:                                         }
10388:             
10389:                                       case 101:
10390:                                         {
10391:                                            DiffAlfaConstL=RecBytes[2];
00B004  229284     MOV #0x2928, W4
00B006  784214     MOV.B [W4], W4
00B008  236FF5     MOV #0x36FF, W5
00B00A  784A84     MOV.B W4, [W5]
10392:                                            OptionsToMass();
00B00C  0713F0     RCALL OptionsToMass
10393:                                            MustTrmFlashMass=1;
00B00E  8095F4     MOV 0x12BE, W4
00B010  A02004     BSET W4, #2
00B012  8895F4     MOV W4, 0x12BE
10394:                                             break;
00B014  371017     BRA 0xD044
10395:                                         }
10396:                                       case 102:
10397:                                         {
10398:                                            DiffAlfaConstH=RecBytes[2];
00B016  229284     MOV #0x2928, W4
00B018  784214     MOV.B [W4], W4
00B01A  237005     MOV #0x3700, W5
00B01C  784A84     MOV.B W4, [W5]
10399:                                            OptionsToMass();
00B01E  0713E7     RCALL OptionsToMass
10400:                                            MustTrmFlashMass=1;
00B020  8095F4     MOV 0x12BE, W4
00B022  A02004     BSET W4, #2
00B024  8895F4     MOV W4, 0x12BE
10401:                                             break;
00B026  37100E     BRA 0xD044
10402:                                         }
10403:             
10404:             
10405:                                       case 103:
10406:                                         {
10407:                                             NameRBW=1;
00B028  809644     MOV Flgs3, W4
00B02A  A01004     BSET W4, #1
00B02C  889644     MOV W4, Flgs3
10408:                                             SpeedRBW=0;
00B02E  809644     MOV Flgs3, W4
00B030  A12004     BCLR W4, #2
00B032  889644     MOV W4, Flgs3
10409:                                             Robowell=1;
00B034  809644     MOV Flgs3, W4
00B036  A00004     BSET W4, #0
00B038  889644     MOV W4, Flgs3
10410:             
10411:                                            break;
00B03A  371004     BRA 0xD044
10412:                                         }
10413:             
10414:                                       case 104:
10415:                                         {
10416:                                             NameRBW=0;
00B03C  809644     MOV Flgs3, W4
00B03E  A11004     BCLR W4, #1
00B040  889644     MOV W4, Flgs3
10417:                                             SpeedRBW=1;
00B042  809644     MOV Flgs3, W4
00B044  A02004     BSET W4, #2
00B046  889644     MOV W4, Flgs3
10418:                                             Robowell=1;
00B048  809644     MOV Flgs3, W4
00B04A  A00004     BSET W4, #0
00B04C  889644     MOV W4, Flgs3
10419:             
10420:                                            break;
00B04E  370FFA     BRA 0xD044
10421:                                         }
10422:                                       case 105:
10423:                                         {
10424:                                             NameRBW=1;
00B050  809644     MOV Flgs3, W4
00B052  A01004     BSET W4, #1
00B054  889644     MOV W4, Flgs3
10425:                                             SpeedRBW=0;
00B056  809644     MOV Flgs3, W4
00B058  A12004     BCLR W4, #2
00B05A  889644     MOV W4, Flgs3
10426:                                             GetRobowell=1;
00B05C  809644     MOV Flgs3, W4
00B05E  A03004     BSET W4, #3
00B060  889644     MOV W4, Flgs3
10427:                                            break;
00B062  370FF0     BRA 0xD044
10428:                                         }
10429:             
10430:                                       case 106:
10431:                                         {
10432:                                             NameRBW=0;
00B064  809644     MOV Flgs3, W4
00B066  A11004     BCLR W4, #1
00B068  889644     MOV W4, Flgs3
10433:                                             SpeedRBW=1;
00B06A  809644     MOV Flgs3, W4
00B06C  A02004     BSET W4, #2
00B06E  889644     MOV W4, Flgs3
10434:                                             GetRobowell=1;
00B070  809644     MOV Flgs3, W4
00B072  A03004     BSET W4, #3
00B074  889644     MOV W4, Flgs3
10435:                                            break;
00B076  370FE6     BRA 0xD044
10436:                                         }
10437:             
10438:                                       case 107:
10439:                                         {
10440:                                            Calibrating=1;
00B078  809644     MOV Flgs3, W4
00B07A  A04004     BSET W4, #4
00B07C  889644     MOV W4, Flgs3
10441:                                            break;
00B07E  370FE2     BRA 0xD044
10442:                                         }
10443:             
10444:                                       case 108:
10445:                                         {
10446:                                            ClearCurrentAH=1;
00B080  809644     MOV Flgs3, W4
00B082  A05004     BSET W4, #5
00B084  889644     MOV W4, Flgs3
10447:                                            break;
00B086  370FDE     BRA 0xD044
10448:                                         }
10449:             
10450:                                       case 109:
10451:                                         {
10452:                                            _3psnSwitchBtNotPressed=RecBytes[2];
00B088  229284     MOV #0x2928, W4
00B08A  784214     MOV.B [W4], W4
00B08C  214045     MOV #0x1404, W5
00B08E  784A84     MOV.B W4, [W5]
10453:                                            OptionsToMass();
00B090  0713AE     RCALL OptionsToMass
10454:                                            MustTrmFlashMass=1;
00B092  8095F4     MOV 0x12BE, W4
00B094  A02004     BSET W4, #2
00B096  8895F4     MOV W4, 0x12BE
10455:                                            break;
00B098  370FD5     BRA 0xD044
10456:                                         }
10457:                                       case 110:
10458:                                         {
10459:                                            _3psnSwitchBt3=RecBytes[2];
00B09A  229284     MOV #0x2928, W4
00B09C  784214     MOV.B [W4], W4
00B09E  214055     MOV #0x1405, W5
00B0A0  784A84     MOV.B W4, [W5]
10460:                                            OptionsToMass();
00B0A2  0713A5     RCALL OptionsToMass
10461:                                            MustTrmFlashMass=1;
00B0A4  8095F4     MOV 0x12BE, W4
00B0A6  A02004     BSET W4, #2
00B0A8  8895F4     MOV W4, 0x12BE
10462:                                            break;
00B0AA  370FCC     BRA 0xD044
10463:                                         }
10464:             
10465:                                       case 111:
10466:                                         {
10467:                                            _3psnSwitchBt4=RecBytes[2];
00B0AC  229284     MOV #0x2928, W4
00B0AE  784214     MOV.B [W4], W4
00B0B0  214065     MOV #0x1406, W5
00B0B2  784A84     MOV.B W4, [W5]
10468:                                            OptionsToMass();
00B0B4  07139C     RCALL OptionsToMass
10469:                                            MustTrmFlashMass=1;
00B0B6  8095F4     MOV 0x12BE, W4
00B0B8  A02004     BSET W4, #2
00B0BA  8895F4     MOV W4, 0x12BE
10470:                                            break;
00B0BC  370FC3     BRA 0xD044
10471:                                         }
10472:                                       case 112:
10473:                                         {
10474:                                             int Tm;
10475:             
10476:                                             for (Tm=0;Tm<sizeof(FlashMass);Tm++)
00B0BE  EB0200     CLR W4
00B0C0  980754     MOV W4, [W14+10]
00B0C2  37000C     BRA 0xB0DC
00B0D6  90025E     MOV [W14+10], W4
00B0D8  E80204     INC W4, W4
00B0DA  980754     MOV W4, [W14+10]
00B0DC  9002DE     MOV [W14+10], W5
00B0DE  200F24     MOV #0xF2, W4
00B0E0  528F84     SUB W5, W4, [W15]
00B0E2  36FFF0     BRA LEU, 0xB0C4
10477:                                                 FlashMass[Tm]=RecBytes[Tm+4];
00B0C4  90025E     MOV [W14+10], W4
00B0C6  420264     ADD W4, #0x4, W4
00B0C8  229265     MOV #0x2926, W5
00B0CA  428204     ADD W5, W4, W4
00B0CC  784214     MOV.B [W4], W4
00B0CE  22AE06     MOV #0x2AE0, W6
00B0D0  9002DE     MOV [W14+10], W5
00B0D2  430285     ADD W6, W5, W5
00B0D4  784A84     MOV.B W4, [W5]
10478:                                             FlashMass[208]=SensOrder1;
00B0E4  212494     MOV #0x1249, W4
00B0E6  784214     MOV.B [W4], W4
00B0E8  22BB05     MOV #0x2BB0, W5
00B0EA  784A84     MOV.B W4, [W5]
10479:                                             MassToOptions();
00B0EC  071B6C     RCALL MassToOptions
10480:                                             MassToOptionsProfile();
00B0EE  07742D     RCALL MassToOptionsProfile
10481:                                             MustTrmCmdOk=1;
00B0F0  809694     MOV 0x12D2, W4
00B0F2  A03004     BSET W4, #3
00B0F4  889694     MOV W4, 0x12D2
10482:                                            break;
00B0F6  370FA6     BRA 0xD044
10483:                                         }
10484:             
10485:                                       case 113:
10486:                                         {
10487:                                             MustSendDataPacket=1;
00B0F8  809644     MOV Flgs3, W4
00B0FA  A07004     BSET W4, #7
00B0FC  889644     MOV W4, Flgs3
10488:                                            break;
00B0FE  370FA2     BRA 0xD044
10489:                                         }
10490:                                       case 114:
10491:                                         {
10492:                                             NoAutoTrm=1;
00B100  809744     MOV StatFlgs, W4
00B102  A0A004     BSET W4, #10
00B104  889744     MOV W4, StatFlgs
10493:                                            break;
00B106  370F9E     BRA 0xD044
10494:                                         }
10495:                                       case 115:
10496:                                         {
10497:                                             NoAutoTrm=0;
00B108  809744     MOV StatFlgs, W4
00B10A  A1A004     BCLR W4, #10
00B10C  889744     MOV W4, StatFlgs
10498:                                            break;
00B10E  370F9A     BRA 0xD044
10499:                                         }
10500:                                       case 116:
10501:                                         {
10502:                                            int Tm;
10503:                                            Tm=(int)RecBytes[3];
00B110  229294     MOV #0x2929, W4
00B112  784214     MOV.B [W4], W4
00B114  FB8204     ZE W4, W4
00B116  983774     MOV W4, [W14+110]
10504:                                            Tm=Tm<<8;
00B118  90327E     MOV [W14+110], W4
00B11A  DD2248     SL W4, #8, W4
00B11C  983774     MOV W4, [W14+110]
10505:                                            Tm=Tm+RecBytes[2];
00B11E  229284     MOV #0x2928, W4
00B120  784214     MOV.B [W4], W4
00B122  FB8204     ZE W4, W4
00B124  9032FE     MOV [W14+110], W5
00B126  428204     ADD W5, W4, W4
00B128  983774     MOV W4, [W14+110]
10506:                                            Timer1Mem=(unsigned int )Tm;
00B12A  90327E     MOV [W14+110], W4
00B12C  89BA04     MOV W4, Timer1Mem
10507:                                            SetTmrConst();
00B12E  07474E     RCALL SetTmrConst
10508:                                            OptionsToMass();
00B130  07135E     RCALL OptionsToMass
10509:                                            MustTrmFlashMass=1;
00B132  8095F4     MOV 0x12BE, W4
00B134  A02004     BSET W4, #2
00B136  8895F4     MOV W4, 0x12BE
10510:                                             break;
00B138  370F85     BRA 0xD044
10511:                                         }
10512:             
10513:                                       case 117:
10514:                                         {
10515:                                            int Tm;
10516:                                            Tm=(int)RecBytes[3];
00B13A  229294     MOV #0x2929, W4
00B13C  784214     MOV.B [W4], W4
00B13E  FB8204     ZE W4, W4
00B140  983F04     MOV W4, [W14+112]
10517:                                            Tm=Tm<<8;
00B142  903A0E     MOV [W14+112], W4
00B144  DD2248     SL W4, #8, W4
00B146  983F04     MOV W4, [W14+112]
10518:                                            Tm=Tm+RecBytes[2];
00B148  229284     MOV #0x2928, W4
00B14A  784214     MOV.B [W4], W4
00B14C  FB8204     ZE W4, W4
00B14E  903A8E     MOV [W14+112], W5
00B150  428204     ADD W5, W4, W4
00B152  983F04     MOV W4, [W14+112]
10519:                                            Timer2Mem=(unsigned int )Tm;
00B154  903A0E     MOV [W14+112], W4
00B156  89BA14     MOV W4, Timer2Mem
10520:                                            SetTmrConst();
00B158  074739     RCALL SetTmrConst
10521:                                            OptionsToMass();
00B15A  071349     RCALL OptionsToMass
10522:                                            MustTrmFlashMass=1;
00B15C  8095F4     MOV 0x12BE, W4
00B15E  A02004     BSET W4, #2
00B160  8895F4     MOV W4, 0x12BE
10523:                                             break;
00B162  370F70     BRA 0xD044
10524:                                         }
10525:             
10526:                                       case 118:
10527:                                         {
10528:                                            int Tm;
10529:                                            Tm=(int)RecBytes[3];
00B164  229294     MOV #0x2929, W4
00B166  784214     MOV.B [W4], W4
00B168  FB8204     ZE W4, W4
00B16A  983F14     MOV W4, [W14+114]
10530:                                            Tm=Tm<<8;
00B16C  903A1E     MOV [W14+114], W4
00B16E  DD2248     SL W4, #8, W4
00B170  983F14     MOV W4, [W14+114]
10531:                                            Tm=Tm+RecBytes[2];
00B172  229284     MOV #0x2928, W4
00B174  784214     MOV.B [W4], W4
00B176  FB8204     ZE W4, W4
00B178  903A9E     MOV [W14+114], W5
00B17A  428204     ADD W5, W4, W4
00B17C  983F14     MOV W4, [W14+114]
10532:                                            UseTmr=(unsigned int )Tm;
00B17E  903A1E     MOV [W14+114], W4
00B180  784204     MOV.B W4, W4
00B182  2373E5     MOV #0x373E, W5
00B184  784A84     MOV.B W4, [W5]
10533:                                            TimerCnt=0;
00B186  B82260     MUL.UU W4, #0, W4
00B188  89BA64     MOV W4, TimerCnt
00B18A  89BA75     MOV W5, 0x374E
10534:                                            SetTmrConst();
00B18C  07471F     RCALL SetTmrConst
10535:                                            OptionsToMass();
00B18E  07132F     RCALL OptionsToMass
10536:                                            MustTrmFlashMass=1;
00B190  8095F4     MOV 0x12BE, W4
00B192  A02004     BSET W4, #2
00B194  8895F4     MOV W4, 0x12BE
10537:                                             break;
00B196  370F56     BRA 0xD044
10538:                                         }
10539:                                       case 119:
10540:                                         {
10541:                                             TestVibro=1;
00B198  809654     MOV 0x12CA, W4
00B19A  A05004     BSET W4, #5
00B19C  889654     MOV W4, 0x12CA
10542:                                            OptionsToMass();
00B19E  071327     RCALL OptionsToMass
10543:                                            MustTrmFlashMass=1;
00B1A0  8095F4     MOV 0x12BE, W4
00B1A2  A02004     BSET W4, #2
00B1A4  8895F4     MOV W4, 0x12BE
10544:                                            break;
00B1A6  370F4E     BRA 0xD044
10545:                                         }
10546:                                       case 120:
10547:                                         {
10548:                                             TestVibro=0;
00B1A8  809654     MOV 0x12CA, W4
00B1AA  A15004     BCLR W4, #5
00B1AC  889654     MOV W4, 0x12CA
10549:                                            OptionsToMass();
00B1AE  07131F     RCALL OptionsToMass
10550:                                            MustTrmFlashMass=1;
00B1B0  8095F4     MOV 0x12BE, W4
00B1B2  A02004     BSET W4, #2
00B1B4  8895F4     MOV W4, 0x12BE
10551:                                            break;
00B1B6  370F46     BRA 0xD044
10552:                                         }
10553:             
10554:                                       case 121:
10555:                                         {
10556:                                            int Tm;
10557:                                            Tm=(int)RecBytes[3];
00B1B8  229294     MOV #0x2929, W4
00B1BA  784214     MOV.B [W4], W4
00B1BC  FB8204     ZE W4, W4
00B1BE  983F24     MOV W4, [W14+116]
10558:                                            Tm=Tm<<8;
00B1C0  903A2E     MOV [W14+116], W4
00B1C2  DD2248     SL W4, #8, W4
00B1C4  983F24     MOV W4, [W14+116]
10559:                                            Tm=Tm+RecBytes[2];
00B1C6  229284     MOV #0x2928, W4
00B1C8  784214     MOV.B [W4], W4
00B1CA  FB8204     ZE W4, W4
00B1CC  903AAE     MOV [W14+116], W5
00B1CE  428204     ADD W5, W4, W4
00B1D0  983F24     MOV W4, [W14+116]
10560:                                            SerNumber=(unsigned int )Tm;
00B1D2  903A2E     MOV [W14+116], W4
00B1D4  89BAA4     MOV W4, SerNumber
10561:                                            OptionsToMass();
00B1D6  07130B     RCALL OptionsToMass
10562:                                            MustTrmFlashMass=1;
00B1D8  8095F4     MOV 0x12BE, W4
00B1DA  A02004     BSET W4, #2
00B1DC  8895F4     MOV W4, 0x12BE
10563:                                             break;
00B1DE  370F32     BRA 0xD044
10564:                                         }
10565:             
10566:             
10567:                                         case 122:
10568:                                         {
10569:                                            But5Func=RecBytes[2];
00B1E0  229284     MOV #0x2928, W4
00B1E2  784214     MOV.B [W4], W4
00B1E4  240205     MOV #0x4020, W5
00B1E6  784A84     MOV.B W4, [W5]
10570:                                            OptionsToMass();
00B1E8  071302     RCALL OptionsToMass
10571:                                            MustTrmFlashMass=1;
00B1EA  8095F4     MOV 0x12BE, W4
00B1EC  A02004     BSET W4, #2
00B1EE  8895F4     MOV W4, 0x12BE
10572:                                            break;
00B1F0  370F29     BRA 0xD044
10573:                                         }
10574:             
10575:                                         case 123:
10576:                                         {
10577:                                            break;
10578:                                         }
10579:             
10580:                                       case 124:
10581:                                         {
10582:                                            int Tm;
10583:                                            Tm=(int)RecBytes[3];
00B1F2  229294     MOV #0x2929, W4
00B1F4  784214     MOV.B [W4], W4
00B1F6  FB8204     ZE W4, W4
00B1F8  983F34     MOV W4, [W14+118]
10584:                                            Tm=Tm<<8;
00B1FA  903A3E     MOV [W14+118], W4
00B1FC  DD2248     SL W4, #8, W4
00B1FE  983F34     MOV W4, [W14+118]
10585:                                            Tm=Tm+RecBytes[2];
00B200  229284     MOV #0x2928, W4
00B202  784214     MOV.B [W4], W4
00B204  FB8204     ZE W4, W4
00B206  903ABE     MOV [W14+118], W5
00B208  428204     ADD W5, W4, W4
00B20A  983F34     MOV W4, [W14+118]
10586:                                            StartRotOneTwoLeg_1=(int )Tm;
00B20C  903ABE     MOV [W14+118], W5
00B20E  89B785     MOV W5, StartRotOneTwoLeg_1
10587:                                            OptionsToMass();
00B210  0712EE     RCALL OptionsToMass
10588:                                            MustTrmFlashMass=1;
00B212  8095F4     MOV 0x12BE, W4
00B214  A02004     BSET W4, #2
00B216  8895F4     MOV W4, 0x12BE
10589:                                             break;
00B218  370F15     BRA 0xD044
10590:                                         }
10591:                                         case 125:
10592:                                         {
10593:                                            int Tm;
10594:                                            Tm=(int)RecBytes[3];
00B21A  229294     MOV #0x2929, W4
00B21C  784214     MOV.B [W4], W4
00B21E  FB8204     ZE W4, W4
00B220  983F44     MOV W4, [W14+120]
10595:                                            Tm=Tm<<8;
00B222  903A4E     MOV [W14+120], W4
00B224  DD2248     SL W4, #8, W4
00B226  983F44     MOV W4, [W14+120]
10596:                                            Tm=Tm+RecBytes[2];
00B228  229284     MOV #0x2928, W4
00B22A  784214     MOV.B [W4], W4
00B22C  FB8204     ZE W4, W4
00B22E  903ACE     MOV [W14+120], W5
00B230  428204     ADD W5, W4, W4
00B232  983F44     MOV W4, [W14+120]
10597:                                            SensorlessCntAlignConst=(int )Tm;
00B234  903A4E     MOV [W14+120], W4
00B236  897E94     MOV W4, SensorlessCntAlignConst
10598:                                            OptionsToMass();
00B238  0712DA     RCALL OptionsToMass
10599:                                            MustTrmFlashMass=1;
00B23A  8095F4     MOV 0x12BE, W4
00B23C  A02004     BSET W4, #2
00B23E  8895F4     MOV W4, 0x12BE
10600:                                             
10601:                                             break;
00B240  370F01     BRA 0xD044
10602:                                         }
10603:             
10604:                                       case 126:
10605:                                         {
10606:                                             break;
10607:                                         }
10608:             
10609:                                       case 127:
10610:                                         {
10611:                                            int Tm;
10612:                                            Tm=(int)RecBytes[3];
00B242  229294     MOV #0x2929, W4
00B244  784214     MOV.B [W4], W4
00B246  FB8204     ZE W4, W4
00B248  983F54     MOV W4, [W14+122]
10613:                                            Tm=Tm<<8;
00B24A  903A5E     MOV [W14+122], W4
00B24C  DD2248     SL W4, #8, W4
00B24E  983F54     MOV W4, [W14+122]
10614:                                            Tm=Tm+RecBytes[2];
00B250  229284     MOV #0x2928, W4
00B252  784214     MOV.B [W4], W4
00B254  FB8204     ZE W4, W4
00B256  903ADE     MOV [W14+122], W5
00B258  428204     ADD W5, W4, W4
00B25A  983F54     MOV W4, [W14+122]
10615:                                            KTemperatureSPDControl=(float )Tm;
00B25C  903A5E     MOV [W14+122], W4
00B25E  DEA2CF     ASR W4, #15, W5
00B260  BE0004     MOV.D W4, W0
00B262  02257C     CALL ___floatsisf
00B264  000000     NOP
00B266  BE0200     MOV.D W0, W4
00B268  89B794     MOV W4, KTemperatureSPDControl
00B26A  89B7A5     MOV W5, 0x36F4
10616:                                            KTemperatureSPDControl=KTemperatureSPDControl/1000;
00B26C  81B794     MOV KTemperatureSPDControl, W4
00B26E  81B7A5     MOV 0x36F4, W5
00B270  200002     MOV #0x0, W2
00B272  2447A3     MOV #0x447A, W3
00B274  BE0004     MOV.D W4, W0
00B276  02245A     CALL ___divsf3
00B278  000000     NOP
00B27A  BE0200     MOV.D W0, W4
00B27C  89B794     MOV W4, KTemperatureSPDControl
00B27E  89B7A5     MOV W5, 0x36F4
10617:                                            OptionsToMass();
00B280  0712B6     RCALL OptionsToMass
10618:                                            MustTrmFlashMass=1;
00B282  8095F4     MOV 0x12BE, W4
00B284  A02004     BSET W4, #2
00B286  8895F4     MOV W4, 0x12BE
10619:                                             break;
00B288  370EDD     BRA 0xD044
10620:                                         }
10621:             
10622:                                       case 128:
10623:                                         {
10624:                                             int Tm;
10625:                                            Tm=(int)RecBytes[3];
00B28A  229294     MOV #0x2929, W4
00B28C  784214     MOV.B [W4], W4
00B28E  FB8204     ZE W4, W4
00B290  983F64     MOV W4, [W14+124]
10626:                                            Tm=Tm<<8;
00B292  903A6E     MOV [W14+124], W4
00B294  DD2248     SL W4, #8, W4
00B296  983F64     MOV W4, [W14+124]
10627:                                            Tm=Tm+RecBytes[2];
00B298  229284     MOV #0x2928, W4
00B29A  784214     MOV.B [W4], W4
00B29C  FB8204     ZE W4, W4
00B29E  903AEE     MOV [W14+124], W5
00B2A0  428204     ADD W5, W4, W4
00B2A2  983F64     MOV W4, [W14+124]
10628:                                            TemperatureMaxIN_H=Tm;
00B2A4  903A6E     MOV [W14+124], W4
00B2A6  DEA2CF     ASR W4, #15, W5
00B2A8  BE0004     MOV.D W4, W0
00B2AA  02257C     CALL ___floatsisf
00B2AC  000000     NOP
00B2AE  BE0200     MOV.D W0, W4
00B2B0  8A0294     MOV W4, TemperatureMaxIN_H
00B2B2  8A02A5     MOV W5, 0x4054
10629:                                            TemperatureMaxIN_H=TemperatureMaxIN_H/10;
00B2B4  820294     MOV TemperatureMaxIN_H, W4
00B2B6  8202A5     MOV 0x4054, W5
00B2B8  200002     MOV #0x0, W2
00B2BA  241203     MOV #0x4120, W3
00B2BC  BE0004     MOV.D W4, W0
00B2BE  02245A     CALL ___divsf3
00B2C0  000000     NOP
00B2C2  BE0200     MOV.D W0, W4
00B2C4  8A0294     MOV W4, TemperatureMaxIN_H
00B2C6  8A02A5     MOV W5, 0x4054
10630:                                            OptionsToMass();
00B2C8  071292     RCALL OptionsToMass
10631:                                            MustTrmFlashMass=1;
00B2CA  8095F4     MOV 0x12BE, W4
00B2CC  A02004     BSET W4, #2
00B2CE  8895F4     MOV W4, 0x12BE
10632:                                            break;
00B2D0  370EB9     BRA 0xD044
10633:                                         }
10634:             
10635:                                       case 129:
10636:                                         {
10637:                                            int Tm;
10638:                                            Tm=(int)RecBytes[3];
00B2D2  229294     MOV #0x2929, W4
00B2D4  784214     MOV.B [W4], W4
00B2D6  FB8204     ZE W4, W4
00B2D8  983F74     MOV W4, [W14+126]
10639:                                            Tm=Tm<<8;
00B2DA  903A7E     MOV [W14+126], W4
00B2DC  DD2248     SL W4, #8, W4
00B2DE  983F74     MOV W4, [W14+126]
10640:                                            Tm=Tm+RecBytes[2];
00B2E0  229284     MOV #0x2928, W4
00B2E2  784214     MOV.B [W4], W4
00B2E4  FB8204     ZE W4, W4
00B2E6  903AFE     MOV [W14+126], W5
00B2E8  428204     ADD W5, W4, W4
00B2EA  983F74     MOV W4, [W14+126]
10641:                                            SensorlessSpdChngCntConst=Tm;
00B2EC  903A7E     MOV [W14+126], W4
00B2EE  888764     MOV W4, SensorlessSpdChngCntConst
10642:                                            OptionsToMass();
00B2F0  07127E     RCALL OptionsToMass
10643:                                            MustTrmFlashMass=1;
00B2F2  8095F4     MOV 0x12BE, W4
00B2F4  A02004     BSET W4, #2
00B2F6  8895F4     MOV W4, 0x12BE
10644:                                             
10645:                                         break;
00B2F8  370EA5     BRA 0xD044
10646:                                         }
10647:                                       case 130:
10648:                                         {
10649:                                            int Tm;
10650:                                            Tm=(int)RecBytes[3];
00B2FA  229294     MOV #0x2929, W4
00B2FC  784214     MOV.B [W4], W4
00B2FE  FB8204     ZE W4, W4
00B300  988704     MOV W4, [W14+128]
10651:                                            Tm=Tm<<8;
00B302  90820E     MOV [W14+128], W4
00B304  DD2248     SL W4, #8, W4
00B306  988704     MOV W4, [W14+128]
10652:                                            Tm=Tm+RecBytes[2];
00B308  229284     MOV #0x2928, W4
00B30A  784214     MOV.B [W4], W4
00B30C  FB8204     ZE W4, W4
00B30E  90828E     MOV [W14+128], W5
00B310  428204     ADD W5, W4, W4
00B312  988704     MOV W4, [W14+128]
10653:                                            SensorLessTimerConst2=Tm;
00B314  90820E     MOV [W14+128], W4
00B316  8A0144     MOV W4, SensorLessTimerConst2
10654:                                            OptionsToMass();
00B318  07126A     RCALL OptionsToMass
10655:                                            MustTrmFlashMass=1;
00B31A  8095F4     MOV 0x12BE, W4
00B31C  A02004     BSET W4, #2
00B31E  8895F4     MOV W4, 0x12BE
10656:                                            break;
00B320  370E91     BRA 0xD044
10657:                                         }
10658:                                       case 131:
10659:                                         {
10660:                                            int Tm;
10661:                                            Tm=(int)RecBytes[3];
00B322  229294     MOV #0x2929, W4
00B324  784214     MOV.B [W4], W4
00B326  FB8204     ZE W4, W4
00B328  988714     MOV W4, [W14+130]
10662:                                            Tm=Tm<<8;
00B32A  90821E     MOV [W14+130], W4
00B32C  DD2248     SL W4, #8, W4
00B32E  988714     MOV W4, [W14+130]
10663:                                            Tm=Tm+RecBytes[2];
00B330  229284     MOV #0x2928, W4
00B332  784214     MOV.B [W4], W4
00B334  FB8204     ZE W4, W4
00B336  90829E     MOV [W14+130], W5
00B338  428204     ADD W5, W4, W4
00B33A  988714     MOV W4, [W14+130]
10664:                                            SenosrlessPWM1_2Const=Tm;
00B33C  90821E     MOV [W14+130], W4
00B33E  889304     MOV W4, SenosrlessPWM1_2Const
10665:                                            OptionsToMass();
00B340  071256     RCALL OptionsToMass
10666:                                            MustTrmFlashMass=1;
00B342  8095F4     MOV 0x12BE, W4
00B344  A02004     BSET W4, #2
00B346  8895F4     MOV W4, 0x12BE
10667:                                            break;
00B348  370E7D     BRA 0xD044
10668:                                         }
10669:                                       case 132:
10670:                                         {
10671:                                            int Tm;
10672:                                            Tm=(int)RecBytes[3];
00B34A  229294     MOV #0x2929, W4
00B34C  784214     MOV.B [W4], W4
00B34E  FB8204     ZE W4, W4
00B350  988724     MOV W4, [W14+132]
10673:                                            Tm=Tm<<8;
00B352  90822E     MOV [W14+132], W4
00B354  DD2248     SL W4, #8, W4
00B356  988724     MOV W4, [W14+132]
10674:                                            Tm=Tm+RecBytes[2];
00B358  229284     MOV #0x2928, W4
00B35A  784214     MOV.B [W4], W4
00B35C  FB8204     ZE W4, W4
00B35E  9082AE     MOV [W14+132], W5
00B360  428204     ADD W5, W4, W4
00B362  988724     MOV W4, [W14+132]
10675:                                            SensorLessTimerConstMin=Tm;
00B364  9082AE     MOV [W14+132], W5
00B366  897EC5     MOV W5, SensorLessTimerConstMin
10676:                                            OptionsToMass();
00B368  071242     RCALL OptionsToMass
10677:                                            MustTrmFlashMass=1;
00B36A  8095F4     MOV 0x12BE, W4
00B36C  A02004     BSET W4, #2
00B36E  8895F4     MOV W4, 0x12BE
10678:                                            break;
00B370  370E69     BRA 0xD044
10679:                                         }
10680:                                       case 133:
10681:                                         {
10682:                                            SensorllessSpdThreshold=RecBytes[2];
00B372  229284     MOV #0x2928, W4
00B374  784214     MOV.B [W4], W4
00B376  2140B5     MOV #0x140B, W5
00B378  784A84     MOV.B W4, [W5]
10683:                                            OptionsToMass();
00B37A  071239     RCALL OptionsToMass
10684:                                            MustTrmFlashMass=1;
00B37C  8095F4     MOV 0x12BE, W4
00B37E  A02004     BSET W4, #2
00B380  8895F4     MOV W4, 0x12BE
10685:                                            break;
00B382  370E60     BRA 0xD044
10686:                                         }
10687:                                       case 134:
10688:                                         {
10689:                                            Tmprt1=1;
00B384  809754     MOV StatFlgs1, W4
00B386  A07004     BSET W4, #7
00B388  889754     MOV W4, StatFlgs1
10690:                                            OptionsToMass();
00B38A  071231     RCALL OptionsToMass
10691:                                            MustTrmFlashMass=1;
00B38C  8095F4     MOV 0x12BE, W4
00B38E  A02004     BSET W4, #2
00B390  8895F4     MOV W4, 0x12BE
10692:                                            break;
00B392  370E58     BRA 0xD044
10693:                                         }
10694:                                       case 135:
10695:                                         {
10696:                                            Tmprt1=0;
00B394  809754     MOV StatFlgs1, W4
00B396  A17004     BCLR W4, #7
00B398  889754     MOV W4, StatFlgs1
10697:                                            OptionsToMass();
00B39A  071229     RCALL OptionsToMass
10698:                                            MustTrmFlashMass=1;
00B39C  8095F4     MOV 0x12BE, W4
00B39E  A02004     BSET W4, #2
00B3A0  8895F4     MOV W4, 0x12BE
10699:                                            break;
00B3A2  370E50     BRA 0xD044
10700:                                         }
10701:                                       case 136:
10702:                                         {
10703:                                             Tmprt2=1;
00B3A4  809754     MOV StatFlgs1, W4
00B3A6  A09004     BSET W4, #9
00B3A8  889754     MOV W4, StatFlgs1
10704:                                            break;
00B3AA  370E4C     BRA 0xD044
10705:                                         }
10706:                                       case 137:
10707:                                         {
10708:                                             Tmprt2=0;
00B3AC  809754     MOV StatFlgs1, W4
00B3AE  A19004     BCLR W4, #9
00B3B0  889754     MOV W4, StatFlgs1
10709:                                            break;
00B3B2  370E48     BRA 0xD044
10710:                                         }
10711:                                       case 138:
10712:                                         {
10713:                                             Tmprt3=1;
00B3B4  809764     MOV StatFlgs2, W4
00B3B6  A00004     BSET W4, #0
00B3B8  889764     MOV W4, StatFlgs2
10714:                                            break;
00B3BA  370E44     BRA 0xD044
10715:                                         }
10716:                                       case 139:
10717:                                         {
10718:                                             Tmprt3=0;
00B3BC  809764     MOV StatFlgs2, W4
00B3BE  A10004     BCLR W4, #0
00B3C0  889764     MOV W4, StatFlgs2
10719:                                            break;
00B3C2  370E40     BRA 0xD044
10720:                                         }
10721:                                       case 140:
10722:                                         {
10723:                                             Tmprt4=1;
00B3C4  809764     MOV StatFlgs2, W4
00B3C6  A01004     BSET W4, #1
00B3C8  889764     MOV W4, StatFlgs2
10724:                                            break;
00B3CA  370E3C     BRA 0xD044
10725:                                         }
10726:                                       case 141:
10727:                                         {
10728:                                             Tmprt4=0;
00B3CC  809764     MOV StatFlgs2, W4
00B3CE  A11004     BCLR W4, #1
00B3D0  889764     MOV W4, StatFlgs2
10729:                                            break;
00B3D2  370E38     BRA 0xD044
10730:                                         }
10731:             
10732:             
10733:                                       case 142:
10734:                                         {
10735:                                             int Tm;
10736:                                            Tm=(int)RecBytes[3];
00B3D4  229294     MOV #0x2929, W4
00B3D6  784214     MOV.B [W4], W4
00B3D8  FB8204     ZE W4, W4
00B3DA  988734     MOV W4, [W14+134]
10737:                                            Tm=Tm<<8;
00B3DC  90823E     MOV [W14+134], W4
00B3DE  DD2248     SL W4, #8, W4
00B3E0  988734     MOV W4, [W14+134]
10738:                                            Tm=Tm+RecBytes[2];
00B3E2  229284     MOV #0x2928, W4
00B3E4  784214     MOV.B [W4], W4
00B3E6  FB8204     ZE W4, W4
00B3E8  9082BE     MOV [W14+134], W5
00B3EA  428204     ADD W5, W4, W4
00B3EC  988734     MOV W4, [W14+134]
10739:                                            TemperatureMaxOUT=Tm;
00B3EE  90823E     MOV [W14+134], W4
00B3F0  DEA2CF     ASR W4, #15, W5
00B3F2  BE0004     MOV.D W4, W0
00B3F4  02257C     CALL ___floatsisf
00B3F6  000000     NOP
00B3F8  BE0200     MOV.D W0, W4
00B3FA  8A0234     MOV W4, TemperatureMaxOUT
00B3FC  8A0245     MOV W5, 0x4048
10740:                                            TemperatureMaxOUT=TemperatureMaxOUT/10;
00B3FE  820234     MOV TemperatureMaxOUT, W4
00B400  820245     MOV 0x4048, W5
00B402  200002     MOV #0x0, W2
00B404  241203     MOV #0x4120, W3
00B406  BE0004     MOV.D W4, W0
00B408  02245A     CALL ___divsf3
00B40A  000000     NOP
00B40C  BE0200     MOV.D W0, W4
00B40E  8A0234     MOV W4, TemperatureMaxOUT
00B410  8A0245     MOV W5, 0x4048
10741:                                            OptionsToMass();
00B412  0711ED     RCALL OptionsToMass
10742:                                            MustTrmFlashMass=1;
00B414  8095F4     MOV 0x12BE, W4
00B416  A02004     BSET W4, #2
00B418  8895F4     MOV W4, 0x12BE
10743:                                            break;
00B41A  370E14     BRA 0xD044
10744:                                         }
10745:                                       
10746:                                       case 143:
10747:                                         {
10748:                                             int Tm;
10749:                                            Tm=(int)RecBytes[3];
00B41C  229294     MOV #0x2929, W4
00B41E  784214     MOV.B [W4], W4
00B420  FB8204     ZE W4, W4
00B422  988744     MOV W4, [W14+136]
10750:                                            Tm=Tm<<8;
00B424  90824E     MOV [W14+136], W4
00B426  DD2248     SL W4, #8, W4
00B428  988744     MOV W4, [W14+136]
10751:                                            Tm=Tm+RecBytes[2];
00B42A  229284     MOV #0x2928, W4
00B42C  784214     MOV.B [W4], W4
00B42E  FB8204     ZE W4, W4
00B430  9082CE     MOV [W14+136], W5
00B432  428204     ADD W5, W4, W4
00B434  988744     MOV W4, [W14+136]
10752:                                            TemperatureMaxIN=Tm;
00B436  90824E     MOV [W14+136], W4
00B438  DEA2CF     ASR W4, #15, W5
00B43A  BE0004     MOV.D W4, W0
00B43C  02257C     CALL ___floatsisf
00B43E  000000     NOP
00B440  BE0200     MOV.D W0, W4
00B442  8A0274     MOV W4, TemperatureMaxIN
00B444  8A0285     MOV W5, 0x4050
10753:                                            TemperatureMaxIN=TemperatureMaxIN/10;
00B446  820274     MOV TemperatureMaxIN, W4
00B448  820285     MOV 0x4050, W5
00B44A  200002     MOV #0x0, W2
00B44C  241203     MOV #0x4120, W3
00B44E  BE0004     MOV.D W4, W0
00B450  02245A     CALL ___divsf3
00B452  000000     NOP
00B454  BE0200     MOV.D W0, W4
00B456  8A0274     MOV W4, TemperatureMaxIN
00B458  8A0285     MOV W5, 0x4050
10754:                                            OptionsToMass();
00B45A  0711C9     RCALL OptionsToMass
10755:                                            MustTrmFlashMass=1;
00B45C  8095F4     MOV 0x12BE, W4
00B45E  A02004     BSET W4, #2
00B460  8895F4     MOV W4, 0x12BE
10756:                                            break;
00B462  370DF0     BRA 0xD044
10757:                                         }
10758:                                       
10759:                                       
10760:                                       case 144:
10761:                                         {
10762:                                            TemperatureTYPE=RecBytes[2];
00B464  229284     MOV #0x2928, W4
00B466  784214     MOV.B [W4], W4
00B468  210FF5     MOV #0x10FF, W5
00B46A  784A84     MOV.B W4, [W5]
10763:                                            OptionsToMass();
00B46C  0711C0     RCALL OptionsToMass
10764:                                            MustTrmFlashMass=1;
00B46E  8095F4     MOV 0x12BE, W4
00B470  A02004     BSET W4, #2
00B472  8895F4     MOV W4, 0x12BE
10765:                                            break;
00B474  370DE7     BRA 0xD044
10766:                                         }
10767:                                       
10768:                                       case 145:
10769:                                         {
10770:                                             int Tm;
10771:                                            Tm=(int)RecBytes[3];
00B476  229294     MOV #0x2929, W4
00B478  784214     MOV.B [W4], W4
00B47A  FB8204     ZE W4, W4
00B47C  988754     MOV W4, [W14+138]
10772:                                            Tm=Tm<<8;
00B47E  90825E     MOV [W14+138], W4
00B480  DD2248     SL W4, #8, W4
00B482  988754     MOV W4, [W14+138]
10773:                                            Tm=Tm+RecBytes[2];
00B484  229284     MOV #0x2928, W4
00B486  784214     MOV.B [W4], W4
00B488  FB8204     ZE W4, W4
00B48A  9082DE     MOV [W14+138], W5
00B48C  428204     ADD W5, W4, W4
00B48E  988754     MOV W4, [W14+138]
10774:                                            KpTemperIN=Tm;
00B490  90825E     MOV [W14+138], W4
00B492  DEA2CF     ASR W4, #15, W5
00B494  BE0004     MOV.D W4, W0
00B496  02257C     CALL ___floatsisf
00B498  000000     NOP
00B49A  BE0200     MOV.D W0, W4
00B49C  8A0334     MOV W4, KpTemperIN
00B49E  8A0345     MOV W5, 0x4068
10775:                                            OptionsToMass();
00B4A0  0711A6     RCALL OptionsToMass
10776:                                            MustTrmFlashMass=1;
00B4A2  8095F4     MOV 0x12BE, W4
00B4A4  A02004     BSET W4, #2
00B4A6  8895F4     MOV W4, 0x12BE
10777:                                            break;
00B4A8  370DCD     BRA 0xD044
10778:                                         }
10779:                                       
10780:                                       case 146:
10781:                                         {
10782:                                             if ((RecBytes[2]>0)&&(RecBytes[2]<4))
00B4AA  229284     MOV #0x2928, W4
00B4AC  784214     MOV.B [W4], W4
00B4AE  524FE0     SUB.B W4, #0x0, [W15]
00B4B0  320DBE     BRA Z, 0xD02E
00B4B2  229284     MOV #0x2928, W4
00B4B4  784214     MOV.B [W4], W4
00B4B6  524FE3     SUB.B W4, #0x3, [W15]
00B4B8  3E0DBC     BRA GTU, 0xD032
10783:                                             {
10784:                                            Profile=RecBytes[2];
00B4BA  229284     MOV #0x2928, W4
00B4BC  784214     MOV.B [W4], W4
00B4BE  237E25     MOV #0x37E2, W5
00B4C0  784A84     MOV.B W4, [W5]
10785:                                            MassToOptionsProfile();
00B4C2  077243     RCALL MassToOptionsProfile
10786:                                            OptionsToMass();
00B4C4  071194     RCALL OptionsToMass
10787:                                            MustTrmFlashMass=1;
00B4C6  8095F4     MOV 0x12BE, W4
00B4C8  A02004     BSET W4, #2
00B4CA  8895F4     MOV W4, 0x12BE
10788:                                            
10789:                                         switch (Profile)
00B4CC  237E24     MOV #0x37E2, W4
00B4CE  784214     MOV.B [W4], W4
00B4D0  FB8204     ZE W4, W4
00B4D2  520FE2     SUB W4, #0x2, [W15]
00B4D4  320008     BRA Z, 0xB4E6
00B4D6  520FE3     SUB W4, #0x3, [W15]
00B4D8  32000A     BRA Z, 0xB4EE
00B4DA  520FE1     SUB W4, #0x1, [W15]
00B4DC  3A0DAC     BRA NZ, 0xD036
10790:                                         {
10791:                                             case 1:
10792:                                             SoundNum=15;
00B4DE  2124B5     MOV #0x124B, W5
00B4E0  B3C0F4     MOV.B #0xF, W4
00B4E2  784A84     MOV.B W4, [W5]
10793:                                             break;
00B4E4  370008     BRA 0xB4F6
10794:                                             case 2:
10795:                                             SoundNum=16;
00B4E6  2124B5     MOV #0x124B, W5
00B4E8  B3C104     MOV.B #0x10, W4
00B4EA  784A84     MOV.B W4, [W5]
10796:                                             break;
00B4EC  370004     BRA 0xB4F6
10797:                                             case 3:
10798:                                             SoundNum=17;
00B4EE  2124B5     MOV #0x124B, W5
00B4F0  B3C114     MOV.B #0x11, W4
00B4F2  784A84     MOV.B W4, [W5]
10799:                                             break;
00B4F4  000000     NOP
10800:                                     }
10801:                                             }
10802:                                            
10803:                                            break;
00B4F6  370DA6     BRA 0xD044
00D02E  000000     NOP
00D030  370009     BRA 0xD044
00D032  000000     NOP
00D034  370007     BRA 0xD044
00D036  000000     NOP
00D038  370005     BRA 0xD044
10804:                                         }
10805:                                       
10806:                                       
10807:                                       
10808:                                       
10809:                                       
10810:             ////////////////  BMS KEYS HERE MUST BE
10811:             
10812:             
10813:                                       case 161:
10814:                                         {
10815:                                             unsigned int Tm;
10816:                                             for (Tm=0;Tm<sizeof(ProfileMass);Tm++)
00B4F8  EB0200     CLR W4
00B4FA  980764     MOV W4, [W14+12]
00B4FC  37000C     BRA 0xB516
00B510  90026E     MOV [W14+12], W4
00B512  E80204     INC W4, W4
00B514  980764     MOV W4, [W14+12]
00B516  9002EE     MOV [W14+12], W5
00B518  200EF4     MOV #0xEF, W4
00B51A  528F84     SUB W5, W4, [W15]
00B51C  36FFF0     BRA LEU, 0xB4FE
10817:                                                 ProfileMass[Tm]=RecBytes[Tm+4];
00B4FE  90026E     MOV [W14+12], W4
00B500  420264     ADD W4, #0x4, W4
00B502  229265     MOV #0x2926, W5
00B504  428204     ADD W5, W4, W4
00B506  784214     MOV.B [W4], W4
00B508  22DB96     MOV #0x2DB9, W6
00B50A  9002EE     MOV [W14+12], W5
00B50C  430285     ADD W6, W5, W5
00B50E  784A84     MOV.B W4, [W5]
10818:                                             MassToOptionsProfile();
00B51E  077215     RCALL MassToOptionsProfile
10819:                                             MustTrmCmdOk2=1;
00B520  809694     MOV 0x12D2, W4
00B522  A04004     BSET W4, #4
00B524  889694     MOV W4, 0x12D2
10820:                                             MustTrmFlashMass=1;
00B526  8095F4     MOV 0x12BE, W4
00B528  A02004     BSET W4, #2
00B52A  8895F4     MOV W4, 0x12BE
10821:                                            break;
00B52C  370D8B     BRA 0xD044
10822:                                         }
10823:                                       case 162:
10824:                                         {
10825:                                             
10826:                                            unsigned int Tm;
10827:                                            Tm=(unsigned int)RecBytes[3];
00B52E  229294     MOV #0x2929, W4
00B530  784214     MOV.B [W4], W4
00B532  FB8204     ZE W4, W4
00B534  988764     MOV W4, [W14+140]
10828:                                            Tm=Tm<<8;
00B536  90826E     MOV [W14+140], W4
00B538  DD2248     SL W4, #8, W4
00B53A  988764     MOV W4, [W14+140]
10829:                                            Tm=Tm+RecBytes[2];
00B53C  229284     MOV #0x2928, W4
00B53E  784214     MOV.B [W4], W4
00B540  FB8204     ZE W4, W4
00B542  9082EE     MOV [W14+140], W5
00B544  428204     ADD W5, W4, W4
00B546  988764     MOV W4, [W14+140]
10830:                                            BreakThresholdDn=Tm;
00B548  90826E     MOV [W14+140], W4
00B54A  8894C4     MOV W4, BreakThresholdDn
10831:                                            if (BreakThresholdDn>=BreakThresholdUp)
00B54C  8094C5     MOV BreakThresholdDn, W5
00B54E  8094B4     MOV BreakThresholdUp, W4
00B550  528F84     SUB W5, W4, [W15]
00B552  35000B     BRA LT, 0xB56A
10832:                                            {
10833:                                                if (BreakThresholdUp>0)
00B554  8094B4     MOV BreakThresholdUp, W4
00B556  520FE0     SUB W4, #0x0, [W15]
00B558  340004     BRA LE, 0xB562
10834:                                                    BreakThresholdDn=BreakThresholdUp-1;
00B55A  8094B4     MOV BreakThresholdUp, W4
00B55C  E90204     DEC W4, W4
00B55E  8894C4     MOV W4, BreakThresholdDn
00B560  370004     BRA 0xB56A
10835:                                                else
10836:                                                {
10837:                                                    BreakThresholdDn=0;
00B562  EB0200     CLR W4
00B564  8894C4     MOV W4, BreakThresholdDn
10838:                                                    BreakThresholdUp=1;
00B566  200014     MOV #0x1, W4
00B568  8894B4     MOV W4, BreakThresholdUp
10839:                                                }
10840:                                                
10841:                                            }
10842:                                            OptionsToMass();
00B56A  071141     RCALL OptionsToMass
10843:                                            MustTrmFlashMass=1;
00B56C  8095F4     MOV 0x12BE, W4
00B56E  A02004     BSET W4, #2
00B570  8895F4     MOV W4, 0x12BE
10844:                                            break;
00B572  370D68     BRA 0xD044
10845:                                             
10846:                                            
10847:                                         }
10848:                                       case 163:
10849:                                         {
10850:                                            unsigned int Tm;
10851:                                            Tm=(unsigned int)RecBytes[3];
00B574  229294     MOV #0x2929, W4
00B576  784214     MOV.B [W4], W4
00B578  FB8204     ZE W4, W4
00B57A  988774     MOV W4, [W14+142]
10852:                                            Tm=Tm<<8;
00B57C  90827E     MOV [W14+142], W4
00B57E  DD2248     SL W4, #8, W4
00B580  988774     MOV W4, [W14+142]
10853:                                            Tm=Tm+RecBytes[2];
00B582  229284     MOV #0x2928, W4
00B584  784214     MOV.B [W4], W4
00B586  FB8204     ZE W4, W4
00B588  9082FE     MOV [W14+142], W5
00B58A  428204     ADD W5, W4, W4
00B58C  988774     MOV W4, [W14+142]
10854:                                            MAH=Tm;
00B58E  90827E     MOV [W14+142], W4
00B590  89BD44     MOV W4, MAH
10855:                                            OptionsToMass();
00B592  07112D     RCALL OptionsToMass
10856:                                            MustTrmFlashMass=1;
00B594  8095F4     MOV 0x12BE, W4
00B596  A02004     BSET W4, #2
00B598  8895F4     MOV W4, 0x12BE
10857:                                            break;
00B59A  370D54     BRA 0xD044
10858:                                         }
10859:             
10860:                                       case 164:
10861:                                         {
10862:                                            unsigned int Tm;
10863:                                            Tm=(unsigned int)RecBytes[3];
00B59C  229294     MOV #0x2929, W4
00B59E  784214     MOV.B [W4], W4
00B5A0  FB8204     ZE W4, W4
00B5A2  988F04     MOV W4, [W14+144]
10864:                                            Tm=Tm<<8;
00B5A4  908A0E     MOV [W14+144], W4
00B5A6  DD2248     SL W4, #8, W4
00B5A8  988F04     MOV W4, [W14+144]
10865:                                            Tm=Tm+RecBytes[2];
00B5AA  229284     MOV #0x2928, W4
00B5AC  784214     MOV.B [W4], W4
00B5AE  FB8204     ZE W4, W4
00B5B0  908A8E     MOV [W14+144], W5
00B5B2  428204     ADD W5, W4, W4
00B5B4  988F04     MOV W4, [W14+144]
10866:                                            SensorThresholdDn=Tm;
00B5B6  908A0E     MOV [W14+144], W4
00B5B8  889474     MOV W4, SensorThresholdDn
10867:                                            if (SensorThresholdDn>=SensorThresholdUp)
00B5BA  809475     MOV SensorThresholdDn, W5
00B5BC  809484     MOV SensorThresholdUp, W4
00B5BE  528F84     SUB W5, W4, [W15]
00B5C0  35000B     BRA LT, 0xB5D8
10868:                                            {
10869:                                                if (SensorThresholdUp>0)
00B5C2  809484     MOV SensorThresholdUp, W4
00B5C4  520FE0     SUB W4, #0x0, [W15]
00B5C6  340004     BRA LE, 0xB5D0
10870:                                                    SensorThresholdDn=SensorThresholdUp-1;
00B5C8  809484     MOV SensorThresholdUp, W4
00B5CA  E90204     DEC W4, W4
00B5CC  889474     MOV W4, SensorThresholdDn
00B5CE  370004     BRA 0xB5D8
10871:                                                else
10872:                                                {
10873:                                                    SensorThresholdDn=0;
00B5D0  EB0200     CLR W4
00B5D2  889474     MOV W4, SensorThresholdDn
10874:                                                    SensorThresholdUp=1;
00B5D4  200014     MOV #0x1, W4
00B5D6  889484     MOV W4, SensorThresholdUp
10875:                                                }
10876:                                                
10877:                                            }
10878:                                            OptionsToMass();
00B5D8  07110A     RCALL OptionsToMass
10879:                                            MustTrmFlashMass=1;
00B5DA  8095F4     MOV 0x12BE, W4
00B5DC  A02004     BSET W4, #2
00B5DE  8895F4     MOV W4, 0x12BE
10880:                                            break;
00B5E0  370D31     BRA 0xD044
10881:                                         }
10882:             
10883:                                       case 165:
10884:                                         {
10885:                                          ManualStart=1;
00B5E2  809744     MOV StatFlgs, W4
00B5E4  A09004     BSET W4, #9
00B5E6  889744     MOV W4, StatFlgs
10886:                                          SensorlessManualStartInit();
00B5E8  02BA00     CALL SensorlessManualStartInit
00B5EA  000001     NOP
10887:                                          OptionsToMass();
00B5EC  071100     RCALL OptionsToMass
10888:                                          MustTrmFlashMass=1;
00B5EE  8095F4     MOV 0x12BE, W4
00B5F0  A02004     BSET W4, #2
00B5F2  8895F4     MOV W4, 0x12BE
10889:                                         break;
00B5F4  370D27     BRA 0xD044
10890:                                         }
10891:             
10892:                                       case 166:
10893:                                         {
10894:                                          ManualStart=0;
00B5F6  809744     MOV StatFlgs, W4
00B5F8  A19004     BCLR W4, #9
00B5FA  889744     MOV W4, StatFlgs
10895:                                          OptionsToMass();
00B5FC  0710F8     RCALL OptionsToMass
10896:                                          MustTrmFlashMass=1;
00B5FE  8095F4     MOV 0x12BE, W4
00B600  A02004     BSET W4, #2
00B602  8895F4     MOV W4, 0x12BE
10897:                                            break;
00B604  370D1F     BRA 0xD044
10898:                                         }
10899:             
10900:                                       case 167:
10901:                                         {
10902:                                            unsigned int Tm;
10903:                                            Tm=(unsigned int)RecBytes[3];
00B606  229294     MOV #0x2929, W4
00B608  784214     MOV.B [W4], W4
00B60A  FB8204     ZE W4, W4
00B60C  988F14     MOV W4, [W14+146]
10904:                                            Tm=Tm<<8;
00B60E  908A1E     MOV [W14+146], W4
00B610  DD2248     SL W4, #8, W4
00B612  988F14     MOV W4, [W14+146]
10905:                                            Tm=Tm+RecBytes[2];
00B614  229284     MOV #0x2928, W4
00B616  784214     MOV.B [W4], W4
00B618  FB8204     ZE W4, W4
00B61A  908A9E     MOV [W14+146], W5
00B61C  428204     ADD W5, W4, W4
00B61E  988F14     MOV W4, [W14+146]
10906:                                            Cmd2BMS=Tm;
00B620  908A1E     MOV [W14+146], W4
00B622  200005     MOV #0x0, W5
00B624  89BCC4     MOV W4, Cmd2BMS
00B626  89BCD5     MOV W5, 0x379A
10907:                                            Cmd2BMS=Cmd2BMS<<5;
00B628  81BCC6     MOV Cmd2BMS, W6
00B62A  81BCD7     MOV 0x379A, W7
00B62C  DD3A45     SL W7, #5, W4
00B62E  DE32CB     LSR W6, #11, W5
00B630  720285     IOR W4, W5, W5
00B632  DD3245     SL W6, #5, W4
00B634  89BCC4     MOV W4, Cmd2BMS
00B636  89BCD5     MOV W5, 0x379A
10908:                                            Cmd2BMS=Cmd2BMS|((unsigned char)0x9);
00B638  81BCC4     MOV Cmd2BMS, W4
00B63A  81BCD5     MOV 0x379A, W5
00B63C  720269     IOR W4, #0x9, W4
00B63E  89BCC4     MOV W4, Cmd2BMS
00B640  89BCD5     MOV W5, 0x379A
10909:                                            Cmd2BMS=Cmd2BMS<<3;
00B642  81BCC6     MOV Cmd2BMS, W6
00B644  81BCD7     MOV 0x379A, W7
00B646  DD3A43     SL W7, #3, W4
00B648  DE32CD     LSR W6, #13, W5
00B64A  720285     IOR W4, W5, W5
00B64C  DD3243     SL W6, #3, W4
00B64E  89BCC4     MOV W4, Cmd2BMS
00B650  89BCD5     MOV W5, 0x379A
10910:                                            break;
00B652  370CF8     BRA 0xD044
10911:                                         }
10912:             
10913:                                       case 168:
10914:                                         {
10915:                                             Cmd2BMS=((unsigned char)0xa)<<3;
00B654  200504     MOV #0x50, W4
00B656  200005     MOV #0x0, W5
00B658  89BCC4     MOV W4, Cmd2BMS
00B65A  89BCD5     MOV W5, 0x379A
10916:                                            break;
00B65C  370CF3     BRA 0xD044
10917:                                         }
10918:             
10919:                                       case 169:
10920:                                         {
10921:                                            unsigned int Tm;
10922:                                            Tm=(unsigned int)RecBytes[3];
00B65E  229294     MOV #0x2929, W4
00B660  784214     MOV.B [W4], W4
00B662  FB8204     ZE W4, W4
00B664  988F24     MOV W4, [W14+148]
10923:                                            Tm=Tm<<8;
00B666  908A2E     MOV [W14+148], W4
00B668  DD2248     SL W4, #8, W4
00B66A  988F24     MOV W4, [W14+148]
10924:                                            Tm=Tm+RecBytes[2];
00B66C  229284     MOV #0x2928, W4
00B66E  784214     MOV.B [W4], W4
00B670  FB8204     ZE W4, W4
00B672  908AAE     MOV [W14+148], W5
00B674  428204     ADD W5, W4, W4
00B676  988F24     MOV W4, [W14+148]
10925:                                            Cmd3BMS=Tm;
00B678  908A2E     MOV [W14+148], W4
00B67A  200005     MOV #0x0, W5
00B67C  89BCE4     MOV W4, Cmd3BMS
00B67E  89BCF5     MOV W5, 0x379E
10926:                                            Cmd3BMS=Cmd3BMS<<5;
00B680  81BCE6     MOV Cmd3BMS, W6
00B682  81BCF7     MOV 0x379E, W7
00B684  DD3A45     SL W7, #5, W4
00B686  DE32CB     LSR W6, #11, W5
00B688  720285     IOR W4, W5, W5
00B68A  DD3245     SL W6, #5, W4
00B68C  89BCE4     MOV W4, Cmd3BMS
00B68E  89BCF5     MOV W5, 0x379E
10927:                                            Cmd3BMS=Cmd3BMS|((unsigned char)0x9);
00B690  81BCE4     MOV Cmd3BMS, W4
00B692  81BCF5     MOV 0x379E, W5
00B694  720269     IOR W4, #0x9, W4
00B696  89BCE4     MOV W4, Cmd3BMS
00B698  89BCF5     MOV W5, 0x379E
10928:                                            Cmd3BMS=Cmd3BMS<<3;
00B69A  81BCE6     MOV Cmd3BMS, W6
00B69C  81BCF7     MOV 0x379E, W7
00B69E  DD3A43     SL W7, #3, W4
00B6A0  DE32CD     LSR W6, #13, W5
00B6A2  720285     IOR W4, W5, W5
00B6A4  DD3243     SL W6, #3, W4
00B6A6  89BCE4     MOV W4, Cmd3BMS
00B6A8  89BCF5     MOV W5, 0x379E
10929:                                            break;
00B6AA  370CCC     BRA 0xD044
10930:                                         }
10931:             
10932:                                       case 170:
10933:                                         {
10934:                                             Cmd3BMS=((unsigned char)0xa)<<3;
00B6AC  200504     MOV #0x50, W4
00B6AE  200005     MOV #0x0, W5
00B6B0  89BCE4     MOV W4, Cmd3BMS
00B6B2  89BCF5     MOV W5, 0x379E
10935:                                            break;
00B6B4  370CC7     BRA 0xD044
10936:                                         }
10937:                                       case 171:
10938:                                         {
10939:                                            unsigned int Tm;
10940:                                            Tm=(unsigned int)RecBytes[3];
00B6B6  229294     MOV #0x2929, W4
00B6B8  784214     MOV.B [W4], W4
00B6BA  FB8204     ZE W4, W4
00B6BC  988F34     MOV W4, [W14+150]
10941:                                            Tm=Tm<<8;
00B6BE  908A3E     MOV [W14+150], W4
00B6C0  DD2248     SL W4, #8, W4
00B6C2  988F34     MOV W4, [W14+150]
10942:                                            Tm=Tm+RecBytes[2];
00B6C4  229284     MOV #0x2928, W4
00B6C6  784214     MOV.B [W4], W4
00B6C8  FB8204     ZE W4, W4
00B6CA  908ABE     MOV [W14+150], W5
00B6CC  428204     ADD W5, W4, W4
00B6CE  988F34     MOV W4, [W14+150]
10943:                                            Cmd4BMS=Tm;
00B6D0  908A3E     MOV [W14+150], W4
00B6D2  200005     MOV #0x0, W5
00B6D4  89BD04     MOV W4, Cmd4BMS
00B6D6  89BD15     MOV W5, 0x37A2
10944:                                            Cmd4BMS=Cmd4BMS<<5;
00B6D8  81BD06     MOV Cmd4BMS, W6
00B6DA  81BD17     MOV 0x37A2, W7
00B6DC  DD3A45     SL W7, #5, W4
00B6DE  DE32CB     LSR W6, #11, W5
00B6E0  720285     IOR W4, W5, W5
00B6E2  DD3245     SL W6, #5, W4
00B6E4  89BD04     MOV W4, Cmd4BMS
00B6E6  89BD15     MOV W5, 0x37A2
10945:                                            Cmd4BMS=Cmd4BMS|((unsigned char)0x9);
00B6E8  81BD04     MOV Cmd4BMS, W4
00B6EA  81BD15     MOV 0x37A2, W5
00B6EC  720269     IOR W4, #0x9, W4
00B6EE  89BD04     MOV W4, Cmd4BMS
00B6F0  89BD15     MOV W5, 0x37A2
10946:                                            Cmd4BMS=Cmd4BMS<<3;
00B6F2  81BD06     MOV Cmd4BMS, W6
00B6F4  81BD17     MOV 0x37A2, W7
00B6F6  DD3A43     SL W7, #3, W4
00B6F8  DE32CD     LSR W6, #13, W5
00B6FA  720285     IOR W4, W5, W5
00B6FC  DD3243     SL W6, #3, W4
00B6FE  89BD04     MOV W4, Cmd4BMS
00B700  89BD15     MOV W5, 0x37A2
10947:                                            break;
00B702  370CA0     BRA 0xD044
10948:                                         }
10949:             
10950:                                       case 172:
10951:                                         {
10952:                                             Cmd4BMS=((unsigned char)0xa)<<3;
00B704  200504     MOV #0x50, W4
00B706  200005     MOV #0x0, W5
00B708  89BD04     MOV W4, Cmd4BMS
00B70A  89BD15     MOV W5, 0x37A2
10953:                                            break;
00B70C  370C9B     BRA 0xD044
10954:                                         }
10955:             
10956:                                         case 173:
10957:                                         {
10958:                                            int Tm;
10959:                                            Tm=(int)RecBytes[3];
00B70E  229294     MOV #0x2929, W4
00B710  784214     MOV.B [W4], W4
00B712  FB8204     ZE W4, W4
00B714  988F44     MOV W4, [W14+152]
10960:                                            Tm=Tm<<8;
00B716  908A4E     MOV [W14+152], W4
00B718  DD2248     SL W4, #8, W4
00B71A  988F44     MOV W4, [W14+152]
10961:                                            Tm=Tm+RecBytes[2];
00B71C  229284     MOV #0x2928, W4
00B71E  784214     MOV.B [W4], W4
00B720  FB8204     ZE W4, W4
00B722  908ACE     MOV [W14+152], W5
00B724  428204     ADD W5, W4, W4
00B726  988F44     MOV W4, [W14+152]
10962:                                            TiltZadState5=(float )Tm;
00B728  908A4E     MOV [W14+152], W4
00B72A  DEA2CF     ASR W4, #15, W5
00B72C  BE0004     MOV.D W4, W0
00B72E  02257C     CALL ___floatsisf
00B730  000000     NOP
00B732  BE0200     MOV.D W0, W4
00B734  895674     MOV W4, TiltZadState5
00B736  895685     MOV W5, 0x2AD0
10963:                                            TiltZadState5=TiltZadState5/10;
00B738  815674     MOV TiltZadState5, W4
00B73A  815685     MOV 0x2AD0, W5
00B73C  200002     MOV #0x0, W2
00B73E  241203     MOV #0x4120, W3
00B740  BE0004     MOV.D W4, W0
00B742  02245A     CALL ___divsf3
00B744  000000     NOP
00B746  BE0200     MOV.D W0, W4
00B748  895674     MOV W4, TiltZadState5
00B74A  895685     MOV W5, 0x2AD0
10964:                                            OptionsToMass();
00B74C  071050     RCALL OptionsToMass
10965:                                            MustTrmFlashMass=1;
00B74E  8095F4     MOV 0x12BE, W4
00B750  A02004     BSET W4, #2
00B752  8895F4     MOV W4, 0x12BE
10966:                                             break;
00B754  370C77     BRA 0xD044
10967:                                         }
10968:             
10969:             
10970:             
10971:                                         case 174:
10972:                                         {
10973:             
10974:                                            SpdRstSpeedLim=RecBytes[2];
00B756  229284     MOV #0x2928, W4
00B758  784214     MOV.B [W4], W4
00B75A  FB8204     ZE W4, W4
00B75C  897EF4     MOV W4, SpdRstSpeedLim
10975:                                            OptionsToMass();
00B75E  071047     RCALL OptionsToMass
10976:                                            MustTrmFlashMass=1;
00B760  8095F4     MOV 0x12BE, W4
00B762  A02004     BSET W4, #2
00B764  8895F4     MOV W4, 0x12BE
10977:                                            break;
00B766  370C6E     BRA 0xD044
10978:                                         }
10979:             
10980:                                         case 175:
10981:                                         {
10982:                                             SpeedControl=0;
00B768  809754     MOV StatFlgs1, W4
00B76A  A11004     BCLR W4, #1
00B76C  889754     MOV W4, StatFlgs1
10983:                                             PID_On=0;
00B76E  809654     MOV 0x12CA, W4
00B770  A19004     BCLR W4, #9
00B772  889654     MOV W4, 0x12CA
10984:                                             ECurr1Summ=0;
00B774  B82260     MUL.UU W4, #0, W4
00B776  89F564     MOV W4, ECurr1Summ
00B778  89F575     MOV W5, 0x3EAE
10985:                                             CurrentControlOnly=0;
00B77A  809774     MOV StatFlgs3, W4
00B77C  A1A004     BCLR W4, #10
00B77E  889774     MOV W4, StatFlgs3
10986:                                             OptionsToMass();
00B780  071036     RCALL OptionsToMass
10987:                                             MustTrmFlashMass=1;
00B782  8095F4     MOV 0x12BE, W4
00B784  A02004     BSET W4, #2
00B786  8895F4     MOV W4, 0x12BE
10988:                                           break;
00B788  370C5D     BRA 0xD044
10989:                                         }
10990:             
10991:                                         case 176:
10992:                                         {
10993:                                             if (!Sensorless)
00B78A  809755     MOV StatFlgs1, W5
00B78C  200204     MOV #0x20, W4
00B78E  628204     AND W5, W4, W4
00B790  520FE0     SUB W4, #0x0, [W15]
00B792  3A0009     BRA NZ, 0xB7A6
10994:                                             {
10995:                                             SpeedControl=1;
00B794  809754     MOV StatFlgs1, W4
00B796  A01004     BSET W4, #1
00B798  889754     MOV W4, StatFlgs1
10996:                                             ECurr1Summ=0;
00B79A  B82260     MUL.UU W4, #0, W4
00B79C  89F564     MOV W4, ECurr1Summ
00B79E  89F575     MOV W5, 0x3EAE
10997:                                             CurrentControlOnly=0;
00B7A0  809774     MOV StatFlgs3, W4
00B7A2  A1A004     BCLR W4, #10
00B7A4  889774     MOV W4, StatFlgs3
10998:                                             }
10999:                                             OptionsToMass();
00B7A6  071023     RCALL OptionsToMass
11000:                                             MustTrmFlashMass=1;
00B7A8  8095F4     MOV 0x12BE, W4
00B7AA  A02004     BSET W4, #2
00B7AC  8895F4     MOV W4, 0x12BE
11001:                                            break;
00B7AE  370C4A     BRA 0xD044
11002:                                         }
11003:             
11004:             
11005:                                       case 177:
11006:                                         {
11007:                                            int Tm;
11008:                                            Tm=(int)RecBytes[3];
00B7B0  229294     MOV #0x2929, W4
00B7B2  784214     MOV.B [W4], W4
00B7B4  FB8204     ZE W4, W4
00B7B6  988F54     MOV W4, [W14+154]
11009:                                            Tm=Tm<<8;
00B7B8  908A5E     MOV [W14+154], W4
00B7BA  DD2248     SL W4, #8, W4
00B7BC  988F54     MOV W4, [W14+154]
11010:                                            Tm=Tm+RecBytes[2];
00B7BE  229284     MOV #0x2928, W4
00B7C0  784214     MOV.B [W4], W4
00B7C2  FB8204     ZE W4, W4
00B7C4  908ADE     MOV [W14+154], W5
00B7C6  428204     ADD W5, W4, W4
00B7C8  988F54     MOV W4, [W14+154]
11011:                                            XLimit=Tm;
00B7CA  908ADE     MOV [W14+154], W5
00B7CC  8982F5     MOV W5, XLimit
11012:                                            OptionsToMass();
00B7CE  07100F     RCALL OptionsToMass
11013:                                            MustTrmFlashMass=1;
00B7D0  8095F4     MOV 0x12BE, W4
00B7D2  A02004     BSET W4, #2
00B7D4  8895F4     MOV W4, 0x12BE
11014:                                             break;
00B7D6  370C36     BRA 0xD044
11015:                                         }
11016:             
11017:                                       case 178:
11018:                                         {
11019:                                            int Tm;
11020:                                            Tm=(int)RecBytes[3];
00B7D8  229294     MOV #0x2929, W4
00B7DA  784214     MOV.B [W4], W4
00B7DC  FB8204     ZE W4, W4
00B7DE  988F64     MOV W4, [W14+156]
11021:                                            Tm=Tm<<8;
00B7E0  908A6E     MOV [W14+156], W4
00B7E2  DD2248     SL W4, #8, W4
00B7E4  988F64     MOV W4, [W14+156]
11022:                                            Tm=Tm+RecBytes[2];
00B7E6  229284     MOV #0x2928, W4
00B7E8  784214     MOV.B [W4], W4
00B7EA  FB8204     ZE W4, W4
00B7EC  908AEE     MOV [W14+156], W5
00B7EE  428204     ADD W5, W4, W4
00B7F0  988F64     MOV W4, [W14+156]
11023:                                            YLimit=Tm;
00B7F2  908A6E     MOV [W14+156], W4
00B7F4  898304     MOV W4, YLimit
11024:                                            OptionsToMass();
00B7F6  070FFB     RCALL OptionsToMass
11025:                                            MustTrmFlashMass=1;
00B7F8  8095F4     MOV 0x12BE, W4
00B7FA  A02004     BSET W4, #2
00B7FC  8895F4     MOV W4, 0x12BE
11026:                                             break;
00B7FE  370C22     BRA 0xD044
11027:                                         }
11028:             
11029:                                         case 179:
11030:                                         {
11031:                                            unsigned int Tm;
11032:                                            Tm=(unsigned int)RecBytes[3];
00B800  229294     MOV #0x2929, W4
00B802  784214     MOV.B [W4], W4
00B804  FB8204     ZE W4, W4
00B806  988F74     MOV W4, [W14+158]
11033:                                            Tm=Tm<<8;
00B808  908A7E     MOV [W14+158], W4
00B80A  DD2248     SL W4, #8, W4
00B80C  988F74     MOV W4, [W14+158]
11034:                                            Tm=Tm+RecBytes[2];
00B80E  229284     MOV #0x2928, W4
00B810  784214     MOV.B [W4], W4
00B812  FB8204     ZE W4, W4
00B814  908AFE     MOV [W14+158], W5
00B816  428204     ADD W5, W4, W4
00B818  988F74     MOV W4, [W14+158]
11035:                                            BreakThresholdUp=Tm;
00B81A  908A7E     MOV [W14+158], W4
00B81C  8894B4     MOV W4, BreakThresholdUp
11036:                                            if (BreakThresholdUp<=BreakThresholdDn)
00B81E  8094B5     MOV BreakThresholdUp, W5
00B820  8094C4     MOV BreakThresholdDn, W4
00B822  528F84     SUB W5, W4, [W15]
00B824  3C000C     BRA GT, 0xB83E
11037:                                            {
11038:                                                if (BreakThresholdDn<4095)
00B826  8094C5     MOV BreakThresholdDn, W5
00B828  20FFE4     MOV #0xFFE, W4
00B82A  528F84     SUB W5, W4, [W15]
00B82C  3C0004     BRA GT, 0xB836
11039:                                                {
11040:                                                BreakThresholdUp=BreakThresholdDn+1;
00B82E  8094C4     MOV BreakThresholdDn, W4
00B830  E80204     INC W4, W4
00B832  8894B4     MOV W4, BreakThresholdUp
00B834  370004     BRA 0xB83E
11041:                                                }
11042:                                                else
11043:                                                {
11044:                                                BreakThresholdUp=4095;
00B836  20FFF4     MOV #0xFFF, W4
00B838  8894B4     MOV W4, BreakThresholdUp
11045:                                                BreakThresholdDn=4094;
00B83A  20FFE4     MOV #0xFFE, W4
00B83C  8894C4     MOV W4, BreakThresholdDn
11046:                                                }
11047:                                            }
11048:                                            OptionsToMass();
00B83E  070FD7     RCALL OptionsToMass
11049:                                            MustTrmFlashMass=1;
00B840  8095F4     MOV 0x12BE, W4
00B842  A02004     BSET W4, #2
00B844  8895F4     MOV W4, 0x12BE
11050:                                            break;
00B846  370BFE     BRA 0xD044
11051:                                         }
11052:             
11053:                                         case 180:
11054:                                         {
11055:                                             Monocycle=1;
00B848  809744     MOV StatFlgs, W4
00B84A  A0F004     BSET W4, #15
00B84C  889744     MOV W4, StatFlgs
11056:                                             MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
00B84E  20B544     MOV #0xB54, W4
00B850  8892D4     MOV W4, MAX_PWM_CONST
11057:                                             ESumm=0;
00B852  B82260     MUL.UU W4, #0, W4
00B854  889B84     MOV W4, ESumm
00B856  889B95     MOV W5, 0x1372
11058:                                             NoBalance=1;
00B858  8095E4     MOV Flgs, W4
00B85A  A0B004     BSET W4, #11
00B85C  8895E4     MOV W4, Flgs
11059:                                             TiltZadAddMustBe=0;
00B85E  B82260     MUL.UU W4, #0, W4
00B860  895654     MOV W4, TiltZadAddMustBe
00B862  895665     MOV W5, 0x2ACC
11060:                                             if (Vector)
00B864  809684     MOV Flgs5, W4
00B866  620270     AND W4, #0x10, W4
00B868  520FE0     SUB W4, #0x0, [W15]
00B86A  320002     BRA Z, 0xB870
11061:                                             VectorInit();
00B86C  074555     RCALL VectorInit
11062:                                             else
11063:                                             TrapeziumInit();
00B870  07460A     RCALL TrapeziumInit
11064:                                             break;
00B86E  370BEA     BRA 0xD044
00B872  370BE8     BRA 0xD044
11065:                                         }
11066:                                         case 181:
11067:                                         {
11068:                                             Monocycle=0;
00B874  809744     MOV StatFlgs, W4
00B876  A1F004     BCLR W4, #15
00B878  889744     MOV W4, StatFlgs
11069:                                             StrongMode=0;
00B87A  8095F4     MOV 0x12BE, W4
00B87C  A1E004     BCLR W4, #14
00B87E  8895F4     MOV W4, 0x12BE
11070:                                             LeftTurn=0;
00B880  809694     MOV 0x12D2, W4
00B882  A1C004     BCLR W4, #12
00B884  889694     MOV W4, 0x12D2
11071:                                             ESumm=0;
00B886  B82260     MUL.UU W4, #0, W4
00B888  889B84     MOV W4, ESumm
00B88A  889B95     MOV W5, 0x1372
11072:                                             RightTurn=0;
00B88C  809694     MOV 0x12D2, W4
00B88E  A1D004     BCLR W4, #13
00B890  889694     MOV W4, 0x12D2
11073:                                             StopLights=0;
00B892  809694     MOV 0x12D2, W4
00B894  A1E004     BCLR W4, #14
00B896  889694     MOV W4, 0x12D2
11074:                                             TiltZadAddMustBe=0;
00B898  B82260     MUL.UU W4, #0, W4
00B89A  895654     MOV W4, TiltZadAddMustBe
00B89C  895665     MOV W5, 0x2ACC
11075:                                             if (Vector)
00B89E  809684     MOV Flgs5, W4
00B8A0  620270     AND W4, #0x10, W4
00B8A2  520FE0     SUB W4, #0x0, [W15]
00B8A4  320002     BRA Z, 0xB8AA
11076:                                             VectorInit();
00B8A6  074538     RCALL VectorInit
11077:                                             else
11078:                                             TrapeziumInit();
00B8AA  0745ED     RCALL TrapeziumInit
11079:                                            break;
00B8A8  370BCD     BRA 0xD044
00B8AC  370BCB     BRA 0xD044
11080:                                         }
11081:                                         case 182:
11082:                                         {
11083:                                            BreakButtonMonocycle=1;
00B8AE  809754     MOV StatFlgs1, W4
00B8B0  A0E004     BSET W4, #14
00B8B2  889754     MOV W4, StatFlgs1
11084:                                            OptionsToMass();
00B8B4  070F9C     RCALL OptionsToMass
11085:                                            MustTrmFlashMass=1;
00B8B6  8095F4     MOV 0x12BE, W4
00B8B8  A02004     BSET W4, #2
00B8BA  8895F4     MOV W4, 0x12BE
11086:                                            break;
00B8BC  370BC3     BRA 0xD044
11087:                                         }
11088:             
11089:                                         case 183:
11090:                                         {
11091:                                            SpeedLimitSt4=RecBytes[2];
00B8BE  229284     MOV #0x2928, W4
00B8C0  784214     MOV.B [W4], W4
00B8C2  230235     MOV #0x3023, W5
00B8C4  784A84     MOV.B W4, [W5]
11092:                                            OptionsToMass();
00B8C6  070F93     RCALL OptionsToMass
11093:                                            MustTrmFlashMass=1;
00B8C8  8095F4     MOV 0x12BE, W4
00B8CA  A02004     BSET W4, #2
00B8CC  8895F4     MOV W4, 0x12BE
11094:                                            break;
00B8CE  370BBA     BRA 0xD044
11095:                                         }
11096:             
11097:                                         case 184:
11098:                                         {
11099:                                            Distance=0;
00B8D0  B82260     MUL.UU W4, #0, W4
00B8D2  89B8A4     MOV W4, Distance
00B8D4  89B8B5     MOV W5, 0x3716
11100:                                            RecOdometrFl=1;
00B8D6  809604     MOV Flgs1, W4
00B8D8  A06004     BSET W4, #6
00B8DA  889604     MOV W4, Flgs1
11101:                                            break;
00B8DC  370BB3     BRA 0xD044
11102:                                         }
11103:             
11104:                                         case 185:
11105:                                         {
11106:                                            TestVibroLR=1;
00B8DE  809654     MOV 0x12CA, W4
00B8E0  A07004     BSET W4, #7
00B8E2  889654     MOV W4, 0x12CA
11107:                                            break;
00B8E4  370BAF     BRA 0xD044
11108:                                         }
11109:                                         case 186:
11110:                                         {
11111:                                            TestVibroLR=0;
00B8E6  809654     MOV 0x12CA, W4
00B8E8  A17004     BCLR W4, #7
00B8EA  889654     MOV W4, 0x12CA
11112:                                            break;
00B8EC  370BAB     BRA 0xD044
11113:                                         }
11114:                                         case 187:
11115:                                         {
11116:                                            CalibrHalls=1;
00B8EE  809744     MOV StatFlgs, W4
00B8F0  A0E004     BSET W4, #14
00B8F2  889744     MOV W4, StatFlgs
11117:                                            break;
00B8F4  370BA7     BRA 0xD044
11118:                                         }
11119:                                         case 188:
11120:                                         {
11121:                                            CalibrHalls=0;
00B8F6  809744     MOV StatFlgs, W4
00B8F8  A1E004     BCLR W4, #14
00B8FA  889744     MOV W4, StatFlgs
11122:                                            break;
00B8FC  370BA3     BRA 0xD044
11123:                                         }
11124:                                         case 189:
11125:                                         {
11126:                                            BreakButtonMonocycle=0;
00B8FE  809754     MOV StatFlgs1, W4
00B900  A1E004     BCLR W4, #14
00B902  889754     MOV W4, StatFlgs1
11127:                                            OptionsToMass();
00B904  070F74     RCALL OptionsToMass
11128:                                            MustTrmFlashMass=1;
00B906  8095F4     MOV 0x12BE, W4
00B908  A02004     BSET W4, #2
00B90A  8895F4     MOV W4, 0x12BE
11129:                                            break;
00B90C  370B9B     BRA 0xD044
11130:                                         }
11131:                                         case 190:
11132:                                         {
11133:                                            MonoStopDirection=1;
00B90E  809764     MOV StatFlgs2, W4
00B910  A03004     BSET W4, #3
00B912  889764     MOV W4, StatFlgs2
11134:                                            OptionsToMass();
00B914  070F6C     RCALL OptionsToMass
11135:                                            MustTrmFlashMass=1;
00B916  8095F4     MOV 0x12BE, W4
00B918  A02004     BSET W4, #2
00B91A  8895F4     MOV W4, 0x12BE
11136:                                            break;
00B91C  370B93     BRA 0xD044
11137:                                         }
11138:             
11139:                                         case 191:
11140:                                         {
11141:                                            DirPWM1=0;
00B91E  809754     MOV StatFlgs1, W4
00B920  A10004     BCLR W4, #0
00B922  889754     MOV W4, StatFlgs1
11142:                                            DirPWM1Mem=DirPWM1;
00B924  809754     MOV StatFlgs1, W4
00B926  624261     AND.B W4, #0x1, W4
00B928  FB8204     ZE W4, W4
00B92A  620261     AND W4, #0x1, W4
00B92C  420204     ADD W4, W4, W4
00B92E  809616     MOV 0x12C2, W6
00B930  2FFFD5     MOV #0xFFFD, W5
00B932  630285     AND W6, W5, W5
00B934  728204     IOR W5, W4, W4
00B936  889614     MOV W4, 0x12C2
11143:                                            OptionsToMass();
00B938  070F5A     RCALL OptionsToMass
11144:                                            MustTrmFlashMass=1;
00B93A  8095F4     MOV 0x12BE, W4
00B93C  A02004     BSET W4, #2
00B93E  8895F4     MOV W4, 0x12BE
11145:                                            break;
00B940  370B81     BRA 0xD044
11146:                                         }
11147:                                         case 192:
11148:                                         {
11149:                                            DirPWM1=1;
00B942  809754     MOV StatFlgs1, W4
00B944  A00004     BSET W4, #0
00B946  889754     MOV W4, StatFlgs1
11150:                                            DirPWM1Mem=DirPWM1;
00B948  809754     MOV StatFlgs1, W4
00B94A  624261     AND.B W4, #0x1, W4
00B94C  FB8204     ZE W4, W4
00B94E  620261     AND W4, #0x1, W4
00B950  420204     ADD W4, W4, W4
00B952  809616     MOV 0x12C2, W6
00B954  2FFFD5     MOV #0xFFFD, W5
00B956  630285     AND W6, W5, W5
00B958  728204     IOR W5, W4, W4
00B95A  889614     MOV W4, 0x12C2
11151:                                            OptionsToMass();
00B95C  070F48     RCALL OptionsToMass
11152:                                            MustTrmFlashMass=1;
00B95E  8095F4     MOV 0x12BE, W4
00B960  A02004     BSET W4, #2
00B962  8895F4     MOV W4, 0x12BE
11153:                                            break;
00B964  370B6F     BRA 0xD044
11154:                                         }
11155:                                         case 193:
11156:                                         {
11157:                                            MaxSpd=RecBytes[2];
00B966  229284     MOV #0x2928, W4
00B968  784214     MOV.B [W4], W4
00B96A  230C55     MOV #0x30C5, W5
00B96C  784A84     MOV.B W4, [W5]
11158:                                            MaxSpdCoeff=(int)((((float)MAX_PWM)*ImpToKmH1_t)/((float)MaxSpd/ImpToKmH1_t));
00B96E  8212F4     MOV MAX_PWM, W4
00B970  DEA2CF     ASR W4, #15, W5
00B972  BE0004     MOV.D W4, W0
00B974  02257C     CALL ___floatsisf
00B976  000000     NOP
00B978  BE0300     MOV.D W0, W6
00B97A  817E24     MOV ImpToKmH1_t, W4
00B97C  817E35     MOV 0x2FC6, W5
00B97E  BE0104     MOV.D W4, W2
00B980  BE0006     MOV.D W6, W0
00B982  022630     CALL ___mulsf3
00B984  000000     NOP
00B986  BE0200     MOV.D W0, W4
00B988  BE0404     MOV.D W4, W8
00B98A  230C54     MOV #0x30C5, W4
00B98C  784214     MOV.B [W4], W4
00B98E  FB8204     ZE W4, W4
00B990  200005     MOV #0x0, W5
00B992  BE0004     MOV.D W4, W0
00B994  022582     CALL ___floatunsisf
00B996  000000     NOP
00B998  BE0300     MOV.D W0, W6
00B99A  817E24     MOV ImpToKmH1_t, W4
00B99C  817E35     MOV 0x2FC6, W5
00B99E  BE0104     MOV.D W4, W2
00B9A0  BE0006     MOV.D W6, W0
00B9A2  02245A     CALL ___divsf3
00B9A4  000000     NOP
00B9A6  BE0200     MOV.D W0, W4
00B9A8  BE0104     MOV.D W4, W2
00B9AA  BE0008     MOV.D W8, W0
00B9AC  02245A     CALL ___divsf3
00B9AE  000000     NOP
00B9B0  BE0200     MOV.D W0, W4
00B9B2  BE0004     MOV.D W4, W0
00B9B4  022504     CALL ___fixsfsi
00B9B6  000000     NOP
00B9B8  BE0200     MOV.D W0, W4
00B9BA  780204     MOV W4, W4
00B9BC  888774     MOV W4, MaxSpdCoeff
11159:                                            OptionsToMass();
00B9BE  070F17     RCALL OptionsToMass
11160:                                            MustTrmFlashMass=1;
00B9C0  8095F4     MOV 0x12BE, W4
00B9C2  A02004     BSET W4, #2
00B9C4  8895F4     MOV W4, 0x12BE
11161:                                            break;
00B9C6  370B3E     BRA 0xD044
11162:                                         }
11163:                                         case 194:
11164:                                         {
11165:                                             DirBalance=1;
00B9C8  809754     MOV StatFlgs1, W4
00B9CA  A02004     BSET W4, #2
00B9CC  889754     MOV W4, StatFlgs1
11166:                                            OptionsToMass();
00B9CE  070F0F     RCALL OptionsToMass
11167:                                            MustTrmFlashMass=1;
00B9D0  8095F4     MOV 0x12BE, W4
00B9D2  A02004     BSET W4, #2
00B9D4  8895F4     MOV W4, 0x12BE
11168:                                            break;
00B9D6  370B36     BRA 0xD044
11169:                                         }
11170:             
11171:                                         case 195:
11172:                                         {
11173:                                             DirBalance=0;
00B9D8  809754     MOV StatFlgs1, W4
00B9DA  A12004     BCLR W4, #2
00B9DC  889754     MOV W4, StatFlgs1
11174:                                            OptionsToMass();
00B9DE  070F07     RCALL OptionsToMass
11175:                                            MustTrmFlashMass=1;
00B9E0  8095F4     MOV 0x12BE, W4
00B9E2  A02004     BSET W4, #2
00B9E4  8895F4     MOV W4, 0x12BE
11176:                                             break;
00B9E6  370B2E     BRA 0xD044
11177:                                         }
11178:             
11179:                                         case 196:
11180:                                         {
11181:                                             SensorlessNotBEMF=1;
00B9E8  809654     MOV 0x12CA, W4
00B9EA  A04004     BSET W4, #4
00B9EC  889654     MOV W4, 0x12CA
11182:                                             SensorlessStartNoHalls=1;
00B9EE  8096B4     MOV 0x12D6, W4
00B9F0  A0E004     BSET W4, #14
00B9F2  8896B4     MOV W4, 0x12D6
11183:                                             break;
00B9F4  370B27     BRA 0xD044
11184:                                         }
11185:             
11186:                                         case 197:
11187:                                         {
11188:                                             MonoStopDirection=0;
00B9F6  809764     MOV StatFlgs2, W4
00B9F8  A13004     BCLR W4, #3
00B9FA  889764     MOV W4, StatFlgs2
11189:                                             OptionsToMass();
00B9FC  070EF8     RCALL OptionsToMass
11190:                                             MustTrmFlashMass=1;
00B9FE  8095F4     MOV 0x12BE, W4
00BA00  A02004     BSET W4, #2
00BA02  8895F4     MOV W4, 0x12BE
11191:                                             break;
00BA04  370B1F     BRA 0xD044
11192:                                         }
11193:             
11194:                                         case 198:
11195:                                         {
11196:                                             Alignment=1;
00BA06  8096A4     MOV Flgs6, W4
00BA08  A0A004     BSET W4, #10
00BA0A  8896A4     MOV W4, Flgs6
11197:                                             break;
00BA0C  370B1B     BRA 0xD044
11198:                                         }
11199:             
11200:                                         case 199:
11201:                                         {
11202:                                             BuzzAndHorn=1;
00BA0E  809754     MOV StatFlgs1, W4
00BA10  A03004     BSET W4, #3
00BA12  889754     MOV W4, StatFlgs1
11203:                                            OptionsToMass();
00BA14  070EEC     RCALL OptionsToMass
11204:                                            MustTrmFlashMass=1;
00BA16  8095F4     MOV 0x12BE, W4
00BA18  A02004     BSET W4, #2
00BA1A  8895F4     MOV W4, 0x12BE
11205:                                             break;
00BA1C  370B13     BRA 0xD044
11206:                                         }
11207:             
11208:                                         case 200:
11209:                                         {
11210:                                             BuzzAndHorn=0;
00BA1E  809754     MOV StatFlgs1, W4
00BA20  A13004     BCLR W4, #3
00BA22  889754     MOV W4, StatFlgs1
11211:                                            OptionsToMass();
00BA24  070EE4     RCALL OptionsToMass
11212:                                            MustTrmFlashMass=1;
00BA26  8095F4     MOV 0x12BE, W4
00BA28  A02004     BSET W4, #2
00BA2A  8895F4     MOV W4, 0x12BE
11213:                                             break;
00BA2C  370B0B     BRA 0xD044
11214:                                         }
11215:             
11216:                                         case 201:
11217:                                         {
11218:                                             DoNotTestBMS=1;
00BA2E  809754     MOV StatFlgs1, W4
00BA30  A04004     BSET W4, #4
00BA32  889754     MOV W4, StatFlgs1
11219:                                             break;
00BA34  370B07     BRA 0xD044
11220:                                         }
11221:             
11222:                                         case 202:
11223:                                         {
11224:                                             DoNotTestBMS=0;
00BA36  809754     MOV StatFlgs1, W4
00BA38  A14004     BCLR W4, #4
00BA3A  889754     MOV W4, StatFlgs1
11225:                                             break;
00BA3C  370B03     BRA 0xD044
11226:                                         }
11227:             
11228:                                         case 203:
11229:                                         {
11230:                                             break;
11231:                                         }
11232:             
11233:                                         case 204:
11234:                                         {
11235:                                             break;
11236:                                         }
11237:                                         case 205:
11238:                                         {
11239:                                             break;
11240:                                         }
11241:             
11242:                                         case 206:
11243:                                         {
11244:                                             break;
11245:                                         }
11246:             
11247:                                         case 207:
11248:                                         {
11249:                                             Alignment=0;
00BA3E  8096A4     MOV Flgs6, W4
00BA40  A1A004     BCLR W4, #10
00BA42  8896A4     MOV W4, Flgs6
11250:                                             break;
00BA44  370AFF     BRA 0xD044
11251:                                         }
11252:             
11253:                                         case 208:
11254:                                         {
11255:                                             ThreePositionSwitch=1;
00BA46  809744     MOV StatFlgs, W4
00BA48  A04004     BSET W4, #4
00BA4A  889744     MOV W4, StatFlgs
11256:                                            TurnSignal=0;
00BA4C  809764     MOV StatFlgs2, W4
00BA4E  A15004     BCLR W4, #5
00BA50  889764     MOV W4, StatFlgs2
11257:                                            OptionsToMass();
00BA52  070ECD     RCALL OptionsToMass
11258:                                            MustTrmFlashMass=1;
00BA54  8095F4     MOV 0x12BE, W4
00BA56  A02004     BSET W4, #2
00BA58  8895F4     MOV W4, 0x12BE
11259:                                             break;
00BA5A  370AF4     BRA 0xD044
11260:                                         }
11261:             
11262:             
11263:                                         case 209:
11264:                                         {
11265:                                             ThreePositionSwitch=0;
00BA5C  809744     MOV StatFlgs, W4
00BA5E  A14004     BCLR W4, #4
00BA60  889744     MOV W4, StatFlgs
11266:                                            TurnSignal=0;
00BA62  809764     MOV StatFlgs2, W4
00BA64  A15004     BCLR W4, #5
00BA66  889764     MOV W4, StatFlgs2
11267:                                            OptionsToMass();
00BA68  070EC2     RCALL OptionsToMass
11268:                                            MustTrmFlashMass=1;
00BA6A  8095F4     MOV 0x12BE, W4
00BA6C  A02004     BSET W4, #2
00BA6E  8895F4     MOV W4, 0x12BE
11269:                                            break;
00BA70  370AE9     BRA 0xD044
11270:                                         }
11271:             
11272:                                         case 210:
11273:                                         {
11274:                                            int Tm;
11275:                                            Tm=(int)RecBytes[3];
00BA72  229294     MOV #0x2929, W4
00BA74  784214     MOV.B [W4], W4
00BA76  FB8204     ZE W4, W4
00BA78  989704     MOV W4, [W14+160]
11276:                                            Tm=Tm<<8;
00BA7A  90920E     MOV [W14+160], W4
00BA7C  DD2248     SL W4, #8, W4
00BA7E  989704     MOV W4, [W14+160]
11277:                                            Tm=Tm+RecBytes[2];
00BA80  229284     MOV #0x2928, W4
00BA82  784214     MOV.B [W4], W4
00BA84  FB8204     ZE W4, W4
00BA86  90928E     MOV [W14+160], W5
00BA88  428204     ADD W5, W4, W4
00BA8A  989704     MOV W4, [W14+160]
11278:                                            KdOneTwoLeg=Tm;
00BA8C  90920E     MOV [W14+160], W4
00BA8E  DEA2CF     ASR W4, #15, W5
00BA90  BE0004     MOV.D W4, W0
00BA92  02257C     CALL ___floatsisf
00BA94  000000     NOP
00BA96  BE0200     MOV.D W0, W4
00BA98  889C44     MOV W4, KdOneTwoLeg
00BA9A  889C55     MOV W5, 0x138A
11279:                                            KdOneTwoLeg=KdOneTwoLeg/100;
00BA9C  809C44     MOV KdOneTwoLeg, W4
00BA9E  809C55     MOV 0x138A, W5
00BAA0  200002     MOV #0x0, W2
00BAA2  242C83     MOV #0x42C8, W3
00BAA4  BE0004     MOV.D W4, W0
00BAA6  02245A     CALL ___divsf3
00BAA8  000000     NOP
00BAAA  BE0200     MOV.D W0, W4
00BAAC  889C44     MOV W4, KdOneTwoLeg
00BAAE  889C55     MOV W5, 0x138A
11280:                                            OptionsToMass();
00BAB0  070E9E     RCALL OptionsToMass
11281:                                            MustTrmFlashMass=1;
00BAB2  8095F4     MOV 0x12BE, W4
00BAB4  A02004     BSET W4, #2
00BAB6  8895F4     MOV W4, 0x12BE
11282:                                            break;
00BAB8  370AC5     BRA 0xD044
11283:                                         }
11284:             
11285:                                         case 211:
11286:                                         {
11287:                                            break;
11288:                                         }
11289:             
11290:                                         case 212:
11291:                                         {
11292:                                            break;
11293:                                         }
11294:             
11295:                                         case 213:
11296:                                         {
11297:                                            break;
11298:                                         }
11299:                                         case 214:
11300:                                         {
11301:                                            unsigned int Tm;
11302:                                            Tm=(unsigned int)RecBytes[3];
00BABA  229294     MOV #0x2929, W4
00BABC  784214     MOV.B [W4], W4
00BABE  FB8204     ZE W4, W4
00BAC0  989714     MOV W4, [W14+162]
11303:                                            Tm=Tm<<8;
00BAC2  90921E     MOV [W14+162], W4
00BAC4  DD2248     SL W4, #8, W4
00BAC6  989714     MOV W4, [W14+162]
11304:                                            Tm=Tm+RecBytes[2];
00BAC8  229284     MOV #0x2928, W4
00BACA  784214     MOV.B [W4], W4
00BACC  FB8204     ZE W4, W4
00BACE  90929E     MOV [W14+162], W5
00BAD0  428204     ADD W5, W4, W4
00BAD2  989714     MOV W4, [W14+162]
11305:                                            SensorThresholdUp=Tm;
00BAD4  90921E     MOV [W14+162], W4
00BAD6  889484     MOV W4, SensorThresholdUp
11306:                                            if (SensorThresholdUp<=SensorThresholdDn)
00BAD8  809485     MOV SensorThresholdUp, W5
00BADA  809474     MOV SensorThresholdDn, W4
00BADC  528F84     SUB W5, W4, [W15]
00BADE  3C000C     BRA GT, 0xBAF8
11307:                                            {
11308:                                                if (SensorThresholdDn<4095)
00BAE0  809475     MOV SensorThresholdDn, W5
00BAE2  20FFE4     MOV #0xFFE, W4
00BAE4  528F84     SUB W5, W4, [W15]
00BAE6  3C0004     BRA GT, 0xBAF0
11309:                                                {
11310:                                                SensorThresholdUp=SensorThresholdDn+1;
00BAE8  809474     MOV SensorThresholdDn, W4
00BAEA  E80204     INC W4, W4
00BAEC  889484     MOV W4, SensorThresholdUp
00BAEE  370004     BRA 0xBAF8
11311:                                                }
11312:                                                else
11313:                                                {
11314:                                                SensorThresholdUp=4095;
00BAF0  20FFF4     MOV #0xFFF, W4
00BAF2  889484     MOV W4, SensorThresholdUp
11315:                                                SensorThresholdDn=4094;
00BAF4  20FFE4     MOV #0xFFE, W4
00BAF6  889474     MOV W4, SensorThresholdDn
11316:                                                }
11317:                                            }
11318:                                            OptionsToMass();
00BAF8  070E7A     RCALL OptionsToMass
11319:                                            MustTrmFlashMass=1;
00BAFA  8095F4     MOV 0x12BE, W4
00BAFC  A02004     BSET W4, #2
00BAFE  8895F4     MOV W4, 0x12BE
11320:                                            break;
00BB00  370AA1     BRA 0xD044
11321:                                         }
11322:                                         case 215:
11323:                                         {
11324:                                             BreakInvBtn=1;
00BB02  809754     MOV StatFlgs1, W4
00BB04  A06004     BSET W4, #6
00BB06  889754     MOV W4, StatFlgs1
11325:                                            OptionsToMass();
00BB08  070E72     RCALL OptionsToMass
11326:                                            MustTrmFlashMass=1;
00BB0A  8095F4     MOV 0x12BE, W4
00BB0C  A02004     BSET W4, #2
00BB0E  8895F4     MOV W4, 0x12BE
11327:                                             break;
00BB10  370A99     BRA 0xD044
11328:                                         }
11329:             
11330:                                         case 216:
11331:                                         {
11332:                                             BreakInvBtn=0;
00BB12  809754     MOV StatFlgs1, W4
00BB14  A16004     BCLR W4, #6
00BB16  889754     MOV W4, StatFlgs1
11333:                                            OptionsToMass();
00BB18  070E6A     RCALL OptionsToMass
11334:                                            MustTrmFlashMass=1;
00BB1A  8095F4     MOV 0x12BE, W4
00BB1C  A02004     BSET W4, #2
00BB1E  8895F4     MOV W4, 0x12BE
11335:                                             break;
00BB20  370A91     BRA 0xD044
11336:                                         }
11337:             
11338:                                         case 217:
11339:                                         {
11340:                                             StrongModeMem=1;
00BB22  809764     MOV StatFlgs2, W4
00BB24  A02004     BSET W4, #2
00BB26  889764     MOV W4, StatFlgs2
11341:                                             MixedMode=0;
00BB28  809744     MOV StatFlgs, W4
00BB2A  A1B004     BCLR W4, #11
00BB2C  889744     MOV W4, StatFlgs
11342:                                             MixedMode2=0;
00BB2E  809764     MOV StatFlgs2, W4
00BB30  A1B004     BCLR W4, #11
00BB32  889764     MOV W4, StatFlgs2
11343:                                            OptionsToMass();
00BB34  070E5C     RCALL OptionsToMass
11344:                                            MustTrmFlashMass=1;
00BB36  8095F4     MOV 0x12BE, W4
00BB38  A02004     BSET W4, #2
00BB3A  8895F4     MOV W4, 0x12BE
11345:                                            if (StrongModeMem)
00BB3C  809764     MOV StatFlgs2, W4
00BB3E  620264     AND W4, #0x4, W4
00BB40  520FE0     SUB W4, #0x0, [W15]
00BB42  320007     BRA Z, 0xBB52
11346:                                            {
11347:                                                PrevStrongMode=1;
00BB44  809694     MOV 0x12D2, W4
00BB46  A0A004     BSET W4, #10
00BB48  889694     MOV W4, 0x12D2
11348:                                                 StrongMode=1;
00BB4A  8095F4     MOV 0x12BE, W4
00BB4C  A0E004     BSET W4, #14
00BB4E  8895F4     MOV W4, 0x12BE
11349:                                            }
11350:                                             else
11351:                                             {
11352:                                                PrevStrongMode=0;
00BB52  809694     MOV 0x12D2, W4
00BB54  A1A004     BCLR W4, #10
00BB56  889694     MOV W4, 0x12D2
11353:                                                 StrongMode=0;
00BB58  8095F4     MOV 0x12BE, W4
00BB5A  A1E004     BCLR W4, #14
00BB5C  8895F4     MOV W4, 0x12BE
11354:                                             }
11355:                                                 
11356:                                             break;
00BB50  370A79     BRA 0xD044
00BB5E  370A72     BRA 0xD044
11357:                                         }
11358:             
11359:                                         case 218:
11360:                                         {
11361:                                             StrongModeMem=0;
00BB60  809764     MOV StatFlgs2, W4
00BB62  A12004     BCLR W4, #2
00BB64  889764     MOV W4, StatFlgs2
11362:                                             MixedMode=0;
00BB66  809744     MOV StatFlgs, W4
00BB68  A1B004     BCLR W4, #11
00BB6A  889744     MOV W4, StatFlgs
11363:                                             MixedMode2=0;
00BB6C  809764     MOV StatFlgs2, W4
00BB6E  A1B004     BCLR W4, #11
00BB70  889764     MOV W4, StatFlgs2
11364:                                            OptionsToMass();
00BB72  070E3D     RCALL OptionsToMass
11365:                                            MustTrmFlashMass=1;
00BB74  8095F4     MOV 0x12BE, W4
00BB76  A02004     BSET W4, #2
00BB78  8895F4     MOV W4, 0x12BE
11366:                                            if (StrongModeMem)
00BB7A  809764     MOV StatFlgs2, W4
00BB7C  620264     AND W4, #0x4, W4
00BB7E  520FE0     SUB W4, #0x0, [W15]
00BB80  320007     BRA Z, 0xBB90
11367:                                            {
11368:                                                PrevStrongMode=1;
00BB82  809694     MOV 0x12D2, W4
00BB84  A0A004     BSET W4, #10
00BB86  889694     MOV W4, 0x12D2
11369:                                                 StrongMode=1;
00BB88  8095F4     MOV 0x12BE, W4
00BB8A  A0E004     BSET W4, #14
00BB8C  8895F4     MOV W4, 0x12BE
11370:                                            }
11371:                                             else
11372:                                             {
11373:                                                PrevStrongMode=0;
00BB90  809694     MOV 0x12D2, W4
00BB92  A1A004     BCLR W4, #10
00BB94  889694     MOV W4, 0x12D2
11374:                                                 StrongMode=0;
00BB96  8095F4     MOV 0x12BE, W4
00BB98  A1E004     BCLR W4, #14
00BB9A  8895F4     MOV W4, 0x12BE
11375:                                             }
11376:                                             break;
00BB8E  370A5A     BRA 0xD044
00BB9C  370A53     BRA 0xD044
11377:                                         }
11378:             
11379:                                         case 219:
11380:                                         {
11381:                                            unsigned int Tm;
11382:                                            Tm=(unsigned int)RecBytes[3];
00BB9E  229294     MOV #0x2929, W4
00BBA0  784214     MOV.B [W4], W4
00BBA2  FB8204     ZE W4, W4
00BBA4  989724     MOV W4, [W14+164]
11383:                                            Tm=Tm<<8;
00BBA6  90922E     MOV [W14+164], W4
00BBA8  DD2248     SL W4, #8, W4
00BBAA  989724     MOV W4, [W14+164]
11384:                                            Tm=Tm+RecBytes[2];
00BBAC  229284     MOV #0x2928, W4
00BBAE  784214     MOV.B [W4], W4
00BBB0  FB8204     ZE W4, W4
00BBB2  9092AE     MOV [W14+164], W5
00BBB4  428204     ADD W5, W4, W4
00BBB6  989724     MOV W4, [W14+164]
11385:                                            BreakThreshold=Tm;
00BBB8  90922E     MOV [W14+164], W4
00BBBA  889494     MOV W4, BreakThreshold
11386:                                            KThreshold=(long int)((((float)MAX_PWM)/(MAX_PWM-BreakThreshold))*256);
00BBBC  8212F4     MOV MAX_PWM, W4
00BBBE  DEA2CF     ASR W4, #15, W5
00BBC0  BE0004     MOV.D W4, W0
00BBC2  02257C     CALL ___floatsisf
00BBC4  000000     NOP
00BBC6  BE0400     MOV.D W0, W8
00BBC8  8212F5     MOV MAX_PWM, W5
00BBCA  809494     MOV BreakThreshold, W4
00BBCC  528204     SUB W5, W4, W4
00BBCE  DEA2CF     ASR W4, #15, W5
00BBD0  BE0004     MOV.D W4, W0
00BBD2  02257C     CALL ___floatsisf
00BBD4  000000     NOP
00BBD6  BE0200     MOV.D W0, W4
00BBD8  BE0104     MOV.D W4, W2
00BBDA  BE0008     MOV.D W8, W0
00BBDC  02245A     CALL ___divsf3
00BBDE  000000     NOP
00BBE0  BE0200     MOV.D W0, W4
00BBE2  200002     MOV #0x0, W2
00BBE4  243803     MOV #0x4380, W3
00BBE6  BE0004     MOV.D W4, W0
00BBE8  022630     CALL ___mulsf3
00BBEA  000000     NOP
00BBEC  BE0200     MOV.D W0, W4
00BBEE  BE0004     MOV.D W4, W0
00BBF0  022504     CALL ___fixsfsi
00BBF2  000000     NOP
00BBF4  BE0200     MOV.D W0, W4
00BBF6  8A0024     MOV W4, KThreshold
00BBF8  8A0035     MOV W5, 0x4006
11387:                                            KThresholdBreak=(long int)((((float)MAX_PWM)/(BreakThreshold))*256);
00BBFA  8212F4     MOV MAX_PWM, W4
00BBFC  DEA2CF     ASR W4, #15, W5
00BBFE  BE0004     MOV.D W4, W0
00BC00  02257C     CALL ___floatsisf
00BC02  000000     NOP
00BC04  BE0400     MOV.D W0, W8
00BC06  809494     MOV BreakThreshold, W4
00BC08  DEA2CF     ASR W4, #15, W5
00BC0A  BE0004     MOV.D W4, W0
00BC0C  02257C     CALL ___floatsisf
00BC0E  000000     NOP
00BC10  BE0200     MOV.D W0, W4
00BC12  BE0104     MOV.D W4, W2
00BC14  BE0008     MOV.D W8, W0
00BC16  02245A     CALL ___divsf3
00BC18  000000     NOP
00BC1A  BE0200     MOV.D W0, W4
00BC1C  200002     MOV #0x0, W2
00BC1E  243803     MOV #0x4380, W3
00BC20  BE0004     MOV.D W4, W0
00BC22  022630     CALL ___mulsf3
00BC24  000000     NOP
00BC26  BE0200     MOV.D W0, W4
00BC28  BE0004     MOV.D W4, W0
00BC2A  022504     CALL ___fixsfsi
00BC2C  000000     NOP
00BC2E  BE0200     MOV.D W0, W4
00BC30  8A0044     MOV W4, KThresholdBreak
00BC32  8A0055     MOV W5, 0x400A
11388:                                            OptionsToMass();
00BC34  070DDC     RCALL OptionsToMass
11389:                                            MustTrmFlashMass=1;
00BC36  8095F4     MOV 0x12BE, W4
00BC38  A02004     BSET W4, #2
00BC3A  8895F4     MOV W4, 0x12BE
11390:                                            break;
00BC3C  370A03     BRA 0xD044
11391:                                         }
11392:             
11393:                                         case 220:
11394:                                         {
11395:                                            unsigned int Tm;
11396:                                            Tm=(unsigned int)RecBytes[3];
00BC3E  229294     MOV #0x2929, W4
00BC40  784214     MOV.B [W4], W4
00BC42  FB8204     ZE W4, W4
00BC44  989734     MOV W4, [W14+166]
11397:                                            Tm=Tm<<8;
00BC46  90923E     MOV [W14+166], W4
00BC48  DD2248     SL W4, #8, W4
00BC4A  989734     MOV W4, [W14+166]
11398:                                            Tm=Tm+RecBytes[2];
00BC4C  229284     MOV #0x2928, W4
00BC4E  784214     MOV.B [W4], W4
00BC50  FB8204     ZE W4, W4
00BC52  9092BE     MOV [W14+166], W5
00BC54  428204     ADD W5, W4, W4
00BC56  989734     MOV W4, [W14+166]
11399:                                            KFirstBreak=Tm;
00BC58  90923E     MOV [W14+166], W4
00BC5A  8894A4     MOV W4, KFirstBreak
11400:                                            OptionsToMass();
00BC5C  070DC8     RCALL OptionsToMass
11401:                                            MustTrmFlashMass=1;
00BC5E  8095F4     MOV 0x12BE, W4
00BC60  A02004     BSET W4, #2
00BC62  8895F4     MOV W4, 0x12BE
11402:                                            break;
00BC64  3709EF     BRA 0xD044
11403:                                         }
11404:             
11405:                                         case 221:
11406:                                         {
11407:                                            /*MaxAngleStopBreak=RecBytes[2];
11408:                                            OptionsToMass();
11409:                                            MustTrmFlashMass=1;
11410:                                            */
11411:                                            break;
11412:                                         }
11413:                                         case 222:
11414:                                         {
11415:                                             if (SensOrder1!=RecBytes[2])
00BC66  229284     MOV #0x2928, W4
00BC68  784294     MOV.B [W4], W5
00BC6A  212494     MOV #0x1249, W4
00BC6C  784214     MOV.B [W4], W4
00BC6E  52CF84     SUB.B W5, W4, [W15]
00BC70  3209E4     BRA Z, 0xD03A
11416:                                             {
11417:                                             CurrDecrease=1;
00BC72  8096A4     MOV Flgs6, W4
00BC74  A04004     BSET W4, #4
00BC76  8896A4     MOV W4, Flgs6
11418:                                             //ChangeCurrStateMachine=2;
11419:                                             CurrUst=300;
00BC78  2012C4     MOV #0x12C, W4
00BC7A  89F494     MOV W4, CurrUst
11420:                                             //CurrUstWork=CurrUst;
11421:                                             CurrPhaseLimit=600;
00BC7C  202584     MOV #0x258, W4
00BC7E  89F4C4     MOV W4, CurrPhaseLimit
11422:                                             //CurrPhaseLimitWork=CurrPhaseLimit;
11423:                                             
11424:             #if defined                                REV2
11425:                                             CurrLimit=0;
00BC80  EB0200     CLR W4
00BC82  88C194     MOV W4, CurrLimit
11426:             #else
11427:                                             CurrLimit=1;
11428:             #endif
11429:                                             //CurrLimitWork=CurrLimit;
11430:                                             ChangeCVR();
00BC84  071EB2     RCALL ChangeCVR
11431:                                             
11432:                                            SensOrder1=RecBytes[2];
00BC86  229284     MOV #0x2928, W4
00BC88  784214     MOV.B [W4], W4
00BC8A  212495     MOV #0x1249, W5
00BC8C  784A84     MOV.B W4, [W5]
11433:                                            RdSensors();
00BC8E  075A13     RCALL RdSensors
11434:                                            OptionsToMass();
00BC90  070DAE     RCALL OptionsToMass
11435:                                            MustTrmFlashMass=1;
00BC92  8095F4     MOV 0x12BE, W4
00BC94  A02004     BSET W4, #2
00BC96  8895F4     MOV W4, 0x12BE
11436:                                            
11437:                                             }
11438:                                            
11439:                                            break;
00BC98  3709D5     BRA 0xD044
00D03A  000000     NOP
00D03C  370003     BRA 0xD044
11440:                                         }
11441:                                       case 223:
11442:                                         {
11443:                                            unsigned int Tm;
11444:                                            Tm=(unsigned int)RecBytes[3];
00BC9A  229294     MOV #0x2929, W4
00BC9C  784214     MOV.B [W4], W4
00BC9E  FB8204     ZE W4, W4
00BCA0  989744     MOV W4, [W14+168]
11445:                                            Tm=Tm<<8;
00BCA2  90924E     MOV [W14+168], W4
00BCA4  DD2248     SL W4, #8, W4
00BCA6  989744     MOV W4, [W14+168]
11446:                                            Tm=Tm+RecBytes[2];
00BCA8  229284     MOV #0x2928, W4
00BCAA  784214     MOV.B [W4], W4
00BCAC  FB8204     ZE W4, W4
00BCAE  9092CE     MOV [W14+168], W5
00BCB0  428204     ADD W5, W4, W4
00BCB2  989744     MOV W4, [W14+168]
11447:                                            Cmd5BMS=Tm;
00BCB4  90924E     MOV [W14+168], W4
00BCB6  200005     MOV #0x0, W5
00BCB8  89BD24     MOV W4, Cmd5BMS
00BCBA  89BD35     MOV W5, 0x37A6
11448:                                            Cmd5BMS=Cmd5BMS<<5;
00BCBC  81BD26     MOV Cmd5BMS, W6
00BCBE  81BD37     MOV 0x37A6, W7
00BCC0  DD3A45     SL W7, #5, W4
00BCC2  DE32CB     LSR W6, #11, W5
00BCC4  720285     IOR W4, W5, W5
00BCC6  DD3245     SL W6, #5, W4
00BCC8  89BD24     MOV W4, Cmd5BMS
00BCCA  89BD35     MOV W5, 0x37A6
11449:                                            Cmd5BMS=Cmd5BMS|((unsigned char)0x9);
00BCCC  81BD24     MOV Cmd5BMS, W4
00BCCE  81BD35     MOV 0x37A6, W5
00BCD0  720269     IOR W4, #0x9, W4
00BCD2  89BD24     MOV W4, Cmd5BMS
00BCD4  89BD35     MOV W5, 0x37A6
11450:                                            Cmd5BMS=Cmd5BMS<<3;
00BCD6  81BD26     MOV Cmd5BMS, W6
00BCD8  81BD37     MOV 0x37A6, W7
00BCDA  DD3A43     SL W7, #3, W4
00BCDC  DE32CD     LSR W6, #13, W5
00BCDE  720285     IOR W4, W5, W5
00BCE0  DD3243     SL W6, #3, W4
00BCE2  89BD24     MOV W4, Cmd5BMS
00BCE4  89BD35     MOV W5, 0x37A6
11451:                                            break;
00BCE6  3709AE     BRA 0xD044
11452:                                         }
11453:             
11454:                                       case 224:
11455:                                         {
11456:                                             Cmd5BMS=((unsigned char)0xa)<<3;
00BCE8  200504     MOV #0x50, W4
00BCEA  200005     MOV #0x0, W5
00BCEC  89BD24     MOV W4, Cmd5BMS
00BCEE  89BD35     MOV W5, 0x37A6
11457:                                            break;
00BCF0  3709A9     BRA 0xD044
11458:                                         }
11459:                                       case 225:
11460:                                         {
11461:                                            unsigned int Tm;
11462:                                            Tm=(unsigned int)RecBytes[3];
00BCF2  229294     MOV #0x2929, W4
00BCF4  784214     MOV.B [W4], W4
00BCF6  FB8204     ZE W4, W4
00BCF8  989754     MOV W4, [W14+170]
11463:                                            Tm=Tm<<8;
00BCFA  90925E     MOV [W14+170], W4
00BCFC  DD2248     SL W4, #8, W4
00BCFE  989754     MOV W4, [W14+170]
11464:                                            Tm=Tm+RecBytes[2];
00BD00  229284     MOV #0x2928, W4
00BD02  784214     MOV.B [W4], W4
00BD04  FB8204     ZE W4, W4
00BD06  9092DE     MOV [W14+170], W5
00BD08  428204     ADD W5, W4, W4
00BD0A  989754     MOV W4, [W14+170]
11465:                                            SensorLessTimerConstConst=Tm;
00BD0C  9092DE     MOV [W14+170], W5
00BD0E  8A0135     MOV W5, SensorLessTimerConstConst
11466:                                            //SensorLessTimerConst=Tm;
11467:                                            OptionsToMass();
00BD10  070D6E     RCALL OptionsToMass
11468:                                            MustTrmFlashMass=1;
00BD12  8095F4     MOV 0x12BE, W4
00BD14  A02004     BSET W4, #2
00BD16  8895F4     MOV W4, 0x12BE
11469:                                            
11470:                                            break;
00BD18  370995     BRA 0xD044
11471:                                         }
11472:             
11473:                                       case 226:
11474:                                         {
11475:                                            
11476:                                            //SensorlessNotBEMF=1;
11477:                                            SensorlessInit();
00BD1A  07E46C     RCALL SensorlessInit
11478:                                            OptionsToMass();
00BD1C  070D68     RCALL OptionsToMass
11479:                                            MustTrmFlashMass=1;
00BD1E  8095F4     MOV 0x12BE, W4
00BD20  A02004     BSET W4, #2
00BD22  8895F4     MOV W4, 0x12BE
11480:                                            break;
00BD24  37098F     BRA 0xD044
11481:                                         }
11482:             
11483:                                       case 227:
11484:                                         {
11485:                                             Sensorless=0;
00BD26  809754     MOV StatFlgs1, W4
00BD28  A15004     BCLR W4, #5
00BD2A  889754     MOV W4, StatFlgs1
11486:                                             SensorlessNotBEMF=0;
00BD2C  809654     MOV 0x12CA, W4
00BD2E  A14004     BCLR W4, #4
00BD30  889654     MOV W4, 0x12CA
11487:                                             SensorlessStartNoHalls=0;
00BD32  8096B4     MOV 0x12D6, W4
00BD34  A1E004     BCLR W4, #14
00BD36  8896B4     MOV W4, 0x12D6
11488:                                             CurrUst=CurrUstWork;
00BD38  81F4E4     MOV CurrUstWork, W4
00BD3A  89F494     MOV W4, CurrUst
11489:                                             CurrLimit=CurrLimitWork;
00BD3C  80C1A4     MOV CurrLimitWork, W4
00BD3E  88C194     MOV W4, CurrLimit
11490:                                                 if (VectorMem)
00BD40  809755     MOV StatFlgs1, W5
00BD42  204004     MOV #0x400, W4
00BD44  628204     AND W5, W4, W4
00BD46  520FE0     SUB W4, #0x0, [W15]
00BD48  320002     BRA Z, 0xBD4E
11491:                                                 VectorInit();
00BD4A  0742E6     RCALL VectorInit
00BD4C  370001     BRA 0xBD50
11492:                                                 else
11493:                                                 TrapeziumInit();
00BD4E  07439B     RCALL TrapeziumInit
11494:                                             ChangeCVR();
00BD50  071E4C     RCALL ChangeCVR
11495:                                             RdSensors();
00BD52  0759B1     RCALL RdSensors
11496:                                            OptionsToMass();
00BD54  070D4C     RCALL OptionsToMass
11497:                                            MustTrmFlashMass=1;
00BD56  8095F4     MOV 0x12BE, W4
00BD58  A02004     BSET W4, #2
00BD5A  8895F4     MOV W4, 0x12BE
11498:             
11499:             
11500:                                            break;
00BD5C  370973     BRA 0xD044
11501:                                         }
11502:             
11503:                                       case 228:
11504:                                         {
11505:                                             if (!AlarmOn)
00BD5E  809635     MOV 0x12C6, W5
00BD60  240004     MOV #0x4000, W4
00BD62  628204     AND W5, W4, W4
00BD64  520FE0     SUB W4, #0x0, [W15]
00BD66  3A0004     BRA NZ, 0xBD70
11506:                                             {
11507:                                             if (!Spd1ResPlus)
00BD68  817F44     MOV Spd1ResPlus, W4
00BD6A  520FE0     SUB W4, #0x0, [W15]
00BD6C  3A0001     BRA NZ, 0xBD70
11508:                                             AlmOn();
00BD6E  073EA9     RCALL AlmOn
11509:                                             }
11510:                                            MustTrmFlashMass=1;
00BD70  8095F4     MOV 0x12BE, W4
00BD72  A02004     BSET W4, #2
00BD74  8895F4     MOV W4, 0x12BE
11511:                                            break;
00BD76  370966     BRA 0xD044
11512:                                         }
11513:             
11514:                                       case 229:
11515:                                         {
11516:                                             if (AlarmOn)
00BD78  809635     MOV 0x12C6, W5
00BD7A  240004     MOV #0x4000, W4
00BD7C  628204     AND W5, W4, W4
00BD7E  520FE0     SUB W4, #0x0, [W15]
00BD80  320007     BRA Z, 0xBD90
11517:                                             {
11518:                                             AlmOff();
00BD82  073EB6     RCALL AlmOff
11519:                                             BreakPressed=0;
00BD84  809614     MOV 0x12C2, W4
00BD86  A10004     BCLR W4, #0
00BD88  889614     MOV W4, 0x12C2
11520:                                             AlmOffing=1;
00BD8A  809664     MOV Flgs4, W4
00BD8C  A0F004     BSET W4, #15
00BD8E  889664     MOV W4, Flgs4
11521:                                             }
11522:                                            MustTrmFlashMass=1;
00BD90  8095F4     MOV 0x12BE, W4
00BD92  A02004     BSET W4, #2
00BD94  8895F4     MOV W4, 0x12BE
11523:                                            break;
00BD96  370956     BRA 0xD044
11524:                                         }
11525:                                       case 230:
11526:                                         {
11527:                                            break;
11528:                                         }
11529:                                       case 231:
11530:                                         {
11531:                                             int Tm;
11532:                                            Tm=(int)RecBytes[3];
00BD98  229294     MOV #0x2929, W4
00BD9A  784214     MOV.B [W4], W4
00BD9C  FB8204     ZE W4, W4
00BD9E  989764     MOV W4, [W14+172]
11533:                                            Tm=Tm<<8;
00BDA0  90926E     MOV [W14+172], W4
00BDA2  DD2248     SL W4, #8, W4
00BDA4  989764     MOV W4, [W14+172]
11534:                                            Tm=Tm+RecBytes[2];
00BDA6  229284     MOV #0x2928, W4
00BDA8  784214     MOV.B [W4], W4
00BDAA  FB8204     ZE W4, W4
00BDAC  9092EE     MOV [W14+172], W5
00BDAE  428204     ADD W5, W4, W4
00BDB0  989764     MOV W4, [W14+172]
11535:                                            KpCurr=Tm;
00BDB2  90926E     MOV [W14+172], W4
00BDB4  DEA2CF     ASR W4, #15, W5
00BDB6  BE0004     MOV.D W4, W0
00BDB8  02257C     CALL ___floatsisf
00BDBA  000000     NOP
00BDBC  BE0200     MOV.D W0, W4
00BDBE  89F464     MOV W4, KpCurr
00BDC0  89F475     MOV W5, 0x3E8E
11536:                                            KpCurr=KpCurr/100;
00BDC2  81F464     MOV KpCurr, W4
00BDC4  81F475     MOV 0x3E8E, W5
00BDC6  200002     MOV #0x0, W2
00BDC8  242C83     MOV #0x42C8, W3
00BDCA  BE0004     MOV.D W4, W0
00BDCC  02245A     CALL ___divsf3
00BDCE  000000     NOP
00BDD0  BE0200     MOV.D W0, W4
00BDD2  89F464     MOV W4, KpCurr
00BDD4  89F475     MOV W5, 0x3E8E
11537:                                            OptionsToMass();
00BDD6  070D0B     RCALL OptionsToMass
11538:                                            MustTrmFlashMass=1;
00BDD8  8095F4     MOV 0x12BE, W4
00BDDA  A02004     BSET W4, #2
00BDDC  8895F4     MOV W4, 0x12BE
11539:                                            break;
00BDDE  370932     BRA 0xD044
11540:                                            break;
11541:                                         }
11542:                                       case 232:
11543:                                         {
11544:                                            TrapezoidaRAM1=1;
00BDE0  809754     MOV StatFlgs1, W4
00BDE2  A0C004     BSET W4, #12
00BDE4  889754     MOV W4, StatFlgs1
11545:                                            OptionsToMass();
00BDE6  070D03     RCALL OptionsToMass
11546:                                            MustTrmFlashMass=1;
00BDE8  8095F4     MOV 0x12BE, W4
00BDEA  A02004     BSET W4, #2
00BDEC  8895F4     MOV W4, 0x12BE
11547:                                            break;
00BDEE  37092A     BRA 0xD044
11548:                                         }
11549:                                       case 233:
11550:                                         {
11551:                                            TrapezoidaRAM1=0;
00BDF0  809754     MOV StatFlgs1, W4
00BDF2  A1C004     BCLR W4, #12
00BDF4  889754     MOV W4, StatFlgs1
11552:                                            OptionsToMass();
00BDF6  070CFB     RCALL OptionsToMass
11553:                                            MustTrmFlashMass=1;
00BDF8  8095F4     MOV 0x12BE, W4
00BDFA  A02004     BSET W4, #2
00BDFC  8895F4     MOV W4, 0x12BE
11554:                                            break;
00BDFE  370922     BRA 0xD044
11555:                                         }
11556:             
11557:                                         case 234:
11558:                                         {
11559:                                            CURRENT_PROTECTION=1;
00BE00  809754     MOV StatFlgs1, W4
00BE02  A0D004     BSET W4, #13
00BE04  889754     MOV W4, StatFlgs1
11560:                                            OptionsToMass();
00BE06  070CF3     RCALL OptionsToMass
11561:                                            MustTrmFlashMass=1;
00BE08  8095F4     MOV 0x12BE, W4
00BE0A  A02004     BSET W4, #2
00BE0C  8895F4     MOV W4, 0x12BE
11562:                                            break;
00BE0E  37091A     BRA 0xD044
11563:                                         }
11564:                                         case 235:
11565:                                         {
11566:                                            CURRENT_PROTECTION=0;
00BE10  809754     MOV StatFlgs1, W4
00BE12  A1D004     BCLR W4, #13
00BE14  889754     MOV W4, StatFlgs1
11567:                                            OptionsToMass();
00BE16  070CEB     RCALL OptionsToMass
11568:                                            MustTrmFlashMass=1;
00BE18  8095F4     MOV 0x12BE, W4
00BE1A  A02004     BSET W4, #2
00BE1C  8895F4     MOV W4, 0x12BE
11569:                                            break;
00BE1E  370912     BRA 0xD044
11570:                                         }
11571:             
11572:                                         case 236:
11573:                                         {
11574:                                             int Tm;
11575:                                            Tm=(int)RecBytes[3];
00BE20  229294     MOV #0x2929, W4
00BE22  784214     MOV.B [W4], W4
00BE24  FB8204     ZE W4, W4
00BE26  989774     MOV W4, [W14+174]
11576:                                            Tm=Tm<<8;
00BE28  90927E     MOV [W14+174], W4
00BE2A  DD2248     SL W4, #8, W4
00BE2C  989774     MOV W4, [W14+174]
11577:                                            Tm=Tm+RecBytes[2];
00BE2E  229284     MOV #0x2928, W4
00BE30  784214     MOV.B [W4], W4
00BE32  FB8204     ZE W4, W4
00BE34  9092FE     MOV [W14+174], W5
00BE36  428204     ADD W5, W4, W4
00BE38  989774     MOV W4, [W14+174]
11578:                                            KiCurr=Tm;
00BE3A  90927E     MOV [W14+174], W4
00BE3C  DEA2CF     ASR W4, #15, W5
00BE3E  BE0004     MOV.D W4, W0
00BE40  02257C     CALL ___floatsisf
00BE42  000000     NOP
00BE44  BE0200     MOV.D W0, W4
00BE46  89F444     MOV W4, KiCurr
00BE48  89F455     MOV W5, 0x3E8A
11579:                                            KiCurr=KiCurr/100;
00BE4A  81F444     MOV KiCurr, W4
00BE4C  81F455     MOV 0x3E8A, W5
00BE4E  200002     MOV #0x0, W2
00BE50  242C83     MOV #0x42C8, W3
00BE52  BE0004     MOV.D W4, W0
00BE54  02245A     CALL ___divsf3
00BE56  000000     NOP
00BE58  BE0200     MOV.D W0, W4
00BE5A  89F444     MOV W4, KiCurr
00BE5C  89F455     MOV W5, 0x3E8A
11580:                                            OptionsToMass();
00BE5E  070CC7     RCALL OptionsToMass
11581:                                            MustTrmFlashMass=1;
00BE60  8095F4     MOV 0x12BE, W4
00BE62  A02004     BSET W4, #2
00BE64  8895F4     MOV W4, 0x12BE
11582:                                            break;
00BE66  3708EE     BRA 0xD044
11583:                                         }
11584:                                         case 237:
11585:                                         {
11586:                                            //ChangeCurrStateMachine=0;
11587:                                            int Tm;
11588:                                            Tm=(int)RecBytes[3];
00BE68  229294     MOV #0x2929, W4
00BE6A  784214     MOV.B [W4], W4
00BE6C  FB8204     ZE W4, W4
00BE6E  989F04     MOV W4, [W14+176]
11589:                                            Tm=Tm<<8;
00BE70  909A0E     MOV [W14+176], W4
00BE72  DD2248     SL W4, #8, W4
00BE74  989F04     MOV W4, [W14+176]
11590:                                            Tm=Tm+RecBytes[2];
00BE76  229284     MOV #0x2928, W4
00BE78  784214     MOV.B [W4], W4
00BE7A  FB8204     ZE W4, W4
00BE7C  909A8E     MOV [W14+176], W5
00BE7E  428204     ADD W5, W4, W4
00BE80  989F04     MOV W4, [W14+176]
11591:                                            CurrUstWork=Tm;
00BE82  909A0E     MOV [W14+176], W4
00BE84  89F4E4     MOV W4, CurrUstWork
11592:                                             if (!Sensorless)
00BE86  809755     MOV StatFlgs1, W5
00BE88  200204     MOV #0x20, W4
00BE8A  628204     AND W5, W4, W4
00BE8C  520FE0     SUB W4, #0x0, [W15]
00BE8E  3A0002     BRA NZ, 0xBE94
11593:                                             CurrUst=CurrUstWork;
00BE90  81F4E4     MOV CurrUstWork, W4
00BE92  89F494     MOV W4, CurrUst
11594:                                            
11595:                                            OptionsToMass();
00BE94  070CAC     RCALL OptionsToMass
11596:                                            MustTrmFlashMass=1;
00BE96  8095F4     MOV 0x12BE, W4
00BE98  A02004     BSET W4, #2
00BE9A  8895F4     MOV W4, 0x12BE
11597:                                            break;
00BE9C  3708D3     BRA 0xD044
11598:                                         }
11599:                                         case 238:
11600:                                         {
11601:                                         CalibrateHalls=1;
00BE9E  8096B4     MOV 0x12D6, W4
00BEA0  A0C004     BSET W4, #12
00BEA2  8896B4     MOV W4, 0x12D6
11602:                                             SoundNum=8;
00BEA4  2124B5     MOV #0x124B, W5
00BEA6  B3C084     MOV.B #0x8, W4
00BEA8  784A84     MOV.B W4, [W5]
11603:             
11604:             
11605:                                         }
11606:             
11607:                                       case 239:
11608:                                         {
11609:                                            PWM32Bits=1;
00BEAA  809754     MOV StatFlgs1, W4
00BEAC  A0F004     BSET W4, #15
00BEAE  889754     MOV W4, StatFlgs1
11610:               /*                                     if (1)//(PWM32Bits)
11611:                                                    {
11612:                                                     MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
11613:                                                     if (DirectControlMotor)
11614:                                                     {
11615:                                                     DIRPWM1=DIRPWM1*2;
11616:                                                     }
11617:                                                    }
11618:                                                     else
11619:                                                     {
11620:                                                     MAX_PWM_CONST=MAX_PWM_CONST_EBIKE;
11621:                                                     if (DirectControlMotor)
11622:                                                     {
11623:                                                     DIRPWM1=DIRPWM1/2;
11624:                                                     }
11625:                                                     }
11626:                                             if (VectorMem)
11627:                                                 VectorInit();
11628:                                             else
11629:                                                 TrapeziumInit();
11630:             */
11631:                                            
11632:                                            OptionsToMass();
00BEB0  070C9E     RCALL OptionsToMass
11633:                                            MustTrmFlashMass=1;
00BEB2  8095F4     MOV 0x12BE, W4
00BEB4  A02004     BSET W4, #2
00BEB6  8895F4     MOV W4, 0x12BE
11634:                                            break;
00BEB8  3708C5     BRA 0xD044
11635:                                         }
11636:                                       case 240:
11637:                                         {
11638:                                            PWM32Bits=0;
00BEBA  809754     MOV StatFlgs1, W4
00BEBC  A1F004     BCLR W4, #15
00BEBE  889754     MOV W4, StatFlgs1
11639:               /*                                     if (PWM32Bits)
11640:                                                    {
11641:                                                     MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
11642:                                                     if (DirectControlMotor)
11643:                                                     {
11644:                                                     DIRPWM1=DIRPWM1*2;
11645:                                                     }
11646:                                                    }
11647:                                                     else
11648:                                                     {
11649:                                                     MAX_PWM_CONST=MAX_PWM_CONST_EBIKE;
11650:                                                     if (DirectControlMotor)
11651:                                                     {
11652:                                                     DIRPWM1=DIRPWM1/2;
11653:                                                     }
11654:                                                    }
11655:                                             if (VectorMem)
11656:                                                 VectorInit();
11657:                                             else
11658:                                                 TrapeziumInit();
11659:             */
11660:                                            OptionsToMass();
00BEC0  070C96     RCALL OptionsToMass
11661:                                            MustTrmFlashMass=1;
00BEC2  8095F4     MOV 0x12BE, W4
00BEC4  A02004     BSET W4, #2
00BEC6  8895F4     MOV W4, 0x12BE
11662:                                            break;
00BEC8  3708BD     BRA 0xD044
11663:                                         }
11664:             
11665:             
11666:                                       case 241:
11667:                                         {
11668:                                            break;
11669:                                         }
11670:             
11671:             
11672:                                         case 242:
11673:                                         {
11674:                                            break;
11675:                                         }
11676:             
11677:             
11678:                                         case 243:
11679:                                         {
11680:                                            break;
11681:                                         }
11682:                                         case 244:
11683:                                         {
11684:                                            OptionsToMass();
00BECA  070C91     RCALL OptionsToMass
11685:                                            MustTrmFlashMass=1;
00BECC  8095F4     MOV 0x12BE, W4
00BECE  A02004     BSET W4, #2
00BED0  8895F4     MOV W4, 0x12BE
11686:                                            break;
00BED2  3708B8     BRA 0xD044
11687:                                         }
11688:                                         case 245:
11689:                                         {
11690:                                            Locked=1;
00BED4  809694     MOV 0x12D2, W4
00BED6  A06004     BSET W4, #6
00BED8  889694     MOV W4, 0x12D2
11691:                                            SoundNum=20;
00BEDA  2124B5     MOV #0x124B, W5
00BEDC  B3C144     MOV.B #0x14, W4
00BEDE  784A84     MOV.B W4, [W5]
11692:                                            break;
00BEE0  3708B1     BRA 0xD044
11693:                                         }
11694:             
11695:             
11696:                                         case 247:
11697:                                         {
11698:             //                                while (Sensor1_Prev==3);
11699:                                             SendingMass=1;
00BEE2  8095E4     MOV Flgs, W4
00BEE4  A07004     BSET W4, #7
00BEE6  8895E4     MOV W4, Flgs
11700:                                             SendingNeutral=1;
00BEE8  8095F4     MOV 0x12BE, W4
00BEEA  A0F004     BSET W4, #15
00BEEC  8895F4     MOV W4, 0x12BE
11701:                                           break;
00BEEE  3708AA     BRA 0xD044
11702:                                         }
11703:             
11704:             
11705:                                         case 249:
11706:                                         {
11707:                                             StrongModeMem=0;
00BEF0  809764     MOV StatFlgs2, W4
00BEF2  A12004     BCLR W4, #2
00BEF4  889764     MOV W4, StatFlgs2
11708:                                             MixedMode=1;
00BEF6  809744     MOV StatFlgs, W4
00BEF8  A0B004     BSET W4, #11
00BEFA  889744     MOV W4, StatFlgs
11709:                                             MixedMode2=0;
00BEFC  809764     MOV StatFlgs2, W4
00BEFE  A1B004     BCLR W4, #11
00BF00  889764     MOV W4, StatFlgs2
11710:                                             OptionsToMass();
00BF02  070C75     RCALL OptionsToMass
11711:                                             MustTrmFlashMass=1;
00BF04  8095F4     MOV 0x12BE, W4
00BF06  A02004     BSET W4, #2
00BF08  8895F4     MOV W4, 0x12BE
11712:                                             break;
00BF0A  37089C     BRA 0xD044
11713:                                         }
11714:                                         case 250:
11715:                                         {
11716:                                            unsigned int Tm;
11717:                                            Tm=(unsigned int)RecBytes[3];
00BF0C  229294     MOV #0x2929, W4
00BF0E  784214     MOV.B [W4], W4
00BF10  FB8204     ZE W4, W4
00BF12  989F14     MOV W4, [W14+178]
11718:                                            Tm=Tm<<8;
00BF14  909A1E     MOV [W14+178], W4
00BF16  DD2248     SL W4, #8, W4
00BF18  989F14     MOV W4, [W14+178]
11719:                                            Tm=Tm+RecBytes[2];
00BF1A  229284     MOV #0x2928, W4
00BF1C  784214     MOV.B [W4], W4
00BF1E  FB8204     ZE W4, W4
00BF20  909A9E     MOV [W14+178], W5
00BF22  428204     ADD W5, W4, W4
00BF24  989F14     MOV W4, [W14+178]
11720:                                            CntMixedModeMax=Tm;
00BF26  909A1E     MOV [W14+178], W4
00BF28  89FFE4     MOV W4, CntMixedModeMax
11721:                                            OptionsToMass();
00BF2A  070C61     RCALL OptionsToMass
11722:                                            MustTrmFlashMass=1;
00BF2C  8095F4     MOV 0x12BE, W4
00BF2E  A02004     BSET W4, #2
00BF30  8895F4     MOV W4, 0x12BE
11723:                                            break;
00BF32  370888     BRA 0xD044
11724:                                         }
11725:                                         case 251:
11726:                                         {
11727:                                            unsigned int Tm;
11728:                                            Tm=(unsigned int)RecBytes[3];
00BF34  229294     MOV #0x2929, W4
00BF36  784214     MOV.B [W4], W4
00BF38  FB8204     ZE W4, W4
00BF3A  989F24     MOV W4, [W14+180]
11729:                                            Tm=Tm<<8;
00BF3C  909A2E     MOV [W14+180], W4
00BF3E  DD2248     SL W4, #8, W4
00BF40  989F24     MOV W4, [W14+180]
11730:                                            Tm=Tm+RecBytes[2];
00BF42  229284     MOV #0x2928, W4
00BF44  784214     MOV.B [W4], W4
00BF46  FB8204     ZE W4, W4
00BF48  909AAE     MOV [W14+180], W5
00BF4A  428204     ADD W5, W4, W4
00BF4C  989F24     MOV W4, [W14+180]
11731:                                            MixedModeLevelOn=Tm;
00BF4E  909A2E     MOV [W14+180], W4
00BF50  89FFC4     MOV W4, MixedModeLevelOn
11732:                                            OptionsToMass();
00BF52  070C4D     RCALL OptionsToMass
11733:                                            MustTrmFlashMass=1;
00BF54  8095F4     MOV 0x12BE, W4
00BF56  A02004     BSET W4, #2
00BF58  8895F4     MOV W4, 0x12BE
11734:                                            break;
00BF5A  370874     BRA 0xD044
11735:                                         }
11736:             
11737:                                         case 252:
11738:                                         {
11739:                                            unsigned int Tm;
11740:                                            Tm=(unsigned int)RecBytes[3];
00BF5C  229294     MOV #0x2929, W4
00BF5E  784214     MOV.B [W4], W4
00BF60  FB8204     ZE W4, W4
00BF62  989F34     MOV W4, [W14+182]
11741:                                            Tm=Tm<<8;
00BF64  909A3E     MOV [W14+182], W4
00BF66  DD2248     SL W4, #8, W4
00BF68  989F34     MOV W4, [W14+182]
11742:                                            Tm=Tm+RecBytes[2];
00BF6A  229284     MOV #0x2928, W4
00BF6C  784214     MOV.B [W4], W4
00BF6E  FB8204     ZE W4, W4
00BF70  909ABE     MOV [W14+182], W5
00BF72  428204     ADD W5, W4, W4
00BF74  989F34     MOV W4, [W14+182]
11743:                                            CurrMixed=Tm;
00BF76  909A3E     MOV [W14+182], W4
00BF78  89FFF4     MOV W4, CurrMixed
11744:                                            OptionsToMass();
00BF7A  070C39     RCALL OptionsToMass
11745:                                            MustTrmFlashMass=1;
00BF7C  8095F4     MOV 0x12BE, W4
00BF7E  A02004     BSET W4, #2
00BF80  8895F4     MOV W4, 0x12BE
11746:                                            break;
00BF82  370860     BRA 0xD044
11747:                                         }
11748:                                         case 253:
11749:                                         {
11750:                                            unsigned int Tm;
11751:                                            Tm=(unsigned int)RecBytes[3];
00BF84  229294     MOV #0x2929, W4
00BF86  784214     MOV.B [W4], W4
00BF88  FB8204     ZE W4, W4
00BF8A  989F44     MOV W4, [W14+184]
11752:                                            Tm=Tm<<8;
00BF8C  909A4E     MOV [W14+184], W4
00BF8E  DD2248     SL W4, #8, W4
00BF90  989F44     MOV W4, [W14+184]
11753:                                            Tm=Tm+RecBytes[2];
00BF92  229284     MOV #0x2928, W4
00BF94  784214     MOV.B [W4], W4
00BF96  FB8204     ZE W4, W4
00BF98  909ACE     MOV [W14+184], W5
00BF9A  428204     ADD W5, W4, W4
00BF9C  989F44     MOV W4, [W14+184]
11754:                                            MixedModeLevelOff=Tm;
00BF9E  909A4E     MOV [W14+184], W4
00BFA0  89FFD4     MOV W4, MixedModeLevelOff
11755:                                            OptionsToMass();
00BFA2  070C25     RCALL OptionsToMass
11756:                                            MustTrmFlashMass=1;
00BFA4  8095F4     MOV 0x12BE, W4
00BFA6  A02004     BSET W4, #2
00BFA8  8895F4     MOV W4, 0x12BE
11757:                                            break;
00BFAA  37084C     BRA 0xD044
11758:                                         }
11759:                                         case 254:
11760:                                         {
11761:                                            Cmmd=RecBytes[2];
00BFAC  229284     MOV #0x2928, W4
00BFAE  784F14     MOV.B [W4], [W14]
11762:             
11763:                                                switch (Cmmd)
00BFB0  78429E     MOV.B [W14], W5
00BFB2  FB8205     ZE W5, W4
00BFB4  B92361     MUL.SU W4, #1, W6
00BFB6  EB8200     SETM W4
00BFB8  EB8280     SETM W5
00BFBA  420206     ADD W4, W6, W4
00BFBC  4A8287     ADDC W5, W7, W5
00BFBE  200856     MOV #0x85, W6
00BFC0  200007     MOV #0x0, W7
00BFC2  520F86     SUB W4, W6, [W15]
00BFC4  5A8F87     SUBB W5, W7, [W15]
00BFC6  3E083B     BRA GTU, 0xD03E
00BFC8  010604     BRA W4
00BFCA  370085     BRA 0xC0D6
00BFCC  37008C     BRA 0xC0E6
00BFCE  370093     BRA 0xC0F6
00BFD0  37009D     BRA 0xC10C
00BFD2  3700A4     BRA 0xC11C
00BFD4  3700AB     BRA 0xC12C
00BFD6  3700B2     BRA 0xC13C
00BFD8  3700B9     BRA 0xC14C
00BFDA  3700CC     BRA 0xC174
00BFDC  3700D4     BRA 0xC186
00BFDE  3700DE     BRA 0xC19C
00BFE0  3700E5     BRA 0xC1AC
00BFE2  3700EC     BRA 0xC1BC
00BFE4  3700FC     BRA 0xC1DE
00BFE6  370104     BRA 0xC1F0
00BFE8  37010C     BRA 0xC202
00BFEA  37011A     BRA 0xC220
00BFEC  370121     BRA 0xC230
00BFEE  370129     BRA 0xC242
00BFF0  370136     BRA 0xC25E
00BFF2  370159     BRA 0xC2A6
00BFF4  370163     BRA 0xC2BC
00BFF6  37016A     BRA 0xC2CC
00BFF8  370171     BRA 0xC2DC
00BFFA  370178     BRA 0xC2EC
00BFFC  37019B     BRA 0xC334
00BFFE  3701C5     BRA 0xC38A
00C000  3701EB     BRA 0xC3D8
00C002  3701F2     BRA 0xC3E8
00C004  3701F9     BRA 0xC3F8
00C006  370200     BRA 0xC408
00C008  370207     BRA 0xC418
00C00A  37021A     BRA 0xC440
00C00C  370222     BRA 0xC452
00C00E  37022C     BRA 0xC468
00C010  37022F     BRA 0xC470
00C012  370242     BRA 0xC498
00C014  370248     BRA 0xC4A6
00C016  37024E     BRA 0xC4B4
00C018  370254     BRA 0xC4C2
00C01A  37025B     BRA 0xC4D2
00C01C  370262     BRA 0xC4E2
00C01E  370272     BRA 0xC504
00C020  370277     BRA 0xC510
00C022  37027A     BRA 0xC518
00C024  37027C     BRA 0xC51E
00C026  370287     BRA 0xC536
00C028  370289     BRA 0xC53C
00C02A  370291     BRA 0xC54E
00C02C  3702A0     BRA 0xC56E
00C02E  3702A5     BRA 0xC57A
00C030  3702AA     BRA 0xC586
00C032  3702B2     BRA 0xC598
00C034  3702BA     BRA 0xC5AA
00C036  3702C2     BRA 0xC5BC
00C038  3702CE     BRA 0xC5D6
00C03A  3702DA     BRA 0xC5F0
00C03C  3702E6     BRA 0xC60A
00C03E  370311     BRA 0xC662
00C040  370318     BRA 0xC672
00C042  37031F     BRA 0xC682
00C044  370324     BRA 0xC68E
00C046  370327     BRA 0xC696
00C048  370336     BRA 0xC6B6
00C04A  3707FB     BRA 0xD042
00C04C  370351     BRA 0xC6F0
00C04E  3703A6     BRA 0xC79C
00C050  3703D8     BRA 0xC802
00C052  3703DF     BRA 0xC812
00C054  3703E6     BRA 0xC822
00C056  3703F9     BRA 0xC84A
00C058  37040C     BRA 0xC872
00C05A  370424     BRA 0xC8A4
00C05C  37043F     BRA 0xC8DC
00C05E  370447     BRA 0xC8EE
00C060  370452     BRA 0xC906
00C062  370459     BRA 0xC916
00C064  370466     BRA 0xC932
00C066  370473     BRA 0xC94E
00C068  37047A     BRA 0xC95E
00C06A  370481     BRA 0xC96E
00C06C  370488     BRA 0xC97E
00C06E  37048F     BRA 0xC98E
00C070  37049E     BRA 0xC9AE
00C072  3704B1     BRA 0xC9D6
00C074  3704B8     BRA 0xC9E6
00C076  3704BF     BRA 0xC9F6
00C078  3704E2     BRA 0xCA3E
00C07A  3704E9     BRA 0xCA4E
00C07C  3704F0     BRA 0xCA5E
00C07E  370503     BRA 0xCA86
00C080  37050E     BRA 0xCA9E
00C082  370521     BRA 0xCAC6
00C084  370534     BRA 0xCAEE
00C086  370537     BRA 0xCAF6
00C088  370553     BRA 0xCB30
00C08A  370560     BRA 0xCB4C
00C08C  37056D     BRA 0xCB68
00C08E  37057F     BRA 0xCB8E
00C090  37059F     BRA 0xCBD0
00C092  3705B2     BRA 0xCBF8
00C094  3707D6     BRA 0xD042
00C096  3707D5     BRA 0xD042
00C098  3707D4     BRA 0xD042
00C09A  3705C2     BRA 0xCC20
00C09C  3705DA     BRA 0xCC52
00C09E  3705E4     BRA 0xCC68
00C0A0  3705EE     BRA 0xCC7E
00C0A2  370601     BRA 0xCCA6
00C0A4  370608     BRA 0xCCB6
00C0A6  37060F     BRA 0xCCC6
00C0A8  370622     BRA 0xCCEE
00C0AA  370635     BRA 0xCD16
00C0AC  37063D     BRA 0xCD28
00C0AE  37065B     BRA 0xCD66
00C0B0  37065F     BRA 0xCD70
00C0B2  37067C     BRA 0xCDAC
00C0B4  370683     BRA 0xCDBC
00C0B6  37068A     BRA 0xCDCC
00C0B8  3706AC     BRA 0xCE12
00C0BA  3706CF     BRA 0xCE5A
00C0BC  3706E8     BRA 0xCE8E
00C0BE  3706F2     BRA 0xCEA4
00C0C0  3706FC     BRA 0xCEBA
00C0C2  370706     BRA 0xCED0
00C0C4  37072B     BRA 0xCF1C
00C0C6  370738     BRA 0xCF38
00C0C8  370748     BRA 0xCF5A
00C0CA  370755     BRA 0xCF76
00C0CC  37075C     BRA 0xCF86
00C0CE  370763     BRA 0xCF96
00C0D0  370767     BRA 0xCFA0
00C0D2  37076B     BRA 0xCFAA
00C0D4  37076D     BRA 0xCFB0
11764:                                                {
11765:                                                case 1:
11766:                                                    RotAlfaXRes=1;
00C0D6  809764     MOV StatFlgs2, W4
00C0D8  A04004     BSET W4, #4
00C0DA  889764     MOV W4, StatFlgs2
11767:                                                    OptionsToMass();
00C0DC  070B88     RCALL OptionsToMass
11768:                                                    MustTrmFlashMass=1;
00C0DE  8095F4     MOV 0x12BE, W4
00C0E0  A02004     BSET W4, #2
00C0E2  8895F4     MOV W4, 0x12BE
11769:                                                break;
00C0E4  37077C     BRA 0xCFDE
11770:                                                case 2:
11771:                                                    RotAlfaXRes=0;
00C0E6  809764     MOV StatFlgs2, W4
00C0E8  A14004     BCLR W4, #4
00C0EA  889764     MOV W4, StatFlgs2
11772:                                                    OptionsToMass();
00C0EC  070B80     RCALL OptionsToMass
11773:                                                    MustTrmFlashMass=1;
00C0EE  8095F4     MOV 0x12BE, W4
00C0F0  A02004     BSET W4, #2
00C0F2  8895F4     MOV W4, 0x12BE
11774:                                                break;
00C0F4  370774     BRA 0xCFDE
11775:                                                case 3:
11776:                                                    TurnSignal=1;
00C0F6  809764     MOV StatFlgs2, W4
00C0F8  A05004     BSET W4, #5
00C0FA  889764     MOV W4, StatFlgs2
11777:                                                    ThreePositionSwitch=0;
00C0FC  809744     MOV StatFlgs, W4
00C0FE  A14004     BCLR W4, #4
00C100  889744     MOV W4, StatFlgs
11778:                                                    OptionsToMass();
00C102  070B75     RCALL OptionsToMass
11779:                                                    MustTrmFlashMass=1;
00C104  8095F4     MOV 0x12BE, W4
00C106  A02004     BSET W4, #2
00C108  8895F4     MOV W4, 0x12BE
11780:                                                break;
00C10A  370769     BRA 0xCFDE
11781:                                                case 4:
11782:                                                    LightsTudaSuda=1;
00C10C  809764     MOV StatFlgs2, W4
00C10E  A06004     BSET W4, #6
00C110  889764     MOV W4, StatFlgs2
11783:                                                    OptionsToMass();
00C112  070B6D     RCALL OptionsToMass
11784:                                                    MustTrmFlashMass=1;
00C114  8095F4     MOV 0x12BE, W4
00C116  A02004     BSET W4, #2
00C118  8895F4     MOV W4, 0x12BE
11785:                                                break;
00C11A  370761     BRA 0xCFDE
11786:                                                case 5:
11787:                                                    LightsTudaSuda=0;
00C11C  809764     MOV StatFlgs2, W4
00C11E  A16004     BCLR W4, #6
00C120  889764     MOV W4, StatFlgs2
11788:                                                    OptionsToMass();
00C122  070B65     RCALL OptionsToMass
11789:                                                    MustTrmFlashMass=1;
00C124  8095F4     MOV 0x12BE, W4
00C126  A02004     BSET W4, #2
00C128  8895F4     MOV W4, 0x12BE
11790:                                                break;
00C12A  370759     BRA 0xCFDE
11791:                                                case 6:
11792:                                                    LightsStopMonoDir=1;
00C12C  809764     MOV StatFlgs2, W4
00C12E  A07004     BSET W4, #7
00C130  889764     MOV W4, StatFlgs2
11793:                                                    OptionsToMass();
00C132  070B5D     RCALL OptionsToMass
11794:                                                    MustTrmFlashMass=1;
00C134  8095F4     MOV 0x12BE, W4
00C136  A02004     BSET W4, #2
00C138  8895F4     MOV W4, 0x12BE
11795:                                                break;
00C13A  370751     BRA 0xCFDE
11796:                                                case 7:
11797:                                                    LightsStopMonoDir=0;
00C13C  809764     MOV StatFlgs2, W4
00C13E  A17004     BCLR W4, #7
00C140  889764     MOV W4, StatFlgs2
11798:                                                    OptionsToMass();
00C142  070B55     RCALL OptionsToMass
11799:                                                    MustTrmFlashMass=1;
00C144  8095F4     MOV 0x12BE, W4
00C146  A02004     BSET W4, #2
00C148  8895F4     MOV W4, 0x12BE
11800:                                                break;
00C14A  370749     BRA 0xCFDE
11801:                                                case 8:
11802:                                                {
11803:                                                    unsigned int Tm;
11804:                                                    Tm=(unsigned int)RecBytes[4];
00C14C  2292A4     MOV #0x292A, W4
00C14E  784214     MOV.B [W4], W4
00C150  FB8204     ZE W4, W4
00C152  989F54     MOV W4, [W14+186]
11805:                                                    Tm=Tm<<8;
00C154  909A5E     MOV [W14+186], W4
00C156  DD2248     SL W4, #8, W4
00C158  989F54     MOV W4, [W14+186]
11806:                                                    Tm=Tm+RecBytes[3];
00C15A  229294     MOV #0x2929, W4
00C15C  784214     MOV.B [W4], W4
00C15E  FB8204     ZE W4, W4
00C160  909ADE     MOV [W14+186], W5
00C162  428204     ADD W5, W4, W4
00C164  989F54     MOV W4, [W14+186]
11807:                                                    GyroZFlTurn=Tm;
00C166  909A5E     MOV [W14+186], W4
00C168  898314     MOV W4, GyroZFlTurn
11808:                                                    OptionsToMass();
00C16A  070B41     RCALL OptionsToMass
11809:                                                    MustTrmFlashMass=1;
00C16C  8095F4     MOV 0x12BE, W4
00C16E  A02004     BSET W4, #2
00C170  8895F4     MOV W4, 0x12BE
11810:                                                    break;
00C172  370735     BRA 0xCFDE
11811:                                                }
11812:                                                case 9:
11813:                                                {
11814:                                                    ThrottleTmpChngMem=RecBytes[3];
00C174  229294     MOV #0x2929, W4
00C176  784214     MOV.B [W4], W4
00C178  2329A5     MOV #0x329A, W5
00C17A  784A84     MOV.B W4, [W5]
11815:                                                    OptionsToMass();
00C17C  070B38     RCALL OptionsToMass
11816:                                                    MustTrmFlashMass=1;
00C17E  8095F4     MOV 0x12BE, W4
00C180  A02004     BSET W4, #2
00C182  8895F4     MOV W4, 0x12BE
11817:                                                    break;
00C184  37072C     BRA 0xCFDE
11818:                                                }
11819:                                                case 10:
11820:                                                    SlowStart=1;
00C186  809764     MOV StatFlgs2, W4
00C188  A08004     BSET W4, #8
00C18A  889764     MOV W4, StatFlgs2
11821:                                                    PWM_Mode=0;
00C18C  809764     MOV StatFlgs2, W4
00C18E  A1C004     BCLR W4, #12
00C190  889764     MOV W4, StatFlgs2
11822:                                                    OptionsToMass();
00C192  070B2D     RCALL OptionsToMass
11823:                                                    MustTrmFlashMass=1;
00C194  8095F4     MOV 0x12BE, W4
00C196  A02004     BSET W4, #2
00C198  8895F4     MOV W4, 0x12BE
11824:                                                break;
00C19A  370721     BRA 0xCFDE
11825:                                                case 11:
11826:                                                    SlowStart=0;
00C19C  809764     MOV StatFlgs2, W4
00C19E  A18004     BCLR W4, #8
00C1A0  889764     MOV W4, StatFlgs2
11827:                                                    OptionsToMass();
00C1A2  070B25     RCALL OptionsToMass
11828:                                                    MustTrmFlashMass=1;
00C1A4  8095F4     MOV 0x12BE, W4
00C1A6  A02004     BSET W4, #2
00C1A8  8895F4     MOV W4, 0x12BE
11829:                                                break;
00C1AA  370719     BRA 0xCFDE
11830:                                                case 12:
11831:                                                    AntiPolice=1;
00C1AC  809764     MOV StatFlgs2, W4
00C1AE  A09004     BSET W4, #9
00C1B0  889764     MOV W4, StatFlgs2
11832:                                                    OptionsToMass();
00C1B2  070B1D     RCALL OptionsToMass
11833:                                                    MustTrmFlashMass=1;
00C1B4  8095F4     MOV 0x12BE, W4
00C1B6  A02004     BSET W4, #2
00C1B8  8895F4     MOV W4, 0x12BE
11834:                                                break;
00C1BA  370711     BRA 0xCFDE
11835:                                                case 13:
11836:                                                    if (AntiPolice)
00C1BC  809765     MOV StatFlgs2, W5
00C1BE  202004     MOV #0x200, W4
00C1C0  628204     AND W5, W4, W4
00C1C2  520FE0     SUB W4, #0x0, [W15]
00C1C4  320709     BRA Z, 0xCFD8
11837:                                                     {
11838:                                                    SoundNum=12;
00C1C6  2124B5     MOV #0x124B, W5
00C1C8  B3C0C4     MOV.B #0xC, W4
00C1CA  784A84     MOV.B W4, [W5]
11839:                                                    AntiPolice=0;
00C1CC  809764     MOV StatFlgs2, W4
00C1CE  A19004     BCLR W4, #9
00C1D0  889764     MOV W4, StatFlgs2
11840:                                                    OptionsToMassProfile();
00C1D2  0763BA     RCALL OptionsToMassProfile
11841:                                                    OptionsToMass();
00C1D4  070B0C     RCALL OptionsToMass
11842:                                                    MustTrmFlashMass=1;
00C1D6  8095F4     MOV 0x12BE, W4
00C1D8  A02004     BSET W4, #2
00C1DA  8895F4     MOV W4, 0x12BE
11843:                                                    }
11844:                                                break;
00C1DC  370700     BRA 0xCFDE
00CFD8  000000     NOP
00CFDA  370001     BRA 0xCFDE
11845:                                                case 14:
11846:                                                {
11847:                                                    SlowStrtSpd=RecBytes[3];
00C1DE  229294     MOV #0x2929, W4
00C1E0  784214     MOV.B [W4], W4
00C1E2  240D05     MOV #0x40D0, W5
00C1E4  784A84     MOV.B W4, [W5]
11848:                                                    OptionsToMass();
00C1E6  070B03     RCALL OptionsToMass
11849:                                                    MustTrmFlashMass=1;
00C1E8  8095F4     MOV 0x12BE, W4
00C1EA  A02004     BSET W4, #2
00C1EC  8895F4     MOV W4, 0x12BE
11850:                                                    break;
00C1EE  3706F7     BRA 0xCFDE
11851:                                                }
11852:                                                case 15:
11853:                                                {
11854:                                                    AntiPolicePower=RecBytes[3];
00C1F0  229294     MOV #0x2929, W4
00C1F2  784214     MOV.B [W4], W4
00C1F4  240D15     MOV #0x40D1, W5
00C1F6  784A84     MOV.B W4, [W5]
11855:                                                    OptionsToMass();
00C1F8  070AFA     RCALL OptionsToMass
11856:                                                    MustTrmFlashMass=1;
00C1FA  8095F4     MOV 0x12BE, W4
00C1FC  A02004     BSET W4, #2
00C1FE  8895F4     MOV W4, 0x12BE
11857:                                                    break;
00C200  3706EE     BRA 0xCFDE
11858:                                                }
11859:                                                case 16:
11860:                                                {
11861:                                                    MixedModeSlowSpeedOff=1;
00C202  809764     MOV StatFlgs2, W4
00C204  A0A004     BSET W4, #10
00C206  889764     MOV W4, StatFlgs2
11862:                                                    if (StrongModeMem)
00C208  809764     MOV StatFlgs2, W4
00C20A  620264     AND W4, #0x4, W4
00C20C  520FE0     SUB W4, #0x0, [W15]
00C20E  320003     BRA Z, 0xC216
11863:                                                        StrongMode=1;
00C210  8095F4     MOV 0x12BE, W4
00C212  A0E004     BSET W4, #14
00C214  8895F4     MOV W4, 0x12BE
11864:                                                    OptionsToMass();
00C216  070AEB     RCALL OptionsToMass
11865:                                                    MustTrmFlashMass=1;
00C218  8095F4     MOV 0x12BE, W4
00C21A  A02004     BSET W4, #2
00C21C  8895F4     MOV W4, 0x12BE
11866:                                                    break;
00C21E  3706DF     BRA 0xCFDE
11867:                                                }
11868:                                                case 17:
11869:                                                {
11870:                                                    MixedModeSlowSpeedOff=0;
00C220  809764     MOV StatFlgs2, W4
00C222  A1A004     BCLR W4, #10
00C224  889764     MOV W4, StatFlgs2
11871:                                                    OptionsToMass();
00C226  070AE3     RCALL OptionsToMass
11872:                                                    MustTrmFlashMass=1;
00C228  8095F4     MOV 0x12BE, W4
00C22A  A02004     BSET W4, #2
00C22C  8895F4     MOV W4, 0x12BE
11873:                                                    break;
00C22E  3706D7     BRA 0xCFDE
11874:                                                }
11875:                                                case 18:
11876:                                                {
11877:                                                    MixedModeSlowSpeed=RecBytes[3];
00C230  229294     MOV #0x2929, W4
00C232  784214     MOV.B [W4], W4
00C234  236EA5     MOV #0x36EA, W5
00C236  784A84     MOV.B W4, [W5]
11878:                                                    OptionsToMass();
00C238  070ADA     RCALL OptionsToMass
11879:                                                    MustTrmFlashMass=1;
00C23A  8095F4     MOV 0x12BE, W4
00C23C  A02004     BSET W4, #2
00C23E  8895F4     MOV W4, 0x12BE
11880:                                                    break;
00C240  3706CE     BRA 0xCFDE
11881:                                                }
11882:             
11883:                                                case 19:
11884:                                                {
11885:                                                     StrongModeMem=0;
00C242  809764     MOV StatFlgs2, W4
00C244  A12004     BCLR W4, #2
00C246  889764     MOV W4, StatFlgs2
11886:                                                     MixedMode=0;
00C248  809744     MOV StatFlgs, W4
00C24A  A1B004     BCLR W4, #11
00C24C  889744     MOV W4, StatFlgs
11887:                                                     MixedMode2=1;
00C24E  809764     MOV StatFlgs2, W4
00C250  A0B004     BSET W4, #11
00C252  889764     MOV W4, StatFlgs2
11888:                                                     OptionsToMass();
00C254  070ACC     RCALL OptionsToMass
11889:                                                     MustTrmFlashMass=1;
00C256  8095F4     MOV 0x12BE, W4
00C258  A02004     BSET W4, #2
00C25A  8895F4     MOV W4, 0x12BE
11890:                                                     break;
00C25C  3706C0     BRA 0xCFDE
11891:                                                 }
11892:                                                
11893:                                                case 20:
11894:                                                {
11895:                                                     int Tm;
11896:                                                     Tm=(int)RecBytes[4];
00C25E  2292A4     MOV #0x292A, W4
00C260  784214     MOV.B [W4], W4
00C262  FB8204     ZE W4, W4
00C264  989F64     MOV W4, [W14+188]
11897:                                                     Tm=Tm<<8;
00C266  909A6E     MOV [W14+188], W4
00C268  DD2248     SL W4, #8, W4
00C26A  989F64     MOV W4, [W14+188]
11898:                                                     Tm=Tm+RecBytes[3];
00C26C  229294     MOV #0x2929, W4
00C26E  784214     MOV.B [W4], W4
00C270  FB8204     ZE W4, W4
00C272  909AEE     MOV [W14+188], W5
00C274  428204     ADD W5, W4, W4
00C276  989F64     MOV W4, [W14+188]
11899:                                                     Ki_PWM_Mode=Tm;
00C278  909A6E     MOV [W14+188], W4
00C27A  DEA2CF     ASR W4, #15, W5
00C27C  BE0004     MOV.D W4, W0
00C27E  02257C     CALL ___floatsisf
00C280  000000     NOP
00C282  BE0200     MOV.D W0, W4
00C284  8982A4     MOV W4, Ki_PWM_Mode
00C286  8982B5     MOV W5, 0x3056
11900:                                                     Ki_PWM_Mode=Ki_PWM_Mode/10000;
00C288  8182A4     MOV Ki_PWM_Mode, W4
00C28A  8182B5     MOV 0x3056, W5
00C28C  240002     MOV #0x4000, W2
00C28E  2461C3     MOV #0x461C, W3
00C290  BE0004     MOV.D W4, W0
00C292  02245A     CALL ___divsf3
00C294  000000     NOP
00C296  BE0200     MOV.D W0, W4
00C298  8982A4     MOV W4, Ki_PWM_Mode
00C29A  8982B5     MOV W5, 0x3056
11901:                                                     OptionsToMass();
00C29C  070AA8     RCALL OptionsToMass
11902:                                                     MustTrmFlashMass=1;
00C29E  8095F4     MOV 0x12BE, W4
00C2A0  A02004     BSET W4, #2
00C2A2  8895F4     MOV W4, 0x12BE
11903:                                                     break;
00C2A4  37069C     BRA 0xCFDE
11904:                                                }              
11905:                                                
11906:                                                case 21:
11907:                                                {
11908:                                                    PWM_Mode=1;
00C2A6  809764     MOV StatFlgs2, W4
00C2A8  A0C004     BSET W4, #12
00C2AA  889764     MOV W4, StatFlgs2
11909:                                                    SlowStart=0;
00C2AC  809764     MOV StatFlgs2, W4
00C2AE  A18004     BCLR W4, #8
00C2B0  889764     MOV W4, StatFlgs2
11910:                                                    OptionsToMass();
00C2B2  070A9D     RCALL OptionsToMass
11911:                                                    MustTrmFlashMass=1;
00C2B4  8095F4     MOV 0x12BE, W4
00C2B6  A02004     BSET W4, #2
00C2B8  8895F4     MOV W4, 0x12BE
11912:                                                    break;
00C2BA  370691     BRA 0xCFDE
11913:                                                }
11914:                                                case 22:
11915:                                                {
11916:                                                    PWM_Mode=0;
00C2BC  809764     MOV StatFlgs2, W4
00C2BE  A1C004     BCLR W4, #12
00C2C0  889764     MOV W4, StatFlgs2
11917:                                                    OptionsToMass();
00C2C2  070A95     RCALL OptionsToMass
11918:                                                    MustTrmFlashMass=1;
00C2C4  8095F4     MOV 0x12BE, W4
00C2C6  A02004     BSET W4, #2
00C2C8  8895F4     MOV W4, 0x12BE
11919:                                                    break;
00C2CA  370689     BRA 0xCFDE
11920:                                                }
11921:                                                
11922:                                                case 23:
11923:                                                {
11924:                                                    PWM_Mode_ZeroThrottle=1;
00C2CC  809764     MOV StatFlgs2, W4
00C2CE  A0D004     BSET W4, #13
00C2D0  889764     MOV W4, StatFlgs2
11925:                                                    OptionsToMass();
00C2D2  070A8D     RCALL OptionsToMass
11926:                                                    MustTrmFlashMass=1;
00C2D4  8095F4     MOV 0x12BE, W4
00C2D6  A02004     BSET W4, #2
00C2D8  8895F4     MOV W4, 0x12BE
11927:                                                    break;
00C2DA  370681     BRA 0xCFDE
11928:                                                }
11929:                                                
11930:                                                case 24:
11931:                                                {
11932:                                                    PWM_Mode_ZeroThrottle=0;
00C2DC  809764     MOV StatFlgs2, W4
00C2DE  A1D004     BCLR W4, #13
00C2E0  889764     MOV W4, StatFlgs2
11933:                                                    OptionsToMass();
00C2E2  070A85     RCALL OptionsToMass
11934:                                                    MustTrmFlashMass=1;
00C2E4  8095F4     MOV 0x12BE, W4
00C2E6  A02004     BSET W4, #2
00C2E8  8895F4     MOV W4, 0x12BE
11935:                                                    break;
00C2EA  370679     BRA 0xCFDE
11936:                                                }
11937:                                                
11938:                                                case 25:
11939:                                                {
11940:                                                     int Tm;
11941:                                                     Tm=(int)RecBytes[4];
00C2EC  2292A4     MOV #0x292A, W4
00C2EE  784214     MOV.B [W4], W4
00C2F0  FB8204     ZE W4, W4
00C2F2  989F74     MOV W4, [W14+190]
11942:                                                     Tm=Tm<<8;
00C2F4  909A7E     MOV [W14+190], W4
00C2F6  DD2248     SL W4, #8, W4
00C2F8  989F74     MOV W4, [W14+190]
11943:                                                     Tm=Tm+RecBytes[3];
00C2FA  229294     MOV #0x2929, W4
00C2FC  784214     MOV.B [W4], W4
00C2FE  FB8204     ZE W4, W4
00C300  909AFE     MOV [W14+190], W5
00C302  428204     ADD W5, W4, W4
00C304  989F74     MOV W4, [W14+190]
11944:                                                     Kp_PWM_Mode=Tm;
00C306  909A7E     MOV [W14+190], W4
00C308  DEA2CF     ASR W4, #15, W5
00C30A  BE0004     MOV.D W4, W0
00C30C  02257C     CALL ___floatsisf
00C30E  000000     NOP
00C310  BE0200     MOV.D W0, W4
00C312  89B764     MOV W4, Kp_PWM_Mode
00C314  89B775     MOV W5, 0x36EE
11945:                                                     Kp_PWM_Mode=Kp_PWM_Mode/100;
00C316  81B764     MOV Kp_PWM_Mode, W4
00C318  81B775     MOV 0x36EE, W5
00C31A  200002     MOV #0x0, W2
00C31C  242C83     MOV #0x42C8, W3
00C31E  BE0004     MOV.D W4, W0
00C320  02245A     CALL ___divsf3
00C322  000000     NOP
00C324  BE0200     MOV.D W0, W4
00C326  89B764     MOV W4, Kp_PWM_Mode
00C328  89B775     MOV W5, 0x36EE
11946:                                                     OptionsToMass();
00C32A  070A61     RCALL OptionsToMass
11947:                                                     MustTrmFlashMass=1;
00C32C  8095F4     MOV 0x12BE, W4
00C32E  A02004     BSET W4, #2
00C330  8895F4     MOV W4, 0x12BE
11948:                                                     break;
00C332  370655     BRA 0xCFDE
11949:                                                }              
11950:                                                
11951:                                                case 26:
11952:                                                {
11953:                                                     
11954:                                                   if ((!Sensorless)&&VectorMem&&Vector)
00C334  809755     MOV StatFlgs1, W5
00C336  200204     MOV #0x20, W4
00C338  628204     AND W5, W4, W4
00C33A  520FE0     SUB W4, #0x0, [W15]
00C33C  3A0021     BRA NZ, 0xC380
00C33E  809755     MOV StatFlgs1, W5
00C340  204004     MOV #0x400, W4
00C342  628204     AND W5, W4, W4
00C344  520FE0     SUB W4, #0x0, [W15]
00C346  32001C     BRA Z, 0xC380
00C348  809684     MOV Flgs5, W4
00C34A  620270     AND W4, #0x10, W4
00C34C  520FE0     SUB W4, #0x0, [W15]
00C34E  320018     BRA Z, 0xC380
11955:                                             {
11956:                                             StrongMode=1;
00C350  8095F4     MOV 0x12BE, W4
00C352  A0E004     BSET W4, #14
00C354  8895F4     MOV W4, 0x12BE
11957:                                             PrevStrongMode=1;
00C356  809694     MOV 0x12D2, W4
00C358  A0A004     BSET W4, #10
00C35A  889694     MOV W4, 0x12D2
11958:                                             SIN_MIDDLE=1;
00C35C  809764     MOV StatFlgs2, W4
00C35E  A0E004     BSET W4, #14
00C360  889764     MOV W4, StatFlgs2
11959:                                             StrongModeMem=1;
00C362  809764     MOV StatFlgs2, W4
00C364  A02004     BSET W4, #2
00C366  889764     MOV W4, StatFlgs2
11960:                                             MixedMode=0;
00C368  809744     MOV StatFlgs, W4
00C36A  A1B004     BCLR W4, #11
00C36C  889744     MOV W4, StatFlgs
11961:                                             MixedMode2=0;
00C36E  809764     MOV StatFlgs2, W4
00C370  A1B004     BCLR W4, #11
00C372  889764     MOV W4, StatFlgs2
11962:                                             RdSensors();
00C374  0756A0     RCALL RdSensors
11963:                                             Amplitude1=PDC1;
00C376  806134     MOV PDC1, W4
00C378  200005     MOV #0x0, W5
00C37A  889A44     MOV W4, Amplitude1
00C37C  889A55     MOV W5, 0x134A
11964:                                             VectorInit();
00C37E  073FCC     RCALL VectorInit
11965:                                             }
11966:             
11967:                                                     OptionsToMass();
00C380  070A36     RCALL OptionsToMass
11968:                                                     MustTrmFlashMass=1;
00C382  8095F4     MOV 0x12BE, W4
00C384  A02004     BSET W4, #2
00C386  8895F4     MOV W4, 0x12BE
11969:                                                     break;
00C388  37062A     BRA 0xCFDE
11970:                                                }              
11971:                                                
11972:                                                case 27:
11973:                                                {
11974:                                                     SIN_MIDDLE=0;
00C38A  809764     MOV StatFlgs2, W4
00C38C  A1E004     BCLR W4, #14
00C38E  889764     MOV W4, StatFlgs2
11975:                                                   if ((!Sensorless)&&VectorMem&&Vector)
00C390  809755     MOV StatFlgs1, W5
00C392  200204     MOV #0x20, W4
00C394  628204     AND W5, W4, W4
00C396  520FE0     SUB W4, #0x0, [W15]
00C398  3A001A     BRA NZ, 0xC3CE
00C39A  809755     MOV StatFlgs1, W5
00C39C  204004     MOV #0x400, W4
00C39E  628204     AND W5, W4, W4
00C3A0  520FE0     SUB W4, #0x0, [W15]
00C3A2  320015     BRA Z, 0xC3CE
00C3A4  809684     MOV Flgs5, W4
00C3A6  620270     AND W4, #0x10, W4
00C3A8  520FE0     SUB W4, #0x0, [W15]
00C3AA  320011     BRA Z, 0xC3CE
11976:                                             {
11977:                                                       if (StrongModeMem)
00C3AC  809764     MOV StatFlgs2, W4
00C3AE  620264     AND W4, #0x4, W4
00C3B0  520FE0     SUB W4, #0x0, [W15]
00C3B2  320004     BRA Z, 0xC3BC
11978:                                                         StrongMode=1;
00C3B4  8095F4     MOV 0x12BE, W4
00C3B6  A0E004     BSET W4, #14
00C3B8  8895F4     MOV W4, 0x12BE
00C3BA  370003     BRA 0xC3C2
11979:                                                       else
11980:                                                         StrongMode=0;
00C3BC  8095F4     MOV 0x12BE, W4
00C3BE  A1E004     BCLR W4, #14
00C3C0  8895F4     MOV W4, 0x12BE
11981:                                                       
11982:                                             RdSensors();
00C3C2  075679     RCALL RdSensors
11983:                                             Amplitude1=PDC1;
00C3C4  806134     MOV PDC1, W4
00C3C6  200005     MOV #0x0, W5
00C3C8  889A44     MOV W4, Amplitude1
00C3CA  889A55     MOV W5, 0x134A
11984:                                             VectorInit();
00C3CC  073FA5     RCALL VectorInit
11985:                                             }
11986:                                                     OptionsToMass();
00C3CE  070A0F     RCALL OptionsToMass
11987:                                                     MustTrmFlashMass=1;
00C3D0  8095F4     MOV 0x12BE, W4
00C3D2  A02004     BSET W4, #2
00C3D4  8895F4     MOV W4, 0x12BE
11988:                                                     break;
00C3D6  370603     BRA 0xCFDE
11989:                                                }              
11990:                                                case 28:
11991:                                                {
11992:                                                InvSin=1;
00C3D8  809764     MOV StatFlgs2, W4
00C3DA  A0F004     BSET W4, #15
00C3DC  889764     MOV W4, StatFlgs2
11993:                                                     OptionsToMass();
00C3DE  070A07     RCALL OptionsToMass
11994:                                                     MustTrmFlashMass=1;
00C3E0  8095F4     MOV 0x12BE, W4
00C3E2  A02004     BSET W4, #2
00C3E4  8895F4     MOV W4, 0x12BE
11995:                                                     break;
00C3E6  3705FB     BRA 0xCFDE
11996:                                                }
11997:                                                case 29:
11998:                                                {
11999:                                                InvSin=0;
00C3E8  809764     MOV StatFlgs2, W4
00C3EA  A1F004     BCLR W4, #15
00C3EC  889764     MOV W4, StatFlgs2
12000:                                                     OptionsToMass();
00C3EE  0709FF     RCALL OptionsToMass
12001:                                                     MustTrmFlashMass=1;
00C3F0  8095F4     MOV 0x12BE, W4
00C3F2  A02004     BSET W4, #2
00C3F4  8895F4     MOV W4, 0x12BE
12002:                                                     break;
00C3F6  3705F3     BRA 0xCFDE
12003:                                                }
12004:                                                case 30:
12005:                                                {
12006:                                                CurrLimitSound=1;
00C3F8  809754     MOV StatFlgs1, W4
00C3FA  A0B004     BSET W4, #11
00C3FC  889754     MOV W4, StatFlgs1
12007:                                                     OptionsToMass();
00C3FE  0709F7     RCALL OptionsToMass
12008:                                                     MustTrmFlashMass=1;
00C400  8095F4     MOV 0x12BE, W4
00C402  A02004     BSET W4, #2
00C404  8895F4     MOV W4, 0x12BE
12009:                                                     break;
00C406  3705EB     BRA 0xCFDE
12010:                                                }
12011:                                                case 31:
12012:                                                {
12013:                                                CurrLimitSound=0;
00C408  809754     MOV StatFlgs1, W4
00C40A  A1B004     BCLR W4, #11
00C40C  889754     MOV W4, StatFlgs1
12014:                                                     OptionsToMass();
00C40E  0709EF     RCALL OptionsToMass
12015:                                                     MustTrmFlashMass=1;
00C410  8095F4     MOV 0x12BE, W4
00C412  A02004     BSET W4, #2
00C414  8895F4     MOV W4, 0x12BE
12016:                                                     break;
00C416  3705E3     BRA 0xCFDE
12017:                                                }
12018:                                                case 32:
12019:                                                {
12020:                                                    //ChangeCurrStateMachine=0;
12021:                                                     int Tm;
12022:                                                     Tm=(int)RecBytes[4];
00C418  2292A4     MOV #0x292A, W4
00C41A  784214     MOV.B [W4], W4
00C41C  FB8204     ZE W4, W4
00C41E  98A704     MOV W4, [W14+192]
12023:                                                     Tm=Tm<<8;
00C420  90A20E     MOV [W14+192], W4
00C422  DD2248     SL W4, #8, W4
00C424  98A704     MOV W4, [W14+192]
12024:                                                     Tm=Tm+RecBytes[3];
00C426  229294     MOV #0x2929, W4
00C428  784214     MOV.B [W4], W4
00C42A  FB8204     ZE W4, W4
00C42C  90A28E     MOV [W14+192], W5
00C42E  428204     ADD W5, W4, W4
00C430  98A704     MOV W4, [W14+192]
12025:                                                     CurrPhaseLimitWork=Tm;
00C432  90A20E     MOV [W14+192], W4
00C434  89F4D4     MOV W4, CurrPhaseLimitWork
12026:                                            
12027:                                                    OptionsToMass();
00C436  0709DB     RCALL OptionsToMass
12028:                                                    MustTrmFlashMass=1;
00C438  8095F4     MOV 0x12BE, W4
00C43A  A02004     BSET W4, #2
00C43C  8895F4     MOV W4, 0x12BE
12029:                                                    break;
00C43E  3705CF     BRA 0xCFDE
12030:                                                }
12031:                                                
12032:                                                case 33:
12033:                                                {
12034:                                                    CurrSensor=RecBytes[3];
00C440  229294     MOV #0x2929, W4
00C442  784214     MOV.B [W4], W4
00C444  230C75     MOV #0x30C7, W5
00C446  784A84     MOV.B W4, [W5]
12035:                                                    OptionsToMass();
00C448  0709D2     RCALL OptionsToMass
12036:                                                    MustTrmFlashMass=1;
00C44A  8095F4     MOV 0x12BE, W4
00C44C  A02004     BSET W4, #2
00C44E  8895F4     MOV W4, 0x12BE
12037:                                                    break;
00C450  3705C6     BRA 0xCFDE
12038:                                                }
12039:                                                
12040:                                                case 34:
12041:                                                {
12042:                                                    CurrDecrease=1;
00C452  8096A4     MOV Flgs6, W4
00C454  A04004     BSET W4, #4
00C456  8896A4     MOV W4, Flgs6
12043:                                                    CurrUst=300;
00C458  2012C4     MOV #0x12C, W4
00C45A  89F494     MOV W4, CurrUst
12044:                                                    CurrPhaseLimit=600;
00C45C  202584     MOV #0x258, W4
00C45E  89F4C4     MOV W4, CurrPhaseLimit
12045:                                                    CurrLimit=0;
00C460  EB0200     CLR W4
00C462  88C194     MOV W4, CurrLimit
12046:                                                    ChangeCVR();
00C464  071AC2     RCALL ChangeCVR
12047:                                                    break;
00C466  3705BB     BRA 0xCFDE
12048:                                                }
12049:                                                
12050:                                                case 35:
12051:                                                {
12052:                                                    CurrDecrease=0;
00C468  8096A4     MOV Flgs6, W4
00C46A  A14004     BCLR W4, #4
00C46C  8896A4     MOV W4, Flgs6
12053:                                                    break;
00C46E  3705B7     BRA 0xCFDE
12054:                                                }
12055:                                                
12056:                                                case 36:
12057:                                                {
12058:                                                    //ChangeCurrStateMachine=0;
12059:                                                     int Tm;
12060:                                                     Tm=(int)RecBytes[4];
00C470  2292A4     MOV #0x292A, W4
00C472  784214     MOV.B [W4], W4
00C474  FB8204     ZE W4, W4
00C476  98A714     MOV W4, [W14+194]
12061:                                                     Tm=Tm<<8;
00C478  90A21E     MOV [W14+194], W4
00C47A  DD2248     SL W4, #8, W4
00C47C  98A714     MOV W4, [W14+194]
12062:                                                     Tm=Tm+RecBytes[3];
00C47E  229294     MOV #0x2929, W4
00C480  784214     MOV.B [W4], W4
00C482  FB8204     ZE W4, W4
00C484  90A29E     MOV [W14+194], W5
00C486  428204     ADD W5, W4, W4
00C488  98A714     MOV W4, [W14+194]
12063:                                                     Spd0TimerConst=Tm;
00C48A  90A21E     MOV [W14+194], W4
00C48C  8A1484     MOV W4, Spd0TimerConst
12064:                                            
12065:                                                    OptionsToMass();
00C48E  0709AF     RCALL OptionsToMass
12066:                                                    MustTrmFlashMass=1;
00C490  8095F4     MOV 0x12BE, W4
00C492  A02004     BSET W4, #2
00C494  8895F4     MOV W4, 0x12BE
12067:                                                    break;
00C496  3705A3     BRA 0xCFDE
12068:                                                }
12069:             
12070:                                                case 37:
12071:                                                {
12072:                                                    FillCurrentMass=1;
00C498  8096A4     MOV Flgs6, W4
00C49A  A05004     BSET W4, #5
00C49C  8896A4     MOV W4, Flgs6
12073:                                                    FillSinMass=0;                            
00C49E  8096A4     MOV Flgs6, W4
00C4A0  A16004     BCLR W4, #6
00C4A2  8896A4     MOV W4, Flgs6
12074:                                                    break;
00C4A4  37059C     BRA 0xCFDE
12075:                                                }
12076:                                                case 38:
12077:                                                {
12078:                                                    FillCurrentMass=0;
00C4A6  8096A4     MOV Flgs6, W4
00C4A8  A15004     BCLR W4, #5
00C4AA  8896A4     MOV W4, Flgs6
12079:                                                    FillSinMass=1;                            
00C4AC  8096A4     MOV Flgs6, W4
00C4AE  A06004     BSET W4, #6
00C4B0  8896A4     MOV W4, Flgs6
12080:                                                    break;
00C4B2  370595     BRA 0xCFDE
12081:                                                }
12082:                                                    case 39:
12083:                                                {
12084:                                                    FillCurrentMass=0;
00C4B4  8096A4     MOV Flgs6, W4
00C4B6  A15004     BCLR W4, #5
00C4B8  8896A4     MOV W4, Flgs6
12085:                                                    FillSinMass=0;                            
00C4BA  8096A4     MOV Flgs6, W4
00C4BC  A16004     BCLR W4, #6
00C4BE  8896A4     MOV W4, Flgs6
12086:                                                    break;
00C4C0  37058E     BRA 0xCFDE
12087:                                                }
12088:             
12089:                                                    case 40:
12090:                                                {
12091:                                                    CW_CCW_AnyProfile=1;
00C4C2  809774     MOV StatFlgs3, W4
00C4C4  A00004     BSET W4, #0
00C4C6  889774     MOV W4, StatFlgs3
12092:                                                    OptionsToMass();
00C4C8  070992     RCALL OptionsToMass
12093:                                                    MustTrmFlashMass=1;
00C4CA  8095F4     MOV 0x12BE, W4
00C4CC  A02004     BSET W4, #2
00C4CE  8895F4     MOV W4, 0x12BE
12094:                                                    break;
00C4D0  370586     BRA 0xCFDE
12095:                                                }
12096:                                                    case 41:
12097:                                                {
12098:                                                    CW_CCW_AnyProfile=0;
00C4D2  809774     MOV StatFlgs3, W4
00C4D4  A10004     BCLR W4, #0
00C4D6  889774     MOV W4, StatFlgs3
12099:                                                    OptionsToMass();
00C4D8  07098A     RCALL OptionsToMass
12100:                                                    MustTrmFlashMass=1;
00C4DA  8095F4     MOV 0x12BE, W4
00C4DC  A02004     BSET W4, #2
00C4DE  8895F4     MOV W4, 0x12BE
12101:                                                    break;
00C4E0  37057E     BRA 0xCFDE
12102:                                                }
12103:                                                    case 42:
12104:                                                {
12105:                                                    BuzzerOff=!BuzzerOff;
00C4E2  8096A5     MOV Flgs6, W5
00C4E4  200804     MOV #0x80, W4
00C4E6  628204     AND W5, W4, W4
00C4E8  A7F004     BTSC W4, #15
00C4EA  EA0204     NEG W4, W4
00C4EC  E90204     DEC W4, W4
00C4EE  DE224F     LSR W4, #15, W4
00C4F0  784204     MOV.B W4, W4
00C4F2  FB8204     ZE W4, W4
00C4F4  620261     AND W4, #0x1, W4
00C4F6  DD2247     SL W4, #7, W4
00C4F8  8096A6     MOV Flgs6, W6
00C4FA  2FF7F5     MOV #0xFF7F, W5
00C4FC  630285     AND W6, W5, W5
00C4FE  728204     IOR W5, W4, W4
00C500  8896A4     MOV W4, Flgs6
12106:                                                    break;
00C502  37056D     BRA 0xCFDE
12107:                                                }
12108:                                                     case 43:
12109:                                                {
12110:                                                    SoundNum=11;
00C504  2124B5     MOV #0x124B, W5
00C506  B3C0B4     MOV.B #0xB, W4
00C508  784A84     MOV.B W4, [W5]
12111:                                                    AutoNastroykaState=1;
00C50A  200014     MOV #0x1, W4
00C50C  89BEF4     MOV W4, AutoNastroykaState
12112:                                                    break;
00C50E  370567     BRA 0xCFDE
12113:                                                }
12114:                                                     case 44:
12115:                                                {
12116:                                                    AutoNastroyka_ConfirmMSG=1;
00C510  8096A4     MOV Flgs6, W4
00C512  A0F004     BSET W4, #15
00C514  8896A4     MOV W4, Flgs6
12117:                                                    break;
00C516  370563     BRA 0xCFDE
12118:                                                }
12119:                                                     case 45:
12120:                                                {
12121:                                                    AutoNastroykaState=29;
00C518  2001D4     MOV #0x1D, W4
00C51A  89BEF4     MOV W4, AutoNastroykaState
12122:                                                    break;
00C51C  370560     BRA 0xCFDE
12123:                                                }
12124:                                                     case 46:
12125:                                                {
12126:                                                    AutoNastroykaState=30;
00C51E  2001E4     MOV #0x1E, W4
00C520  89BEF4     MOV W4, AutoNastroykaState
12127:                                                    SensorThresholdDn=SensorThresholdDnTmp;
00C522  8094E4     MOV SensorThresholdDnTmp, W4
00C524  889474     MOV W4, SensorThresholdDn
12128:                                                    AutoNastroykaCMFStart(30);
00C526  2001E0     MOV #0x1E, W0
00C528  02CD30     CALL AutoNastroykaCMFStart
00C52A  000001     NOP
12129:                                                    OptionsToMass();
00C52C  070960     RCALL OptionsToMass
12130:                                                    MustTrmFlashMass=1;
00C52E  8095F4     MOV 0x12BE, W4
00C530  A02004     BSET W4, #2
00C532  8895F4     MOV W4, 0x12BE
12131:                                                    break;
00C534  370554     BRA 0xCFDE
12132:                                                }
12133:                                                     case 47:
12134:                                                {
12135:                                                    AutoNastroykaState=31;
00C536  2001F4     MOV #0x1F, W4
00C538  89BEF4     MOV W4, AutoNastroykaState
12136:                                                    break;
00C53A  370551     BRA 0xCFDE
12137:                                                }
12138:                                                     case 48:
12139:                                                {
12140:                                                    AutoNastroykaState=32;
00C53C  200204     MOV #0x20, W4
00C53E  89BEF4     MOV W4, AutoNastroykaState
12141:                                                    BreakThresholdDn=BreakThresholdDnTmp;
00C540  8094D4     MOV BreakThresholdDnTmp, W4
00C542  8894C4     MOV W4, BreakThresholdDn
12142:                                                    OptionsToMass();
00C544  070954     RCALL OptionsToMass
12143:                                                    MustTrmFlashMass=1;
00C546  8095F4     MOV 0x12BE, W4
00C548  A02004     BSET W4, #2
00C54A  8895F4     MOV W4, 0x12BE
12144:                                                    break;
00C54C  370548     BRA 0xCFDE
12145:                                                }
12146:                                                     case 49:
12147:                                                {
12148:                                                    AutoNastroykaState=0;
00C54E  EB0200     CLR W4
00C550  89BEF4     MOV W4, AutoNastroykaState
12149:                                                    SoundNum=12;
00C552  2124B5     MOV #0x124B, W5
00C554  B3C0C4     MOV.B #0xC, W4
00C556  784A84     MOV.B W4, [W5]
12150:                                                    MustTrmFlashMass=1;
00C558  8095F4     MOV 0x12BE, W4
00C55A  A02004     BSET W4, #2
00C55C  8895F4     MOV W4, 0x12BE
12151:                                                    
12152:                                                    if (ThrottleTmp>100)
00C55E  81FF35     MOV ThrottleTmp, W5
00C560  200644     MOV #0x64, W4
00C562  528F84     SUB W5, W4, [W15]
00C564  34053B     BRA LE, 0xCFDC
12153:                                                         CriticalError=CRERR_THROTTLE_AFTER_TUNING;
00C566  214075     MOV #0x1407, W5
00C568  B3C094     MOV.B #0x9, W4
00C56A  784A84     MOV.B W4, [W5]
12154:             
12155:                                                    
12156:                                                    break;
00C56C  370538     BRA 0xCFDE
00CFDC  000000     NOP
12157:                                                }
12158:                                                     case 50:
12159:                                                    AutoNastroykaState=0;
00C56E  EB0200     CLR W4
00C570  89BEF4     MOV W4, AutoNastroykaState
12160:                                                    SoundNum=10;
00C572  2124B5     MOV #0x124B, W5
00C574  B3C0A4     MOV.B #0xA, W4
00C576  784A84     MOV.B W4, [W5]
12161:                                                    break;
00C578  370532     BRA 0xCFDE
12162:                                                
12163:                                                     case 51:
12164:                                                    AutoNastroykaState=18;
00C57A  200124     MOV #0x12, W4
00C57C  89BEF4     MOV W4, AutoNastroykaState
12165:                                                    SoundNum=12;
00C57E  2124B5     MOV #0x124B, W5
00C580  B3C0C4     MOV.B #0xC, W4
00C582  784A84     MOV.B W4, [W5]
12166:                                                    break;
00C584  37052C     BRA 0xCFDE
12167:             
12168:                                                 case 52:
12169:                                                     HallDelay1MaxSPD_F=RecBytes[3];
00C586  229294     MOV #0x2929, W4
00C588  784214     MOV.B [W4], W4
00C58A  237E35     MOV #0x37E3, W5
00C58C  784A84     MOV.B W4, [W5]
12170:                                                     OptionsToMass();
00C58E  07092F     RCALL OptionsToMass
12171:                                                     MustTrmFlashMass=1;                                       
00C590  8095F4     MOV 0x12BE, W4
00C592  A02004     BSET W4, #2
00C594  8895F4     MOV W4, 0x12BE
12172:                                                 break;
00C596  370523     BRA 0xCFDE
12173:                                                 case 53:
12174:                                                     HallDelay1MaxSPD_B=RecBytes[3];
00C598  229294     MOV #0x2929, W4
00C59A  784214     MOV.B [W4], W4
00C59C  237E45     MOV #0x37E4, W5
00C59E  784A84     MOV.B W4, [W5]
12175:                                                     OptionsToMass();
00C5A0  070926     RCALL OptionsToMass
12176:                                                     MustTrmFlashMass=1;                                       
00C5A2  8095F4     MOV 0x12BE, W4
00C5A4  A02004     BSET W4, #2
00C5A6  8895F4     MOV W4, 0x12BE
12177:                                                 break;
00C5A8  37051A     BRA 0xCFDE
12178:                                                    
12179:                                                 case 54:
12180:                                                     HallDelayMaxSPD=RecBytes[3];
00C5AA  229294     MOV #0x2929, W4
00C5AC  784214     MOV.B [W4], W4
00C5AE  237E55     MOV #0x37E5, W5
00C5B0  784A84     MOV.B W4, [W5]
12181:                                                     OptionsToMass();
00C5B2  07091D     RCALL OptionsToMass
12182:                                                     MustTrmFlashMass=1;                                       
00C5B4  8095F4     MOV 0x12BE, W4
00C5B6  A02004     BSET W4, #2
00C5B8  8895F4     MOV W4, 0x12BE
12183:                                                 break;
00C5BA  370511     BRA 0xCFDE
12184:                                                    
12185:                                                 case 55:
12186:                                                     ShortCircuit=1;
00C5BC  809774     MOV StatFlgs3, W4
00C5BE  A01004     BSET W4, #1
00C5C0  889774     MOV W4, StatFlgs3
12187:                                                     Mgnovenniy=0;
00C5C2  809774     MOV StatFlgs3, W4
00C5C4  A12004     BCLR W4, #2
00C5C6  889774     MOV W4, StatFlgs3
12188:                                                     VectorInit();
00C5C8  073EA7     RCALL VectorInit
12189:                                                     Comparator2_Init();
00C5CA  071A9A     RCALL Comparator2_Init
12190:                                                     OptionsToMass();
00C5CC  070910     RCALL OptionsToMass
12191:                                                     MustTrmFlashMass=1;                                       
00C5CE  8095F4     MOV 0x12BE, W4
00C5D0  A02004     BSET W4, #2
00C5D2  8895F4     MOV W4, 0x12BE
12192:                                                 break;
00C5D4  370504     BRA 0xCFDE
12193:                                                    
12194:                                                 case 56:
12195:                                                     ShortCircuit=0;
00C5D6  809774     MOV StatFlgs3, W4
00C5D8  A11004     BCLR W4, #1
00C5DA  889774     MOV W4, StatFlgs3
12196:                                                     Mgnovenniy=1;
00C5DC  809774     MOV StatFlgs3, W4
00C5DE  A02004     BSET W4, #2
00C5E0  889774     MOV W4, StatFlgs3
12197:                                                     VectorInit();
00C5E2  073E9A     RCALL VectorInit
12198:                                                     Comparator2_Init();
00C5E4  071A8D     RCALL Comparator2_Init
12199:                                                     OptionsToMass();
00C5E6  070903     RCALL OptionsToMass
12200:                                                     MustTrmFlashMass=1;                                       
00C5E8  8095F4     MOV 0x12BE, W4
00C5EA  A02004     BSET W4, #2
00C5EC  8895F4     MOV W4, 0x12BE
12201:                                                 break;
00C5EE  3704F7     BRA 0xCFDE
12202:                                                    
12203:                                                 case 57:
12204:                                                     ShortCircuit=0;
00C5F0  809774     MOV StatFlgs3, W4
00C5F2  A11004     BCLR W4, #1
00C5F4  889774     MOV W4, StatFlgs3
12205:                                                     Mgnovenniy=0;
00C5F6  809774     MOV StatFlgs3, W4
00C5F8  A12004     BCLR W4, #2
00C5FA  889774     MOV W4, StatFlgs3
12206:                                                     VectorInit();
00C5FC  073E8D     RCALL VectorInit
12207:                                                     Comparator2_Init();
00C5FE  071A80     RCALL Comparator2_Init
12208:                                                     OptionsToMass();
00C600  0708F6     RCALL OptionsToMass
12209:                                                     MustTrmFlashMass=1;                                       
00C602  8095F4     MOV 0x12BE, W4
00C604  A02004     BSET W4, #2
00C606  8895F4     MOV W4, 0x12BE
12210:                                                 break;
00C608  3704EA     BRA 0xCFDE
12211:                                                    
12212:                                                 case 58:
12213:                                                 {
12214:                                                     unsigned char p;
12215:                                                     
12216:             #if !defined BLE
12217:                                                    PIN_CODE_HC05=1;
12218:                                                    for (p=0;p<(RecBytes[0]-2);p++)
12219:                                                        PinCodeMass[p+8]=RecBytes[p+3];
12220:                                                    
12221:                                                                
12222:                                                     StringPINLenght=p+8;
12223:                                                     StringPINLenghtOptions=0;
12224:             #else
12225:             
12226:                                                    for (p=0;p<(RecBytes[0]-2);p++)
00C60A  EB4200     CLR.B W4
00C60C  984F64     MOV.B W4, [W14+14]
00C60E  37000E     BRA 0xC62C
00C626  904A6E     MOV.B [W14+14], W4
00C628  E84204     INC.B W4, W4
00C62A  984F64     MOV.B W4, [W14+14]
00C62C  904A6E     MOV.B [W14+14], W4
00C62E  FB8284     ZE W4, W5
00C630  229264     MOV #0x2926, W4
00C632  784214     MOV.B [W4], W4
00C634  FB8204     ZE W4, W4
00C636  E98204     DEC2 W4, W4
00C638  528F84     SUB W5, W4, [W15]
00C63A  35FFEA     BRA LT, 0xC610
12227:                                                        PinCodeMassOptions[p]=RecBytes[p+3];
00C610  904A6E     MOV.B [W14+14], W4
00C612  FB8284     ZE W4, W5
00C614  904A6E     MOV.B [W14+14], W4
00C616  FB8204     ZE W4, W4
00C618  420263     ADD W4, #0x3, W4
00C61A  229266     MOV #0x2926, W6
00C61C  430204     ADD W6, W4, W4
00C61E  784214     MOV.B [W4], W4
00C620  217556     MOV #0x1755, W6
00C622  430285     ADD W6, W5, W5
00C624  784A84     MOV.B W4, [W5]
12228:                                                    
12229:                                                                
12230:                                                     StringPINLenghtOptions=p;
00C63C  230AC4     MOV #0x30AC, W4
00C63E  904AEE     MOV.B [W14+14], W5
00C640  784A05     MOV.B W5, [W4]
12231:             
12232:                                                     
12233:                                                     
12234:                                                     OptionsToMass();
00C642  0708D5     RCALL OptionsToMass
12235:                                                     MustTrmFlashMass=1;                                       
00C644  8095F4     MOV 0x12BE, W4
00C646  A02004     BSET W4, #2
00C648  8895F4     MOV W4, 0x12BE
12236:                                                     
12237:             #endif
12238:                                                     if (!ResetedPIN1) 
00C64A  8096C5     MOV Flgs7, W5
00C64C  200804     MOV #0x80, W4
00C64E  628204     AND W5, W4, W4
00C650  520FE0     SUB W4, #0x0, [W15]
00C652  3A0003     BRA NZ, 0xC65A
12239:                                                         SoundNum=1;       
00C654  2124B5     MOV #0x124B, W5
00C656  B3C014     MOV.B #0x1, W4
00C658  784A84     MOV.B W4, [W5]
12240:             
12241:                                                         ResetedPIN1=0;
00C65A  8096C4     MOV Flgs7, W4
00C65C  A17004     BCLR W4, #7
00C65E  8896C4     MOV W4, Flgs7
12242:             
12243:                                                 }
12244:                                                 break;
00C660  3704BE     BRA 0xCFDE
12245:              
12246:                                                 case 59:
12247:                                                     BothBreaks=1;
00C662  809774     MOV StatFlgs3, W4
00C664  A03004     BSET W4, #3
00C666  889774     MOV W4, StatFlgs3
12248:                                                     OptionsToMass();
00C668  0708C2     RCALL OptionsToMass
12249:                                                     MustTrmFlashMass=1;                                       
00C66A  8095F4     MOV 0x12BE, W4
00C66C  A02004     BSET W4, #2
00C66E  8895F4     MOV W4, 0x12BE
12250:                                                 break;
00C670  3704B6     BRA 0xCFDE
12251:                                                    
12252:                                                 case 60:
12253:                                                     BothBreaks=0;
00C672  809774     MOV StatFlgs3, W4
00C674  A13004     BCLR W4, #3
00C676  889774     MOV W4, StatFlgs3
12254:                                                     OptionsToMass();
00C678  0708BA     RCALL OptionsToMass
12255:                                                     MustTrmFlashMass=1;                                       
00C67A  8095F4     MOV 0x12BE, W4
00C67C  A02004     BSET W4, #2
00C67E  8895F4     MOV W4, 0x12BE
12256:                                                 break;
00C680  3704AE     BRA 0xCFDE
12257:                                                 case 61:
12258:                                                     GAZ_IMMITATOR=1;
00C682  8096B4     MOV 0x12D6, W4
00C684  A05004     BSET W4, #5
00C686  8896B4     MOV W4, 0x12D6
12259:                                                     GazImm=500;
00C688  201F44     MOV #0x1F4, W4
00C68A  8893F4     MOV W4, GazImm
12260:                                                 break;
00C68C  3704A8     BRA 0xCFDE
12261:                                                 case 62:
12262:                                                     GAZ_IMMITATOR=0;
00C68E  8096B4     MOV 0x12D6, W4
00C690  A15004     BCLR W4, #5
00C692  8896B4     MOV W4, 0x12D6
12263:                                                 break;
00C694  3704A4     BRA 0xCFDE
12264:                                                 case 63:
12265:                                                {
12266:                                                     int Tm;
12267:                                                     Tm=(int)RecBytes[4];
00C696  2292A4     MOV #0x292A, W4
00C698  784214     MOV.B [W4], W4
00C69A  FB8204     ZE W4, W4
00C69C  98A724     MOV W4, [W14+196]
12268:                                                     Tm=Tm<<8;
00C69E  90A22E     MOV [W14+196], W4
00C6A0  DD2248     SL W4, #8, W4
00C6A2  98A724     MOV W4, [W14+196]
12269:                                                     Tm=Tm+RecBytes[3];
00C6A4  229294     MOV #0x2929, W4
00C6A6  784214     MOV.B [W4], W4
00C6A8  FB8204     ZE W4, W4
00C6AA  90A2AE     MOV [W14+196], W5
00C6AC  428204     ADD W5, W4, W4
00C6AE  98A724     MOV W4, [W14+196]
12270:                                                     GazImm=Tm;
00C6B0  90A22E     MOV [W14+196], W4
00C6B2  8893F4     MOV W4, GazImm
12271:                                            
12272:                                                     break;
00C6B4  370494     BRA 0xCFDE
12273:                                                }
12274:                                                    
12275:                                                 case 64:
12276:                                                {
12277:                                                     unsigned char p;
12278:                                                 
12279:                                                 
12280:                                                    for (p=0;p<(RecBytes[0]-2);p++)
00C6B6  EB4200     CLR.B W4
00C6B8  984F74     MOV.B W4, [W14+15]
00C6BA  37000E     BRA 0xC6D8
00C6D2  904A7E     MOV.B [W14+15], W4
00C6D4  E84204     INC.B W4, W4
00C6D6  984F74     MOV.B W4, [W14+15]
00C6D8  904A7E     MOV.B [W14+15], W4
00C6DA  FB8284     ZE W4, W5
00C6DC  229264     MOV #0x2926, W4
00C6DE  784214     MOV.B [W4], W4
00C6E0  FB8204     ZE W4, W4
00C6E2  E98204     DEC2 W4, W4
00C6E4  528F84     SUB W5, W4, [W15]
00C6E6  35FFEA     BRA LT, 0xC6BC
12281:                                                        PinCodeMassOptionsUnlock[p]=RecBytes[p+3];
00C6BC  904A7E     MOV.B [W14+15], W4
00C6BE  FB8284     ZE W4, W5
00C6C0  904A7E     MOV.B [W14+15], W4
00C6C2  FB8204     ZE W4, W4
00C6C4  420263     ADD W4, #0x3, W4
00C6C6  229266     MOV #0x2926, W6
00C6C8  430204     ADD W6, W4, W4
00C6CA  784214     MOV.B [W4], W4
00C6CC  2175B6     MOV #0x175B, W6
00C6CE  430285     ADD W6, W5, W5
00C6D0  784A84     MOV.B W4, [W5]
12282:                                                    
12283:                                                                
12284:                                                     StringPINLenghtOptionsUnlock=p;
00C6E8  230AD4     MOV #0x30AD, W4
00C6EA  904AFE     MOV.B [W14+15], W5
00C6EC  784A05     MOV.B W5, [W4]
12285:             
12286:                                                 }
12287:                                                 break;
00C6EE  370477     BRA 0xCFDE
12288:                                                 
12289:                                                 case 66:
12290:                                                 {
12291:                                                     if (Spd1Res==0)
00C6F0  817F14     MOV Spd1Res, W4
00C6F2  520FE0     SUB W4, #0x0, [W15]
00C6F4  3A004F     BRA NZ, 0xC794
12292:                                                     {
12293:                                                     if (SIN_MIDDLE)
00C6F6  809765     MOV StatFlgs2, W5
00C6F8  240004     MOV #0x4000, W4
00C6FA  628204     AND W5, W4, W4
00C6FC  520FE0     SUB W4, #0x0, [W15]
00C6FE  320022     BRA Z, 0xC744
12294:                                                     { 
12295:                                                     
12296:                                                       SIN_MIDDLE=0;
00C700  809764     MOV StatFlgs2, W4
00C702  A1E004     BCLR W4, #14
00C704  889764     MOV W4, StatFlgs2
12297:                                                       if ((!Sensorless)&&VectorMem&&Vector)
00C706  809755     MOV StatFlgs1, W5
00C708  200204     MOV #0x20, W4
00C70A  628204     AND W5, W4, W4
00C70C  520FE0     SUB W4, #0x0, [W15]
00C70E  3A001A     BRA NZ, 0xC744
00C710  809755     MOV StatFlgs1, W5
00C712  204004     MOV #0x400, W4
00C714  628204     AND W5, W4, W4
00C716  520FE0     SUB W4, #0x0, [W15]
00C718  320015     BRA Z, 0xC744
00C71A  809684     MOV Flgs5, W4
00C71C  620270     AND W4, #0x10, W4
00C71E  520FE0     SUB W4, #0x0, [W15]
00C720  320011     BRA Z, 0xC744
12298:                                                         {
12299:                                                           if (StrongModeMem)
00C722  809764     MOV StatFlgs2, W4
00C724  620264     AND W4, #0x4, W4
00C726  520FE0     SUB W4, #0x0, [W15]
00C728  320004     BRA Z, 0xC732
12300:                                                             StrongMode=1;
00C72A  8095F4     MOV 0x12BE, W4
00C72C  A0E004     BSET W4, #14
00C72E  8895F4     MOV W4, 0x12BE
00C730  370003     BRA 0xC738
12301:                                                           else
12302:                                                             StrongMode=0;
00C732  8095F4     MOV 0x12BE, W4
00C734  A1E004     BCLR W4, #14
00C736  8895F4     MOV W4, 0x12BE
12303:                                                       
12304:                                                         RdSensors();
00C738  0754BE     RCALL RdSensors
12305:                                                         Amplitude1=PDC1;
00C73A  806134     MOV PDC1, W4
00C73C  200005     MOV #0x0, W5
00C73E  889A44     MOV W4, Amplitude1
00C740  889A55     MOV W5, 0x134A
12306:                                                         VectorInit();
00C742  073DEA     RCALL VectorInit
12307:                                                         }
12308:                                                     }                                        
12309:                                                     
12310:                                                     
12311:                                                     NoChager=1;
00C744  809674     MOV 0x12CE, W4
00C746  A0E004     BSET W4, #14
00C748  889674     MOV W4, 0x12CE
12312:                                                     ChagerViaMotor=1;
00C74A  809604     MOV Flgs1, W4
00C74C  A01004     BSET W4, #1
00C74E  889604     MOV W4, Flgs1
12313:                                                     EChagerCurrSumm=EChagerUSumm=0;
00C750  B82260     MUL.UU W4, #0, W4
00C752  88B5B4     MOV W4, EChagerUSumm
00C754  88B5C5     MOV W5, 0x16B8
00C756  80B5B4     MOV EChagerUSumm, W4
00C758  80B5C5     MOV 0x16B8, W5
00C75A  88B594     MOV W4, EChagerCurrSumm
00C75C  88B5A5     MOV W5, 0x16B4
12314:                                                     DirectControlMotor=1;
00C75E  809744     MOV StatFlgs, W4
00C760  A00004     BSET W4, #0
00C762  889744     MOV W4, StatFlgs
12315:                                                     ChargingComplete=0;
00C764  809684     MOV Flgs5, W4
00C766  A13004     BCLR W4, #3
00C768  889684     MOV W4, Flgs5
12316:                                                     DS=1;
00C76A  8096B4     MOV 0x12D6, W4
00C76C  A0B004     BSET W4, #11
00C76E  8896B4     MOV W4, 0x12D6
12317:                                                     CV=0;
00C770  809684     MOV Flgs5, W4
00C772  A18004     BCLR W4, #8
00C774  889684     MOV W4, Flgs5
12318:                                                     DIRPWM1=0;
00C776  EB0200     CLR W4
00C778  89F5C4     MOV W4, DIRPWM1
12319:                                                     Sensor1_Prev=Sensor1;
00C77A  212464     MOV #0x1246, W4
00C77C  784214     MOV.B [W4], W4
00C77E  212475     MOV #0x1247, W5
00C780  784A84     MOV.B W4, [W5]
12320:                                                     Phases1();
00C782  07E2A9     RCALL Phases1
12321:                                                     OptionsToMass();
00C784  070834     RCALL OptionsToMass
12322:                                                     MustTrmFlashMass=1;
00C786  8095F4     MOV 0x12BE, W4
00C788  A02004     BSET W4, #2
00C78A  8895F4     MOV W4, 0x12BE
12323:                                                     SoundNum=12;
00C78C  2124B5     MOV #0x124B, W5
00C78E  B3C0C4     MOV.B #0xC, W4
00C790  784A84     MOV.B W4, [W5]
12324:                                                 }
12325:                                                     else
12326:                                                     {
12327:                                                         SoundNum=9;
00C794  2124B5     MOV #0x124B, W5
00C796  B3C094     MOV.B #0x9, W4
00C798  784A84     MOV.B W4, [W5]
12328:                                                     }
12329:                                                 }
12330:                                                 break;
00C792  370425     BRA 0xCFDE
00C79A  370421     BRA 0xCFDE
12331:                                                 
12332:                                                 case 67:
12333:                                                 {
12334:                                                     SoundNum=19;
00C79C  2124B5     MOV #0x124B, W5
00C79E  B3C134     MOV.B #0x13, W4
00C7A0  784A84     MOV.B W4, [W5]
12335:                                                     ChagerViaMotor=0;
00C7A2  809604     MOV Flgs1, W4
00C7A4  A11004     BCLR W4, #1
00C7A6  889604     MOV W4, Flgs1
12336:                                                     EChagerCurrSumm=EChagerUSumm=0;
00C7A8  B82260     MUL.UU W4, #0, W4
00C7AA  88B5B4     MOV W4, EChagerUSumm
00C7AC  88B5C5     MOV W5, 0x16B8
00C7AE  80B5B4     MOV EChagerUSumm, W4
00C7B0  80B5C5     MOV 0x16B8, W5
00C7B2  88B594     MOV W4, EChagerCurrSumm
00C7B4  88B5A5     MOV W5, 0x16B4
12337:                                                     DirectControlMotor=0;
00C7B6  809744     MOV StatFlgs, W4
00C7B8  A10004     BCLR W4, #0
00C7BA  889744     MOV W4, StatFlgs
12338:                                                     DS=1;
00C7BC  8096B4     MOV 0x12D6, W4
00C7BE  A0B004     BSET W4, #11
00C7C0  8896B4     MOV W4, 0x12D6
12339:                                                     PDC1=0;
00C7C2  EB0200     CLR W4
00C7C4  886134     MOV W4, PDC1
12340:                                                     DIRPWM1=0;
00C7C6  EB0200     CLR W4
00C7C8  89F5C4     MOV W4, DIRPWM1
12341:                                                     NullPtr=1;
00C7CA  809624     MOV Flgs2, W4
00C7CC  A05004     BSET W4, #5
00C7CE  889624     MOV W4, Flgs2
12342:                                                     NullPtrRot=1;
00C7D0  809624     MOV Flgs2, W4
00C7D2  A07004     BSET W4, #7
00C7D4  889624     MOV W4, Flgs2
12343:                                                     if (Monocycle)
00C7D6  809745     MOV StatFlgs, W5
00C7D8  280004     MOV #0x8000, W4
00C7DA  628204     AND W5, W4, W4
00C7DC  520FE0     SUB W4, #0x0, [W15]
00C7DE  320009     BRA Z, 0xC7F2
12344:                                                         {
12345:                                                         ESumm=0;
00C7E0  B82260     MUL.UU W4, #0, W4
00C7E2  889B84     MOV W4, ESumm
00C7E4  889B95     MOV W5, 0x1372
12346:                                                         NoBalance=1;
00C7E6  8095E4     MOV Flgs, W4
00C7E8  A0B004     BSET W4, #11
00C7EA  8895E4     MOV W4, Flgs
12347:                                                         DS=1;
00C7EC  8096B4     MOV 0x12D6, W4
00C7EE  A0B004     BSET W4, #11
00C7F0  8896B4     MOV W4, 0x12D6
12348:                                                         }    
12349:                                                     NoBalanceCode=4;
00C7F2  216D25     MOV #0x16D2, W5
00C7F4  B3C044     MOV.B #0x4, W4
00C7F6  784A84     MOV.B W4, [W5]
12350:                                                     OptionsToMass();
00C7F8  0707FA     RCALL OptionsToMass
12351:                                                     MustTrmFlashMass=1;
00C7FA  8095F4     MOV 0x12BE, W4
00C7FC  A02004     BSET W4, #2
00C7FE  8895F4     MOV W4, 0x12BE
12352:                                                 }
12353:                                                 break;
00C800  3703EE     BRA 0xCFDE
12354:                                                 
12355:             
12356:                                                 case 68:
12357:                                                 {
12358:                                                     TrapezoidaWhenBigCurrent=1;
00C802  809774     MOV StatFlgs3, W4
00C804  A04004     BSET W4, #4
00C806  889774     MOV W4, StatFlgs3
12359:                                                     OptionsToMass();
00C808  0707F2     RCALL OptionsToMass
12360:                                                     MustTrmFlashMass=1;
00C80A  8095F4     MOV 0x12BE, W4
00C80C  A02004     BSET W4, #2
00C80E  8895F4     MOV W4, 0x12BE
12361:                                                 }
12362:                                                 break;
00C810  3703E6     BRA 0xCFDE
12363:             
12364:                                                 case 69:
12365:                                                 {
12366:                                                     TrapezoidaWhenBigCurrent=0;
00C812  809774     MOV StatFlgs3, W4
00C814  A14004     BCLR W4, #4
00C816  889774     MOV W4, StatFlgs3
12367:                                                     OptionsToMass();
00C818  0707EA     RCALL OptionsToMass
12368:                                                     MustTrmFlashMass=1;
00C81A  8095F4     MOV 0x12BE, W4
00C81C  A02004     BSET W4, #2
00C81E  8895F4     MOV W4, 0x12BE
12369:                                                 }
12370:                                                 break;
00C820  3703DE     BRA 0xCFDE
12371:             
12372:                                                case 70:
12373:                                                {
12374:                                                     int Tm;
12375:                                                     Tm=(int)RecBytes[4];
00C822  2292A4     MOV #0x292A, W4
00C824  784214     MOV.B [W4], W4
00C826  FB8204     ZE W4, W4
00C828  98A734     MOV W4, [W14+198]
12376:                                                     Tm=Tm<<8;
00C82A  90A23E     MOV [W14+198], W4
00C82C  DD2248     SL W4, #8, W4
00C82E  98A734     MOV W4, [W14+198]
12377:                                                     Tm=Tm+RecBytes[3];
00C830  229294     MOV #0x2929, W4
00C832  784214     MOV.B [W4], W4
00C834  FB8204     ZE W4, W4
00C836  90A2BE     MOV [W14+198], W5
00C838  428204     ADD W5, W4, W4
00C83A  98A734     MOV W4, [W14+198]
12378:                                                     BigCurrent=Tm;
00C83C  90A23E     MOV [W14+198], W4
00C83E  88B644     MOV W4, BigCurrent
12379:                                                     
12380:                                                     
12381:                                                     OptionsToMass();
00C840  0707D6     RCALL OptionsToMass
12382:                                                     MustTrmFlashMass=1;
00C842  8095F4     MOV 0x12BE, W4
00C844  A02004     BSET W4, #2
00C846  8895F4     MOV W4, 0x12BE
12383:                                                     break;
00C848  3703CA     BRA 0xCFDE
12384:                                                }              
12385:                                                
12386:                                                    case 71:
12387:                                                    {
12388:                                                     int Tm;
12389:                                                     Tm=(int)RecBytes[4];
00C84A  2292A4     MOV #0x292A, W4
00C84C  784214     MOV.B [W4], W4
00C84E  FB8204     ZE W4, W4
00C850  98A744     MOV W4, [W14+200]
12390:                                                     Tm=Tm<<8;
00C852  90A24E     MOV [W14+200], W4
00C854  DD2248     SL W4, #8, W4
00C856  98A744     MOV W4, [W14+200]
12391:                                                     Tm=Tm+RecBytes[3];
00C858  229294     MOV #0x2929, W4
00C85A  784214     MOV.B [W4], W4
00C85C  FB8204     ZE W4, W4
00C85E  90A2CE     MOV [W14+200], W5
00C860  428204     ADD W5, W4, W4
00C862  98A744     MOV W4, [W14+200]
12392:                                                     ChagerCurr=Tm;
00C864  90A2CE     MOV [W14+200], W5
00C866  88B655     MOV W5, ChagerCurr
12393:                                                     OptionsToMass();
00C868  0707C2     RCALL OptionsToMass
12394:                                                     MustTrmFlashMass=1;
00C86A  8095F4     MOV 0x12BE, W4
00C86C  A02004     BSET W4, #2
00C86E  8895F4     MOV W4, 0x12BE
12395:                                                        break;
00C870  3703B6     BRA 0xCFDE
12396:                                                    }
12397:                                                    case 72:
12398:                                                     P_Curr=RecBytes[3];
00C872  229294     MOV #0x2929, W4
00C874  784214     MOV.B [W4], W4
00C876  FB8204     ZE W4, W4
00C878  200005     MOV #0x0, W5
00C87A  BE0004     MOV.D W4, W0
00C87C  022582     CALL ___floatunsisf
00C87E  000000     NOP
00C880  BE0200     MOV.D W0, W4
00C882  88B514     MOV W4, P_Curr
00C884  88B525     MOV W5, 0x16A4
12399:                                                     P_Curr=P_Curr/100;
00C886  80B514     MOV P_Curr, W4
00C888  80B525     MOV 0x16A4, W5
00C88A  200002     MOV #0x0, W2
00C88C  242C83     MOV #0x42C8, W3
00C88E  BE0004     MOV.D W4, W0
00C890  02245A     CALL ___divsf3
00C892  000000     NOP
00C894  BE0200     MOV.D W0, W4
00C896  88B514     MOV W4, P_Curr
00C898  88B525     MOV W5, 0x16A4
12400:                                                     OptionsToMass();
00C89A  0707A9     RCALL OptionsToMass
12401:                                                     MustTrmFlashMass=1;
00C89C  8095F4     MOV 0x12BE, W4
00C89E  A02004     BSET W4, #2
00C8A0  8895F4     MOV W4, 0x12BE
12402:                                                        break;
00C8A2  37039D     BRA 0xCFDE
12403:                                                    case 73:
12404:                                                     I_Curr=RecBytes[3];
00C8A4  229294     MOV #0x2929, W4
00C8A6  784214     MOV.B [W4], W4
00C8A8  FB8204     ZE W4, W4
00C8AA  200005     MOV #0x0, W5
00C8AC  BE0004     MOV.D W4, W0
00C8AE  022582     CALL ___floatunsisf
00C8B0  000000     NOP
00C8B2  BE0200     MOV.D W0, W4
00C8B4  88B534     MOV W4, I_Curr
00C8B6  88B545     MOV W5, 0x16A8
12405:                                                     I_Curr=I_Curr/100;
00C8B8  80B534     MOV I_Curr, W4
00C8BA  80B545     MOV 0x16A8, W5
00C8BC  200002     MOV #0x0, W2
00C8BE  242C83     MOV #0x42C8, W3
00C8C0  BE0004     MOV.D W4, W0
00C8C2  02245A     CALL ___divsf3
00C8C4  000000     NOP
00C8C6  BE0200     MOV.D W0, W4
00C8C8  88B534     MOV W4, I_Curr
00C8CA  88B545     MOV W5, 0x16A8
12406:                                                     EChagerCurrSumm=0;
00C8CC  B82260     MUL.UU W4, #0, W4
00C8CE  88B594     MOV W4, EChagerCurrSumm
00C8D0  88B5A5     MOV W5, 0x16B4
12407:                                                     OptionsToMass();
00C8D2  07078D     RCALL OptionsToMass
12408:                                                     MustTrmFlashMass=1;
00C8D4  8095F4     MOV 0x12BE, W4
00C8D6  A02004     BSET W4, #2
00C8D8  8895F4     MOV W4, 0x12BE
12409:                                                        break;
00C8DA  370381     BRA 0xCFDE
12410:                                                    case 74:
12411:                                                     P_U=RecBytes[3];
00C8DC  229294     MOV #0x2929, W4
00C8DE  784214     MOV.B [W4], W4
00C8E0  216A05     MOV #0x16A0, W5
00C8E2  784A84     MOV.B W4, [W5]
12412:                                                     OptionsToMass();
00C8E4  070784     RCALL OptionsToMass
12413:                                                     MustTrmFlashMass=1;
00C8E6  8095F4     MOV 0x12BE, W4
00C8E8  A02004     BSET W4, #2
00C8EA  8895F4     MOV W4, 0x12BE
12414:                                                        break;
00C8EC  370378     BRA 0xCFDE
12415:                                                    case 75:
12416:                                                     I_U=RecBytes[3];
00C8EE  229294     MOV #0x2929, W4
00C8F0  784214     MOV.B [W4], W4
00C8F2  216A15     MOV #0x16A1, W5
00C8F4  784A84     MOV.B W4, [W5]
12417:                                                     EChagerUSumm=0;
00C8F6  B82260     MUL.UU W4, #0, W4
00C8F8  88B5B4     MOV W4, EChagerUSumm
00C8FA  88B5C5     MOV W5, 0x16B8
12418:                                                     OptionsToMass();
00C8FC  070778     RCALL OptionsToMass
12419:                                                     MustTrmFlashMass=1;
00C8FE  8095F4     MOV 0x12BE, W4
00C900  A02004     BSET W4, #2
00C902  8895F4     MOV W4, 0x12BE
12420:                                                        break;
00C904  37036C     BRA 0xCFDE
12421:                                                    case 76:
12422:                                                     _2WDMode=0;
00C906  230C95     MOV #0x30C9, W5
00C908  EB4200     CLR.B W4
00C90A  784A84     MOV.B W4, [W5]
12423:                                                     OptionsToMass();
00C90C  070770     RCALL OptionsToMass
12424:                                                     MustTrmFlashMass=1;
00C90E  8095F4     MOV 0x12BE, W4
00C910  A02004     BSET W4, #2
00C912  8895F4     MOV W4, 0x12BE
12425:                                                        break;
00C914  370364     BRA 0xCFDE
12426:                                                    case 77:
12427:                                                     _2WDMode=1;
00C916  230C95     MOV #0x30C9, W5
00C918  B3C014     MOV.B #0x1, W4
00C91A  784A84     MOV.B W4, [W5]
12428:                                                     U3MODEbits.UARTEN=0;
00C91C  A9E251     BCLR 0x251, #7
12429:                                                     InitPort_U3();
00C91E  07E83C     RCALL InitPort_U3
12430:                                                     UARTInit_U3();
00C920  07E7C3     RCALL UARTInit_U3
12431:                                                     OnTransmitt_U3=0;
00C922  809664     MOV Flgs4, W4
00C924  A14004     BCLR W4, #4
00C926  889664     MOV W4, Flgs4
12432:                                                     OptionsToMass();
00C928  070762     RCALL OptionsToMass
12433:                                                     MustTrmFlashMass=1;
00C92A  8095F4     MOV 0x12BE, W4
00C92C  A02004     BSET W4, #2
00C92E  8895F4     MOV W4, 0x12BE
12434:                                                        break;
00C930  370356     BRA 0xCFDE
12435:                                                    case 78:
12436:                                                     _2WDMode=2;
00C932  230C95     MOV #0x30C9, W5
00C934  B3C024     MOV.B #0x2, W4
00C936  784A84     MOV.B W4, [W5]
12437:                                                     U3MODEbits.UARTEN=0;
00C938  A9E251     BCLR 0x251, #7
12438:                                                     InitPort_U3();
00C93A  07E82E     RCALL InitPort_U3
12439:                                                     UARTInit_U3();
00C93C  07E7B5     RCALL UARTInit_U3
12440:                                                     OnTransmitt_U3=0;
00C93E  809664     MOV Flgs4, W4
00C940  A14004     BCLR W4, #4
00C942  889664     MOV W4, Flgs4
12441:                                                     OptionsToMass();
00C944  070754     RCALL OptionsToMass
12442:                                                     MustTrmFlashMass=1;
00C946  8095F4     MOV 0x12BE, W4
00C948  A02004     BSET W4, #2
00C94A  8895F4     MOV W4, 0x12BE
12443:                                                        break;
00C94C  370348     BRA 0xCFDE
12444:                                                    case 79:
12445:                                                        Joystick=1;
00C94E  809774     MOV StatFlgs3, W4
00C950  A05004     BSET W4, #5
00C952  889774     MOV W4, StatFlgs3
12446:                                                        OptionsToMass();
00C954  07074C     RCALL OptionsToMass
12447:                                                        MustTrmFlashMass=1;
00C956  8095F4     MOV 0x12BE, W4
00C958  A02004     BSET W4, #2
00C95A  8895F4     MOV W4, 0x12BE
12448:                                                        break;
00C95C  370340     BRA 0xCFDE
12449:                                                    case 80:
12450:                                                        Joystick=0;
00C95E  809774     MOV StatFlgs3, W4
00C960  A15004     BCLR W4, #5
00C962  889774     MOV W4, StatFlgs3
12451:                                                        OptionsToMass();
00C964  070744     RCALL OptionsToMass
12452:                                                        MustTrmFlashMass=1;
00C966  8095F4     MOV 0x12BE, W4
00C968  A02004     BSET W4, #2
00C96A  8895F4     MOV W4, 0x12BE
12453:                                                        break;
00C96C  370338     BRA 0xCFDE
12454:                                                    case 81:
12455:                                                        JoystickCalibrOnReset=1;
00C96E  809774     MOV StatFlgs3, W4
00C970  A06004     BSET W4, #6
00C972  889774     MOV W4, StatFlgs3
12456:                                                        OptionsToMass();
00C974  07073C     RCALL OptionsToMass
12457:                                                        MustTrmFlashMass=1;
00C976  8095F4     MOV 0x12BE, W4
00C978  A02004     BSET W4, #2
00C97A  8895F4     MOV W4, 0x12BE
12458:                                                        break;
00C97C  370330     BRA 0xCFDE
12459:                                                    case 82:
12460:                                                        JoystickCalibrOnReset=0;
00C97E  809774     MOV StatFlgs3, W4
00C980  A16004     BCLR W4, #6
00C982  889774     MOV W4, StatFlgs3
12461:                                                        OptionsToMass();
00C984  070734     RCALL OptionsToMass
12462:                                                        MustTrmFlashMass=1;
00C986  8095F4     MOV 0x12BE, W4
00C988  A02004     BSET W4, #2
00C98A  8895F4     MOV W4, 0x12BE
12463:                                                        break;
00C98C  370328     BRA 0xCFDE
12464:             
12465:                                                    case 83:
12466:                                                        CalibrateJOYSTICK=1;
00C98E  8096C4     MOV Flgs7, W4
00C990  A05004     BSET W4, #5
00C992  8896C4     MOV W4, Flgs7
12467:                                                        ADCThrottleSumm=0;
00C994  B82260     MUL.UU W4, #0, W4
00C996  889414     MOV W4, ADCThrottleSumm
00C998  889425     MOV W5, 0x1284
12468:                                                        ADCThrottleBreakSumm=0;
00C99A  B82260     MUL.UU W4, #0, W4
00C99C  889434     MOV W4, ADCThrottleBreakSumm
00C99E  889445     MOV W5, 0x1288
12469:                                                        CntCalibrateJOYSTICK=0;
00C9A0  234A25     MOV #0x34A2, W5
00C9A2  EB4200     CLR.B W4
00C9A4  784A84     MOV.B W4, [W5]
12470:                                                        SoundNum=1;
00C9A6  2124B5     MOV #0x124B, W5
00C9A8  B3C014     MOV.B #0x1, W4
00C9AA  784A84     MOV.B W4, [W5]
12471:                                                        break;
00C9AC  370318     BRA 0xCFDE
12472:                                                    case 84:
12473:                                                    {
12474:                                                     int Tm;
12475:                                                     Tm=(int)RecBytes[4];
00C9AE  2292A4     MOV #0x292A, W4
00C9B0  784214     MOV.B [W4], W4
00C9B2  FB8204     ZE W4, W4
00C9B4  98A754     MOV W4, [W14+202]
12476:                                                     Tm=Tm<<8;
00C9B6  90A25E     MOV [W14+202], W4
00C9B8  DD2248     SL W4, #8, W4
00C9BA  98A754     MOV W4, [W14+202]
12477:                                                     Tm=Tm+RecBytes[3];
00C9BC  229294     MOV #0x2929, W4
00C9BE  784214     MOV.B [W4], W4
00C9C0  FB8204     ZE W4, W4
00C9C2  90A2DE     MOV [W14+202], W5
00C9C4  428204     ADD W5, W4, W4
00C9C6  98A754     MOV W4, [W14+202]
12478:                                                     JoistickDeadZone=Tm;
00C9C8  90A25E     MOV [W14+202], W4
00C9CA  898284     MOV W4, JoistickDeadZone
12479:                                                     OptionsToMass();
00C9CC  070710     RCALL OptionsToMass
12480:                                                     MustTrmFlashMass=1;
00C9CE  8095F4     MOV 0x12BE, W4
00C9D0  A02004     BSET W4, #2
00C9D2  8895F4     MOV W4, 0x12BE
12481:                                                        break;
00C9D4  370304     BRA 0xCFDE
12482:                                                    }
12483:                                                    case 85:
12484:                                                        ChangeAxis=1;
00C9D6  809774     MOV StatFlgs3, W4
00C9D8  A07004     BSET W4, #7
00C9DA  889774     MOV W4, StatFlgs3
12485:                                                        OptionsToMass();
00C9DC  070708     RCALL OptionsToMass
12486:                                                        MustTrmFlashMass=1;
00C9DE  8095F4     MOV 0x12BE, W4
00C9E0  A02004     BSET W4, #2
00C9E2  8895F4     MOV W4, 0x12BE
12487:                                                        break;
00C9E4  3702FC     BRA 0xCFDE
12488:                                                    case 86:
12489:                                                        ChangeAxis=0;
00C9E6  809774     MOV StatFlgs3, W4
00C9E8  A17004     BCLR W4, #7
00C9EA  889774     MOV W4, StatFlgs3
12490:                                                        OptionsToMass();
00C9EC  070700     RCALL OptionsToMass
12491:                                                        MustTrmFlashMass=1;
00C9EE  8095F4     MOV 0x12BE, W4
00C9F0  A02004     BSET W4, #2
00C9F2  8895F4     MOV W4, 0x12BE
12492:                                                        break;
00C9F4  3702F4     BRA 0xCFDE
12493:                                                    case 87:
12494:                                                    {
12495:                                                     int Tm;
12496:                                                     Tm=(int)RecBytes[4];
00C9F6  2292A4     MOV #0x292A, W4
00C9F8  784214     MOV.B [W4], W4
00C9FA  FB8204     ZE W4, W4
00C9FC  98A764     MOV W4, [W14+204]
12497:                                                     Tm=Tm<<8;
00C9FE  90A26E     MOV [W14+204], W4
00CA00  DD2248     SL W4, #8, W4
00CA02  98A764     MOV W4, [W14+204]
12498:                                                     Tm=Tm+RecBytes[3];
00CA04  229294     MOV #0x2929, W4
00CA06  784214     MOV.B [W4], W4
00CA08  FB8204     ZE W4, W4
00CA0A  90A2EE     MOV [W14+204], W5
00CA0C  428204     ADD W5, W4, W4
00CA0E  98A764     MOV W4, [W14+204]
12499:                                                     KpKpMustBe=Tm;
00CA10  90A26E     MOV [W14+204], W4
00CA12  DEA2CF     ASR W4, #15, W5
00CA14  BE0004     MOV.D W4, W0
00CA16  02257C     CALL ___floatsisf
00CA18  000000     NOP
00CA1A  BE0200     MOV.D W0, W4
00CA1C  89A5B4     MOV W4, KpKpMustBe
00CA1E  89A5C5     MOV W5, 0x34B8
12500:                                                     KpKpMustBe=KpKpMustBe/10;
00CA20  81A5B4     MOV KpKpMustBe, W4
00CA22  81A5C5     MOV 0x34B8, W5
00CA24  200002     MOV #0x0, W2
00CA26  241203     MOV #0x4120, W3
00CA28  BE0004     MOV.D W4, W0
00CA2A  02245A     CALL ___divsf3
00CA2C  000000     NOP
00CA2E  BE0200     MOV.D W0, W4
00CA30  89A5B4     MOV W4, KpKpMustBe
00CA32  89A5C5     MOV W5, 0x34B8
12501:                                                     OptionsToMass();
00CA34  0706DC     RCALL OptionsToMass
12502:                                                     MustTrmFlashMass=1;
00CA36  8095F4     MOV 0x12BE, W4
00CA38  A02004     BSET W4, #2
00CA3A  8895F4     MOV W4, 0x12BE
12503:                                                        break;
00CA3C  3702D0     BRA 0xCFDE
12504:                                                    }
12505:                                                    case 88:
12506:                                                        IRFP4110=1;
00CA3E  809774     MOV StatFlgs3, W4
00CA40  A08004     BSET W4, #8
00CA42  889774     MOV W4, StatFlgs3
12507:                                                        OptionsToMass();
00CA44  0706D4     RCALL OptionsToMass
12508:                                                        MustTrmFlashMass=1;
00CA46  8095F4     MOV 0x12BE, W4
00CA48  A02004     BSET W4, #2
00CA4A  8895F4     MOV W4, 0x12BE
12509:                                                        break;
00CA4C  3702C8     BRA 0xCFDE
12510:             
12511:                                                    case 89:
12512:                                                        IRFP4110=0;
00CA4E  809774     MOV StatFlgs3, W4
00CA50  A18004     BCLR W4, #8
00CA52  889774     MOV W4, StatFlgs3
12513:                                                        OptionsToMass();
00CA54  0706CC     RCALL OptionsToMass
12514:                                                        MustTrmFlashMass=1;
00CA56  8095F4     MOV 0x12BE, W4
00CA58  A02004     BSET W4, #2
00CA5A  8895F4     MOV W4, 0x12BE
12515:                                                        break;
00CA5C  3702C0     BRA 0xCFDE
12516:                                                    
12517:                                                     case 90:
12518:                                                         {
12519:                                                    //ChangeCurrStateMachine=0;
12520:                                                         int Tm;
12521:                                                         Tm=(int)RecBytes[4];
00CA5E  2292A4     MOV #0x292A, W4
00CA60  784214     MOV.B [W4], W4
00CA62  FB8204     ZE W4, W4
00CA64  98A774     MOV W4, [W14+206]
12522:                                                         Tm=Tm<<8;
00CA66  90A27E     MOV [W14+206], W4
00CA68  DD2248     SL W4, #8, W4
00CA6A  98A774     MOV W4, [W14+206]
12523:                                                         Tm=Tm+RecBytes[3];
00CA6C  229294     MOV #0x2929, W4
00CA6E  784214     MOV.B [W4], W4
00CA70  FB8204     ZE W4, W4
00CA72  90A2FE     MOV [W14+206], W5
00CA74  428204     ADD W5, W4, W4
00CA76  98A774     MOV W4, [W14+206]
12524:                                                         ThrottleLevelUpOff=Tm;
00CA78  90A2FE     MOV [W14+206], W5
00CA7A  898295     MOV W5, ThrottleLevelUpOff
12525:                                            
12526:                                                         OptionsToMass();
00CA7C  0706B8     RCALL OptionsToMass
12527:                                                         MustTrmFlashMass=1;
00CA7E  8095F4     MOV 0x12BE, W4
00CA80  A02004     BSET W4, #2
00CA82  8895F4     MOV W4, 0x12BE
12528:                                                         break;
00CA84  3702AC     BRA 0xCFDE
12529:                                                         }
12530:             
12531:                                                     case 91:
12532:                                                         {
12533:                                                         SoundNum=12;
00CA86  2124B5     MOV #0x124B, W5
00CA88  B3C0C4     MOV.B #0xC, W4
00CA8A  784A84     MOV.B W4, [W5]
12534:                                                         LightMode=RecBytes[3];
00CA8C  229294     MOV #0x2929, W4
00CA8E  784214     MOV.B [W4], W4
00CA90  2308E5     MOV #0x308E, W5
00CA92  784A84     MOV.B W4, [W5]
12535:                                                         OptionsToMass();
00CA94  0706AC     RCALL OptionsToMass
12536:                                                         MustTrmFlashMass=1;
00CA96  8095F4     MOV 0x12BE, W4
00CA98  A02004     BSET W4, #2
00CA9A  8895F4     MOV W4, 0x12BE
12537:                                                         break;
00CA9C  3702A0     BRA 0xCFDE
12538:                                                         }
12539:                                                 
12540:                                                     case 92:
12541:                                                         {
12542:                                                         int Tm;
12543:                                                         Tm=(int)RecBytes[4];
00CA9E  2292A4     MOV #0x292A, W4
00CAA0  784214     MOV.B [W4], W4
00CAA2  FB8204     ZE W4, W4
00CAA4  98AF04     MOV W4, [W14+208]
12544:                                                         Tm=Tm<<8;
00CAA6  90AA0E     MOV [W14+208], W4
00CAA8  DD2248     SL W4, #8, W4
00CAAA  98AF04     MOV W4, [W14+208]
12545:                                                         Tm=Tm+RecBytes[3];
00CAAC  229294     MOV #0x2929, W4
00CAAE  784214     MOV.B [W4], W4
00CAB0  FB8204     ZE W4, W4
00CAB2  90AA8E     MOV [W14+208], W5
00CAB4  428204     ADD W5, W4, W4
00CAB6  98AF04     MOV W4, [W14+208]
12546:                                                         LightSensorThresholdLo=Tm;
00CAB8  90AA0E     MOV [W14+208], W4
00CABA  898484     MOV W4, LightSensorThresholdLo
12547:                                            
12548:                                                         OptionsToMass();
00CABC  070698     RCALL OptionsToMass
12549:                                                         MustTrmFlashMass=1;
00CABE  8095F4     MOV 0x12BE, W4
00CAC0  A02004     BSET W4, #2
00CAC2  8895F4     MOV W4, 0x12BE
12550:                                                         break;
00CAC4  37028C     BRA 0xCFDE
12551:                                                         }
12552:             
12553:                                                     case 93:
12554:                                                         {
12555:                                                         int Tm;
12556:                                                         Tm=(int)RecBytes[4];
00CAC6  2292A4     MOV #0x292A, W4
00CAC8  784214     MOV.B [W4], W4
00CACA  FB8204     ZE W4, W4
00CACC  98AF14     MOV W4, [W14+210]
12557:                                                         Tm=Tm<<8;
00CACE  90AA1E     MOV [W14+210], W4
00CAD0  DD2248     SL W4, #8, W4
00CAD2  98AF14     MOV W4, [W14+210]
12558:                                                         Tm=Tm+RecBytes[3];
00CAD4  229294     MOV #0x2929, W4
00CAD6  784214     MOV.B [W4], W4
00CAD8  FB8204     ZE W4, W4
00CADA  90AA9E     MOV [W14+210], W5
00CADC  428204     ADD W5, W4, W4
00CADE  98AF14     MOV W4, [W14+210]
12559:                                                         LightSensorThresholdHi=Tm;
00CAE0  90AA1E     MOV [W14+210], W4
00CAE2  898494     MOV W4, LightSensorThresholdHi
12560:                                            
12561:                                                         OptionsToMass();
00CAE4  070684     RCALL OptionsToMass
12562:                                                         MustTrmFlashMass=1;
00CAE6  8095F4     MOV 0x12BE, W4
00CAE8  A02004     BSET W4, #2
00CAEA  8895F4     MOV W4, 0x12BE
12563:                                                         break;
00CAEC  370278     BRA 0xCFDE
12564:                                                         }
12565:             
12566:                                                    
12567:                                                     case 94:
12568:                                                     MustTrmFlashMass2ForSaveOptPC=1;
00CAEE  8096C4     MOV Flgs7, W4
00CAF0  A0B004     BSET W4, #11
00CAF2  8896C4     MOV W4, Flgs7
12569:                                                     break;
00CAF4  370274     BRA 0xCFDE
12570:             
12571:                                                     case 95:
12572:                                                     {
12573:                                                     int Tm;
12574:             
12575:                                                     for (Tm=0;Tm<sizeof(FlashMass2);Tm++)
00CAF6  EB0200     CLR W4
00CAF8  980F04     MOV W4, [W14+16]
00CAFA  37000C     BRA 0xCB14
00CB0E  900A0E     MOV [W14+16], W4
00CB10  E80204     INC W4, W4
00CB12  980F04     MOV W4, [W14+16]
00CB14  900A8E     MOV [W14+16], W5
00CB16  200F24     MOV #0xF2, W4
00CB18  528F84     SUB W5, W4, [W15]
00CB1A  36FFF0     BRA LEU, 0xCAFC
12576:                                                         FlashMass2[Tm]=RecBytes[Tm+5];
00CAFC  900A0E     MOV [W14+16], W4
00CAFE  420265     ADD W4, #0x5, W4
00CB00  229265     MOV #0x2926, W5
00CB02  428204     ADD W5, W4, W4
00CB04  784214     MOV.B [W4], W4
00CB06  22CC66     MOV #0x2CC6, W6
00CB08  900A8E     MOV [W14+16], W5
00CB0A  430285     ADD W6, W5, W5
00CB0C  784A84     MOV.B W4, [W5]
12577:                                                         MassToOptions();
00CB1C  070E54     RCALL MassToOptions
12578:                                                         MassToOptionsProfile();
00CB1E  076715     RCALL MassToOptionsProfile
12579:                                                         MustTrmCmdOk3=1;
00CB20  8096C4     MOV Flgs7, W4
00CB22  A0C004     BSET W4, #12
00CB24  8896C4     MOV W4, Flgs7
12580:                                                         
12581:                                                         OptionsToMass();
00CB26  070663     RCALL OptionsToMass
12582:                                                         MustTrmFlashMass=1;
00CB28  8095F4     MOV 0x12BE, W4
00CB2A  A02004     BSET W4, #2
00CB2C  8895F4     MOV W4, 0x12BE
12583:                                                         break;
00CB2E  370257     BRA 0xCFDE
12584:                                                     }
12585:             
12586:                                                     case 96:
12587:                                                         LightOn=1;
00CB30  809774     MOV StatFlgs3, W4
00CB32  A09004     BSET W4, #9
00CB34  889774     MOV W4, StatFlgs3
12588:                                                         KeyLightStop=0;
00CB36  809784     MOV StatFlgs4, W4
00CB38  A10004     BCLR W4, #0
00CB3A  889784     MOV W4, StatFlgs4
12589:                                                         KeyLightStopGabarit=0;
00CB3C  809784     MOV StatFlgs4, W4
00CB3E  A11004     BCLR W4, #1
00CB40  889784     MOV W4, StatFlgs4
12590:                                                         OptionsToMass();
00CB42  070655     RCALL OptionsToMass
12591:                                                         MustTrmFlashMass=1;
00CB44  8095F4     MOV 0x12BE, W4
00CB46  A02004     BSET W4, #2
00CB48  8895F4     MOV W4, 0x12BE
12592:                                                     break;
00CB4A  370249     BRA 0xCFDE
12593:                                                     
12594:                                                     case 97:
12595:                                                         LightOn=0;
00CB4C  809774     MOV StatFlgs3, W4
00CB4E  A19004     BCLR W4, #9
00CB50  889774     MOV W4, StatFlgs3
12596:                                                         KeyLightStop=0;
00CB52  809784     MOV StatFlgs4, W4
00CB54  A10004     BCLR W4, #0
00CB56  889784     MOV W4, StatFlgs4
12597:                                                         KeyLightStopGabarit=0;
00CB58  809784     MOV StatFlgs4, W4
00CB5A  A11004     BCLR W4, #1
00CB5C  889784     MOV W4, StatFlgs4
12598:                                                         OptionsToMass();
00CB5E  070647     RCALL OptionsToMass
12599:                                                         MustTrmFlashMass=1;
00CB60  8095F4     MOV 0x12BE, W4
00CB62  A02004     BSET W4, #2
00CB64  8895F4     MOV W4, 0x12BE
12600:                                                     break;
00CB66  37023B     BRA 0xCFDE
12601:                                                     
12602:                                                    
12603:                                                    case 98:
12604:                                                         if (!Sensorless)
00CB68  809755     MOV StatFlgs1, W5
00CB6A  200204     MOV #0x20, W4
00CB6C  628204     AND W5, W4, W4
00CB6E  520FE0     SUB W4, #0x0, [W15]
00CB70  3A0009     BRA NZ, 0xCB84
12605:                                                         {
12606:                                                         SpeedControl=1;
00CB72  809754     MOV StatFlgs1, W4
00CB74  A01004     BSET W4, #1
00CB76  889754     MOV W4, StatFlgs1
12607:                                                         ECurr1Summ=0;
00CB78  B82260     MUL.UU W4, #0, W4
00CB7A  89F564     MOV W4, ECurr1Summ
00CB7C  89F575     MOV W5, 0x3EAE
12608:                                                         CurrentControlOnly=1;
00CB7E  809774     MOV StatFlgs3, W4
00CB80  A0A004     BSET W4, #10
00CB82  889774     MOV W4, StatFlgs3
12609:                                                         }
12610:                                                         OptionsToMass();
00CB84  070634     RCALL OptionsToMass
12611:                                                         MustTrmFlashMass=1;
00CB86  8095F4     MOV 0x12BE, W4
00CB88  A02004     BSET W4, #2
00CB8A  8895F4     MOV W4, 0x12BE
12612:                                                     break;
00CB8C  370228     BRA 0xCFDE
12613:             
12614:             
12615:                                                     case 99:
12616:                                                         {
12617:                                                         CurrentMaxCurrentOnly=RecBytes[3];
00CB8E  229294     MOV #0x2929, W4
00CB90  784214     MOV.B [W4], W4
00CB92  212F25     MOV #0x12F2, W5
00CB94  784A84     MOV.B W4, [W5]
12618:                                                         CurrentMaxCurrentOnlyWork=((float)CurrentMaxCurrentOnly*1000/**Crr1Corr*/)/CurrPerDigit;
00CB96  212F24     MOV #0x12F2, W4
00CB98  784214     MOV.B [W4], W4
00CB9A  FB8204     ZE W4, W4
00CB9C  200005     MOV #0x0, W5
00CB9E  BE0004     MOV.D W4, W0
00CBA0  022582     CALL ___floatunsisf
00CBA2  000000     NOP
00CBA4  BE0200     MOV.D W0, W4
00CBA6  200002     MOV #0x0, W2
00CBA8  2447A3     MOV #0x447A, W3
00CBAA  BE0004     MOV.D W4, W0
00CBAC  022630     CALL ___mulsf3
00CBAE  000000     NOP
00CBB0  BE0200     MOV.D W0, W4
00CBB2  BE0304     MOV.D W4, W6
00CBB4  8213C4     MOV CurrPerDigit, W4
00CBB6  8213D5     MOV 0x427A, W5
00CBB8  BE0104     MOV.D W4, W2
00CBBA  BE0006     MOV.D W6, W0
00CBBC  02245A     CALL ___divsf3
00CBBE  000000     NOP
00CBC0  BE0200     MOV.D W0, W4
00CBC2  898604     MOV W4, CurrentMaxCurrentOnlyWork
00CBC4  898615     MOV W5, 0x30C2
12619:                                                                 
12620:                                            
12621:                                                         OptionsToMass();
00CBC6  070613     RCALL OptionsToMass
12622:                                                         MustTrmFlashMass=1;
00CBC8  8095F4     MOV 0x12BE, W4
00CBCA  A02004     BSET W4, #2
00CBCC  8895F4     MOV W4, 0x12BE
12623:                                                         break;
00CBCE  370207     BRA 0xCFDE
12624:                                                         }
12625:                                                     case 100:
12626:                                                         {
12627:                                                         int Tm;
12628:                                                         Tm=(int)RecBytes[4];
00CBD0  2292A4     MOV #0x292A, W4
00CBD2  784214     MOV.B [W4], W4
00CBD4  FB8204     ZE W4, W4
00CBD6  98AF24     MOV W4, [W14+212]
12629:                                                         Tm=Tm<<8;
00CBD8  90AA2E     MOV [W14+212], W4
00CBDA  DD2248     SL W4, #8, W4
00CBDC  98AF24     MOV W4, [W14+212]
12630:                                                         Tm=Tm+RecBytes[3];
00CBDE  229294     MOV #0x2929, W4
00CBE0  784214     MOV.B [W4], W4
00CBE2  FB8204     ZE W4, W4
00CBE4  90AAAE     MOV [W14+212], W5
00CBE6  428204     ADD W5, W4, W4
00CBE8  98AF24     MOV W4, [W14+212]
12631:                                                         K_PWM_Nastr=Tm;
00CBEA  90AA2E     MOV [W14+212], W4
00CBEC  8A1384     MOV W4, K_PWM_Nastr
12632:                                            
12633:                                                         OptionsToMass();
00CBEE  0705FF     RCALL OptionsToMass
12634:                                                         MustTrmFlashMass=1;
00CBF0  8095F4     MOV 0x12BE, W4
00CBF2  A02004     BSET W4, #2
00CBF4  8895F4     MOV W4, 0x12BE
12635:                                                         break;
00CBF6  3701F3     BRA 0xCFDE
12636:                                                         }
12637:                                                     case 101:
12638:                                                         {
12639:                                                         int Tm;
12640:                                                         Tm=(int)RecBytes[4];
00CBF8  2292A4     MOV #0x292A, W4
00CBFA  784214     MOV.B [W4], W4
00CBFC  FB8204     ZE W4, W4
00CBFE  98AF34     MOV W4, [W14+214]
12641:                                                         Tm=Tm<<8;
00CC00  90AA3E     MOV [W14+214], W4
00CC02  DD2248     SL W4, #8, W4
00CC04  98AF34     MOV W4, [W14+214]
12642:                                                         Tm=Tm+RecBytes[3];
00CC06  229294     MOV #0x2929, W4
00CC08  784214     MOV.B [W4], W4
00CC0A  FB8204     ZE W4, W4
00CC0C  90AABE     MOV [W14+214], W5
00CC0E  428204     ADD W5, W4, W4
00CC10  98AF34     MOV W4, [W14+214]
12643:                                                         Khard=Tm;
00CC12  90AA3E     MOV [W14+214], W4
00CC14  888844     MOV W4, Khard
12644:                                            
12645:                                                         OptionsToMass();
00CC16  0705EB     RCALL OptionsToMass
12646:                                                         MustTrmFlashMass=1;
00CC18  8095F4     MOV 0x12BE, W4
00CC1A  A02004     BSET W4, #2
00CC1C  8895F4     MOV W4, 0x12BE
12647:                                                         break;
00CC1E  3701DF     BRA 0xCFDE
12648:                                                         }
12649:             
12650:                                                     case 105:
12651:                                                         {
12652:                                                         Crr1Corr=(float)RecBytes[3];
00CC20  229294     MOV #0x2929, W4
00CC22  784214     MOV.B [W4], W4
00CC24  FB8204     ZE W4, W4
00CC26  200005     MOV #0x0, W5
00CC28  BE0004     MOV.D W4, W0
00CC2A  022582     CALL ___floatunsisf
00CC2C  000000     NOP
00CC2E  BE0200     MOV.D W0, W4
00CC30  888854     MOV W4, Crr1Corr
00CC32  888865     MOV W5, 0x110C
12653:                                                         Crr1Corr=Crr1Corr/50;
00CC34  808854     MOV Crr1Corr, W4
00CC36  808865     MOV 0x110C, W5
00CC38  200002     MOV #0x0, W2
00CC3A  242483     MOV #0x4248, W3
00CC3C  BE0004     MOV.D W4, W0
00CC3E  02245A     CALL ___divsf3
00CC40  000000     NOP
00CC42  BE0200     MOV.D W0, W4
00CC44  888854     MOV W4, Crr1Corr
00CC46  888865     MOV W5, 0x110C
12654:                                                         OptionsToMass();
00CC48  0705D2     RCALL OptionsToMass
12655:                                                         MustTrmFlashMass=1;
00CC4A  8095F4     MOV 0x12BE, W4
00CC4C  A02004     BSET W4, #2
00CC4E  8895F4     MOV W4, 0x12BE
12656:                                                         break;
00CC50  3701C6     BRA 0xCFDE
12657:                                                         }
12658:                                                     case 106:
12659:                                                         {
12660:                                                         ButtonBreakOnly=1;
00CC52  809774     MOV StatFlgs3, W4
00CC54  A0C004     BSET W4, #12
00CC56  889774     MOV W4, StatFlgs3
12661:                                                         SmoothBreak=0;
00CC58  809744     MOV StatFlgs, W4
00CC5A  A15004     BCLR W4, #5
00CC5C  889744     MOV W4, StatFlgs
12662:                                                         OptionsToMass();
00CC5E  0705C7     RCALL OptionsToMass
12663:                                                         MustTrmFlashMass=1;
00CC60  8095F4     MOV 0x12BE, W4
00CC62  A02004     BSET W4, #2
00CC64  8895F4     MOV W4, 0x12BE
12664:                                                         break;
00CC66  3701BB     BRA 0xCFDE
12665:                                                         }
12666:                                                     
12667:                                                     case 107:
12668:                                                         {
12669:                                                         ButtonBreakOnly=0;
00CC68  809774     MOV StatFlgs3, W4
00CC6A  A1C004     BCLR W4, #12
00CC6C  889774     MOV W4, StatFlgs3
12670:                                                         SmoothBreak=1;
00CC6E  809744     MOV StatFlgs, W4
00CC70  A05004     BSET W4, #5
00CC72  889744     MOV W4, StatFlgs
12671:                                                         OptionsToMass();
00CC74  0705BC     RCALL OptionsToMass
12672:                                                         MustTrmFlashMass=1;
00CC76  8095F4     MOV 0x12BE, W4
00CC78  A02004     BSET W4, #2
00CC7A  8895F4     MOV W4, 0x12BE
12673:                                                         break;
00CC7C  3701B0     BRA 0xCFDE
12674:                                                         }
12675:                                                     case 108:
12676:                                                         {
12677:                                                         int Tm;
12678:                                                         Tm=(int)RecBytes[4];
00CC7E  2292A4     MOV #0x292A, W4
00CC80  784214     MOV.B [W4], W4
00CC82  FB8204     ZE W4, W4
00CC84  98AF44     MOV W4, [W14+216]
12679:                                                         Tm=Tm<<8;
00CC86  90AA4E     MOV [W14+216], W4
00CC88  DD2248     SL W4, #8, W4
00CC8A  98AF44     MOV W4, [W14+216]
12680:                                                         Tm=Tm+RecBytes[3];
00CC8C  229294     MOV #0x2929, W4
00CC8E  784214     MOV.B [W4], W4
00CC90  FB8204     ZE W4, W4
00CC92  90AACE     MOV [W14+216], W5
00CC94  428204     ADD W5, W4, W4
00CC96  98AF44     MOV W4, [W14+216]
12681:                                                         ButtonBreakOnlyPWM=Tm;
00CC98  90AA4E     MOV [W14+216], W4
00CC9A  8980D4     MOV W4, ButtonBreakOnlyPWM
12682:                                            
12683:                                                         OptionsToMass();
00CC9C  0705A8     RCALL OptionsToMass
12684:                                                         MustTrmFlashMass=1;
00CC9E  8095F4     MOV 0x12BE, W4
00CCA0  A02004     BSET W4, #2
00CCA2  8895F4     MOV W4, 0x12BE
12685:                                                         break;
00CCA4  37019C     BRA 0xCFDE
12686:                                                         }
12687:             
12688:                                                     case 109:
12689:                                                         {
12690:                                                         StpLights=1;
00CCA6  809774     MOV StatFlgs3, W4
00CCA8  A0D004     BSET W4, #13
00CCAA  889774     MOV W4, StatFlgs3
12691:                                                         OptionsToMass();
00CCAC  0705A0     RCALL OptionsToMass
12692:                                                         MustTrmFlashMass=1;
00CCAE  8095F4     MOV 0x12BE, W4
00CCB0  A02004     BSET W4, #2
00CCB2  8895F4     MOV W4, 0x12BE
12693:                                                         break;
00CCB4  370194     BRA 0xCFDE
12694:                                                         }
12695:             
12696:                                                     case 110:
12697:                                                         {
12698:                                                         StpLights=0;
00CCB6  809774     MOV StatFlgs3, W4
00CCB8  A1D004     BCLR W4, #13
00CCBA  889774     MOV W4, StatFlgs3
12699:                                                         OptionsToMass();
00CCBC  070598     RCALL OptionsToMass
12700:                                                         MustTrmFlashMass=1;
00CCBE  8095F4     MOV 0x12BE, W4
00CCC0  A02004     BSET W4, #2
00CCC2  8895F4     MOV W4, 0x12BE
12701:                                                         break;
00CCC4  37018C     BRA 0xCFDE
12702:                                                         }
12703:                                                     
12704:                                                     case 111:
12705:                                                         {
12706:                                                         int Tm;
12707:                                                         Tm=(int)RecBytes[4];
00CCC6  2292A4     MOV #0x292A, W4
00CCC8  784214     MOV.B [W4], W4
00CCCA  FB8204     ZE W4, W4
00CCCC  98AF54     MOV W4, [W14+218]
12708:                                                         Tm=Tm<<8;
00CCCE  90AA5E     MOV [W14+218], W4
00CCD0  DD2248     SL W4, #8, W4
00CCD2  98AF54     MOV W4, [W14+218]
12709:                                                         Tm=Tm+RecBytes[3];
00CCD4  229294     MOV #0x2929, W4
00CCD6  784214     MOV.B [W4], W4
00CCD8  FB8204     ZE W4, W4
00CCDA  90AADE     MOV [W14+218], W5
00CCDC  428204     ADD W5, W4, W4
00CCDE  98AF54     MOV W4, [W14+218]
12710:                                                         CntTurnOnConst=Tm;
00CCE0  90AA5E     MOV [W14+218], W4
00CCE2  8A0664     MOV W4, CntTurnOnConst
12711:                                            
12712:                                                         OptionsToMass();
00CCE4  070584     RCALL OptionsToMass
12713:                                                         MustTrmFlashMass=1;
00CCE6  8095F4     MOV 0x12BE, W4
00CCE8  A02004     BSET W4, #2
00CCEA  8895F4     MOV W4, 0x12BE
12714:                                                         break;
00CCEC  370178     BRA 0xCFDE
12715:                                                         }
12716:                                                     case 112:
12717:                                                         {
12718:                                                         int Tm;
12719:                                                         Tm=(int)RecBytes[4];
00CCEE  2292A4     MOV #0x292A, W4
00CCF0  784214     MOV.B [W4], W4
00CCF2  FB8204     ZE W4, W4
00CCF4  98AF64     MOV W4, [W14+220]
12720:                                                         Tm=Tm<<8;
00CCF6  90AA6E     MOV [W14+220], W4
00CCF8  DD2248     SL W4, #8, W4
00CCFA  98AF64     MOV W4, [W14+220]
12721:                                                         Tm=Tm+RecBytes[3];
00CCFC  229294     MOV #0x2929, W4
00CCFE  784214     MOV.B [W4], W4
00CD00  FB8204     ZE W4, W4
00CD02  90AAEE     MOV [W14+220], W5
00CD04  428204     ADD W5, W4, W4
00CD06  98AF64     MOV W4, [W14+220]
12722:                                                         CntTurnOffConst=Tm;
00CD08  90AA6E     MOV [W14+220], W4
00CD0A  8A0674     MOV W4, CntTurnOffConst
12723:                                            
12724:                                                         OptionsToMass();
00CD0C  070570     RCALL OptionsToMass
12725:                                                         MustTrmFlashMass=1;
00CD0E  8095F4     MOV 0x12BE, W4
00CD10  A02004     BSET W4, #2
00CD12  8895F4     MOV W4, 0x12BE
12726:                                                         break;
00CD14  370164     BRA 0xCFDE
12727:                                                         }
12728:             
12729:                                                     case 113:
12730:                                                         {
12731:                                                         TemperatureTYPE_FETs=RecBytes[3];;
00CD16  229294     MOV #0x2929, W4
00CD18  784214     MOV.B [W4], W4
00CD1A  22FB65     MOV #0x2FB6, W5
00CD1C  784A84     MOV.B W4, [W5]
12732:                                            
12733:                                                         OptionsToMass();
00CD1E  070567     RCALL OptionsToMass
12734:                                                         MustTrmFlashMass=1;
00CD20  8095F4     MOV 0x12BE, W4
00CD22  A02004     BSET W4, #2
00CD24  8895F4     MOV W4, 0x12BE
12735:                                                         break;
00CD26  37015B     BRA 0xCFDE
12736:                                                         }
12737:                                                     
12738:                                                     case 114:
12739:                                                         {
12740:                                                         TEST_PWM_KEYS=1;
00CD28  809654     MOV 0x12CA, W4
00CD2A  A0A004     BSET W4, #10
00CD2C  889654     MOV W4, 0x12CA
12741:                                                         StrongModeMem=1;
00CD2E  809764     MOV StatFlgs2, W4
00CD30  A02004     BSET W4, #2
00CD32  889764     MOV W4, StatFlgs2
12742:                                                         MixedMode=0;
00CD34  809744     MOV StatFlgs, W4
00CD36  A1B004     BCLR W4, #11
00CD38  889744     MOV W4, StatFlgs
12743:                                                         MixedMode2=0;
00CD3A  809764     MOV StatFlgs2, W4
00CD3C  A1B004     BCLR W4, #11
00CD3E  889764     MOV W4, StatFlgs2
12744:             
12745:                                                         VectorMem=0;
00CD40  809754     MOV StatFlgs1, W4
00CD42  A1A004     BCLR W4, #10
00CD44  889754     MOV W4, StatFlgs1
12746:                                                         Vector=0;
00CD46  809684     MOV Flgs5, W4
00CD48  A14004     BCLR W4, #4
00CD4A  889684     MOV W4, Flgs5
12747:                                                         RdSensors();
00CD4C  0751B4     RCALL RdSensors
12748:                                                         TrapeziumInit();
00CD4E  073B9B     RCALL TrapeziumInit
12749:             
12750:             
12751:                                                         OptionsToMass();
00CD50  07054E     RCALL OptionsToMass
12752:                                                         MustTrmFlashMass=1;
00CD52  8095F4     MOV 0x12BE, W4
00CD54  A02004     BSET W4, #2
00CD56  8895F4     MOV W4, 0x12BE
12753:                                                         
12754:                                                         PrevStrongMode=1;
00CD58  809694     MOV 0x12D2, W4
00CD5A  A0A004     BSET W4, #10
00CD5C  889694     MOV W4, 0x12D2
12755:                                                         StrongMode=1;
00CD5E  8095F4     MOV 0x12BE, W4
00CD60  A0E004     BSET W4, #14
00CD62  8895F4     MOV W4, 0x12BE
12756:                                                         
12757:                                                     
12758:                                                         break;
00CD64  37013C     BRA 0xCFDE
12759:                                                         }
12760:                                                     
12761:                                                     case 115:
12762:                                                         {
12763:                                                         TrapeziumInit();
00CD66  073B8F     RCALL TrapeziumInit
12764:                                                         TEST_PWM_KEYS=0;
00CD68  809654     MOV 0x12CA, W4
00CD6A  A1A004     BCLR W4, #10
00CD6C  889654     MOV W4, 0x12CA
12765:                                                         break;
00CD6E  370137     BRA 0xCFDE
12766:                                                         }
12767:             
12768:                                                     case 116:
12769:                                                         {
12770:                                                         TstPhase=RecBytes[3];
00CD70  229294     MOV #0x2929, W4
00CD72  784214     MOV.B [W4], W4
00CD74  22FB75     MOV #0x2FB7, W5
00CD76  784A84     MOV.B W4, [W5]
12771:                                                         if (TstPhase==0)
00CD78  22FB74     MOV #0x2FB7, W4
00CD7A  784214     MOV.B [W4], W4
00CD7C  524FE0     SUB.B W4, #0x0, [W15]
00CD7E  3A0003     BRA NZ, 0xCD86
12772:                                                         SensorTSTKeys=4;
00CD80  240225     MOV #0x4022, W5
00CD82  B3C044     MOV.B #0x4, W4
00CD84  784A84     MOV.B W4, [W5]
12773:                                                         if (TstPhase==1)
00CD86  22FB74     MOV #0x2FB7, W4
00CD88  784214     MOV.B [W4], W4
00CD8A  524FE1     SUB.B W4, #0x1, [W15]
00CD8C  3A0003     BRA NZ, 0xCD94
12774:                                                         SensorTSTKeys=1;
00CD8E  240225     MOV #0x4022, W5
00CD90  B3C014     MOV.B #0x1, W4
00CD92  784A84     MOV.B W4, [W5]
12775:                                                         if (TstPhase==2)
00CD94  22FB74     MOV #0x2FB7, W4
00CD96  784214     MOV.B [W4], W4
00CD98  524FE2     SUB.B W4, #0x2, [W15]
00CD9A  3A0003     BRA NZ, 0xCDA2
12776:                                                         SensorTSTKeys=2;
00CD9C  240225     MOV #0x4022, W5
00CD9E  B3C024     MOV.B #0x2, W4
00CDA0  784A84     MOV.B W4, [W5]
12777:                                                         OptionsToMass();
00CDA2  070525     RCALL OptionsToMass
12778:                                                         MustTrmFlashMass=1;
00CDA4  8095F4     MOV 0x12BE, W4
00CDA6  A02004     BSET W4, #2
00CDA8  8895F4     MOV W4, 0x12BE
12779:                                                         break;
00CDAA  370119     BRA 0xCFDE
12780:                                                         }
12781:                                                     
12782:                                                     case 117:
12783:                                                         {
12784:                                                         Vertical=1;
00CDAC  809774     MOV StatFlgs3, W4
00CDAE  A0B004     BSET W4, #11
00CDB0  889774     MOV W4, StatFlgs3
12785:                                                         OptionsToMass();
00CDB2  07051D     RCALL OptionsToMass
12786:                                                         MustTrmFlashMass=1;
00CDB4  8095F4     MOV 0x12BE, W4
00CDB6  A02004     BSET W4, #2
00CDB8  8895F4     MOV W4, 0x12BE
12787:                                                         break;
00CDBA  370111     BRA 0xCFDE
12788:                                                         }
12789:                                                     
12790:                                                     case 118:
12791:                                                         {
12792:                                                         Vertical=0;
00CDBC  809774     MOV StatFlgs3, W4
00CDBE  A1B004     BCLR W4, #11
00CDC0  889774     MOV W4, StatFlgs3
12793:                                                         OptionsToMass();
00CDC2  070515     RCALL OptionsToMass
12794:                                                         MustTrmFlashMass=1;
00CDC4  8095F4     MOV 0x12BE, W4
00CDC6  A02004     BSET W4, #2
00CDC8  8895F4     MOV W4, 0x12BE
12795:                                                         break;
00CDCA  370109     BRA 0xCFDE
12796:                                                         }
12797:                                                     
12798:                                                     
12799:                                                     case 119:
12800:                                                         {
12801:                                                         int Tm;
12802:                                                         Tm=(int)RecBytes[4];
00CDCC  2292A4     MOV #0x292A, W4
00CDCE  784214     MOV.B [W4], W4
00CDD0  FB8204     ZE W4, W4
00CDD2  98AF74     MOV W4, [W14+222]
12803:                                                         Tm=Tm<<8;
00CDD4  90AA7E     MOV [W14+222], W4
00CDD6  DD2248     SL W4, #8, W4
00CDD8  98AF74     MOV W4, [W14+222]
12804:                                                         Tm=Tm+RecBytes[3];
00CDDA  229294     MOV #0x2929, W4
00CDDC  784214     MOV.B [W4], W4
00CDDE  FB8204     ZE W4, W4
00CDE0  90AAFE     MOV [W14+222], W5
00CDE2  428204     ADD W5, W4, W4
00CDE4  98AF74     MOV W4, [W14+222]
12805:                                                         SpdStartLevel=Tm;
00CDE6  90AA7E     MOV [W14+222], W4
00CDE8  8899D4     MOV W4, SpdStartLevel
12806:                                                         SpdStartLevelFl=((float)SpdStartLevel)/ImpToKmH1_t;
00CDEA  8099D4     MOV SpdStartLevel, W4
00CDEC  200005     MOV #0x0, W5
00CDEE  BE0004     MOV.D W4, W0
00CDF0  022582     CALL ___floatunsisf
00CDF2  000000     NOP
00CDF4  BE0300     MOV.D W0, W6
00CDF6  817E24     MOV ImpToKmH1_t, W4
00CDF8  817E35     MOV 0x2FC6, W5
00CDFA  BE0104     MOV.D W4, W2
00CDFC  BE0006     MOV.D W6, W0
00CDFE  02245A     CALL ___divsf3
00CE00  000000     NOP
00CE02  BE0200     MOV.D W0, W4
00CE04  8956B4     MOV W4, SpdStartLevelFl
00CE06  8956C5     MOV W5, 0x2AD8
12807:                                                         
12808:                                                         
12809:                                                         OptionsToMass();
00CE08  0704F2     RCALL OptionsToMass
12810:                                                         MustTrmFlashMass=1;
00CE0A  8095F4     MOV 0x12BE, W4
00CE0C  A02004     BSET W4, #2
00CE0E  8895F4     MOV W4, 0x12BE
12811:                                                         break;
00CE10  3700E6     BRA 0xCFDE
12812:                                                         }
12813:             
12814:                                                     case 120:
12815:                                                         {
12816:                                                         int Tm;
12817:                                                         Tm=(int)RecBytes[4];
00CE12  2292A4     MOV #0x292A, W4
00CE14  784214     MOV.B [W4], W4
00CE16  FB8204     ZE W4, W4
00CE18  98B704     MOV W4, [W14+224]
12818:                                                         Tm=Tm<<8;
00CE1A  90B20E     MOV [W14+224], W4
00CE1C  DD2248     SL W4, #8, W4
00CE1E  98B704     MOV W4, [W14+224]
12819:                                                         Tm=Tm+RecBytes[3];
00CE20  229294     MOV #0x2929, W4
00CE22  784214     MOV.B [W4], W4
00CE24  FB8204     ZE W4, W4
00CE26  90B28E     MOV [W14+224], W5
00CE28  428204     ADD W5, W4, W4
00CE2A  98B704     MOV W4, [W14+224]
12820:                                                         Ki_PWM_ModeOff=Tm;
00CE2C  90B20E     MOV [W14+224], W4
00CE2E  DEA2CF     ASR W4, #15, W5
00CE30  BE0004     MOV.D W4, W0
00CE32  02257C     CALL ___floatsisf
00CE34  000000     NOP
00CE36  BE0200     MOV.D W0, W4
00CE38  8982C4     MOV W4, Ki_PWM_ModeOff
00CE3A  8982D5     MOV W5, 0x305A
12821:                                                         Ki_PWM_ModeOff=Ki_PWM_ModeOff/10000;
00CE3C  8182C4     MOV Ki_PWM_ModeOff, W4
00CE3E  8182D5     MOV 0x305A, W5
00CE40  240002     MOV #0x4000, W2
00CE42  2461C3     MOV #0x461C, W3
00CE44  BE0004     MOV.D W4, W0
00CE46  02245A     CALL ___divsf3
00CE48  000000     NOP
00CE4A  BE0200     MOV.D W0, W4
00CE4C  8982C4     MOV W4, Ki_PWM_ModeOff
00CE4E  8982D5     MOV W5, 0x305A
12822:                                                         OptionsToMass();
00CE50  0704CE     RCALL OptionsToMass
12823:                                                         MustTrmFlashMass=1;
00CE52  8095F4     MOV 0x12BE, W4
00CE54  A02004     BSET W4, #2
00CE56  8895F4     MOV W4, 0x12BE
12824:                                                         break;
00CE58  3700C2     BRA 0xCFDE
12825:                                                        }              
12826:                                                     
12827:                                                     case 121:
12828:                                                         {
12829:                                                         StrongModeSpdFilterOffMem=RecBytes[3];
00CE5A  229294     MOV #0x2929, W4
00CE5C  784214     MOV.B [W4], W4
00CE5E  22ADE5     MOV #0x2ADE, W5
00CE60  784A84     MOV.B W4, [W5]
12830:                                                         StrongModeSpdFilterOff=((float)StrongModeSpdFilterOffMem)/ImpToKmH1_t;
00CE62  22ADE4     MOV #0x2ADE, W4
00CE64  784214     MOV.B [W4], W4
00CE66  FB8204     ZE W4, W4
00CE68  200005     MOV #0x0, W5
00CE6A  BE0004     MOV.D W4, W0
00CE6C  022582     CALL ___floatunsisf
00CE6E  000000     NOP
00CE70  BE0300     MOV.D W0, W6
00CE72  817E24     MOV ImpToKmH1_t, W4
00CE74  817E35     MOV 0x2FC6, W5
00CE76  BE0104     MOV.D W4, W2
00CE78  BE0006     MOV.D W6, W0
00CE7A  02245A     CALL ___divsf3
00CE7C  000000     NOP
00CE7E  BE0200     MOV.D W0, W4
00CE80  8956D4     MOV W4, StrongModeSpdFilterOff
00CE82  8956E5     MOV W5, 0x2ADC
12831:                                                         OptionsToMass();
00CE84  0704B4     RCALL OptionsToMass
12832:                                                         MustTrmFlashMass=1;
00CE86  8095F4     MOV 0x12BE, W4
00CE88  A02004     BSET W4, #2
00CE8A  8895F4     MOV W4, 0x12BE
12833:                                                         break;
00CE8C  3700A8     BRA 0xCFDE
12834:                                                        }              
12835:                                                     case 122:
12836:                                                         {
12837:                                                         StrongModeBreakOff=1;
00CE8E  809774     MOV StatFlgs3, W4
00CE90  A0E004     BSET W4, #14
00CE92  889774     MOV W4, StatFlgs3
12838:                                                         StrongModeMotorOff=0;                                           
00CE94  809774     MOV StatFlgs3, W4
00CE96  A1F004     BCLR W4, #15
00CE98  889774     MOV W4, StatFlgs3
12839:                                                         OptionsToMass();
00CE9A  0704A9     RCALL OptionsToMass
12840:                                                         MustTrmFlashMass=1;
00CE9C  8095F4     MOV 0x12BE, W4
00CE9E  A02004     BSET W4, #2
00CEA0  8895F4     MOV W4, 0x12BE
12841:                                                         break;
00CEA2  37009D     BRA 0xCFDE
12842:                                                        }              
12843:                                                     case 123:
12844:                                                         {
12845:                                                         StrongModeBreakOff=0;
00CEA4  809774     MOV StatFlgs3, W4
00CEA6  A1E004     BCLR W4, #14
00CEA8  889774     MOV W4, StatFlgs3
12846:                                                         StrongModeMotorOff=1;                                           
00CEAA  809774     MOV StatFlgs3, W4
00CEAC  A0F004     BSET W4, #15
00CEAE  889774     MOV W4, StatFlgs3
12847:                                                         OptionsToMass();
00CEB0  07049E     RCALL OptionsToMass
12848:                                                         MustTrmFlashMass=1;
00CEB2  8095F4     MOV 0x12BE, W4
00CEB4  A02004     BSET W4, #2
00CEB6  8895F4     MOV W4, 0x12BE
12849:                                                         break;
00CEB8  370092     BRA 0xCFDE
12850:                                                        }              
12851:                                                     
12852:                                                     case 124:
12853:                                                         {
12854:                                                         StrongModeBreakOff=0;
00CEBA  809774     MOV StatFlgs3, W4
00CEBC  A1E004     BCLR W4, #14
00CEBE  889774     MOV W4, StatFlgs3
12855:                                                         StrongModeMotorOff=0;
00CEC0  809774     MOV StatFlgs3, W4
00CEC2  A1F004     BCLR W4, #15
00CEC4  889774     MOV W4, StatFlgs3
12856:                                                         OptionsToMass();
00CEC6  070493     RCALL OptionsToMass
12857:                                                         MustTrmFlashMass=1;
00CEC8  8095F4     MOV 0x12BE, W4
00CECA  A02004     BSET W4, #2
00CECC  8895F4     MOV W4, 0x12BE
12858:                                                         break;
00CECE  370087     BRA 0xCFDE
12859:                                                        }              
12860:                                                     case 125:
12861:                                                         {
12862:                                                         int Tm;
12863:                                                         Tm=(int)RecBytes[4];
00CED0  2292A4     MOV #0x292A, W4
00CED2  784214     MOV.B [W4], W4
00CED4  FB8204     ZE W4, W4
00CED6  98B714     MOV W4, [W14+226]
12864:                                                         Tm=Tm<<8;
00CED8  90B21E     MOV [W14+226], W4
00CEDA  DD2248     SL W4, #8, W4
00CEDC  98B714     MOV W4, [W14+226]
12865:                                                         Tm=Tm+RecBytes[3];
00CEDE  229294     MOV #0x2929, W4
00CEE0  784214     MOV.B [W4], W4
00CEE2  FB8204     ZE W4, W4
00CEE4  90B29E     MOV [W14+226], W5
00CEE6  428204     ADD W5, W4, W4
00CEE8  98B714     MOV W4, [W14+226]
12866:                                                         RegenOffMem=Tm;
00CEEA  90B21E     MOV [W14+226], W4
00CEEC  8980E4     MOV W4, RegenOffMem
12867:             #if !defined VECTOR
12868:             #if !defined ISOLATED
12869:                                            RegenOff=(unsigned int)((float)RegenOffMem*(float)38.388);
12870:             #else
12871:                                            RegenOff=(unsigned int)((float)RegenOffMem/(float)0.4167965);
12872:             #endif
12873:             #else
12874:                                            RegenOff=(unsigned int)((float)RegenOffMem*(float)38.388);
00CEEE  8180E4     MOV RegenOffMem, W4
00CEF0  200005     MOV #0x0, W5
00CEF2  BE0004     MOV.D W4, W0
00CEF4  022582     CALL ___floatunsisf
00CEF6  000000     NOP
00CEF8  BE0200     MOV.D W0, W4
00CEFA  28D502     MOV #0x8D50, W2
00CEFC  242193     MOV #0x4219, W3
00CEFE  BE0004     MOV.D W4, W0
00CF00  022630     CALL ___mulsf3
00CF02  000000     NOP
00CF04  BE0200     MOV.D W0, W4
00CF06  BE0004     MOV.D W4, W0
00CF08  022546     CALL ___fixunssfsi
00CF0A  000000     NOP
00CF0C  BE0200     MOV.D W0, W4
00CF0E  780204     MOV W4, W4
00CF10  8980F4     MOV W4, RegenOff
12875:             #endif
12876:                                            
12877:                                            
12878:                   
12879:                                                         OptionsToMass();
00CF12  07046D     RCALL OptionsToMass
12880:                                                         MustTrmFlashMass=1;
00CF14  8095F4     MOV 0x12BE, W4
00CF16  A02004     BSET W4, #2
00CF18  8895F4     MOV W4, 0x12BE
12881:                                                         break;
00CF1A  370061     BRA 0xCFDE
12882:                                                        }              
12883:              
12884:                                                     case 126:
12885:                                                         LightOn=0;
00CF1C  809774     MOV StatFlgs3, W4
00CF1E  A19004     BCLR W4, #9
00CF20  889774     MOV W4, StatFlgs3
12886:                                                         KeyLightStop=1;
00CF22  809784     MOV StatFlgs4, W4
00CF24  A00004     BSET W4, #0
00CF26  889784     MOV W4, StatFlgs4
12887:                                                         KeyLightStopGabarit=0;
00CF28  809784     MOV StatFlgs4, W4
00CF2A  A11004     BCLR W4, #1
00CF2C  889784     MOV W4, StatFlgs4
12888:                                                         OptionsToMass();
00CF2E  07045F     RCALL OptionsToMass
12889:                                                         MustTrmFlashMass=1;
00CF30  8095F4     MOV 0x12BE, W4
00CF32  A02004     BSET W4, #2
00CF34  8895F4     MOV W4, 0x12BE
12890:                                                     break;
00CF36  370053     BRA 0xCFDE
12891:                                                     case 127:
12892:                                                         {
12893:                                                         KeyLightBrightness=RecBytes[3];
00CF38  229294     MOV #0x2929, W4
00CF3A  784214     MOV.B [W4], W4
00CF3C  22FAE5     MOV #0x2FAE, W5
00CF3E  784A84     MOV.B W4, [W5]
12894:                                                         if (OC3R!=0)
00CF40  8048D4     MOV OC3R, W4
00CF42  520FE0     SUB W4, #0x0, [W15]
00CF44  320005     BRA Z, 0xCF50
12895:                                                             OC3R=((unsigned int)KeyLightBrightness)<<8;
00CF46  22FAE4     MOV #0x2FAE, W4
00CF48  784214     MOV.B [W4], W4
00CF4A  FB8204     ZE W4, W4
00CF4C  DD2248     SL W4, #8, W4
00CF4E  8848D4     MOV W4, OC3R
12896:                                                         OptionsToMass();
00CF50  07044E     RCALL OptionsToMass
12897:                                                         MustTrmFlashMass=1;
00CF52  8095F4     MOV 0x12BE, W4
00CF54  A02004     BSET W4, #2
00CF56  8895F4     MOV W4, 0x12BE
12898:                                                         break;
00CF58  370042     BRA 0xCFDE
12899:                                                        }              
12900:                                                     case 128:
12901:                                                         LightOn=0;
00CF5A  809774     MOV StatFlgs3, W4
00CF5C  A19004     BCLR W4, #9
00CF5E  889774     MOV W4, StatFlgs3
12902:                                                         KeyLightStop=0;
00CF60  809784     MOV StatFlgs4, W4
00CF62  A10004     BCLR W4, #0
00CF64  889784     MOV W4, StatFlgs4
12903:                                                         KeyLightStopGabarit=1;
00CF66  809784     MOV StatFlgs4, W4
00CF68  A01004     BSET W4, #1
00CF6A  889784     MOV W4, StatFlgs4
12904:                                                         OptionsToMass();
00CF6C  070440     RCALL OptionsToMass
12905:                                                         MustTrmFlashMass=1;
00CF6E  8095F4     MOV 0x12BE, W4
00CF70  A02004     BSET W4, #2
00CF72  8895F4     MOV W4, 0x12BE
12906:                                                     break;
00CF74  370034     BRA 0xCFDE
12907:             
12908:                                                     case 129:
12909:                                                         MigStop=1;
00CF76  809784     MOV StatFlgs4, W4
00CF78  A02004     BSET W4, #2
00CF7A  889784     MOV W4, StatFlgs4
12910:                                                         OptionsToMass();
00CF7C  070438     RCALL OptionsToMass
12911:                                                         MustTrmFlashMass=1;
00CF7E  8095F4     MOV 0x12BE, W4
00CF80  A02004     BSET W4, #2
00CF82  8895F4     MOV W4, 0x12BE
12912:                                                     break;
00CF84  37002C     BRA 0xCFDE
12913:                                                     case 130:
12914:                                                         MigStop=0;
00CF86  809784     MOV StatFlgs4, W4
00CF88  A12004     BCLR W4, #2
00CF8A  889784     MOV W4, StatFlgs4
12915:                                                         OptionsToMass();
00CF8C  070430     RCALL OptionsToMass
12916:                                                         MustTrmFlashMass=1;
00CF8E  8095F4     MOV 0x12BE, W4
00CF90  A02004     BSET W4, #2
00CF92  8895F4     MOV W4, 0x12BE
12917:                                                     break;
00CF94  370024     BRA 0xCFDE
12918:                                                     
12919:                                                     case 131:
12920:                                                         AutoNastroykaState=30;
00CF96  2001E4     MOV #0x1E, W4
00CF98  89BEF4     MOV W4, AutoNastroykaState
12921:                                                         AutoNastroykaCMFStart(29);
00CF9A  2001D0     MOV #0x1D, W0
00CF9C  077EC9     RCALL AutoNastroykaCMFStart
12922:                                                     break;
00CF9E  37001F     BRA 0xCFDE
12923:                                                     
12924:                                                     case 132:
12925:                                                         AutoNastroykaState=32;
00CFA0  200204     MOV #0x20, W4
00CFA2  89BEF4     MOV W4, AutoNastroykaState
12926:                                                         AutoNastroykaCMFStart(31);
00CFA4  2001F0     MOV #0x1F, W0
00CFA6  077EC4     RCALL AutoNastroykaCMFStart
12927:                                                     break;
00CFA8  37001A     BRA 0xCFDE
12928:                                                     case 133:
12929:                                                         AutoNastroykaState=27;
00CFAA  2001B4     MOV #0x1B, W4
00CFAC  89BEF4     MOV W4, AutoNastroykaState
12930:                                                     break;
00CFAE  370017     BRA 0xCFDE
12931:                                                     
12932:                                                     case 134:
12933:                                                         {
12934:                                                         int Tm;
12935:                                                         Tm=(int)RecBytes[4];
00CFB0  2292A4     MOV #0x292A, W4
00CFB2  784214     MOV.B [W4], W4
00CFB4  FB8204     ZE W4, W4
00CFB6  98B724     MOV W4, [W14+228]
12936:                                                         Tm=Tm<<8;
00CFB8  90B22E     MOV [W14+228], W4
00CFBA  DD2248     SL W4, #8, W4
00CFBC  98B724     MOV W4, [W14+228]
12937:                                                         Tm=Tm+RecBytes[3];
00CFBE  229294     MOV #0x2929, W4
00CFC0  784214     MOV.B [W4], W4
00CFC2  FB8204     ZE W4, W4
00CFC4  90B2AE     MOV [W14+228], W5
00CFC6  428204     ADD W5, W4, W4
00CFC8  98B724     MOV W4, [W14+228]
12938:                                                         ButtonBreakOnlyTime=Tm;
00CFCA  90B22E     MOV [W14+228], W4
00CFCC  898414     MOV W4, ButtonBreakOnlyTime
12939:                                                         OptionsToMass();
00CFCE  07040F     RCALL OptionsToMass
12940:                                                         MustTrmFlashMass=1;
00CFD0  8095F4     MOV 0x12BE, W4
00CFD2  A02004     BSET W4, #2
00CFD4  8895F4     MOV W4, 0x12BE
12941:                                                         break;
00CFD6  370003     BRA 0xCFDE
12942:                                                        }              
12943:                                                     
12944:                                                     
12945:                                                     
12946:                                                }
12947:             
12948:                          
12949:             
12950:                                            break;
00CFDE  000000     NOP
00CFE0  370031     BRA 0xD044
00D03E  000000     NOP
00D040  370001     BRA 0xD044
00D042  000000     NOP
12951:                                         }
12952:             
12953:                        
12954:             
12955:                                     }
12956:             }
12957:             
12958:             }
00D044  BE044F     MOV.D [--W15], W8
00D046  FA8000     ULNK
00D048  060000     RETURN
12959:             
12960:             
12961:             
12962:             void InitOC4(void)
12963:             {
00D04A  FA0000     LNK #0x0
12964:             OC4CON1=0;
00D04C  EB0200     CLR W4
00D04E  8848F4     MOV W4, OC4CON1
12965:             OC4CON2=0;
00D050  EB0200     CLR W4
00D052  884904     MOV W4, OC4CON2
12966:             OC4CON1bits.OCTSEL = 0x07;
00D054  8048F4     MOV OC4CON1, W4
00D056  A0A004     BSET W4, #10
00D058  A0B004     BSET W4, #11
00D05A  A0C004     BSET W4, #12
00D05C  8848F4     MOV W4, OC4CON1
12967:             OC4CON1bits.OCSIDL=1;
00D05E  A8A91F     BSET 0x91F, #5
12968:             OC4R=1;
00D060  200014     MOV #0x1, W4
00D062  884924     MOV W4, OC4R
12969:             OC4RS=2;//Min -> 2   Max -> 8007
00D064  200024     MOV #0x2, W4
00D066  884914     MOV W4, OC4RS
12970:             OC4CON2bits.OCTRIG=1;
00D068  A8E920     BSET OC4CON2, #7
12971:             
12972:             IEC1bits.OC4IE=0;//????????? ??????????
00D06A  A94823     BCLR 0x823, #2
12973:             IPC6bits.OC4IP=2;
00D06C  804264     MOV IPC6, W4
00D06E  A18004     BCLR W4, #8
00D070  A09004     BSET W4, #9
00D072  A1A004     BCLR W4, #10
00D074  884264     MOV W4, IPC6
12974:             
12975:             OC4CON2bits.SYNCSEL=0xd;
00D076  804905     MOV OC4CON2, W5
00D078  2FFE04     MOV #0xFFE0, W4
00D07A  628204     AND W5, W4, W4
00D07C  B300D4     IOR #0xD, W4
00D07E  884904     MOV W4, OC4CON2
12976:             OC4CON1bits.TRIGMODE=1;
00D080  A8691E     BSET OC4CON1, #3
12977:             OC4CON1bits.OCM=7;//3;
00D082  8048F4     MOV OC4CON1, W4
00D084  A00004     BSET W4, #0
00D086  A01004     BSET W4, #1
00D088  A02004     BSET W4, #2
00D08A  8848F4     MOV W4, OC4CON1
12978:             }
00D08C  FA8000     ULNK
00D08E  060000     RETURN
12979:             
12980:             
12981:             void __attribute__((interrupt, auto_psv)) _OC4Interrupt()
12982:             {
00D090  F80036     PUSH RCOUNT
00D092  BE9F80     MOV.D W0, [W15++]
00D094  BE9F82     MOV.D W2, [W15++]
00D096  BE9F84     MOV.D W4, [W15++]
00D098  BE9F86     MOV.D W6, [W15++]
00D09A  F80032     PUSH DSRPAG
00D09C  202000     MOV #0x200, W0
00D09E  880190     MOV W0, DSRPAG
00D0A0  000000     NOP
00D0A2  FA0000     LNK #0x0
12983:             //if (IFS1bits.OC4IF)
12984:             //IFS1bits.OC4IF=0;
12985:             IEC1bits.OC4IE=0;
00D0A4  A94823     BCLR 0x823, #2
12986:             if (InitReady)
00D0A6  809665     MOV Flgs4, W5
00D0A8  220004     MOV #0x2000, W4
00D0AA  628204     AND W5, W4, W4
00D0AC  520FE0     SUB W4, #0x0, [W15]
00D0AE  320001     BRA Z, 0xD0B2
12987:             {
12988:             SegMain();
00D0B0  07B19E     RCALL SegMain
12989:             }
12990:             }
00D0B2  FA8000     ULNK
00D0B4  F90032     POP DSRPAG
00D0B6  BE034F     MOV.D [--W15], W6
00D0B8  BE024F     MOV.D [--W15], W4
00D0BA  BE014F     MOV.D [--W15], W2
00D0BC  BE004F     MOV.D [--W15], W0
00D0BE  F90036     POP RCOUNT
00D0C0  064000     RETFIE
12991:             
12992:             
12993:             
12994:             
12995:             
12996:             // ACC SPI
12997:             
12998:             
12999:             static void ConfigureSpiAcc(void)
13000:             {
00D0C2  FA0000     LNK #0x0
13001:                 /*----------------------------------------------------------------*/
13002:                 /* After we save context, configure SPI for MRF24W communications */
13003:                 /*----------------------------------------------------------------*/
13004:                 /* enable the SPI clocks            */
13005:                 /* set as master                    */
13006:                 /* clock idles high                 */
13007:                 /* ms bit first                     */
13008:                 /* 8 bit tranfer length             */
13009:                 /* data changes on falling edge     */
13010:                 /* data is sampled on rising edge   */
13011:                 /* set the clock divider            */
13012:                     ACC_SPICON1 = 0x0278;//0x027B;    // Fcy Primary prescaler 1:1, secondary prescaler 2:1, CKP=1, CKE=0, SMP=1
00D0C4  202784     MOV #0x278, W4
00D0C6  881614     MOV W4, SPI4CON1
13013:                     ACC_SPICON2 = 0x0000;
00D0C8  EB0200     CLR W4
00D0CA  881624     MOV W4, SPI4CON2
13014:                     ACC_SPISTAT = 0x8000;    // Enable the module
00D0CC  280004     MOV #0x8000, W4
00D0CE  881604     MOV W4, SPI4STAT
13015:                     ACC_SPISTATbits.SISEL=1;
00D0D0  801604     MOV SPI4STAT, W4
00D0D2  A02004     BSET W4, #2
00D0D4  A13004     BCLR W4, #3
00D0D6  A14004     BCLR W4, #4
00D0D8  881604     MOV W4, SPI4STAT
13016:                     ACC_SPI_IF=0;
00D0DA  A9680F     BCLR 0x80F, #3
13017:             
13018:             
13019:             }
00D0DC  FA8000     ULNK
00D0DE  060000     RETURN
13020:             
13021:                #define ClearSPIAccDoneFlag()
13022:                 static inline __attribute__((__always_inline__)) void WaitForDataByteAcc( void )
13023:                 {
13024:                     while ((ACC_SPISTATbits.SPITBF == 1) || (ACC_SPISTATbits.SPIRBF == 0));
13025:                 }
13026:             
13027:             
13028:             
13029:             
13030:             
13031:             void InitAccSPI(void)
13032:             {
00D0E0  FA0000     LNK #0x0
13033:             
13034:             
13035:                     ANSELAbits.ANSA6=0;
00D0E2  A9CE0E     BCLR ANSELA, #6
13036:             
13037:                     ACC_INT1_TRIS=1;
00D0E4  A8EE30     BSET TRISD, #7
13038:             
13039:             #if !defined VECTORMS
13040:                     ACC_SCK_TRIS=0;
13041:                     ACC_SCK_RPOR=0b100011;//6;
13042:                     ACC_dsPICSDO_TRIS=0;
13043:                     ACC_dsPICSDO_RPOR=0b100010;//5;
13044:             #endif
13045:             
13046:                     ACC_dsPICSDI_TRIS=1;
00D0E6  A82E50     BSET TRISF, #1
13047:                     RPINR31bits.SDI4R = ACC_dsPICSDI_RPINR;
00D0E8  8036F5     MOV RPINR31, W5
00D0EA  2FF804     MOV #0xFF80, W4
00D0EC  628284     AND W5, W4, W5
00D0EE  200614     MOV #0x61, W4
00D0F0  728204     IOR W5, W4, W4
00D0F2  8836F4     MOV W4, RPINR31
13048:             
13049:                     ACC_CS_IO=1;
00D0F4  A80E54     BSET LATF, #0
13050:                     ACC_CS_TRIS=0;
00D0F6  A90E50     BCLR TRISF, #0
13051:             
13052:             
13053:             
13054:                 /* enable the spi interrupt */
13055:                     ACC_SPI_IE = 1;
00D0F8  A8682F     BSET 0x82F, #3
13056:             
13057:             
13058:                 // Set up the SPI module on the PIC for communications with the Acc
13059:                 ACC_CS_IO       = 1;
00D0FA  A80E54     BSET LATF, #0
13060:                 ACC_CS_TRIS     = 0;     // Drive SPI MRF24W chip select pin
00D0FC  A90E50     BCLR TRISF, #0
13061:             
13062:                 ConfigureSpiAcc();
00D0FE  07FFE1     RCALL _ConfigureSpiAcc
13063:             
13064:                 ClearSPIAccDoneFlag();
13065:                 IPC30bits.SPI4IP=3;
00D100  8043E4     MOV IPC30, W4
00D102  A0C004     BSET W4, #12
00D104  A0D004     BSET W4, #13
00D106  A1E004     BCLR W4, #14
00D108  8843E4     MOV W4, IPC30
13066:             }
00D10A  FA8000     ULNK
00D10C  060000     RETURN
13067:             
13068:             
13069:             
13070:             
13071:             
13072:             void __attribute__((interrupt, auto_psv))  _SPI4Interrupt( void )
13073:             {
00D10E  BE9F84     MOV.D W4, [W15++]
00D110  781F86     MOV W6, [W15++]
00D112  F80032     PUSH DSRPAG
00D114  202004     MOV #0x200, W4
00D116  880194     MOV W4, DSRPAG
00D118  000000     NOP
00D11A  FA0000     LNK #0x0
13074:                 ACC_SPI_IF=0;
00D11C  A9680F     BCLR 0x80F, #3
13075:                 Acc_rxBuf[SPIRxCnt]=ACC_SSPBUF;
00D11E  80BD05     MOV SPIRxCnt, W5
00D120  801644     MOV SPI4BUF, W4
00D122  784204     MOV.B W4, W4
00D124  2177F6     MOV #0x177F, W6
00D126  430285     ADD W6, W5, W5
00D128  784A84     MOV.B W4, [W5]
13076:                     SPIRxCnt++;
00D12A  80BD04     MOV SPIRxCnt, W4
00D12C  E80204     INC W4, W4
00D12E  88BD04     MOV W4, SPIRxCnt
13077:                     if (SPIRxCnt<SPIAccbyteCount)
00D130  80BD05     MOV SPIRxCnt, W5
00D132  80BCF4     MOV SPIAccbyteCount, W4
00D134  528F84     SUB W5, W4, [W15]
00D136  310006     BRA C, 0xD144
13078:                 ACC_SSPBUF = Acc_txBuf[SPIRxCnt];
00D138  80BD04     MOV SPIRxCnt, W4
00D13A  217615     MOV #0x1761, W5
00D13C  428204     ADD W5, W4, W4
00D13E  784214     MOV.B [W4], W4
00D140  FB8204     ZE W4, W4
00D142  881644     MOV W4, SPI4BUF
13079:             
13080:                 if (SPIRxCnt>=SPIAccbyteCount)
13081:                 {
13082:             #if !defined VECTOR_MPU_6000        
13083:                     HvAccData=1;
13084:                     WF_SpiAccDisableChipSelect();
13085:             
13086:                 AccX=Acc_rxBuf[3];
13087:                 AccX=AccX<<8;
13088:                 AccX=AccX+Acc_rxBuf[2];
13089:             
13090:                 AccY=Acc_rxBuf[5];
13091:                 AccY=AccY<<8;
13092:                 AccY=AccY+Acc_rxBuf[4];
13093:             
13094:             
13095:                 AccZ=Acc_rxBuf[7];
13096:                 AccZ=AccZ<<8;
13097:                 AccZ=AccZ+Acc_rxBuf[6];
13098:             
13099:                 AccXFl=(int)(AccX-CalibrationAccX);
13100:                 AccYFl=(int)(AccY-CalibrationAccY);
13101:                 AccZFl=(int)(AccZ-CalibrationAccZ);
13102:             
13103:             
13104:             
13105:             //    IEC1bits.OC4IE=1;
13106:             #endif
13107:                 }
13108:             }
00D144  FA8000     ULNK
00D146  F90032     POP DSRPAG
00D148  78034F     MOV [--W15], W6
00D14A  BE024F     MOV.D [--W15], W4
00D14C  064000     RETFIE
13109:             
13110:             void TxRxSPI_ACC(unsigned int txLen)
13111:             {
00D14E  FA0002     LNK #0x2
00D150  780F00     MOV W0, [W14]
13112:             
13113:             
13114:                 while (SPIRxCnt<SPIAccbyteCount)
00D152  370003     BRA 0xD15A
00D15A  80BD05     MOV SPIRxCnt, W5
00D15C  80BCF4     MOV SPIAccbyteCount, W4
00D15E  528F84     SUB W5, W4, [W15]
00D160  39FFF9     BRA NC, 0xD154
13115:                 {
13116:                     Nop();
00D154  000000     NOP
13117:                     Nop();
00D156  000000     NOP
13118:                     Nop();
00D158  000000     NOP
13119:                 }
13120:             SPIAccbyteCount = txLen;
00D162  78021E     MOV [W14], W4
00D164  88BCF4     MOV W4, SPIAccbyteCount
13121:             SPIRxCnt=0;
00D166  EB0200     CLR W4
00D168  88BD04     MOV W4, SPIRxCnt
13122:             WF_SpiAccEnableChipSelect();
00D16A  070006     RCALL WF_SpiAccEnableChipSelect
13123:             ACC_SSPBUF = Acc_txBuf[0];
00D16C  217614     MOV #0x1761, W4
00D16E  784214     MOV.B [W4], W4
00D170  FB8204     ZE W4, W4
00D172  881644     MOV W4, SPI4BUF
13124:             }
00D174  FA8000     ULNK
00D176  060000     RETURN
13125:             
13126:             void WF_SpiAccEnableChipSelect(void)
13127:             {
00D178  FA0000     LNK #0x0
13128:             
13129:                 ACC_CS_IO = 0;
00D17A  A90E54     BCLR LATF, #0
13130:             
13131:             }
00D17C  FA8000     ULNK
00D17E  060000     RETURN
13132:             
13133:             void WF_SpiAccDisableChipSelect(void)
13134:             {
00D180  FA0000     LNK #0x0
13135:                     ACC_CS_IO = 1;
00D182  A80E54     BSET LATF, #0
13136:             }
00D184  FA8000     ULNK
00D186  060000     RETURN
13137:             
13138:             // END ACC SPI
13139:             
13140:             
13141:             
13142:             
13143:             // GYRO SPI
13144:             
13145:             /*
13146:             static void ConfigureSpiGyro(void)
13147:             {
13148:                     GYRO_SPICON1 = 0x0278;//0x027B;    // Fcy Primary prescaler 1:1, secondary prescaler 2:1, CKP=1, CKE=0, SMP=1
13149:                     GYRO_SPICON2 = 0x0000;
13150:                     GYRO_SPISTAT = 0x8000;    // Enable the module
13151:                     GYRO_SPISTATbits.SISEL=1;
13152:                     GYRO_SPI_IF=0;
13153:             
13154:             
13155:             }
13156:             */
13157:             static void ConfigureSpiGyro(void)
13158:             {
00D188  FA0000     LNK #0x0
13159:                 /*----------------------------------------------------------------*/
13160:                 /* After we save context, configure SPI for MRF24W communications */
13161:                 /*----------------------------------------------------------------*/
13162:                 /* enable the SPI clocks            */
13163:                 /* set as master                    */
13164:                 /* clock idles high                 */
13165:                 /* ms bit first                     */
13166:                 /* 8 bit tranfer length             */
13167:                 /* data changes on falling edge     */
13168:                 /* data is sampled on rising edge   */
13169:                 /* set the clock divider            */
13170:                     GYRO_SPICON1 = 0x0278;//0x027B;    // Fcy Primary prescaler 1:1, secondary prescaler 2:1, CKP=1, CKE=0, SMP=1
00D18A  202784     MOV #0x278, W4
00D18C  881514     MOV W4, SPI3CON1
13171:                     GYRO_SPICON2 = 0x0000;
00D18E  EB0200     CLR W4
00D190  881524     MOV W4, SPI3CON2
13172:                     GYRO_SPISTAT = 0x8000;    // Enable the module
00D192  280004     MOV #0x8000, W4
00D194  881504     MOV W4, SPI3STAT
13173:             }
00D196  FA8000     ULNK
00D198  060000     RETURN
13174:             
13175:             
13176:             
13177:                #define ClearSPIGyroDoneFlag()
13178:                 static inline __attribute__((__always_inline__)) void WaitForDataByteGyro( void )
13179:                 {
13180:                     while ((GYRO_SPISTATbits.SPITBF == 1) || (GYRO_SPISTATbits.SPIRBF == 0));
13181:                 }
13182:             
13183:             
13184:             
13185:             
13186:             
13187:             
13188:             void InitGyroSPI(void)
13189:             {
00D19A  FA0000     LNK #0x0
13190:             
13191:                     GYRO_INT1_TRIS=1;
00D19C  A86E31     BSET 0xE31, #3
13192:             
13193:                     GYRO_SCK_TRIS=0;
00D19E  A94E30     BCLR TRISD, #2
13194:                     GYRO_SCK_RPOR=0b100000;//6;
00D1A0  803415     MOV RPOR1, W5
00D1A2  2FFC04     MOV #0xFFC0, W4
00D1A4  628284     AND W5, W4, W5
00D1A6  200204     MOV #0x20, W4
00D1A8  728204     IOR W5, W4, W4
00D1AA  883414     MOV W4, RPOR1
13195:             
13196:                     GYRO_dsPICSDO_TRIS=0;
00D1AC  A92E30     BCLR TRISD, #1
13197:                     GYRO_dsPICSDO_RPOR=0b011111;//5
00D1AE  803405     MOV RPOR0, W5
00D1B0  2C0FF4     MOV #0xC0FF, W4
00D1B2  628284     AND W5, W4, W5
00D1B4  21F004     MOV #0x1F00, W4
00D1B6  728204     IOR W5, W4, W4
00D1B8  883404     MOV W4, RPOR0
13198:             
13199:                     GYRO_dsPICSDI_ANSEL=0;
00D1BA  A9CE2F     BCLR 0xE2F, #6
13200:                     GYRO_dsPICSDI_TRIS=1;
00D1BC  A8CE21     BSET 0xE21, #6
13201:                     RPINR29bits.SDI3R = GYRO_dsPICSDI_RPINR;
00D1BE  8036D5     MOV RPINR29, W5
00D1C0  2FF804     MOV #0xFF80, W4
00D1C2  628284     AND W5, W4, W5
00D1C4  2003E4     MOV #0x3E, W4
00D1C6  728204     IOR W5, W4, W4
00D1C8  8836D4     MOV W4, RPINR29
13202:             
13203:             
13204:                     GYRO_CS_ANSEL=0;
00D1CA  A9EE3E     BCLR ANSELD, #7
13205:                     GYRO_CS_IO=1;
00D1CC  A8EE34     BSET LATD, #7
13206:                     GYRO_CS_TRIS=0;
00D1CE  A9EE30     BCLR TRISD, #7
13207:             
13208:             
13209:             
13210:                 /* disable the spi interrupt */
13211:                     GYRO_SPI_IE = 1;
00D1D0  A8682B     BSET 0x82B, #3
13212:             
13213:                 // Set up the SPI module on the PIC for communications with the Acc
13214:                 GYRO_CS_IO       = 1;
00D1D2  A8EE34     BSET LATD, #7
13215:                 GYRO_CS_TRIS     = 0;     // Drive SPI MRF24W chip select pin
00D1D4  A9EE30     BCLR TRISD, #7
13216:             
13217:                 ConfigureSpiGyro();
00D1D6  07FFD8     RCALL _ConfigureSpiGyro
13218:             
13219:                 IPC22bits.SPI3IP=3;
00D1D8  804364     MOV IPC22, W4
00D1DA  A0C004     BSET W4, #12
00D1DC  A0D004     BSET W4, #13
00D1DE  A1E004     BCLR W4, #14
00D1E0  884364     MOV W4, IPC22
13220:                 ClearSPIGyroDoneFlag();
13221:             }
00D1E2  FA8000     ULNK
00D1E4  060000     RETURN
13222:             
13223:             
13224:             
13225:             //void __attribute__((interrupt, no_auto_psv)) _T3Interrupt( void )
13226:             void __attribute__((interrupt, auto_psv))  _SPI3Interrupt( void )
13227:             {
00D1E6  F80036     PUSH RCOUNT
00D1E8  BE9F80     MOV.D W0, [W15++]
00D1EA  BE9F82     MOV.D W2, [W15++]
00D1EC  BE9F84     MOV.D W4, [W15++]
00D1EE  BE9F86     MOV.D W6, [W15++]
00D1F0  F80032     PUSH DSRPAG
00D1F2  202000     MOV #0x200, W0
00D1F4  880190     MOV W0, DSRPAG
00D1F6  000000     NOP
00D1F8  FA0002     LNK #0x2
13228:                 int GyroYTmp;
13229:                 GYRO_SPI_IF=0;
00D1FA  A9680B     BCLR 0x80B, #3
13230:                 Gyro_rxBuf[SPIRxGyroCnt]=GYRO_SSPBUF;
00D1FC  80C075     MOV SPIRxGyroCnt, W5
00D1FE  801544     MOV SPI3BUF, W4
00D200  784204     MOV.B W4, W4
00D202  217ED6     MOV #0x17ED, W6
00D204  430285     ADD W6, W5, W5
00D206  784A84     MOV.B W4, [W5]
13231:                     SPIRxGyroCnt++;
00D208  80C074     MOV SPIRxGyroCnt, W4
00D20A  E80204     INC W4, W4
00D20C  88C074     MOV W4, SPIRxGyroCnt
13232:                     if (SPIRxGyroCnt<SPIGyrobyteCount)
00D20E  80C075     MOV SPIRxGyroCnt, W5
00D210  80C064     MOV SPIGyrobyteCount, W4
00D212  528F84     SUB W5, W4, [W15]
00D214  310006     BRA C, 0xD222
13233:                 GYRO_SSPBUF = Gyro_txBuf[SPIRxGyroCnt];
00D216  80C074     MOV SPIRxGyroCnt, W4
00D218  217CF5     MOV #0x17CF, W5
00D21A  428204     ADD W5, W4, W4
00D21C  784214     MOV.B [W4], W4
00D21E  FB8204     ZE W4, W4
00D220  881544     MOV W4, SPI3BUF
13234:             
13235:                 if (SPIRxGyroCnt>=SPIGyrobyteCount)
00D222  80C075     MOV SPIRxGyroCnt, W5
00D224  80C064     MOV SPIGyrobyteCount, W4
00D226  528F84     SUB W5, W4, [W15]
00D228  3900B7     BRA NC, 0xD398
13236:                 {
13237:             #if !defined VECTOR
13238:                     HvGyroData=1;
13239:                     WF_SpiGyroDisableChipSelect();
13240:                     if (!TemperatureFl)
13241:                     {
13242:             
13243:                 Temperature=Gyro_rxBuf[1];
13244:                 GyroX=Gyro_rxBuf[4];
13245:                 GyroX=GyroX<<8;
13246:                 GyroX=GyroX+Gyro_rxBuf[3];
13247:             
13248:                 GyroY=Gyro_rxBuf[6];
13249:                 GyroY=GyroY<<8;
13250:                 GyroY=GyroY+Gyro_rxBuf[5];
13251:             
13252:             
13253:                 GyroZ=Gyro_rxBuf[8];
13254:                 GyroZ=GyroZ<<8;
13255:                 GyroZ=GyroZ+Gyro_rxBuf[7];
13256:             
13257:                 GyroXFl=(float)(GyroX-CalibrationGyroX);
13258:                 GyroYFl=(float)(GyroY-CalibrationGyroY);
13259:                 GyroZFl=(float)(GyroZ-CalibrationGyroZ);
13260:             
13261:             
13262:                 //IEC1bits.OC4IE=1;
13263:             
13264:                 }
13265:                     else
13266:                     {
13267:                         TemperatureFl=0;
13268:                         Nop();
13269:                         Nop();
13270:                         Nop();
13271:                         Temperature=Gyro_rxBuf[1];
13272:                     }
13273:             #else
13274:                        WF_SpiGyroDisableChipSelect();
00D22A  0700D7     RCALL WF_SpiGyroDisableChipSelect
13275:             #if !defined LSM6DS33
13276:                 AccX=Gyro_rxBuf[1];
00D22C  217EE4     MOV #0x17EE, W4
00D22E  784214     MOV.B [W4], W4
00D230  FB8204     ZE W4, W4
00D232  88BD24     MOV W4, AccX
13277:                 AccX=AccX<<8;
00D234  80BD24     MOV AccX, W4
00D236  DD2248     SL W4, #8, W4
00D238  88BD24     MOV W4, AccX
13278:                 AccX=AccX+Gyro_rxBuf[2];
00D23A  217EF4     MOV #0x17EF, W4
00D23C  784214     MOV.B [W4], W4
00D23E  FB8284     ZE W4, W5
00D240  80BD24     MOV AccX, W4
00D242  428204     ADD W5, W4, W4
00D244  88BD24     MOV W4, AccX
13279:             
13280:                 AccY=Gyro_rxBuf[3];
00D246  217F04     MOV #0x17F0, W4
00D248  784214     MOV.B [W4], W4
00D24A  FB8204     ZE W4, W4
00D24C  88BD34     MOV W4, AccY
13281:                 AccY=AccY<<8;
00D24E  80BD34     MOV AccY, W4
00D250  DD2248     SL W4, #8, W4
00D252  88BD34     MOV W4, AccY
13282:                 AccY=AccY+Gyro_rxBuf[4];
00D254  217F14     MOV #0x17F1, W4
00D256  784214     MOV.B [W4], W4
00D258  FB8284     ZE W4, W5
00D25A  80BD34     MOV AccY, W4
00D25C  428204     ADD W5, W4, W4
00D25E  88BD34     MOV W4, AccY
13283:             
13284:                 
13285:                 AccZ=Gyro_rxBuf[5];
00D260  217F24     MOV #0x17F2, W4
00D262  784214     MOV.B [W4], W4
00D264  FB8204     ZE W4, W4
00D266  88BD44     MOV W4, AccZ
13286:                 AccZ=AccZ<<8;
00D268  80BD44     MOV AccZ, W4
00D26A  DD2248     SL W4, #8, W4
00D26C  88BD44     MOV W4, AccZ
13287:                 AccZ=AccZ+Gyro_rxBuf[6];
00D26E  217F34     MOV #0x17F3, W4
00D270  784214     MOV.B [W4], W4
00D272  FB8284     ZE W4, W5
00D274  80BD44     MOV AccZ, W4
00D276  428204     ADD W5, W4, W4
00D278  88BD44     MOV W4, AccZ
13288:             
13289:                 
13290:                 
13291:                 TemperatureMPU6000=Gyro_rxBuf[7];
00D27A  217F44     MOV #0x17F4, W4
00D27C  784214     MOV.B [W4], W4
00D27E  FB8204     ZE W4, W4
00D280  888784     MOV W4, TemperatureMPU6000
13292:                 TemperatureMPU6000=TemperatureMPU6000<<8;
00D282  808784     MOV TemperatureMPU6000, W4
00D284  DD2248     SL W4, #8, W4
00D286  888784     MOV W4, TemperatureMPU6000
13293:                 TemperatureMPU6000=TemperatureMPU6000+Gyro_rxBuf[8];
00D288  217F54     MOV #0x17F5, W4
00D28A  784214     MOV.B [W4], W4
00D28C  FB8284     ZE W4, W5
00D28E  808784     MOV TemperatureMPU6000, W4
00D290  428204     ADD W5, W4, W4
00D292  888784     MOV W4, TemperatureMPU6000
13294:             
13295:             
13296:                 GyroX=Gyro_rxBuf[9];
00D294  217F64     MOV #0x17F6, W4
00D296  784214     MOV.B [W4], W4
00D298  FB8204     ZE W4, W4
00D29A  88C0A4     MOV W4, GyroX
13297:                 GyroX=GyroX<<8;
00D29C  80C0A4     MOV GyroX, W4
00D29E  DD2248     SL W4, #8, W4
00D2A0  88C0A4     MOV W4, GyroX
13298:                 GyroX=GyroX+Gyro_rxBuf[10];
00D2A2  217F74     MOV #0x17F7, W4
00D2A4  784214     MOV.B [W4], W4
00D2A6  FB8284     ZE W4, W5
00D2A8  80C0A4     MOV GyroX, W4
00D2AA  428204     ADD W5, W4, W4
00D2AC  88C0A4     MOV W4, GyroX
13299:             
13300:                 GyroY=Gyro_rxBuf[11];
00D2AE  217F84     MOV #0x17F8, W4
00D2B0  784214     MOV.B [W4], W4
00D2B2  FB8204     ZE W4, W4
00D2B4  88C0C4     MOV W4, GyroY
13301:                 GyroY=GyroY<<8;
00D2B6  80C0C4     MOV GyroY, W4
00D2B8  DD2248     SL W4, #8, W4
00D2BA  88C0C4     MOV W4, GyroY
13302:                 GyroY=GyroY+Gyro_rxBuf[12];
00D2BC  217F94     MOV #0x17F9, W4
00D2BE  784214     MOV.B [W4], W4
00D2C0  FB8284     ZE W4, W5
00D2C2  80C0C4     MOV GyroY, W4
00D2C4  428204     ADD W5, W4, W4
00D2C6  88C0C4     MOV W4, GyroY
13303:             
13304:                 GyroZ=Gyro_rxBuf[13];
00D2C8  217FA4     MOV #0x17FA, W4
00D2CA  784214     MOV.B [W4], W4
00D2CC  FB8204     ZE W4, W4
00D2CE  88C0D4     MOV W4, GyroZ
13305:                 GyroZ=GyroZ<<8;
00D2D0  80C0D4     MOV GyroZ, W4
00D2D2  DD2248     SL W4, #8, W4
00D2D4  88C0D4     MOV W4, GyroZ
13306:                 GyroZ=GyroZ+Gyro_rxBuf[14];
00D2D6  217FB4     MOV #0x17FB, W4
00D2D8  784214     MOV.B [W4], W4
00D2DA  FB8284     ZE W4, W5
00D2DC  80C0D4     MOV GyroZ, W4
00D2DE  428204     ADD W5, W4, W4
00D2E0  88C0D4     MOV W4, GyroZ
13307:             
13308:                 GyroYTmp=GyroY;
00D2E2  80C0C4     MOV GyroY, W4
00D2E4  780F04     MOV W4, [W14]
13309:                 GyroY=GyroX;
00D2E6  80C0A4     MOV GyroX, W4
00D2E8  88C0C4     MOV W4, GyroY
13310:                 GyroX=-GyroYTmp;
00D2EA  EA021E     NEG [W14], W4
00D2EC  88C0A4     MOV W4, GyroX
13311:             
13312:             
13313:                 AccX=-AccX;
00D2EE  80BD24     MOV AccX, W4
00D2F0  EA0204     NEG W4, W4
00D2F2  88BD24     MOV W4, AccX
13314:                 AccY=-AccY;
00D2F4  80BD34     MOV AccY, W4
00D2F6  EA0204     NEG W4, W4
00D2F8  88BD34     MOV W4, AccY
13315:                 
13316:                 
13317:                 
13318:                 GyroXFl=(float)(GyroX-CalibrationGyroX);
00D2FA  80C0A5     MOV GyroX, W5
00D2FC  815554     MOV CalibrationGyroX, W4
00D2FE  528204     SUB W5, W4, W4
00D300  DEA2CF     ASR W4, #15, W5
00D302  BE0004     MOV.D W4, W0
00D304  02257C     CALL ___floatsisf
00D306  000000     NOP
00D308  BE0200     MOV.D W0, W4
00D30A  88C0E4     MOV W4, GyroXFl
00D30C  88C0F5     MOV W5, 0x181E
13319:                 GyroYFl=(float)(GyroY-CalibrationGyroY);
00D30E  80C0C5     MOV GyroY, W5
00D310  815564     MOV CalibrationGyroY, W4
00D312  528204     SUB W5, W4, W4
00D314  DEA2CF     ASR W4, #15, W5
00D316  BE0004     MOV.D W4, W0
00D318  02257C     CALL ___floatsisf
00D31A  000000     NOP
00D31C  BE0200     MOV.D W0, W4
00D31E  88C104     MOV W4, GyroYFl
00D320  88C115     MOV W5, 0x1822
13320:                 GyroZFl=(float)(GyroZ-CalibrationGyroZ);
00D322  80C0D5     MOV GyroZ, W5
00D324  815574     MOV CalibrationGyroZ, W4
00D326  528204     SUB W5, W4, W4
00D328  DEA2CF     ASR W4, #15, W5
00D32A  BE0004     MOV.D W4, W0
00D32C  02257C     CALL ___floatsisf
00D32E  000000     NOP
00D330  BE0200     MOV.D W0, W4
00D332  88C124     MOV W4, GyroZFl
00D334  88C135     MOV W5, 0x1826
13321:             
13322:             
13323:                 AccXFl=(float)(AccX-CalibrationAccX);
00D336  80BD25     MOV AccX, W5
00D338  815584     MOV CalibrationAccX, W4
00D33A  528204     SUB W5, W4, W4
00D33C  DEA2CF     ASR W4, #15, W5
00D33E  BE0004     MOV.D W4, W0
00D340  02257C     CALL ___floatsisf
00D342  000000     NOP
00D344  BE0200     MOV.D W0, W4
00D346  BE0004     MOV.D W4, W0
00D348  022504     CALL ___fixsfsi
00D34A  000000     NOP
00D34C  BE0200     MOV.D W0, W4
00D34E  780204     MOV W4, W4
00D350  88BD54     MOV W4, AccXFl
13324:                 AccYFl=(float)(AccY-CalibrationAccY);
00D352  80BD35     MOV AccY, W5
00D354  815594     MOV CalibrationAccY, W4
00D356  528204     SUB W5, W4, W4
00D358  DEA2CF     ASR W4, #15, W5
00D35A  BE0004     MOV.D W4, W0
00D35C  02257C     CALL ___floatsisf
00D35E  000000     NOP
00D360  BE0200     MOV.D W0, W4
00D362  BE0004     MOV.D W4, W0
00D364  022504     CALL ___fixsfsi
00D366  000000     NOP
00D368  BE0200     MOV.D W0, W4
00D36A  780204     MOV W4, W4
00D36C  88BD64     MOV W4, AccYFl
13325:                 AccZFl=(float)(AccZ-CalibrationAccZ);
00D36E  80BD45     MOV AccZ, W5
00D370  8155A4     MOV CalibrationAccZ, W4
00D372  528204     SUB W5, W4, W4
00D374  DEA2CF     ASR W4, #15, W5
00D376  BE0004     MOV.D W4, W0
00D378  02257C     CALL ___floatsisf
00D37A  000000     NOP
00D37C  BE0200     MOV.D W0, W4
00D37E  BE0004     MOV.D W4, W0
00D380  022504     CALL ___fixsfsi
00D382  000000     NOP
00D384  BE0200     MOV.D W0, W4
00D386  780204     MOV W4, W4
00D388  88BD74     MOV W4, AccZFl
13326:             
13327:             #else
13328:                 
13329:                 
13330:                 TemperatureMPU6000=Gyro_rxBuf[2];
13331:                 TemperatureMPU6000=TemperatureMPU6000<<8;
13332:                 TemperatureMPU6000=TemperatureMPU6000+Gyro_rxBuf[1];
13333:             
13334:             
13335:                 GyroX=Gyro_rxBuf[4];
13336:                 GyroX=GyroX<<8;
13337:                 GyroX=GyroX+Gyro_rxBuf[3];
13338:             
13339:                 GyroY=Gyro_rxBuf[6];
13340:                 GyroY=GyroY<<8;
13341:                 GyroY=GyroY+Gyro_rxBuf[5];
13342:             
13343:             
13344:                 GyroZ=Gyro_rxBuf[8];
13345:                 GyroZ=GyroZ<<8;
13346:                 GyroZ=GyroZ+Gyro_rxBuf[7];
13347:             
13348:                 
13349:                 
13350:                 AccX=Gyro_rxBuf[10];
13351:                 AccX=AccX<<8;
13352:                 AccX=AccX+Gyro_rxBuf[9];
13353:             
13354:                 AccY=Gyro_rxBuf[12];
13355:                 AccY=AccY<<8;
13356:                 AccY=AccY+Gyro_rxBuf[11];
13357:             
13358:             
13359:                 AccZ=Gyro_rxBuf[14];
13360:                 AccZ=AccZ<<8;
13361:                 AccZ=AccZ+Gyro_rxBuf[13];
13362:             
13363:                 
13364:             int GATmp;    
13365:                     
13366:                 GATmp=AccX;//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
13367:                 AccX=AccZ;
13368:                 AccZ=AccY;
13369:                 AccY=GATmp;
13370:                 
13371:                 GATmp=GyroY;
13372:                 GyroY=-GyroZ;
13373:                 //GyroX=-GyroZ;
13374:                 GyroZ=GATmp;
13375:                 
13376:             
13377:                 
13378:                 
13379:                 /*
13380:                 GyroYTmp=GyroY;
13381:                 GyroY=GyroX;
13382:                 GyroX=-GyroYTmp;
13383:             
13384:             
13385:                 AccX=-AccX;
13386:                 AccY=-AccY;
13387:                 
13388:                 
13389:             int GATmp;
13390:                GyroYTmp=AccX;
13391:                 AccX=AccZ;
13392:                 GATmp=AccY;
13393:                 AccY=-GyroYTmp;
13394:                 AccZ=-GATmp;
13395:                 
13396:                 GyroYTmp=GyroX;
13397:                 GyroX=GyroZ;
13398:                 GATmp=GyroY;
13399:                 GyroY=-GyroYTmp;
13400:                 GyroZ=-GATmp;
13401:                 
13402:                 
13403:                  
13404:                  
13405:                 GyroYTmp=AccX;
13406:                 AccX=AccZ;
13407:                 GATmp=AccY;
13408:                 AccY=-GyroYTmp;
13409:                 AccZ=-GATmp;
13410:                 
13411:                 GyroYTmp=GyroX;
13412:                 GyroX=GyroZ;
13413:                 GATmp=GyroY;
13414:                 GyroY=-GyroYTmp;
13415:                 GyroZ=-GATmp;
13416:                 
13417:                  */
13418:                 
13419:                 
13420:                 
13421:                 GyroXFl=(float)(GyroX-CalibrationGyroX);
13422:                 GyroYFl=(float)(GyroY-CalibrationGyroY);
13423:                 GyroZFl=(float)(GyroZ-CalibrationGyroZ);
13424:             
13425:             
13426:                 AccXFl=(float)(AccX-CalibrationAccX);
13427:                 AccYFl=(float)(AccY-CalibrationAccY);
13428:                 AccZFl=(float)(AccZ-CalibrationAccZ);
13429:                 
13430:             
13431:             //        if (TestFlag)
13432:               //      GyroX=GyroY=GyroZ=AccX=AccY=AccZ=0xffff;
13433:                 
13434:                 /*
13435:             if ((GyroX==0 && GyroY==0 && GyroY==0 && AccX==0  && AccY==0  && AccZ==0))
13436:                 MPU6000_ErrZero=1;
13437:             else
13438:                 MPU6000_ErrZero=0;
13439:                 
13440:             if (GyroX==0xffff && GyroY==0xffff && GyroY==0xffff && AccX==0xffff  && AccY==0xffff  && AccZ==0xffff)
13441:                 MPU6000_ErrFF=1;
13442:             else
13443:                 MPU6000_ErrFF=0;
13444:                 
13445:                 */
13446:             #endif
13447:             
13448:                 IEC1bits.OC4IE=1;
00D38A  A84823     BSET 0x823, #2
13449:             
13450:                 
13451:                     HvGyroData=1;
00D38C  8095E4     MOV Flgs, W4
00D38E  A0E004     BSET W4, #14
00D390  8895E4     MOV W4, Flgs
13452:             #if defined VECTOR_MPU_6000        
13453:                     HvAccData=1;
00D392  8095E4     MOV Flgs, W4
00D394  A0D004     BSET W4, #13
00D396  8895E4     MOV W4, Flgs
13454:             #endif
13455:                     
13456:             #endif
13457:                 }
13458:             }
00D398  FA8000     ULNK
00D39A  F90032     POP DSRPAG
00D39C  BE034F     MOV.D [--W15], W6
00D39E  BE024F     MOV.D [--W15], W4
00D3A0  BE014F     MOV.D [--W15], W2
00D3A2  BE004F     MOV.D [--W15], W0
00D3A4  F90036     POP RCOUNT
00D3A6  064000     RETFIE
13459:             
13460:             void TxRxSPI_GYRO(unsigned int txLen)
13461:             {
00D3A8  FA0002     LNK #0x2
00D3AA  780F00     MOV W0, [W14]
13462:                 while (SPIRxGyroCnt<SPIGyrobyteCount)
00D3AC  370003     BRA 0xD3B4
00D3B4  80C075     MOV SPIRxGyroCnt, W5
00D3B6  80C064     MOV SPIGyrobyteCount, W4
00D3B8  528F84     SUB W5, W4, [W15]
00D3BA  39FFF9     BRA NC, 0xD3AE
13463:                         {
13464:                     Nop();
00D3AE  000000     NOP
13465:                     Nop();
00D3B0  000000     NOP
13466:                     Nop();
00D3B2  000000     NOP
13467:                 }
13468:             
13469:             SPIGyrobyteCount = txLen;
00D3BC  78021E     MOV [W14], W4
00D3BE  88C064     MOV W4, SPIGyrobyteCount
13470:             SPIRxGyroCnt=0;
00D3C0  EB0200     CLR W4
00D3C2  88C074     MOV W4, SPIRxGyroCnt
13471:             WF_SpiGyroEnableChipSelect();
00D3C4  070006     RCALL WF_SpiGyroEnableChipSelect
13472:             GYRO_SSPBUF = Gyro_txBuf[0];
00D3C6  217CF4     MOV #0x17CF, W4
00D3C8  784214     MOV.B [W4], W4
00D3CA  FB8204     ZE W4, W4
00D3CC  881544     MOV W4, SPI3BUF
13473:             }
00D3CE  FA8000     ULNK
00D3D0  060000     RETURN
13474:             
13475:             void WF_SpiGyroEnableChipSelect(void)
13476:             {
00D3D2  FA0000     LNK #0x0
13477:             
13478:                 GYRO_CS_IO = 0;
00D3D4  A9EE34     BCLR LATD, #7
13479:             
13480:             }
00D3D6  FA8000     ULNK
00D3D8  060000     RETURN
13481:             
13482:             void WF_SpiGyroDisableChipSelect(void)
13483:             {
00D3DA  FA0000     LNK #0x0
13484:                     GYRO_CS_IO = 1;
00D3DC  A8EE34     BSET LATD, #7
13485:             }
00D3DE  FA8000     ULNK
00D3E0  060000     RETURN
13486:             
13487:             // END GYRO SPI
13488:             
13489:             
13490:             void InitFlash(void)
13491:             {
00D3E2  FA0000     LNK #0x0
13492:             TRIS_CE_FLASH=0;
00D3E4  A96E00     BCLR TRISA, #3
13493:             CE_FLASH=1;
00D3E6  A86E04     BSET LATA, #3
13494:             
13495:             TRIS_SO_FLASH=1;
00D3E8  A84E00     BSET TRISA, #2
13496:             
13497:             TRIS_WP_FLASH=0;
00D3EA  A90E31     BCLR 0xE31, #0
13498:             WP_FLASH=0;
00D3EC  A90E35     BCLR 0xE35, #0
13499:             
13500:             TRIS_SI_FLASH=0;
00D3EE  A9EE01     BCLR 0xE01, #7
13501:             SI_FLASH=0;
00D3F0  A9EE05     BCLR 0xE05, #7
13502:             
13503:             TRIS_SCK_FLASH=0;
00D3F2  A9CE01     BCLR 0xE01, #6
13504:             SCK_FLASH=0;
00D3F4  A9CE05     BCLR 0xE05, #6
13505:             
13506:             TRIS_HOLD_FLASH=0;
00D3F6  A9AE00     BCLR TRISA, #5
13507:             HOLD_FLASH=0;
00D3F8  A9AE04     BCLR LATA, #5
13508:             }
00D3FA  FA8000     ULNK
00D3FC  060000     RETURN
13509:             
13510:             
13511:             unsigned char TrmRecByteFLASH(unsigned char Bt)
13512:             {
00D3FE  FA0006     LNK #0x6
00D400  984740     MOV.B W0, [W14+4]
13513:                 unsigned char j,k,BtRec;
13514:             
13515:                 BtRec=0;
00D402  EB4200     CLR.B W4
00D404  984724     MOV.B W4, [W14+2]
13516:             
13517:                 for (j=0;j<8;j++)
00D406  EB4200     CLR.B W4
00D408  784F04     MOV.B W4, [W14]
00D40A  370028     BRA 0xD45C
00D45A  E84F1E     INC.B [W14], [W14]
00D45C  78421E     MOV.B [W14], W4
00D45E  524FE7     SUB.B W4, #0x7, [W15]
00D460  36FFD5     BRA LEU, 0xD40C
13518:                 {
13519:                    BtRec=BtRec<<1;
00D40C  90422E     MOV.B [W14+2], W4
00D40E  424204     ADD.B W4, W4, W4
00D410  984724     MOV.B W4, [W14+2]
13520:                    if (Bt&0x80)
00D412  90424E     MOV.B [W14+4], W4
00D414  524FE0     SUB.B W4, #0x0, [W15]
00D416  3D0002     BRA GE, 0xD41C
13521:                        SI_FLASH=1;
00D418  A8EE05     BSET 0xE05, #7
00D41A  370001     BRA 0xD41E
13522:                    else
13523:                        SI_FLASH=0;
00D41C  A9EE05     BCLR 0xE05, #7
13524:                    for (k=0;k<30;k++);
00D41E  EB4200     CLR.B W4
00D420  984714     MOV.B W4, [W14+1]
00D422  370003     BRA 0xD42A
00D424  90421E     MOV.B [W14+1], W4
00D426  E84204     INC.B W4, W4
00D428  984714     MOV.B W4, [W14+1]
00D42A  90421E     MOV.B [W14+1], W4
00D42C  524FFD     SUB.B W4, #0x1D, [W15]
00D42E  36FFFA     BRA LEU, 0xD424
13525:                    SCK_FLASH=1;
00D430  A8CE05     BSET 0xE05, #6
13526:                    for (k=0;k<30;k++);
00D432  EB4200     CLR.B W4
00D434  984714     MOV.B W4, [W14+1]
00D436  370003     BRA 0xD43E
00D438  90421E     MOV.B [W14+1], W4
00D43A  E84204     INC.B W4, W4
00D43C  984714     MOV.B W4, [W14+1]
00D43E  90421E     MOV.B [W14+1], W4
00D440  524FFD     SUB.B W4, #0x1D, [W15]
00D442  36FFFA     BRA LEU, 0xD438
13527:                    if (SO_FLASH)
00D444  807014     MOV PORTA, W4
00D446  620264     AND W4, #0x4, W4
00D448  520FE0     SUB W4, #0x0, [W15]
00D44A  320003     BRA Z, 0xD452
13528:                        BtRec=BtRec|1;
00D44C  90422E     MOV.B [W14+2], W4
00D44E  A00404     BSET.B W4, #0
00D450  984724     MOV.B W4, [W14+2]
13529:                    SCK_FLASH=0;
00D452  A9CE05     BCLR 0xE05, #6
13530:                    Bt=Bt<<1;
00D454  90424E     MOV.B [W14+4], W4
00D456  424204     ADD.B W4, W4, W4
00D458  984744     MOV.B W4, [W14+4]
13531:                 }
13532:                 return BtRec;
00D462  90422E     MOV.B [W14+2], W4
13533:             }
00D464  784004     MOV.B W4, W0
00D466  FA8000     ULNK
00D468  060000     RETURN
13534:             
13535:             unsigned char RecStatusFLASH(void)
13536:             {
00D46A  FA0002     LNK #0x2
13537:                 unsigned char Tm;
13538:                 HOLD_FLASH=1;
00D46C  A8AE04     BSET LATA, #5
13539:                 CE_FLASH=0;
00D46E  A96E04     BCLR LATA, #3
13540:                 for (Tm=0;Tm<30;Tm++);
00D470  EB4200     CLR.B W4
00D472  784F04     MOV.B W4, [W14]
00D474  370001     BRA 0xD478
00D476  E84F1E     INC.B [W14], [W14]
00D478  78421E     MOV.B [W14], W4
00D47A  524FFD     SUB.B W4, #0x1D, [W15]
00D47C  36FFFC     BRA LEU, 0xD476
13541:                 TrmRecByteFLASH(5);
00D47E  B3C050     MOV.B #0x5, W0
00D480  07FFBE     RCALL TrmRecByteFLASH
13542:                 Tm=TrmRecByteFLASH(5);
00D482  B3C050     MOV.B #0x5, W0
00D484  07FFBC     RCALL TrmRecByteFLASH
00D486  784200     MOV.B W0, W4
00D488  784F04     MOV.B W4, [W14]
13543:                 CE_FLASH=1;
00D48A  A86E04     BSET LATA, #3
13544:                 HOLD_FLASH=0;
00D48C  A9AE04     BCLR LATA, #5
13545:                 return Tm;
00D48E  78421E     MOV.B [W14], W4
13546:             }
00D490  784004     MOV.B W4, W0
00D492  FA8000     ULNK
00D494  060000     RETURN
13547:             
13548:             unsigned char RecStatusFLASH_TST(void)
13549:             {
00D496  FA0002     LNK #0x2
13550:                 unsigned char Tm;
13551:                 HOLD_FLASH=0;
00D498  A9AE04     BCLR LATA, #5
13552:                 CE_FLASH=0;
00D49A  A96E04     BCLR LATA, #3
13553:                 for (Tm=0;Tm<30;Tm++);
00D49C  EB4200     CLR.B W4
00D49E  784F04     MOV.B W4, [W14]
00D4A0  370001     BRA 0xD4A4
00D4A2  E84F1E     INC.B [W14], [W14]
00D4A4  78421E     MOV.B [W14], W4
00D4A6  524FFD     SUB.B W4, #0x1D, [W15]
00D4A8  36FFFC     BRA LEU, 0xD4A2
13554:                 TrmRecByteFLASH(5);
00D4AA  B3C050     MOV.B #0x5, W0
00D4AC  07FFA8     RCALL TrmRecByteFLASH
13555:                 Tm=TrmRecByteFLASH(5);
00D4AE  B3C050     MOV.B #0x5, W0
00D4B0  07FFA6     RCALL TrmRecByteFLASH
00D4B2  784200     MOV.B W0, W4
00D4B4  784F04     MOV.B W4, [W14]
13556:                 CE_FLASH=1;
00D4B6  A86E04     BSET LATA, #3
13557:                 HOLD_FLASH=0;
00D4B8  A9AE04     BCLR LATA, #5
13558:                 return Tm;
00D4BA  78421E     MOV.B [W14], W4
13559:             }
00D4BC  784004     MOV.B W4, W0
00D4BE  FA8000     ULNK
00D4C0  060000     RETURN
13560:             
13561:             
13562:             unsigned char ReadFlash(unsigned long int Addr,unsigned int N,unsigned char * Mass)
13563:             {
00D4C2  FA000C     LNK #0xC
00D4C4  781F88     MOV W8, [W15++]
00D4C6  980720     MOV W0, [W14+4]
00D4C8  980731     MOV W1, [W14+6]
00D4CA  980742     MOV W2, [W14+8]
00D4CC  980753     MOV W3, [W14+10]
13564:                 unsigned int Tm;
13565:                 unsigned char Chk;
13566:                 HOLD_FLASH=1;
00D4CE  A8AE04     BSET LATA, #5
13567:                 CE_FLASH=0;
00D4D0  A96E04     BCLR LATA, #3
13568:                 for (Tm=0;Tm<30;Tm++);
00D4D2  EB0200     CLR W4
00D4D4  780F04     MOV W4, [W14]
00D4D6  370001     BRA 0xD4DA
00D4D8  E80F1E     INC [W14], [W14]
00D4DA  78021E     MOV [W14], W4
00D4DC  520FFD     SUB W4, #0x1D, [W15]
00D4DE  36FFFC     BRA LEU, 0xD4D8
13569:                 TrmRecByteFLASH(3);
00D4E0  B3C030     MOV.B #0x3, W0
00D4E2  07FF8D     RCALL TrmRecByteFLASH
13570:                 TrmRecByteFLASH((unsigned char)(Addr>>16));
00D4E4  90022E     MOV [W14+4], W4
00D4E6  9002BE     MOV [W14+6], W5
00D4E8  DE2A40     LSR W5, #0, W4
00D4EA  200005     MOV #0x0, W5
00D4EC  784204     MOV.B W4, W4
00D4EE  784004     MOV.B W4, W0
00D4F0  07FF86     RCALL TrmRecByteFLASH
13571:                 TrmRecByteFLASH((unsigned char)(Addr>>8));
00D4F2  90022E     MOV [W14+4], W4
00D4F4  9002BE     MOV [W14+6], W5
00D4F6  DD2B48     SL W5, #8, W6
00D4F8  DE2248     LSR W4, #8, W4
00D4FA  730204     IOR W6, W4, W4
00D4FC  DE2AC8     LSR W5, #8, W5
00D4FE  784204     MOV.B W4, W4
00D500  784004     MOV.B W4, W0
00D502  07FF7D     RCALL TrmRecByteFLASH
13572:                 TrmRecByteFLASH((unsigned char)Addr);
00D504  90022E     MOV [W14+4], W4
00D506  784204     MOV.B W4, W4
00D508  784004     MOV.B W4, W0
00D50A  07FF79     RCALL TrmRecByteFLASH
13573:             
13574:                 for (Tm=0;Tm<N;Tm++)
00D50C  EB0200     CLR W4
00D50E  780F04     MOV W4, [W14]
00D510  370007     BRA 0xD520
00D51E  E80F1E     INC [W14], [W14]
00D520  90024E     MOV [W14+8], W4
00D522  78029E     MOV [W14], W5
00D524  528F84     SUB W5, W4, [W15]
00D526  39FFF5     BRA NC, 0xD512
13575:                 Mass[Tm]=TrmRecByteFLASH(0);
00D512  90025E     MOV [W14+10], W4
00D514  42041E     ADD W4, [W14], W8
00D516  EB4000     CLR.B W0
00D518  07FF72     RCALL TrmRecByteFLASH
00D51A  784200     MOV.B W0, W4
00D51C  784C04     MOV.B W4, [W8]
13576:             
13577:                 Chk=TrmRecByteFLASH(0);
00D528  EB4000     CLR.B W0
00D52A  07FF69     RCALL TrmRecByteFLASH
00D52C  784200     MOV.B W0, W4
00D52E  984724     MOV.B W4, [W14+2]
13578:             
13579:                 CE_FLASH=1;
00D530  A86E04     BSET LATA, #3
13580:                 HOLD_FLASH=0;
00D532  A9AE04     BCLR LATA, #5
13581:             
13582:                 return Chk;
00D534  90422E     MOV.B [W14+2], W4
13583:             }
00D536  784004     MOV.B W4, W0
00D538  78044F     MOV [--W15], W8
00D53A  FA8000     ULNK
00D53C  060000     RETURN
13584:             
13585:             
13586:             void WREN_FLASH(void)
13587:             {
00D53E  FA0002     LNK #0x2
13588:                 unsigned int Tm;
13589:                 HOLD_FLASH=1;
00D540  A8AE04     BSET LATA, #5
13590:                 CE_FLASH=0;
00D542  A96E04     BCLR LATA, #3
13591:                 for (Tm=0;Tm<30;Tm++);
00D544  EB0200     CLR W4
00D546  780F04     MOV W4, [W14]
00D548  370001     BRA 0xD54C
00D54A  E80F1E     INC [W14], [W14]
00D54C  78021E     MOV [W14], W4
00D54E  520FFD     SUB W4, #0x1D, [W15]
00D550  36FFFC     BRA LEU, 0xD54A
13592:                 TrmRecByteFLASH(6);
00D552  B3C060     MOV.B #0x6, W0
00D554  07FF54     RCALL TrmRecByteFLASH
13593:             
13594:                 CE_FLASH=1;
00D556  A86E04     BSET LATA, #3
13595:                 HOLD_FLASH=0;
00D558  A9AE04     BCLR LATA, #5
13596:             
13597:             }
00D55A  FA8000     ULNK
00D55C  060000     RETURN
13598:             
13599:             void WRDI_FLASH(void)
13600:             {
00D55E  FA0002     LNK #0x2
13601:                 unsigned int Tm;
13602:                 HOLD_FLASH=1;
00D560  A8AE04     BSET LATA, #5
13603:                 CE_FLASH=0;
00D562  A96E04     BCLR LATA, #3
13604:                 for (Tm=0;Tm<30;Tm++);
00D564  EB0200     CLR W4
00D566  780F04     MOV W4, [W14]
00D568  370001     BRA 0xD56C
00D56A  E80F1E     INC [W14], [W14]
00D56C  78021E     MOV [W14], W4
00D56E  520FFD     SUB W4, #0x1D, [W15]
00D570  36FFFC     BRA LEU, 0xD56A
13605:                 TrmRecByteFLASH(4);
00D572  B3C040     MOV.B #0x4, W0
00D574  07FF44     RCALL TrmRecByteFLASH
13606:             
13607:                 CE_FLASH=1;
00D576  A86E04     BSET LATA, #3
13608:                 HOLD_FLASH=0;
00D578  A9AE04     BCLR LATA, #5
13609:             
13610:             }
00D57A  FA8000     ULNK
00D57C  060000     RETURN
13611:             
13612:             void WriteByte_FLASH(unsigned long int Addr, unsigned char Bt)
13613:             {
00D57E  FA0008     LNK #0x8
00D580  980710     MOV W0, [W14+2]
00D582  980721     MOV W1, [W14+4]
00D584  984762     MOV.B W2, [W14+6]
13614:             unsigned int Tm;
13615:                 WP_FLASH=1;
00D586  A80E35     BSET 0xE35, #0
13616:                WREN_FLASH();
00D588  07FFDA     RCALL WREN_FLASH
13617:             
13618:                 HOLD_FLASH=1;
00D58A  A8AE04     BSET LATA, #5
13619:                 CE_FLASH=0;
00D58C  A96E04     BCLR LATA, #3
13620:                 for (Tm=0;Tm<30;Tm++);
00D58E  EB0200     CLR W4
00D590  780F04     MOV W4, [W14]
00D592  370001     BRA 0xD596
00D594  E80F1E     INC [W14], [W14]
00D596  78021E     MOV [W14], W4
00D598  520FFD     SUB W4, #0x1D, [W15]
00D59A  36FFFC     BRA LEU, 0xD594
13621:                 TrmRecByteFLASH(2);
00D59C  B3C020     MOV.B #0x2, W0
00D59E  07FF2F     RCALL TrmRecByteFLASH
13622:                 TrmRecByteFLASH((unsigned char)(Addr>>16));
00D5A0  90021E     MOV [W14+2], W4
00D5A2  9002AE     MOV [W14+4], W5
00D5A4  DE2A40     LSR W5, #0, W4
00D5A6  200005     MOV #0x0, W5
00D5A8  784204     MOV.B W4, W4
00D5AA  784004     MOV.B W4, W0
00D5AC  07FF28     RCALL TrmRecByteFLASH
13623:                 TrmRecByteFLASH((unsigned char)(Addr>>8));
00D5AE  90021E     MOV [W14+2], W4
00D5B0  9002AE     MOV [W14+4], W5
00D5B2  DD2B48     SL W5, #8, W6
00D5B4  DE2248     LSR W4, #8, W4
00D5B6  730204     IOR W6, W4, W4
00D5B8  DE2AC8     LSR W5, #8, W5
00D5BA  784204     MOV.B W4, W4
00D5BC  784004     MOV.B W4, W0
00D5BE  07FF1F     RCALL TrmRecByteFLASH
13624:                 TrmRecByteFLASH((unsigned char)Addr);
00D5C0  90021E     MOV [W14+2], W4
00D5C2  784204     MOV.B W4, W4
00D5C4  784004     MOV.B W4, W0
00D5C6  07FF1B     RCALL TrmRecByteFLASH
13625:                 TrmRecByteFLASH(Bt);
00D5C8  90406E     MOV.B [W14+6], W0
00D5CA  07FF19     RCALL TrmRecByteFLASH
13626:             
13627:                 CE_FLASH=1;
00D5CC  A86E04     BSET LATA, #3
13628:                 HOLD_FLASH=0;
00D5CE  A9AE04     BCLR LATA, #5
13629:             
13630:                 while (RecStatusFLASH()&1)
00D5D0  370001     BRA 0xD5D4
00D5D4  07FF4A     RCALL RecStatusFLASH
00D5D6  784200     MOV.B W0, W4
00D5D8  FB8204     ZE W4, W4
00D5DA  620261     AND W4, #0x1, W4
00D5DC  784204     MOV.B W4, W4
00D5DE  524FE0     SUB.B W4, #0x0, [W15]
00D5E0  3AFFF8     BRA NZ, 0xD5D2
13631:                 Nop();
00D5D2  000000     NOP
13632:             
13633:                 WRDI_FLASH();
00D5E2  07FFBD     RCALL WRDI_FLASH
13634:                 StatusFlash=RecStatusFLASH();
00D5E4  07FF42     RCALL RecStatusFLASH
00D5E6  784200     MOV.B W0, W4
00D5E8  22FB25     MOV #0x2FB2, W5
00D5EA  784A84     MOV.B W4, [W5]
13635:                 Nop();
00D5EC  000000     NOP
13636:                 Nop();
00D5EE  000000     NOP
13637:                 Nop();
00D5F0  000000     NOP
13638:                 WP_FLASH=0;
00D5F2  A90E35     BCLR 0xE35, #0
13639:             }
00D5F4  FA8000     ULNK
00D5F6  060000     RETURN
13640:             
13641:             void WriteStat_FLASH(unsigned char St)
13642:             {
00D5F8  FA0004     LNK #0x4
00D5FA  984720     MOV.B W0, [W14+2]
13643:             unsigned int Tm;
13644:             
13645:                 WP_FLASH=1;
00D5FC  A80E35     BSET 0xE35, #0
13646:                WREN_FLASH();
00D5FE  07FF9F     RCALL WREN_FLASH
13647:             
13648:                 HOLD_FLASH=1;
00D600  A8AE04     BSET LATA, #5
13649:                 CE_FLASH=0;
00D602  A96E04     BCLR LATA, #3
13650:                 for (Tm=0;Tm<30;Tm++);
00D604  EB0200     CLR W4
00D606  780F04     MOV W4, [W14]
00D608  370001     BRA 0xD60C
00D60A  E80F1E     INC [W14], [W14]
00D60C  78021E     MOV [W14], W4
00D60E  520FFD     SUB W4, #0x1D, [W15]
00D610  36FFFC     BRA LEU, 0xD60A
13651:                 TrmRecByteFLASH(1);
00D612  B3C010     MOV.B #0x1, W0
00D614  07FEF4     RCALL TrmRecByteFLASH
13652:                 TrmRecByteFLASH(St);
00D616  90402E     MOV.B [W14+2], W0
00D618  07FEF2     RCALL TrmRecByteFLASH
13653:             
13654:                 CE_FLASH=1;
00D61A  A86E04     BSET LATA, #3
13655:                 HOLD_FLASH=0;
00D61C  A9AE04     BCLR LATA, #5
13656:             
13657:             }
00D61E  FA8000     ULNK
00D620  060000     RETURN
13658:             
13659:             
13660:             void EraseSector_FLASH(unsigned long int Addr)
13661:             {
00D622  FA0006     LNK #0x6
00D624  980710     MOV W0, [W14+2]
00D626  980721     MOV W1, [W14+4]
13662:             unsigned int Tm;
13663:                 WP_FLASH=1;
00D628  A80E35     BSET 0xE35, #0
13664:                WREN_FLASH();
00D62A  07FF89     RCALL WREN_FLASH
13665:             
13666:                 HOLD_FLASH=1;
00D62C  A8AE04     BSET LATA, #5
13667:                 CE_FLASH=0;
00D62E  A96E04     BCLR LATA, #3
13668:                 for (Tm=0;Tm<30;Tm++);
00D630  EB0200     CLR W4
00D632  780F04     MOV W4, [W14]
00D634  370001     BRA 0xD638
00D636  E80F1E     INC [W14], [W14]
00D638  78021E     MOV [W14], W4
00D63A  520FFD     SUB W4, #0x1D, [W15]
00D63C  36FFFC     BRA LEU, 0xD636
13669:                 TrmRecByteFLASH(0x20);
00D63E  B3C200     MOV.B #0x20, W0
00D640  07FEDE     RCALL TrmRecByteFLASH
13670:                 TrmRecByteFLASH((unsigned char)(Addr>>16));
00D642  90021E     MOV [W14+2], W4
00D644  9002AE     MOV [W14+4], W5
00D646  DE2A40     LSR W5, #0, W4
00D648  200005     MOV #0x0, W5
00D64A  784204     MOV.B W4, W4
00D64C  784004     MOV.B W4, W0
00D64E  07FED7     RCALL TrmRecByteFLASH
13671:                 TrmRecByteFLASH((unsigned char)(Addr>>8));
00D650  90021E     MOV [W14+2], W4
00D652  9002AE     MOV [W14+4], W5
00D654  DD2B48     SL W5, #8, W6
00D656  DE2248     LSR W4, #8, W4
00D658  730204     IOR W6, W4, W4
00D65A  DE2AC8     LSR W5, #8, W5
00D65C  784204     MOV.B W4, W4
00D65E  784004     MOV.B W4, W0
00D660  07FECE     RCALL TrmRecByteFLASH
13672:                 TrmRecByteFLASH((unsigned char)Addr);
00D662  90021E     MOV [W14+2], W4
00D664  784204     MOV.B W4, W4
00D666  784004     MOV.B W4, W0
00D668  07FECA     RCALL TrmRecByteFLASH
13673:                 CE_FLASH=1;
00D66A  A86E04     BSET LATA, #3
13674:                 HOLD_FLASH=0;
00D66C  A9AE04     BCLR LATA, #5
13675:             
13676:                 while (RecStatusFLASH()&1)
00D66E  370001     BRA 0xD672
00D672  07FEFB     RCALL RecStatusFLASH
00D674  784200     MOV.B W0, W4
00D676  FB8204     ZE W4, W4
00D678  620261     AND W4, #0x1, W4
00D67A  784204     MOV.B W4, W4
00D67C  524FE0     SUB.B W4, #0x0, [W15]
00D67E  3AFFF8     BRA NZ, 0xD670
13677:                 Nop();
00D670  000000     NOP
13678:             
13679:                 WRDI_FLASH();
00D680  07FF6E     RCALL WRDI_FLASH
13680:                 StatusFlash=RecStatusFLASH();
00D682  07FEF3     RCALL RecStatusFLASH
00D684  784200     MOV.B W0, W4
00D686  22FB25     MOV #0x2FB2, W5
00D688  784A84     MOV.B W4, [W5]
13681:                 Nop();
00D68A  000000     NOP
13682:                 Nop();
00D68C  000000     NOP
13683:                 Nop();
00D68E  000000     NOP
13684:                 WP_FLASH=0;
00D690  A90E35     BCLR 0xE35, #0
13685:             }
00D692  FA8000     ULNK
00D694  060000     RETURN
13686:             
13687:             
13688:             unsigned char ReadOptions(void)
13689:             {
00D696  FA0004     LNK #0x4
13690:                 unsigned char Chk,Chk1,ChkTmp=0;
00D698  EB4200     CLR.B W4
00D69A  984714     MOV.B W4, [W14+1]
13691:             
13692:                 for (Chk=0;Chk<sizeof(FlashMass);Chk++)
00D69C  EB4200     CLR.B W4
00D69E  784F04     MOV.B W4, [W14]
00D6A0  370007     BRA 0xD6B0
00D6AE  E84F1E     INC.B [W14], [W14]
00D6B0  78421E     MOV.B [W14], W4
00D6B2  424FEE     ADD.B W4, #0xE, [W15]
00D6B4  36FFF6     BRA LEU, 0xD6A2
13693:                     FlashMass[Chk]=0;
00D6A2  78429E     MOV.B [W14], W5
00D6A4  FB8205     ZE W5, W4
00D6A6  22AE05     MOV #0x2AE0, W5
00D6A8  428284     ADD W5, W4, W5
00D6AA  EB4200     CLR.B W4
00D6AC  784A84     MOV.B W4, [W5]
13694:                 for (Chk=0;Chk<sizeof(FlashMass2);Chk++)
00D6B6  EB4200     CLR.B W4
00D6B8  784F04     MOV.B W4, [W14]
00D6BA  370007     BRA 0xD6CA
00D6C8  E84F1E     INC.B [W14], [W14]
00D6CA  78421E     MOV.B [W14], W4
00D6CC  424FEE     ADD.B W4, #0xE, [W15]
00D6CE  36FFF6     BRA LEU, 0xD6BC
13695:                     FlashMass2[Chk]=0;
00D6BC  78429E     MOV.B [W14], W5
00D6BE  FB8205     ZE W5, W4
00D6C0  22CC65     MOV #0x2CC6, W5
00D6C2  428284     ADD W5, W4, W5
00D6C4  EB4200     CLR.B W4
00D6C6  784A84     MOV.B W4, [W5]
13696:             
13697:                 Chk=ReadFlash(0,sizeof(FlashMass),FlashMass);
00D6D0  22AE03     MOV #0x2AE0, W3
00D6D2  200F32     MOV #0xF3, W2
00D6D4  B80060     MUL.UU W0, #0, W0
00D6D6  07FEF5     RCALL ReadFlash
00D6D8  784200     MOV.B W0, W4
00D6DA  784F04     MOV.B W4, [W14]
13698:                 Chk1=CalcCheckSumm(sizeof(FlashMass), FlashMass);
00D6DC  22AE01     MOV #0x2AE0, W1
00D6DE  200F30     MOV #0xF3, W0
00D6E0  07E20A     RCALL CalcCheckSumm
00D6E2  784200     MOV.B W0, W4
00D6E4  984724     MOV.B W4, [W14+2]
13699:             
13700:                 ChkTmp=1;
00D6E6  B3C014     MOV.B #0x1, W4
00D6E8  984714     MOV.B W4, [W14+1]
13701:                 
13702:                 if (Chk!=Chk1)
00D6EA  90422E     MOV.B [W14+2], W4
00D6EC  78429E     MOV.B [W14], W5
00D6EE  52CF84     SUB.B W5, W4, [W15]
00D6F0  320002     BRA Z, 0xD6F6
13703:                 ChkTmp=0;
00D6F2  EB4200     CLR.B W4
00D6F4  984714     MOV.B W4, [W14+1]
13704:                 
13705:             
13706:                 Chk=ReadFlash(sizeof(FlashMass)+1,sizeof(ProfileMass),ProfileMass);
00D6F6  22DB93     MOV #0x2DB9, W3
00D6F8  200F02     MOV #0xF0, W2
00D6FA  200F40     MOV #0xF4, W0
00D6FC  200001     MOV #0x0, W1
00D6FE  07FEE1     RCALL ReadFlash
00D700  784200     MOV.B W0, W4
00D702  784F04     MOV.B W4, [W14]
13707:                 Chk1=CalcCheckSumm(sizeof(ProfileMass), ProfileMass);
00D704  22DB91     MOV #0x2DB9, W1
00D706  200F00     MOV #0xF0, W0
00D708  07E1F6     RCALL CalcCheckSumm
00D70A  784200     MOV.B W0, W4
00D70C  984724     MOV.B W4, [W14+2]
13708:             
13709:                 if (Chk!=Chk1)
00D70E  90422E     MOV.B [W14+2], W4
00D710  78429E     MOV.B [W14], W5
00D712  52CF84     SUB.B W5, W4, [W15]
00D714  320002     BRA Z, 0xD71A
13710:                 ChkTmp=0;
00D716  EB4200     CLR.B W4
00D718  984714     MOV.B W4, [W14+1]
13711:                 
13712:                 
13713:                 Chk=ReadFlash(sizeof(FlashMass)+sizeof(ProfileMass)+2,sizeof(FlashMass2),FlashMass2);
00D71A  22CC63     MOV #0x2CC6, W3
00D71C  200F32     MOV #0xF3, W2
00D71E  201E50     MOV #0x1E5, W0
00D720  200001     MOV #0x0, W1
00D722  07FECF     RCALL ReadFlash
00D724  784200     MOV.B W0, W4
00D726  784F04     MOV.B W4, [W14]
13714:                 Chk1=CalcCheckSumm(sizeof(FlashMass2), FlashMass2);
00D728  22CC61     MOV #0x2CC6, W1
00D72A  200F30     MOV #0xF3, W0
00D72C  07E1E4     RCALL CalcCheckSumm
00D72E  784200     MOV.B W0, W4
00D730  984724     MOV.B W4, [W14+2]
13715:             
13716:                 if (Chk!=Chk1)
00D732  90422E     MOV.B [W14+2], W4
00D734  78429E     MOV.B [W14], W5
00D736  52CF84     SUB.B W5, W4, [W15]
00D738  320002     BRA Z, 0xD73E
13717:                 ChkTmp=0;
00D73A  EB4200     CLR.B W4
00D73C  984714     MOV.B W4, [W14+1]
13718:                 
13719:                 MassToOptions();
00D73E  070843     RCALL MassToOptions
13720:                 
13721:                 if (ChkTmp&&(FlashMass[0]!=0xff))
00D740  90421E     MOV.B [W14+1], W4
00D742  524FE0     SUB.B W4, #0x0, [W15]
00D744  320006     BRA Z, 0xD752
00D746  22AE04     MOV #0x2AE0, W4
00D748  784214     MOV.B [W4], W4
00D74A  424FE1     ADD.B W4, #0x1, [W15]
00D74C  320002     BRA Z, 0xD752
13722:                 {
13723:                     
13724:                     return 1;
00D74E  B3C014     MOV.B #0x1, W4
00D750  37000B     BRA 0xD768
13725:                 }
13726:             
13727:             
13728:             
13729:                  //   DefaultOptions();
13730:                     EEPROM_CHK_ERR=1;
00D752  809744     MOV StatFlgs, W4
00D754  A01004     BSET W4, #1
00D756  889744     MOV W4, StatFlgs
13731:             //        WriteOptions();
13732:             
13733:                 if (EEPROM_CHK_ERR)
00D758  809744     MOV StatFlgs, W4
00D75A  620262     AND W4, #0x2, W4
00D75C  520FE0     SUB W4, #0x0, [W15]
00D75E  320003     BRA Z, 0xD766
13734:                 {
13735:                     SoundNum=9;
00D760  2124B5     MOV #0x124B, W5
00D762  B3C094     MOV.B #0x9, W4
00D764  784A84     MOV.B W4, [W5]
13736:                 }
13737:             
13738:             
13739:                     return 0;
00D766  EB4200     CLR.B W4
13740:             
13741:             }
00D768  784004     MOV.B W4, W0
00D76A  FA8000     ULNK
00D76C  060000     RETURN
13742:             
13743:             
13744:             
13745:             unsigned char ReadOptions1(void)
13746:             {
00D76E  FA0004     LNK #0x4
13747:                 unsigned char Chk,Chk1,ChkTmp=0;
00D770  EB4200     CLR.B W4
00D772  984714     MOV.B W4, [W14+1]
13748:                 
13749:             
13750:                 for (Chk=0;Chk<sizeof(FlashMass1);Chk++)
00D774  EB4200     CLR.B W4
00D776  784F04     MOV.B W4, [W14]
00D778  370007     BRA 0xD788
00D786  E84F1E     INC.B [W14], [W14]
00D788  78421E     MOV.B [W14], W4
00D78A  424FEE     ADD.B W4, #0xE, [W15]
00D78C  36FFF6     BRA LEU, 0xD77A
13751:                     FlashMass1[Chk]=0;
00D77A  78429E     MOV.B [W14], W5
00D77C  FB8205     ZE W5, W4
00D77E  22BD35     MOV #0x2BD3, W5
00D780  428284     ADD W5, W4, W5
00D782  EB4200     CLR.B W4
00D784  784A84     MOV.B W4, [W5]
13752:             
13753:                 Chk=ReadFlash(0,sizeof(FlashMass1),FlashMass1);
00D78E  22BD33     MOV #0x2BD3, W3
00D790  200F32     MOV #0xF3, W2
00D792  B80060     MUL.UU W0, #0, W0
00D794  07FE96     RCALL ReadFlash
00D796  784200     MOV.B W0, W4
00D798  784F04     MOV.B W4, [W14]
13754:                 Chk1=CalcCheckSumm(sizeof(FlashMass1), FlashMass1);
00D79A  22BD31     MOV #0x2BD3, W1
00D79C  200F30     MOV #0xF3, W0
00D79E  07E1AB     RCALL CalcCheckSumm
00D7A0  784200     MOV.B W0, W4
00D7A2  984724     MOV.B W4, [W14+2]
13755:             
13756:                 
13757:                 if (Chk==Chk1)
00D7A4  90422E     MOV.B [W14+2], W4
00D7A6  78429E     MOV.B [W14], W5
00D7A8  52CF84     SUB.B W5, W4, [W15]
00D7AA  3A0002     BRA NZ, 0xD7B0
13758:                 ChkTmp=1;
00D7AC  B3C014     MOV.B #0x1, W4
00D7AE  984714     MOV.B W4, [W14+1]
13759:                 
13760:             
13761:                 Chk=ReadFlash(sizeof(FlashMass1)+1,sizeof(ProfileMass1),ProfileMass1);
00D7B0  22EA93     MOV #0x2EA9, W3
00D7B2  200F02     MOV #0xF0, W2
00D7B4  200F40     MOV #0xF4, W0
00D7B6  200001     MOV #0x0, W1
00D7B8  07FE84     RCALL ReadFlash
00D7BA  784200     MOV.B W0, W4
00D7BC  784F04     MOV.B W4, [W14]
13762:                 Chk1=CalcCheckSumm(sizeof(ProfileMass1), ProfileMass1);
00D7BE  22EA91     MOV #0x2EA9, W1
00D7C0  200F00     MOV #0xF0, W0
00D7C2  07E199     RCALL CalcCheckSumm
00D7C4  784200     MOV.B W0, W4
00D7C6  984724     MOV.B W4, [W14+2]
13763:             
13764:                 
13765:                 
13766:                 
13767:                 
13768:                 
13769:                 if (ChkTmp&&(Chk1==Chk)&&(FlashMass1[0]!=0xff))
00D7C8  90421E     MOV.B [W14+1], W4
00D7CA  524FE0     SUB.B W4, #0x0, [W15]
00D7CC  320009     BRA Z, 0xD7E0
00D7CE  90422E     MOV.B [W14+2], W4
00D7D0  524F9E     SUB.B W4, [W14], [W15]
00D7D2  3A0006     BRA NZ, 0xD7E0
00D7D4  22BD34     MOV #0x2BD3, W4
00D7D6  784214     MOV.B [W4], W4
00D7D8  424FE1     ADD.B W4, #0x1, [W15]
00D7DA  320002     BRA Z, 0xD7E0
13770:                 {
13771:                    // MassToOptions();
13772:                     return 1;
00D7DC  B3C014     MOV.B #0x1, W4
00D7DE  370004     BRA 0xD7E8
13773:                 }
13774:             
13775:             
13776:             
13777:                  //   DefaultOptions();
13778:                     EEPROM_CHK_ERR=1;
00D7E0  809744     MOV StatFlgs, W4
00D7E2  A01004     BSET W4, #1
00D7E4  889744     MOV W4, StatFlgs
13779:             //        WriteOptions();
13780:             
13781:                 if (EEPROM_CHK_ERR)
13782:                 {
13783:                     //SoundNum=9;
13784:                 }
13785:             
13786:             
13787:                     return 0;
00D7E6  EB4200     CLR.B W4
13788:             
13789:             }
00D7E8  784004     MOV.B W4, W0
00D7EA  FA8000     ULNK
00D7EC  060000     RETURN
13790:             
13791:             
13792:             
13793:             void OptionsToMass(void)
13794:             {
00D7EE  FA0002     LNK #0x2
13795:                 Mgnovenniy=0;
00D7F0  809774     MOV StatFlgs3, W4
00D7F2  A12004     BCLR W4, #2
00D7F4  889774     MOV W4, StatFlgs3
13796:                 
13797:                 int Tm=(int)KpMustBe;
00D7F6  809BC4     MOV KpMustBe, W4
00D7F8  809BD5     MOV 0x137A, W5
00D7FA  BE0004     MOV.D W4, W0
00D7FC  022504     CALL ___fixsfsi
00D7FE  000000     NOP
00D800  BE0200     MOV.D W0, W4
00D802  780F04     MOV W4, [W14]
13798:                 FlashMass[0]=0;
00D804  22AE05     MOV #0x2AE0, W5
00D806  EB4200     CLR.B W4
00D808  784A84     MOV.B W4, [W5]
13799:                 FlashMass[1]=(unsigned char)Tm;
00D80A  78021E     MOV [W14], W4
00D80C  784204     MOV.B W4, W4
00D80E  22AE15     MOV #0x2AE1, W5
00D810  784A84     MOV.B W4, [W5]
13800:                 Tm=Tm>>8;
00D812  78021E     MOV [W14], W4
00D814  DEA248     ASR W4, #8, W4
00D816  780F04     MOV W4, [W14]
13801:                 FlashMass[2]=(unsigned char)Tm;
00D818  78021E     MOV [W14], W4
00D81A  784204     MOV.B W4, W4
00D81C  22AE25     MOV #0x2AE2, W5
00D81E  784A84     MOV.B W4, [W5]
13802:             
13803:                 Tm=(int)KpNoMan;
00D820  809BE4     MOV KpNoMan, W4
00D822  809BF5     MOV 0x137E, W5
00D824  BE0004     MOV.D W4, W0
00D826  022504     CALL ___fixsfsi
00D828  000000     NOP
00D82A  BE0200     MOV.D W0, W4
00D82C  780F04     MOV W4, [W14]
13804:                 FlashMass[3]=(unsigned char)Tm;
00D82E  78021E     MOV [W14], W4
00D830  784204     MOV.B W4, W4
00D832  22AE35     MOV #0x2AE3, W5
00D834  784A84     MOV.B W4, [W5]
13805:                 Tm=Tm>>8;
00D836  78021E     MOV [W14], W4
00D838  DEA248     ASR W4, #8, W4
00D83A  780F04     MOV W4, [W14]
13806:                 FlashMass[4]=(unsigned char)Tm;
00D83C  78021E     MOV [W14], W4
00D83E  784204     MOV.B W4, W4
00D840  22AE45     MOV #0x2AE4, W5
00D842  784A84     MOV.B W4, [W5]
13807:             
13808:                 Tm=(int)(KdNoMan/10);
00D844  809C24     MOV KdNoMan, W4
00D846  809C35     MOV 0x1386, W5
00D848  200002     MOV #0x0, W2
00D84A  241203     MOV #0x4120, W3
00D84C  BE0004     MOV.D W4, W0
00D84E  02245A     CALL ___divsf3
00D850  000000     NOP
00D852  BE0200     MOV.D W0, W4
00D854  BE0004     MOV.D W4, W0
00D856  022504     CALL ___fixsfsi
00D858  000000     NOP
00D85A  BE0200     MOV.D W0, W4
00D85C  780F04     MOV W4, [W14]
13809:                 FlashMass[5]=(unsigned char)Tm;
00D85E  78021E     MOV [W14], W4
00D860  784204     MOV.B W4, W4
00D862  22AE55     MOV #0x2AE5, W5
00D864  784A84     MOV.B W4, [W5]
13810:                 Tm=Tm>>8;
00D866  78021E     MOV [W14], W4
00D868  DEA248     ASR W4, #8, W4
00D86A  780F04     MOV W4, [W14]
13811:                 FlashMass[6]=(unsigned char)Tm;
00D86C  78021E     MOV [W14], W4
00D86E  784204     MOV.B W4, W4
00D870  22AE65     MOV #0x2AE6, W5
00D872  784A84     MOV.B W4, [W5]
13812:             
13813:                 Tm=(int)(KiNoMan*100);
00D874  809B44     MOV KiNoMan, W4
00D876  809B55     MOV 0x136A, W5
00D878  200002     MOV #0x0, W2
00D87A  242C83     MOV #0x42C8, W3
00D87C  BE0004     MOV.D W4, W0
00D87E  022630     CALL ___mulsf3
00D880  000000     NOP
00D882  BE0200     MOV.D W0, W4
00D884  BE0004     MOV.D W4, W0
00D886  022504     CALL ___fixsfsi
00D888  000000     NOP
00D88A  BE0200     MOV.D W0, W4
00D88C  780F04     MOV W4, [W14]
13814:                 FlashMass[7]=(unsigned char)Tm;
00D88E  78021E     MOV [W14], W4
00D890  784204     MOV.B W4, W4
00D892  22AE75     MOV #0x2AE7, W5
00D894  784A84     MOV.B W4, [W5]
13815:                 Tm=Tm>>8;
00D896  78021E     MOV [W14], W4
00D898  DEA248     ASR W4, #8, W4
00D89A  780F04     MOV W4, [W14]
13816:                 FlashMass[8]=(unsigned char)Tm;
00D89C  78021E     MOV [W14], W4
00D89E  784204     MOV.B W4, W4
00D8A0  22AE85     MOV #0x2AE8, W5
00D8A2  784A84     MOV.B W4, [W5]
13817:             
13818:                 Tm=(int)(KpKpSpd);
00D8A4  809884     MOV KpKpSpd, W4
00D8A6  809895     MOV 0x1312, W5
00D8A8  BE0004     MOV.D W4, W0
00D8AA  022504     CALL ___fixsfsi
00D8AC  000000     NOP
00D8AE  BE0200     MOV.D W0, W4
00D8B0  780F04     MOV W4, [W14]
13819:                 FlashMass[9]=(unsigned char)Tm;
00D8B2  78021E     MOV [W14], W4
00D8B4  784204     MOV.B W4, W4
00D8B6  22AE95     MOV #0x2AE9, W5
00D8B8  784A84     MOV.B W4, [W5]
13820:                 Tm=Tm>>8;
00D8BA  78021E     MOV [W14], W4
00D8BC  DEA248     ASR W4, #8, W4
00D8BE  780F04     MOV W4, [W14]
13821:                 FlashMass[10]=(unsigned char)Tm;
00D8C0  78021E     MOV [W14], W4
00D8C2  784204     MOV.B W4, W4
00D8C4  22AEA5     MOV #0x2AEA, W5
00D8C6  784A84     MOV.B W4, [W5]
13822:             
13823:             
13824:                 FlashMass[11]=But1Func;
00D8C8  2401C4     MOV #0x401C, W4
00D8CA  784214     MOV.B [W4], W4
00D8CC  22AEB5     MOV #0x2AEB, W5
00D8CE  784A84     MOV.B W4, [W5]
13825:                 FlashMass[12]=But2Func;
00D8D0  2401D4     MOV #0x401D, W4
00D8D2  784214     MOV.B [W4], W4
00D8D4  22AEC5     MOV #0x2AEC, W5
00D8D6  784A84     MOV.B W4, [W5]
13826:             
13827:                 Tm=(int)(KGYRO*1000);
00D8D8  817DC4     MOV KGYRO, W4
00D8DA  817DD5     MOV 0x2FBA, W5
00D8DC  200002     MOV #0x0, W2
00D8DE  2447A3     MOV #0x447A, W3
00D8E0  BE0004     MOV.D W4, W0
00D8E2  022630     CALL ___mulsf3
00D8E4  000000     NOP
00D8E6  BE0200     MOV.D W0, W4
00D8E8  BE0004     MOV.D W4, W0
00D8EA  022504     CALL ___fixsfsi
00D8EC  000000     NOP
00D8EE  BE0200     MOV.D W0, W4
00D8F0  780F04     MOV W4, [W14]
13828:                 FlashMass[13]=(unsigned char)Tm;
00D8F2  78021E     MOV [W14], W4
00D8F4  784204     MOV.B W4, W4
00D8F6  22AED5     MOV #0x2AED, W5
00D8F8  784A84     MOV.B W4, [W5]
13829:                 Tm=Tm>>8;
00D8FA  78021E     MOV [W14], W4
00D8FC  DEA248     ASR W4, #8, W4
00D8FE  780F04     MOV W4, [W14]
13830:                 FlashMass[14]=(unsigned char)Tm;
00D900  78021E     MOV [W14], W4
00D902  784204     MOV.B W4, W4
00D904  22AEE5     MOV #0x2AEE, W5
00D906  784A84     MOV.B W4, [W5]
13831:             
13832:             
13833:                 Tm=SensorLessTimerConst2;
00D908  820144     MOV SensorLessTimerConst2, W4
00D90A  780F04     MOV W4, [W14]
13834:                 FlashMass[15]=(unsigned char)Tm;
00D90C  78021E     MOV [W14], W4
00D90E  784204     MOV.B W4, W4
00D910  22AEF5     MOV #0x2AEF, W5
00D912  784A84     MOV.B W4, [W5]
13835:                 Tm=Tm>>8;
00D914  78021E     MOV [W14], W4
00D916  DEA248     ASR W4, #8, W4
00D918  780F04     MOV W4, [W14]
13836:                 FlashMass[16]=(unsigned char)Tm;
00D91A  78021E     MOV [W14], W4
00D91C  784204     MOV.B W4, W4
00D91E  22AF05     MOV #0x2AF0, W5
00D920  784A84     MOV.B W4, [W5]
13837:             
13838:             
13839:                 Tm=SenosrlessPWM1_2Const;
00D922  809304     MOV SenosrlessPWM1_2Const, W4
00D924  780F04     MOV W4, [W14]
13840:                 FlashMass[17]=(unsigned char)Tm;
00D926  78021E     MOV [W14], W4
00D928  784204     MOV.B W4, W4
00D92A  22AF15     MOV #0x2AF1, W5
00D92C  784A84     MOV.B W4, [W5]
13841:                 Tm=Tm>>8;
00D92E  78021E     MOV [W14], W4
00D930  DEA248     ASR W4, #8, W4
00D932  780F04     MOV W4, [W14]
13842:                 FlashMass[18]=(unsigned char)Tm;
00D934  78021E     MOV [W14], W4
00D936  784204     MOV.B W4, W4
00D938  22AF25     MOV #0x2AF2, W5
00D93A  784A84     MOV.B W4, [W5]
13843:             
13844:                 Tm=SensorLessTimerConstMin;
00D93C  817EC4     MOV SensorLessTimerConstMin, W4
00D93E  780F04     MOV W4, [W14]
13845:                 FlashMass[19]=(unsigned char)Tm;
00D940  78021E     MOV [W14], W4
00D942  784204     MOV.B W4, W4
00D944  22AF35     MOV #0x2AF3, W5
00D946  784A84     MOV.B W4, [W5]
13846:                 Tm=Tm>>8;
00D948  78021E     MOV [W14], W4
00D94A  DEA248     ASR W4, #8, W4
00D94C  780F04     MOV W4, [W14]
13847:                 FlashMass[20]=(unsigned char)Tm;
00D94E  78021E     MOV [W14], W4
00D950  784204     MOV.B W4, W4
00D952  22AF45     MOV #0x2AF4, W5
00D954  784A84     MOV.B W4, [W5]
13848:             
13849:                 Tm=CalibrationGyroX;
00D956  815554     MOV CalibrationGyroX, W4
00D958  780F04     MOV W4, [W14]
13850:                 FlashMass[21]=(unsigned char)Tm;
00D95A  78021E     MOV [W14], W4
00D95C  784204     MOV.B W4, W4
00D95E  22AF55     MOV #0x2AF5, W5
00D960  784A84     MOV.B W4, [W5]
13851:                 Tm=Tm>>8;
00D962  78021E     MOV [W14], W4
00D964  DEA248     ASR W4, #8, W4
00D966  780F04     MOV W4, [W14]
13852:                 FlashMass[22]=(unsigned char)Tm;
00D968  78021E     MOV [W14], W4
00D96A  784204     MOV.B W4, W4
00D96C  22AF65     MOV #0x2AF6, W5
00D96E  784A84     MOV.B W4, [W5]
13853:             
13854:                 Tm=CalibrationGyroY;
00D970  815564     MOV CalibrationGyroY, W4
00D972  780F04     MOV W4, [W14]
13855:                 FlashMass[23]=(unsigned char)Tm;
00D974  78021E     MOV [W14], W4
00D976  784204     MOV.B W4, W4
00D978  22AF75     MOV #0x2AF7, W5
00D97A  784A84     MOV.B W4, [W5]
13856:                 Tm=Tm>>8;
00D97C  78021E     MOV [W14], W4
00D97E  DEA248     ASR W4, #8, W4
00D980  780F04     MOV W4, [W14]
13857:                 FlashMass[24]=(unsigned char)Tm;
00D982  78021E     MOV [W14], W4
00D984  784204     MOV.B W4, W4
00D986  22AF85     MOV #0x2AF8, W5
00D988  784A84     MOV.B W4, [W5]
13858:             
13859:                 Tm=CalibrationGyroZ;
00D98A  815574     MOV CalibrationGyroZ, W4
00D98C  780F04     MOV W4, [W14]
13860:                 FlashMass[25]=(unsigned char)Tm;
00D98E  78021E     MOV [W14], W4
00D990  784204     MOV.B W4, W4
00D992  22AF95     MOV #0x2AF9, W5
00D994  784A84     MOV.B W4, [W5]
13861:                 Tm=Tm>>8;
00D996  78021E     MOV [W14], W4
00D998  DEA248     ASR W4, #8, W4
00D99A  780F04     MOV W4, [W14]
13862:                 FlashMass[26]=(unsigned char)Tm;
00D99C  78021E     MOV [W14], W4
00D99E  784204     MOV.B W4, W4
00D9A0  22AFA5     MOV #0x2AFA, W5
00D9A2  784A84     MOV.B W4, [W5]
13863:             
13864:                 Tm=CalibrationAccX;
00D9A4  815584     MOV CalibrationAccX, W4
00D9A6  780F04     MOV W4, [W14]
13865:                 FlashMass[27]=(unsigned char)Tm;
00D9A8  78021E     MOV [W14], W4
00D9AA  784204     MOV.B W4, W4
00D9AC  22AFB5     MOV #0x2AFB, W5
00D9AE  784A84     MOV.B W4, [W5]
13866:                 Tm=Tm>>8;
00D9B0  78021E     MOV [W14], W4
00D9B2  DEA248     ASR W4, #8, W4
00D9B4  780F04     MOV W4, [W14]
13867:                 FlashMass[28]=(unsigned char)Tm;
00D9B6  78021E     MOV [W14], W4
00D9B8  784204     MOV.B W4, W4
00D9BA  22AFC5     MOV #0x2AFC, W5
00D9BC  784A84     MOV.B W4, [W5]
13868:             
13869:                 Tm=CalibrationAccY;
00D9BE  815594     MOV CalibrationAccY, W4
00D9C0  780F04     MOV W4, [W14]
13870:                 FlashMass[29]=(unsigned char)Tm;
00D9C2  78021E     MOV [W14], W4
00D9C4  784204     MOV.B W4, W4
00D9C6  22AFD5     MOV #0x2AFD, W5
00D9C8  784A84     MOV.B W4, [W5]
13871:                 Tm=Tm>>8;
00D9CA  78021E     MOV [W14], W4
00D9CC  DEA248     ASR W4, #8, W4
00D9CE  780F04     MOV W4, [W14]
13872:                 FlashMass[30]=(unsigned char)Tm;
00D9D0  78021E     MOV [W14], W4
00D9D2  784204     MOV.B W4, W4
00D9D4  22AFE5     MOV #0x2AFE, W5
00D9D6  784A84     MOV.B W4, [W5]
13873:             
13874:                 Tm=CalibrationAccZ;
00D9D8  8155A4     MOV CalibrationAccZ, W4
00D9DA  780F04     MOV W4, [W14]
13875:                 FlashMass[31]=(unsigned char)Tm;
00D9DC  78021E     MOV [W14], W4
00D9DE  784204     MOV.B W4, W4
00D9E0  22AFF5     MOV #0x2AFF, W5
00D9E2  784A84     MOV.B W4, [W5]
13876:                 Tm=Tm>>8;
00D9E4  78021E     MOV [W14], W4
00D9E6  DEA248     ASR W4, #8, W4
00D9E8  780F04     MOV W4, [W14]
13877:                 FlashMass[32]=(unsigned char)Tm;
00D9EA  78021E     MOV [W14], W4
00D9EC  784204     MOV.B W4, W4
00D9EE  22B005     MOV #0x2B00, W5
00D9F0  784A84     MOV.B W4, [W5]
13878:             
13879:                 FlashMass[33]=PhasePERMASS;
00D9F2  2183A4     MOV #0x183A, W4
00D9F4  784214     MOV.B [W4], W4
00D9F6  22B015     MOV #0x2B01, W5
00D9F8  784A84     MOV.B W4, [W5]
13880:                 FlashMass[34]=PhasePERMASS_SHFT;
00D9FA  2183B4     MOV #0x183B, W4
00D9FC  784214     MOV.B [W4], W4
00D9FE  22B025     MOV #0x2B02, W5
00DA00  784A84     MOV.B W4, [W5]
13881:             
13882:                 
13883:                 FlashMass[35]=HallDelayMem1_F;
00DA02  214564     MOV #0x1456, W4
00DA04  784214     MOV.B [W4], W4
00DA06  22B035     MOV #0x2B03, W5
00DA08  784A84     MOV.B W4, [W5]
13884:                 FlashMass[36]=HallDelayMem1_B;
00DA0A  214574     MOV #0x1457, W4
00DA0C  784214     MOV.B [W4], W4
00DA0E  22B045     MOV #0x2B04, W5
00DA10  784A84     MOV.B W4, [W5]
13885:                 FlashMass[37]=But3Func;
00DA12  2401E4     MOV #0x401E, W4
00DA14  784214     MOV.B [W4], W4
00DA16  22B055     MOV #0x2B05, W5
00DA18  784A84     MOV.B W4, [W5]
13886:                 FlashMass[38]=But4Func;
00DA1A  2401F4     MOV #0x401F, W4
00DA1C  784214     MOV.B [W4], W4
00DA1E  22B065     MOV #0x2B06, W5
00DA20  784A84     MOV.B W4, [W5]
13887:             
13888:             
13889:                 FlashMass[39]=Theta1Zero;
00DA22  213FE4     MOV #0x13FE, W4
00DA24  784214     MOV.B [W4], W4
00DA26  22B075     MOV #0x2B07, W5
00DA28  784A84     MOV.B W4, [W5]
13890:                 FlashMass[40]=Theta2Zero;
00DA2A  213FF4     MOV #0x13FF, W4
00DA2C  784214     MOV.B [W4], W4
00DA2E  22B085     MOV #0x2B08, W5
00DA30  784A84     MOV.B W4, [W5]
13891:             
13892:                 Tm=CurrLimitWork;
00DA32  80C1A4     MOV CurrLimitWork, W4
00DA34  780F04     MOV W4, [W14]
13893:                 FlashMass[41]=(unsigned char)Tm;
00DA36  78021E     MOV [W14], W4
00DA38  784204     MOV.B W4, W4
00DA3A  22B095     MOV #0x2B09, W5
00DA3C  784A84     MOV.B W4, [W5]
13894:                 Tm=Tm>>8;
00DA3E  78021E     MOV [W14], W4
00DA40  DEA248     ASR W4, #8, W4
00DA42  780F04     MOV W4, [W14]
13895:                 FlashMass[42]=(unsigned char)Tm;
00DA44  78021E     MOV [W14], W4
00DA46  784204     MOV.B W4, W4
00DA48  22B0A5     MOV #0x2B0A, W5
00DA4A  784A84     MOV.B W4, [W5]
13896:             
13897:             
13898:                 
13899:             
13900:                 Tm=ChagerCurr;
00DA4C  80B654     MOV ChagerCurr, W4
00DA4E  780F04     MOV W4, [W14]
13901:                 FlashMass[43]=(unsigned char)Tm;
00DA50  78021E     MOV [W14], W4
00DA52  784204     MOV.B W4, W4
00DA54  22B0B5     MOV #0x2B0B, W5
00DA56  784A84     MOV.B W4, [W5]
13902:                 Tm=Tm>>8;
00DA58  78021E     MOV [W14], W4
00DA5A  DEA248     ASR W4, #8, W4
00DA5C  780F04     MOV W4, [W14]
13903:                 FlashMass[44]=(unsigned char)Tm;
00DA5E  78021E     MOV [W14], W4
00DA60  784204     MOV.B W4, W4
00DA62  22B0C5     MOV #0x2B0C, W5
00DA64  784A84     MOV.B W4, [W5]
13904:             
13905:             
13906:                 Tm=(int)(KpSPDMove);
00DA66  818174     MOV KpSPDMove, W4
00DA68  780F04     MOV W4, [W14]
13907:                 FlashMass[45]=(unsigned char)Tm;
00DA6A  78021E     MOV [W14], W4
00DA6C  784204     MOV.B W4, W4
00DA6E  22B0D5     MOV #0x2B0D, W5
00DA70  784A84     MOV.B W4, [W5]
13908:                 Tm=Tm>>8;
00DA72  78021E     MOV [W14], W4
00DA74  DEA248     ASR W4, #8, W4
00DA76  780F04     MOV W4, [W14]
13909:                 FlashMass[46]=(unsigned char)Tm;
00DA78  78021E     MOV [W14], W4
00DA7A  784204     MOV.B W4, W4
00DA7C  22B0E5     MOV #0x2B0E, W5
00DA7E  784A84     MOV.B W4, [W5]
13910:             
13911:                 Tm=(int)(KdSPD);
00DA80  818144     MOV KdSPD, W4
00DA82  780F04     MOV W4, [W14]
13912:                 FlashMass[47]=(unsigned char)Tm;
00DA84  78021E     MOV [W14], W4
00DA86  784204     MOV.B W4, W4
00DA88  22B0F5     MOV #0x2B0F, W5
00DA8A  784A84     MOV.B W4, [W5]
13913:                 Tm=Tm>>8;
00DA8C  78021E     MOV [W14], W4
00DA8E  DEA248     ASR W4, #8, W4
00DA90  780F04     MOV W4, [W14]
13914:                 FlashMass[48]=(unsigned char)Tm;
00DA92  78021E     MOV [W14], W4
00DA94  784204     MOV.B W4, W4
00DA96  22B105     MOV #0x2B10, W5
00DA98  784A84     MOV.B W4, [W5]
13915:             
13916:                 Tm=(int)(KiSPD);
00DA9A  818154     MOV KiSPD, W4
00DA9C  780F04     MOV W4, [W14]
13917:                 FlashMass[49]=(unsigned char)Tm;
00DA9E  78021E     MOV [W14], W4
00DAA0  784204     MOV.B W4, W4
00DAA2  22B115     MOV #0x2B11, W5
00DAA4  784A84     MOV.B W4, [W5]
13918:                 Tm=Tm>>8;
00DAA6  78021E     MOV [W14], W4
00DAA8  DEA248     ASR W4, #8, W4
00DAAA  780F04     MOV W4, [W14]
13919:                 FlashMass[50]=(unsigned char)Tm;
00DAAC  78021E     MOV [W14], W4
00DAAE  784204     MOV.B W4, W4
00DAB0  22B125     MOV #0x2B12, W5
00DAB2  784A84     MOV.B W4, [W5]
13920:             
13921:                 Tm=(int)(AngleLimitMove);
00DAB4  818274     MOV AngleLimitMove, W4
00DAB6  780F04     MOV W4, [W14]
13922:                 FlashMass[51]=(unsigned char)Tm;
00DAB8  78021E     MOV [W14], W4
00DABA  784204     MOV.B W4, W4
00DABC  22B135     MOV #0x2B13, W5
00DABE  784A84     MOV.B W4, [W5]
13923:                 Tm=Tm>>8;
00DAC0  78021E     MOV [W14], W4
00DAC2  DEA248     ASR W4, #8, W4
00DAC4  780F04     MOV W4, [W14]
13924:                 FlashMass[52]=(unsigned char)Tm;
00DAC6  78021E     MOV [W14], W4
00DAC8  784204     MOV.B W4, W4
00DACA  22B145     MOV #0x2B14, W5
00DACC  784A84     MOV.B W4, [W5]
13925:             
13926:                 Tm=(int)(SpeedLimit1);
00DACE  818164     MOV SpeedLimit1, W4
00DAD0  780F04     MOV W4, [W14]
13927:                 FlashMass[53]=(unsigned char)Tm;
00DAD2  78021E     MOV [W14], W4
00DAD4  784204     MOV.B W4, W4
00DAD6  22B155     MOV #0x2B15, W5
00DAD8  784A84     MOV.B W4, [W5]
13928:                 Tm=Tm>>8;
00DADA  78021E     MOV [W14], W4
00DADC  DEA248     ASR W4, #8, W4
00DADE  780F04     MOV W4, [W14]
13929:                 FlashMass[54]=(unsigned char)Tm;
00DAE0  78021E     MOV [W14], W4
00DAE2  784204     MOV.B W4, W4
00DAE4  22B165     MOV #0x2B16, W5
00DAE6  784A84     MOV.B W4, [W5]
13930:             
13931:                 Tm=StatFlgs.StatusFlags;
00DAE8  809744     MOV StatFlgs, W4
00DAEA  780F04     MOV W4, [W14]
13932:                 FlashMass[55]=(unsigned char)Tm;
00DAEC  78021E     MOV [W14], W4
00DAEE  784204     MOV.B W4, W4
00DAF0  22B175     MOV #0x2B17, W5
00DAF2  784A84     MOV.B W4, [W5]
13933:                 Tm=Tm>>8;
00DAF4  78021E     MOV [W14], W4
00DAF6  DEA248     ASR W4, #8, W4
00DAF8  780F04     MOV W4, [W14]
13934:                 FlashMass[56]=(unsigned char)Tm;
00DAFA  78021E     MOV [W14], W4
00DAFC  784204     MOV.B W4, W4
00DAFE  22B185     MOV #0x2B18, W5
00DB00  784A84     MOV.B W4, [W5]
13935:             
13936:                 Tm=XLimit;
00DB02  8182F4     MOV XLimit, W4
00DB04  780F04     MOV W4, [W14]
13937:                 FlashMass[57]=(unsigned char)Tm;
00DB06  78021E     MOV [W14], W4
00DB08  784204     MOV.B W4, W4
00DB0A  22B195     MOV #0x2B19, W5
00DB0C  784A84     MOV.B W4, [W5]
13938:                 Tm=Tm>>8;
00DB0E  78021E     MOV [W14], W4
00DB10  DEA248     ASR W4, #8, W4
00DB12  780F04     MOV W4, [W14]
13939:                 FlashMass[58]=(unsigned char)Tm;
00DB14  78021E     MOV [W14], W4
00DB16  784204     MOV.B W4, W4
00DB18  22B1A5     MOV #0x2B1A, W5
00DB1A  784A84     MOV.B W4, [W5]
13940:             
13941:                 Tm=YLimit;
00DB1C  818304     MOV YLimit, W4
00DB1E  780F04     MOV W4, [W14]
13942:                 FlashMass[59]=(unsigned char)Tm;
00DB20  78021E     MOV [W14], W4
00DB22  784204     MOV.B W4, W4
00DB24  22B1B5     MOV #0x2B1B, W5
00DB26  784A84     MOV.B W4, [W5]
13943:                 Tm=Tm>>8;
00DB28  78021E     MOV [W14], W4
00DB2A  DEA248     ASR W4, #8, W4
00DB2C  780F04     MOV W4, [W14]
13944:                 FlashMass[60]=(unsigned char)Tm;
00DB2E  78021E     MOV [W14], W4
00DB30  784204     MOV.B W4, W4
00DB32  22B1C5     MOV #0x2B1C, W5
00DB34  784A84     MOV.B W4, [W5]
13945:             
13946:                 Tm=UBatLow;
00DB36  818324     MOV UBatLow, W4
00DB38  780F04     MOV W4, [W14]
13947:                 FlashMass[61]=(unsigned char)Tm;
00DB3A  78021E     MOV [W14], W4
00DB3C  784204     MOV.B W4, W4
00DB3E  22B1D5     MOV #0x2B1D, W5
00DB40  784A84     MOV.B W4, [W5]
13948:                 Tm=Tm>>8;
00DB42  78021E     MOV [W14], W4
00DB44  DEA248     ASR W4, #8, W4
00DB46  780F04     MOV W4, [W14]
13949:                 FlashMass[62]=(unsigned char)Tm;
00DB48  78021E     MOV [W14], W4
00DB4A  784204     MOV.B W4, W4
00DB4C  22B1E5     MOV #0x2B1E, W5
00DB4E  784A84     MOV.B W4, [W5]
13950:             
13951:                 Tm=CntMixedModeMax;
00DB50  81FFE4     MOV CntMixedModeMax, W4
00DB52  780F04     MOV W4, [W14]
13952:                 FlashMass[63]=(unsigned char)Tm;
00DB54  78021E     MOV [W14], W4
00DB56  784204     MOV.B W4, W4
00DB58  22B1F5     MOV #0x2B1F, W5
00DB5A  784A84     MOV.B W4, [W5]
13953:                 Tm=Tm>>8;
00DB5C  78021E     MOV [W14], W4
00DB5E  DEA248     ASR W4, #8, W4
00DB60  780F04     MOV W4, [W14]
13954:                 FlashMass[64]=(unsigned char)Tm;
00DB62  78021E     MOV [W14], W4
00DB64  784204     MOV.B W4, W4
00DB66  22B205     MOV #0x2B20, W5
00DB68  784A84     MOV.B W4, [W5]
13955:             
13956:                 Tm=MixedModeLevelOn;
00DB6A  81FFC4     MOV MixedModeLevelOn, W4
00DB6C  780F04     MOV W4, [W14]
13957:                 FlashMass[65]=(unsigned char)Tm;
00DB6E  78021E     MOV [W14], W4
00DB70  784204     MOV.B W4, W4
00DB72  22B215     MOV #0x2B21, W5
00DB74  784A84     MOV.B W4, [W5]
13958:                 Tm=Tm>>8;
00DB76  78021E     MOV [W14], W4
00DB78  DEA248     ASR W4, #8, W4
00DB7A  780F04     MOV W4, [W14]
13959:                 FlashMass[66]=(unsigned char)Tm;
00DB7C  78021E     MOV [W14], W4
00DB7E  784204     MOV.B W4, W4
00DB80  22B225     MOV #0x2B22, W5
00DB82  784A84     MOV.B W4, [W5]
13960:             
13961:                 FlashMass[67]=SpeedLimit2;
00DB84  230204     MOV #0x3020, W4
00DB86  784214     MOV.B [W4], W4
00DB88  22B235     MOV #0x2B23, W5
00DB8A  784A84     MOV.B W4, [W5]
13962:             
13963:                 FlashMass[68]=SpeedLimit3;
00DB8C  230214     MOV #0x3021, W4
00DB8E  784214     MOV.B [W4], W4
00DB90  22B245     MOV #0x2B24, W5
00DB92  784A84     MOV.B W4, [W5]
13964:             
13965:                 FlashMass[69]=(unsigned char)(I_Curr*100);
00DB94  80B534     MOV I_Curr, W4
00DB96  80B545     MOV 0x16A8, W5
00DB98  200002     MOV #0x0, W2
00DB9A  242C83     MOV #0x42C8, W3
00DB9C  BE0004     MOV.D W4, W0
00DB9E  022630     CALL ___mulsf3
00DBA0  000000     NOP
00DBA2  BE0200     MOV.D W0, W4
00DBA4  BE0004     MOV.D W4, W0
00DBA6  022546     CALL ___fixunssfsi
00DBA8  000000     NOP
00DBAA  BE0200     MOV.D W0, W4
00DBAC  784204     MOV.B W4, W4
00DBAE  22B255     MOV #0x2B25, W5
00DBB0  784A84     MOV.B W4, [W5]
13966:             
13967:             
13968:                 Tm=CurrMixed;
00DBB2  81FFF4     MOV CurrMixed, W4
00DBB4  780F04     MOV W4, [W14]
13969:                 FlashMass[70]=(unsigned char)Tm;
00DBB6  78021E     MOV [W14], W4
00DBB8  784204     MOV.B W4, W4
00DBBA  22B265     MOV #0x2B26, W5
00DBBC  784A84     MOV.B W4, [W5]
13970:                 Tm=Tm>>8;
00DBBE  78021E     MOV [W14], W4
00DBC0  DEA248     ASR W4, #8, W4
00DBC2  780F04     MOV W4, [W14]
13971:                 FlashMass[71]=(unsigned char)Tm;
00DBC4  78021E     MOV [W14], W4
00DBC6  784204     MOV.B W4, W4
00DBC8  22B275     MOV #0x2B27, W5
00DBCA  784A84     MOV.B W4, [W5]
13972:             
13973:                 Tm=(int)(KpMax);
00DBCC  809D24     MOV KpMax, W4
00DBCE  809D35     MOV 0x13A6, W5
00DBD0  BE0004     MOV.D W4, W0
00DBD2  022504     CALL ___fixsfsi
00DBD4  000000     NOP
00DBD6  BE0200     MOV.D W0, W4
00DBD8  780F04     MOV W4, [W14]
13974:                 FlashMass[72]=(unsigned char)Tm;
00DBDA  78021E     MOV [W14], W4
00DBDC  784204     MOV.B W4, W4
00DBDE  22B285     MOV #0x2B28, W5
00DBE0  784A84     MOV.B W4, [W5]
13975:                 Tm=Tm>>8;
00DBE2  78021E     MOV [W14], W4
00DBE4  DEA248     ASR W4, #8, W4
00DBE6  780F04     MOV W4, [W14]
13976:                 FlashMass[73]=(unsigned char)Tm;
00DBE8  78021E     MOV [W14], W4
00DBEA  784204     MOV.B W4, W4
00DBEC  22B295     MOV #0x2B29, W5
00DBEE  784A84     MOV.B W4, [W5]
13977:             
13978:                 FlashMass[74]=SensorllessSpdThreshold;//CntKpMustBeConst;
00DBF0  2140B4     MOV #0x140B, W4
00DBF2  784214     MOV.B [W4], W4
00DBF4  22B2A5     MOV #0x2B2A, W5
00DBF6  784A84     MOV.B W4, [W5]
13979:             
13980:                 FlashMass[75]=SpdKpMax;
00DBF8  2124E4     MOV #0x124E, W4
00DBFA  784214     MOV.B [W4], W4
00DBFC  22B2B5     MOV #0x2B2B, W5
00DBFE  784A84     MOV.B W4, [W5]
13981:             
13982:                 Tm=MixedModeLevelOff;
00DC00  81FFD4     MOV MixedModeLevelOff, W4
00DC02  780F04     MOV W4, [W14]
13983:                 FlashMass[76]=(unsigned char)Tm;
00DC04  78021E     MOV [W14], W4
00DC06  784204     MOV.B W4, W4
00DC08  22B2C5     MOV #0x2B2C, W5
00DC0A  784A84     MOV.B W4, [W5]
13984:                 Tm=Tm>>8;
00DC0C  78021E     MOV [W14], W4
00DC0E  DEA248     ASR W4, #8, W4
00DC10  780F04     MOV W4, [W14]
13985:                 FlashMass[77]=(unsigned char)Tm;
00DC12  78021E     MOV [W14], W4
00DC14  784204     MOV.B W4, W4
00DC16  22B2D5     MOV #0x2B2D, W5
00DC18  784A84     MOV.B W4, [W5]
13986:             
13987:             
13988:                 Tm=(int)(KpCurr*100);
00DC1A  81F464     MOV KpCurr, W4
00DC1C  81F475     MOV 0x3E8E, W5
00DC1E  200002     MOV #0x0, W2
00DC20  242C83     MOV #0x42C8, W3
00DC22  BE0004     MOV.D W4, W0
00DC24  022630     CALL ___mulsf3
00DC26  000000     NOP
00DC28  BE0200     MOV.D W0, W4
00DC2A  BE0004     MOV.D W4, W0
00DC2C  022504     CALL ___fixsfsi
00DC2E  000000     NOP
00DC30  BE0200     MOV.D W0, W4
00DC32  780F04     MOV W4, [W14]
13989:                 FlashMass[78]=(unsigned char)Tm;
00DC34  78021E     MOV [W14], W4
00DC36  784204     MOV.B W4, W4
00DC38  22B2E5     MOV #0x2B2E, W5
00DC3A  784A84     MOV.B W4, [W5]
13990:                 Tm=Tm>>8;
00DC3C  78021E     MOV [W14], W4
00DC3E  DEA248     ASR W4, #8, W4
00DC40  780F04     MOV W4, [W14]
13991:                 FlashMass[79]=(unsigned char)Tm;
00DC42  78021E     MOV [W14], W4
00DC44  784204     MOV.B W4, W4
00DC46  22B2F5     MOV #0x2B2F, W5
00DC48  784A84     MOV.B W4, [W5]
13992:             
13993:                 Tm=(int)(Ki_PWM_Mode*10000);
00DC4A  8182A4     MOV Ki_PWM_Mode, W4
00DC4C  8182B5     MOV 0x3056, W5
00DC4E  240002     MOV #0x4000, W2
00DC50  2461C3     MOV #0x461C, W3
00DC52  BE0004     MOV.D W4, W0
00DC54  022630     CALL ___mulsf3
00DC56  000000     NOP
00DC58  BE0200     MOV.D W0, W4
00DC5A  BE0004     MOV.D W4, W0
00DC5C  022504     CALL ___fixsfsi
00DC5E  000000     NOP
00DC60  BE0200     MOV.D W0, W4
00DC62  780F04     MOV W4, [W14]
13994:                 FlashMass[80]=(unsigned char)Tm;
00DC64  78021E     MOV [W14], W4
00DC66  784204     MOV.B W4, W4
00DC68  22B305     MOV #0x2B30, W5
00DC6A  784A84     MOV.B W4, [W5]
13995:                 Tm=Tm>>8;
00DC6C  78021E     MOV [W14], W4
00DC6E  DEA248     ASR W4, #8, W4
00DC70  780F04     MOV W4, [W14]
13996:                 FlashMass[81]=(unsigned char)Tm;
00DC72  78021E     MOV [W14], W4
00DC74  784204     MOV.B W4, W4
00DC76  22B315     MOV #0x2B31, W5
00DC78  784A84     MOV.B W4, [W5]
13997:             
13998:                 
13999:                 FlashMass[82]=P_U;
00DC7A  216A04     MOV #0x16A0, W4
00DC7C  784214     MOV.B [W4], W4
00DC7E  22B325     MOV #0x2B32, W5
00DC80  784A84     MOV.B W4, [W5]
14000:                 FlashMass[83]=I_U;
00DC82  216A14     MOV #0x16A1, W4
00DC84  784214     MOV.B [W4], W4
00DC86  22B335     MOV #0x2B33, W5
00DC88  784A84     MOV.B W4, [W5]
14001:             
14002:             
14003:                 Tm=(int)KpWheelingMem;
00DC8A  809D44     MOV KpWheelingMem, W4
00DC8C  809D55     MOV 0x13AA, W5
00DC8E  BE0004     MOV.D W4, W0
00DC90  022504     CALL ___fixsfsi
00DC92  000000     NOP
00DC94  BE0200     MOV.D W0, W4
00DC96  780F04     MOV W4, [W14]
14004:                 FlashMass[84]=(unsigned char)Tm;
00DC98  78021E     MOV [W14], W4
00DC9A  784204     MOV.B W4, W4
00DC9C  22B345     MOV #0x2B34, W5
00DC9E  784A84     MOV.B W4, [W5]
14005:                 Tm=Tm>>8;
00DCA0  78021E     MOV [W14], W4
00DCA2  DEA248     ASR W4, #8, W4
00DCA4  780F04     MOV W4, [W14]
14006:                 FlashMass[85]=(unsigned char)Tm;
00DCA6  78021E     MOV [W14], W4
00DCA8  784204     MOV.B W4, W4
00DCAA  22B355     MOV #0x2B35, W5
00DCAC  784A84     MOV.B W4, [W5]
14007:             
14008:                 Tm=(int)(KiWheelingMem*1000);
00DCAE  809B64     MOV KiWheelingMem, W4
00DCB0  809B75     MOV 0x136E, W5
00DCB2  200002     MOV #0x0, W2
00DCB4  2447A3     MOV #0x447A, W3
00DCB6  BE0004     MOV.D W4, W0
00DCB8  022630     CALL ___mulsf3
00DCBA  000000     NOP
00DCBC  BE0200     MOV.D W0, W4
00DCBE  BE0004     MOV.D W4, W0
00DCC0  022504     CALL ___fixsfsi
00DCC2  000000     NOP
00DCC4  BE0200     MOV.D W0, W4
00DCC6  780F04     MOV W4, [W14]
14009:                 FlashMass[86]=(unsigned char)Tm;
00DCC8  78021E     MOV [W14], W4
00DCCA  784204     MOV.B W4, W4
00DCCC  22B365     MOV #0x2B36, W5
00DCCE  784A84     MOV.B W4, [W5]
14010:                 Tm=Tm>>8;
00DCD0  78021E     MOV [W14], W4
00DCD2  DEA248     ASR W4, #8, W4
00DCD4  780F04     MOV W4, [W14]
14011:                 FlashMass[87]=(unsigned char)Tm;
00DCD6  78021E     MOV [W14], W4
00DCD8  784204     MOV.B W4, W4
00DCDA  22B375     MOV #0x2B37, W5
00DCDC  784A84     MOV.B W4, [W5]
14012:             
14013:                 Tm=(int)(TiltZadWheeling*10);
00DCDE  815694     MOV TiltZadWheeling, W4
00DCE0  8156A5     MOV 0x2AD4, W5
00DCE2  200002     MOV #0x0, W2
00DCE4  241203     MOV #0x4120, W3
00DCE6  BE0004     MOV.D W4, W0
00DCE8  022630     CALL ___mulsf3
00DCEA  000000     NOP
00DCEC  BE0200     MOV.D W0, W4
00DCEE  BE0004     MOV.D W4, W0
00DCF0  022504     CALL ___fixsfsi
00DCF2  000000     NOP
00DCF4  BE0200     MOV.D W0, W4
00DCF6  780F04     MOV W4, [W14]
14014:                 FlashMass[88]=(unsigned char)Tm;
00DCF8  78021E     MOV [W14], W4
00DCFA  784204     MOV.B W4, W4
00DCFC  22B385     MOV #0x2B38, W5
00DCFE  784A84     MOV.B W4, [W5]
14015:                 Tm=Tm>>8;
00DD00  78021E     MOV [W14], W4
00DD02  DEA248     ASR W4, #8, W4
00DD04  780F04     MOV W4, [W14]
14016:                 FlashMass[89]=(unsigned char)Tm;
00DD06  78021E     MOV [W14], W4
00DD08  784204     MOV.B W4, W4
00DD0A  22B395     MOV #0x2B39, W5
00DD0C  784A84     MOV.B W4, [W5]
14017:             
14018:                 Tm=MAX_PWM_MEM;
00DD0E  809984     MOV MAX_PWM_MEM, W4
00DD10  780F04     MOV W4, [W14]
14019:                 FlashMass[90]=(unsigned char)Tm;
00DD12  78021E     MOV [W14], W4
00DD14  784204     MOV.B W4, W4
00DD16  22B3A5     MOV #0x2B3A, W5
00DD18  784A84     MOV.B W4, [W5]
14020:                 Tm=Tm>>8;
00DD1A  78021E     MOV [W14], W4
00DD1C  DEA248     ASR W4, #8, W4
00DD1E  780F04     MOV W4, [W14]
14021:                 FlashMass[91]=(unsigned char)Tm;
00DD20  78021E     MOV [W14], W4
00DD22  784204     MOV.B W4, W4
00DD24  22B3B5     MOV #0x2B3B, W5
00DD26  784A84     MOV.B W4, [W5]
14022:             
14023:                 Tm=(int)(KiTemperIN*(float)100);
00DD28  820314     MOV KiTemperIN, W4
00DD2A  820325     MOV 0x4064, W5
00DD2C  200002     MOV #0x0, W2
00DD2E  242C83     MOV #0x42C8, W3
00DD30  BE0004     MOV.D W4, W0
00DD32  022630     CALL ___mulsf3
00DD34  000000     NOP
00DD36  BE0200     MOV.D W0, W4
00DD38  BE0004     MOV.D W4, W0
00DD3A  022504     CALL ___fixsfsi
00DD3C  000000     NOP
00DD3E  BE0200     MOV.D W0, W4
00DD40  780F04     MOV W4, [W14]
14024:                 FlashMass[92]=(unsigned char)Tm;
00DD42  78021E     MOV [W14], W4
00DD44  784204     MOV.B W4, W4
00DD46  22B3C5     MOV #0x2B3C, W5
00DD48  784A84     MOV.B W4, [W5]
14025:                 Tm=Tm>>8;
00DD4A  78021E     MOV [W14], W4
00DD4C  DEA248     ASR W4, #8, W4
00DD4E  780F04     MOV W4, [W14]
14026:                 FlashMass[93]=(unsigned char)Tm;
00DD50  78021E     MOV [W14], W4
00DD52  784204     MOV.B W4, W4
00DD54  22B3D5     MOV #0x2B3D, W5
00DD56  784A84     MOV.B W4, [W5]
14027:             
14028:             
14029:                 Tm=KpTemperIN;
00DD58  820334     MOV KpTemperIN, W4
00DD5A  820345     MOV 0x4068, W5
00DD5C  BE0004     MOV.D W4, W0
00DD5E  022504     CALL ___fixsfsi
00DD60  000000     NOP
00DD62  BE0200     MOV.D W0, W4
00DD64  780F04     MOV W4, [W14]
14030:                 FlashMass[94]=(unsigned char)Tm;
00DD66  78021E     MOV [W14], W4
00DD68  784204     MOV.B W4, W4
00DD6A  22B3E5     MOV #0x2B3E, W5
00DD6C  784A84     MOV.B W4, [W5]
14031:                 Tm=Tm>>8;
00DD6E  78021E     MOV [W14], W4
00DD70  DEA248     ASR W4, #8, W4
00DD72  780F04     MOV W4, [W14]
14032:                 FlashMass[95]=(unsigned char)Tm;
00DD74  78021E     MOV [W14], W4
00DD76  784204     MOV.B W4, W4
00DD78  22B3F5     MOV #0x2B3F, W5
00DD7A  784A84     MOV.B W4, [W5]
14033:             
14034:                 Tm=KpTemperOUT;
00DD7C  8203D4     MOV KpTemperOUT, W4
00DD7E  8203E5     MOV 0x407C, W5
00DD80  BE0004     MOV.D W4, W0
00DD82  022504     CALL ___fixsfsi
00DD84  000000     NOP
00DD86  BE0200     MOV.D W0, W4
00DD88  780F04     MOV W4, [W14]
14035:                 FlashMass[96]=(unsigned char)Tm;
00DD8A  78021E     MOV [W14], W4
00DD8C  784204     MOV.B W4, W4
00DD8E  22B405     MOV #0x2B40, W5
00DD90  784A84     MOV.B W4, [W5]
14036:                 Tm=Tm>>8;
00DD92  78021E     MOV [W14], W4
00DD94  DEA248     ASR W4, #8, W4
00DD96  780F04     MOV W4, [W14]
14037:                 FlashMass[97]=(unsigned char)Tm;
00DD98  78021E     MOV [W14], W4
00DD9A  784204     MOV.B W4, W4
00DD9C  22B415     MOV #0x2B41, W5
00DD9E  784A84     MOV.B W4, [W5]
14038:             
14039:             //OneTwoLeg
14040:             
14041:             
14042:                 Tm=(int)(KiTemperOUT*100);
00DDA0  8203B4     MOV KiTemperOUT, W4
00DDA2  8203C5     MOV 0x4078, W5
00DDA4  200002     MOV #0x0, W2
00DDA6  242C83     MOV #0x42C8, W3
00DDA8  BE0004     MOV.D W4, W0
00DDAA  022630     CALL ___mulsf3
00DDAC  000000     NOP
00DDAE  BE0200     MOV.D W0, W4
00DDB0  BE0004     MOV.D W4, W0
00DDB2  022504     CALL ___fixsfsi
00DDB4  000000     NOP
00DDB6  BE0200     MOV.D W0, W4
00DDB8  780F04     MOV W4, [W14]
14043:                 FlashMass[98]=(unsigned char)Tm;
00DDBA  78021E     MOV [W14], W4
00DDBC  784204     MOV.B W4, W4
00DDBE  22B425     MOV #0x2B42, W5
00DDC0  784A84     MOV.B W4, [W5]
14044:                 Tm=Tm>>8;
00DDC2  78021E     MOV [W14], W4
00DDC4  DEA248     ASR W4, #8, W4
00DDC6  780F04     MOV W4, [W14]
14045:                 FlashMass[99]=(unsigned char)Tm;
00DDC8  78021E     MOV [W14], W4
00DDCA  784204     MOV.B W4, W4
00DDCC  22B435     MOV #0x2B43, W5
00DDCE  784A84     MOV.B W4, [W5]
14046:                 
14047:                 FlashMass[100]=MAX_PWM_Revers;
00DDD0  8099A4     MOV MAX_PWM_Revers, W4
00DDD2  784204     MOV.B W4, W4
00DDD4  22B445     MOV #0x2B44, W5
00DDD6  784A84     MOV.B W4, [W5]
14048:                 FlashMass[101]=MaxSpdRevers;
00DDD8  230C64     MOV #0x30C6, W4
00DDDA  784214     MOV.B [W4], W4
00DDDC  22B455     MOV #0x2B45, W5
00DDDE  784A84     MOV.B W4, [W5]
14049:             
14050:             
14051:                 FlashMass[102]=MixedModeSlowSpeed;
00DDE0  236EA4     MOV #0x36EA, W4
00DDE2  784214     MOV.B [W4], W4
00DDE4  22B465     MOV #0x2B46, W5
00DDE6  784A84     MOV.B W4, [W5]
14052:             
14053:                 FlashMass[103]=HallDelay1MaxSPD_B;
00DDE8  237E44     MOV #0x37E4, W4
00DDEA  784214     MOV.B [W4], W4
00DDEC  22B475     MOV #0x2B47, W5
00DDEE  784A84     MOV.B W4, [W5]
14054:             
14055:                 Tm=StatFlgs3.StatusFlags;
00DDF0  809774     MOV StatFlgs3, W4
00DDF2  780F04     MOV W4, [W14]
14056:                 FlashMass[104]=(unsigned char)Tm;
00DDF4  78021E     MOV [W14], W4
00DDF6  784204     MOV.B W4, W4
00DDF8  22B485     MOV #0x2B48, W5
00DDFA  784A84     MOV.B W4, [W5]
14057:                 Tm=Tm>>8;
00DDFC  78021E     MOV [W14], W4
00DDFE  DEA248     ASR W4, #8, W4
00DE00  780F04     MOV W4, [W14]
14058:                 FlashMass[105]=(unsigned char)Tm;
00DE02  78021E     MOV [W14], W4
00DE04  784204     MOV.B W4, W4
00DE06  22B495     MOV #0x2B49, W5
00DE08  784A84     MOV.B W4, [W5]
14059:             
14060:                 
14061:                 FlashMass[106]=StringPINLenghtOptions;
00DE0A  230AC4     MOV #0x30AC, W4
00DE0C  784214     MOV.B [W4], W4
00DE0E  22B4A5     MOV #0x2B4A, W5
00DE10  784A84     MOV.B W4, [W5]
14062:                 FlashMass[107]=PinCodeMassOptions[0];
00DE12  217554     MOV #0x1755, W4
00DE14  784214     MOV.B [W4], W4
00DE16  22B4B5     MOV #0x2B4B, W5
00DE18  784A84     MOV.B W4, [W5]
14063:             
14064:                  
14065:                 
14066:             
14067:                 Tm=AutoPID_On_CntConst;
00DE1A  8218B4     MOV AutoPID_On_CntConst, W4
00DE1C  780F04     MOV W4, [W14]
14068:                 FlashMass[108]=(unsigned char)Tm;
00DE1E  78021E     MOV [W14], W4
00DE20  784204     MOV.B W4, W4
00DE22  22B4C5     MOV #0x2B4C, W5
00DE24  784A84     MOV.B W4, [W5]
14069:                 Tm=Tm>>8;
00DE26  78021E     MOV [W14], W4
00DE28  DEA248     ASR W4, #8, W4
00DE2A  780F04     MOV W4, [W14]
14070:                 FlashMass[109]=(unsigned char)Tm;
00DE2C  78021E     MOV [W14], W4
00DE2E  784204     MOV.B W4, W4
00DE30  22B4D5     MOV #0x2B4D, W5
00DE32  784A84     MOV.B W4, [W5]
14071:             
14072:                 FlashMass[110]=AutoPID_On_PWM;
00DE34  240BA4     MOV #0x40BA, W4
00DE36  784214     MOV.B [W4], W4
00DE38  22B4E5     MOV #0x2B4E, W5
00DE3A  784A84     MOV.B W4, [W5]
14073:                 FlashMass[111]=AutoPID_On_Speed;
00DE3C  240BB4     MOV #0x40BB, W4
00DE3E  784214     MOV.B [W4], W4
00DE40  22B4F5     MOV #0x2B4F, W5
00DE42  784A84     MOV.B W4, [W5]
14074:             
14075:                 Tm=Diametr1;
00DE44  821434     MOV Diametr1, W4
00DE46  780F04     MOV W4, [W14]
14076:                 FlashMass[112]=(unsigned char)Tm;
00DE48  78021E     MOV [W14], W4
00DE4A  784204     MOV.B W4, W4
00DE4C  22B505     MOV #0x2B50, W5
00DE4E  784A84     MOV.B W4, [W5]
14077:                 Tm=Tm>>8;
00DE50  78021E     MOV [W14], W4
00DE52  DEA248     ASR W4, #8, W4
00DE54  780F04     MOV W4, [W14]
14078:                 FlashMass[113]=(unsigned char)Tm;
00DE56  78021E     MOV [W14], W4
00DE58  784204     MOV.B W4, W4
00DE5A  22B515     MOV #0x2B51, W5
00DE5C  784A84     MOV.B W4, [W5]
14079:             
14080:                 Tm=PhasesPerRev1;
00DE5E  821424     MOV PhasesPerRev1, W4
00DE60  780F04     MOV W4, [W14]
14081:                 FlashMass[114]=(unsigned char)Tm;
00DE62  78021E     MOV [W14], W4
00DE64  784204     MOV.B W4, W4
00DE66  22B525     MOV #0x2B52, W5
00DE68  784A84     MOV.B W4, [W5]
14082:                 Tm=Tm>>8;
00DE6A  78021E     MOV [W14], W4
00DE6C  DEA248     ASR W4, #8, W4
00DE6E  780F04     MOV W4, [W14]
14083:                 FlashMass[115]=(unsigned char)Tm;
00DE70  78021E     MOV [W14], W4
00DE72  784204     MOV.B W4, W4
00DE74  22B535     MOV #0x2B53, W5
00DE76  784A84     MOV.B W4, [W5]
14084:             
14085:                 Tm=UBatHiMem;
00DE78  818354     MOV UBatHiMem, W4
00DE7A  780F04     MOV W4, [W14]
14086:                 FlashMass[116]=(unsigned char)Tm;
00DE7C  78021E     MOV [W14], W4
00DE7E  784204     MOV.B W4, W4
00DE80  22B545     MOV #0x2B54, W5
00DE82  784A84     MOV.B W4, [W5]
14087:                 Tm=Tm>>8;
00DE84  78021E     MOV [W14], W4
00DE86  DEA248     ASR W4, #8, W4
00DE88  780F04     MOV W4, [W14]
14088:                 FlashMass[117]=(unsigned char)Tm;
00DE8A  78021E     MOV [W14], W4
00DE8C  784204     MOV.B W4, W4
00DE8E  22B555     MOV #0x2B55, W5
00DE90  784A84     MOV.B W4, [W5]
14089:             
14090:             
14091:             
14092:             //Fresman
14093:             
14094:             
14095:                 Tm=BreakThresholdDn;
00DE92  8094C4     MOV BreakThresholdDn, W4
00DE94  780F04     MOV W4, [W14]
14096:                 FlashMass[118]=(unsigned char)Tm;
00DE96  78021E     MOV [W14], W4
00DE98  784204     MOV.B W4, W4
00DE9A  22B565     MOV #0x2B56, W5
00DE9C  784A84     MOV.B W4, [W5]
14097:                 Tm=Tm>>8;
00DE9E  78021E     MOV [W14], W4
00DEA0  DEA248     ASR W4, #8, W4
00DEA2  780F04     MOV W4, [W14]
14098:                 FlashMass[119]=(unsigned char)Tm;
00DEA4  78021E     MOV [W14], W4
00DEA6  784204     MOV.B W4, W4
00DEA8  22B575     MOV #0x2B57, W5
00DEAA  784A84     MOV.B W4, [W5]
14099:             
14100:                 Tm=BreakThresholdUp;
00DEAC  8094B4     MOV BreakThresholdUp, W4
00DEAE  780F04     MOV W4, [W14]
14101:                 FlashMass[120]=(unsigned char)Tm;
00DEB0  78021E     MOV [W14], W4
00DEB2  784204     MOV.B W4, W4
00DEB4  22B585     MOV #0x2B58, W5
00DEB6  784A84     MOV.B W4, [W5]
14102:                 Tm=Tm>>8;
00DEB8  78021E     MOV [W14], W4
00DEBA  DEA248     ASR W4, #8, W4
00DEBC  780F04     MOV W4, [W14]
14103:                 FlashMass[121]=(unsigned char)Tm;
00DEBE  78021E     MOV [W14], W4
00DEC0  784204     MOV.B W4, W4
00DEC2  22B595     MOV #0x2B59, W5
00DEC4  784A84     MOV.B W4, [W5]
14104:             
14105:                 Tm=(int)(KTemperatureSPDControl*1000);
00DEC6  81B794     MOV KTemperatureSPDControl, W4
00DEC8  81B7A5     MOV 0x36F4, W5
00DECA  200002     MOV #0x0, W2
00DECC  2447A3     MOV #0x447A, W3
00DECE  BE0004     MOV.D W4, W0
00DED0  022630     CALL ___mulsf3
00DED2  000000     NOP
00DED4  BE0200     MOV.D W0, W4
00DED6  BE0004     MOV.D W4, W0
00DED8  022504     CALL ___fixsfsi
00DEDA  000000     NOP
00DEDC  BE0200     MOV.D W0, W4
00DEDE  780F04     MOV W4, [W14]
14106:                 FlashMass[122]=(unsigned char)Tm;
00DEE0  78021E     MOV [W14], W4
00DEE2  784204     MOV.B W4, W4
00DEE4  22B5A5     MOV #0x2B5A, W5
00DEE6  784A84     MOV.B W4, [W5]
14107:                 Tm=Tm>>8;
00DEE8  78021E     MOV [W14], W4
00DEEA  DEA248     ASR W4, #8, W4
00DEEC  780F04     MOV W4, [W14]
14108:                 FlashMass[123]=(unsigned char)Tm;
00DEEE  78021E     MOV [W14], W4
00DEF0  784204     MOV.B W4, W4
00DEF2  22B5B5     MOV #0x2B5B, W5
00DEF4  784A84     MOV.B W4, [W5]
14109:             
14110:                 
14111:                 FlashMass[124]=Profile;
00DEF6  237E24     MOV #0x37E2, W4
00DEF8  784214     MOV.B [W4], W4
00DEFA  22B5C5     MOV #0x2B5C, W5
00DEFC  784A84     MOV.B W4, [W5]
14112:                 FlashMass[125]=_3psnSwitchBtNotPressed;
00DEFE  214044     MOV #0x1404, W4
00DF00  784214     MOV.B [W4], W4
00DF02  22B5D5     MOV #0x2B5D, W5
00DF04  784A84     MOV.B W4, [W5]
14113:             
14114:             
14115:                 FlashMass[126]=_3psnSwitchBt3;
00DF06  214054     MOV #0x1405, W4
00DF08  784214     MOV.B [W4], W4
00DF0A  22B5E5     MOV #0x2B5E, W5
00DF0C  784A84     MOV.B W4, [W5]
14116:                 FlashMass[127]=_3psnSwitchBt4;
00DF0E  214064     MOV #0x1406, W4
00DF10  784214     MOV.B [W4], W4
00DF12  22B5F5     MOV #0x2B5F, W5
00DF14  784A84     MOV.B W4, [W5]
14117:             
14118:             
14119:                 Tm=CurrPhaseLimitWork;
00DF16  81F4D4     MOV CurrPhaseLimitWork, W4
00DF18  780F04     MOV W4, [W14]
14120:                 FlashMass[128]=(unsigned char)Tm;
00DF1A  78021E     MOV [W14], W4
00DF1C  784204     MOV.B W4, W4
00DF1E  22B605     MOV #0x2B60, W5
00DF20  784A84     MOV.B W4, [W5]
14121:                 Tm=Tm>>8;
00DF22  78021E     MOV [W14], W4
00DF24  DEA248     ASR W4, #8, W4
00DF26  780F04     MOV W4, [W14]
14122:                 FlashMass[129]=(unsigned char)Tm;
00DF28  78021E     MOV [W14], W4
00DF2A  784204     MOV.B W4, W4
00DF2C  22B615     MOV #0x2B61, W5
00DF2E  784A84     MOV.B W4, [W5]
14123:             
14124:                 //Tm=StartRotFreshmanL;
14125:                 FlashMass[130]=CurrSensor;//(unsigned char)Tm;
00DF30  230C74     MOV #0x30C7, W4
00DF32  784214     MOV.B [W4], W4
00DF34  22B625     MOV #0x2B62, W5
00DF36  784A84     MOV.B W4, [W5]
14126:             //    Tm=Tm>>8;
14127:                 FlashMass[131]=HallDelay1MaxSPD_F;
00DF38  237E34     MOV #0x37E3, W4
00DF3A  784214     MOV.B [W4], W4
00DF3C  22B635     MOV #0x2B63, W5
00DF3E  784A84     MOV.B W4, [W5]
14128:             
14129:                 Tm=CurrUstSpd0;
00DF40  81F4A4     MOV CurrUstSpd0, W4
00DF42  780F04     MOV W4, [W14]
14130:                 FlashMass[132]=(unsigned char)Tm;
00DF44  78021E     MOV [W14], W4
00DF46  784204     MOV.B W4, W4
00DF48  22B645     MOV #0x2B64, W5
00DF4A  784A84     MOV.B W4, [W5]
14131:                 Tm=Tm>>8;
00DF4C  78021E     MOV [W14], W4
00DF4E  DEA248     ASR W4, #8, W4
00DF50  780F04     MOV W4, [W14]
14132:                 FlashMass[133]=(unsigned char)Tm;
00DF52  78021E     MOV [W14], W4
00DF54  784204     MOV.B W4, W4
00DF56  22B655     MOV #0x2B65, W5
00DF58  784A84     MOV.B W4, [W5]
14133:             
14134:                 Tm=CurrPhaseLimitSpd0;
00DF5A  81B7B4     MOV CurrPhaseLimitSpd0, W4
00DF5C  780F04     MOV W4, [W14]
14135:                 FlashMass[134]=(unsigned char)Tm;
00DF5E  78021E     MOV [W14], W4
00DF60  784204     MOV.B W4, W4
00DF62  22B665     MOV #0x2B66, W5
00DF64  784A84     MOV.B W4, [W5]
14136:                 Tm=Tm>>8;
00DF66  78021E     MOV [W14], W4
00DF68  DEA248     ASR W4, #8, W4
00DF6A  780F04     MOV W4, [W14]
14137:                 FlashMass[135]=(unsigned char)Tm;
00DF6C  78021E     MOV [W14], W4
00DF6E  784204     MOV.B W4, W4
00DF70  22B675     MOV #0x2B67, W5
00DF72  784A84     MOV.B W4, [W5]
14138:             
14139:                 Tm=CurrLimitSpd0;
00DF74  81B7E4     MOV CurrLimitSpd0, W4
00DF76  780F04     MOV W4, [W14]
14140:                 FlashMass[136]=(unsigned char)Tm;
00DF78  78021E     MOV [W14], W4
00DF7A  784204     MOV.B W4, W4
00DF7C  22B685     MOV #0x2B68, W5
00DF7E  784A84     MOV.B W4, [W5]
14141:                 Tm=Tm>>8;
00DF80  78021E     MOV [W14], W4
00DF82  DEA248     ASR W4, #8, W4
00DF84  780F04     MOV W4, [W14]
14142:                 FlashMass[137]=(unsigned char)Tm;
00DF86  78021E     MOV [W14], W4
00DF88  784204     MOV.B W4, W4
00DF8A  22B695     MOV #0x2B69, W5
00DF8C  784A84     MOV.B W4, [W5]
14143:             
14144:             
14145:                 
14146:                 FlashMass[138]=MaxAngleStopBreak;
00DF8E  236FE4     MOV #0x36FE, W4
00DF90  784214     MOV.B [W4], W4
00DF92  22B6A5     MOV #0x2B6A, W5
00DF94  784A84     MOV.B W4, [W5]
14147:                 
14148:                 FlashMass[139]=ThrottleTmpChngMem;
00DF96  2329A4     MOV #0x329A, W4
00DF98  784214     MOV.B [W4], W4
00DF9A  22B6B5     MOV #0x2B6B, W5
00DF9C  784A84     MOV.B W4, [W5]
14149:             
14150:             
14151:                 Tm=BeepPauseConstAlm;
00DF9E  818574     MOV BeepPauseConstAlm, W4
00DFA0  780F04     MOV W4, [W14]
14152:                 FlashMass[140]=(unsigned char)Tm;
00DFA2  78021E     MOV [W14], W4
00DFA4  784204     MOV.B W4, W4
00DFA6  22B6C5     MOV #0x2B6C, W5
00DFA8  784A84     MOV.B W4, [W5]
14153:                 Tm=Tm>>8;
00DFAA  78021E     MOV [W14], W4
00DFAC  DEA248     ASR W4, #8, W4
00DFAE  780F04     MOV W4, [W14]
14154:                 FlashMass[141]=(unsigned char)Tm;
00DFB0  78021E     MOV [W14], W4
00DFB2  784204     MOV.B W4, W4
00DFB4  22B6D5     MOV #0x2B6D, W5
00DFB6  784A84     MOV.B W4, [W5]
14155:             
14156:             
14157:                 Tm=BzOnCntSeriaConstAlm;
00DFB8  8180C4     MOV BzOnCntSeriaConstAlm, W4
00DFBA  780F04     MOV W4, [W14]
14158:                 FlashMass[142]=(unsigned char)Tm;
00DFBC  78021E     MOV [W14], W4
00DFBE  784204     MOV.B W4, W4
00DFC0  22B6E5     MOV #0x2B6E, W5
00DFC2  784A84     MOV.B W4, [W5]
14159:                 Tm=Tm>>8;
00DFC4  78021E     MOV [W14], W4
00DFC6  DEA248     ASR W4, #8, W4
00DFC8  780F04     MOV W4, [W14]
14160:                 FlashMass[143]=(unsigned char)Tm;
00DFCA  78021E     MOV [W14], W4
00DFCC  784204     MOV.B W4, W4
00DFCE  22B6F5     MOV #0x2B6F, W5
00DFD0  784A84     MOV.B W4, [W5]
14161:             
14162:             
14163:                 FlashMass[144]=CntSingleBeepAlm;
00DFD2  230AA4     MOV #0x30AA, W4
00DFD4  784214     MOV.B [W4], W4
00DFD6  22B705     MOV #0x2B70, W5
00DFD8  784A84     MOV.B W4, [W5]
14164:             
14165:                 FlashMass[145]=DiffAlfaConstL;
00DFDA  236FF4     MOV #0x36FF, W4
00DFDC  784214     MOV.B [W4], W4
00DFDE  22B715     MOV #0x2B71, W5
00DFE0  784A84     MOV.B W4, [W5]
14166:             
14167:                 FlashMass[146]=DiffAlfaConstH;
00DFE2  237004     MOV #0x3700, W4
00DFE4  784214     MOV.B [W4], W4
00DFE6  22B725     MOV #0x2B72, W5
00DFE8  784A84     MOV.B W4, [W5]
14168:             
14169:                 Tm=ZeroCurr1;
00DFEA  809534     MOV ZeroCurr1, W4
00DFEC  780F04     MOV W4, [W14]
14170:                 FlashMass[147]=(unsigned char)Tm;
00DFEE  78021E     MOV [W14], W4
00DFF0  784204     MOV.B W4, W4
00DFF2  22B735     MOV #0x2B73, W5
00DFF4  784A84     MOV.B W4, [W5]
14171:                 Tm=Tm>>8;
00DFF6  78021E     MOV [W14], W4
00DFF8  DEA248     ASR W4, #8, W4
00DFFA  780F04     MOV W4, [W14]
14172:                 FlashMass[148]=(unsigned char)Tm;
00DFFC  78021E     MOV [W14], W4
00DFFE  784204     MOV.B W4, W4
00E000  22B745     MOV #0x2B74, W5
00E002  784A84     MOV.B W4, [W5]
14173:             
14174:                 
14175:                 FlashMass[149]=MaxSpd;
00E004  230C54     MOV #0x30C5, W4
00E006  784214     MOV.B [W4], W4
00E008  22B755     MOV #0x2B75, W5
00E00A  784A84     MOV.B W4, [W5]
14176:                 
14177:                 FlashMass[150]=But5Func;
00E00C  240204     MOV #0x4020, W4
00E00E  784214     MOV.B [W4], W4
00E010  22B765     MOV #0x2B76, W5
00E012  784A84     MOV.B W4, [W5]
14178:             
14179:             
14180:                 Tm=Timer1Mem;
00E014  81BA04     MOV Timer1Mem, W4
00E016  780F04     MOV W4, [W14]
14181:                 FlashMass[151]=(unsigned char)Tm;
00E018  78021E     MOV [W14], W4
00E01A  784204     MOV.B W4, W4
00E01C  22B775     MOV #0x2B77, W5
00E01E  784A84     MOV.B W4, [W5]
14182:                 Tm=Tm>>8;
00E020  78021E     MOV [W14], W4
00E022  DEA248     ASR W4, #8, W4
00E024  780F04     MOV W4, [W14]
14183:                 FlashMass[152]=(unsigned char)Tm;
00E026  78021E     MOV [W14], W4
00E028  784204     MOV.B W4, W4
00E02A  22B785     MOV #0x2B78, W5
00E02C  784A84     MOV.B W4, [W5]
14184:             
14185:                 Tm=Timer2Mem;
00E02E  81BA14     MOV Timer2Mem, W4
00E030  780F04     MOV W4, [W14]
14186:                 FlashMass[153]=(unsigned char)Tm;
00E032  78021E     MOV [W14], W4
00E034  784204     MOV.B W4, W4
00E036  22B795     MOV #0x2B79, W5
00E038  784A84     MOV.B W4, [W5]
14187:                 Tm=Tm>>8;
00E03A  78021E     MOV [W14], W4
00E03C  DEA248     ASR W4, #8, W4
00E03E  780F04     MOV W4, [W14]
14188:                 FlashMass[154]=(unsigned char)Tm;
00E040  78021E     MOV [W14], W4
00E042  784204     MOV.B W4, W4
00E044  22B7A5     MOV #0x2B7A, W5
00E046  784A84     MOV.B W4, [W5]
14189:             
14190:                 FlashMass[155]=UseTmr;
00E048  2373E4     MOV #0x373E, W4
00E04A  784214     MOV.B [W4], W4
00E04C  22B7B5     MOV #0x2B7B, W5
00E04E  784A84     MOV.B W4, [W5]
14191:             
14192:                 Tm=SerNumber;
00E050  81BAA4     MOV SerNumber, W4
00E052  780F04     MOV W4, [W14]
14193:                 FlashMass[156]=(unsigned char)Tm;
00E054  78021E     MOV [W14], W4
00E056  784204     MOV.B W4, W4
00E058  22B7C5     MOV #0x2B7C, W5
00E05A  784A84     MOV.B W4, [W5]
14194:                 Tm=Tm>>8;
00E05C  78021E     MOV [W14], W4
00E05E  DEA248     ASR W4, #8, W4
00E060  780F04     MOV W4, [W14]
14195:                 FlashMass[157]=(unsigned char)Tm;
00E062  78021E     MOV [W14], W4
00E064  784204     MOV.B W4, W4
00E066  22B7D5     MOV #0x2B7D, W5
00E068  784A84     MOV.B W4, [W5]
14196:             
14197:             
14198:             //OneTwoLeg1
14199:             
14200:             
14201:                 Tm=SensorLessCurrLimit;
00E06A  80C1B4     MOV SensorLessCurrLimit, W4
00E06C  780F04     MOV W4, [W14]
14202:                 FlashMass[158]=(unsigned char)Tm;
00E06E  78021E     MOV [W14], W4
00E070  784204     MOV.B W4, W4
00E072  22B7E5     MOV #0x2B7E, W5
00E074  784A84     MOV.B W4, [W5]
14203:                 Tm=Tm>>8;
00E076  78021E     MOV [W14], W4
00E078  DEA248     ASR W4, #8, W4
00E07A  780F04     MOV W4, [W14]
14204:                 FlashMass[159]=(unsigned char)Tm;
00E07C  78021E     MOV [W14], W4
00E07E  784204     MOV.B W4, W4
00E080  22B7F5     MOV #0x2B7F, W5
00E082  784A84     MOV.B W4, [W5]
14205:             
14206:                 
14207:                 FlashMass[160]=SlowStrtSpd;
00E084  240D04     MOV #0x40D0, W4
00E086  784214     MOV.B [W4], W4
00E088  22B805     MOV #0x2B80, W5
00E08A  784A84     MOV.B W4, [W5]
14208:                 
14209:                 FlashMass[161]=AntiPolicePower;
00E08C  240D14     MOV #0x40D1, W4
00E08E  784214     MOV.B [W4], W4
00E090  22B815     MOV #0x2B81, W5
00E092  784A84     MOV.B W4, [W5]
14210:             
14211:                 Tm=SensorlessCurrUst;               
00E094  81F4F4     MOV SensorlessCurrUst, W4
00E096  780F04     MOV W4, [W14]
14212:                 FlashMass[162]=(unsigned char)Tm;
00E098  78021E     MOV [W14], W4
00E09A  784204     MOV.B W4, W4
00E09C  22B825     MOV #0x2B82, W5
00E09E  784A84     MOV.B W4, [W5]
14213:                 Tm=Tm>>8;
00E0A0  78021E     MOV [W14], W4
00E0A2  DEA248     ASR W4, #8, W4
00E0A4  780F04     MOV W4, [W14]
14214:                 FlashMass[163]=(unsigned char)Tm;
00E0A6  78021E     MOV [W14], W4
00E0A8  784204     MOV.B W4, W4
00E0AA  22B835     MOV #0x2B83, W5
00E0AC  784A84     MOV.B W4, [W5]
14215:             
14216:                 Tm=GyroZFlTurn;
00E0AE  818314     MOV GyroZFlTurn, W4
00E0B0  780F04     MOV W4, [W14]
14217:                 FlashMass[164]=(unsigned char)Tm;
00E0B2  78021E     MOV [W14], W4
00E0B4  784204     MOV.B W4, W4
00E0B6  22B845     MOV #0x2B84, W5
00E0B8  784A84     MOV.B W4, [W5]
14218:                 Tm=Tm>>8;
00E0BA  78021E     MOV [W14], W4
00E0BC  DEA248     ASR W4, #8, W4
00E0BE  780F04     MOV W4, [W14]
14219:                 FlashMass[165]=(unsigned char)Tm;
00E0C0  78021E     MOV [W14], W4
00E0C2  784204     MOV.B W4, W4
00E0C4  22B855     MOV #0x2B85, W5
00E0C6  784A84     MOV.B W4, [W5]
14220:             
14221:                 Tm=(int)(Kp_PWM_Mode*100);
00E0C8  81B764     MOV Kp_PWM_Mode, W4
00E0CA  81B775     MOV 0x36EE, W5
00E0CC  200002     MOV #0x0, W2
00E0CE  242C83     MOV #0x42C8, W3
00E0D0  BE0004     MOV.D W4, W0
00E0D2  022630     CALL ___mulsf3
00E0D4  000000     NOP
00E0D6  BE0200     MOV.D W0, W4
00E0D8  BE0004     MOV.D W4, W0
00E0DA  022504     CALL ___fixsfsi
00E0DC  000000     NOP
00E0DE  BE0200     MOV.D W0, W4
00E0E0  780F04     MOV W4, [W14]
14222:                 FlashMass[166]=(unsigned char)Tm;
00E0E2  78021E     MOV [W14], W4
00E0E4  784204     MOV.B W4, W4
00E0E6  22B865     MOV #0x2B86, W5
00E0E8  784A84     MOV.B W4, [W5]
14223:                 Tm=Tm>>8;
00E0EA  78021E     MOV [W14], W4
00E0EC  DEA248     ASR W4, #8, W4
00E0EE  780F04     MOV W4, [W14]
14224:                 FlashMass[167]=(unsigned char)Tm;
00E0F0  78021E     MOV [W14], W4
00E0F2  784204     MOV.B W4, W4
00E0F4  22B875     MOV #0x2B87, W5
00E0F6  784A84     MOV.B W4, [W5]
14225:             
14226:             
14227:                 Tm=Spd0TimerConst;
00E0F8  821484     MOV Spd0TimerConst, W4
00E0FA  780F04     MOV W4, [W14]
14228:                 FlashMass[168]=(unsigned char)Tm;
00E0FC  78021E     MOV [W14], W4
00E0FE  784204     MOV.B W4, W4
00E100  22B885     MOV #0x2B88, W5
00E102  784A84     MOV.B W4, [W5]
14229:                 Tm=Tm>>8;
00E104  78021E     MOV [W14], W4
00E106  DEA248     ASR W4, #8, W4
00E108  780F04     MOV W4, [W14]
14230:                 FlashMass[169]=(unsigned char)Tm;
00E10A  78021E     MOV [W14], W4
00E10C  784204     MOV.B W4, W4
00E10E  22B895     MOV #0x2B89, W5
00E110  784A84     MOV.B W4, [W5]
14231:             
14232:                 
14233:                 FlashMass[170]=HallDelayMaxSPD;
00E112  237E54     MOV #0x37E5, W4
00E114  784214     MOV.B [W4], W4
00E116  22B8A5     MOV #0x2B8A, W5
00E118  784A84     MOV.B W4, [W5]
14234:             
14235:                 
14236:                 FlashMass[171]=_2WDMode;     
00E11A  230C94     MOV #0x30C9, W4
00E11C  784214     MOV.B [W4], W4
00E11E  22B8B5     MOV #0x2B8B, W5
00E120  784A84     MOV.B W4, [W5]
14237:             
14238:                 Tm=MAH;
00E122  81BD44     MOV MAH, W4
00E124  780F04     MOV W4, [W14]
14239:                 FlashMass[172]=(unsigned char)Tm;
00E126  78021E     MOV [W14], W4
00E128  784204     MOV.B W4, W4
00E12A  22B8C5     MOV #0x2B8C, W5
00E12C  784A84     MOV.B W4, [W5]
14240:                 Tm=Tm>>8;
00E12E  78021E     MOV [W14], W4
00E130  DEA248     ASR W4, #8, W4
00E132  780F04     MOV W4, [W14]
14241:                 FlashMass[173]=(unsigned char)Tm;
00E134  78021E     MOV [W14], W4
00E136  784204     MOV.B W4, W4
00E138  22B8D5     MOV #0x2B8D, W5
00E13A  784A84     MOV.B W4, [W5]
14242:             
14243:                 Tm=SensorThresholdDn;
00E13C  809474     MOV SensorThresholdDn, W4
00E13E  780F04     MOV W4, [W14]
14244:                 FlashMass[174]=(unsigned char)Tm;
00E140  78021E     MOV [W14], W4
00E142  784204     MOV.B W4, W4
00E144  22B8E5     MOV #0x2B8E, W5
00E146  784A84     MOV.B W4, [W5]
14245:                 Tm=Tm>>8;
00E148  78021E     MOV [W14], W4
00E14A  DEA248     ASR W4, #8, W4
00E14C  780F04     MOV W4, [W14]
14246:                 FlashMass[175]=(unsigned char)Tm;
00E14E  78021E     MOV [W14], W4
00E150  784204     MOV.B W4, W4
00E152  22B8F5     MOV #0x2B8F, W5
00E154  784A84     MOV.B W4, [W5]
14247:             
14248:                 
14249:                 FlashMass[176]=PinCodeMassOptions[1];
00E156  217564     MOV #0x1756, W4
00E158  784214     MOV.B [W4], W4
00E15A  22B905     MOV #0x2B90, W5
00E15C  784A84     MOV.B W4, [W5]
14250:                 FlashMass[177]=PinCodeMassOptions[2];
00E15E  217574     MOV #0x1757, W4
00E160  784214     MOV.B [W4], W4
00E162  22B915     MOV #0x2B91, W5
00E164  784A84     MOV.B W4, [W5]
14251:             
14252:                 FlashMass[178]=(unsigned char)SpdRstSpeedLim;
00E166  817EF4     MOV SpdRstSpeedLim, W4
00E168  784204     MOV.B W4, W4
00E16A  22B925     MOV #0x2B92, W5
00E16C  784A84     MOV.B W4, [W5]
14253:             
14254:                 
14255:                 
14256:                 
14257:                 Tm=SensorlessCntAlignConst;
00E16E  817E94     MOV SensorlessCntAlignConst, W4
00E170  780F04     MOV W4, [W14]
14258:                 FlashMass[179]=(unsigned char)Tm;
00E172  78021E     MOV [W14], W4
00E174  784204     MOV.B W4, W4
00E176  22B935     MOV #0x2B93, W5
00E178  784A84     MOV.B W4, [W5]
14259:                 Tm=Tm>>8;
00E17A  78021E     MOV [W14], W4
00E17C  DEA248     ASR W4, #8, W4
00E17E  780F04     MOV W4, [W14]
14260:                 FlashMass[180]=(unsigned char)Tm;
00E180  78021E     MOV [W14], W4
00E182  784204     MOV.B W4, W4
00E184  22B945     MOV #0x2B94, W5
00E186  784A84     MOV.B W4, [W5]
14261:             
14262:                 Tm=SenosrlessPWM1_1Const;
00E188  8092F4     MOV SenosrlessPWM1_1Const, W4
00E18A  780F04     MOV W4, [W14]
14263:                 FlashMass[181]=(unsigned char)Tm;
00E18C  78021E     MOV [W14], W4
00E18E  784204     MOV.B W4, W4
00E190  22B955     MOV #0x2B95, W5
00E192  784A84     MOV.B W4, [W5]
14264:                 Tm=Tm>>8;
00E194  78021E     MOV [W14], W4
00E196  DEA248     ASR W4, #8, W4
00E198  780F04     MOV W4, [W14]
14265:                 FlashMass[182]=(unsigned char)Tm;
00E19A  78021E     MOV [W14], W4
00E19C  784204     MOV.B W4, W4
00E19E  22B965     MOV #0x2B96, W5
00E1A0  784A84     MOV.B W4, [W5]
14266:             
14267:                 Tm=StatFlgs2.StatusFlags;  
00E1A2  809764     MOV StatFlgs2, W4
00E1A4  780F04     MOV W4, [W14]
14268:                 FlashMass[183]=(unsigned char)Tm;
00E1A6  78021E     MOV [W14], W4
00E1A8  784204     MOV.B W4, W4
00E1AA  22B975     MOV #0x2B97, W5
00E1AC  784A84     MOV.B W4, [W5]
14269:                 Tm=Tm>>8;
00E1AE  78021E     MOV [W14], W4
00E1B0  DEA248     ASR W4, #8, W4
00E1B2  780F04     MOV W4, [W14]
14270:                 FlashMass[184]=(unsigned char)Tm;
00E1B4  78021E     MOV [W14], W4
00E1B6  784204     MOV.B W4, W4
00E1B8  22B985     MOV #0x2B98, W5
00E1BA  784A84     MOV.B W4, [W5]
14271:             
14272:             
14273:                 Tm=(int)(TemperatureMaxOUT*10);  
00E1BC  820234     MOV TemperatureMaxOUT, W4
00E1BE  820245     MOV 0x4048, W5
00E1C0  200002     MOV #0x0, W2
00E1C2  241203     MOV #0x4120, W3
00E1C4  BE0004     MOV.D W4, W0
00E1C6  022630     CALL ___mulsf3
00E1C8  000000     NOP
00E1CA  BE0200     MOV.D W0, W4
00E1CC  BE0004     MOV.D W4, W0
00E1CE  022504     CALL ___fixsfsi
00E1D0  000000     NOP
00E1D2  BE0200     MOV.D W0, W4
00E1D4  780F04     MOV W4, [W14]
14274:                 FlashMass[185]=(unsigned char)Tm;
00E1D6  78021E     MOV [W14], W4
00E1D8  784204     MOV.B W4, W4
00E1DA  22B995     MOV #0x2B99, W5
00E1DC  784A84     MOV.B W4, [W5]
14275:                 Tm=Tm>>8;
00E1DE  78021E     MOV [W14], W4
00E1E0  DEA248     ASR W4, #8, W4
00E1E2  780F04     MOV W4, [W14]
14276:                 FlashMass[186]=(unsigned char)Tm;
00E1E4  78021E     MOV [W14], W4
00E1E6  784204     MOV.B W4, W4
00E1E8  22B9A5     MOV #0x2B9A, W5
00E1EA  784A84     MOV.B W4, [W5]
14277:                 
14278:             
14279:                 FlashMass[187]=PinCodeMassOptions[3];
00E1EC  217584     MOV #0x1758, W4
00E1EE  784214     MOV.B [W4], W4
00E1F0  22B9B5     MOV #0x2B9B, W5
00E1F2  784A84     MOV.B W4, [W5]
14280:             
14281:                 Tm=StatFlgs1.StatusFlags;
00E1F4  809754     MOV StatFlgs1, W4
00E1F6  780F04     MOV W4, [W14]
14282:                 FlashMass[188]=(unsigned char)Tm;
00E1F8  78021E     MOV [W14], W4
00E1FA  784204     MOV.B W4, W4
00E1FC  22B9C5     MOV #0x2B9C, W5
00E1FE  784A84     MOV.B W4, [W5]
14283:                 Tm=Tm>>8;
00E200  78021E     MOV [W14], W4
00E202  DEA248     ASR W4, #8, W4
00E204  780F04     MOV W4, [W14]
14284:                 FlashMass[189]=(unsigned char)Tm;
00E206  78021E     MOV [W14], W4
00E208  784204     MOV.B W4, W4
00E20A  22B9D5     MOV #0x2B9D, W5
00E20C  784A84     MOV.B W4, [W5]
14285:             
14286:                 Tm=SensorLessTimerConstConst;
00E20E  820134     MOV SensorLessTimerConstConst, W4
00E210  780F04     MOV W4, [W14]
14287:                 FlashMass[190]=(unsigned char)Tm;
00E212  78021E     MOV [W14], W4
00E214  784204     MOV.B W4, W4
00E216  22B9E5     MOV #0x2B9E, W5
00E218  784A84     MOV.B W4, [W5]
14288:                 Tm=Tm>>8;
00E21A  78021E     MOV [W14], W4
00E21C  DEA248     ASR W4, #8, W4
00E21E  780F04     MOV W4, [W14]
14289:                 FlashMass[191]=(unsigned char)Tm;
00E220  78021E     MOV [W14], W4
00E222  784204     MOV.B W4, W4
00E224  22B9F5     MOV #0x2B9F, W5
00E226  784A84     MOV.B W4, [W5]
14290:             
14291:             
14292:                 Tm=(int)(TemperatureMaxIN*10);
00E228  820274     MOV TemperatureMaxIN, W4
00E22A  820285     MOV 0x4050, W5
00E22C  200002     MOV #0x0, W2
00E22E  241203     MOV #0x4120, W3
00E230  BE0004     MOV.D W4, W0
00E232  022630     CALL ___mulsf3
00E234  000000     NOP
00E236  BE0200     MOV.D W0, W4
00E238  BE0004     MOV.D W4, W0
00E23A  022504     CALL ___fixsfsi
00E23C  000000     NOP
00E23E  BE0200     MOV.D W0, W4
00E240  780F04     MOV W4, [W14]
14293:                 FlashMass[192]=(unsigned char)Tm;
00E242  78021E     MOV [W14], W4
00E244  784204     MOV.B W4, W4
00E246  22BA05     MOV #0x2BA0, W5
00E248  784A84     MOV.B W4, [W5]
14294:                 Tm=Tm>>8;
00E24A  78021E     MOV [W14], W4
00E24C  DEA248     ASR W4, #8, W4
00E24E  780F04     MOV W4, [W14]
14295:                 FlashMass[193]=(unsigned char)Tm;
00E250  78021E     MOV [W14], W4
00E252  784204     MOV.B W4, W4
00E254  22BA15     MOV #0x2BA1, W5
00E256  784A84     MOV.B W4, [W5]
14296:             
14297:                 FlashMass[194]=PinCodeMassOptions[4];
00E258  217594     MOV #0x1759, W4
00E25A  784214     MOV.B [W4], W4
00E25C  22BA25     MOV #0x2BA2, W5
00E25E  784A84     MOV.B W4, [W5]
14298:                 FlashMass[195]=PinCodeMassOptions[5];
00E260  2175A4     MOV #0x175A, W4
00E262  784214     MOV.B [W4], W4
00E264  22BA35     MOV #0x2BA3, W5
00E266  784A84     MOV.B W4, [W5]
14299:             
14300:                 Tm=BigCurrent;
00E268  80B644     MOV BigCurrent, W4
00E26A  780F04     MOV W4, [W14]
14301:                 FlashMass[196]=(unsigned char)Tm;
00E26C  78021E     MOV [W14], W4
00E26E  784204     MOV.B W4, W4
00E270  22BA45     MOV #0x2BA4, W5
00E272  784A84     MOV.B W4, [W5]
14302:                 Tm=Tm>>8;
00E274  78021E     MOV [W14], W4
00E276  DEA248     ASR W4, #8, W4
00E278  780F04     MOV W4, [W14]
14303:                 FlashMass[197]=(unsigned char)Tm;
00E27A  78021E     MOV [W14], W4
00E27C  784204     MOV.B W4, W4
00E27E  22BA55     MOV #0x2BA5, W5
00E280  784A84     MOV.B W4, [W5]
14304:             
14305:             
14306:                 FlashMass[198]=(unsigned char)(P_Curr*100);
00E282  80B514     MOV P_Curr, W4
00E284  80B525     MOV 0x16A4, W5
00E286  200002     MOV #0x0, W2
00E288  242C83     MOV #0x42C8, W3
00E28A  BE0004     MOV.D W4, W0
00E28C  022630     CALL ___mulsf3
00E28E  000000     NOP
00E290  BE0200     MOV.D W0, W4
00E292  BE0004     MOV.D W4, W0
00E294  022546     CALL ___fixunssfsi
00E296  000000     NOP
00E298  BE0200     MOV.D W0, W4
00E29A  784204     MOV.B W4, W4
00E29C  22BA65     MOV #0x2BA6, W5
00E29E  784A84     MOV.B W4, [W5]
14307:                 
14308:                 Tm=JoystickCalibrX;
00E2A0  809454     MOV JoystickCalibrX, W4
00E2A2  780F04     MOV W4, [W14]
14309:                 FlashMass[199]=(unsigned char)Tm;
00E2A4  78021E     MOV [W14], W4
00E2A6  784204     MOV.B W4, W4
00E2A8  22BA75     MOV #0x2BA7, W5
00E2AA  784A84     MOV.B W4, [W5]
14310:                 Tm=Tm>>8;
00E2AC  78021E     MOV [W14], W4
00E2AE  DEA248     ASR W4, #8, W4
00E2B0  780F04     MOV W4, [W14]
14311:                 FlashMass[200]=(unsigned char)Tm;
00E2B2  78021E     MOV [W14], W4
00E2B4  784204     MOV.B W4, W4
00E2B6  22BA85     MOV #0x2BA8, W5
00E2B8  784A84     MOV.B W4, [W5]
14312:                 
14313:                 
14314:                 
14315:                 
14316:             
14317:                 Tm=SensorThresholdUp;
00E2BA  809484     MOV SensorThresholdUp, W4
00E2BC  780F04     MOV W4, [W14]
14318:                 FlashMass[201]=(unsigned char)Tm;
00E2BE  78021E     MOV [W14], W4
00E2C0  784204     MOV.B W4, W4
00E2C2  22BA95     MOV #0x2BA9, W5
00E2C4  784A84     MOV.B W4, [W5]
14319:                 Tm=Tm>>8;
00E2C6  78021E     MOV [W14], W4
00E2C8  DEA248     ASR W4, #8, W4
00E2CA  780F04     MOV W4, [W14]
14320:                 FlashMass[202]=(unsigned char)Tm;
00E2CC  78021E     MOV [W14], W4
00E2CE  784204     MOV.B W4, W4
00E2D0  22BAA5     MOV #0x2BAA, W5
00E2D2  784A84     MOV.B W4, [W5]
14321:             
14322:                 Tm=BreakThreshold;
00E2D4  809494     MOV BreakThreshold, W4
00E2D6  780F04     MOV W4, [W14]
14323:                 FlashMass[203]=(unsigned char)Tm;
00E2D8  78021E     MOV [W14], W4
00E2DA  784204     MOV.B W4, W4
00E2DC  22BAB5     MOV #0x2BAB, W5
00E2DE  784A84     MOV.B W4, [W5]
14324:                 Tm=Tm>>8;
00E2E0  78021E     MOV [W14], W4
00E2E2  DEA248     ASR W4, #8, W4
00E2E4  780F04     MOV W4, [W14]
14325:                 FlashMass[204]=(unsigned char)Tm;
00E2E6  78021E     MOV [W14], W4
00E2E8  784204     MOV.B W4, W4
00E2EA  22BAC5     MOV #0x2BAC, W5
00E2EC  784A84     MOV.B W4, [W5]
14326:             
14327:                 Tm=KFirstBreak;
00E2EE  8094A4     MOV KFirstBreak, W4
00E2F0  780F04     MOV W4, [W14]
14328:                 FlashMass[205]=(unsigned char)Tm;
00E2F2  78021E     MOV [W14], W4
00E2F4  784204     MOV.B W4, W4
00E2F6  22BAD5     MOV #0x2BAD, W5
00E2F8  784A84     MOV.B W4, [W5]
14329:                 Tm=Tm>>8;
00E2FA  78021E     MOV [W14], W4
00E2FC  DEA248     ASR W4, #8, W4
00E2FE  780F04     MOV W4, [W14]
14330:                 FlashMass[206]=(unsigned char)Tm;
00E300  78021E     MOV [W14], W4
00E302  784204     MOV.B W4, W4
00E304  22BAE5     MOV #0x2BAE, W5
00E306  784A84     MOV.B W4, [W5]
14331:             
14332:                 FlashMass[207]=TemperatureTYPE; 
00E308  210FF4     MOV #0x10FF, W4
00E30A  784214     MOV.B [W4], W4
00E30C  22BAF5     MOV #0x2BAF, W5
00E30E  784A84     MOV.B W4, [W5]
14333:                 FlashMass[208]=SensOrder1;
00E310  212494     MOV #0x1249, W4
00E312  784214     MOV.B [W4], W4
00E314  22BB05     MOV #0x2BB0, W5
00E316  784A84     MOV.B W4, [W5]
14334:             
14335:                 Tm=SensorlessSpdChngCntConst;
00E318  808764     MOV SensorlessSpdChngCntConst, W4
00E31A  780F04     MOV W4, [W14]
14336:                 FlashMass[209]=(unsigned char)Tm;
00E31C  78021E     MOV [W14], W4
00E31E  784204     MOV.B W4, W4
00E320  22BB15     MOV #0x2BB1, W5
00E322  784A84     MOV.B W4, [W5]
14337:                 Tm=Tm>>8;
00E324  78021E     MOV [W14], W4
00E326  DEA248     ASR W4, #8, W4
00E328  780F04     MOV W4, [W14]
14338:                 FlashMass[210]=(unsigned char)Tm;
00E32A  78021E     MOV [W14], W4
00E32C  784204     MOV.B W4, W4
00E32E  22BB25     MOV #0x2BB2, W5
00E330  784A84     MOV.B W4, [W5]
14339:             
14340:             
14341:                 Tm=V_MIN_OFF;
00E332  81C3C4     MOV V_MIN_OFF, W4
00E334  780F04     MOV W4, [W14]
14342:                 FlashMass[211]=(unsigned char)Tm;
00E336  78021E     MOV [W14], W4
00E338  784204     MOV.B W4, W4
00E33A  22BB35     MOV #0x2BB3, W5
00E33C  784A84     MOV.B W4, [W5]
14343:                 Tm=Tm>>8;
00E33E  78021E     MOV [W14], W4
00E340  DEA248     ASR W4, #8, W4
00E342  780F04     MOV W4, [W14]
14344:                 FlashMass[212]=(unsigned char)Tm;
00E344  78021E     MOV [W14], W4
00E346  784204     MOV.B W4, W4
00E348  22BB45     MOV #0x2BB4, W5
00E34A  784A84     MOV.B W4, [W5]
14345:             
14346:                 Tm=V_MIN_Pre_OFF;
00E34C  81C3D4     MOV V_MIN_Pre_OFF, W4
00E34E  780F04     MOV W4, [W14]
14347:                 FlashMass[213]=(unsigned char)Tm;
00E350  78021E     MOV [W14], W4
00E352  784204     MOV.B W4, W4
00E354  22BB55     MOV #0x2BB5, W5
00E356  784A84     MOV.B W4, [W5]
14348:                 Tm=Tm>>8;
00E358  78021E     MOV [W14], W4
00E35A  DEA248     ASR W4, #8, W4
00E35C  780F04     MOV W4, [W14]
14349:                 FlashMass[214]=(unsigned char)Tm;
00E35E  78021E     MOV [W14], W4
00E360  784204     MOV.B W4, W4
00E362  22BB65     MOV #0x2BB6, W5
00E364  784A84     MOV.B W4, [W5]
14350:             
14351:                 Tm=V_MIN_Sound;
00E366  81C3E4     MOV V_MIN_Sound, W4
00E368  780F04     MOV W4, [W14]
14352:                 FlashMass[215]=(unsigned char)Tm;
00E36A  78021E     MOV [W14], W4
00E36C  784204     MOV.B W4, W4
00E36E  22BB75     MOV #0x2BB7, W5
00E370  784A84     MOV.B W4, [W5]
14353:                 Tm=Tm>>8;
00E372  78021E     MOV [W14], W4
00E374  DEA248     ASR W4, #8, W4
00E376  780F04     MOV W4, [W14]
14354:                 FlashMass[216]=(unsigned char)Tm;
00E378  78021E     MOV [W14], W4
00E37A  784204     MOV.B W4, W4
00E37C  22BB85     MOV #0x2BB8, W5
00E37E  784A84     MOV.B W4, [W5]
14355:             
14356:                 Tm=V_min_OverV;
00E380  81C3F4     MOV V_min_OverV, W4
00E382  780F04     MOV W4, [W14]
14357:                 FlashMass[217]=(unsigned char)Tm;
00E384  78021E     MOV [W14], W4
00E386  784204     MOV.B W4, W4
00E388  22BB95     MOV #0x2BB9, W5
00E38A  784A84     MOV.B W4, [W5]
14358:                 Tm=Tm>>8;
00E38C  78021E     MOV [W14], W4
00E38E  DEA248     ASR W4, #8, W4
00E390  780F04     MOV W4, [W14]
14359:                 FlashMass[218]=(unsigned char)Tm;
00E392  78021E     MOV [W14], W4
00E394  784204     MOV.B W4, W4
00E396  22BBA5     MOV #0x2BBA, W5
00E398  784A84     MOV.B W4, [W5]
14360:             
14361:             
14362:                 Tm=(int)(KiCurr*100);
00E39A  81F444     MOV KiCurr, W4
00E39C  81F455     MOV 0x3E8A, W5
00E39E  200002     MOV #0x0, W2
00E3A0  242C83     MOV #0x42C8, W3
00E3A2  BE0004     MOV.D W4, W0
00E3A4  022630     CALL ___mulsf3
00E3A6  000000     NOP
00E3A8  BE0200     MOV.D W0, W4
00E3AA  BE0004     MOV.D W4, W0
00E3AC  022504     CALL ___fixsfsi
00E3AE  000000     NOP
00E3B0  BE0200     MOV.D W0, W4
00E3B2  780F04     MOV W4, [W14]
14363:                 FlashMass[219]=(unsigned char)Tm;
00E3B4  78021E     MOV [W14], W4
00E3B6  784204     MOV.B W4, W4
00E3B8  22BBB5     MOV #0x2BBB, W5
00E3BA  784A84     MOV.B W4, [W5]
14364:                 Tm=Tm>>8;
00E3BC  78021E     MOV [W14], W4
00E3BE  DEA248     ASR W4, #8, W4
00E3C0  780F04     MOV W4, [W14]
14365:                 FlashMass[220]=(unsigned char)Tm;
00E3C2  78021E     MOV [W14], W4
00E3C4  784204     MOV.B W4, W4
00E3C6  22BBC5     MOV #0x2BBC, W5
00E3C8  784A84     MOV.B W4, [W5]
14366:             
14367:                 Tm=CurrUstWork;
00E3CA  81F4E4     MOV CurrUstWork, W4
00E3CC  780F04     MOV W4, [W14]
14368:                 FlashMass[221]=(unsigned char)Tm;
00E3CE  78021E     MOV [W14], W4
00E3D0  784204     MOV.B W4, W4
00E3D2  22BBD5     MOV #0x2BBD, W5
00E3D4  784A84     MOV.B W4, [W5]
14369:                 Tm=Tm>>8;
00E3D6  78021E     MOV [W14], W4
00E3D8  DEA248     ASR W4, #8, W4
00E3DA  780F04     MOV W4, [W14]
14370:                 FlashMass[222]=(unsigned char)Tm;
00E3DC  78021E     MOV [W14], W4
00E3DE  784204     MOV.B W4, W4
00E3E0  22BBE5     MOV #0x2BBE, W5
00E3E2  784A84     MOV.B W4, [W5]
14371:             
14372:                 FlashMass[223]=(unsigned char)(KpKpMustBe*10);//NearSensors[1][2];
00E3E4  81A5B4     MOV KpKpMustBe, W4
00E3E6  81A5C5     MOV 0x34B8, W5
00E3E8  200002     MOV #0x0, W2
00E3EA  241203     MOV #0x4120, W3
00E3EC  BE0004     MOV.D W4, W0
00E3EE  022630     CALL ___mulsf3
00E3F0  000000     NOP
00E3F2  BE0200     MOV.D W0, W4
00E3F4  BE0004     MOV.D W4, W0
00E3F6  022546     CALL ___fixunssfsi
00E3F8  000000     NOP
00E3FA  BE0200     MOV.D W0, W4
00E3FC  784204     MOV.B W4, W4
00E3FE  22BBF5     MOV #0x2BBF, W5
00E400  784A84     MOV.B W4, [W5]
14373:                 
14374:                 
14375:                 Tm=ThrottleLevelUpOff;
00E402  818294     MOV ThrottleLevelUpOff, W4
00E404  780F04     MOV W4, [W14]
14376:                 FlashMass[224]=(unsigned char)Tm;
00E406  78021E     MOV [W14], W4
00E408  784204     MOV.B W4, W4
00E40A  22BC05     MOV #0x2BC0, W5
00E40C  784A84     MOV.B W4, [W5]
14377:                 Tm=Tm>>8;
00E40E  78021E     MOV [W14], W4
00E410  DEA248     ASR W4, #8, W4
00E412  780F04     MOV W4, [W14]
14378:                 FlashMass[225]=(unsigned char)Tm;
00E414  78021E     MOV [W14], W4
00E416  784204     MOV.B W4, W4
00E418  22BC15     MOV #0x2BC1, W5
00E41A  784A84     MOV.B W4, [W5]
14379:                 
14380:                 
14381:             //    FlashMass[224]=NearSensors[1][3];
14382:             //    FlashMass[225]=NearSensors[2][2];
14383:                 FlashMass[226]=NearSensors[2][3];
00E41C  237274     MOV #0x3727, W4
00E41E  784214     MOV.B [W4], W4
00E420  22BC25     MOV #0x2BC2, W5
00E422  784A84     MOV.B W4, [W5]
14384:                 FlashMass[227]=NearSensors[3][2];
00E424  2372A4     MOV #0x372A, W4
00E426  784214     MOV.B [W4], W4
00E428  22BC35     MOV #0x2BC3, W5
00E42A  784A84     MOV.B W4, [W5]
14385:                 FlashMass[228]=NearSensors[3][3];
00E42C  2372B4     MOV #0x372B, W4
00E42E  784214     MOV.B [W4], W4
00E430  22BC45     MOV #0x2BC4, W5
00E432  784A84     MOV.B W4, [W5]
14386:                 FlashMass[229]=NearSensors[4][2];
00E434  2372E4     MOV #0x372E, W4
00E436  784214     MOV.B [W4], W4
00E438  22BC55     MOV #0x2BC5, W5
00E43A  784A84     MOV.B W4, [W5]
14387:                 FlashMass[230]=NearSensors[4][3];
00E43C  2372F4     MOV #0x372F, W4
00E43E  784214     MOV.B [W4], W4
00E440  22BC65     MOV #0x2BC6, W5
00E442  784A84     MOV.B W4, [W5]
14388:                 FlashMass[231]=NearSensors[5][2];
00E444  237324     MOV #0x3732, W4
00E446  784214     MOV.B [W4], W4
00E448  22BC75     MOV #0x2BC7, W5
00E44A  784A84     MOV.B W4, [W5]
14389:                 FlashMass[232]=NearSensors[5][3];
00E44C  237334     MOV #0x3733, W4
00E44E  784214     MOV.B [W4], W4
00E450  22BC85     MOV #0x2BC8, W5
00E452  784A84     MOV.B W4, [W5]
14390:                 FlashMass[233]=NearSensors[6][2];
00E454  237364     MOV #0x3736, W4
00E456  784214     MOV.B [W4], W4
00E458  22BC95     MOV #0x2BC9, W5
00E45A  784A84     MOV.B W4, [W5]
14391:                 FlashMass[234]=NearSensors[6][3];
00E45C  237374     MOV #0x3737, W4
00E45E  784214     MOV.B [W4], W4
00E460  22BCA5     MOV #0x2BCA, W5
00E462  784A84     MOV.B W4, [W5]
14392:             
14393:                 Tm=TemperatureMaxIN_H*10;
00E464  820294     MOV TemperatureMaxIN_H, W4
00E466  8202A5     MOV 0x4054, W5
00E468  200002     MOV #0x0, W2
00E46A  241203     MOV #0x4120, W3
00E46C  BE0004     MOV.D W4, W0
00E46E  022630     CALL ___mulsf3
00E470  000000     NOP
00E472  BE0200     MOV.D W0, W4
00E474  BE0004     MOV.D W4, W0
00E476  022504     CALL ___fixsfsi
00E478  000000     NOP
00E47A  BE0200     MOV.D W0, W4
00E47C  780F04     MOV W4, [W14]
14394:                 FlashMass[235]=(unsigned char)Tm;
00E47E  78021E     MOV [W14], W4
00E480  784204     MOV.B W4, W4
00E482  22BCB5     MOV #0x2BCB, W5
00E484  784A84     MOV.B W4, [W5]
14395:                 Tm=Tm>>8;
00E486  78021E     MOV [W14], W4
00E488  DEA248     ASR W4, #8, W4
00E48A  780F04     MOV W4, [W14]
14396:                 FlashMass[236]=(unsigned char)Tm;
00E48C  78021E     MOV [W14], W4
00E48E  784204     MOV.B W4, W4
00E490  22BCC5     MOV #0x2BCC, W5
00E492  784A84     MOV.B W4, [W5]
14397:             
14398:                 Tm=TemperatureMaxOUT_H*10;
00E494  820254     MOV TemperatureMaxOUT_H, W4
00E496  820265     MOV 0x404C, W5
00E498  200002     MOV #0x0, W2
00E49A  241203     MOV #0x4120, W3
00E49C  BE0004     MOV.D W4, W0
00E49E  022630     CALL ___mulsf3
00E4A0  000000     NOP
00E4A2  BE0200     MOV.D W0, W4
00E4A4  BE0004     MOV.D W4, W0
00E4A6  022504     CALL ___fixsfsi
00E4A8  000000     NOP
00E4AA  BE0200     MOV.D W0, W4
00E4AC  780F04     MOV W4, [W14]
14399:                 FlashMass[237]=(unsigned char)Tm;
00E4AE  78021E     MOV [W14], W4
00E4B0  784204     MOV.B W4, W4
00E4B2  22BCD5     MOV #0x2BCD, W5
00E4B4  784A84     MOV.B W4, [W5]
14400:                 Tm=Tm>>8;
00E4B6  78021E     MOV [W14], W4
00E4B8  DEA248     ASR W4, #8, W4
00E4BA  780F04     MOV W4, [W14]
14401:                 FlashMass[238]=(unsigned char)Tm;
00E4BC  78021E     MOV [W14], W4
00E4BE  784204     MOV.B W4, W4
00E4C0  22BCE5     MOV #0x2BCE, W5
00E4C2  784A84     MOV.B W4, [W5]
14402:             
14403:                 
14404:                 Tm=TemperatureMaxOUT_H*10;
00E4C4  820254     MOV TemperatureMaxOUT_H, W4
00E4C6  820265     MOV 0x404C, W5
00E4C8  200002     MOV #0x0, W2
00E4CA  241203     MOV #0x4120, W3
00E4CC  BE0004     MOV.D W4, W0
00E4CE  022630     CALL ___mulsf3
00E4D0  000000     NOP
00E4D2  BE0200     MOV.D W0, W4
00E4D4  BE0004     MOV.D W4, W0
00E4D6  022504     CALL ___fixsfsi
00E4D8  000000     NOP
00E4DA  BE0200     MOV.D W0, W4
00E4DC  780F04     MOV W4, [W14]
14405:                 FlashMass[237]=(unsigned char)Tm;
00E4DE  78021E     MOV [W14], W4
00E4E0  784204     MOV.B W4, W4
00E4E2  22BCD5     MOV #0x2BCD, W5
00E4E4  784A84     MOV.B W4, [W5]
14406:                 Tm=Tm>>8;
00E4E6  78021E     MOV [W14], W4
00E4E8  DEA248     ASR W4, #8, W4
00E4EA  780F04     MOV W4, [W14]
14407:                 FlashMass[238]=(unsigned char)Tm;
00E4EC  78021E     MOV [W14], W4
00E4EE  784204     MOV.B W4, W4
00E4F0  22BCE5     MOV #0x2BCE, W5
00E4F2  784A84     MOV.B W4, [W5]
14408:                 
14409:                 Tm=JoystickCalibrY;
00E4F4  809464     MOV JoystickCalibrY, W4
00E4F6  780F04     MOV W4, [W14]
14410:                 FlashMass[239]=(unsigned char)Tm;
00E4F8  78021E     MOV [W14], W4
00E4FA  784204     MOV.B W4, W4
00E4FC  22BCF5     MOV #0x2BCF, W5
00E4FE  784A84     MOV.B W4, [W5]
14411:                 Tm=Tm>>8;
00E500  78021E     MOV [W14], W4
00E502  DEA248     ASR W4, #8, W4
00E504  780F04     MOV W4, [W14]
14412:                 FlashMass[240]=(unsigned char)Tm;
00E506  78021E     MOV [W14], W4
00E508  784204     MOV.B W4, W4
00E50A  22BD05     MOV #0x2BD0, W5
00E50C  784A84     MOV.B W4, [W5]
14413:                 
14414:                 Tm=JoistickDeadZone;
00E50E  818284     MOV JoistickDeadZone, W4
00E510  780F04     MOV W4, [W14]
14415:                 FlashMass[241]=(unsigned char)Tm;
00E512  78021E     MOV [W14], W4
00E514  784204     MOV.B W4, W4
00E516  22BD15     MOV #0x2BD1, W5
00E518  784A84     MOV.B W4, [W5]
14416:                 Tm=Tm>>8;
00E51A  78021E     MOV [W14], W4
00E51C  DEA248     ASR W4, #8, W4
00E51E  780F04     MOV W4, [W14]
14417:                 FlashMass[242]=(unsigned char)Tm;
00E520  78021E     MOV [W14], W4
00E522  784204     MOV.B W4, W4
00E524  22BD25     MOV #0x2BD2, W5
00E526  784A84     MOV.B W4, [W5]
14418:                 
14419:                 
14420:                 OptionsToMass2();
00E528  070003     RCALL OptionsToMass2
14421:                 
14422:                 OptionsToMassProfile();
00E52A  07520E     RCALL OptionsToMassProfile
14423:             
14424:             
14425:             }
00E52C  FA8000     ULNK
00E52E  060000     RETURN
14426:             
14427:             
14428:             void OptionsToMass2(void)
14429:             {
00E530  FA0002     LNK #0x2
14430:                 int Tm=(int)0;
00E532  EB0200     CLR W4
00E534  780F04     MOV W4, [W14]
14431:                 
14432:                 
14433:                 FlashMass2[0]=LightMode;
00E536  2308E4     MOV #0x308E, W4
00E538  784214     MOV.B [W4], W4
00E53A  22CC65     MOV #0x2CC6, W5
00E53C  784A84     MOV.B W4, [W5]
14434:                 
14435:                 
14436:                 
14437:                 Tm=LightSensorThresholdLo;
00E53E  818484     MOV LightSensorThresholdLo, W4
00E540  780F04     MOV W4, [W14]
14438:                 FlashMass2[1]=(unsigned char)Tm;
00E542  78021E     MOV [W14], W4
00E544  784204     MOV.B W4, W4
00E546  22CC75     MOV #0x2CC7, W5
00E548  784A84     MOV.B W4, [W5]
14439:                 Tm=Tm>>8;
00E54A  78021E     MOV [W14], W4
00E54C  DEA248     ASR W4, #8, W4
00E54E  780F04     MOV W4, [W14]
14440:                 FlashMass2[2]=(unsigned char)Tm;
00E550  78021E     MOV [W14], W4
00E552  784204     MOV.B W4, W4
00E554  22CC85     MOV #0x2CC8, W5
00E556  784A84     MOV.B W4, [W5]
14441:             
14442:                 Tm=LightSensorThresholdHi;
00E558  818494     MOV LightSensorThresholdHi, W4
00E55A  780F04     MOV W4, [W14]
14443:                 FlashMass2[3]=(unsigned char)Tm;
00E55C  78021E     MOV [W14], W4
00E55E  784204     MOV.B W4, W4
00E560  22CC95     MOV #0x2CC9, W5
00E562  784A84     MOV.B W4, [W5]
14444:                 Tm=Tm>>8;
00E564  78021E     MOV [W14], W4
00E566  DEA248     ASR W4, #8, W4
00E568  780F04     MOV W4, [W14]
14445:                 FlashMass2[4]=(unsigned char)Tm;
00E56A  78021E     MOV [W14], W4
00E56C  784204     MOV.B W4, W4
00E56E  22CCA5     MOV #0x2CCA, W5
00E570  784A84     MOV.B W4, [W5]
14446:                 
14447:                 FlashMass2[5]=CurrentMaxCurrentOnly;
00E572  212F24     MOV #0x12F2, W4
00E574  784214     MOV.B [W4], W4
00E576  22CCB5     MOV #0x2CCB, W5
00E578  784A84     MOV.B W4, [W5]
14448:                 
14449:                 
14450:                 Tm=K_PWM_Nastr;
00E57A  821384     MOV K_PWM_Nastr, W4
00E57C  780F04     MOV W4, [W14]
14451:                 FlashMass2[6]=(unsigned char)Tm;
00E57E  78021E     MOV [W14], W4
00E580  784204     MOV.B W4, W4
00E582  22CCC5     MOV #0x2CCC, W5
00E584  784A84     MOV.B W4, [W5]
14452:                 Tm=Tm>>8;
00E586  78021E     MOV [W14], W4
00E588  DEA248     ASR W4, #8, W4
00E58A  780F04     MOV W4, [W14]
14453:                 FlashMass2[7]=(unsigned char)Tm;
00E58C  78021E     MOV [W14], W4
00E58E  784204     MOV.B W4, W4
00E590  22CCD5     MOV #0x2CCD, W5
00E592  784A84     MOV.B W4, [W5]
14454:                 
14455:                 Tm=Khard;
00E594  808844     MOV Khard, W4
00E596  780F04     MOV W4, [W14]
14456:                 FlashMass2[8]=(unsigned char)Tm;
00E598  78021E     MOV [W14], W4
00E59A  784204     MOV.B W4, W4
00E59C  22CCE5     MOV #0x2CCE, W5
00E59E  784A84     MOV.B W4, [W5]
14457:                 Tm=Tm>>8;
00E5A0  78021E     MOV [W14], W4
00E5A2  DEA248     ASR W4, #8, W4
00E5A4  780F04     MOV W4, [W14]
14458:                 FlashMass2[9]=(unsigned char)Tm;
00E5A6  78021E     MOV [W14], W4
00E5A8  784204     MOV.B W4, W4
00E5AA  22CCF5     MOV #0x2CCF, W5
00E5AC  784A84     MOV.B W4, [W5]
14459:                 
14460:                 FlashMass2[12]=(unsigned char)(Crr1Corr*50);
00E5AE  808854     MOV Crr1Corr, W4
00E5B0  808865     MOV 0x110C, W5
00E5B2  200002     MOV #0x0, W2
00E5B4  242483     MOV #0x4248, W3
00E5B6  BE0004     MOV.D W4, W0
00E5B8  022630     CALL ___mulsf3
00E5BA  000000     NOP
00E5BC  BE0200     MOV.D W0, W4
00E5BE  BE0004     MOV.D W4, W0
00E5C0  022546     CALL ___fixunssfsi
00E5C2  000000     NOP
00E5C4  BE0200     MOV.D W0, W4
00E5C6  784204     MOV.B W4, W4
00E5C8  22CD25     MOV #0x2CD2, W5
00E5CA  784A84     MOV.B W4, [W5]
14461:                 
14462:                 Tm=ButtonBreakOnlyPWM;
00E5CC  8180D4     MOV ButtonBreakOnlyPWM, W4
00E5CE  780F04     MOV W4, [W14]
14463:                 FlashMass2[13]=(unsigned char)Tm;
00E5D0  78021E     MOV [W14], W4
00E5D2  784204     MOV.B W4, W4
00E5D4  22CD35     MOV #0x2CD3, W5
00E5D6  784A84     MOV.B W4, [W5]
14464:                 Tm=Tm>>8;
00E5D8  78021E     MOV [W14], W4
00E5DA  DEA248     ASR W4, #8, W4
00E5DC  780F04     MOV W4, [W14]
14465:                 FlashMass2[14]=(unsigned char)Tm;
00E5DE  78021E     MOV [W14], W4
00E5E0  784204     MOV.B W4, W4
00E5E2  22CD45     MOV #0x2CD4, W5
00E5E4  784A84     MOV.B W4, [W5]
14466:                 
14467:                 Tm=CntTurnOnConst;
00E5E6  820664     MOV CntTurnOnConst, W4
00E5E8  780F04     MOV W4, [W14]
14468:                 FlashMass2[15]=(unsigned char)Tm;
00E5EA  78021E     MOV [W14], W4
00E5EC  784204     MOV.B W4, W4
00E5EE  22CD55     MOV #0x2CD5, W5
00E5F0  784A84     MOV.B W4, [W5]
14469:                 Tm=Tm>>8;
00E5F2  78021E     MOV [W14], W4
00E5F4  DEA248     ASR W4, #8, W4
00E5F6  780F04     MOV W4, [W14]
14470:                 FlashMass2[16]=(unsigned char)Tm;
00E5F8  78021E     MOV [W14], W4
00E5FA  784204     MOV.B W4, W4
00E5FC  22CD65     MOV #0x2CD6, W5
00E5FE  784A84     MOV.B W4, [W5]
14471:                 
14472:                 Tm=CntTurnOffConst;
00E600  820674     MOV CntTurnOffConst, W4
00E602  780F04     MOV W4, [W14]
14473:                 FlashMass2[17]=(unsigned char)Tm;
00E604  78021E     MOV [W14], W4
00E606  784204     MOV.B W4, W4
00E608  22CD75     MOV #0x2CD7, W5
00E60A  784A84     MOV.B W4, [W5]
14474:                 Tm=Tm>>8;
00E60C  78021E     MOV [W14], W4
00E60E  DEA248     ASR W4, #8, W4
00E610  780F04     MOV W4, [W14]
14475:                 FlashMass2[18]=(unsigned char)Tm;
00E612  78021E     MOV [W14], W4
00E614  784204     MOV.B W4, W4
00E616  22CD85     MOV #0x2CD8, W5
00E618  784A84     MOV.B W4, [W5]
14476:                 
14477:                 FlashMass2[19]=TemperatureTYPE_FETs;
00E61A  22FB64     MOV #0x2FB6, W4
00E61C  784214     MOV.B [W4], W4
00E61E  22CD95     MOV #0x2CD9, W5
00E620  784A84     MOV.B W4, [W5]
14478:                 FlashMass2[20]=TstPhase;
00E622  22FB74     MOV #0x2FB7, W4
00E624  784214     MOV.B [W4], W4
00E626  22CDA5     MOV #0x2CDA, W5
00E628  784A84     MOV.B W4, [W5]
14479:                 
14480:             
14481:                 CurrPerDigit=CurrPerDigitDEF;
00E62A  854A74     MOV 0xA94E, W4
00E62C  854A85     MOV 0xA950, W5
00E62E  8A13C4     MOV W4, CurrPerDigit
00E630  8A13D5     MOV W5, 0x427A
14482:                 
14483:                 Tm=(int)(CurrPerDigit*100);
00E632  8213C4     MOV CurrPerDigit, W4
00E634  8213D5     MOV 0x427A, W5
00E636  200002     MOV #0x0, W2
00E638  242C83     MOV #0x42C8, W3
00E63A  BE0004     MOV.D W4, W0
00E63C  022630     CALL ___mulsf3
00E63E  000000     NOP
00E640  BE0200     MOV.D W0, W4
00E642  BE0004     MOV.D W4, W0
00E644  022504     CALL ___fixsfsi
00E646  000000     NOP
00E648  BE0200     MOV.D W0, W4
00E64A  780F04     MOV W4, [W14]
14484:                 FlashMass2[21]=(unsigned char)Tm;
00E64C  78021E     MOV [W14], W4
00E64E  784204     MOV.B W4, W4
00E650  22CDB5     MOV #0x2CDB, W5
00E652  784A84     MOV.B W4, [W5]
14485:                 Tm=Tm>>8;
00E654  78021E     MOV [W14], W4
00E656  DEA248     ASR W4, #8, W4
00E658  780F04     MOV W4, [W14]
14486:                 FlashMass2[22]=(unsigned char)Tm;
00E65A  78021E     MOV [W14], W4
00E65C  784204     MOV.B W4, W4
00E65E  22CDC5     MOV #0x2CDC, W5
00E660  784A84     MOV.B W4, [W5]
14487:             
14488:                 Tm=SpdStartLevel;
00E662  8099D4     MOV SpdStartLevel, W4
00E664  780F04     MOV W4, [W14]
14489:                 FlashMass2[23]=(unsigned char)Tm;
00E666  78021E     MOV [W14], W4
00E668  784204     MOV.B W4, W4
00E66A  22CDD5     MOV #0x2CDD, W5
00E66C  784A84     MOV.B W4, [W5]
14490:                 Tm=Tm>>8;
00E66E  78021E     MOV [W14], W4
00E670  DEA248     ASR W4, #8, W4
00E672  780F04     MOV W4, [W14]
14491:                 FlashMass2[24]=(unsigned char)Tm;
00E674  78021E     MOV [W14], W4
00E676  784204     MOV.B W4, W4
00E678  22CDE5     MOV #0x2CDE, W5
00E67A  784A84     MOV.B W4, [W5]
14492:                 
14493:                 Tm=(int)(Ki_PWM_ModeOff*10000);
00E67C  8182C4     MOV Ki_PWM_ModeOff, W4
00E67E  8182D5     MOV 0x305A, W5
00E680  240002     MOV #0x4000, W2
00E682  2461C3     MOV #0x461C, W3
00E684  BE0004     MOV.D W4, W0
00E686  022630     CALL ___mulsf3
00E688  000000     NOP
00E68A  BE0200     MOV.D W0, W4
00E68C  BE0004     MOV.D W4, W0
00E68E  022504     CALL ___fixsfsi
00E690  000000     NOP
00E692  BE0200     MOV.D W0, W4
00E694  780F04     MOV W4, [W14]
14494:                 FlashMass2[25]=(unsigned char)Tm;
00E696  78021E     MOV [W14], W4
00E698  784204     MOV.B W4, W4
00E69A  22CDF5     MOV #0x2CDF, W5
00E69C  784A84     MOV.B W4, [W5]
14495:                 Tm=Tm>>8;
00E69E  78021E     MOV [W14], W4
00E6A0  DEA248     ASR W4, #8, W4
00E6A2  780F04     MOV W4, [W14]
14496:                 FlashMass2[26]=(unsigned char)Tm;
00E6A4  78021E     MOV [W14], W4
00E6A6  784204     MOV.B W4, W4
00E6A8  22CE05     MOV #0x2CE0, W5
00E6AA  784A84     MOV.B W4, [W5]
14497:                 
14498:                 FlashMass2[27]=StrongModeSpdFilterOffMem;
00E6AC  22ADE4     MOV #0x2ADE, W4
00E6AE  784214     MOV.B [W4], W4
00E6B0  22CE15     MOV #0x2CE1, W5
00E6B2  784A84     MOV.B W4, [W5]
14499:             
14500:                 Tm=RegenOffMem;
00E6B4  8180E4     MOV RegenOffMem, W4
00E6B6  780F04     MOV W4, [W14]
14501:                 FlashMass2[28]=(unsigned char)Tm;
00E6B8  78021E     MOV [W14], W4
00E6BA  784204     MOV.B W4, W4
00E6BC  22CE25     MOV #0x2CE2, W5
00E6BE  784A84     MOV.B W4, [W5]
14502:                 Tm=Tm>>8;
00E6C0  78021E     MOV [W14], W4
00E6C2  DEA248     ASR W4, #8, W4
00E6C4  780F04     MOV W4, [W14]
14503:                 FlashMass2[29]=(unsigned char)Tm;
00E6C6  78021E     MOV [W14], W4
00E6C8  784204     MOV.B W4, W4
00E6CA  22CE35     MOV #0x2CE3, W5
00E6CC  784A84     MOV.B W4, [W5]
14504:                 
14505:                 
14506:                 Tm=StatFlgs4.StatusFlags;
00E6CE  809784     MOV StatFlgs4, W4
00E6D0  780F04     MOV W4, [W14]
14507:                 FlashMass2[30]=(unsigned char)Tm;
00E6D2  78021E     MOV [W14], W4
00E6D4  784204     MOV.B W4, W4
00E6D6  22CE45     MOV #0x2CE4, W5
00E6D8  784A84     MOV.B W4, [W5]
14508:                 Tm=Tm>>8;
00E6DA  78021E     MOV [W14], W4
00E6DC  DEA248     ASR W4, #8, W4
00E6DE  780F04     MOV W4, [W14]
14509:                 FlashMass2[31]=(unsigned char)Tm;
00E6E0  78021E     MOV [W14], W4
00E6E2  784204     MOV.B W4, W4
00E6E4  22CE55     MOV #0x2CE5, W5
00E6E6  784A84     MOV.B W4, [W5]
14510:                 
14511:                 FlashMass2[32]=(unsigned char)KeyLightBrightness;
00E6E8  22FAE4     MOV #0x2FAE, W4
00E6EA  784214     MOV.B [W4], W4
00E6EC  22CE65     MOV #0x2CE6, W5
00E6EE  784A84     MOV.B W4, [W5]
14512:                 
14513:                 Tm=ButtonBreakOnlyTime;
00E6F0  818414     MOV ButtonBreakOnlyTime, W4
00E6F2  780F04     MOV W4, [W14]
14514:                 FlashMass2[33]=(unsigned char)Tm;
00E6F4  78021E     MOV [W14], W4
00E6F6  784204     MOV.B W4, W4
00E6F8  22CE75     MOV #0x2CE7, W5
00E6FA  784A84     MOV.B W4, [W5]
14515:                 Tm=Tm>>8;
00E6FC  78021E     MOV [W14], W4
00E6FE  DEA248     ASR W4, #8, W4
00E700  780F04     MOV W4, [W14]
14516:                 FlashMass2[34]=(unsigned char)Tm;
00E702  78021E     MOV [W14], W4
00E704  784204     MOV.B W4, W4
00E706  22CE85     MOV #0x2CE8, W5
00E708  784A84     MOV.B W4, [W5]
14517:                 
14518:                 
14519:                 
14520:             }
00E70A  FA8000     ULNK
00E70C  060000     RETURN
14521:             
14522:             void WriteOptions(void)
14523:             {
00E70E  FA0004     LNK #0x4
14524:                 int Tm;
14525:                 unsigned char Chk;
14526:             
14527:                 OptionsToMass();
00E710  07F86E     RCALL OptionsToMass
14528:             
14529:                  WriteStat_FLASH(0);
00E712  EB4000     CLR.B W0
00E714  07F771     RCALL WriteStat_FLASH
14530:                  EraseSector_FLASH(0);
00E716  B80060     MUL.UU W0, #0, W0
00E718  07F784     RCALL EraseSector_FLASH
14531:             
14532:             
14533:             
14534:                 Chk=CalcCheckSumm(sizeof(FlashMass), FlashMass);
00E71A  22AE01     MOV #0x2AE0, W1
00E71C  200F30     MOV #0xF3, W0
00E71E  07D9EB     RCALL CalcCheckSumm
00E720  784200     MOV.B W0, W4
00E722  984724     MOV.B W4, [W14+2]
14535:             
14536:                  for (Tm=0;Tm<sizeof(FlashMass);Tm++)
00E724  EB0200     CLR W4
00E726  780F04     MOV W4, [W14]
00E728  370009     BRA 0xE73C
00E73A  E80F1E     INC [W14], [W14]
00E73C  78029E     MOV [W14], W5
00E73E  200F24     MOV #0xF2, W4
00E740  528F84     SUB W5, W4, [W15]
00E742  36FFF3     BRA LEU, 0xE72A
14537:                 WriteByte_FLASH((unsigned long int)Tm, FlashMass[Tm]);
00E72A  22AE04     MOV #0x2AE0, W4
00E72C  42021E     ADD W4, [W14], W4
00E72E  784314     MOV.B [W4], W6
00E730  78021E     MOV [W14], W4
00E732  DEA2CF     ASR W4, #15, W5
00E734  784106     MOV.B W6, W2
00E736  BE0004     MOV.D W4, W0
00E738  07F722     RCALL WriteByte_FLASH
14538:                 WriteByte_FLASH((unsigned long int)Tm, Chk);
00E744  78021E     MOV [W14], W4
00E746  DEA2CF     ASR W4, #15, W5
00E748  90412E     MOV.B [W14+2], W2
00E74A  BE0004     MOV.D W4, W0
00E74C  07F718     RCALL WriteByte_FLASH
14539:             
14540:                 
14541:                 Chk=CalcCheckSumm(sizeof(ProfileMass), ProfileMass);
00E74E  22DB91     MOV #0x2DB9, W1
00E750  200F00     MOV #0xF0, W0
00E752  07D9D1     RCALL CalcCheckSumm
00E754  784200     MOV.B W0, W4
00E756  984724     MOV.B W4, [W14+2]
14542:                 
14543:                  for (Tm=sizeof(FlashMass)+1;Tm<(sizeof(ProfileMass)+sizeof(FlashMass)+1);Tm++)
00E758  200F44     MOV #0xF4, W4
00E75A  780F04     MOV W4, [W14]
00E75C  37000B     BRA 0xE774
00E772  E80F1E     INC [W14], [W14]
00E774  78029E     MOV [W14], W5
00E776  201E34     MOV #0x1E3, W4
00E778  528F84     SUB W5, W4, [W15]
00E77A  36FFF1     BRA LEU, 0xE75E
14544:                 WriteByte_FLASH((unsigned long int)Tm, ProfileMass[Tm-1-sizeof(FlashMass)]);
00E75E  78021E     MOV [W14], W4
00E760  B10F44     SUB #0xF4, W4
00E762  22DB95     MOV #0x2DB9, W5
00E764  428204     ADD W5, W4, W4
00E766  784314     MOV.B [W4], W6
00E768  78021E     MOV [W14], W4
00E76A  DEA2CF     ASR W4, #15, W5
00E76C  784106     MOV.B W6, W2
00E76E  BE0004     MOV.D W4, W0
00E770  07F706     RCALL WriteByte_FLASH
14545:                 WriteByte_FLASH((unsigned long int)Tm, Chk);
00E77C  78021E     MOV [W14], W4
00E77E  DEA2CF     ASR W4, #15, W5
00E780  90412E     MOV.B [W14+2], W2
00E782  BE0004     MOV.D W4, W0
00E784  07F6FC     RCALL WriteByte_FLASH
14546:                 
14547:             
14548:             
14549:                 Chk=CalcCheckSumm(sizeof(FlashMass2), FlashMass2);
00E786  22CC61     MOV #0x2CC6, W1
00E788  200F30     MOV #0xF3, W0
00E78A  07D9B5     RCALL CalcCheckSumm
00E78C  784200     MOV.B W0, W4
00E78E  984724     MOV.B W4, [W14+2]
14550:             
14551:                  for (Tm=sizeof(FlashMass)+sizeof(ProfileMass)+2;Tm<(sizeof(FlashMass)+sizeof(FlashMass)+sizeof(ProfileMass)+2);Tm++)
00E790  201E54     MOV #0x1E5, W4
00E792  780F04     MOV W4, [W14]
00E794  37000B     BRA 0xE7AC
00E7AA  E80F1E     INC [W14], [W14]
00E7AC  78029E     MOV [W14], W5
00E7AE  202D74     MOV #0x2D7, W4
00E7B0  528F84     SUB W5, W4, [W15]
00E7B2  36FFF1     BRA LEU, 0xE796
14552:                 WriteByte_FLASH((unsigned long int)Tm, FlashMass2[Tm-(sizeof(FlashMass)+sizeof(ProfileMass)+2)]);
00E796  78021E     MOV [W14], W4
00E798  B11E54     SUB #0x1E5, W4
00E79A  22CC65     MOV #0x2CC6, W5
00E79C  428204     ADD W5, W4, W4
00E79E  784314     MOV.B [W4], W6
00E7A0  78021E     MOV [W14], W4
00E7A2  DEA2CF     ASR W4, #15, W5
00E7A4  784106     MOV.B W6, W2
00E7A6  BE0004     MOV.D W4, W0
00E7A8  07F6EA     RCALL WriteByte_FLASH
14553:                 WriteByte_FLASH((unsigned long int)Tm, Chk);
00E7B4  78021E     MOV [W14], W4
00E7B6  DEA2CF     ASR W4, #15, W5
00E7B8  90412E     MOV.B [W14+2], W2
00E7BA  BE0004     MOV.D W4, W0
00E7BC  07F6E0     RCALL WriteByte_FLASH
14554:             
14555:             
14556:             
14557:             
14558:                 
14559:                 WriteStat_FLASH(0x3c);
00E7BE  B3C3C0     MOV.B #0x3C, W0
00E7C0  07F71B     RCALL WriteStat_FLASH
14560:             
14561:             }
00E7C2  FA8000     ULNK
00E7C4  060000     RETURN
14562:             
14563:             
14564:             
14565:             
14566:             //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
14567:             void MassToOptions(void)
14568:             {
00E7C6  FA0006     LNK #0x6
00E7C8  BE9F88     MOV.D W8, [W15++]
14569:                 ErrOptions=0;
00E7CA  2305C5     MOV #0x305C, W5
00E7CC  EB4200     CLR.B W4
00E7CE  784A84     MOV.B W4, [W5]
14570:                 int Tm=FlashMass[2];
00E7D0  22AE24     MOV #0x2AE2, W4
00E7D2  784214     MOV.B [W4], W4
00E7D4  FB8204     ZE W4, W4
00E7D6  780F04     MOV W4, [W14]
14571:                 Tm=Tm<<8;
00E7D8  78021E     MOV [W14], W4
00E7DA  DD2248     SL W4, #8, W4
00E7DC  780F04     MOV W4, [W14]
14572:                 Tm=Tm+FlashMass[1];
00E7DE  22AE14     MOV #0x2AE1, W4
00E7E0  784214     MOV.B [W4], W4
00E7E2  FB8204     ZE W4, W4
00E7E4  420F1E     ADD W4, [W14], [W14]
14573:                 KpMustBe=Tm;
00E7E6  78021E     MOV [W14], W4
00E7E8  DEA2CF     ASR W4, #15, W5
00E7EA  BE0004     MOV.D W4, W0
00E7EC  02257C     CALL ___floatsisf
00E7EE  000000     NOP
00E7F0  BE0200     MOV.D W0, W4
00E7F2  889BC4     MOV W4, KpMustBe
00E7F4  889BD5     MOV W5, 0x137A
14574:             
14575:               /*  if (KpMustBe>700)
14576:                 {
14577:                     
14578:                     KpNoMan=150;
14579:                     SetKpMustBe_UP();
14580:                     ErrOptions=KpMustBeErr;
14581:                 }
14582:             */
14583:             
14584:             
14585:                 Tm=FlashMass[4];
00E7F6  22AE44     MOV #0x2AE4, W4
00E7F8  784214     MOV.B [W4], W4
00E7FA  FB8204     ZE W4, W4
00E7FC  780F04     MOV W4, [W14]
14586:                 Tm=Tm<<8;
00E7FE  78021E     MOV [W14], W4
00E800  DD2248     SL W4, #8, W4
00E802  780F04     MOV W4, [W14]
14587:                 Tm=Tm+FlashMass[3];
00E804  22AE34     MOV #0x2AE3, W4
00E806  784214     MOV.B [W4], W4
00E808  FB8204     ZE W4, W4
00E80A  420F1E     ADD W4, [W14], [W14]
14588:                 KpNoMan=Tm;
00E80C  78021E     MOV [W14], W4
00E80E  DEA2CF     ASR W4, #15, W5
00E810  BE0004     MOV.D W4, W0
00E812  02257C     CALL ___floatsisf
00E814  000000     NOP
00E816  BE0200     MOV.D W0, W4
00E818  889BE4     MOV W4, KpNoMan
00E81A  889BF5     MOV W5, 0x137E
14589:             
14590:                 Tm=FlashMass[6];
00E81C  22AE64     MOV #0x2AE6, W4
00E81E  784214     MOV.B [W4], W4
00E820  FB8204     ZE W4, W4
00E822  780F04     MOV W4, [W14]
14591:                 Tm=Tm<<8;
00E824  78021E     MOV [W14], W4
00E826  DD2248     SL W4, #8, W4
00E828  780F04     MOV W4, [W14]
14592:                 Tm=Tm+FlashMass[5];
00E82A  22AE54     MOV #0x2AE5, W4
00E82C  784214     MOV.B [W4], W4
00E82E  FB8204     ZE W4, W4
00E830  420F1E     ADD W4, [W14], [W14]
14593:                 KdNoMan=Tm;
00E832  78021E     MOV [W14], W4
00E834  DEA2CF     ASR W4, #15, W5
00E836  BE0004     MOV.D W4, W0
00E838  02257C     CALL ___floatsisf
00E83A  000000     NOP
00E83C  BE0200     MOV.D W0, W4
00E83E  889C24     MOV W4, KdNoMan
00E840  889C35     MOV W5, 0x1386
14594:             
14595:                 KdNoMan=KdNoMan*10;
00E842  809C24     MOV KdNoMan, W4
00E844  809C35     MOV 0x1386, W5
00E846  200002     MOV #0x0, W2
00E848  241203     MOV #0x4120, W3
00E84A  BE0004     MOV.D W4, W0
00E84C  022630     CALL ___mulsf3
00E84E  000000     NOP
00E850  BE0200     MOV.D W0, W4
00E852  889C24     MOV W4, KdNoMan
00E854  889C35     MOV W5, 0x1386
14596:             
14597:             
14598:             
14599:             
14600:             
14601:             
14602:                 Tm=FlashMass[8];
00E856  22AE84     MOV #0x2AE8, W4
00E858  784214     MOV.B [W4], W4
00E85A  FB8204     ZE W4, W4
00E85C  780F04     MOV W4, [W14]
14603:                 Tm=Tm<<8;
00E85E  78021E     MOV [W14], W4
00E860  DD2248     SL W4, #8, W4
00E862  780F04     MOV W4, [W14]
14604:                 Tm=Tm+FlashMass[7];
00E864  22AE74     MOV #0x2AE7, W4
00E866  784214     MOV.B [W4], W4
00E868  FB8204     ZE W4, W4
00E86A  420F1E     ADD W4, [W14], [W14]
14605:                 KiNoMan=Tm;
00E86C  78021E     MOV [W14], W4
00E86E  DEA2CF     ASR W4, #15, W5
00E870  BE0004     MOV.D W4, W0
00E872  02257C     CALL ___floatsisf
00E874  000000     NOP
00E876  BE0200     MOV.D W0, W4
00E878  889B44     MOV W4, KiNoMan
00E87A  889B55     MOV W5, 0x136A
14606:             
14607:               /*  if (KiNoMan>15000)
14608:                 {
14609:                     KiNoMan=450;
14610:                     ErrOptions=KiErr;
14611:                 }
14612:             */
14613:                 KiNoMan=KiNoMan/100;
00E87C  809B44     MOV KiNoMan, W4
00E87E  809B55     MOV 0x136A, W5
00E880  200002     MOV #0x0, W2
00E882  242C83     MOV #0x42C8, W3
00E884  BE0004     MOV.D W4, W0
00E886  02245A     CALL ___divsf3
00E888  000000     NOP
00E88A  BE0200     MOV.D W0, W4
00E88C  889B44     MOV W4, KiNoMan
00E88E  889B55     MOV W5, 0x136A
14614:             
14615:                 Tm=FlashMass[10];
00E890  22AEA4     MOV #0x2AEA, W4
00E892  784214     MOV.B [W4], W4
00E894  FB8204     ZE W4, W4
00E896  780F04     MOV W4, [W14]
14616:                 Tm=Tm<<8;
00E898  78021E     MOV [W14], W4
00E89A  DD2248     SL W4, #8, W4
00E89C  780F04     MOV W4, [W14]
14617:                 Tm=Tm+FlashMass[9];
00E89E  22AE94     MOV #0x2AE9, W4
00E8A0  784214     MOV.B [W4], W4
00E8A2  FB8204     ZE W4, W4
00E8A4  420F1E     ADD W4, [W14], [W14]
14618:                 KpKpSpd=Tm;
00E8A6  78021E     MOV [W14], W4
00E8A8  DEA2CF     ASR W4, #15, W5
00E8AA  BE0004     MOV.D W4, W0
00E8AC  02257C     CALL ___floatsisf
00E8AE  000000     NOP
00E8B0  BE0200     MOV.D W0, W4
00E8B2  889884     MOV W4, KpKpSpd
00E8B4  889895     MOV W5, 0x1312
14619:               
14620:             
14621:                 But1Func=FlashMass[11];
00E8B6  22AEB4     MOV #0x2AEB, W4
00E8B8  784214     MOV.B [W4], W4
00E8BA  2401C5     MOV #0x401C, W5
00E8BC  784A84     MOV.B W4, [W5]
14622:                 But2Func=FlashMass[12];
00E8BE  22AEC4     MOV #0x2AEC, W4
00E8C0  784214     MOV.B [W4], W4
00E8C2  2401D5     MOV #0x401D, W5
00E8C4  784A84     MOV.B W4, [W5]
14623:             
14624:             
14625:                 Tm=FlashMass[14];
00E8C6  22AEE4     MOV #0x2AEE, W4
00E8C8  784214     MOV.B [W4], W4
00E8CA  FB8204     ZE W4, W4
00E8CC  780F04     MOV W4, [W14]
14626:                 Tm=Tm<<8;
00E8CE  78021E     MOV [W14], W4
00E8D0  DD2248     SL W4, #8, W4
00E8D2  780F04     MOV W4, [W14]
14627:                 Tm=Tm+FlashMass[13];
00E8D4  22AED4     MOV #0x2AED, W4
00E8D6  784214     MOV.B [W4], W4
00E8D8  FB8204     ZE W4, W4
00E8DA  420F1E     ADD W4, [W14], [W14]
14628:                 KGYRO=Tm;
00E8DC  78021E     MOV [W14], W4
00E8DE  DEA2CF     ASR W4, #15, W5
00E8E0  BE0004     MOV.D W4, W0
00E8E2  02257C     CALL ___floatsisf
00E8E4  000000     NOP
00E8E6  BE0200     MOV.D W0, W4
00E8E8  897DC4     MOV W4, KGYRO
00E8EA  897DD5     MOV W5, 0x2FBA
14629:             
14630:             
14631:                 if (KGYRO>1000)
00E8EC  817DC4     MOV KGYRO, W4
00E8EE  817DD5     MOV 0x2FBA, W5
00E8F0  B3C018     MOV.B #0x1, W8
00E8F2  200002     MOV #0x0, W2
00E8F4  2447A3     MOV #0x447A, W3
00E8F6  BE0004     MOV.D W4, W0
00E8F8  022500     CALL ___gtsf2
00E8FA  000000     NOP
00E8FC  780200     MOV W0, W4
00E8FE  520FE0     SUB W4, #0x0, [W15]
00E900  3C0001     BRA GT, 0xE904
00E902  EB4400     CLR.B W8
00E904  544FE0     SUB.B W8, #0x0, [W15]
00E906  320007     BRA Z, 0xE916
14632:                 {
14633:                     KGYRO=997;
00E908  240004     MOV #0x4000, W4
00E90A  244795     MOV #0x4479, W5
00E90C  897DC4     MOV W4, KGYRO
00E90E  897DD5     MOV W5, 0x2FBA
14634:                     ErrOptions=KGYROErr;
00E910  2305C5     MOV #0x305C, W5
00E912  B3C054     MOV.B #0x5, W4
00E914  784A84     MOV.B W4, [W5]
14635:                 }
14636:             
14637:                 KGYRO=KGYRO/1000;
00E916  817DC4     MOV KGYRO, W4
00E918  817DD5     MOV 0x2FBA, W5
00E91A  200002     MOV #0x0, W2
00E91C  2447A3     MOV #0x447A, W3
00E91E  BE0004     MOV.D W4, W0
00E920  02245A     CALL ___divsf3
00E922  000000     NOP
00E924  BE0200     MOV.D W0, W4
00E926  897DC4     MOV W4, KGYRO
00E928  897DD5     MOV W5, 0x2FBA
14638:                 KACC=1-KGYRO;
00E92A  817DC4     MOV KGYRO, W4
00E92C  817DD5     MOV 0x2FBA, W5
00E92E  BE0104     MOV.D W4, W2
00E930  200000     MOV #0x0, W0
00E932  23F801     MOV #0x3F80, W1
00E934  0222D0     CALL ___subsf3
00E936  000000     NOP
00E938  BE0200     MOV.D W0, W4
00E93A  897DE4     MOV W4, KACC
00E93C  897DF5     MOV W5, 0x2FBE
14639:             
14640:             
14641:             
14642:             
14643:                 Tm=FlashMass[16];
00E93E  22AF04     MOV #0x2AF0, W4
00E940  784214     MOV.B [W4], W4
00E942  FB8204     ZE W4, W4
00E944  780F04     MOV W4, [W14]
14644:                 Tm=Tm<<8;
00E946  78021E     MOV [W14], W4
00E948  DD2248     SL W4, #8, W4
00E94A  780F04     MOV W4, [W14]
14645:                 Tm=Tm+FlashMass[15];
00E94C  22AEF4     MOV #0x2AEF, W4
00E94E  784214     MOV.B [W4], W4
00E950  FB8204     ZE W4, W4
00E952  420F1E     ADD W4, [W14], [W14]
14646:                 SensorLessTimerConst2=Tm;
00E954  78021E     MOV [W14], W4
00E956  8A0144     MOV W4, SensorLessTimerConst2
14647:                 
14648:             
14649:             
14650:                 Tm=FlashMass[18];
00E958  22AF24     MOV #0x2AF2, W4
00E95A  784214     MOV.B [W4], W4
00E95C  FB8204     ZE W4, W4
00E95E  780F04     MOV W4, [W14]
14651:                 Tm=Tm<<8;
00E960  78021E     MOV [W14], W4
00E962  DD2248     SL W4, #8, W4
00E964  780F04     MOV W4, [W14]
14652:                 Tm=Tm+FlashMass[17];
00E966  22AF14     MOV #0x2AF1, W4
00E968  784214     MOV.B [W4], W4
00E96A  FB8204     ZE W4, W4
00E96C  420F1E     ADD W4, [W14], [W14]
14653:                 SenosrlessPWM1_2Const=Tm;
00E96E  78021E     MOV [W14], W4
00E970  889304     MOV W4, SenosrlessPWM1_2Const
14654:             
14655:               
14656:                 
14657:                 Tm=FlashMass[20];
00E972  22AF44     MOV #0x2AF4, W4
00E974  784214     MOV.B [W4], W4
00E976  FB8204     ZE W4, W4
00E978  780F04     MOV W4, [W14]
14658:                 Tm=Tm<<8;
00E97A  78021E     MOV [W14], W4
00E97C  DD2248     SL W4, #8, W4
00E97E  780F04     MOV W4, [W14]
14659:                 Tm=Tm+FlashMass[19];
00E980  22AF34     MOV #0x2AF3, W4
00E982  784214     MOV.B [W4], W4
00E984  FB8204     ZE W4, W4
00E986  420F1E     ADD W4, [W14], [W14]
14660:                 SensorLessTimerConstMin=Tm;
00E988  78021E     MOV [W14], W4
00E98A  897EC4     MOV W4, SensorLessTimerConstMin
14661:             
14662:             
14663:                 Tm=FlashMass[22];
00E98C  22AF64     MOV #0x2AF6, W4
00E98E  784214     MOV.B [W4], W4
00E990  FB8204     ZE W4, W4
00E992  780F04     MOV W4, [W14]
14664:                 Tm=Tm<<8;
00E994  78021E     MOV [W14], W4
00E996  DD2248     SL W4, #8, W4
00E998  780F04     MOV W4, [W14]
14665:                 Tm=Tm+FlashMass[21];
00E99A  22AF54     MOV #0x2AF5, W4
00E99C  784214     MOV.B [W4], W4
00E99E  FB8204     ZE W4, W4
00E9A0  420F1E     ADD W4, [W14], [W14]
14666:                 CalibrationGyroX=Tm;
00E9A2  78021E     MOV [W14], W4
00E9A4  895554     MOV W4, CalibrationGyroX
14667:             
14668:                 /*if ((CalibrationGyroX>2000)||(CalibrationGyroX<-2000))
14669:                 {
14670:                     CalibrationGyroX=0;
14671:                     ErrOptions=CalibrationGyroXErr;
14672:                 }*/
14673:             
14674:             
14675:                 Tm=FlashMass[24];
00E9A6  22AF84     MOV #0x2AF8, W4
00E9A8  784214     MOV.B [W4], W4
00E9AA  FB8204     ZE W4, W4
00E9AC  780F04     MOV W4, [W14]
14676:                 Tm=Tm<<8;
00E9AE  78021E     MOV [W14], W4
00E9B0  DD2248     SL W4, #8, W4
00E9B2  780F04     MOV W4, [W14]
14677:                 Tm=Tm+FlashMass[23];
00E9B4  22AF74     MOV #0x2AF7, W4
00E9B6  784214     MOV.B [W4], W4
00E9B8  FB8204     ZE W4, W4
00E9BA  420F1E     ADD W4, [W14], [W14]
14678:                 CalibrationGyroY=Tm;
00E9BC  78021E     MOV [W14], W4
00E9BE  895564     MOV W4, CalibrationGyroY
14679:             
14680:               /*  if ((CalibrationGyroY>2000)||(CalibrationGyroY<-2000))
14681:                 {
14682:                     CalibrationGyroY=0;
14683:                     ErrOptions=CalibrationGyroYErr;
14684:                 }
14685:             */
14686:             
14687:                 Tm=FlashMass[26];
00E9C0  22AFA4     MOV #0x2AFA, W4
00E9C2  784214     MOV.B [W4], W4
00E9C4  FB8204     ZE W4, W4
00E9C6  780F04     MOV W4, [W14]
14688:                 Tm=Tm<<8;
00E9C8  78021E     MOV [W14], W4
00E9CA  DD2248     SL W4, #8, W4
00E9CC  780F04     MOV W4, [W14]
14689:                 Tm=Tm+FlashMass[25];
00E9CE  22AF94     MOV #0x2AF9, W4
00E9D0  784214     MOV.B [W4], W4
00E9D2  FB8204     ZE W4, W4
00E9D4  420F1E     ADD W4, [W14], [W14]
14690:                 CalibrationGyroZ=Tm;
00E9D6  78021E     MOV [W14], W4
00E9D8  895574     MOV W4, CalibrationGyroZ
14691:             
14692:               /*  if ((CalibrationGyroZ>2000)||(CalibrationGyroZ<-2000))
14693:                 {
14694:                     CalibrationGyroZ=0;
14695:                     ErrOptions=CalibrationGyroZErr;
14696:                 }
14697:             */
14698:             
14699:             
14700:                 Tm=FlashMass[28];
00E9DA  22AFC4     MOV #0x2AFC, W4
00E9DC  784214     MOV.B [W4], W4
00E9DE  FB8204     ZE W4, W4
00E9E0  780F04     MOV W4, [W14]
14701:                 Tm=Tm<<8;
00E9E2  78021E     MOV [W14], W4
00E9E4  DD2248     SL W4, #8, W4
00E9E6  780F04     MOV W4, [W14]
14702:                 Tm=Tm+FlashMass[27];
00E9E8  22AFB4     MOV #0x2AFB, W4
00E9EA  784214     MOV.B [W4], W4
00E9EC  FB8204     ZE W4, W4
00E9EE  420F1E     ADD W4, [W14], [W14]
14703:                 CalibrationAccX=Tm;
00E9F0  78021E     MOV [W14], W4
00E9F2  895584     MOV W4, CalibrationAccX
14704:             
14705:               /*  if ((CalibrationAccX>1000)||(CalibrationAccX<-1000))
14706:                 {
14707:                     CalibrationAccX=0;
14708:                     ErrOptions=CalibrationAccXErr;
14709:                 }
14710:             */
14711:             
14712:                 Tm=FlashMass[30];
00E9F4  22AFE4     MOV #0x2AFE, W4
00E9F6  784214     MOV.B [W4], W4
00E9F8  FB8204     ZE W4, W4
00E9FA  780F04     MOV W4, [W14]
14713:                 Tm=Tm<<8;
00E9FC  78021E     MOV [W14], W4
00E9FE  DD2248     SL W4, #8, W4
00EA00  780F04     MOV W4, [W14]
14714:                 Tm=Tm+FlashMass[29];
00EA02  22AFD4     MOV #0x2AFD, W4
00EA04  784214     MOV.B [W4], W4
00EA06  FB8204     ZE W4, W4
00EA08  420F1E     ADD W4, [W14], [W14]
14715:                 CalibrationAccY=Tm;
00EA0A  78021E     MOV [W14], W4
00EA0C  895594     MOV W4, CalibrationAccY
14716:             
14717:               /*  if ((CalibrationAccY>1000)||(CalibrationAccY<-1000))
14718:                 {
14719:                     CalibrationAccY=0;
14720:                     ErrOptions=CalibrationAccYErr;
14721:                 }
14722:             */
14723:             
14724:                 Tm=FlashMass[32];
00EA0E  22B004     MOV #0x2B00, W4
00EA10  784214     MOV.B [W4], W4
00EA12  FB8204     ZE W4, W4
00EA14  780F04     MOV W4, [W14]
14725:                 Tm=Tm<<8;
00EA16  78021E     MOV [W14], W4
00EA18  DD2248     SL W4, #8, W4
00EA1A  780F04     MOV W4, [W14]
14726:                 Tm=Tm+FlashMass[31];
00EA1C  22AFF4     MOV #0x2AFF, W4
00EA1E  784214     MOV.B [W4], W4
00EA20  FB8204     ZE W4, W4
00EA22  420F1E     ADD W4, [W14], [W14]
14727:                 CalibrationAccZ=Tm;
00EA24  78021E     MOV [W14], W4
00EA26  8955A4     MOV W4, CalibrationAccZ
14728:             
14729:                 PhasePERMASS=FlashMass[33];
00EA28  22B014     MOV #0x2B01, W4
00EA2A  784214     MOV.B [W4], W4
00EA2C  2183A5     MOV #0x183A, W5
00EA2E  784A84     MOV.B W4, [W5]
14730:                 PhasePERMASS_SHFT=FlashMass[34];
00EA30  22B024     MOV #0x2B02, W4
00EA32  784214     MOV.B [W4], W4
00EA34  2183B5     MOV #0x183B, W5
00EA36  784A84     MOV.B W4, [W5]
14731:             
14732:             
14733:             
14734:             
14735:             
14736:               /*  if ((KRotNoMan>1000)||(KRotNoMan<0))
14737:                 {
14738:                     KRotNoMan=100;
14739:                     ErrOptions=KRotErr;
14740:                 }
14741:             */
14742:                 HallDelayMem1_F=FlashMass[35];
00EA38  22B034     MOV #0x2B03, W4
00EA3A  784214     MOV.B [W4], W4
00EA3C  214565     MOV #0x1456, W5
00EA3E  784A84     MOV.B W4, [W5]
14743:                 HallDelayMem1_B=FlashMass[36];
00EA40  22B044     MOV #0x2B04, W4
00EA42  784214     MOV.B [W4], W4
00EA44  214575     MOV #0x1457, W5
00EA46  784A84     MOV.B W4, [W5]
14744:                 But3Func=FlashMass[37];
00EA48  22B054     MOV #0x2B05, W4
00EA4A  784214     MOV.B [W4], W4
00EA4C  2401E5     MOV #0x401E, W5
00EA4E  784A84     MOV.B W4, [W5]
14745:                 But4Func=FlashMass[38]; 
00EA50  22B064     MOV #0x2B06, W4
00EA52  784214     MOV.B [W4], W4
00EA54  2401F5     MOV #0x401F, W5
00EA56  784A84     MOV.B W4, [W5]
14746:             
14747:             
14748:                 Theta1Zero=FlashMass[39];
00EA58  22B074     MOV #0x2B07, W4
00EA5A  784214     MOV.B [W4], W4
00EA5C  213FE5     MOV #0x13FE, W5
00EA5E  784A84     MOV.B W4, [W5]
14749:                 Theta2Zero=FlashMass[40];
00EA60  22B084     MOV #0x2B08, W4
00EA62  784214     MOV.B [W4], W4
00EA64  213FF5     MOV #0x13FF, W5
00EA66  784A84     MOV.B W4, [W5]
14750:             
14751:             
14752:             
14753:                 Tm=FlashMass[42];
00EA68  22B0A4     MOV #0x2B0A, W4
00EA6A  784214     MOV.B [W4], W4
00EA6C  FB8204     ZE W4, W4
00EA6E  780F04     MOV W4, [W14]
14754:                 Tm=Tm<<8;
00EA70  78021E     MOV [W14], W4
00EA72  DD2248     SL W4, #8, W4
00EA74  780F04     MOV W4, [W14]
14755:                 Tm=Tm+FlashMass[41];
00EA76  22B094     MOV #0x2B09, W4
00EA78  784214     MOV.B [W4], W4
00EA7A  FB8204     ZE W4, W4
00EA7C  420F1E     ADD W4, [W14], [W14]
14756:                 CurrLimitWork=Tm;
00EA7E  78021E     MOV [W14], W4
00EA80  88C1A4     MOV W4, CurrLimitWork
14757:                 
14758:             
14759:                 
14760:                 Tm=FlashMass[44];
00EA82  22B0C4     MOV #0x2B0C, W4
00EA84  784214     MOV.B [W4], W4
00EA86  FB8204     ZE W4, W4
00EA88  780F04     MOV W4, [W14]
14761:                 Tm=Tm<<8;
00EA8A  78021E     MOV [W14], W4
00EA8C  DD2248     SL W4, #8, W4
00EA8E  780F04     MOV W4, [W14]
14762:                 Tm=Tm+FlashMass[43];
00EA90  22B0B4     MOV #0x2B0B, W4
00EA92  784214     MOV.B [W4], W4
00EA94  FB8204     ZE W4, W4
00EA96  420F1E     ADD W4, [W14], [W14]
14763:                 ChagerCurr=Tm;
00EA98  78021E     MOV [W14], W4
00EA9A  88B654     MOV W4, ChagerCurr
14764:                 
14765:                 
14766:             //    ChagerCurr=FlashMass[43];
14767:             //    P_Curr=FlashMass[44];
14768:                 
14769:                 
14770:                 
14771:                 
14772:                 Tm=FlashMass[46];
00EA9C  22B0E4     MOV #0x2B0E, W4
00EA9E  784214     MOV.B [W4], W4
00EAA0  FB8204     ZE W4, W4
00EAA2  780F04     MOV W4, [W14]
14773:                 Tm=Tm<<8;
00EAA4  78021E     MOV [W14], W4
00EAA6  DD2248     SL W4, #8, W4
00EAA8  780F04     MOV W4, [W14]
14774:                 Tm=Tm+FlashMass[45];
00EAAA  22B0D4     MOV #0x2B0D, W4
00EAAC  784214     MOV.B [W4], W4
00EAAE  FB8204     ZE W4, W4
00EAB0  420F1E     ADD W4, [W14], [W14]
14775:                 KpSPDMove=Tm;
00EAB2  78021E     MOV [W14], W4
00EAB4  898174     MOV W4, KpSPDMove
14776:             
14777:               /*      if ((KpSPDMove>100)||(KpSPDMove<0))
14778:                 {
14779:                     KpSPDMove=4;
14780:                     ErrOptions=KpSPDErr;
14781:                 }
14782:             */
14783:             
14784:             
14785:                 Tm=FlashMass[48];
00EAB6  22B104     MOV #0x2B10, W4
00EAB8  784214     MOV.B [W4], W4
00EABA  FB8204     ZE W4, W4
00EABC  780F04     MOV W4, [W14]
14786:                 Tm=Tm<<8;
00EABE  78021E     MOV [W14], W4
00EAC0  DD2248     SL W4, #8, W4
00EAC2  780F04     MOV W4, [W14]
14787:                 Tm=Tm+FlashMass[47];
00EAC4  22B0F4     MOV #0x2B0F, W4
00EAC6  784214     MOV.B [W4], W4
00EAC8  FB8204     ZE W4, W4
00EACA  420F1E     ADD W4, [W14], [W14]
14788:                 KdSPD=Tm;
00EACC  78021E     MOV [W14], W4
00EACE  898144     MOV W4, KdSPD
14789:                 //KdSPD=KdSPD/10000;
14790:             
14791:                 Tm=FlashMass[50];
00EAD0  22B124     MOV #0x2B12, W4
00EAD2  784214     MOV.B [W4], W4
00EAD4  FB8204     ZE W4, W4
00EAD6  780F04     MOV W4, [W14]
14792:                 Tm=Tm<<8;
00EAD8  78021E     MOV [W14], W4
00EADA  DD2248     SL W4, #8, W4
00EADC  780F04     MOV W4, [W14]
14793:                 Tm=Tm+FlashMass[49];
00EADE  22B114     MOV #0x2B11, W4
00EAE0  784214     MOV.B [W4], W4
00EAE2  FB8204     ZE W4, W4
00EAE4  420F1E     ADD W4, [W14], [W14]
14794:                 KiSPD=Tm;
00EAE6  78021E     MOV [W14], W4
00EAE8  898154     MOV W4, KiSPD
14795:                 //KiSPD=KiSPD/10000;
14796:             
14797:                 Tm=FlashMass[52];
00EAEA  22B144     MOV #0x2B14, W4
00EAEC  784214     MOV.B [W4], W4
00EAEE  FB8204     ZE W4, W4
00EAF0  780F04     MOV W4, [W14]
14798:                 Tm=Tm<<8;
00EAF2  78021E     MOV [W14], W4
00EAF4  DD2248     SL W4, #8, W4
00EAF6  780F04     MOV W4, [W14]
14799:                 Tm=Tm+FlashMass[51];
00EAF8  22B134     MOV #0x2B13, W4
00EAFA  784214     MOV.B [W4], W4
00EAFC  FB8204     ZE W4, W4
00EAFE  420F1E     ADD W4, [W14], [W14]
14800:                 AngleLimitMove=Tm;
00EB00  78021E     MOV [W14], W4
00EB02  898274     MOV W4, AngleLimitMove
14801:             
14802:               /*      if ((AngleLimitMove>50)||(AngleLimitMove<0))
14803:                 {
14804:                     AngleLimitMove=5;
14805:                     ErrOptions=AngleLimitErr;
14806:                 }
14807:             */
14808:             
14809:             
14810:                 Tm=FlashMass[54];
00EB04  22B164     MOV #0x2B16, W4
00EB06  784214     MOV.B [W4], W4
00EB08  FB8204     ZE W4, W4
00EB0A  780F04     MOV W4, [W14]
14811:                 Tm=Tm<<8;
00EB0C  78021E     MOV [W14], W4
00EB0E  DD2248     SL W4, #8, W4
00EB10  780F04     MOV W4, [W14]
14812:                 Tm=Tm+FlashMass[53];
00EB12  22B154     MOV #0x2B15, W4
00EB14  784214     MOV.B [W4], W4
00EB16  FB8204     ZE W4, W4
00EB18  420F1E     ADD W4, [W14], [W14]
14813:                 SpeedLimit1=Tm;
00EB1A  78021E     MOV [W14], W4
00EB1C  898164     MOV W4, SpeedLimit1
14814:             
14815:             
14816:                 Tm=FlashMass[56];
00EB1E  22B184     MOV #0x2B18, W4
00EB20  784214     MOV.B [W4], W4
00EB22  FB8204     ZE W4, W4
00EB24  780F04     MOV W4, [W14]
14817:                 Tm=Tm<<8;
00EB26  78021E     MOV [W14], W4
00EB28  DD2248     SL W4, #8, W4
00EB2A  780F04     MOV W4, [W14]
14818:                 Tm=Tm+FlashMass[55];
00EB2C  22B174     MOV #0x2B17, W4
00EB2E  784214     MOV.B [W4], W4
00EB30  FB8204     ZE W4, W4
00EB32  420F1E     ADD W4, [W14], [W14]
14819:                 StatFlgs.StatusFlags=Tm;
00EB34  78021E     MOV [W14], W4
00EB36  889744     MOV W4, StatFlgs
14820:             
14821:                 Tm=FlashMass[58];
00EB38  22B1A4     MOV #0x2B1A, W4
00EB3A  784214     MOV.B [W4], W4
00EB3C  FB8204     ZE W4, W4
00EB3E  780F04     MOV W4, [W14]
14822:                 Tm=Tm<<8;
00EB40  78021E     MOV [W14], W4
00EB42  DD2248     SL W4, #8, W4
00EB44  780F04     MOV W4, [W14]
14823:                 Tm=Tm+FlashMass[57];
00EB46  22B194     MOV #0x2B19, W4
00EB48  784214     MOV.B [W4], W4
00EB4A  FB8204     ZE W4, W4
00EB4C  420F1E     ADD W4, [W14], [W14]
14824:                 XLimit=Tm;
00EB4E  78021E     MOV [W14], W4
00EB50  8982F4     MOV W4, XLimit
14825:             
14826:               /*  if ((XLimit>90)||(XLimit<0))
14827:                 {
14828:                     XLimit=30;
14829:                     ErrOptions=XLimitErr;
14830:                 }
14831:             */
14832:                 Tm=FlashMass[60];
00EB52  22B1C4     MOV #0x2B1C, W4
00EB54  784214     MOV.B [W4], W4
00EB56  FB8204     ZE W4, W4
00EB58  780F04     MOV W4, [W14]
14833:                 Tm=Tm<<8;
00EB5A  78021E     MOV [W14], W4
00EB5C  DD2248     SL W4, #8, W4
00EB5E  780F04     MOV W4, [W14]
14834:                 Tm=Tm+FlashMass[59];
00EB60  22B1B4     MOV #0x2B1B, W4
00EB62  784214     MOV.B [W4], W4
00EB64  FB8204     ZE W4, W4
00EB66  420F1E     ADD W4, [W14], [W14]
14835:                 YLimit=Tm;
00EB68  78021E     MOV [W14], W4
00EB6A  898304     MOV W4, YLimit
14836:             
14837:               /*  if ((YLimit>90)||(YLimit<0))
14838:                 {
14839:                     YLimit=12;
14840:                     ErrOptions=YLimitErr;
14841:                 }
14842:             */
14843:             
14844:                 Tm=FlashMass[62];
00EB6C  22B1E4     MOV #0x2B1E, W4
00EB6E  784214     MOV.B [W4], W4
00EB70  FB8204     ZE W4, W4
00EB72  780F04     MOV W4, [W14]
14845:                 Tm=Tm<<8;
00EB74  78021E     MOV [W14], W4
00EB76  DD2248     SL W4, #8, W4
00EB78  780F04     MOV W4, [W14]
14846:                 Tm=Tm+FlashMass[61];
00EB7A  22B1D4     MOV #0x2B1D, W4
00EB7C  784214     MOV.B [W4], W4
00EB7E  FB8204     ZE W4, W4
00EB80  420F1E     ADD W4, [W14], [W14]
14847:                 UBatLow=Tm;
00EB82  78021E     MOV [W14], W4
00EB84  898324     MOV W4, UBatLow
14848:             
14849:               /*  if (UBatLow>70)
14850:                 {
14851:                     UBatLow=41;
14852:                     ErrOptions=UBatLowErr;
14853:                 }
14854:             */
14855:             #if !defined VECTOR
14856:             #if !defined ISOLATED                               
14857:                                            float UBtFl=(float)UBatLow*(float)38.388;
14858:                                            UBtLim1=(unsigned int)UBtFl;
14859:                                            UBtLim2=UBtLim1+115;
14860:             #else
14861:                                            float UBtFl=(float)UBatLow/(float)0.4167965;
14862:                                            UBtLim1=(unsigned int)UBtFl;
14863:                                            UBtLim2=UBtLim1+7;
14864:             #endif
14865:             #else
14866:                                            float UBtFl=(float)UBatLow*(float)38.388;
00EB86  818324     MOV UBatLow, W4
00EB88  200005     MOV #0x0, W5
00EB8A  BE0004     MOV.D W4, W0
00EB8C  022582     CALL ___floatunsisf
00EB8E  000000     NOP
00EB90  BE0200     MOV.D W0, W4
00EB92  28D502     MOV #0x8D50, W2
00EB94  242193     MOV #0x4219, W3
00EB96  BE0004     MOV.D W4, W0
00EB98  022630     CALL ___mulsf3
00EB9A  000000     NOP
00EB9C  BE0200     MOV.D W0, W4
00EB9E  980714     MOV W4, [W14+2]
00EBA0  980725     MOV W5, [W14+4]
14867:                                            UBtLim1=(unsigned int)UBtFl;
00EBA2  90001E     MOV [W14+2], W0
00EBA4  9000AE     MOV [W14+4], W1
00EBA6  022546     CALL ___fixunssfsi
00EBA8  000000     NOP
00EBAA  BE0200     MOV.D W0, W4
00EBAC  780204     MOV W4, W4
00EBAE  898334     MOV W4, UBtLim1
14868:                                            UBtLim2=UBtLim1+115;
00EBB0  818334     MOV UBtLim1, W4
00EBB2  B00734     ADD #0x73, W4
00EBB4  898344     MOV W4, UBtLim2
14869:             #endif
14870:                 Tm=FlashMass[64];
00EBB6  22B204     MOV #0x2B20, W4
00EBB8  784214     MOV.B [W4], W4
00EBBA  FB8204     ZE W4, W4
00EBBC  780F04     MOV W4, [W14]
14871:                 Tm=Tm<<8;
00EBBE  78021E     MOV [W14], W4
00EBC0  DD2248     SL W4, #8, W4
00EBC2  780F04     MOV W4, [W14]
14872:                 Tm=Tm+FlashMass[63];
00EBC4  22B1F4     MOV #0x2B1F, W4
00EBC6  784214     MOV.B [W4], W4
00EBC8  FB8204     ZE W4, W4
00EBCA  420F1E     ADD W4, [W14], [W14]
14873:                 CntMixedModeMax=Tm;
00EBCC  78021E     MOV [W14], W4
00EBCE  89FFE4     MOV W4, CntMixedModeMax
14874:             
14875:               
14876:                 Tm=FlashMass[66];
00EBD0  22B224     MOV #0x2B22, W4
00EBD2  784214     MOV.B [W4], W4
00EBD4  FB8204     ZE W4, W4
00EBD6  780F04     MOV W4, [W14]
14877:                 Tm=Tm<<8;
00EBD8  78021E     MOV [W14], W4
00EBDA  DD2248     SL W4, #8, W4
00EBDC  780F04     MOV W4, [W14]
14878:                 Tm=Tm+FlashMass[65];
00EBDE  22B214     MOV #0x2B21, W4
00EBE0  784214     MOV.B [W4], W4
00EBE2  FB8204     ZE W4, W4
00EBE4  420F1E     ADD W4, [W14], [W14]
14879:                 MixedModeLevelOn=Tm;
00EBE6  78021E     MOV [W14], W4
00EBE8  89FFC4     MOV W4, MixedModeLevelOn
14880:             
14881:               
14882:             
14883:                 SpeedLimit2=FlashMass[67];
00EBEA  22B234     MOV #0x2B23, W4
00EBEC  784214     MOV.B [W4], W4
00EBEE  230205     MOV #0x3020, W5
00EBF0  784A84     MOV.B W4, [W5]
14884:             
14885:                 SpeedLimit3=FlashMass[68];
00EBF2  22B244     MOV #0x2B24, W4
00EBF4  784214     MOV.B [W4], W4
00EBF6  230215     MOV #0x3021, W5
00EBF8  784A84     MOV.B W4, [W5]
14886:             
14887:                 I_Curr=(float)FlashMass[69];
00EBFA  22B254     MOV #0x2B25, W4
00EBFC  784214     MOV.B [W4], W4
00EBFE  FB8204     ZE W4, W4
00EC00  200005     MOV #0x0, W5
00EC02  BE0004     MOV.D W4, W0
00EC04  022582     CALL ___floatunsisf
00EC06  000000     NOP
00EC08  BE0200     MOV.D W0, W4
00EC0A  88B534     MOV W4, I_Curr
00EC0C  88B545     MOV W5, 0x16A8
14888:                 I_Curr=I_Curr/100;
00EC0E  80B534     MOV I_Curr, W4
00EC10  80B545     MOV 0x16A8, W5
00EC12  200002     MOV #0x0, W2
00EC14  242C83     MOV #0x42C8, W3
00EC16  BE0004     MOV.D W4, W0
00EC18  02245A     CALL ___divsf3
00EC1A  000000     NOP
00EC1C  BE0200     MOV.D W0, W4
00EC1E  88B534     MOV W4, I_Curr
00EC20  88B545     MOV W5, 0x16A8
14889:                 
14890:             
14891:             
14892:                 Tm=FlashMass[71];
00EC22  22B274     MOV #0x2B27, W4
00EC24  784214     MOV.B [W4], W4
00EC26  FB8204     ZE W4, W4
00EC28  780F04     MOV W4, [W14]
14893:                 Tm=Tm<<8;
00EC2A  78021E     MOV [W14], W4
00EC2C  DD2248     SL W4, #8, W4
00EC2E  780F04     MOV W4, [W14]
14894:                 Tm=Tm+FlashMass[70];
00EC30  22B264     MOV #0x2B26, W4
00EC32  784214     MOV.B [W4], W4
00EC34  FB8204     ZE W4, W4
00EC36  420F1E     ADD W4, [W14], [W14]
14895:                 CurrMixed=Tm;
00EC38  78021E     MOV [W14], W4
00EC3A  89FFF4     MOV W4, CurrMixed
14896:             
14897:               
14898:                 Tm=FlashMass[73];
00EC3C  22B294     MOV #0x2B29, W4
00EC3E  784214     MOV.B [W4], W4
00EC40  FB8204     ZE W4, W4
00EC42  780F04     MOV W4, [W14]
14899:                 Tm=Tm<<8;
00EC44  78021E     MOV [W14], W4
00EC46  DD2248     SL W4, #8, W4
00EC48  780F04     MOV W4, [W14]
14900:                 Tm=Tm+FlashMass[72];
00EC4A  22B284     MOV #0x2B28, W4
00EC4C  784214     MOV.B [W4], W4
00EC4E  FB8204     ZE W4, W4
00EC50  420F1E     ADD W4, [W14], [W14]
14901:                 KpMax=(float)Tm;
00EC52  78021E     MOV [W14], W4
00EC54  DEA2CF     ASR W4, #15, W5
00EC56  BE0004     MOV.D W4, W0
00EC58  02257C     CALL ___floatsisf
00EC5A  000000     NOP
00EC5C  BE0200     MOV.D W0, W4
00EC5E  889D24     MOV W4, KpMax
00EC60  889D35     MOV W5, 0x13A6
14902:             
14903:             
14904:             
14905:                 SensorllessSpdThreshold=FlashMass[74];
00EC62  22B2A4     MOV #0x2B2A, W4
00EC64  784214     MOV.B [W4], W4
00EC66  2140B5     MOV #0x140B, W5
00EC68  784A84     MOV.B W4, [W5]
14906:               
14907:             
14908:                 SpdKpMax=FlashMass[75];
00EC6A  22B2B4     MOV #0x2B2B, W4
00EC6C  784214     MOV.B [W4], W4
00EC6E  2124E5     MOV #0x124E, W5
00EC70  784A84     MOV.B W4, [W5]
14909:             
14910:                 Tm=FlashMass[77];
00EC72  22B2D4     MOV #0x2B2D, W4
00EC74  784214     MOV.B [W4], W4
00EC76  FB8204     ZE W4, W4
00EC78  780F04     MOV W4, [W14]
14911:                 Tm=Tm<<8;
00EC7A  78021E     MOV [W14], W4
00EC7C  DD2248     SL W4, #8, W4
00EC7E  780F04     MOV W4, [W14]
14912:                 Tm=Tm+FlashMass[76];
00EC80  22B2C4     MOV #0x2B2C, W4
00EC82  784214     MOV.B [W4], W4
00EC84  FB8204     ZE W4, W4
00EC86  420F1E     ADD W4, [W14], [W14]
14913:                 MixedModeLevelOff=Tm;
00EC88  78021E     MOV [W14], W4
00EC8A  89FFD4     MOV W4, MixedModeLevelOff
14914:             
14915:                 Tm=FlashMass[79];
00EC8C  22B2F4     MOV #0x2B2F, W4
00EC8E  784214     MOV.B [W4], W4
00EC90  FB8204     ZE W4, W4
00EC92  780F04     MOV W4, [W14]
14916:                 Tm=Tm<<8;
00EC94  78021E     MOV [W14], W4
00EC96  DD2248     SL W4, #8, W4
00EC98  780F04     MOV W4, [W14]
14917:                 Tm=Tm+FlashMass[78];
00EC9A  22B2E4     MOV #0x2B2E, W4
00EC9C  784214     MOV.B [W4], W4
00EC9E  FB8204     ZE W4, W4
00ECA0  420F1E     ADD W4, [W14], [W14]
14918:                 KpCurr=Tm;
00ECA2  78021E     MOV [W14], W4
00ECA4  DEA2CF     ASR W4, #15, W5
00ECA6  BE0004     MOV.D W4, W0
00ECA8  02257C     CALL ___floatsisf
00ECAA  000000     NOP
00ECAC  BE0200     MOV.D W0, W4
00ECAE  89F464     MOV W4, KpCurr
00ECB0  89F475     MOV W5, 0x3E8E
14919:                 KpCurr=KpCurr/100;
00ECB2  81F464     MOV KpCurr, W4
00ECB4  81F475     MOV 0x3E8E, W5
00ECB6  200002     MOV #0x0, W2
00ECB8  242C83     MOV #0x42C8, W3
00ECBA  BE0004     MOV.D W4, W0
00ECBC  02245A     CALL ___divsf3
00ECBE  000000     NOP
00ECC0  BE0200     MOV.D W0, W4
00ECC2  89F464     MOV W4, KpCurr
00ECC4  89F475     MOV W5, 0x3E8E
14920:             
14921:                 Tm=FlashMass[81];
00ECC6  22B314     MOV #0x2B31, W4
00ECC8  784214     MOV.B [W4], W4
00ECCA  FB8204     ZE W4, W4
00ECCC  780F04     MOV W4, [W14]
14922:                 Tm=Tm<<8;
00ECCE  78021E     MOV [W14], W4
00ECD0  DD2248     SL W4, #8, W4
00ECD2  780F04     MOV W4, [W14]
14923:                 Tm=Tm+FlashMass[80];
00ECD4  22B304     MOV #0x2B30, W4
00ECD6  784214     MOV.B [W4], W4
00ECD8  FB8204     ZE W4, W4
00ECDA  420F1E     ADD W4, [W14], [W14]
14924:                 Ki_PWM_Mode=Tm;
00ECDC  78021E     MOV [W14], W4
00ECDE  DEA2CF     ASR W4, #15, W5
00ECE0  BE0004     MOV.D W4, W0
00ECE2  02257C     CALL ___floatsisf
00ECE4  000000     NOP
00ECE6  BE0200     MOV.D W0, W4
00ECE8  8982A4     MOV W4, Ki_PWM_Mode
00ECEA  8982B5     MOV W5, 0x3056
14925:                 Ki_PWM_Mode=Ki_PWM_Mode/10000;
00ECEC  8182A4     MOV Ki_PWM_Mode, W4
00ECEE  8182B5     MOV 0x3056, W5
00ECF0  240002     MOV #0x4000, W2
00ECF2  2461C3     MOV #0x461C, W3
00ECF4  BE0004     MOV.D W4, W0
00ECF6  02245A     CALL ___divsf3
00ECF8  000000     NOP
00ECFA  BE0200     MOV.D W0, W4
00ECFC  8982A4     MOV W4, Ki_PWM_Mode
00ECFE  8982B5     MOV W5, 0x3056
14926:             
14927:                 P_U=FlashMass[82];
00ED00  22B324     MOV #0x2B32, W4
00ED02  784214     MOV.B [W4], W4
00ED04  216A05     MOV #0x16A0, W5
00ED06  784A84     MOV.B W4, [W5]
14928:                 I_U=FlashMass[83];
00ED08  22B334     MOV #0x2B33, W4
00ED0A  784214     MOV.B [W4], W4
00ED0C  216A15     MOV #0x16A1, W5
00ED0E  784A84     MOV.B W4, [W5]
14929:             
14930:             
14931:                 Tm=FlashMass[85];
00ED10  22B354     MOV #0x2B35, W4
00ED12  784214     MOV.B [W4], W4
00ED14  FB8204     ZE W4, W4
00ED16  780F04     MOV W4, [W14]
14932:                 Tm=Tm<<8;
00ED18  78021E     MOV [W14], W4
00ED1A  DD2248     SL W4, #8, W4
00ED1C  780F04     MOV W4, [W14]
14933:                 Tm=Tm+FlashMass[84];
00ED1E  22B344     MOV #0x2B34, W4
00ED20  784214     MOV.B [W4], W4
00ED22  FB8204     ZE W4, W4
00ED24  420F1E     ADD W4, [W14], [W14]
14934:                 KpWheelingMem=Tm;
00ED26  78021E     MOV [W14], W4
00ED28  DEA2CF     ASR W4, #15, W5
00ED2A  BE0004     MOV.D W4, W0
00ED2C  02257C     CALL ___floatsisf
00ED2E  000000     NOP
00ED30  BE0200     MOV.D W0, W4
00ED32  889D44     MOV W4, KpWheelingMem
00ED34  889D55     MOV W5, 0x13AA
14935:                 KpMustBe=KpWheelingMem;
00ED36  809D44     MOV KpWheelingMem, W4
00ED38  809D55     MOV 0x13AA, W5
00ED3A  889BC4     MOV W4, KpMustBe
00ED3C  889BD5     MOV W5, 0x137A
14936:                 SetKpMustBe_UP();
00ED3E  0723C0     RCALL SetKpMustBe_UP
14937:             
14938:             
14939:             
14940:                 Tm=FlashMass[87];
00ED40  22B374     MOV #0x2B37, W4
00ED42  784214     MOV.B [W4], W4
00ED44  FB8204     ZE W4, W4
00ED46  780F04     MOV W4, [W14]
14941:                 Tm=Tm<<8;
00ED48  78021E     MOV [W14], W4
00ED4A  DD2248     SL W4, #8, W4
00ED4C  780F04     MOV W4, [W14]
14942:                 Tm=Tm+FlashMass[86];
00ED4E  22B364     MOV #0x2B36, W4
00ED50  784214     MOV.B [W4], W4
00ED52  FB8204     ZE W4, W4
00ED54  420F1E     ADD W4, [W14], [W14]
14943:                 KiWheelingMem=Tm;
00ED56  78021E     MOV [W14], W4
00ED58  DEA2CF     ASR W4, #15, W5
00ED5A  BE0004     MOV.D W4, W0
00ED5C  02257C     CALL ___floatsisf
00ED5E  000000     NOP
00ED60  BE0200     MOV.D W0, W4
00ED62  889B64     MOV W4, KiWheelingMem
00ED64  889B75     MOV W5, 0x136E
14944:                 KiWheelingMem=KiWheelingMem/1000;
00ED66  809B64     MOV KiWheelingMem, W4
00ED68  809B75     MOV 0x136E, W5
00ED6A  200002     MOV #0x0, W2
00ED6C  2447A3     MOV #0x447A, W3
00ED6E  BE0004     MOV.D W4, W0
00ED70  02245A     CALL ___divsf3
00ED72  000000     NOP
00ED74  BE0200     MOV.D W0, W4
00ED76  889B64     MOV W4, KiWheelingMem
00ED78  889B75     MOV W5, 0x136E
14945:                 KiMustBe=KiWheelingMem;
00ED7A  809B64     MOV KiWheelingMem, W4
00ED7C  809B75     MOV 0x136E, W5
00ED7E  889B24     MOV W4, KiMustBe
00ED80  889B35     MOV W5, 0x1366
14946:                 SetKi_UP();
00ED82  0723E2     RCALL SetKi_UP
14947:             
14948:                 
14949:                 Tm=FlashMass[89];
00ED84  22B394     MOV #0x2B39, W4
00ED86  784214     MOV.B [W4], W4
00ED88  FB8204     ZE W4, W4
00ED8A  780F04     MOV W4, [W14]
14950:                 Tm=Tm<<8;
00ED8C  78021E     MOV [W14], W4
00ED8E  DD2248     SL W4, #8, W4
00ED90  780F04     MOV W4, [W14]
14951:                 Tm=Tm+FlashMass[88];
00ED92  22B384     MOV #0x2B38, W4
00ED94  784214     MOV.B [W4], W4
00ED96  FB8204     ZE W4, W4
00ED98  420F1E     ADD W4, [W14], [W14]
14952:                 TiltZadWheeling=((float)Tm)/10;
00ED9A  78021E     MOV [W14], W4
00ED9C  DEA2CF     ASR W4, #15, W5
00ED9E  BE0004     MOV.D W4, W0
00EDA0  02257C     CALL ___floatsisf
00EDA2  000000     NOP
00EDA4  BE0200     MOV.D W0, W4
00EDA6  200002     MOV #0x0, W2
00EDA8  241203     MOV #0x4120, W3
00EDAA  BE0004     MOV.D W4, W0
00EDAC  02245A     CALL ___divsf3
00EDAE  000000     NOP
00EDB0  BE0200     MOV.D W0, W4
00EDB2  895694     MOV W4, TiltZadWheeling
00EDB4  8956A5     MOV W5, 0x2AD4
14953:                 TiltZadTmp=TiltZadWheeling;
00EDB6  815694     MOV TiltZadWheeling, W4
00EDB8  8156A5     MOV 0x2AD4, W5
00EDBA  895614     MOV W4, TiltZadTmp
00EDBC  895625     MOV W5, 0x2AC4
14954:             
14955:                 Tm=FlashMass[91];
00EDBE  22B3B4     MOV #0x2B3B, W4
00EDC0  784214     MOV.B [W4], W4
00EDC2  FB8204     ZE W4, W4
00EDC4  780F04     MOV W4, [W14]
14956:                 Tm=Tm<<8;
00EDC6  78021E     MOV [W14], W4
00EDC8  DD2248     SL W4, #8, W4
00EDCA  780F04     MOV W4, [W14]
14957:                 Tm=Tm+FlashMass[90];
00EDCC  22B3A4     MOV #0x2B3A, W4
00EDCE  784214     MOV.B [W4], W4
00EDD0  FB8204     ZE W4, W4
00EDD2  420F1E     ADD W4, [W14], [W14]
14958:                 MAX_PWM_MEM=Tm;
00EDD4  78021E     MOV [W14], W4
00EDD6  889984     MOV W4, MAX_PWM_MEM
14959:             
14960:             
14961:                 Tm=FlashMass[93];
00EDD8  22B3D4     MOV #0x2B3D, W4
00EDDA  784214     MOV.B [W4], W4
00EDDC  FB8204     ZE W4, W4
00EDDE  780F04     MOV W4, [W14]
14962:                 Tm=Tm<<8;
00EDE0  78021E     MOV [W14], W4
00EDE2  DD2248     SL W4, #8, W4
00EDE4  780F04     MOV W4, [W14]
14963:                 Tm=Tm+FlashMass[92];
00EDE6  22B3C4     MOV #0x2B3C, W4
00EDE8  784214     MOV.B [W4], W4
00EDEA  FB8204     ZE W4, W4
00EDEC  420F1E     ADD W4, [W14], [W14]
14964:                 KiTemperIN=Tm;
00EDEE  78021E     MOV [W14], W4
00EDF0  DEA2CF     ASR W4, #15, W5
00EDF2  BE0004     MOV.D W4, W0
00EDF4  02257C     CALL ___floatsisf
00EDF6  000000     NOP
00EDF8  BE0200     MOV.D W0, W4
00EDFA  8A0314     MOV W4, KiTemperIN
00EDFC  8A0325     MOV W5, 0x4064
14965:                 KiTemperIN=KiTemperIN/100;
00EDFE  820314     MOV KiTemperIN, W4
00EE00  820325     MOV 0x4064, W5
00EE02  200002     MOV #0x0, W2
00EE04  242C83     MOV #0x42C8, W3
00EE06  BE0004     MOV.D W4, W0
00EE08  02245A     CALL ___divsf3
00EE0A  000000     NOP
00EE0C  BE0200     MOV.D W0, W4
00EE0E  8A0314     MOV W4, KiTemperIN
00EE10  8A0325     MOV W5, 0x4064
14966:             
14967:                 Tm=FlashMass[95];
00EE12  22B3F4     MOV #0x2B3F, W4
00EE14  784214     MOV.B [W4], W4
00EE16  FB8204     ZE W4, W4
00EE18  780F04     MOV W4, [W14]
14968:                 Tm=Tm<<8;
00EE1A  78021E     MOV [W14], W4
00EE1C  DD2248     SL W4, #8, W4
00EE1E  780F04     MOV W4, [W14]
14969:                 Tm=Tm+FlashMass[94];
00EE20  22B3E4     MOV #0x2B3E, W4
00EE22  784214     MOV.B [W4], W4
00EE24  FB8204     ZE W4, W4
00EE26  420F1E     ADD W4, [W14], [W14]
14970:                 KpTemperIN=Tm;
00EE28  78021E     MOV [W14], W4
00EE2A  DEA2CF     ASR W4, #15, W5
00EE2C  BE0004     MOV.D W4, W0
00EE2E  02257C     CALL ___floatsisf
00EE30  000000     NOP
00EE32  BE0200     MOV.D W0, W4
00EE34  8A0334     MOV W4, KpTemperIN
00EE36  8A0345     MOV W5, 0x4068
14971:             
14972:                 Tm=FlashMass[97];
00EE38  22B414     MOV #0x2B41, W4
00EE3A  784214     MOV.B [W4], W4
00EE3C  FB8204     ZE W4, W4
00EE3E  780F04     MOV W4, [W14]
14973:                 Tm=Tm<<8;
00EE40  78021E     MOV [W14], W4
00EE42  DD2248     SL W4, #8, W4
00EE44  780F04     MOV W4, [W14]
14974:                 Tm=Tm+FlashMass[96];
00EE46  22B404     MOV #0x2B40, W4
00EE48  784214     MOV.B [W4], W4
00EE4A  FB8204     ZE W4, W4
00EE4C  420F1E     ADD W4, [W14], [W14]
14975:                 KpTemperOUT=Tm;
00EE4E  78021E     MOV [W14], W4
00EE50  DEA2CF     ASR W4, #15, W5
00EE52  BE0004     MOV.D W4, W0
00EE54  02257C     CALL ___floatsisf
00EE56  000000     NOP
00EE58  BE0200     MOV.D W0, W4
00EE5A  8A03D4     MOV W4, KpTemperOUT
00EE5C  8A03E5     MOV W5, 0x407C
14976:             
14977:             
14978:             //OneTwoLeg
14979:                 Tm=FlashMass[99];
00EE5E  22B434     MOV #0x2B43, W4
00EE60  784214     MOV.B [W4], W4
00EE62  FB8204     ZE W4, W4
00EE64  780F04     MOV W4, [W14]
14980:                 Tm=Tm<<8;
00EE66  78021E     MOV [W14], W4
00EE68  DD2248     SL W4, #8, W4
00EE6A  780F04     MOV W4, [W14]
14981:                 Tm=Tm+FlashMass[98];
00EE6C  22B424     MOV #0x2B42, W4
00EE6E  784214     MOV.B [W4], W4
00EE70  FB8204     ZE W4, W4
00EE72  420F1E     ADD W4, [W14], [W14]
14982:                 KiTemperOUT=Tm;
00EE74  78021E     MOV [W14], W4
00EE76  DEA2CF     ASR W4, #15, W5
00EE78  BE0004     MOV.D W4, W0
00EE7A  02257C     CALL ___floatsisf
00EE7C  000000     NOP
00EE7E  BE0200     MOV.D W0, W4
00EE80  8A03B4     MOV W4, KiTemperOUT
00EE82  8A03C5     MOV W5, 0x4078
14983:                 KiTemperOUT=KiTemperOUT/100;
00EE84  8203B4     MOV KiTemperOUT, W4
00EE86  8203C5     MOV 0x4078, W5
00EE88  200002     MOV #0x0, W2
00EE8A  242C83     MOV #0x42C8, W3
00EE8C  BE0004     MOV.D W4, W0
00EE8E  02245A     CALL ___divsf3
00EE90  000000     NOP
00EE92  BE0200     MOV.D W0, W4
00EE94  8A03B4     MOV W4, KiTemperOUT
00EE96  8A03C5     MOV W5, 0x4078
14984:             
14985:                 
14986:                 
14987:                 
14988:                 MAX_PWM_Revers=FlashMass[100];
00EE98  22B444     MOV #0x2B44, W4
00EE9A  784214     MOV.B [W4], W4
00EE9C  FB8204     ZE W4, W4
00EE9E  8899A4     MOV W4, MAX_PWM_Revers
14989:                 MaxSpdRevers=FlashMass[101];
00EEA0  22B454     MOV #0x2B45, W4
00EEA2  784214     MOV.B [W4], W4
00EEA4  230C65     MOV #0x30C6, W5
00EEA6  784A84     MOV.B W4, [W5]
14990:             
14991:             
14992:                 
14993:                 
14994:                 MixedModeSlowSpeed=FlashMass[102];
00EEA8  22B464     MOV #0x2B46, W4
00EEAA  784214     MOV.B [W4], W4
00EEAC  236EA5     MOV #0x36EA, W5
00EEAE  784A84     MOV.B W4, [W5]
14995:                 HallDelay1MaxSPD_B=FlashMass[103];
00EEB0  22B474     MOV #0x2B47, W4
00EEB2  784214     MOV.B [W4], W4
00EEB4  237E45     MOV #0x37E4, W5
00EEB6  784A84     MOV.B W4, [W5]
14996:                 
14997:                 Tm=FlashMass[105];
00EEB8  22B494     MOV #0x2B49, W4
00EEBA  784214     MOV.B [W4], W4
00EEBC  FB8204     ZE W4, W4
00EEBE  780F04     MOV W4, [W14]
14998:                 Tm=Tm<<8;
00EEC0  78021E     MOV [W14], W4
00EEC2  DD2248     SL W4, #8, W4
00EEC4  780F04     MOV W4, [W14]
14999:                 Tm=Tm+FlashMass[104];
00EEC6  22B484     MOV #0x2B48, W4
00EEC8  784214     MOV.B [W4], W4
00EECA  FB8204     ZE W4, W4
00EECC  420F1E     ADD W4, [W14], [W14]
15000:                 StatFlgs3.StatusFlags=Tm;
00EECE  78021E     MOV [W14], W4
00EED0  889774     MOV W4, StatFlgs3
15001:                 
15002:                 StringPINLenghtOptions=FlashMass[106];
00EED2  22B4A4     MOV #0x2B4A, W4
00EED4  784214     MOV.B [W4], W4
00EED6  230AC5     MOV #0x30AC, W5
00EED8  784A84     MOV.B W4, [W5]
15003:                 PinCodeMassOptions[0]=FlashMass[107];
00EEDA  22B4B4     MOV #0x2B4B, W4
00EEDC  784214     MOV.B [W4], W4
00EEDE  217555     MOV #0x1755, W5
00EEE0  784A84     MOV.B W4, [W5]
15004:             
15005:             #if !defined BLE
15006:                 StringPINLenghtOptions=0;
15007:             #endif
15008:             
15009:                 Tm=FlashMass[109];
00EEE2  22B4D4     MOV #0x2B4D, W4
00EEE4  784214     MOV.B [W4], W4
00EEE6  FB8204     ZE W4, W4
00EEE8  780F04     MOV W4, [W14]
15010:                 Tm=Tm<<8;
00EEEA  78021E     MOV [W14], W4
00EEEC  DD2248     SL W4, #8, W4
00EEEE  780F04     MOV W4, [W14]
15011:                 Tm=Tm+FlashMass[108];
00EEF0  22B4C4     MOV #0x2B4C, W4
00EEF2  784214     MOV.B [W4], W4
00EEF4  FB8204     ZE W4, W4
00EEF6  420F1E     ADD W4, [W14], [W14]
15012:                 AutoPID_On_CntConst=Tm;
00EEF8  78021E     MOV [W14], W4
00EEFA  8A18B4     MOV W4, AutoPID_On_CntConst
15013:             
15014:                 AutoPID_On_PWM=FlashMass[110];
00EEFC  22B4E4     MOV #0x2B4E, W4
00EEFE  784214     MOV.B [W4], W4
00EF00  240BA5     MOV #0x40BA, W5
00EF02  784A84     MOV.B W4, [W5]
15015:                 AutoPID_On_Speed=FlashMass[111];
00EF04  22B4F4     MOV #0x2B4F, W4
00EF06  784214     MOV.B [W4], W4
00EF08  240BB5     MOV #0x40BB, W5
00EF0A  784A84     MOV.B W4, [W5]
15016:             
15017:                 Tm=FlashMass[113];
00EF0C  22B514     MOV #0x2B51, W4
00EF0E  784214     MOV.B [W4], W4
00EF10  FB8204     ZE W4, W4
00EF12  780F04     MOV W4, [W14]
15018:                 Tm=Tm<<8;
00EF14  78021E     MOV [W14], W4
00EF16  DD2248     SL W4, #8, W4
00EF18  780F04     MOV W4, [W14]
15019:                 Tm=Tm+FlashMass[112];
00EF1A  22B504     MOV #0x2B50, W4
00EF1C  784214     MOV.B [W4], W4
00EF1E  FB8204     ZE W4, W4
00EF20  420F1E     ADD W4, [W14], [W14]
15020:                 Diametr1=Tm;
00EF22  78021E     MOV [W14], W4
00EF24  8A1434     MOV W4, Diametr1
15021:             
15022:                 Tm=FlashMass[115];
00EF26  22B534     MOV #0x2B53, W4
00EF28  784214     MOV.B [W4], W4
00EF2A  FB8204     ZE W4, W4
00EF2C  780F04     MOV W4, [W14]
15023:                 Tm=Tm<<8;
00EF2E  78021E     MOV [W14], W4
00EF30  DD2248     SL W4, #8, W4
00EF32  780F04     MOV W4, [W14]
15024:                 Tm=Tm+FlashMass[114];
00EF34  22B524     MOV #0x2B52, W4
00EF36  784214     MOV.B [W4], W4
00EF38  FB8204     ZE W4, W4
00EF3A  420F1E     ADD W4, [W14], [W14]
15025:                 PhasesPerRev1=Tm;
00EF3C  78021E     MOV [W14], W4
00EF3E  8A1424     MOV W4, PhasesPerRev1
15026:             
15027:             CmImp1_t=(float)Diametr1*0.314159/(float)PhasesPerRev1;
00EF40  821434     MOV Diametr1, W4
00EF42  200005     MOV #0x0, W5
00EF44  BE0004     MOV.D W4, W0
00EF46  022582     CALL ___floatunsisf
00EF48  000000     NOP
00EF4A  BE0200     MOV.D W0, W4
00EF4C  2D9732     MOV #0xD973, W2
00EF4E  23EA03     MOV #0x3EA0, W3
00EF50  BE0004     MOV.D W4, W0
00EF52  022630     CALL ___mulsf3
00EF54  000000     NOP
00EF56  BE0200     MOV.D W0, W4
00EF58  BE0404     MOV.D W4, W8
00EF5A  821424     MOV PhasesPerRev1, W4
00EF5C  200005     MOV #0x0, W5
00EF5E  BE0004     MOV.D W4, W0
00EF60  022582     CALL ___floatunsisf
00EF62  000000     NOP
00EF64  BE0200     MOV.D W0, W4
00EF66  BE0104     MOV.D W4, W2
00EF68  BE0008     MOV.D W8, W0
00EF6A  02245A     CALL ___divsf3
00EF6C  000000     NOP
00EF6E  BE0200     MOV.D W0, W4
00EF70  897E04     MOV W4, CmImp1_t
00EF72  897E15     MOV W5, 0x2FC2
15028:             ImpToKmH1_t=CmImp1_t*0.36;
00EF74  817E04     MOV CmImp1_t, W4
00EF76  817E15     MOV 0x2FC2, W5
00EF78  251EC2     MOV #0x51EC, W2
00EF7A  23EB83     MOV #0x3EB8, W3
00EF7C  BE0004     MOV.D W4, W0
00EF7E  022630     CALL ___mulsf3
00EF80  000000     NOP
00EF82  BE0200     MOV.D W0, W4
00EF84  897E24     MOV W4, ImpToKmH1_t
00EF86  897E35     MOV W5, 0x2FC6
15029:             
15030:             
15031:             
15032:             
15033:             
15034:                 Tm=FlashMass[117];
00EF88  22B554     MOV #0x2B55, W4
00EF8A  784214     MOV.B [W4], W4
00EF8C  FB8204     ZE W4, W4
00EF8E  780F04     MOV W4, [W14]
15035:                 Tm=Tm<<8;
00EF90  78021E     MOV [W14], W4
00EF92  DD2248     SL W4, #8, W4
00EF94  780F04     MOV W4, [W14]
15036:                 UBatHiMem=Tm+FlashMass[116];
00EF96  22B544     MOV #0x2B54, W4
00EF98  784214     MOV.B [W4], W4
00EF9A  FB8204     ZE W4, W4
00EF9C  42021E     ADD W4, [W14], W4
00EF9E  898354     MOV W4, UBatHiMem
15037:                 UBatHi=(unsigned int)((float)UBatHiMem*(float)38.388);
00EFA0  818354     MOV UBatHiMem, W4
00EFA2  200005     MOV #0x0, W5
00EFA4  BE0004     MOV.D W4, W0
00EFA6  022582     CALL ___floatunsisf
00EFA8  000000     NOP
00EFAA  BE0200     MOV.D W0, W4
00EFAC  28D502     MOV #0x8D50, W2
00EFAE  242193     MOV #0x4219, W3
00EFB0  BE0004     MOV.D W4, W0
00EFB2  022630     CALL ___mulsf3
00EFB4  000000     NOP
00EFB6  BE0200     MOV.D W0, W4
00EFB8  BE0004     MOV.D W4, W0
00EFBA  022546     CALL ___fixunssfsi
00EFBC  000000     NOP
00EFBE  BE0200     MOV.D W0, W4
00EFC0  780204     MOV W4, W4
00EFC2  898364     MOV W4, UBatHi
15038:             
15039:             
15040:             
15041:             //Freshman
15042:                 Tm=FlashMass[119];
00EFC4  22B574     MOV #0x2B57, W4
00EFC6  784214     MOV.B [W4], W4
00EFC8  FB8204     ZE W4, W4
00EFCA  780F04     MOV W4, [W14]
15043:                 Tm=Tm<<8;
00EFCC  78021E     MOV [W14], W4
00EFCE  DD2248     SL W4, #8, W4
00EFD0  780F04     MOV W4, [W14]
15044:                 Tm=Tm+FlashMass[118];
00EFD2  22B564     MOV #0x2B56, W4
00EFD4  784214     MOV.B [W4], W4
00EFD6  FB8204     ZE W4, W4
00EFD8  420F1E     ADD W4, [W14], [W14]
15045:                 BreakThresholdDn=Tm;
00EFDA  78021E     MOV [W14], W4
00EFDC  8894C4     MOV W4, BreakThresholdDn
15046:             
15047:                 Tm=FlashMass[121];
00EFDE  22B594     MOV #0x2B59, W4
00EFE0  784214     MOV.B [W4], W4
00EFE2  FB8204     ZE W4, W4
00EFE4  780F04     MOV W4, [W14]
15048:                 Tm=Tm<<8;
00EFE6  78021E     MOV [W14], W4
00EFE8  DD2248     SL W4, #8, W4
00EFEA  780F04     MOV W4, [W14]
15049:                 Tm=Tm+FlashMass[120];
00EFEC  22B584     MOV #0x2B58, W4
00EFEE  784214     MOV.B [W4], W4
00EFF0  FB8204     ZE W4, W4
00EFF2  420F1E     ADD W4, [W14], [W14]
15050:                 BreakThresholdUp=Tm;
00EFF4  78021E     MOV [W14], W4
00EFF6  8894B4     MOV W4, BreakThresholdUp
15051:             
15052:                 Tm=FlashMass[123];
00EFF8  22B5B4     MOV #0x2B5B, W4
00EFFA  784214     MOV.B [W4], W4
00EFFC  FB8204     ZE W4, W4
00EFFE  780F04     MOV W4, [W14]
15053:                 Tm=Tm<<8;
00F000  78021E     MOV [W14], W4
00F002  DD2248     SL W4, #8, W4
00F004  780F04     MOV W4, [W14]
15054:                 Tm=Tm+FlashMass[122];
00F006  22B5A4     MOV #0x2B5A, W4
00F008  784214     MOV.B [W4], W4
00F00A  FB8204     ZE W4, W4
00F00C  420F1E     ADD W4, [W14], [W14]
15055:                 KTemperatureSPDControl=((float)Tm)/1000;
00F00E  78021E     MOV [W14], W4
00F010  DEA2CF     ASR W4, #15, W5
00F012  BE0004     MOV.D W4, W0
00F014  02257C     CALL ___floatsisf
00F016  000000     NOP
00F018  BE0200     MOV.D W0, W4
00F01A  200002     MOV #0x0, W2
00F01C  2447A3     MOV #0x447A, W3
00F01E  BE0004     MOV.D W4, W0
00F020  02245A     CALL ___divsf3
00F022  000000     NOP
00F024  BE0200     MOV.D W0, W4
00F026  89B794     MOV W4, KTemperatureSPDControl
00F028  89B7A5     MOV W5, 0x36F4
15056:             
15057:             
15058:                 Profile=FlashMass[124];
00F02A  22B5C4     MOV #0x2B5C, W4
00F02C  784214     MOV.B [W4], W4
00F02E  237E25     MOV #0x37E2, W5
00F030  784A84     MOV.B W4, [W5]
15059:                 _3psnSwitchBtNotPressed=FlashMass[125];
00F032  22B5D4     MOV #0x2B5D, W4
00F034  784214     MOV.B [W4], W4
00F036  214045     MOV #0x1404, W5
00F038  784A84     MOV.B W4, [W5]
15060:             
15061:             
15062:                 _3psnSwitchBt4=FlashMass[127];
00F03A  22B5F4     MOV #0x2B5F, W4
00F03C  784214     MOV.B [W4], W4
00F03E  214065     MOV #0x1406, W5
00F040  784A84     MOV.B W4, [W5]
15063:                 _3psnSwitchBt3=FlashMass[126];
00F042  22B5E4     MOV #0x2B5E, W4
00F044  784214     MOV.B [W4], W4
00F046  214055     MOV #0x1405, W5
00F048  784A84     MOV.B W4, [W5]
15064:             
15065:                 
15066:                 
15067:                 Tm=FlashMass[129];
00F04A  22B614     MOV #0x2B61, W4
00F04C  784214     MOV.B [W4], W4
00F04E  FB8204     ZE W4, W4
00F050  780F04     MOV W4, [W14]
15068:                 Tm=Tm<<8;
00F052  78021E     MOV [W14], W4
00F054  DD2248     SL W4, #8, W4
00F056  780F04     MOV W4, [W14]
15069:                 Tm=Tm+FlashMass[128];
00F058  22B604     MOV #0x2B60, W4
00F05A  784214     MOV.B [W4], W4
00F05C  FB8204     ZE W4, W4
00F05E  420F1E     ADD W4, [W14], [W14]
15070:                 CurrPhaseLimitWork=Tm;
00F060  78021E     MOV [W14], W4
00F062  89F4D4     MOV W4, CurrPhaseLimitWork
15071:             
15072:                 HallDelay1MaxSPD_F=FlashMass[131];
00F064  22B634     MOV #0x2B63, W4
00F066  784214     MOV.B [W4], W4
00F068  237E35     MOV #0x37E3, W5
00F06A  784A84     MOV.B W4, [W5]
15073:                 CurrSensor=FlashMass[130];
00F06C  22B624     MOV #0x2B62, W4
00F06E  784214     MOV.B [W4], W4
00F070  230C75     MOV #0x30C7, W5
00F072  784A84     MOV.B W4, [W5]
15074:                 
15075:             
15076:                 Tm=FlashMass[133];
00F074  22B654     MOV #0x2B65, W4
00F076  784214     MOV.B [W4], W4
00F078  FB8204     ZE W4, W4
00F07A  780F04     MOV W4, [W14]
15077:                 Tm=Tm<<8;
00F07C  78021E     MOV [W14], W4
00F07E  DD2248     SL W4, #8, W4
00F080  780F04     MOV W4, [W14]
15078:                 Tm=Tm+FlashMass[132];
00F082  22B644     MOV #0x2B64, W4
00F084  784214     MOV.B [W4], W4
00F086  FB8204     ZE W4, W4
00F088  420F1E     ADD W4, [W14], [W14]
15079:                 CurrUstSpd0=Tm;
00F08A  78021E     MOV [W14], W4
00F08C  89F4A4     MOV W4, CurrUstSpd0
15080:             
15081:                 Tm=FlashMass[135];
00F08E  22B674     MOV #0x2B67, W4
00F090  784214     MOV.B [W4], W4
00F092  FB8204     ZE W4, W4
00F094  780F04     MOV W4, [W14]
15082:                 Tm=Tm<<8;
00F096  78021E     MOV [W14], W4
00F098  DD2248     SL W4, #8, W4
00F09A  780F04     MOV W4, [W14]
15083:                 Tm=Tm+FlashMass[134];
00F09C  22B664     MOV #0x2B66, W4
00F09E  784214     MOV.B [W4], W4
00F0A0  FB8204     ZE W4, W4
00F0A2  420F1E     ADD W4, [W14], [W14]
15084:                 CurrPhaseLimitSpd0=Tm;
00F0A4  78021E     MOV [W14], W4
00F0A6  89B7B4     MOV W4, CurrPhaseLimitSpd0
15085:             
15086:                 Tm=FlashMass[137];
00F0A8  22B694     MOV #0x2B69, W4
00F0AA  784214     MOV.B [W4], W4
00F0AC  FB8204     ZE W4, W4
00F0AE  780F04     MOV W4, [W14]
15087:                 Tm=Tm<<8;
00F0B0  78021E     MOV [W14], W4
00F0B2  DD2248     SL W4, #8, W4
00F0B4  780F04     MOV W4, [W14]
15088:                 Tm=Tm+FlashMass[136];
00F0B6  22B684     MOV #0x2B68, W4
00F0B8  784214     MOV.B [W4], W4
00F0BA  FB8204     ZE W4, W4
00F0BC  420F1E     ADD W4, [W14], [W14]
15089:                 CurrLimitSpd0=Tm;
00F0BE  78021E     MOV [W14], W4
00F0C0  89B7E4     MOV W4, CurrLimitSpd0
15090:             
15091:             
15092:                 MaxAngleStopBreak=FlashMass[138];
00F0C2  22B6A4     MOV #0x2B6A, W4
00F0C4  784214     MOV.B [W4], W4
00F0C6  236FE5     MOV #0x36FE, W5
00F0C8  784A84     MOV.B W4, [W5]
15093:                 ThrottleTmpChngMem=FlashMass[139];    
00F0CA  22B6B4     MOV #0x2B6B, W4
00F0CC  784214     MOV.B [W4], W4
00F0CE  2329A5     MOV #0x329A, W5
00F0D0  784A84     MOV.B W4, [W5]
15094:             
15095:                 Tm=FlashMass[141];
00F0D2  22B6D4     MOV #0x2B6D, W4
00F0D4  784214     MOV.B [W4], W4
00F0D6  FB8204     ZE W4, W4
00F0D8  780F04     MOV W4, [W14]
15096:                 Tm=Tm<<8;
00F0DA  78021E     MOV [W14], W4
00F0DC  DD2248     SL W4, #8, W4
00F0DE  780F04     MOV W4, [W14]
15097:                 Tm=Tm+FlashMass[140];
00F0E0  22B6C4     MOV #0x2B6C, W4
00F0E2  784214     MOV.B [W4], W4
00F0E4  FB8204     ZE W4, W4
00F0E6  420F1E     ADD W4, [W14], [W14]
15098:                 BeepPauseConstAlm=Tm;
00F0E8  78021E     MOV [W14], W4
00F0EA  898574     MOV W4, BeepPauseConstAlm
15099:             
15100:                 Tm=FlashMass[143];
00F0EC  22B6F4     MOV #0x2B6F, W4
00F0EE  784214     MOV.B [W4], W4
00F0F0  FB8204     ZE W4, W4
00F0F2  780F04     MOV W4, [W14]
15101:                 Tm=Tm<<8;
00F0F4  78021E     MOV [W14], W4
00F0F6  DD2248     SL W4, #8, W4
00F0F8  780F04     MOV W4, [W14]
15102:                 Tm=Tm+FlashMass[142];
00F0FA  22B6E4     MOV #0x2B6E, W4
00F0FC  784214     MOV.B [W4], W4
00F0FE  FB8204     ZE W4, W4
00F100  420F1E     ADD W4, [W14], [W14]
15103:                 BzOnCntSeriaConstAlm=Tm;
00F102  78021E     MOV [W14], W4
00F104  8980C4     MOV W4, BzOnCntSeriaConstAlm
15104:             
15105:                 CntSingleBeepAlm=FlashMass[144];
00F106  22B704     MOV #0x2B70, W4
00F108  784214     MOV.B [W4], W4
00F10A  230AA5     MOV #0x30AA, W5
00F10C  784A84     MOV.B W4, [W5]
15106:                 DiffAlfaConstL=FlashMass[145];
00F10E  22B714     MOV #0x2B71, W4
00F110  784214     MOV.B [W4], W4
00F112  236FF5     MOV #0x36FF, W5
00F114  784A84     MOV.B W4, [W5]
15107:                 DiffAlfaConstH=FlashMass[146];
00F116  22B724     MOV #0x2B72, W4
00F118  784214     MOV.B [W4], W4
00F11A  237005     MOV #0x3700, W5
00F11C  784A84     MOV.B W4, [W5]
15108:             
15109:             
15110:                 Tm=FlashMass[148];
00F11E  22B744     MOV #0x2B74, W4
00F120  784214     MOV.B [W4], W4
00F122  FB8204     ZE W4, W4
00F124  780F04     MOV W4, [W14]
15111:                 Tm=Tm<<8;
00F126  78021E     MOV [W14], W4
00F128  DD2248     SL W4, #8, W4
00F12A  780F04     MOV W4, [W14]
15112:                 Tm=Tm+FlashMass[147];
00F12C  22B734     MOV #0x2B73, W4
00F12E  784214     MOV.B [W4], W4
00F130  FB8204     ZE W4, W4
00F132  420F1E     ADD W4, [W14], [W14]
15113:                 ZeroCurr1=Tm;
00F134  78021E     MOV [W14], W4
00F136  889534     MOV W4, ZeroCurr1
15114:             
15115:             
15116:                 MaxSpd=FlashMass[149];
00F138  22B754     MOV #0x2B75, W4
00F13A  784214     MOV.B [W4], W4
00F13C  230C55     MOV #0x30C5, W5
00F13E  784A84     MOV.B W4, [W5]
15117:             
15118:             
15119:             
15120:                 But5Func=FlashMass[150];
00F140  22B764     MOV #0x2B76, W4
00F142  784214     MOV.B [W4], W4
00F144  240205     MOV #0x4020, W5
00F146  784A84     MOV.B W4, [W5]
15121:                 
15122:             
15123:                 Tm=FlashMass[152];
00F148  22B784     MOV #0x2B78, W4
00F14A  784214     MOV.B [W4], W4
00F14C  FB8204     ZE W4, W4
00F14E  780F04     MOV W4, [W14]
15124:                 Tm=Tm<<8;
00F150  78021E     MOV [W14], W4
00F152  DD2248     SL W4, #8, W4
00F154  780F04     MOV W4, [W14]
15125:                 Tm=Tm+FlashMass[151];
00F156  22B774     MOV #0x2B77, W4
00F158  784214     MOV.B [W4], W4
00F15A  FB8204     ZE W4, W4
00F15C  420F1E     ADD W4, [W14], [W14]
15126:                 Timer1Mem=Tm;
00F15E  78021E     MOV [W14], W4
00F160  89BA04     MOV W4, Timer1Mem
15127:             
15128:             
15129:                 Tm=FlashMass[154];
00F162  22B7A4     MOV #0x2B7A, W4
00F164  784214     MOV.B [W4], W4
00F166  FB8204     ZE W4, W4
00F168  780F04     MOV W4, [W14]
15130:                 Tm=Tm<<8;
00F16A  78021E     MOV [W14], W4
00F16C  DD2248     SL W4, #8, W4
00F16E  780F04     MOV W4, [W14]
15131:                 Tm=Tm+FlashMass[153];
00F170  22B794     MOV #0x2B79, W4
00F172  784214     MOV.B [W4], W4
00F174  FB8204     ZE W4, W4
00F176  420F1E     ADD W4, [W14], [W14]
15132:                 Timer2Mem=Tm;
00F178  78021E     MOV [W14], W4
00F17A  89BA14     MOV W4, Timer2Mem
15133:             
15134:             
15135:                 UseTmr=FlashMass[155];
00F17C  22B7B4     MOV #0x2B7B, W4
00F17E  784214     MOV.B [W4], W4
00F180  2373E5     MOV #0x373E, W5
00F182  784A84     MOV.B W4, [W5]
15136:             
15137:                 Tm=FlashMass[157];
00F184  22B7D4     MOV #0x2B7D, W4
00F186  784214     MOV.B [W4], W4
00F188  FB8204     ZE W4, W4
00F18A  780F04     MOV W4, [W14]
15138:                 Tm=Tm<<8;
00F18C  78021E     MOV [W14], W4
00F18E  DD2248     SL W4, #8, W4
00F190  780F04     MOV W4, [W14]
15139:                 Tm=Tm+FlashMass[156];
00F192  22B7C4     MOV #0x2B7C, W4
00F194  784214     MOV.B [W4], W4
00F196  FB8204     ZE W4, W4
00F198  420F1E     ADD W4, [W14], [W14]
15140:                 SerNumber=Tm;
00F19A  78021E     MOV [W14], W4
00F19C  89BAA4     MOV W4, SerNumber
15141:             
15142:             
15143:             
15144:             
15145:             //OneTwoLeg1
15146:                 Tm=FlashMass[159];
00F19E  22B7F4     MOV #0x2B7F, W4
00F1A0  784214     MOV.B [W4], W4
00F1A2  FB8204     ZE W4, W4
00F1A4  780F04     MOV W4, [W14]
15147:                 Tm=Tm<<8;
00F1A6  78021E     MOV [W14], W4
00F1A8  DD2248     SL W4, #8, W4
00F1AA  780F04     MOV W4, [W14]
15148:                 Tm=Tm+FlashMass[158];
00F1AC  22B7E4     MOV #0x2B7E, W4
00F1AE  784214     MOV.B [W4], W4
00F1B0  FB8204     ZE W4, W4
00F1B2  420F1E     ADD W4, [W14], [W14]
15149:                 SensorLessCurrLimit=Tm;                 
00F1B4  78021E     MOV [W14], W4
00F1B6  88C1B4     MOV W4, SensorLessCurrLimit
15150:             
15151:                 
15152:                 
15153:                 
15154:                 SlowStrtSpd=FlashMass[160];
00F1B8  22B804     MOV #0x2B80, W4
00F1BA  784214     MOV.B [W4], W4
00F1BC  240D05     MOV #0x40D0, W5
00F1BE  784A84     MOV.B W4, [W5]
15155:                 AntiPolicePower=FlashMass[161];
00F1C0  22B814     MOV #0x2B81, W4
00F1C2  784214     MOV.B [W4], W4
00F1C4  240D15     MOV #0x40D1, W5
00F1C6  784A84     MOV.B W4, [W5]
15156:             
15157:                 
15158:             
15159:             
15160:                 Tm=FlashMass[163];
00F1C8  22B834     MOV #0x2B83, W4
00F1CA  784214     MOV.B [W4], W4
00F1CC  FB8204     ZE W4, W4
00F1CE  780F04     MOV W4, [W14]
15161:                 Tm=Tm<<8;
00F1D0  78021E     MOV [W14], W4
00F1D2  DD2248     SL W4, #8, W4
00F1D4  780F04     MOV W4, [W14]
15162:                 Tm=Tm+FlashMass[162];
00F1D6  22B824     MOV #0x2B82, W4
00F1D8  784214     MOV.B [W4], W4
00F1DA  FB8204     ZE W4, W4
00F1DC  420F1E     ADD W4, [W14], [W14]
15163:                 SensorlessCurrUst=Tm;
00F1DE  78021E     MOV [W14], W4
00F1E0  89F4F4     MOV W4, SensorlessCurrUst
15164:             
15165:                 Tm=FlashMass[165];
00F1E2  22B854     MOV #0x2B85, W4
00F1E4  784214     MOV.B [W4], W4
00F1E6  FB8204     ZE W4, W4
00F1E8  780F04     MOV W4, [W14]
15166:                 Tm=Tm<<8;
00F1EA  78021E     MOV [W14], W4
00F1EC  DD2248     SL W4, #8, W4
00F1EE  780F04     MOV W4, [W14]
15167:                 Tm=Tm+FlashMass[164];
00F1F0  22B844     MOV #0x2B84, W4
00F1F2  784214     MOV.B [W4], W4
00F1F4  FB8204     ZE W4, W4
00F1F6  420F1E     ADD W4, [W14], [W14]
15168:                 GyroZFlTurn=Tm;
00F1F8  78021E     MOV [W14], W4
00F1FA  898314     MOV W4, GyroZFlTurn
15169:                 
15170:             
15171:             
15172:                 Tm=FlashMass[167];
00F1FC  22B874     MOV #0x2B87, W4
00F1FE  784214     MOV.B [W4], W4
00F200  FB8204     ZE W4, W4
00F202  780F04     MOV W4, [W14]
15173:                 Tm=Tm<<8;
00F204  78021E     MOV [W14], W4
00F206  DD2248     SL W4, #8, W4
00F208  780F04     MOV W4, [W14]
15174:                 Tm=Tm+FlashMass[166];
00F20A  22B864     MOV #0x2B86, W4
00F20C  784214     MOV.B [W4], W4
00F20E  FB8204     ZE W4, W4
00F210  420F1E     ADD W4, [W14], [W14]
15175:                 Kp_PWM_Mode=Tm;
00F212  78021E     MOV [W14], W4
00F214  DEA2CF     ASR W4, #15, W5
00F216  BE0004     MOV.D W4, W0
00F218  02257C     CALL ___floatsisf
00F21A  000000     NOP
00F21C  BE0200     MOV.D W0, W4
00F21E  89B764     MOV W4, Kp_PWM_Mode
00F220  89B775     MOV W5, 0x36EE
15176:                 Kp_PWM_Mode=Kp_PWM_Mode/100;
00F222  81B764     MOV Kp_PWM_Mode, W4
00F224  81B775     MOV 0x36EE, W5
00F226  200002     MOV #0x0, W2
00F228  242C83     MOV #0x42C8, W3
00F22A  BE0004     MOV.D W4, W0
00F22C  02245A     CALL ___divsf3
00F22E  000000     NOP
00F230  BE0200     MOV.D W0, W4
00F232  89B764     MOV W4, Kp_PWM_Mode
00F234  89B775     MOV W5, 0x36EE
15177:             
15178:                 Tm=FlashMass[169];
00F236  22B894     MOV #0x2B89, W4
00F238  784214     MOV.B [W4], W4
00F23A  FB8204     ZE W4, W4
00F23C  780F04     MOV W4, [W14]
15179:                 Tm=Tm<<8;
00F23E  78021E     MOV [W14], W4
00F240  DD2248     SL W4, #8, W4
00F242  780F04     MOV W4, [W14]
15180:                 Tm=Tm+FlashMass[168];
00F244  22B884     MOV #0x2B88, W4
00F246  784214     MOV.B [W4], W4
00F248  FB8204     ZE W4, W4
00F24A  420F1E     ADD W4, [W14], [W14]
15181:                 Spd0TimerConst=Tm;
00F24C  78021E     MOV [W14], W4
00F24E  8A1484     MOV W4, Spd0TimerConst
15182:             
15183:                 _2WDMode=FlashMass[171];
00F250  22B8B4     MOV #0x2B8B, W4
00F252  784214     MOV.B [W4], W4
00F254  230C95     MOV #0x30C9, W5
00F256  784A84     MOV.B W4, [W5]
15184:                 
15185:                 HallDelayMaxSPD=FlashMass[170];
00F258  22B8A4     MOV #0x2B8A, W4
00F25A  784214     MOV.B [W4], W4
00F25C  237E55     MOV #0x37E5, W5
00F25E  784A84     MOV.B W4, [W5]
15186:                 
15187:             
15188:                 Tm=FlashMass[173];
00F260  22B8D4     MOV #0x2B8D, W4
00F262  784214     MOV.B [W4], W4
00F264  FB8204     ZE W4, W4
00F266  780F04     MOV W4, [W14]
15189:                 Tm=Tm<<8;
00F268  78021E     MOV [W14], W4
00F26A  DD2248     SL W4, #8, W4
00F26C  780F04     MOV W4, [W14]
15190:                 Tm=Tm+FlashMass[172];
00F26E  22B8C4     MOV #0x2B8C, W4
00F270  784214     MOV.B [W4], W4
00F272  FB8204     ZE W4, W4
00F274  420F1E     ADD W4, [W14], [W14]
15191:                 MAH=Tm;
00F276  78021E     MOV [W14], W4
00F278  89BD44     MOV W4, MAH
15192:             
15193:                 Tm=FlashMass[175];
00F27A  22B8F4     MOV #0x2B8F, W4
00F27C  784214     MOV.B [W4], W4
00F27E  FB8204     ZE W4, W4
00F280  780F04     MOV W4, [W14]
15194:                 Tm=Tm<<8;
00F282  78021E     MOV [W14], W4
00F284  DD2248     SL W4, #8, W4
00F286  780F04     MOV W4, [W14]
15195:                 Tm=Tm+FlashMass[174];
00F288  22B8E4     MOV #0x2B8E, W4
00F28A  784214     MOV.B [W4], W4
00F28C  FB8204     ZE W4, W4
00F28E  420F1E     ADD W4, [W14], [W14]
15196:                 SensorThresholdDn=Tm;
00F290  78021E     MOV [W14], W4
00F292  889474     MOV W4, SensorThresholdDn
15197:             
15198:                 
15199:                 
15200:                 
15201:                 
15202:                 
15203:                 
15204:                 PinCodeMassOptions[1]=FlashMass[176];
00F294  22B904     MOV #0x2B90, W4
00F296  784214     MOV.B [W4], W4
00F298  217565     MOV #0x1756, W5
00F29A  784A84     MOV.B W4, [W5]
15205:                 PinCodeMassOptions[2]=FlashMass[177];
00F29C  22B914     MOV #0x2B91, W4
00F29E  784214     MOV.B [W4], W4
00F2A0  217575     MOV #0x1757, W5
00F2A2  784A84     MOV.B W4, [W5]
15206:                 
15207:             
15208:             
15209:                 SpdRstSpeedLim=(unsigned int)FlashMass[178];
00F2A4  22B924     MOV #0x2B92, W4
00F2A6  784214     MOV.B [W4], W4
00F2A8  FB8204     ZE W4, W4
00F2AA  897EF4     MOV W4, SpdRstSpeedLim
15210:             
15211:                 Tm=FlashMass[180];
00F2AC  22B944     MOV #0x2B94, W4
00F2AE  784214     MOV.B [W4], W4
00F2B0  FB8204     ZE W4, W4
00F2B2  780F04     MOV W4, [W14]
15212:                 Tm=Tm<<8;
00F2B4  78021E     MOV [W14], W4
00F2B6  DD2248     SL W4, #8, W4
00F2B8  780F04     MOV W4, [W14]
15213:                 Tm=Tm+FlashMass[179];
00F2BA  22B934     MOV #0x2B93, W4
00F2BC  784214     MOV.B [W4], W4
00F2BE  FB8204     ZE W4, W4
00F2C0  420F1E     ADD W4, [W14], [W14]
15214:                 SensorlessCntAlignConst=Tm;     
00F2C2  78021E     MOV [W14], W4
00F2C4  897E94     MOV W4, SensorlessCntAlignConst
15215:             
15216:                 
15217:                 Tm=FlashMass[182];
00F2C6  22B964     MOV #0x2B96, W4
00F2C8  784214     MOV.B [W4], W4
00F2CA  FB8204     ZE W4, W4
00F2CC  780F04     MOV W4, [W14]
15218:                 Tm=Tm<<8;
00F2CE  78021E     MOV [W14], W4
00F2D0  DD2248     SL W4, #8, W4
00F2D2  780F04     MOV W4, [W14]
15219:                 Tm=Tm+FlashMass[181];
00F2D4  22B954     MOV #0x2B95, W4
00F2D6  784214     MOV.B [W4], W4
00F2D8  FB8204     ZE W4, W4
00F2DA  420F1E     ADD W4, [W14], [W14]
15220:                 SenosrlessPWM1_1Const=Tm;     
00F2DC  78021E     MOV [W14], W4
00F2DE  8892F4     MOV W4, SenosrlessPWM1_1Const
15221:             
15222:                 Tm=FlashMass[184];
00F2E0  22B984     MOV #0x2B98, W4
00F2E2  784214     MOV.B [W4], W4
00F2E4  FB8204     ZE W4, W4
00F2E6  780F04     MOV W4, [W14]
15223:                 Tm=Tm<<8;
00F2E8  78021E     MOV [W14], W4
00F2EA  DD2248     SL W4, #8, W4
00F2EC  780F04     MOV W4, [W14]
15224:                 Tm=Tm+FlashMass[183];
00F2EE  22B974     MOV #0x2B97, W4
00F2F0  784214     MOV.B [W4], W4
00F2F2  FB8204     ZE W4, W4
00F2F4  420F1E     ADD W4, [W14], [W14]
15225:                 StatFlgs2.StatusFlags=Tm;
00F2F6  78021E     MOV [W14], W4
00F2F8  889764     MOV W4, StatFlgs2
15226:             
15227:                 Tm=FlashMass[186];
00F2FA  22B9A4     MOV #0x2B9A, W4
00F2FC  784214     MOV.B [W4], W4
00F2FE  FB8204     ZE W4, W4
00F300  780F04     MOV W4, [W14]
15228:                 Tm=Tm<<8;
00F302  78021E     MOV [W14], W4
00F304  DD2248     SL W4, #8, W4
00F306  780F04     MOV W4, [W14]
15229:                 Tm=Tm+FlashMass[185];
00F308  22B994     MOV #0x2B99, W4
00F30A  784214     MOV.B [W4], W4
00F30C  FB8204     ZE W4, W4
00F30E  420F1E     ADD W4, [W14], [W14]
15230:                 TemperatureMaxOUT=Tm;
00F310  78021E     MOV [W14], W4
00F312  DEA2CF     ASR W4, #15, W5
00F314  BE0004     MOV.D W4, W0
00F316  02257C     CALL ___floatsisf
00F318  000000     NOP
00F31A  BE0200     MOV.D W0, W4
00F31C  8A0234     MOV W4, TemperatureMaxOUT
00F31E  8A0245     MOV W5, 0x4048
15231:                 TemperatureMaxOUT=TemperatureMaxOUT/10;
00F320  820234     MOV TemperatureMaxOUT, W4
00F322  820245     MOV 0x4048, W5
00F324  200002     MOV #0x0, W2
00F326  241203     MOV #0x4120, W3
00F328  BE0004     MOV.D W4, W0
00F32A  02245A     CALL ___divsf3
00F32C  000000     NOP
00F32E  BE0200     MOV.D W0, W4
00F330  8A0234     MOV W4, TemperatureMaxOUT
00F332  8A0245     MOV W5, 0x4048
15232:             
15233:             
15234:             
15235:                 PinCodeMassOptions[3]=FlashMass[187];
00F334  22B9B4     MOV #0x2B9B, W4
00F336  784214     MOV.B [W4], W4
00F338  217585     MOV #0x1758, W5
00F33A  784A84     MOV.B W4, [W5]
15236:             
15237:                 Tm=FlashMass[189];
00F33C  22B9D4     MOV #0x2B9D, W4
00F33E  784214     MOV.B [W4], W4
00F340  FB8204     ZE W4, W4
00F342  780F04     MOV W4, [W14]
15238:                 Tm=Tm<<8;
00F344  78021E     MOV [W14], W4
00F346  DD2248     SL W4, #8, W4
00F348  780F04     MOV W4, [W14]
15239:                 Tm=Tm+FlashMass[188];
00F34A  22B9C4     MOV #0x2B9C, W4
00F34C  784214     MOV.B [W4], W4
00F34E  FB8204     ZE W4, W4
00F350  420F1E     ADD W4, [W14], [W14]
15240:                 StatFlgs1.StatusFlags=Tm;
00F352  78021E     MOV [W14], W4
00F354  889754     MOV W4, StatFlgs1
15241:             
15242:                 Tm=FlashMass[191];
00F356  22B9F4     MOV #0x2B9F, W4
00F358  784214     MOV.B [W4], W4
00F35A  FB8204     ZE W4, W4
00F35C  780F04     MOV W4, [W14]
15243:                 Tm=Tm<<8;
00F35E  78021E     MOV [W14], W4
00F360  DD2248     SL W4, #8, W4
00F362  780F04     MOV W4, [W14]
15244:                 Tm=Tm+FlashMass[190];
00F364  22B9E4     MOV #0x2B9E, W4
00F366  784214     MOV.B [W4], W4
00F368  FB8204     ZE W4, W4
00F36A  420F1E     ADD W4, [W14], [W14]
15245:                 SensorLessTimerConstConst=Tm;
00F36C  78021E     MOV [W14], W4
00F36E  8A0134     MOV W4, SensorLessTimerConstConst
15246:                 
15247:             
15248:             
15249:                 Tm=FlashMass[193];
00F370  22BA14     MOV #0x2BA1, W4
00F372  784214     MOV.B [W4], W4
00F374  FB8204     ZE W4, W4
00F376  780F04     MOV W4, [W14]
15250:                 Tm=Tm<<8;
00F378  78021E     MOV [W14], W4
00F37A  DD2248     SL W4, #8, W4
00F37C  780F04     MOV W4, [W14]
15251:                 Tm=Tm+FlashMass[192];
00F37E  22BA04     MOV #0x2BA0, W4
00F380  784214     MOV.B [W4], W4
00F382  FB8204     ZE W4, W4
00F384  420F1E     ADD W4, [W14], [W14]
15252:                 TemperatureMaxIN=Tm;
00F386  78021E     MOV [W14], W4
00F388  DEA2CF     ASR W4, #15, W5
00F38A  BE0004     MOV.D W4, W0
00F38C  02257C     CALL ___floatsisf
00F38E  000000     NOP
00F390  BE0200     MOV.D W0, W4
00F392  8A0274     MOV W4, TemperatureMaxIN
00F394  8A0285     MOV W5, 0x4050
15253:                 TemperatureMaxIN=TemperatureMaxIN/10;
00F396  820274     MOV TemperatureMaxIN, W4
00F398  820285     MOV 0x4050, W5
00F39A  200002     MOV #0x0, W2
00F39C  241203     MOV #0x4120, W3
00F39E  BE0004     MOV.D W4, W0
00F3A0  02245A     CALL ___divsf3
00F3A2  000000     NOP
00F3A4  BE0200     MOV.D W0, W4
00F3A6  8A0274     MOV W4, TemperatureMaxIN
00F3A8  8A0285     MOV W5, 0x4050
15254:             
15255:                 PinCodeMassOptions[4]=FlashMass[194];
00F3AA  22BA24     MOV #0x2BA2, W4
00F3AC  784214     MOV.B [W4], W4
00F3AE  217595     MOV #0x1759, W5
00F3B0  784A84     MOV.B W4, [W5]
15256:                 PinCodeMassOptions[5]=FlashMass[195];
00F3B2  22BA34     MOV #0x2BA3, W4
00F3B4  784214     MOV.B [W4], W4
00F3B6  2175A5     MOV #0x175A, W5
00F3B8  784A84     MOV.B W4, [W5]
15257:             
15258:             
15259:                 Tm=FlashMass[197];
00F3BA  22BA54     MOV #0x2BA5, W4
00F3BC  784214     MOV.B [W4], W4
00F3BE  FB8204     ZE W4, W4
00F3C0  780F04     MOV W4, [W14]
15260:                 Tm=Tm<<8;
00F3C2  78021E     MOV [W14], W4
00F3C4  DD2248     SL W4, #8, W4
00F3C6  780F04     MOV W4, [W14]
15261:                 Tm=Tm+FlashMass[196];
00F3C8  22BA44     MOV #0x2BA4, W4
00F3CA  784214     MOV.B [W4], W4
00F3CC  FB8204     ZE W4, W4
00F3CE  420F1E     ADD W4, [W14], [W14]
15262:                 BigCurrent=Tm;
00F3D0  78021E     MOV [W14], W4
00F3D2  88B644     MOV W4, BigCurrent
15263:                 
15264:             
15265:                 P_Curr=(float)FlashMass[198];
00F3D4  22BA64     MOV #0x2BA6, W4
00F3D6  784214     MOV.B [W4], W4
00F3D8  FB8204     ZE W4, W4
00F3DA  200005     MOV #0x0, W5
00F3DC  BE0004     MOV.D W4, W0
00F3DE  022582     CALL ___floatunsisf
00F3E0  000000     NOP
00F3E2  BE0200     MOV.D W0, W4
00F3E4  88B514     MOV W4, P_Curr
00F3E6  88B525     MOV W5, 0x16A4
15266:                 P_Curr=P_Curr/100;
00F3E8  80B514     MOV P_Curr, W4
00F3EA  80B525     MOV 0x16A4, W5
00F3EC  200002     MOV #0x0, W2
00F3EE  242C83     MOV #0x42C8, W3
00F3F0  BE0004     MOV.D W4, W0
00F3F2  02245A     CALL ___divsf3
00F3F4  000000     NOP
00F3F6  BE0200     MOV.D W0, W4
00F3F8  88B514     MOV W4, P_Curr
00F3FA  88B525     MOV W5, 0x16A4
15267:             
15268:                 Tm=FlashMass[199];
00F3FC  22BA74     MOV #0x2BA7, W4
00F3FE  784214     MOV.B [W4], W4
00F400  FB8204     ZE W4, W4
00F402  780F04     MOV W4, [W14]
15269:                 Tm=Tm<<8;
00F404  78021E     MOV [W14], W4
00F406  DD2248     SL W4, #8, W4
00F408  780F04     MOV W4, [W14]
15270:                 Tm=Tm+FlashMass[200];
00F40A  22BA84     MOV #0x2BA8, W4
00F40C  784214     MOV.B [W4], W4
00F40E  FB8204     ZE W4, W4
00F410  420F1E     ADD W4, [W14], [W14]
15271:                 JoystickCalibrX=Tm;
00F412  78021E     MOV [W14], W4
00F414  889454     MOV W4, JoystickCalibrX
15272:             
15273:             
15274:                 
15275:                 
15276:             
15277:             
15278:                 Tm=FlashMass[202];
00F416  22BAA4     MOV #0x2BAA, W4
00F418  784214     MOV.B [W4], W4
00F41A  FB8204     ZE W4, W4
00F41C  780F04     MOV W4, [W14]
15279:                 Tm=Tm<<8;
00F41E  78021E     MOV [W14], W4
00F420  DD2248     SL W4, #8, W4
00F422  780F04     MOV W4, [W14]
15280:                 Tm=Tm+FlashMass[201];
00F424  22BA94     MOV #0x2BA9, W4
00F426  784214     MOV.B [W4], W4
00F428  FB8204     ZE W4, W4
00F42A  420F1E     ADD W4, [W14], [W14]
15281:                 SensorThresholdUp=Tm;
00F42C  78021E     MOV [W14], W4
00F42E  889484     MOV W4, SensorThresholdUp
15282:             
15283:                 Tm=FlashMass[204];
00F430  22BAC4     MOV #0x2BAC, W4
00F432  784214     MOV.B [W4], W4
00F434  FB8204     ZE W4, W4
00F436  780F04     MOV W4, [W14]
15284:                 Tm=Tm<<8;
00F438  78021E     MOV [W14], W4
00F43A  DD2248     SL W4, #8, W4
00F43C  780F04     MOV W4, [W14]
15285:                 Tm=Tm+FlashMass[203];
00F43E  22BAB4     MOV #0x2BAB, W4
00F440  784214     MOV.B [W4], W4
00F442  FB8204     ZE W4, W4
00F444  420F1E     ADD W4, [W14], [W14]
15286:                 BreakThreshold=Tm;
00F446  78021E     MOV [W14], W4
00F448  889494     MOV W4, BreakThreshold
15287:                 KThreshold=(long int)((((float)MAX_PWM)/(MAX_PWM-BreakThreshold))*256);
00F44A  8212F4     MOV MAX_PWM, W4
00F44C  DEA2CF     ASR W4, #15, W5
00F44E  BE0004     MOV.D W4, W0
00F450  02257C     CALL ___floatsisf
00F452  000000     NOP
00F454  BE0400     MOV.D W0, W8
00F456  8212F5     MOV MAX_PWM, W5
00F458  809494     MOV BreakThreshold, W4
00F45A  528204     SUB W5, W4, W4
00F45C  DEA2CF     ASR W4, #15, W5
00F45E  BE0004     MOV.D W4, W0
00F460  02257C     CALL ___floatsisf
00F462  000000     NOP
00F464  BE0200     MOV.D W0, W4
00F466  BE0104     MOV.D W4, W2
00F468  BE0008     MOV.D W8, W0
00F46A  02245A     CALL ___divsf3
00F46C  000000     NOP
00F46E  BE0200     MOV.D W0, W4
00F470  200002     MOV #0x0, W2
00F472  243803     MOV #0x4380, W3
00F474  BE0004     MOV.D W4, W0
00F476  022630     CALL ___mulsf3
00F478  000000     NOP
00F47A  BE0200     MOV.D W0, W4
00F47C  BE0004     MOV.D W4, W0
00F47E  022504     CALL ___fixsfsi
00F480  000000     NOP
00F482  BE0200     MOV.D W0, W4
00F484  8A0024     MOV W4, KThreshold
00F486  8A0035     MOV W5, 0x4006
15288:                 KThresholdBreak=(long int)((((float)MAX_PWM)/(BreakThreshold))*256);
00F488  8212F4     MOV MAX_PWM, W4
00F48A  DEA2CF     ASR W4, #15, W5
00F48C  BE0004     MOV.D W4, W0
00F48E  02257C     CALL ___floatsisf
00F490  000000     NOP
00F492  BE0400     MOV.D W0, W8
00F494  809494     MOV BreakThreshold, W4
00F496  DEA2CF     ASR W4, #15, W5
00F498  BE0004     MOV.D W4, W0
00F49A  02257C     CALL ___floatsisf
00F49C  000000     NOP
00F49E  BE0200     MOV.D W0, W4
00F4A0  BE0104     MOV.D W4, W2
00F4A2  BE0008     MOV.D W8, W0
00F4A4  02245A     CALL ___divsf3
00F4A6  000000     NOP
00F4A8  BE0200     MOV.D W0, W4
00F4AA  200002     MOV #0x0, W2
00F4AC  243803     MOV #0x4380, W3
00F4AE  BE0004     MOV.D W4, W0
00F4B0  022630     CALL ___mulsf3
00F4B2  000000     NOP
00F4B4  BE0200     MOV.D W0, W4
00F4B6  BE0004     MOV.D W4, W0
00F4B8  022504     CALL ___fixsfsi
00F4BA  000000     NOP
00F4BC  BE0200     MOV.D W0, W4
00F4BE  8A0044     MOV W4, KThresholdBreak
00F4C0  8A0055     MOV W5, 0x400A
15289:             
15290:                 Tm=FlashMass[206];
00F4C2  22BAE4     MOV #0x2BAE, W4
00F4C4  784214     MOV.B [W4], W4
00F4C6  FB8204     ZE W4, W4
00F4C8  780F04     MOV W4, [W14]
15291:                 Tm=Tm<<8;
00F4CA  78021E     MOV [W14], W4
00F4CC  DD2248     SL W4, #8, W4
00F4CE  780F04     MOV W4, [W14]
15292:                 Tm=Tm+FlashMass[205];
00F4D0  22BAD4     MOV #0x2BAD, W4
00F4D2  784214     MOV.B [W4], W4
00F4D4  FB8204     ZE W4, W4
00F4D6  420F1E     ADD W4, [W14], [W14]
15293:                 KFirstBreak=Tm;
00F4D8  78021E     MOV [W14], W4
00F4DA  8894A4     MOV W4, KFirstBreak
15294:             
15295:                 TemperatureTYPE=FlashMass[207];
00F4DC  22BAF4     MOV #0x2BAF, W4
00F4DE  784214     MOV.B [W4], W4
00F4E0  210FF5     MOV #0x10FF, W5
00F4E2  784A84     MOV.B W4, [W5]
15296:                 SensOrder1=FlashMass[208];
00F4E4  22BB04     MOV #0x2BB0, W4
00F4E6  784214     MOV.B [W4], W4
00F4E8  212495     MOV #0x1249, W5
00F4EA  784A84     MOV.B W4, [W5]
15297:             
15298:                 Tm=FlashMass[210];
00F4EC  22BB24     MOV #0x2BB2, W4
00F4EE  784214     MOV.B [W4], W4
00F4F0  FB8204     ZE W4, W4
00F4F2  780F04     MOV W4, [W14]
15299:                 Tm=Tm<<8;
00F4F4  78021E     MOV [W14], W4
00F4F6  DD2248     SL W4, #8, W4
00F4F8  780F04     MOV W4, [W14]
15300:                 Tm=Tm+FlashMass[209];
00F4FA  22BB14     MOV #0x2BB1, W4
00F4FC  784214     MOV.B [W4], W4
00F4FE  FB8204     ZE W4, W4
00F500  420F1E     ADD W4, [W14], [W14]
15301:                 SensorlessSpdChngCntConst=Tm;
00F502  78021E     MOV [W14], W4
00F504  888764     MOV W4, SensorlessSpdChngCntConst
15302:             
15303:                 Tm=FlashMass[212];
00F506  22BB44     MOV #0x2BB4, W4
00F508  784214     MOV.B [W4], W4
00F50A  FB8204     ZE W4, W4
00F50C  780F04     MOV W4, [W14]
15304:                 Tm=Tm<<8;
00F50E  78021E     MOV [W14], W4
00F510  DD2248     SL W4, #8, W4
00F512  780F04     MOV W4, [W14]
15305:                 Tm=Tm+FlashMass[211];
00F514  22BB34     MOV #0x2BB3, W4
00F516  784214     MOV.B [W4], W4
00F518  FB8204     ZE W4, W4
00F51A  420F1E     ADD W4, [W14], [W14]
15306:                 V_MIN_OFF=Tm;
00F51C  78021E     MOV [W14], W4
00F51E  89C3C4     MOV W4, V_MIN_OFF
15307:             
15308:                 Tm=FlashMass[214];
00F520  22BB64     MOV #0x2BB6, W4
00F522  784214     MOV.B [W4], W4
00F524  FB8204     ZE W4, W4
00F526  780F04     MOV W4, [W14]
15309:                 Tm=Tm<<8;
00F528  78021E     MOV [W14], W4
00F52A  DD2248     SL W4, #8, W4
00F52C  780F04     MOV W4, [W14]
15310:                 Tm=Tm+FlashMass[213];
00F52E  22BB54     MOV #0x2BB5, W4
00F530  784214     MOV.B [W4], W4
00F532  FB8204     ZE W4, W4
00F534  420F1E     ADD W4, [W14], [W14]
15311:                 V_MIN_Pre_OFF=Tm;
00F536  78021E     MOV [W14], W4
00F538  89C3D4     MOV W4, V_MIN_Pre_OFF
15312:             
15313:                 Tm=FlashMass[216];
00F53A  22BB84     MOV #0x2BB8, W4
00F53C  784214     MOV.B [W4], W4
00F53E  FB8204     ZE W4, W4
00F540  780F04     MOV W4, [W14]
15314:                 Tm=Tm<<8;
00F542  78021E     MOV [W14], W4
00F544  DD2248     SL W4, #8, W4
00F546  780F04     MOV W4, [W14]
15315:                 Tm=Tm+FlashMass[215];
00F548  22BB74     MOV #0x2BB7, W4
00F54A  784214     MOV.B [W4], W4
00F54C  FB8204     ZE W4, W4
00F54E  420F1E     ADD W4, [W14], [W14]
15316:                 V_MIN_Sound=Tm;
00F550  78021E     MOV [W14], W4
00F552  89C3E4     MOV W4, V_MIN_Sound
15317:             
15318:                 Tm=FlashMass[218];
00F554  22BBA4     MOV #0x2BBA, W4
00F556  784214     MOV.B [W4], W4
00F558  FB8204     ZE W4, W4
00F55A  780F04     MOV W4, [W14]
15319:                 Tm=Tm<<8;
00F55C  78021E     MOV [W14], W4
00F55E  DD2248     SL W4, #8, W4
00F560  780F04     MOV W4, [W14]
15320:                 Tm=Tm+FlashMass[217];
00F562  22BB94     MOV #0x2BB9, W4
00F564  784214     MOV.B [W4], W4
00F566  FB8204     ZE W4, W4
00F568  420F1E     ADD W4, [W14], [W14]
15321:                 V_min_OverV=Tm;
00F56A  78021E     MOV [W14], W4
00F56C  89C3F4     MOV W4, V_min_OverV
15322:             
15323:             
15324:                 Tm=FlashMass[220];
00F56E  22BBC4     MOV #0x2BBC, W4
00F570  784214     MOV.B [W4], W4
00F572  FB8204     ZE W4, W4
00F574  780F04     MOV W4, [W14]
15325:                 Tm=Tm<<8;
00F576  78021E     MOV [W14], W4
00F578  DD2248     SL W4, #8, W4
00F57A  780F04     MOV W4, [W14]
15326:                 Tm=Tm+FlashMass[219];
00F57C  22BBB4     MOV #0x2BBB, W4
00F57E  784214     MOV.B [W4], W4
00F580  FB8204     ZE W4, W4
00F582  420F1E     ADD W4, [W14], [W14]
15327:                 KiCurr=Tm;
00F584  78021E     MOV [W14], W4
00F586  DEA2CF     ASR W4, #15, W5
00F588  BE0004     MOV.D W4, W0
00F58A  02257C     CALL ___floatsisf
00F58C  000000     NOP
00F58E  BE0200     MOV.D W0, W4
00F590  89F444     MOV W4, KiCurr
00F592  89F455     MOV W5, 0x3E8A
15328:                 KiCurr=KiCurr/100;
00F594  81F444     MOV KiCurr, W4
00F596  81F455     MOV 0x3E8A, W5
00F598  200002     MOV #0x0, W2
00F59A  242C83     MOV #0x42C8, W3
00F59C  BE0004     MOV.D W4, W0
00F59E  02245A     CALL ___divsf3
00F5A0  000000     NOP
00F5A2  BE0200     MOV.D W0, W4
00F5A4  89F444     MOV W4, KiCurr
00F5A6  89F455     MOV W5, 0x3E8A
15329:             
15330:             
15331:                 Tm=FlashMass[222];
00F5A8  22BBE4     MOV #0x2BBE, W4
00F5AA  784214     MOV.B [W4], W4
00F5AC  FB8204     ZE W4, W4
00F5AE  780F04     MOV W4, [W14]
15332:                 Tm=Tm<<8;
00F5B0  78021E     MOV [W14], W4
00F5B2  DD2248     SL W4, #8, W4
00F5B4  780F04     MOV W4, [W14]
15333:                 Tm=Tm+FlashMass[221];
00F5B6  22BBD4     MOV #0x2BBD, W4
00F5B8  784214     MOV.B [W4], W4
00F5BA  FB8204     ZE W4, W4
00F5BC  420F1E     ADD W4, [W14], [W14]
15334:                 CurrUstWork=Tm;
00F5BE  78021E     MOV [W14], W4
00F5C0  89F4E4     MOV W4, CurrUstWork
15335:             
15336:             
15337:             
15338:             
15339:                 //NearSensors[1][2]
15340:                 KpKpMustBe=(float)FlashMass[223];
00F5C2  22BBF4     MOV #0x2BBF, W4
00F5C4  784214     MOV.B [W4], W4
00F5C6  FB8204     ZE W4, W4
00F5C8  200005     MOV #0x0, W5
00F5CA  BE0004     MOV.D W4, W0
00F5CC  022582     CALL ___floatunsisf
00F5CE  000000     NOP
00F5D0  BE0200     MOV.D W0, W4
00F5D2  89A5B4     MOV W4, KpKpMustBe
00F5D4  89A5C5     MOV W5, 0x34B8
15341:                 KpKpMustBe=KpKpMustBe/(float)10;
00F5D6  81A5B4     MOV KpKpMustBe, W4
00F5D8  81A5C5     MOV 0x34B8, W5
00F5DA  200002     MOV #0x0, W2
00F5DC  241203     MOV #0x4120, W3
00F5DE  BE0004     MOV.D W4, W0
00F5E0  02245A     CALL ___divsf3
00F5E2  000000     NOP
00F5E4  BE0200     MOV.D W0, W4
00F5E6  89A5B4     MOV W4, KpKpMustBe
00F5E8  89A5C5     MOV W5, 0x34B8
15342:             
15343:                 Tm=FlashMass[225];
00F5EA  22BC14     MOV #0x2BC1, W4
00F5EC  784214     MOV.B [W4], W4
00F5EE  FB8204     ZE W4, W4
00F5F0  780F04     MOV W4, [W14]
15344:                 Tm=Tm<<8;
00F5F2  78021E     MOV [W14], W4
00F5F4  DD2248     SL W4, #8, W4
00F5F6  780F04     MOV W4, [W14]
15345:                 Tm=Tm+FlashMass[224];
00F5F8  22BC04     MOV #0x2BC0, W4
00F5FA  784214     MOV.B [W4], W4
00F5FC  FB8204     ZE W4, W4
00F5FE  420F1E     ADD W4, [W14], [W14]
15346:                 ThrottleLevelUpOff=Tm;
00F600  78021E     MOV [W14], W4
00F602  898294     MOV W4, ThrottleLevelUpOff
15347:             
15348:                 
15349:                 
15350:                 
15351:                 
15352:                 //NearSensors[1][3]=FlashMass[224];
15353:                 //NearSensors[2][2]=FlashMass[225];
15354:                 NearSensors[2][3]=FlashMass[226];
00F604  22BC24     MOV #0x2BC2, W4
00F606  784214     MOV.B [W4], W4
00F608  237275     MOV #0x3727, W5
00F60A  784A84     MOV.B W4, [W5]
15355:                 NearSensors[3][2]=FlashMass[227];
00F60C  22BC34     MOV #0x2BC3, W4
00F60E  784214     MOV.B [W4], W4
00F610  2372A5     MOV #0x372A, W5
00F612  784A84     MOV.B W4, [W5]
15356:                 NearSensors[3][3]=FlashMass[228];
00F614  22BC44     MOV #0x2BC4, W4
00F616  784214     MOV.B [W4], W4
00F618  2372B5     MOV #0x372B, W5
00F61A  784A84     MOV.B W4, [W5]
15357:                 NearSensors[4][2]=FlashMass[229];
00F61C  22BC54     MOV #0x2BC5, W4
00F61E  784214     MOV.B [W4], W4
00F620  2372E5     MOV #0x372E, W5
00F622  784A84     MOV.B W4, [W5]
15358:                 NearSensors[4][3]=FlashMass[230];
00F624  22BC64     MOV #0x2BC6, W4
00F626  784214     MOV.B [W4], W4
00F628  2372F5     MOV #0x372F, W5
00F62A  784A84     MOV.B W4, [W5]
15359:                 NearSensors[5][2]=FlashMass[231];
00F62C  22BC74     MOV #0x2BC7, W4
00F62E  784214     MOV.B [W4], W4
00F630  237325     MOV #0x3732, W5
00F632  784A84     MOV.B W4, [W5]
15360:                 NearSensors[5][3]=FlashMass[232];
00F634  22BC84     MOV #0x2BC8, W4
00F636  784214     MOV.B [W4], W4
00F638  237335     MOV #0x3733, W5
00F63A  784A84     MOV.B W4, [W5]
15361:                 NearSensors[6][2]=FlashMass[233];
00F63C  22BC94     MOV #0x2BC9, W4
00F63E  784214     MOV.B [W4], W4
00F640  237365     MOV #0x3736, W5
00F642  784A84     MOV.B W4, [W5]
15362:                 NearSensors[6][3]=FlashMass[234];
00F644  22BCA4     MOV #0x2BCA, W4
00F646  784214     MOV.B [W4], W4
00F648  237375     MOV #0x3737, W5
00F64A  784A84     MOV.B W4, [W5]
15363:             
15364:             
15365:                 Tm=FlashMass[236];
00F64C  22BCC4     MOV #0x2BCC, W4
00F64E  784214     MOV.B [W4], W4
00F650  FB8204     ZE W4, W4
00F652  780F04     MOV W4, [W14]
15366:                 Tm=Tm<<8;
00F654  78021E     MOV [W14], W4
00F656  DD2248     SL W4, #8, W4
00F658  780F04     MOV W4, [W14]
15367:                 Tm=Tm+FlashMass[235];
00F65A  22BCB4     MOV #0x2BCB, W4
00F65C  784214     MOV.B [W4], W4
00F65E  FB8204     ZE W4, W4
00F660  420F1E     ADD W4, [W14], [W14]
15368:                 TemperatureMaxIN_H=Tm;
00F662  78021E     MOV [W14], W4
00F664  DEA2CF     ASR W4, #15, W5
00F666  BE0004     MOV.D W4, W0
00F668  02257C     CALL ___floatsisf
00F66A  000000     NOP
00F66C  BE0200     MOV.D W0, W4
00F66E  8A0294     MOV W4, TemperatureMaxIN_H
00F670  8A02A5     MOV W5, 0x4054
15369:                 TemperatureMaxIN_H=TemperatureMaxIN_H/10;
00F672  820294     MOV TemperatureMaxIN_H, W4
00F674  8202A5     MOV 0x4054, W5
00F676  200002     MOV #0x0, W2
00F678  241203     MOV #0x4120, W3
00F67A  BE0004     MOV.D W4, W0
00F67C  02245A     CALL ___divsf3
00F67E  000000     NOP
00F680  BE0200     MOV.D W0, W4
00F682  8A0294     MOV W4, TemperatureMaxIN_H
00F684  8A02A5     MOV W5, 0x4054
15370:                 
15371:                 
15372:                 
15373:             
15374:                 Tm=FlashMass[238];
00F686  22BCE4     MOV #0x2BCE, W4
00F688  784214     MOV.B [W4], W4
00F68A  FB8204     ZE W4, W4
00F68C  780F04     MOV W4, [W14]
15375:                 Tm=Tm<<8;
00F68E  78021E     MOV [W14], W4
00F690  DD2248     SL W4, #8, W4
00F692  780F04     MOV W4, [W14]
15376:                 Tm=Tm+FlashMass[237];
00F694  22BCD4     MOV #0x2BCD, W4
00F696  784214     MOV.B [W4], W4
00F698  FB8204     ZE W4, W4
00F69A  420F1E     ADD W4, [W14], [W14]
15377:                 TemperatureMaxOUT_H=Tm;
00F69C  78021E     MOV [W14], W4
00F69E  DEA2CF     ASR W4, #15, W5
00F6A0  BE0004     MOV.D W4, W0
00F6A2  02257C     CALL ___floatsisf
00F6A4  000000     NOP
00F6A6  BE0200     MOV.D W0, W4
00F6A8  8A0254     MOV W4, TemperatureMaxOUT_H
00F6AA  8A0265     MOV W5, 0x404C
15378:                 TemperatureMaxOUT_H=TemperatureMaxOUT_H/10;
00F6AC  820254     MOV TemperatureMaxOUT_H, W4
00F6AE  820265     MOV 0x404C, W5
00F6B0  200002     MOV #0x0, W2
00F6B2  241203     MOV #0x4120, W3
00F6B4  BE0004     MOV.D W4, W0
00F6B6  02245A     CALL ___divsf3
00F6B8  000000     NOP
00F6BA  BE0200     MOV.D W0, W4
00F6BC  8A0254     MOV W4, TemperatureMaxOUT_H
00F6BE  8A0265     MOV W5, 0x404C
15379:             
15380:             
15381:                 Tm=FlashMass[240];
00F6C0  22BD04     MOV #0x2BD0, W4
00F6C2  784214     MOV.B [W4], W4
00F6C4  FB8204     ZE W4, W4
00F6C6  780F04     MOV W4, [W14]
15382:                 Tm=Tm<<8;
00F6C8  78021E     MOV [W14], W4
00F6CA  DD2248     SL W4, #8, W4
00F6CC  780F04     MOV W4, [W14]
15383:                 Tm=Tm+FlashMass[239];
00F6CE  22BCF4     MOV #0x2BCF, W4
00F6D0  784214     MOV.B [W4], W4
00F6D2  FB8204     ZE W4, W4
00F6D4  420F1E     ADD W4, [W14], [W14]
15384:                 JoystickCalibrY=Tm;
00F6D6  78021E     MOV [W14], W4
00F6D8  889464     MOV W4, JoystickCalibrY
15385:                 
15386:                 Tm=FlashMass[242];
00F6DA  22BD24     MOV #0x2BD2, W4
00F6DC  784214     MOV.B [W4], W4
00F6DE  FB8204     ZE W4, W4
00F6E0  780F04     MOV W4, [W14]
15387:                 Tm=Tm<<8;
00F6E2  78021E     MOV [W14], W4
00F6E4  DD2248     SL W4, #8, W4
00F6E6  780F04     MOV W4, [W14]
15388:                 Tm=Tm+FlashMass[241];
00F6E8  22BD14     MOV #0x2BD1, W4
00F6EA  784214     MOV.B [W4], W4
00F6EC  FB8204     ZE W4, W4
00F6EE  420F1E     ADD W4, [W14], [W14]
15389:                 JoistickDeadZone=Tm;
00F6F0  78021E     MOV [W14], W4
00F6F2  898284     MOV W4, JoistickDeadZone
15390:                 
15391:                 
15392:             
15393:                 DirPWM1Mem=DirPWM1;
00F6F4  809754     MOV StatFlgs1, W4
00F6F6  624261     AND.B W4, #0x1, W4
00F6F8  FB8204     ZE W4, W4
00F6FA  620261     AND W4, #0x1, W4
00F6FC  420204     ADD W4, W4, W4
00F6FE  809616     MOV 0x12C2, W6
00F700  2FFFD5     MOV #0xFFFD, W5
00F702  630285     AND W6, W5, W5
00F704  728204     IOR W5, W4, W4
00F706  889614     MOV W4, 0x12C2
15394:             
15395:                 
15396:                 
15397:                 
15398:                 
15399:             
15400:                 if (ErrOptions)
00F708  2305C4     MOV #0x305C, W4
00F70A  784214     MOV.B [W4], W4
00F70C  524FE0     SUB.B W4, #0x0, [W15]
00F70E  320006     BRA Z, 0xF71C
15401:                 {
15402:                     SoundNum=9;
00F710  2124B5     MOV #0x124B, W5
00F712  B3C094     MOV.B #0x9, W4
00F714  784A84     MOV.B W4, [W5]
15403:                     EEPROM_Limit_ERR=1;
00F716  809744     MOV StatFlgs, W4
00F718  A02004     BSET W4, #2
00F71A  889744     MOV W4, StatFlgs
15404:             
15405:                 }
15406:                 
15407:                 
15408:                 MassToOptions2();
00F71C  070004     RCALL MassToOptions2
15409:                 
15410:                 
15411:                     MassToOptionsProfile();    
00F71E  075115     RCALL MassToOptionsProfile
15412:                 /*
15413:                     if (StrongModeMem)
15414:                         StrongMode=1;
15415:                     else
15416:                         StrongMode=0;
15417:                 
15418:                 if ((VectorMem)&&(!Sensorless))
15419:                     Vector=1;
15420:                 else
15421:                     Vector=0;
15422:             
15423:                 if (!Sensorless)
15424:                     CurrUst=CurrUstWork;
15425:                 else
15426:                     CurrUst=SensorlessCurrUst;
15427:             
15428:             
15429:                 if (!Sensorless)
15430:                     CurrLimit=CurrLimitWork;
15431:                 else
15432:                 CurrLimit=SensorLessCurrLimit;
15433:                 ChangeCVR();
15434:             
15435:                 MAX_PWM_MustBe=MAX_PWM_MEM;
15436:                 if (MAX_PWM_MEM>100)
15437:                     MAX_PWM_MEM=100;
15438:                 
15439:                 MaxSpdCoeff=(int)(((float)MAX_PWM)/((float)MaxSpd/ImpToKmH1_t));
15440:             */
15441:             
15442:                     
15443:                     //NoAutoTrm=1;
15444:             }
00F720  BE044F     MOV.D [--W15], W8
00F722  FA8000     ULNK
00F724  060000     RETURN
15445:             
15446:             
15447:             void MassToOptions2(void)
15448:             {
00F726  FA0002     LNK #0x2
15449:             int Tm;
15450:             
15451:                 LightMode=FlashMass2[0];
00F728  22CC64     MOV #0x2CC6, W4
00F72A  784214     MOV.B [W4], W4
00F72C  2308E5     MOV #0x308E, W5
00F72E  784A84     MOV.B W4, [W5]
15452:             
15453:             
15454:                 
15455:                 Tm=FlashMass2[2];
00F730  22CC84     MOV #0x2CC8, W4
00F732  784214     MOV.B [W4], W4
00F734  FB8204     ZE W4, W4
00F736  780F04     MOV W4, [W14]
15456:                 Tm=Tm<<8;
00F738  78021E     MOV [W14], W4
00F73A  DD2248     SL W4, #8, W4
00F73C  780F04     MOV W4, [W14]
15457:                 Tm=Tm+FlashMass2[1];
00F73E  22CC74     MOV #0x2CC7, W4
00F740  784214     MOV.B [W4], W4
00F742  FB8204     ZE W4, W4
00F744  420F1E     ADD W4, [W14], [W14]
15458:                 LightSensorThresholdLo=Tm;
00F746  78021E     MOV [W14], W4
00F748  898484     MOV W4, LightSensorThresholdLo
15459:                 
15460:                 Tm=FlashMass2[4];
00F74A  22CCA4     MOV #0x2CCA, W4
00F74C  784214     MOV.B [W4], W4
00F74E  FB8204     ZE W4, W4
00F750  780F04     MOV W4, [W14]
15461:                 Tm=Tm<<8;
00F752  78021E     MOV [W14], W4
00F754  DD2248     SL W4, #8, W4
00F756  780F04     MOV W4, [W14]
15462:                 Tm=Tm+FlashMass2[3];
00F758  22CC94     MOV #0x2CC9, W4
00F75A  784214     MOV.B [W4], W4
00F75C  FB8204     ZE W4, W4
00F75E  420F1E     ADD W4, [W14], [W14]
15463:                 LightSensorThresholdHi=Tm;
00F760  78021E     MOV [W14], W4
00F762  898494     MOV W4, LightSensorThresholdHi
15464:                 
15465:                 CurrentMaxCurrentOnly=FlashMass2[5];
00F764  22CCB4     MOV #0x2CCB, W4
00F766  784214     MOV.B [W4], W4
00F768  212F25     MOV #0x12F2, W5
00F76A  784A84     MOV.B W4, [W5]
15466:             
15467:                 
15468:                 Tm=FlashMass2[7];
00F76C  22CCD4     MOV #0x2CCD, W4
00F76E  784214     MOV.B [W4], W4
00F770  FB8204     ZE W4, W4
00F772  780F04     MOV W4, [W14]
15469:                 Tm=Tm<<8;
00F774  78021E     MOV [W14], W4
00F776  DD2248     SL W4, #8, W4
00F778  780F04     MOV W4, [W14]
15470:                 Tm=Tm+FlashMass2[6];
00F77A  22CCC4     MOV #0x2CCC, W4
00F77C  784214     MOV.B [W4], W4
00F77E  FB8204     ZE W4, W4
00F780  420F1E     ADD W4, [W14], [W14]
15471:                 K_PWM_Nastr=Tm;
00F782  78021E     MOV [W14], W4
00F784  8A1384     MOV W4, K_PWM_Nastr
15472:                 
15473:                 Tm=FlashMass2[9];
00F786  22CCF4     MOV #0x2CCF, W4
00F788  784214     MOV.B [W4], W4
00F78A  FB8204     ZE W4, W4
00F78C  780F04     MOV W4, [W14]
15474:                 Tm=Tm<<8;
00F78E  78021E     MOV [W14], W4
00F790  DD2248     SL W4, #8, W4
00F792  780F04     MOV W4, [W14]
15475:                 Tm=Tm+FlashMass2[8];
00F794  22CCE4     MOV #0x2CCE, W4
00F796  784214     MOV.B [W4], W4
00F798  FB8204     ZE W4, W4
00F79A  420F1E     ADD W4, [W14], [W14]
15476:                 Khard=Tm;
00F79C  78021E     MOV [W14], W4
00F79E  888844     MOV W4, Khard
15477:             
15478:                 Crr1Corr=(float)FlashMass2[12];
00F7A0  22CD24     MOV #0x2CD2, W4
00F7A2  784214     MOV.B [W4], W4
00F7A4  FB8204     ZE W4, W4
00F7A6  200005     MOV #0x0, W5
00F7A8  BE0004     MOV.D W4, W0
00F7AA  022582     CALL ___floatunsisf
00F7AC  000000     NOP
00F7AE  BE0200     MOV.D W0, W4
00F7B0  888854     MOV W4, Crr1Corr
00F7B2  888865     MOV W5, 0x110C
15479:                 Crr1Corr=Crr1Corr/50;
00F7B4  808854     MOV Crr1Corr, W4
00F7B6  808865     MOV 0x110C, W5
00F7B8  200002     MOV #0x0, W2
00F7BA  242483     MOV #0x4248, W3
00F7BC  BE0004     MOV.D W4, W0
00F7BE  02245A     CALL ___divsf3
00F7C0  000000     NOP
00F7C2  BE0200     MOV.D W0, W4
00F7C4  888854     MOV W4, Crr1Corr
00F7C6  888865     MOV W5, 0x110C
15480:             
15481:                 Tm=FlashMass2[14];
00F7C8  22CD44     MOV #0x2CD4, W4
00F7CA  784214     MOV.B [W4], W4
00F7CC  FB8204     ZE W4, W4
00F7CE  780F04     MOV W4, [W14]
15482:                 Tm=Tm<<8;
00F7D0  78021E     MOV [W14], W4
00F7D2  DD2248     SL W4, #8, W4
00F7D4  780F04     MOV W4, [W14]
15483:                 Tm=Tm+FlashMass2[13];
00F7D6  22CD34     MOV #0x2CD3, W4
00F7D8  784214     MOV.B [W4], W4
00F7DA  FB8204     ZE W4, W4
00F7DC  420F1E     ADD W4, [W14], [W14]
15484:                 ButtonBreakOnlyPWM=Tm;
00F7DE  78021E     MOV [W14], W4
00F7E0  8980D4     MOV W4, ButtonBreakOnlyPWM
15485:                 
15486:                 Tm=FlashMass2[16];
00F7E2  22CD64     MOV #0x2CD6, W4
00F7E4  784214     MOV.B [W4], W4
00F7E6  FB8204     ZE W4, W4
00F7E8  780F04     MOV W4, [W14]
15487:                 Tm=Tm<<8;
00F7EA  78021E     MOV [W14], W4
00F7EC  DD2248     SL W4, #8, W4
00F7EE  780F04     MOV W4, [W14]
15488:                 Tm=Tm+FlashMass2[15];
00F7F0  22CD54     MOV #0x2CD5, W4
00F7F2  784214     MOV.B [W4], W4
00F7F4  FB8204     ZE W4, W4
00F7F6  420F1E     ADD W4, [W14], [W14]
15489:                 CntTurnOnConst=Tm;
00F7F8  78021E     MOV [W14], W4
00F7FA  8A0664     MOV W4, CntTurnOnConst
15490:                     
15491:             
15492:                 Tm=FlashMass2[18];
00F7FC  22CD84     MOV #0x2CD8, W4
00F7FE  784214     MOV.B [W4], W4
00F800  FB8204     ZE W4, W4
00F802  780F04     MOV W4, [W14]
15493:                 Tm=Tm<<8;
00F804  78021E     MOV [W14], W4
00F806  DD2248     SL W4, #8, W4
00F808  780F04     MOV W4, [W14]
15494:                 Tm=Tm+FlashMass2[17];
00F80A  22CD74     MOV #0x2CD7, W4
00F80C  784214     MOV.B [W4], W4
00F80E  FB8204     ZE W4, W4
00F810  420F1E     ADD W4, [W14], [W14]
15495:                 CntTurnOffConst=Tm;
00F812  78021E     MOV [W14], W4
00F814  8A0674     MOV W4, CntTurnOffConst
15496:                     
15497:                 TemperatureTYPE_FETs=FlashMass2[19];
00F816  22CD94     MOV #0x2CD9, W4
00F818  784214     MOV.B [W4], W4
00F81A  22FB65     MOV #0x2FB6, W5
00F81C  784A84     MOV.B W4, [W5]
15498:                 
15499:                 TstPhase=FlashMass2[20];
00F81E  22CDA4     MOV #0x2CDA, W4
00F820  784214     MOV.B [W4], W4
00F822  22FB75     MOV #0x2FB7, W5
00F824  784A84     MOV.B W4, [W5]
15500:             
15501:             
15502:                 Tm=FlashMass2[22];
00F826  22CDC4     MOV #0x2CDC, W4
00F828  784214     MOV.B [W4], W4
00F82A  FB8204     ZE W4, W4
00F82C  780F04     MOV W4, [W14]
15503:                 Tm=Tm<<8;
00F82E  78021E     MOV [W14], W4
00F830  DD2248     SL W4, #8, W4
00F832  780F04     MOV W4, [W14]
15504:                 Tm=Tm+FlashMass2[21];
00F834  22CDB4     MOV #0x2CDB, W4
00F836  784214     MOV.B [W4], W4
00F838  FB8204     ZE W4, W4
00F83A  420F1E     ADD W4, [W14], [W14]
15505:                 CurrPerDigit=Tm;
00F83C  78021E     MOV [W14], W4
00F83E  DEA2CF     ASR W4, #15, W5
00F840  BE0004     MOV.D W4, W0
00F842  02257C     CALL ___floatsisf
00F844  000000     NOP
00F846  BE0200     MOV.D W0, W4
00F848  8A13C4     MOV W4, CurrPerDigit
00F84A  8A13D5     MOV W5, 0x427A
15506:                 CurrPerDigit=CurrPerDigit/100;
00F84C  8213C4     MOV CurrPerDigit, W4
00F84E  8213D5     MOV 0x427A, W5
00F850  200002     MOV #0x0, W2
00F852  242C83     MOV #0x42C8, W3
00F854  BE0004     MOV.D W4, W0
00F856  02245A     CALL ___divsf3
00F858  000000     NOP
00F85A  BE0200     MOV.D W0, W4
00F85C  8A13C4     MOV W4, CurrPerDigit
00F85E  8A13D5     MOV W5, 0x427A
15507:             
15508:                 
15509:                 
15510:                 Tm=FlashMass2[24];
00F860  22CDE4     MOV #0x2CDE, W4
00F862  784214     MOV.B [W4], W4
00F864  FB8204     ZE W4, W4
00F866  780F04     MOV W4, [W14]
15511:                 Tm=Tm<<8;
00F868  78021E     MOV [W14], W4
00F86A  DD2248     SL W4, #8, W4
00F86C  780F04     MOV W4, [W14]
15512:                 Tm=Tm+FlashMass2[23];
00F86E  22CDD4     MOV #0x2CDD, W4
00F870  784214     MOV.B [W4], W4
00F872  FB8204     ZE W4, W4
00F874  420F1E     ADD W4, [W14], [W14]
15513:                 SpdStartLevel=Tm;
00F876  78021E     MOV [W14], W4
00F878  8899D4     MOV W4, SpdStartLevel
15514:             
15515:                 Tm=FlashMass2[26];
00F87A  22CE04     MOV #0x2CE0, W4
00F87C  784214     MOV.B [W4], W4
00F87E  FB8204     ZE W4, W4
00F880  780F04     MOV W4, [W14]
15516:                 Tm=Tm<<8;
00F882  78021E     MOV [W14], W4
00F884  DD2248     SL W4, #8, W4
00F886  780F04     MOV W4, [W14]
15517:                 Tm=Tm+FlashMass2[25];
00F888  22CDF4     MOV #0x2CDF, W4
00F88A  784214     MOV.B [W4], W4
00F88C  FB8204     ZE W4, W4
00F88E  420F1E     ADD W4, [W14], [W14]
15518:                 Ki_PWM_ModeOff=Tm;
00F890  78021E     MOV [W14], W4
00F892  DEA2CF     ASR W4, #15, W5
00F894  BE0004     MOV.D W4, W0
00F896  02257C     CALL ___floatsisf
00F898  000000     NOP
00F89A  BE0200     MOV.D W0, W4
00F89C  8982C4     MOV W4, Ki_PWM_ModeOff
00F89E  8982D5     MOV W5, 0x305A
15519:                 Ki_PWM_ModeOff=Ki_PWM_ModeOff/10000;
00F8A0  8182C4     MOV Ki_PWM_ModeOff, W4
00F8A2  8182D5     MOV 0x305A, W5
00F8A4  240002     MOV #0x4000, W2
00F8A6  2461C3     MOV #0x461C, W3
00F8A8  BE0004     MOV.D W4, W0
00F8AA  02245A     CALL ___divsf3
00F8AC  000000     NOP
00F8AE  BE0200     MOV.D W0, W4
00F8B0  8982C4     MOV W4, Ki_PWM_ModeOff
00F8B2  8982D5     MOV W5, 0x305A
15520:                 
15521:             
15522:                 StrongModeSpdFilterOffMem=FlashMass2[27];
00F8B4  22CE14     MOV #0x2CE1, W4
00F8B6  784214     MOV.B [W4], W4
00F8B8  22ADE5     MOV #0x2ADE, W5
00F8BA  784A84     MOV.B W4, [W5]
15523:                 StrongModeSpdFilterOff=((float)StrongModeSpdFilterOffMem)/ImpToKmH1_t;
00F8BC  22ADE4     MOV #0x2ADE, W4
00F8BE  784214     MOV.B [W4], W4
00F8C0  FB8204     ZE W4, W4
00F8C2  200005     MOV #0x0, W5
00F8C4  BE0004     MOV.D W4, W0
00F8C6  022582     CALL ___floatunsisf
00F8C8  000000     NOP
00F8CA  BE0300     MOV.D W0, W6
00F8CC  817E24     MOV ImpToKmH1_t, W4
00F8CE  817E35     MOV 0x2FC6, W5
00F8D0  BE0104     MOV.D W4, W2
00F8D2  BE0006     MOV.D W6, W0
00F8D4  02245A     CALL ___divsf3
00F8D6  000000     NOP
00F8D8  BE0200     MOV.D W0, W4
00F8DA  8956D4     MOV W4, StrongModeSpdFilterOff
00F8DC  8956E5     MOV W5, 0x2ADC
15524:             
15525:                 Tm=FlashMass2[29];
00F8DE  22CE34     MOV #0x2CE3, W4
00F8E0  784214     MOV.B [W4], W4
00F8E2  FB8204     ZE W4, W4
00F8E4  780F04     MOV W4, [W14]
15526:                 Tm=Tm<<8;
00F8E6  78021E     MOV [W14], W4
00F8E8  DD2248     SL W4, #8, W4
00F8EA  780F04     MOV W4, [W14]
15527:                 Tm=Tm+FlashMass2[28];
00F8EC  22CE24     MOV #0x2CE2, W4
00F8EE  784214     MOV.B [W4], W4
00F8F0  FB8204     ZE W4, W4
00F8F2  420F1E     ADD W4, [W14], [W14]
15528:                 RegenOffMem=Tm;
00F8F4  78021E     MOV [W14], W4
00F8F6  8980E4     MOV W4, RegenOffMem
15529:             
15530:                 Tm=FlashMass2[31];
00F8F8  22CE54     MOV #0x2CE5, W4
00F8FA  784214     MOV.B [W4], W4
00F8FC  FB8204     ZE W4, W4
00F8FE  780F04     MOV W4, [W14]
15531:                 Tm=Tm<<8;
00F900  78021E     MOV [W14], W4
00F902  DD2248     SL W4, #8, W4
00F904  780F04     MOV W4, [W14]
15532:                 Tm=Tm+FlashMass2[30];
00F906  22CE44     MOV #0x2CE4, W4
00F908  784214     MOV.B [W4], W4
00F90A  FB8204     ZE W4, W4
00F90C  420F1E     ADD W4, [W14], [W14]
15533:                 StatFlgs4.StatusFlags=Tm;
00F90E  78021E     MOV [W14], W4
00F910  889784     MOV W4, StatFlgs4
15534:                 
15535:                 KeyLightBrightness=FlashMass2[32];
00F912  22CE64     MOV #0x2CE6, W4
00F914  784214     MOV.B [W4], W4
00F916  22FAE5     MOV #0x2FAE, W5
00F918  784A84     MOV.B W4, [W5]
15536:             
15537:                 
15538:                 Tm=FlashMass2[34];
00F91A  22CE84     MOV #0x2CE8, W4
00F91C  784214     MOV.B [W4], W4
00F91E  FB8204     ZE W4, W4
00F920  780F04     MOV W4, [W14]
15539:                 Tm=Tm<<8;
00F922  78021E     MOV [W14], W4
00F924  DD2248     SL W4, #8, W4
00F926  780F04     MOV W4, [W14]
15540:                 Tm=Tm+FlashMass2[33];
00F928  22CE74     MOV #0x2CE7, W4
00F92A  784214     MOV.B [W4], W4
00F92C  FB8204     ZE W4, W4
00F92E  420F1E     ADD W4, [W14], [W14]
15541:                 ButtonBreakOnlyTime=Tm;
00F930  78021E     MOV [W14], W4
00F932  898414     MOV W4, ButtonBreakOnlyTime
15542:                 
15543:                 
15544:                 
15545:                 
15546:                    
15547:             #if !defined VECTOR
15548:             #if !defined ISOLATED
15549:                                            RegenOff=(unsigned int)((float)RegenOffMem*(float)38.388);
15550:             #else
15551:                                            RegenOff=(unsigned int)((float)RegenOffMem/(float)0.4167965);
15552:             #endif
15553:             #else
15554:                                            RegenOff=(unsigned int)((float)RegenOffMem*(float)38.388);
00F934  8180E4     MOV RegenOffMem, W4
00F936  200005     MOV #0x0, W5
00F938  BE0004     MOV.D W4, W0
00F93A  022582     CALL ___floatunsisf
00F93C  000000     NOP
00F93E  BE0200     MOV.D W0, W4
00F940  28D502     MOV #0x8D50, W2
00F942  242193     MOV #0x4219, W3
00F944  BE0004     MOV.D W4, W0
00F946  022630     CALL ___mulsf3
00F948  000000     NOP
00F94A  BE0200     MOV.D W0, W4
00F94C  BE0004     MOV.D W4, W0
00F94E  022546     CALL ___fixunssfsi
00F950  000000     NOP
00F952  BE0200     MOV.D W0, W4
00F954  780204     MOV W4, W4
00F956  8980F4     MOV W4, RegenOff
15555:             #endif
15556:             
15557:             
15558:             
15559:             
15560:             
15561:             
15562:                 SpdStartLevelFl=((float)SpdStartLevel)/ImpToKmH1_t;
00F958  8099D4     MOV SpdStartLevel, W4
00F95A  200005     MOV #0x0, W5
00F95C  BE0004     MOV.D W4, W0
00F95E  022582     CALL ___floatunsisf
00F960  000000     NOP
00F962  BE0300     MOV.D W0, W6
00F964  817E24     MOV ImpToKmH1_t, W4
00F966  817E35     MOV 0x2FC6, W5
00F968  BE0104     MOV.D W4, W2
00F96A  BE0006     MOV.D W6, W0
00F96C  02245A     CALL ___divsf3
00F96E  000000     NOP
00F970  BE0200     MOV.D W0, W4
00F972  8956B4     MOV W4, SpdStartLevelFl
00F974  8956C5     MOV W5, 0x2AD8
15563:                 CurrentMaxCurrentOnlyWork=((float)CurrentMaxCurrentOnly*1000/**Crr1Corr*/)/CurrPerDigit;
00F976  212F24     MOV #0x12F2, W4
00F978  784214     MOV.B [W4], W4
00F97A  FB8204     ZE W4, W4
00F97C  200005     MOV #0x0, W5
00F97E  BE0004     MOV.D W4, W0
00F980  022582     CALL ___floatunsisf
00F982  000000     NOP
00F984  BE0200     MOV.D W0, W4
00F986  200002     MOV #0x0, W2
00F988  2447A3     MOV #0x447A, W3
00F98A  BE0004     MOV.D W4, W0
00F98C  022630     CALL ___mulsf3
00F98E  000000     NOP
00F990  BE0200     MOV.D W0, W4
00F992  BE0304     MOV.D W4, W6
00F994  8213C4     MOV CurrPerDigit, W4
00F996  8213D5     MOV 0x427A, W5
00F998  BE0104     MOV.D W4, W2
00F99A  BE0006     MOV.D W6, W0
00F99C  02245A     CALL ___divsf3
00F99E  000000     NOP
00F9A0  BE0200     MOV.D W0, W4
00F9A2  898604     MOV W4, CurrentMaxCurrentOnlyWork
00F9A4  898615     MOV W5, 0x30C2
15564:             
15565:                 Mgnovenniy=0;
00F9A6  809774     MOV StatFlgs3, W4
00F9A8  A12004     BCLR W4, #2
00F9AA  889774     MOV W4, StatFlgs3
15566:             }
00F9AC  FA8000     ULNK
00F9AE  060000     RETURN
15567:             
15568:             
15569:             void Comparator3_Init(void)
15570:             {
00F9B0  FA0000     LNK #0x0
15571:                 CM3CONbits.CON=0;
00F9B2  A9EA95     BCLR 0xA95, #7
15572:                 CM3CONbits.COE=0;//OUTPUT
00F9B4  A9CA95     BCLR 0xA95, #6
15573:                 CM3CONbits.CPOL=1;//POLARITY
00F9B6  A8AA95     BSET 0xA95, #5
15574:                 CM3CONbits.EVPOL=3;
00F9B8  8054A4     MOV CM3CON, W4
00F9BA  A06004     BSET W4, #6
00F9BC  A07004     BSET W4, #7
00F9BE  8854A4     MOV W4, CM3CON
15575:                 CM3CONbits.CREF=1;
00F9C0  A88A94     BSET CM3CON, #4
15576:                 CM3CONbits.CCH=1;//C3IN1
00F9C2  8054A4     MOV CM3CON, W4
00F9C4  A00004     BSET W4, #0
00F9C6  A11004     BCLR W4, #1
00F9C8  8854A4     MOV W4, CM3CON
15577:                 CM3CONbits.CEVT=1;
00F9CA  A82A95     BSET 0xA95, #1
15578:             
15579:             
15580:                 CVRCONbits.VREFSEL=0;//CVrefin
00F9CC  A94A83     BCLR 0xA83, #2
15581:                 CVRCONbits.CVREN=1;
00F9CE  A8EA82     BSET CVRCON, #7
15582:                 CVRCONbits.CVRR=0;
00F9D0  A9AA82     BCLR CVRCON, #5
15583:                 CVRCONbits.CVRSS=0;
00F9D2  A98A82     BCLR CVRCON, #4
15584:                 ChangeCVR();
00F9D4  07000A     RCALL ChangeCVR
15585:             
15586:             
15587:                 CM3FLTRbits.CFDIV=0b011;
00F9D6  8054D4     MOV CM3FLTR, W4
00F9D8  A00004     BSET W4, #0
00F9DA  A01004     BSET W4, #1
00F9DC  A12004     BCLR W4, #2
00F9DE  8854D4     MOV W4, CM3FLTR
15588:               //  CM3FLTRbits.CFLTREN=1;
15589:             
15590:                 CM3CONbits.CON=1;
00F9E0  A8EA95     BSET 0xA95, #7
15591:             
15592:             
15593:             
15594:                 IEC1bits.CMIE=0;
00F9E2  A94822     BCLR IEC1, #2
15595:                 IFS1bits.CMIF=0;
00F9E4  A94802     BCLR IFS1, #2
15596:             
15597:                 //RPOR7bits.RP97R=0b011010;
15598:             
15599:             }
00F9E6  FA8000     ULNK
00F9E8  060000     RETURN
15600:             
15601:             void ChangeCVR(void)
15602:             {
00F9EA  FA0000     LNK #0x0
15603:             #if defined REV2 
15604:                 switch (CurrLimit)
00F9EC  80C194     MOV CurrLimit, W4
00F9EE  200005     MOV #0x0, W5
00F9F0  2000F6     MOV #0xF, W6
00F9F2  200007     MOV #0x0, W7
00F9F4  520F86     SUB W4, W6, [W15]
00F9F6  5A8F87     SUBB W5, W7, [W15]
00F9F8  3E0081     BRA GTU, 0xFAFC
00F9FA  010604     BRA W4
00F9FC  370078     BRA 0xFAEE
00F9FE  370070     BRA 0xFAE0
00FA00  370068     BRA 0xFAD2
00FA02  370060     BRA 0xFAC4
00FA04  370058     BRA 0xFAB6
00FA06  370050     BRA 0xFAA8
00FA08  370048     BRA 0xFA9A
00FA0A  370040     BRA 0xFA8C
00FA0C  370038     BRA 0xFA7E
00FA0E  370030     BRA 0xFA70
00FA10  370028     BRA 0xFA62
00FA12  370020     BRA 0xFA54
00FA14  370018     BRA 0xFA46
00FA16  370010     BRA 0xFA38
00FA18  370008     BRA 0xFA2A
00FA1A  370000     BRA 0xFA1C
15605:                 {
15606:                     case 15:
15607:                         CVRCONbits.CVR=0;   //0A
00FA1C  805414     MOV CVRCON, W4
00FA1E  A10004     BCLR W4, #0
00FA20  A11004     BCLR W4, #1
00FA22  A12004     BCLR W4, #2
00FA24  A13004     BCLR W4, #3
00FA26  885414     MOV W4, CVRCON
15608:                         break;
00FA28  370069     BRA 0xFAFC
15609:                     case 14:
15610:                         CVRCONbits.CVR=1;   //181A
00FA2A  805414     MOV CVRCON, W4
00FA2C  A00004     BSET W4, #0
00FA2E  A11004     BCLR W4, #1
00FA30  A12004     BCLR W4, #2
00FA32  A13004     BCLR W4, #3
00FA34  885414     MOV W4, CVRCON
15611:                         break;
00FA36  370062     BRA 0xFAFC
15612:                     case 13:
15613:                         CVRCONbits.CVR=2;   //170A
00FA38  805414     MOV CVRCON, W4
00FA3A  A10004     BCLR W4, #0
00FA3C  A01004     BSET W4, #1
00FA3E  A12004     BCLR W4, #2
00FA40  A13004     BCLR W4, #3
00FA42  885414     MOV W4, CVRCON
15614:                         break;
00FA44  37005B     BRA 0xFAFC
15615:                     case 12:
15616:                         CVRCONbits.CVR=3;   //160A
00FA46  805414     MOV CVRCON, W4
00FA48  A00004     BSET W4, #0
00FA4A  A01004     BSET W4, #1
00FA4C  A12004     BCLR W4, #2
00FA4E  A13004     BCLR W4, #3
00FA50  885414     MOV W4, CVRCON
15617:                         break;
00FA52  370054     BRA 0xFAFC
15618:                     case 11:
15619:                         CVRCONbits.CVR=4;   //150A
00FA54  805414     MOV CVRCON, W4
00FA56  A10004     BCLR W4, #0
00FA58  A11004     BCLR W4, #1
00FA5A  A02004     BSET W4, #2
00FA5C  A13004     BCLR W4, #3
00FA5E  885414     MOV W4, CVRCON
15620:                         break;
00FA60  37004D     BRA 0xFAFC
15621:                     case 10:
15622:                         CVRCONbits.CVR=5;   //139A
00FA62  805414     MOV CVRCON, W4
00FA64  A00004     BSET W4, #0
00FA66  A11004     BCLR W4, #1
00FA68  A02004     BSET W4, #2
00FA6A  A13004     BCLR W4, #3
00FA6C  885414     MOV W4, CVRCON
15623:                         break;
00FA6E  370046     BRA 0xFAFC
15624:                     case 9:
15625:                         CVRCONbits.CVR=6;   //129A
00FA70  805414     MOV CVRCON, W4
00FA72  A10004     BCLR W4, #0
00FA74  A01004     BSET W4, #1
00FA76  A02004     BSET W4, #2
00FA78  A13004     BCLR W4, #3
00FA7A  885414     MOV W4, CVRCON
15626:                         break;
00FA7C  37003F     BRA 0xFAFC
15627:                     case 8:
15628:                         CVRCONbits.CVR=7;   //118A
00FA7E  805414     MOV CVRCON, W4
00FA80  A00004     BSET W4, #0
00FA82  A01004     BSET W4, #1
00FA84  A02004     BSET W4, #2
00FA86  A13004     BCLR W4, #3
00FA88  885414     MOV W4, CVRCON
15629:                         break;
00FA8A  370038     BRA 0xFAFC
15630:                     case 7:
15631:                         CVRCONbits.CVR=8;   //108A
00FA8C  805414     MOV CVRCON, W4
00FA8E  A10004     BCLR W4, #0
00FA90  A11004     BCLR W4, #1
00FA92  A12004     BCLR W4, #2
00FA94  A03004     BSET W4, #3
00FA96  885414     MOV W4, CVRCON
15632:                         break;
00FA98  370031     BRA 0xFAFC
15633:                     case 6:
15634:                         CVRCONbits.CVR=9;   //97.6A
00FA9A  805414     MOV CVRCON, W4
00FA9C  A00004     BSET W4, #0
00FA9E  A11004     BCLR W4, #1
00FAA0  A12004     BCLR W4, #2
00FAA2  A03004     BSET W4, #3
00FAA4  885414     MOV W4, CVRCON
15635:                         break;
00FAA6  37002A     BRA 0xFAFC
15636:                     case 5:
15637:                         CVRCONbits.CVR=10;   //87.2A
00FAA8  805414     MOV CVRCON, W4
00FAAA  A10004     BCLR W4, #0
00FAAC  A01004     BSET W4, #1
00FAAE  A12004     BCLR W4, #2
00FAB0  A03004     BSET W4, #3
00FAB2  885414     MOV W4, CVRCON
15638:                         break;
00FAB4  370023     BRA 0xFAFC
15639:                     case 4:
15640:                         CVRCONbits.CVR=11;   //76.8A
00FAB6  805414     MOV CVRCON, W4
00FAB8  A00004     BSET W4, #0
00FABA  A01004     BSET W4, #1
00FABC  A12004     BCLR W4, #2
00FABE  A03004     BSET W4, #3
00FAC0  885414     MOV W4, CVRCON
15641:                         break;
00FAC2  37001C     BRA 0xFAFC
15642:                     case 3:
15643:                         CVRCONbits.CVR=12;   //66.4A
00FAC4  805414     MOV CVRCON, W4
00FAC6  A10004     BCLR W4, #0
00FAC8  A11004     BCLR W4, #1
00FACA  A02004     BSET W4, #2
00FACC  A03004     BSET W4, #3
00FACE  885414     MOV W4, CVRCON
15644:                         break;
00FAD0  370015     BRA 0xFAFC
15645:                     case 2:
15646:                         CVRCONbits.CVR=13;   //56A
00FAD2  805414     MOV CVRCON, W4
00FAD4  A00004     BSET W4, #0
00FAD6  A11004     BCLR W4, #1
00FAD8  A02004     BSET W4, #2
00FADA  A03004     BSET W4, #3
00FADC  885414     MOV W4, CVRCON
15647:                         break;
00FADE  37000E     BRA 0xFAFC
15648:                     case 1:
15649:                         CVRCONbits.CVR=14;   //46A
00FAE0  805414     MOV CVRCON, W4
00FAE2  A10004     BCLR W4, #0
00FAE4  A01004     BSET W4, #1
00FAE6  A02004     BSET W4, #2
00FAE8  A03004     BSET W4, #3
00FAEA  885414     MOV W4, CVRCON
15650:                         break;
00FAEC  370007     BRA 0xFAFC
15651:                     case 0:
15652:                         CVRCONbits.CVR=15;   //35A
00FAEE  805414     MOV CVRCON, W4
00FAF0  A00004     BSET W4, #0
00FAF2  A01004     BSET W4, #1
00FAF4  A02004     BSET W4, #2
00FAF6  A03004     BSET W4, #3
00FAF8  885414     MOV W4, CVRCON
15653:                         break;
00FAFA  000000     NOP
15654:                 }
15655:             #else    
15656:                  switch (CurrLimit)
15657:                 {
15658:                     case 0:
15659:                         CVRCONbits.CVR=0;   //0A
15660:                         break;
15661:                     case 1:
15662:                         CVRCONbits.CVR=1;   //10A
15663:                         break;
15664:                     case 2:
15665:                         CVRCONbits.CVR=2;   //20A
15666:                         break;
15667:                     case 3:
15668:                         CVRCONbits.CVR=3;   //30A
15669:                         break;
15670:                     case 4:
15671:                         CVRCONbits.CVR=4;   //40A
15672:                         break;
15673:                     case 5:
15674:                         CVRCONbits.CVR=5;   //50A
15675:                         break;
15676:                     case 6:
15677:                         CVRCONbits.CVR=6;   //60A
15678:                         break;
15679:                     case 7:
15680:                         CVRCONbits.CVR=7;   //70A
15681:                         break;
15682:                     case 8:
15683:                         CVRCONbits.CVR=8;   //80A
15684:                         break;
15685:                     case 9:
15686:                         CVRCONbits.CVR=9;   //90A
15687:                         break;
15688:                     case 10:
15689:                         CVRCONbits.CVR=10;   //100A
15690:                         break;
15691:                     case 11:
15692:                         CVRCONbits.CVR=11;   //110A
15693:                         break;
15694:                     case 12:
15695:                         CVRCONbits.CVR=12;   //120A
15696:                         break;
15697:                     case 13:
15698:                         CVRCONbits.CVR=13;   //130A
15699:                         break;
15700:                     case 14:
15701:                         CVRCONbits.CVR=14;   //140A
15702:                         break;
15703:                     case 15:
15704:                         CVRCONbits.CVR=15;   //150A
15705:                         break;
15706:             
15707:                 }
15708:             #endif
15709:             }
00FAFC  FA8000     ULNK
00FAFE  060000     RETURN
15710:             
15711:             
15712:             
15713:             void Comparator2_Init(void)
15714:             {
00FB00  FA0000     LNK #0x0
15715:                 CM2CONbits.CON=0;
00FB02  A9EA8D     BCLR 0xA8D, #7
15716:                 CM2CONbits.COE=1;//OUTPUT
00FB04  A8CA8D     BSET 0xA8D, #6
15717:                 if (ShortCircuit)
00FB06  809774     MOV StatFlgs3, W4
00FB08  620262     AND W4, #0x2, W4
00FB0A  520FE0     SUB W4, #0x0, [W15]
00FB0C  320002     BRA Z, 0xFB12
15718:                     CM2CONbits.CPOL=0;//1;//POLARITY
00FB0E  A9AA8D     BCLR 0xA8D, #5
00FB10  370001     BRA 0xFB14
15719:                 else
15720:                     CM2CONbits.CPOL=1;//POLARITY
00FB12  A8AA8D     BSET 0xA8D, #5
15721:                     
15722:                 CM2CONbits.EVPOL=3;
00FB14  805464     MOV CM2CON, W4
00FB16  A06004     BSET W4, #6
00FB18  A07004     BSET W4, #7
00FB1A  885464     MOV W4, CM2CON
15723:                 CM2CONbits.CREF=1;
00FB1C  A88A8C     BSET CM2CON, #4
15724:                 CM2CONbits.CCH=1;//C3IN1
00FB1E  805464     MOV CM2CON, W4
00FB20  A00004     BSET W4, #0
00FB22  A11004     BCLR W4, #1
00FB24  885464     MOV W4, CM2CON
15725:                 CM2CONbits.CEVT=1;
00FB26  A82A8D     BSET 0xA8D, #1
15726:             
15727:             
15728:                 CVRCONbits.VREFSEL=0;//CVrefin
00FB28  A94A83     BCLR 0xA83, #2
15729:                 CVRCONbits.CVREN=1;
00FB2A  A8EA82     BSET CVRCON, #7
15730:             #if defined REV2
15731:                 CVRCONbits.CVRR=1;
00FB2C  A8AA82     BSET CVRCON, #5
15732:             #else
15733:                 CVRCONbits.CVRR=0;
15734:             #endif    
15735:                 CVRCONbits.CVRSS=0;
00FB2E  A98A82     BCLR CVRCON, #4
15736:                 ChangeCVR();
00FB30  07FF5C     RCALL ChangeCVR
15737:             
15738:             
15739:                 CM2FLTRbits.CFDIV=0b011;
00FB32  805494     MOV CM2FLTR, W4
00FB34  A00004     BSET W4, #0
00FB36  A01004     BSET W4, #1
00FB38  A12004     BCLR W4, #2
00FB3A  885494     MOV W4, CM2FLTR
15740:                 CM2FLTRbits.CFLTREN=1;
00FB3C  A86A92     BSET CM2FLTR, #3
15741:             
15742:                 CM2CONbits.CON=1;
00FB3E  A8EA8D     BSET 0xA8D, #7
15743:             
15744:             
15745:             
15746:                 IEC1bits.CMIE=0;
00FB40  A94822     BCLR IEC1, #2
15747:                 IFS1bits.CMIF=0;
00FB42  A94802     BCLR IFS1, #2
15748:             
15749:               
15750:             
15751:             }
00FB44  FA8000     ULNK
00FB46  060000     RETURN
15752:             
15753:             
15754:             
15755:             
15756:             void WriteOdometr(void)
15757:             {
00FB48  FA0004     LNK #0x4
15758:             
15759:                 unsigned char Ch[4];
15760:             
15761:                 Ch[0]=(unsigned char)Odometr;
00FB4A  818384     MOV Odometr, W4
00FB4C  818395     MOV 0x3072, W5
00FB4E  784204     MOV.B W4, W4
00FB50  784F04     MOV.B W4, [W14]
15762:                 Ch[1]=(unsigned char)(Odometr>>8);
00FB52  818384     MOV Odometr, W4
00FB54  818395     MOV 0x3072, W5
00FB56  DD2B48     SL W5, #8, W6
00FB58  DE2248     LSR W4, #8, W4
00FB5A  730204     IOR W6, W4, W4
00FB5C  DE2AC8     LSR W5, #8, W5
00FB5E  784204     MOV.B W4, W4
00FB60  984714     MOV.B W4, [W14+1]
15763:                 Ch[2]=(unsigned char)(Odometr>>16);
00FB62  818384     MOV Odometr, W4
00FB64  818395     MOV 0x3072, W5
00FB66  DE2A40     LSR W5, #0, W4
00FB68  200005     MOV #0x0, W5
00FB6A  784204     MOV.B W4, W4
00FB6C  984724     MOV.B W4, [W14+2]
15764:                 Ch[3]=(unsigned char)(Odometr>>24);
00FB6E  818384     MOV Odometr, W4
00FB70  818395     MOV 0x3072, W5
00FB72  DE2A48     LSR W5, #8, W4
00FB74  200005     MOV #0x0, W5
00FB76  784204     MOV.B W4, W4
00FB78  984734     MOV.B W4, [W14+3]
15765:             
15766:             
15767:                 WriteStat_FLASH(0);
00FB7A  EB4000     CLR.B W0
00FB7C  07ED3D     RCALL WriteStat_FLASH
15768:             
15769:                 WriteByte_FLASH((unsigned long int)4096, Ch[0]);
00FB7E  78421E     MOV.B [W14], W4
00FB80  784104     MOV.B W4, W2
00FB82  210000     MOV #0x1000, W0
00FB84  200001     MOV #0x0, W1
00FB86  07ECFB     RCALL WriteByte_FLASH
15770:                 WriteByte_FLASH((unsigned long int)4097, Ch[1]);
00FB88  90421E     MOV.B [W14+1], W4
00FB8A  784104     MOV.B W4, W2
00FB8C  210010     MOV #0x1001, W0
00FB8E  200001     MOV #0x0, W1
00FB90  07ECF6     RCALL WriteByte_FLASH
15771:                 WriteByte_FLASH((unsigned long int)4098, Ch[2]);
00FB92  90422E     MOV.B [W14+2], W4
00FB94  784104     MOV.B W4, W2
00FB96  210020     MOV #0x1002, W0
00FB98  200001     MOV #0x0, W1
00FB9A  07ECF1     RCALL WriteByte_FLASH
15772:                 WriteByte_FLASH((unsigned long int)4099, Ch[3]);
00FB9C  90423E     MOV.B [W14+3], W4
00FB9E  784104     MOV.B W4, W2
00FBA0  210030     MOV #0x1003, W0
00FBA2  200001     MOV #0x0, W1
00FBA4  07ECEC     RCALL WriteByte_FLASH
15773:             
15774:                 WriteStat_FLASH(0x3c);
00FBA6  B3C3C0     MOV.B #0x3C, W0
00FBA8  07ED27     RCALL WriteStat_FLASH
15775:             
15776:             }
00FBAA  FA8000     ULNK
00FBAC  060000     RETURN
15777:             
15778:             
15779:             
15780:             void ReadOdometr(void)
15781:             {
00FBAE  FA001C     LNK #0x1C
15782:             unsigned char Ch[24];
15783:             unsigned long int SectorAddr=8192;
00FBB0  220004     MOV #0x2000, W4
00FBB2  200005     MOV #0x0, W5
00FBB4  BE8F04     MOV.D W4, [W14]
15784:             
15785:             
15786:             ReadFlash(SectorAddr,sizeof(Ch),Ch);
00FBB6  470264     ADD W14, #0x4, W4
00FBB8  780184     MOV W4, W3
00FBBA  200182     MOV #0x18, W2
00FBBC  BE001E     MOV.D [W14], W0
00FBBE  07EC81     RCALL ReadFlash
15787:             Odometr=(((unsigned long int)Ch[3])<<24)+(((unsigned long int)Ch[2])<<16)+(((unsigned long int)Ch[1])<<8)+(unsigned long int)Ch[0];
00FBC0  90427E     MOV.B [W14+7], W4
00FBC2  FB8204     ZE W4, W4
00FBC4  200005     MOV #0x0, W5
00FBC6  DD23C8     SL W4, #8, W7
00FBC8  200006     MOV #0x0, W6
00FBCA  90426E     MOV.B [W14+6], W4
00FBCC  FB8204     ZE W4, W4
00FBCE  200005     MOV #0x0, W5
00FBD0  DD22C0     SL W4, #0, W5
00FBD2  200004     MOV #0x0, W4
00FBD4  420306     ADD W4, W6, W6
00FBD6  4A8387     ADDC W5, W7, W7
00FBD8  90425E     MOV.B [W14+5], W4
00FBDA  FB8004     ZE W4, W0
00FBDC  200001     MOV #0x0, W1
00FBDE  DD0A48     SL W1, #8, W4
00FBE0  DE02C8     LSR W0, #8, W5
00FBE2  720285     IOR W4, W5, W5
00FBE4  DD0248     SL W0, #8, W4
00FBE6  420306     ADD W4, W6, W6
00FBE8  4A8387     ADDC W5, W7, W7
00FBEA  90424E     MOV.B [W14+4], W4
00FBEC  FB8204     ZE W4, W4
00FBEE  200005     MOV #0x0, W5
00FBF0  420206     ADD W4, W6, W4
00FBF2  4A8287     ADDC W5, W7, W5
00FBF4  898384     MOV W4, Odometr
00FBF6  898395     MOV W5, 0x3072
15788:             CurrTuda1=(((unsigned long int)Ch[7])<<24)+(((unsigned long int)Ch[6])<<16)+(((unsigned long int)Ch[5])<<8)+(unsigned long int)Ch[4];
00FBF8  904A3E     MOV.B [W14+11], W4
00FBFA  FB8204     ZE W4, W4
00FBFC  200005     MOV #0x0, W5
00FBFE  DD23C8     SL W4, #8, W7
00FC00  200006     MOV #0x0, W6
00FC02  904A2E     MOV.B [W14+10], W4
00FC04  FB8204     ZE W4, W4
00FC06  200005     MOV #0x0, W5
00FC08  DD22C0     SL W4, #0, W5
00FC0A  200004     MOV #0x0, W4
00FC0C  420306     ADD W4, W6, W6
00FC0E  4A8387     ADDC W5, W7, W7
00FC10  904A1E     MOV.B [W14+9], W4
00FC12  FB8004     ZE W4, W0
00FC14  200001     MOV #0x0, W1
00FC16  DD0A48     SL W1, #8, W4
00FC18  DE02C8     LSR W0, #8, W5
00FC1A  720285     IOR W4, W5, W5
00FC1C  DD0248     SL W0, #8, W4
00FC1E  420306     ADD W4, W6, W6
00FC20  4A8387     ADDC W5, W7, W7
00FC22  904A0E     MOV.B [W14+8], W4
00FC24  FB8204     ZE W4, W4
00FC26  200005     MOV #0x0, W5
00FC28  420206     ADD W4, W6, W4
00FC2A  4A8287     ADDC W5, W7, W5
00FC2C  89B824     MOV W4, CurrTuda1
00FC2E  89B835     MOV W5, 0x3706
15789:             CurrRegen1=(((unsigned long int)Ch[11])<<24)+(((unsigned long int)Ch[10])<<16)+(((unsigned long int)Ch[9])<<8)+(unsigned long int)Ch[8];
00FC30  904A7E     MOV.B [W14+15], W4
00FC32  FB8204     ZE W4, W4
00FC34  200005     MOV #0x0, W5
00FC36  DD23C8     SL W4, #8, W7
00FC38  200006     MOV #0x0, W6
00FC3A  904A6E     MOV.B [W14+14], W4
00FC3C  FB8204     ZE W4, W4
00FC3E  200005     MOV #0x0, W5
00FC40  DD22C0     SL W4, #0, W5
00FC42  200004     MOV #0x0, W4
00FC44  420306     ADD W4, W6, W6
00FC46  4A8387     ADDC W5, W7, W7
00FC48  904A5E     MOV.B [W14+13], W4
00FC4A  FB8004     ZE W4, W0
00FC4C  200001     MOV #0x0, W1
00FC4E  DD0A48     SL W1, #8, W4
00FC50  DE02C8     LSR W0, #8, W5
00FC52  720285     IOR W4, W5, W5
00FC54  DD0248     SL W0, #8, W4
00FC56  420306     ADD W4, W6, W6
00FC58  4A8387     ADDC W5, W7, W7
00FC5A  904A4E     MOV.B [W14+12], W4
00FC5C  FB8204     ZE W4, W4
00FC5E  200005     MOV #0x0, W5
00FC60  420206     ADD W4, W6, W4
00FC62  4A8287     ADDC W5, W7, W5
00FC64  89B844     MOV W4, CurrRegen1
00FC66  89B855     MOV W5, 0x370A
15790:             CurrTuda2=(((unsigned long int)Ch[15])<<24)+(((unsigned long int)Ch[14])<<16)+(((unsigned long int)Ch[13])<<8)+(unsigned long int)Ch[12];
00FC68  90523E     MOV.B [W14+19], W4
00FC6A  FB8204     ZE W4, W4
00FC6C  200005     MOV #0x0, W5
00FC6E  DD23C8     SL W4, #8, W7
00FC70  200006     MOV #0x0, W6
00FC72  90522E     MOV.B [W14+18], W4
00FC74  FB8204     ZE W4, W4
00FC76  200005     MOV #0x0, W5
00FC78  DD22C0     SL W4, #0, W5
00FC7A  200004     MOV #0x0, W4
00FC7C  420306     ADD W4, W6, W6
00FC7E  4A8387     ADDC W5, W7, W7
00FC80  90521E     MOV.B [W14+17], W4
00FC82  FB8004     ZE W4, W0
00FC84  200001     MOV #0x0, W1
00FC86  DD0A48     SL W1, #8, W4
00FC88  DE02C8     LSR W0, #8, W5
00FC8A  720285     IOR W4, W5, W5
00FC8C  DD0248     SL W0, #8, W4
00FC8E  420306     ADD W4, W6, W6
00FC90  4A8387     ADDC W5, W7, W7
00FC92  90520E     MOV.B [W14+16], W4
00FC94  FB8204     ZE W4, W4
00FC96  200005     MOV #0x0, W5
00FC98  420206     ADD W4, W6, W4
00FC9A  4A8287     ADDC W5, W7, W5
00FC9C  89B864     MOV W4, CurrTuda2
00FC9E  89B875     MOV W5, 0x370E
15791:             CurrRegen2=(((unsigned long int)Ch[19])<<24)+(((unsigned long int)Ch[18])<<16)+(((unsigned long int)Ch[17])<<8)+(unsigned long int)Ch[16];
00FCA0  90527E     MOV.B [W14+23], W4
00FCA2  FB8204     ZE W4, W4
00FCA4  200005     MOV #0x0, W5
00FCA6  DD23C8     SL W4, #8, W7
00FCA8  200006     MOV #0x0, W6
00FCAA  90526E     MOV.B [W14+22], W4
00FCAC  FB8204     ZE W4, W4
00FCAE  200005     MOV #0x0, W5
00FCB0  DD22C0     SL W4, #0, W5
00FCB2  200004     MOV #0x0, W4
00FCB4  420306     ADD W4, W6, W6
00FCB6  4A8387     ADDC W5, W7, W7
00FCB8  90525E     MOV.B [W14+21], W4
00FCBA  FB8004     ZE W4, W0
00FCBC  200001     MOV #0x0, W1
00FCBE  DD0A48     SL W1, #8, W4
00FCC0  DE02C8     LSR W0, #8, W5
00FCC2  720285     IOR W4, W5, W5
00FCC4  DD0248     SL W0, #8, W4
00FCC6  420306     ADD W4, W6, W6
00FCC8  4A8387     ADDC W5, W7, W7
00FCCA  90524E     MOV.B [W14+20], W4
00FCCC  FB8204     ZE W4, W4
00FCCE  200005     MOV #0x0, W5
00FCD0  420206     ADD W4, W6, W4
00FCD2  4A8287     ADDC W5, W7, W5
00FCD4  89B884     MOV W4, CurrRegen2
00FCD6  89B895     MOV W5, 0x3712
15792:             Distance=(((unsigned long int)Ch[23])<<24)+(((unsigned long int)Ch[22])<<16)+(((unsigned long int)Ch[21])<<8)+(unsigned long int)Ch[20];
00FCD8  905A3E     MOV.B [W14+27], W4
00FCDA  FB8204     ZE W4, W4
00FCDC  200005     MOV #0x0, W5
00FCDE  DD23C8     SL W4, #8, W7
00FCE0  200006     MOV #0x0, W6
00FCE2  905A2E     MOV.B [W14+26], W4
00FCE4  FB8204     ZE W4, W4
00FCE6  200005     MOV #0x0, W5
00FCE8  DD22C0     SL W4, #0, W5
00FCEA  200004     MOV #0x0, W4
00FCEC  420306     ADD W4, W6, W6
00FCEE  4A8387     ADDC W5, W7, W7
00FCF0  905A1E     MOV.B [W14+25], W4
00FCF2  FB8004     ZE W4, W0
00FCF4  200001     MOV #0x0, W1
00FCF6  DD0A48     SL W1, #8, W4
00FCF8  DE02C8     LSR W0, #8, W5
00FCFA  720285     IOR W4, W5, W5
00FCFC  DD0248     SL W0, #8, W4
00FCFE  420306     ADD W4, W6, W6
00FD00  4A8387     ADDC W5, W7, W7
00FD02  905A0E     MOV.B [W14+24], W4
00FD04  FB8204     ZE W4, W4
00FD06  200005     MOV #0x0, W5
00FD08  420206     ADD W4, W6, W4
00FD0A  4A8287     ADDC W5, W7, W5
00FD0C  89B8A4     MOV W4, Distance
00FD0E  89B8B5     MOV W5, 0x3716
15793:             
15794:             }
00FD10  FA8000     ULNK
00FD12  060000     RETURN
15795:             
15796:             
15797:             
15798:             
15799:             void WriteOdometrNew(void)
15800:             {
00FD14  FA001E     LNK #0x1E
15801:                 unsigned long int SectorAddr;
15802:                 unsigned char Ch[24],k;
15803:             
15804:                 //return;
15805:                 SectorAddr=8192;//4096*OdometrSectorNum;
00FD16  220004     MOV #0x2000, W4
00FD18  200005     MOV #0x0, W5
00FD1A  980714     MOV W4, [W14+2]
00FD1C  980725     MOV W5, [W14+4]
15806:             
15807:               /*  Odometr=0x12345678;
15808:                 CurrTuda1=0x90abcdef;
15809:                 CurrRegen1=0x567890ab;
15810:                 CurrTuda2=0xcdef1234;
15811:                 CurrRegen2=0x12345678;
15812:                 Distance=0x90abcdef;
15813:             */
15814:             
15815:                 Ch[0]=(unsigned char)Odometr;
00FD1E  818384     MOV Odometr, W4
00FD20  818395     MOV 0x3072, W5
00FD22  784204     MOV.B W4, W4
00FD24  984764     MOV.B W4, [W14+6]
15816:                 Ch[1]=(unsigned char)(Odometr>>8);
00FD26  818384     MOV Odometr, W4
00FD28  818395     MOV 0x3072, W5
00FD2A  DD2B48     SL W5, #8, W6
00FD2C  DE2248     LSR W4, #8, W4
00FD2E  730204     IOR W6, W4, W4
00FD30  DE2AC8     LSR W5, #8, W5
00FD32  784204     MOV.B W4, W4
00FD34  984774     MOV.B W4, [W14+7]
15817:                 Ch[2]=(unsigned char)(Odometr>>16);
00FD36  818384     MOV Odometr, W4
00FD38  818395     MOV 0x3072, W5
00FD3A  DE2A40     LSR W5, #0, W4
00FD3C  200005     MOV #0x0, W5
00FD3E  784204     MOV.B W4, W4
00FD40  984F04     MOV.B W4, [W14+8]
15818:                 Ch[3]=(unsigned char)(Odometr>>24);
00FD42  818384     MOV Odometr, W4
00FD44  818395     MOV 0x3072, W5
00FD46  DE2A48     LSR W5, #8, W4
00FD48  200005     MOV #0x0, W5
00FD4A  784204     MOV.B W4, W4
00FD4C  984F14     MOV.B W4, [W14+9]
15819:             
15820:                 Ch[4]=(unsigned char)CurrTuda1;
00FD4E  81B824     MOV CurrTuda1, W4
00FD50  81B835     MOV 0x3706, W5
00FD52  784204     MOV.B W4, W4
00FD54  984F24     MOV.B W4, [W14+10]
15821:                 Ch[5]=(unsigned char)(CurrTuda1>>8);
00FD56  81B824     MOV CurrTuda1, W4
00FD58  81B835     MOV 0x3706, W5
00FD5A  DD2B48     SL W5, #8, W6
00FD5C  DE2248     LSR W4, #8, W4
00FD5E  730204     IOR W6, W4, W4
00FD60  DE2AC8     LSR W5, #8, W5
00FD62  784204     MOV.B W4, W4
00FD64  984F34     MOV.B W4, [W14+11]
15822:                 Ch[6]=(unsigned char)(CurrTuda1>>16);
00FD66  81B824     MOV CurrTuda1, W4
00FD68  81B835     MOV 0x3706, W5
00FD6A  DE2A40     LSR W5, #0, W4
00FD6C  200005     MOV #0x0, W5
00FD6E  784204     MOV.B W4, W4
00FD70  984F44     MOV.B W4, [W14+12]
15823:                 Ch[7]=(unsigned char)(CurrTuda1>>24);
00FD72  81B824     MOV CurrTuda1, W4
00FD74  81B835     MOV 0x3706, W5
00FD76  DE2A48     LSR W5, #8, W4
00FD78  200005     MOV #0x0, W5
00FD7A  784204     MOV.B W4, W4
00FD7C  984F54     MOV.B W4, [W14+13]
15824:             
15825:                 Ch[8]=(unsigned char)CurrRegen1;
00FD7E  81B844     MOV CurrRegen1, W4
00FD80  81B855     MOV 0x370A, W5
00FD82  784204     MOV.B W4, W4
00FD84  984F64     MOV.B W4, [W14+14]
15826:                 Ch[9]=(unsigned char)(CurrRegen1>>8);
00FD86  81B844     MOV CurrRegen1, W4
00FD88  81B855     MOV 0x370A, W5
00FD8A  DD2B48     SL W5, #8, W6
00FD8C  DE2248     LSR W4, #8, W4
00FD8E  730204     IOR W6, W4, W4
00FD90  DE2AC8     LSR W5, #8, W5
00FD92  784204     MOV.B W4, W4
00FD94  984F74     MOV.B W4, [W14+15]
15827:                 Ch[10]=(unsigned char)(CurrRegen1>>16);
00FD96  81B844     MOV CurrRegen1, W4
00FD98  81B855     MOV 0x370A, W5
00FD9A  DE2A40     LSR W5, #0, W4
00FD9C  200005     MOV #0x0, W5
00FD9E  784204     MOV.B W4, W4
00FDA0  985704     MOV.B W4, [W14+16]
15828:                 Ch[11]=(unsigned char)(CurrRegen1>>24);
00FDA2  81B844     MOV CurrRegen1, W4
00FDA4  81B855     MOV 0x370A, W5
00FDA6  DE2A48     LSR W5, #8, W4
00FDA8  200005     MOV #0x0, W5
00FDAA  784204     MOV.B W4, W4
00FDAC  985714     MOV.B W4, [W14+17]
15829:             
15830:                 Ch[12]=(unsigned char)CurrTuda2;
00FDAE  81B864     MOV CurrTuda2, W4
00FDB0  81B875     MOV 0x370E, W5
00FDB2  784204     MOV.B W4, W4
00FDB4  985724     MOV.B W4, [W14+18]
15831:                 Ch[13]=(unsigned char)(CurrTuda2>>8);
00FDB6  81B864     MOV CurrTuda2, W4
00FDB8  81B875     MOV 0x370E, W5
00FDBA  DD2B48     SL W5, #8, W6
00FDBC  DE2248     LSR W4, #8, W4
00FDBE  730204     IOR W6, W4, W4
00FDC0  DE2AC8     LSR W5, #8, W5
00FDC2  784204     MOV.B W4, W4
00FDC4  985734     MOV.B W4, [W14+19]
15832:                 Ch[14]=(unsigned char)(CurrTuda2>>16);
00FDC6  81B864     MOV CurrTuda2, W4
00FDC8  81B875     MOV 0x370E, W5
00FDCA  DE2A40     LSR W5, #0, W4
00FDCC  200005     MOV #0x0, W5
00FDCE  784204     MOV.B W4, W4
00FDD0  985744     MOV.B W4, [W14+20]
15833:                 Ch[15]=(unsigned char)(CurrTuda2>>24);
00FDD2  81B864     MOV CurrTuda2, W4
00FDD4  81B875     MOV 0x370E, W5
00FDD6  DE2A48     LSR W5, #8, W4
00FDD8  200005     MOV #0x0, W5
00FDDA  784204     MOV.B W4, W4
00FDDC  985754     MOV.B W4, [W14+21]
15834:             
15835:                 Ch[16]=(unsigned char)CurrRegen2;
00FDDE  81B884     MOV CurrRegen2, W4
00FDE0  81B895     MOV 0x3712, W5
00FDE2  784204     MOV.B W4, W4
00FDE4  985764     MOV.B W4, [W14+22]
15836:                 Ch[17]=(unsigned char)(CurrRegen2>>8);
00FDE6  81B884     MOV CurrRegen2, W4
00FDE8  81B895     MOV 0x3712, W5
00FDEA  DD2B48     SL W5, #8, W6
00FDEC  DE2248     LSR W4, #8, W4
00FDEE  730204     IOR W6, W4, W4
00FDF0  DE2AC8     LSR W5, #8, W5
00FDF2  784204     MOV.B W4, W4
00FDF4  985774     MOV.B W4, [W14+23]
15837:                 Ch[18]=(unsigned char)(CurrRegen2>>16);
00FDF6  81B884     MOV CurrRegen2, W4
00FDF8  81B895     MOV 0x3712, W5
00FDFA  DE2A40     LSR W5, #0, W4
00FDFC  200005     MOV #0x0, W5
00FDFE  784204     MOV.B W4, W4
00FE00  985F04     MOV.B W4, [W14+24]
15838:                 Ch[19]=(unsigned char)(CurrRegen2>>24);
00FE02  81B884     MOV CurrRegen2, W4
00FE04  81B895     MOV 0x3712, W5
00FE06  DE2A48     LSR W5, #8, W4
00FE08  200005     MOV #0x0, W5
00FE0A  784204     MOV.B W4, W4
00FE0C  985F14     MOV.B W4, [W14+25]
15839:             
15840:                 Ch[20]=(unsigned char)Distance;
00FE0E  81B8A4     MOV Distance, W4
00FE10  81B8B5     MOV 0x3716, W5
00FE12  784204     MOV.B W4, W4
00FE14  985F24     MOV.B W4, [W14+26]
15841:                 Ch[21]=(unsigned char)(Distance>>8);
00FE16  81B8A4     MOV Distance, W4
00FE18  81B8B5     MOV 0x3716, W5
00FE1A  DD2B48     SL W5, #8, W6
00FE1C  DE2248     LSR W4, #8, W4
00FE1E  730204     IOR W6, W4, W4
00FE20  DE2AC8     LSR W5, #8, W5
00FE22  784204     MOV.B W4, W4
00FE24  985F34     MOV.B W4, [W14+27]
15842:                 Ch[22]=(unsigned char)(Distance>>16);
00FE26  81B8A4     MOV Distance, W4
00FE28  81B8B5     MOV 0x3716, W5
00FE2A  DE2A40     LSR W5, #0, W4
00FE2C  200005     MOV #0x0, W5
00FE2E  784204     MOV.B W4, W4
00FE30  985F44     MOV.B W4, [W14+28]
15843:                 Ch[23]=(unsigned char)(Distance>>24);
00FE32  81B8A4     MOV Distance, W4
00FE34  81B8B5     MOV 0x3716, W5
00FE36  DE2A48     LSR W5, #8, W4
00FE38  200005     MOV #0x0, W5
00FE3A  784204     MOV.B W4, W4
00FE3C  985F54     MOV.B W4, [W14+29]
15844:             
15845:                 WriteStat_FLASH(0);
00FE3E  EB4000     CLR.B W0
00FE40  07EBDB     RCALL WriteStat_FLASH
15846:                 EraseSector_FLASH(SectorAddr);
00FE42  90001E     MOV [W14+2], W0
00FE44  9000AE     MOV [W14+4], W1
00FE46  07EBED     RCALL EraseSector_FLASH
15847:                 WriteStat_FLASH(0x3c);
00FE48  B3C3C0     MOV.B #0x3C, W0
00FE4A  07EBD6     RCALL WriteStat_FLASH
15848:             
15849:             
15850:                 WriteStat_FLASH(0);
00FE4C  EB4000     CLR.B W0
00FE4E  07EBD4     RCALL WriteStat_FLASH
15851:             
15852:                 for (k=0;k<sizeof(Ch);k++)
00FE50  EB4200     CLR.B W4
00FE52  784F04     MOV.B W4, [W14]
00FE54  37000F     BRA 0xFE74
00FE72  E84F1E     INC.B [W14], [W14]
00FE74  78421E     MOV.B [W14], W4
00FE76  524FF7     SUB.B W4, #0x17, [W15]
00FE78  36FFEE     BRA LEU, 0xFE56
15853:                 WriteByte_FLASH(SectorAddr+k, Ch[k]);
00FE56  78429E     MOV.B [W14], W5
00FE58  FB8205     ZE W5, W4
00FE5A  420266     ADD W4, #0x6, W4
00FE5C  7A406E     MOV.B [W14+W4], W0
00FE5E  78421E     MOV.B [W14], W4
00FE60  FB8304     ZE W4, W6
00FE62  200007     MOV #0x0, W7
00FE64  90021E     MOV [W14+2], W4
00FE66  9002AE     MOV [W14+4], W5
00FE68  420206     ADD W4, W6, W4
00FE6A  4A8287     ADDC W5, W7, W5
00FE6C  784100     MOV.B W0, W2
00FE6E  BE0004     MOV.D W4, W0
00FE70  07EB86     RCALL WriteByte_FLASH
15854:             
15855:             
15856:                 WriteStat_FLASH(0x3c);
00FE7A  B3C3C0     MOV.B #0x3C, W0
00FE7C  07EBBD     RCALL WriteStat_FLASH
15857:                 Nop();
00FE7E  000000     NOP
15858:                 Nop();
00FE80  000000     NOP
15859:                 Nop();
00FE82  000000     NOP
15860:                 Nop();
00FE84  000000     NOP
15861:             /*
15862:                 if (OdometrSectorNum>1)
15863:                     OdometrSectorNum--;
15864:                 else
15865:                     OdometrSectorNum=OdometrSectorNumConst-1;
15866:                 SectorAddr=4096*OdometrSectorNum;
15867:             
15868:                 WriteStat_FLASH(0);
15869:                 EraseSector_FLASH(SectorAddr);
15870:                 WriteStat_FLASH(0x3c);
15871:             
15872:                 OdometrSectorNum++;
15873:                 if (OdometrSectorNum>=OdometrSectorNumConst)
15874:                     OdometrSectorNum=1;
15875:                 OdometrSectorNum++;
15876:                 if (OdometrSectorNum>=OdometrSectorNumConst)
15877:                     OdometrSectorNum=1;
15878:             */
15879:             }
00FE86  FA8000     ULNK
00FE88  060000     RETURN
15880:             
15881:             
15882:             void WrOdmtr(void)
15883:             {
00FE8A  FA0000     LNK #0x0
15884:                 if (!RecOdometrFl)
00FE8C  809605     MOV Flgs1, W5
00FE8E  200404     MOV #0x40, W4
00FE90  628204     AND W5, W4, W4
00FE92  520FE0     SUB W4, #0x0, [W15]
00FE94  320013     BRA Z, 0xFEBC
15885:                     return;
00FEBC  000000     NOP
15886:                     RecOdometrFl=0;
00FE96  809604     MOV Flgs1, W4
00FE98  A16004     BCLR W4, #6
00FE9A  889604     MOV W4, Flgs1
15887:                     if (Beep_10m)
00FE9C  809744     MOV StatFlgs, W4
00FE9E  620268     AND W4, #0x8, W4
00FEA0  520FE0     SUB W4, #0x0, [W15]
00FEA2  320003     BRA Z, 0xFEAA
15888:                     {
15889:                         SoundNum=12;
00FEA4  2124B5     MOV #0x124B, W5
00FEA6  B3C0C4     MOV.B #0xC, W4
00FEA8  784A84     MOV.B W4, [W5]
15890:                     }
15891:             
15892:                     WriteOdometrNew();
00FEAA  07FF34     RCALL WriteOdometrNew
15893:                     Nop();
00FEAC  000000     NOP
15894:                     Nop();
00FEAE  000000     NOP
15895:                     Nop();
00FEB0  000000     NOP
15896:                     ReadOdometr();
00FEB2  07FE7D     RCALL ReadOdometr
15897:                     Nop();
00FEB4  000000     NOP
15898:                     Nop();
00FEB6  000000     NOP
15899:                     Nop();
00FEB8  000000     NOP
00FEBA  370001     BRA 0xFEBE
15900:                     
15901:                     /*
15902:                     if (Beep_10m)
15903:                     {
15904:                     SingleBeep=1;
15905:                    BzOnCnt=0;
15906:                    BzOnCntConst=50;
15907:                    BuzzerMacroOn//Buzzer=1;
15908:                     }
15909:                    SendPhase=1;*/
15910:             }
00FEBE  FA8000     ULNK
00FEC0  060000     RETURN
15911:             
15912:             
15913:             void Buttons(void)
15914:             {
00FEC2  FA0000     LNK #0x0
15915:             #if !defined REV2
15916:                 unsigned char HvBt1Tmp,HvBt2Tmp,HvBt3Tmp,HvBt4Tmp,HvBt5Tmp;
15917:                 unsigned char Bt1UpTmp,Bt2UpTmp,Bt3UpTmp,Bt4UpTmp,Bt5UpTmp;
15918:             #endif
15919:                 if (StartingBTN)
00FEC4  809685     MOV Flgs5, W5
00FEC6  240004     MOV #0x4000, W4
00FEC8  628204     AND W5, W4, W4
00FECA  520FE0     SUB W4, #0x0, [W15]
00FECC  320047     BRA Z, 0xFF5C
15920:                 {
15921:                     if (!But1)
00FECE  807094     MOV PORTB, W4
00FED0  620270     AND W4, #0x10, W4
00FED2  520FE0     SUB W4, #0x0, [W15]
00FED4  3A0007     BRA NZ, 0xFEE4
15922:                     {
15923:                      But1Pressed=1;
00FED6  809684     MOV Flgs5, W4
00FED8  A02004     BSET W4, #2
00FEDA  889684     MOV W4, Flgs5
15924:                      HvBt1=1;
00FEDC  809684     MOV Flgs5, W4
00FEDE  A07004     BSET W4, #7
00FEE0  889684     MOV W4, Flgs5
00FEE2  370006     BRA 0xFEF0
15925:                     }
15926:                     else
15927:                     {
15928:                      But1Pressed=0;
00FEE4  809684     MOV Flgs5, W4
00FEE6  A12004     BCLR W4, #2
00FEE8  889684     MOV W4, Flgs5
15929:                      Bt1Up=1;
00FEEA  809684     MOV Flgs5, W4
00FEEC  A06004     BSET W4, #6
00FEEE  889684     MOV W4, Flgs5
15930:                     }
15931:                     if (!But2)
00FEF0  807095     MOV PORTB, W5
00FEF2  204004     MOV #0x400, W4
00FEF4  628204     AND W5, W4, W4
00FEF6  520FE0     SUB W4, #0x0, [W15]
00FEF8  3A0007     BRA NZ, 0xFF08
15932:                     {
15933:                      But2Pressed=1;
00FEFA  809684     MOV Flgs5, W4
00FEFC  A0B004     BSET W4, #11
00FEFE  889684     MOV W4, Flgs5
15934:                      HvBt2=1;
00FF00  809684     MOV Flgs5, W4
00FF02  A0A004     BSET W4, #10
00FF04  889684     MOV W4, Flgs5
00FF06  370006     BRA 0xFF14
15935:                     }
15936:                     else
15937:                     {
15938:                      But2Pressed=0;
00FF08  809684     MOV Flgs5, W4
00FF0A  A1B004     BCLR W4, #11
00FF0C  889684     MOV W4, Flgs5
15939:                      Bt2Up=1;
00FF0E  809684     MOV Flgs5, W4
00FF10  A09004     BSET W4, #9
00FF12  889684     MOV W4, Flgs5
15940:                     }
15941:                     if (!But3)
00FF14  807095     MOV PORTB, W5
00FF16  208004     MOV #0x800, W4
00FF18  628204     AND W5, W4, W4
00FF1A  520FE0     SUB W4, #0x0, [W15]
00FF1C  3A0007     BRA NZ, 0xFF2C
15942:                     {
15943:                      But3Pressed=1;
00FF1E  809624     MOV Flgs2, W4
00FF20  A09004     BSET W4, #9
00FF22  889624     MOV W4, Flgs2
15944:                      HvBt3=1;
00FF24  809684     MOV Flgs5, W4
00FF26  A01004     BSET W4, #1
00FF28  889684     MOV W4, Flgs5
00FF2A  370006     BRA 0xFF38
15945:                     }
15946:                     else
15947:                     {
15948:                      But3Pressed=0;
00FF2C  809624     MOV Flgs2, W4
00FF2E  A19004     BCLR W4, #9
00FF30  889624     MOV W4, Flgs2
15949:                      Bt3Up=1;
00FF32  809684     MOV Flgs5, W4
00FF34  A00004     BSET W4, #0
00FF36  889684     MOV W4, Flgs5
15950:                     }
15951:                     if (!But4)
00FF38  807195     MOV PORTD, W5
00FF3A  280004     MOV #0x8000, W4
00FF3C  628204     AND W5, W4, W4
00FF3E  520FE0     SUB W4, #0x0, [W15]
00FF40  3A0007     BRA NZ, 0xFF50
15952:                     {
15953:                      But4Pressed=1;
00FF42  809604     MOV Flgs1, W4
00FF44  A07004     BSET W4, #7
00FF46  889604     MOV W4, Flgs1
15954:                      HvBt4=1;
00FF48  809604     MOV Flgs1, W4
00FF4A  A09004     BSET W4, #9
00FF4C  889604     MOV W4, Flgs1
00FF4E  370006     BRA 0xFF5C
15955:                     }
15956:                     else
15957:                     {
15958:                      But4Pressed=0;
00FF50  809604     MOV Flgs1, W4
00FF52  A17004     BCLR W4, #7
00FF54  889604     MOV W4, Flgs1
15959:                      Bt4Up=1;
00FF56  809604     MOV Flgs1, W4
00FF58  A0E004     BSET W4, #14
00FF5A  889604     MOV W4, Flgs1
15960:                     }
15961:                         
15962:                 }
15963:                    if (!But1Pressed)
00FF5C  809684     MOV Flgs5, W4
00FF5E  620264     AND W4, #0x4, W4
00FF60  520FE0     SUB W4, #0x0, [W15]
00FF62  3A002E     BRA NZ, 0xFFC0
15964:                    {
15965:                        if (Bt1Cnt)
00FF64  230944     MOV #0x3094, W4
00FF66  784214     MOV.B [W4], W4
00FF68  524FE0     SUB.B W4, #0x0, [W15]
00FF6A  32001C     BRA Z, 0xFFA4
15966:                        {
15967:                            if (!But1)
00FF6C  807094     MOV PORTB, W4
00FF6E  620270     AND W4, #0x10, W4
00FF70  520FE0     SUB W4, #0x0, [W15]
00FF72  3A0008     BRA NZ, 0xFF84
15968:                            {
15969:                                Bt1Cnt=Bt1CntConst;
00FF74  230984     MOV #0x3098, W4
00FF76  784214     MOV.B [W4], W4
00FF78  230945     MOV #0x3094, W5
00FF7A  784A84     MOV.B W4, [W5]
15970:                                But1Pressed=1;
00FF7C  809684     MOV Flgs5, W4
00FF7E  A02004     BSET W4, #2
00FF80  889684     MOV W4, Flgs5
00FF82  370053     BRA 0x1002A
15971:                            }
15972:                            else
15973:                            {
15974:                            Bt1Cnt--;
00FF84  230944     MOV #0x3094, W4
00FF86  784214     MOV.B [W4], W4
00FF88  E94204     DEC.B W4, W4
00FF8A  230945     MOV #0x3094, W5
00FF8C  784A84     MOV.B W4, [W5]
15975:                            if (!Bt1Cnt)
00FF8E  230944     MOV #0x3094, W4
00FF90  784214     MOV.B [W4], W4
00FF92  524FE0     SUB.B W4, #0x0, [W15]
00FF94  3A004A     BRA NZ, 0x1002A
15976:                            {
15977:                            Drebezg1=0;
00FF96  809684     MOV Flgs5, W4
00FF98  A15004     BCLR W4, #5
00FF9A  889684     MOV W4, Flgs5
15978:                            Bt1Up=1;
00FF9C  809684     MOV Flgs5, W4
00FF9E  A06004     BSET W4, #6
00FFA0  889684     MOV W4, Flgs5
00FFA2  370043     BRA 0x1002A
15979:                            }
15980:                            }
15981:                        }
15982:                        else
15983:                        {
15984:                            Bt1LongCnt=0;
00FFA4  EB0200     CLR W4
00FFA6  8984E4     MOV W4, Bt1LongCnt
15985:                            if (!But1)
00FFA8  807094     MOV PORTB, W4
00FFAA  620270     AND W4, #0x10, W4
00FFAC  520FE0     SUB W4, #0x0, [W15]
00FFAE  3A003D     BRA NZ, 0x1002A
15986:                            {
15987:                                Bt1Cnt=Bt1CntConst;
00FFB0  230984     MOV #0x3098, W4
00FFB2  784214     MOV.B [W4], W4
00FFB4  230945     MOV #0x3094, W5
00FFB6  784A84     MOV.B W4, [W5]
15988:                                But1Pressed=1;
00FFB8  809684     MOV Flgs5, W4
00FFBA  A02004     BSET W4, #2
00FFBC  889684     MOV W4, Flgs5
00FFBE  370035     BRA 0x1002A
15989:                            }
15990:                        }
15991:                    }
15992:                    else
15993:                    {
15994:                        if (Bt1Cnt)
00FFC0  230944     MOV #0x3094, W4
00FFC2  784214     MOV.B [W4], W4
00FFC4  524FE0     SUB.B W4, #0x0, [W15]
00FFC6  320023     BRA Z, 0x1000E
15995:                        {
15996:                            if (But1)
00FFC8  807094     MOV PORTB, W4
00FFCA  620270     AND W4, #0x10, W4
00FFCC  520FE0     SUB W4, #0x0, [W15]
00FFCE  320008     BRA Z, 0xFFE0
15997:                            {
15998:                                Bt1Cnt=Bt1CntConst;
00FFD0  230984     MOV #0x3098, W4
00FFD2  784214     MOV.B [W4], W4
00FFD4  230945     MOV #0x3094, W5
00FFD6  784A84     MOV.B W4, [W5]
15999:                                But1Pressed=0;
00FFD8  809684     MOV Flgs5, W4
00FFDA  A12004     BCLR W4, #2
00FFDC  889684     MOV W4, Flgs5
00FFDE  370025     BRA 0x1002A
16000:                            }
16001:                            else
16002:                            {
16003:                            Bt1Cnt--;
00FFE0  230944     MOV #0x3094, W4
00FFE2  784214     MOV.B [W4], W4
00FFE4  E94204     DEC.B W4, W4
00FFE6  230945     MOV #0x3094, W5
00FFE8  784A84     MOV.B W4, [W5]
16004:                            if (!Bt1Cnt)
00FFEA  230944     MOV #0x3094, W4
00FFEC  784214     MOV.B [W4], W4
00FFEE  524FE0     SUB.B W4, #0x0, [W15]
00FFF0  3A001C     BRA NZ, 0x1002A
16005:                            {
16006:                                if (!Drebezg1)
00FFF2  809685     MOV Flgs5, W5
00FFF4  200204     MOV #0x20, W4
00FFF6  628204     AND W5, W4, W4
00FFF8  520FE0     SUB W4, #0x0, [W15]
00FFFA  3A0017     BRA NZ, 0x1002A
16007:                                {
16008:                                HvBt1=1;
00FFFC  809684     MOV Flgs5, W4
00FFFE  A07004     BSET W4, #7
010000  889684     MOV W4, Flgs5
16009:                                Drebezg1=1;
010002  809684     MOV Flgs5, W4
010004  A05004     BSET W4, #5
010006  889684     MOV W4, Flgs5
16010:                                Bt1LongCnt=0;
010008  EB0200     CLR W4
01000A  8984E4     MOV W4, Bt1LongCnt
01000C  37000E     BRA 0x1002A
16011:                                }
16012:                            }
16013:                            }
16014:                        }
16015:                        else
16016:                        {
16017:                            if (But1)
01000E  807094     MOV PORTB, W4
010010  620270     AND W4, #0x10, W4
010012  520FE0     SUB W4, #0x0, [W15]
010014  320007     BRA Z, 0x10024
16018:                            {
16019:                                Bt1Cnt=Bt1CntConst;
010016  230984     MOV #0x3098, W4
010018  784214     MOV.B [W4], W4
01001A  230945     MOV #0x3094, W5
01001C  784A84     MOV.B W4, [W5]
16020:                                But1Pressed=0;
01001E  809684     MOV Flgs5, W4
010020  A12004     BCLR W4, #2
010022  889684     MOV W4, Flgs5
16021:                            }
16022:                            Bt1LongCnt++;
010024  8184E4     MOV Bt1LongCnt, W4
010026  E80204     INC W4, W4
010028  8984E4     MOV W4, Bt1LongCnt
16023:                        }
16024:                    }
16025:             
16026:                 
16027:                 
16028:                    if (!But2Pressed)
01002A  809685     MOV Flgs5, W5
01002C  208004     MOV #0x800, W4
01002E  628204     AND W5, W4, W4
010030  520FE0     SUB W4, #0x0, [W15]
010032  3A0030     BRA NZ, 0x10094
16029:                    {
16030:                        if (Bt2Cnt)
010034  230954     MOV #0x3095, W4
010036  784214     MOV.B [W4], W4
010038  524FE0     SUB.B W4, #0x0, [W15]
01003A  32001D     BRA Z, 0x10076
16031:                        {
16032:                            if (!But2)
01003C  807095     MOV PORTB, W5
01003E  204004     MOV #0x400, W4
010040  628204     AND W5, W4, W4
010042  520FE0     SUB W4, #0x0, [W15]
010044  3A0008     BRA NZ, 0x10056
16033:                            {
16034:                                Bt2Cnt=Bt2CntConst;
010046  230994     MOV #0x3099, W4
010048  784214     MOV.B [W4], W4
01004A  230955     MOV #0x3095, W5
01004C  784A84     MOV.B W4, [W5]
16035:                                But2Pressed=1;
01004E  809684     MOV Flgs5, W4
010050  A0B004     BSET W4, #11
010052  889684     MOV W4, Flgs5
010054  370056     BRA 0x10102
16036:                            }
16037:                            else
16038:                            {
16039:                            Bt2Cnt--;
010056  230954     MOV #0x3095, W4
010058  784214     MOV.B [W4], W4
01005A  E94204     DEC.B W4, W4
01005C  230955     MOV #0x3095, W5
01005E  784A84     MOV.B W4, [W5]
16040:                            if (!Bt2Cnt)
010060  230954     MOV #0x3095, W4
010062  784214     MOV.B [W4], W4
010064  524FE0     SUB.B W4, #0x0, [W15]
010066  3A004D     BRA NZ, 0x10102
16041:                            {
16042:                            Drebezg2=0;
010068  8096B4     MOV 0x12D6, W4
01006A  A1D004     BCLR W4, #13
01006C  8896B4     MOV W4, 0x12D6
16043:                            Bt2Up=1;
01006E  809684     MOV Flgs5, W4
010070  A09004     BSET W4, #9
010072  889684     MOV W4, Flgs5
010074  370046     BRA 0x10102
16044:                            }
16045:                            }
16046:                        }
16047:                        else
16048:                        {
16049:                            Bt2LongCnt=0;
010076  EB0200     CLR W4
010078  8984F4     MOV W4, Bt2LongCnt
16050:                            if (!But2)
01007A  807095     MOV PORTB, W5
01007C  204004     MOV #0x400, W4
01007E  628204     AND W5, W4, W4
010080  520FE0     SUB W4, #0x0, [W15]
010082  3A003F     BRA NZ, 0x10102
16051:                            {
16052:                                Bt2Cnt=Bt2CntConst;
010084  230994     MOV #0x3099, W4
010086  784214     MOV.B [W4], W4
010088  230955     MOV #0x3095, W5
01008A  784A84     MOV.B W4, [W5]
16053:                                But2Pressed=1;
01008C  809684     MOV Flgs5, W4
01008E  A0B004     BSET W4, #11
010090  889684     MOV W4, Flgs5
010092  370037     BRA 0x10102
16054:                            }
16055:                        }
16056:                    }
16057:                    else
16058:                    {
16059:                        if (Bt2Cnt)
010094  230954     MOV #0x3095, W4
010096  784214     MOV.B [W4], W4
010098  524FE0     SUB.B W4, #0x0, [W15]
01009A  320024     BRA Z, 0x100E4
16060:                        {
16061:                            if (But2)
01009C  807095     MOV PORTB, W5
01009E  204004     MOV #0x400, W4
0100A0  628204     AND W5, W4, W4
0100A2  520FE0     SUB W4, #0x0, [W15]
0100A4  320008     BRA Z, 0x100B6
16062:                            {
16063:                                Bt2Cnt=Bt2CntConst;
0100A6  230994     MOV #0x3099, W4
0100A8  784214     MOV.B [W4], W4
0100AA  230955     MOV #0x3095, W5
0100AC  784A84     MOV.B W4, [W5]
16064:                                But2Pressed=0;
0100AE  809684     MOV Flgs5, W4
0100B0  A1B004     BCLR W4, #11
0100B2  889684     MOV W4, Flgs5
0100B4  370026     BRA 0x10102
16065:                            }
16066:                            else
16067:                            {
16068:                            Bt2Cnt--;
0100B6  230954     MOV #0x3095, W4
0100B8  784214     MOV.B [W4], W4
0100BA  E94204     DEC.B W4, W4
0100BC  230955     MOV #0x3095, W5
0100BE  784A84     MOV.B W4, [W5]
16069:                            if (!Bt2Cnt)
0100C0  230954     MOV #0x3095, W4
0100C2  784214     MOV.B [W4], W4
0100C4  524FE0     SUB.B W4, #0x0, [W15]
0100C6  3A001D     BRA NZ, 0x10102
16070:                            {
16071:                                if (!Drebezg2)
0100C8  8096B5     MOV 0x12D6, W5
0100CA  220004     MOV #0x2000, W4
0100CC  628204     AND W5, W4, W4
0100CE  520FE0     SUB W4, #0x0, [W15]
0100D0  3A0018     BRA NZ, 0x10102
16072:                                {
16073:                                HvBt2=1;
0100D2  809684     MOV Flgs5, W4
0100D4  A0A004     BSET W4, #10
0100D6  889684     MOV W4, Flgs5
16074:                                Drebezg2=1;
0100D8  8096B4     MOV 0x12D6, W4
0100DA  A0D004     BSET W4, #13
0100DC  8896B4     MOV W4, 0x12D6
16075:                                Bt2LongCnt=0;
0100DE  EB0200     CLR W4
0100E0  8984F4     MOV W4, Bt2LongCnt
0100E2  37000F     BRA 0x10102
16076:                                }
16077:                            }
16078:                            }
16079:                        }
16080:                        else
16081:                        {
16082:                            if (But2)
0100E4  807095     MOV PORTB, W5
0100E6  204004     MOV #0x400, W4
0100E8  628204     AND W5, W4, W4
0100EA  520FE0     SUB W4, #0x0, [W15]
0100EC  320007     BRA Z, 0x100FC
16083:                            {
16084:                                Bt2Cnt=Bt2CntConst;
0100EE  230994     MOV #0x3099, W4
0100F0  784214     MOV.B [W4], W4
0100F2  230955     MOV #0x3095, W5
0100F4  784A84     MOV.B W4, [W5]
16085:                                But2Pressed=0;
0100F6  809684     MOV Flgs5, W4
0100F8  A1B004     BCLR W4, #11
0100FA  889684     MOV W4, Flgs5
16086:                            }
16087:                            Bt2LongCnt++;
0100FC  8184F4     MOV Bt2LongCnt, W4
0100FE  E80204     INC W4, W4
010100  8984F4     MOV W4, Bt2LongCnt
16088:                        }
16089:                    }
16090:             
16091:             
16092:             
16093:                    if (!But3Pressed)
010102  809625     MOV Flgs2, W5
010104  202004     MOV #0x200, W4
010106  628204     AND W5, W4, W4
010108  520FE0     SUB W4, #0x0, [W15]
01010A  3A0030     BRA NZ, 0x1016C
16094:                    {
16095:                        if (Bt3Cnt)
01010C  230964     MOV #0x3096, W4
01010E  784214     MOV.B [W4], W4
010110  524FE0     SUB.B W4, #0x0, [W15]
010112  32001D     BRA Z, 0x1014E
16096:                        {
16097:                            if (!But3)
010114  807095     MOV PORTB, W5
010116  208004     MOV #0x800, W4
010118  628204     AND W5, W4, W4
01011A  520FE0     SUB W4, #0x0, [W15]
01011C  3A0008     BRA NZ, 0x1012E
16098:                            {
16099:                                Bt3Cnt=Bt3CntConst;
01011E  2309A4     MOV #0x309A, W4
010120  784214     MOV.B [W4], W4
010122  230965     MOV #0x3096, W5
010124  784A84     MOV.B W4, [W5]
16100:                                But3Pressed=1;
010126  809624     MOV Flgs2, W4
010128  A09004     BSET W4, #9
01012A  889624     MOV W4, Flgs2
01012C  370056     BRA 0x101DA
16101:                            }
16102:                            else
16103:                            {
16104:                            Bt3Cnt--;
01012E  230964     MOV #0x3096, W4
010130  784214     MOV.B [W4], W4
010132  E94204     DEC.B W4, W4
010134  230965     MOV #0x3096, W5
010136  784A84     MOV.B W4, [W5]
16105:                            if (!Bt3Cnt)
010138  230964     MOV #0x3096, W4
01013A  784214     MOV.B [W4], W4
01013C  524FE0     SUB.B W4, #0x0, [W15]
01013E  3A004D     BRA NZ, 0x101DA
16106:                            {
16107:                            Drebezg3=0;
010140  809654     MOV 0x12CA, W4
010142  A1F004     BCLR W4, #15
010144  889654     MOV W4, 0x12CA
16108:                            Bt3Up=1;
010146  809684     MOV Flgs5, W4
010148  A00004     BSET W4, #0
01014A  889684     MOV W4, Flgs5
01014C  370046     BRA 0x101DA
16109:                            }
16110:                            }
16111:                        }
16112:                        else
16113:                        {
16114:                            Bt3LongCnt=0;
01014E  EB0200     CLR W4
010150  898504     MOV W4, Bt3LongCnt
16115:                            if (!But3)
010152  807095     MOV PORTB, W5
010154  208004     MOV #0x800, W4
010156  628204     AND W5, W4, W4
010158  520FE0     SUB W4, #0x0, [W15]
01015A  3A003F     BRA NZ, 0x101DA
16116:                            {
16117:                                Bt3Cnt=Bt3CntConst;
01015C  2309A4     MOV #0x309A, W4
01015E  784214     MOV.B [W4], W4
010160  230965     MOV #0x3096, W5
010162  784A84     MOV.B W4, [W5]
16118:                                But3Pressed=1;
010164  809624     MOV Flgs2, W4
010166  A09004     BSET W4, #9
010168  889624     MOV W4, Flgs2
01016A  370037     BRA 0x101DA
16119:                            }
16120:                        }
16121:                    }
16122:                    else
16123:                    {
16124:                        if (Bt3Cnt)
01016C  230964     MOV #0x3096, W4
01016E  784214     MOV.B [W4], W4
010170  524FE0     SUB.B W4, #0x0, [W15]
010172  320024     BRA Z, 0x101BC
16125:                        {
16126:                            if (But3)
010174  807095     MOV PORTB, W5
010176  208004     MOV #0x800, W4
010178  628204     AND W5, W4, W4
01017A  520FE0     SUB W4, #0x0, [W15]
01017C  320008     BRA Z, 0x1018E
16127:                            {
16128:                                Bt3Cnt=Bt3CntConst;
01017E  2309A4     MOV #0x309A, W4
010180  784214     MOV.B [W4], W4
010182  230965     MOV #0x3096, W5
010184  784A84     MOV.B W4, [W5]
16129:                                But3Pressed=0;
010186  809624     MOV Flgs2, W4
010188  A19004     BCLR W4, #9
01018A  889624     MOV W4, Flgs2
01018C  370026     BRA 0x101DA
16130:                            }
16131:                            else
16132:                            {
16133:                            Bt3Cnt--;
01018E  230964     MOV #0x3096, W4
010190  784214     MOV.B [W4], W4
010192  E94204     DEC.B W4, W4
010194  230965     MOV #0x3096, W5
010196  784A84     MOV.B W4, [W5]
16134:                            if (!Bt3Cnt)
010198  230964     MOV #0x3096, W4
01019A  784214     MOV.B [W4], W4
01019C  524FE0     SUB.B W4, #0x0, [W15]
01019E  3A001D     BRA NZ, 0x101DA
16135:                            {
16136:                                if (!Drebezg3)
0101A0  809655     MOV 0x12CA, W5
0101A2  280004     MOV #0x8000, W4
0101A4  628204     AND W5, W4, W4
0101A6  520FE0     SUB W4, #0x0, [W15]
0101A8  3A0018     BRA NZ, 0x101DA
16137:                                {
16138:                                HvBt3=1;
0101AA  809684     MOV Flgs5, W4
0101AC  A01004     BSET W4, #1
0101AE  889684     MOV W4, Flgs5
16139:                                Drebezg3=1;
0101B0  809654     MOV 0x12CA, W4
0101B2  A0F004     BSET W4, #15
0101B4  889654     MOV W4, 0x12CA
16140:                                Bt3LongCnt=0;
0101B6  EB0200     CLR W4
0101B8  898504     MOV W4, Bt3LongCnt
0101BA  37000F     BRA 0x101DA
16141:                                }
16142:                            }
16143:                            }
16144:                        }
16145:                        else
16146:                        {
16147:                            if (But3)
0101BC  807095     MOV PORTB, W5
0101BE  208004     MOV #0x800, W4
0101C0  628204     AND W5, W4, W4
0101C2  520FE0     SUB W4, #0x0, [W15]
0101C4  320007     BRA Z, 0x101D4
16148:                            {
16149:                                Bt3Cnt=Bt3CntConst;
0101C6  2309A4     MOV #0x309A, W4
0101C8  784214     MOV.B [W4], W4
0101CA  230965     MOV #0x3096, W5
0101CC  784A84     MOV.B W4, [W5]
16150:                                But3Pressed=0;
0101CE  809624     MOV Flgs2, W4
0101D0  A19004     BCLR W4, #9
0101D2  889624     MOV W4, Flgs2
16151:                            }
16152:                            Bt3LongCnt++;
0101D4  818504     MOV Bt3LongCnt, W4
0101D6  E80204     INC W4, W4
0101D8  898504     MOV W4, Bt3LongCnt
16153:                        }
16154:                    }
16155:             
16156:             
16157:                 
16158:             
16159:                    if (!But4Pressed)
0101DA  809605     MOV Flgs1, W5
0101DC  200804     MOV #0x80, W4
0101DE  628204     AND W5, W4, W4
0101E0  520FE0     SUB W4, #0x0, [W15]
0101E2  3A0030     BRA NZ, 0x10244
16160:                    {
16161:                        if (Bt4Cnt)
0101E4  230974     MOV #0x3097, W4
0101E6  784214     MOV.B [W4], W4
0101E8  524FE0     SUB.B W4, #0x0, [W15]
0101EA  32001D     BRA Z, 0x10226
16162:                        {
16163:                            if (!But4)
0101EC  807195     MOV PORTD, W5
0101EE  280004     MOV #0x8000, W4
0101F0  628204     AND W5, W4, W4
0101F2  520FE0     SUB W4, #0x0, [W15]
0101F4  3A0008     BRA NZ, 0x10206
16164:                            {
16165:                                Bt4Cnt=Bt4CntConst;
0101F6  2309B4     MOV #0x309B, W4
0101F8  784214     MOV.B [W4], W4
0101FA  230975     MOV #0x3097, W5
0101FC  784A84     MOV.B W4, [W5]
16166:                                But4Pressed=1;
0101FE  809604     MOV Flgs1, W4
010200  A07004     BSET W4, #7
010202  889604     MOV W4, Flgs1
010204  370056     BRA 0x102B2
16167:                            }
16168:                            else
16169:                            {
16170:                            Bt4Cnt--;
010206  230974     MOV #0x3097, W4
010208  784214     MOV.B [W4], W4
01020A  E94204     DEC.B W4, W4
01020C  230975     MOV #0x3097, W5
01020E  784A84     MOV.B W4, [W5]
16171:                            if (!Bt4Cnt)
010210  230974     MOV #0x3097, W4
010212  784214     MOV.B [W4], W4
010214  524FE0     SUB.B W4, #0x0, [W15]
010216  3A004D     BRA NZ, 0x102B2
16172:                            {
16173:                            Drebezg4=0;
010218  809604     MOV Flgs1, W4
01021A  A1B004     BCLR W4, #11
01021C  889604     MOV W4, Flgs1
16174:                            Bt4Up=1;
01021E  809604     MOV Flgs1, W4
010220  A0E004     BSET W4, #14
010222  889604     MOV W4, Flgs1
010224  370046     BRA 0x102B2
16175:                            }
16176:                            }
16177:                        }
16178:                        else
16179:                        {
16180:                            Bt4LongCnt=0;
010226  EB0200     CLR W4
010228  898514     MOV W4, Bt4LongCnt
16181:                            if (!But4)
01022A  807195     MOV PORTD, W5
01022C  280004     MOV #0x8000, W4
01022E  628204     AND W5, W4, W4
010230  520FE0     SUB W4, #0x0, [W15]
010232  3A003F     BRA NZ, 0x102B2
16182:                            {
16183:                                Bt4Cnt=Bt4CntConst;
010234  2309B4     MOV #0x309B, W4
010236  784214     MOV.B [W4], W4
010238  230975     MOV #0x3097, W5
01023A  784A84     MOV.B W4, [W5]
16184:                                But4Pressed=1;
01023C  809604     MOV Flgs1, W4
01023E  A07004     BSET W4, #7
010240  889604     MOV W4, Flgs1
010242  370037     BRA 0x102B2
16185:                            }
16186:                        }
16187:                    }
16188:                    else
16189:                    {
16190:                        if (Bt4Cnt)
010244  230974     MOV #0x3097, W4
010246  784214     MOV.B [W4], W4
010248  524FE0     SUB.B W4, #0x0, [W15]
01024A  320024     BRA Z, 0x10294
16191:                        {
16192:                            if (But4)
01024C  807195     MOV PORTD, W5
01024E  280004     MOV #0x8000, W4
010250  628204     AND W5, W4, W4
010252  520FE0     SUB W4, #0x0, [W15]
010254  320008     BRA Z, 0x10266
16193:                            {
16194:                                Bt4Cnt=Bt4CntConst;
010256  2309B4     MOV #0x309B, W4
010258  784214     MOV.B [W4], W4
01025A  230975     MOV #0x3097, W5
01025C  784A84     MOV.B W4, [W5]
16195:                                But4Pressed=0;
01025E  809604     MOV Flgs1, W4
010260  A17004     BCLR W4, #7
010262  889604     MOV W4, Flgs1
010264  370026     BRA 0x102B2
16196:                            }
16197:                            else
16198:                            {
16199:                            Bt4Cnt--;
010266  230974     MOV #0x3097, W4
010268  784214     MOV.B [W4], W4
01026A  E94204     DEC.B W4, W4
01026C  230975     MOV #0x3097, W5
01026E  784A84     MOV.B W4, [W5]
16200:                            if (!Bt4Cnt)
010270  230974     MOV #0x3097, W4
010272  784214     MOV.B [W4], W4
010274  524FE0     SUB.B W4, #0x0, [W15]
010276  3A001D     BRA NZ, 0x102B2
16201:                            {
16202:                                if (!Drebezg4)
010278  809605     MOV Flgs1, W5
01027A  208004     MOV #0x800, W4
01027C  628204     AND W5, W4, W4
01027E  520FE0     SUB W4, #0x0, [W15]
010280  3A0018     BRA NZ, 0x102B2
16203:                                {
16204:                                HvBt4=1;
010282  809604     MOV Flgs1, W4
010284  A09004     BSET W4, #9
010286  889604     MOV W4, Flgs1
16205:                                Drebezg4=1;
010288  809604     MOV Flgs1, W4
01028A  A0B004     BSET W4, #11
01028C  889604     MOV W4, Flgs1
16206:                                Bt4LongCnt=0;
01028E  EB0200     CLR W4
010290  898514     MOV W4, Bt4LongCnt
010292  37000F     BRA 0x102B2
16207:                                }
16208:                            }
16209:                            }
16210:                        }
16211:                        else
16212:                        {
16213:                            if (But4)
010294  807195     MOV PORTD, W5
010296  280004     MOV #0x8000, W4
010298  628204     AND W5, W4, W4
01029A  520FE0     SUB W4, #0x0, [W15]
01029C  320007     BRA Z, 0x102AC
16214:                            {
16215:                                Bt4Cnt=Bt4CntConst;
01029E  2309B4     MOV #0x309B, W4
0102A0  784214     MOV.B [W4], W4
0102A2  230975     MOV #0x3097, W5
0102A4  784A84     MOV.B W4, [W5]
16216:                                But4Pressed=0;
0102A6  809604     MOV Flgs1, W4
0102A8  A17004     BCLR W4, #7
0102AA  889604     MOV W4, Flgs1
16217:                            }
16218:                            Bt4LongCnt++;
0102AC  818514     MOV Bt4LongCnt, W4
0102AE  E80204     INC W4, W4
0102B0  898514     MOV W4, Bt4LongCnt
16219:                        }
16220:                    }
16221:             
16222:             #if !defined REV2
16223:             HvBt1Tmp=But1Pressed;
16224:             HvBt2Tmp=But2Pressed;
16225:             HvBt3Tmp=But3Pressed;
16226:             HvBt4Tmp=But4Pressed;
16227:             
16228:             
16229:             Bt1UpTmp=Bt1Up;
16230:             Bt2UpTmp=Bt2Up;
16231:             Bt3UpTmp=Bt3Up;
16232:             Bt4UpTmp=Bt4Up;
16233:             
16234:             But1Pressed=0;
16235:             Bt1Up=0;
16236:             
16237:             
16238:             But2Pressed=HvBt1Tmp;
16239:             But3Pressed=HvBt2Tmp;
16240:             But4Pressed=HvBt3Tmp;
16241:             
16242:             Bt2Up=Bt1UpTmp;
16243:             Bt3Up=Bt2UpTmp;
16244:             Bt4Up=Bt3UpTmp;
16245:             
16246:             #endif
16247:             
16248:             }
0102B2  FA8000     ULNK
0102B4  060000     RETURN
16249:             
16250:             
16251:             
16252:             void Bt1Process(void)
16253:             {
0102B6  FA0000     LNK #0x0
16254:             
16255:                 switch (But1Func)
0102B8  2401C4     MOV #0x401C, W4
0102BA  784214     MOV.B [W4], W4
0102BC  FB8204     ZE W4, W4
0102BE  DEA2CF     ASR W4, #15, W5
0102C0  200076     MOV #0x7, W6
0102C2  200007     MOV #0x0, W7
0102C4  520F86     SUB W4, W6, [W15]
0102C6  5A8F87     SUBB W5, W7, [W15]
0102C8  3E017E     BRA GTU, 0x105C6
0102CA  010604     BRA W4
0102CC  370007     BRA 0x102DC
0102CE  37000D     BRA 0x102EA
0102D0  370026     BRA 0x1031E
0102D2  37004E     BRA 0x10370
0102D4  3700CC     BRA 0x1046E
0102D6  3700FC     BRA 0x104D0
0102D8  370138     BRA 0x1054A
0102DA  370149     BRA 0x1056E
16256:                 {
16257:                     case 0:
16258:                     Bt1Up=0;
0102DC  809684     MOV Flgs5, W4
0102DE  A16004     BCLR W4, #6
0102E0  889684     MOV W4, Flgs5
16259:                     HvBt1=0;
0102E2  809684     MOV Flgs5, W4
0102E4  A17004     BCLR W4, #7
0102E6  889684     MOV W4, Flgs5
16260:                         break;
0102E8  37016E     BRA 0x105C6
16261:                     case 1:
16262:                            if (HvBt1)
0102EA  809685     MOV Flgs5, W5
0102EC  200804     MOV #0x80, W4
0102EE  628204     AND W5, W4, W4
0102F0  520FE0     SUB W4, #0x0, [W15]
0102F2  320006     BRA Z, 0x10300
16263:                             {
16264:                             HvBt1=0;
0102F4  809684     MOV Flgs5, W4
0102F6  A17004     BCLR W4, #7
0102F8  889684     MOV W4, Flgs5
16265:                             ReversON=1;
0102FA  809674     MOV 0x12CE, W4
0102FC  A0C004     BSET W4, #12
0102FE  889674     MOV W4, 0x12CE
16266:                             }
16267:                           if (Bt1Up)
010300  809685     MOV Flgs5, W5
010302  200404     MOV #0x40, W4
010304  628204     AND W5, W4, W4
010306  520FE0     SUB W4, #0x0, [W15]
010308  320149     BRA Z, 0x1059C
16268:                             {
16269:                               Bt1Up=0;
01030A  809684     MOV Flgs5, W4
01030C  A16004     BCLR W4, #6
01030E  889684     MOV W4, Flgs5
16270:                               ReversON=0;
010310  809674     MOV 0x12CE, W4
010312  A1C004     BCLR W4, #12
010314  889674     MOV W4, 0x12CE
16271:                               Sounds=0;
010316  2124A5     MOV #0x124A, W5
010318  EB4200     CLR.B W4
01031A  784A84     MOV.B W4, [W5]
16272:                             }    
16273:                         break;
01031C  370154     BRA 0x105C6
01059C  000000     NOP
01059E  370013     BRA 0x105C6
16274:                     case 2:
16275:                         if (But1Pressed)
01031E  809684     MOV Flgs5, W4
010320  620264     AND W4, #0x4, W4
010322  520FE0     SUB W4, #0x0, [W15]
010324  32000F     BRA Z, 0x10344
16276:                         {
16277:                             if (!LightOn&&!KeyLightStop)
010326  809775     MOV StatFlgs3, W5
010328  202004     MOV #0x200, W4
01032A  628204     AND W5, W4, W4
01032C  520FE0     SUB W4, #0x0, [W15]
01032E  3A0005     BRA NZ, 0x1033A
010330  809784     MOV StatFlgs4, W4
010332  620261     AND W4, #0x1, W4
010334  520FE0     SUB W4, #0x0, [W15]
010336  3A0001     BRA NZ, 0x1033A
16278:             #if !defined VECTORS
16279:                                 Horn=0;
010338  A94E35     BCLR 0xE35, #2
16280:             #else
16281:                                 //Horn=1;
16282:                                 OC3R=((unsigned int)KeyLightBrightness)<<8;
16283:             #endif
16284:                     {
16285:                     BuzzerOnEvent=5;
01033A  2308F5     MOV #0x308F, W5
01033C  B3C054     MOV.B #0x5, W4
01033E  784A84     MOV.B W4, [W5]
16286:                     BuzzerMacroOn//Buzzer=1;
010340  075C68     RCALL BzFuncOn
16287:                     }
16288:                         }
16289:                         else
16290:                         {
16291:                             
16292:                             if (!Sounds)
010344  2124A4     MOV #0x124A, W4
010346  784214     MOV.B [W4], W4
010348  524FE0     SUB.B W4, #0x0, [W15]
01034A  3A012A     BRA NZ, 0x105A0
16293:                             {
16294:                                 if (!LightOn&&!KeyLightStop)
01034C  809775     MOV StatFlgs3, W5
01034E  202004     MOV #0x200, W4
010350  628204     AND W5, W4, W4
010352  520FE0     SUB W4, #0x0, [W15]
010354  3A0005     BRA NZ, 0x10360
010356  809784     MOV StatFlgs4, W4
010358  620261     AND W4, #0x1, W4
01035A  520FE0     SUB W4, #0x0, [W15]
01035C  3A0001     BRA NZ, 0x10360
16295:             #if !defined VECTORS
16296:                                 Horn=1;
01035E  A84E35     BSET 0xE35, #2
16297:             #else
16298:                                 //Horn=0;
16299:                                 OC3R=0;
16300:             #endif
16301:                             BuzzerMacroOff;
010360  A98E54     BCLR LATF, #4
010362  809775     MOV StatFlgs3, W5
010364  202004     MOV #0x200, W4
010366  628204     AND W5, W4, W4
010368  520FE0     SUB W4, #0x0, [W15]
01036A  3A011C     BRA NZ, 0x105A4
01036C  A84E35     BSET 0xE35, #2
16302:                             }
16303:                         }
16304:                         break;
010342  370141     BRA 0x105C6
01036E  37012B     BRA 0x105C6
0105A0  000000     NOP
0105A2  370011     BRA 0x105C6
0105A4  000000     NOP
0105A6  37000F     BRA 0x105C6
16305:                     case 3:
16306:                            if (HvBt1)
010370  809685     MOV Flgs5, W5
010372  200804     MOV #0x80, W4
010374  628204     AND W5, W4, W4
010376  520FE0     SUB W4, #0x0, [W15]
010378  320040     BRA Z, 0x103FA
16307:                             {
16308:                                if (AntiPolice)
01037A  809765     MOV StatFlgs2, W5
01037C  202004     MOV #0x200, W4
01037E  628204     AND W5, W4, W4
010380  520FE0     SUB W4, #0x0, [W15]
010382  320004     BRA Z, 0x1038C
16309:                                {
16310:                                    HvBt1=0;
010384  809684     MOV Flgs5, W4
010386  A17004     BCLR W4, #7
010388  889684     MOV W4, Flgs5
16311:                                    return;
01038A  37011D     BRA 0x105C6
16312:                                }
16313:                                 if (!PID_On)
01038C  809655     MOV 0x12CA, W5
01038E  202004     MOV #0x200, W4
010390  628204     AND W5, W4, W4
010392  520FE0     SUB W4, #0x0, [W15]
010394  3A001B     BRA NZ, 0x103CC
16314:                                 {
16315:                                     if (!Wheeling)
010396  809665     MOV Flgs4, W5
010398  208004     MOV #0x800, W4
01039A  628204     AND W5, W4, W4
01039C  520FE0     SUB W4, #0x0, [W15]
01039E  3A002A     BRA NZ, 0x103F4
16316:                                     {
16317:                                         if (!SpeedControl)
0103A0  809754     MOV StatFlgs1, W4
0103A2  620262     AND W4, #0x2, W4
0103A4  520FE0     SUB W4, #0x0, [W15]
0103A6  3A0026     BRA NZ, 0x103F4
16318:                                         {
16319:                                 SoundNum=1;
0103A8  2124B5     MOV #0x124B, W5
0103AA  B3C014     MOV.B #0x1, W4
0103AC  784A84     MOV.B W4, [W5]
16320:                                 Spd1UST=Spd1Res;
0103AE  817F14     MOV Spd1Res, W4
0103B0  DEA2CF     ASR W4, #15, W5
0103B2  BE0004     MOV.D W4, W0
0103B4  02257C     CALL ___floatsisf
0103B6  000000     NOP
0103B8  BE0200     MOV.D W0, W4
0103BA  897F74     MOV W4, Spd1UST
0103BC  897F85     MOV W5, 0x2FF0
16321:                                 StrtPID_On=1;
0103BE  809604     MOV Flgs1, W4
0103C0  A0C004     BSET W4, #12
0103C2  889604     MOV W4, Flgs1
16322:                                 BtPID_Activated=1;
0103C4  809684     MOV Flgs5, W4
0103C6  A0C004     BSET W4, #12
0103C8  889684     MOV W4, Flgs5
0103CA  370014     BRA 0x103F4
16323:                                 
16324:                                 /*if (StrongModePID)
16325:                                 {
16326:                                     PrevStrongMode=StrongMode;
16327:             //                        StrongMode=1;
16328:                                 }*/
16329:                                 
16330:                                         }
16331:                                     }
16332:                                 }
16333:                                 else
16334:                                 {
16335:                                 if (SpeedControl)
0103CC  809754     MOV StatFlgs1, W4
0103CE  620262     AND W4, #0x2, W4
0103D0  520FE0     SUB W4, #0x0, [W15]
0103D2  320010     BRA Z, 0x103F4
16336:                                 {
16337:                                 SpeedControlPID=1;
0103D4  8095F4     MOV 0x12BE, W4
0103D6  A0C004     BSET W4, #12
0103D8  8895F4     MOV W4, 0x12BE
16338:                                 Spd1UST=Spd1Res;
0103DA  817F14     MOV Spd1Res, W4
0103DC  DEA2CF     ASR W4, #15, W5
0103DE  BE0004     MOV.D W4, W0
0103E0  02257C     CALL ___floatsisf
0103E2  000000     NOP
0103E4  BE0200     MOV.D W0, W4
0103E6  897F74     MOV W4, Spd1UST
0103E8  897F85     MOV W5, 0x2FF0
16339:                                 SpeedControlPIDOffCnt=500;
0103EA  201F44     MOV #0x1F4, W4
0103EC  8887C4     MOV W4, SpeedControlPIDOffCnt
16340:                                 SoundNum=1;
0103EE  2124B5     MOV #0x124B, W5
0103F0  B3C014     MOV.B #0x1, W4
0103F2  784A84     MOV.B W4, [W5]
16341:                                 /*if (StrongModePID)
16342:                                     {
16343:                                     PrevStrongMode=StrongMode;
16344:                                     StrongMode=1;
16345:                                     }*/
16346:                                 }
16347:                                 }
16348:                             HvBt1=0;
0103F4  809684     MOV Flgs5, W4
0103F6  A17004     BCLR W4, #7
0103F8  889684     MOV W4, Flgs5
16349:                             }
16350:                           if (Bt1Up)
0103FA  809685     MOV Flgs5, W5
0103FC  200404     MOV #0x40, W4
0103FE  628204     AND W5, W4, W4
010400  520FE0     SUB W4, #0x0, [W15]
010402  3200D2     BRA Z, 0x105A8
16351:                             {
16352:                                if (AntiPolice)
010404  809765     MOV StatFlgs2, W5
010406  202004     MOV #0x200, W4
010408  628204     AND W5, W4, W4
01040A  520FE0     SUB W4, #0x0, [W15]
01040C  320004     BRA Z, 0x10416
16353:                                {
16354:                                    Bt1Up=0;
01040E  809684     MOV Flgs5, W4
010410  A16004     BCLR W4, #6
010412  889684     MOV W4, Flgs5
16355:                                    return;
010414  3700D8     BRA 0x105C6
16356:                                }
16357:             
16358:                                     if (StrongModePID)
010416  809745     MOV StatFlgs, W5
010418  220004     MOV #0x2000, W4
01041A  628204     AND W5, W4, W4
01041C  520FE0     SUB W4, #0x0, [W15]
01041E  32000B     BRA Z, 0x10436
16359:                                     StrongMode=PrevStrongMode;
010420  809694     MOV 0x12D2, W4
010422  DE224A     LSR W4, #10, W4
010424  624261     AND.B W4, #0x1, W4
010426  FB8204     ZE W4, W4
010428  620261     AND W4, #0x1, W4
01042A  DD224E     SL W4, #14, W4
01042C  8095F6     MOV 0x12BE, W6
01042E  2BFFF5     MOV #0xBFFF, W5
010430  630285     AND W6, W5, W5
010432  728204     IOR W5, W4, W4
010434  8895F4     MOV W4, 0x12BE
16360:                                 if (!SpeedControl)
010436  809754     MOV StatFlgs1, W4
010438  620262     AND W4, #0x2, W4
01043A  520FE0     SUB W4, #0x0, [W15]
01043C  3A0004     BRA NZ, 0x10446
16361:                                 {
16362:                             PID_On=0;
01043E  809654     MOV 0x12CA, W4
010440  A19004     BCLR W4, #9
010442  889654     MOV W4, 0x12CA
010444  370010     BRA 0x10466
16363:                                 }
16364:                                 else
16365:                                 {
16366:                                     if (!StartingBTN)
010446  809685     MOV Flgs5, W5
010448  240004     MOV #0x4000, W4
01044A  628204     AND W5, W4, W4
01044C  520FE0     SUB W4, #0x0, [W15]
01044E  3A0008     BRA NZ, 0x10460
16367:                                     {
16368:                                         if (SpeedControlPID)
010450  8095F5     MOV 0x12BE, W5
010452  210004     MOV #0x1000, W4
010454  628204     AND W5, W4, W4
010456  520FE0     SUB W4, #0x0, [W15]
010458  320003     BRA Z, 0x10460
16369:                                             SoundNum=10;
01045A  2124B5     MOV #0x124B, W5
01045C  B3C0A4     MOV.B #0xA, W4
01045E  784A84     MOV.B W4, [W5]
16370:                                     }
16371:                                 SpeedControlPID=0;
010460  8095F4     MOV 0x12BE, W4
010462  A1C004     BCLR W4, #12
010464  8895F4     MOV W4, 0x12BE
16372:                                 
16373:                                 }
16374:             
16375:                             Bt1Up=0;
010466  809684     MOV Flgs5, W4
010468  A16004     BCLR W4, #6
01046A  889684     MOV W4, Flgs5
16376:                             }
16377:                         break;
01046C  3700AC     BRA 0x105C6
0105A8  000000     NOP
0105AA  37000D     BRA 0x105C6
16378:                     case 4:
16379:                         if (HvBt1)
01046E  809685     MOV Flgs5, W5
010470  200804     MOV #0x80, W4
010472  628204     AND W5, W4, W4
010474  520FE0     SUB W4, #0x0, [W15]
010476  320013     BRA Z, 0x1049E
16380:                         {
16381:                         HvBt1=0;
010478  809684     MOV Flgs5, W4
01047A  A17004     BCLR W4, #7
01047C  889684     MOV W4, Flgs5
16382:                         Profile=2;
01047E  237E25     MOV #0x37E2, W5
010480  B3C024     MOV.B #0x2, W4
010482  784A84     MOV.B W4, [W5]
16383:                         MassToOptionsProfile();
010484  074A62     RCALL MassToOptionsProfile
16384:                         OptionsToMass();
010486  07E9B3     RCALL OptionsToMass
16385:                         MustTrmFlashMass=1;
010488  8095F4     MOV 0x12BE, W4
01048A  A02004     BSET W4, #2
01048C  8895F4     MOV W4, 0x12BE
16386:                         if (!StartingBTN)
01048E  809685     MOV Flgs5, W5
010490  240004     MOV #0x4000, W4
010492  628204     AND W5, W4, W4
010494  520FE0     SUB W4, #0x0, [W15]
010496  3A0003     BRA NZ, 0x1049E
16387:                         SoundNum=16;
010498  2124B5     MOV #0x124B, W5
01049A  B3C104     MOV.B #0x10, W4
01049C  784A84     MOV.B W4, [W5]
16388:                         }
16389:                         if (Bt1Up)
01049E  809685     MOV Flgs5, W5
0104A0  200404     MOV #0x40, W4
0104A2  628204     AND W5, W4, W4
0104A4  520FE0     SUB W4, #0x0, [W15]
0104A6  320082     BRA Z, 0x105AC
16390:                         {
16391:                         Bt1Up=0;
0104A8  809684     MOV Flgs5, W4
0104AA  A16004     BCLR W4, #6
0104AC  889684     MOV W4, Flgs5
16392:                         Profile=1;
0104AE  237E25     MOV #0x37E2, W5
0104B0  B3C014     MOV.B #0x1, W4
0104B2  784A84     MOV.B W4, [W5]
16393:                         MassToOptionsProfile();
0104B4  074A4A     RCALL MassToOptionsProfile
16394:                         OptionsToMass();
0104B6  07E99B     RCALL OptionsToMass
16395:                         MustTrmFlashMass=1;
0104B8  8095F4     MOV 0x12BE, W4
0104BA  A02004     BSET W4, #2
0104BC  8895F4     MOV W4, 0x12BE
16396:                         if (!StartingBTN)
0104BE  809685     MOV Flgs5, W5
0104C0  240004     MOV #0x4000, W4
0104C2  628204     AND W5, W4, W4
0104C4  520FE0     SUB W4, #0x0, [W15]
0104C6  3A0074     BRA NZ, 0x105B0
16397:                         SoundNum=15;
0104C8  2124B5     MOV #0x124B, W5
0104CA  B3C0F4     MOV.B #0xF, W4
0104CC  784A84     MOV.B W4, [W5]
16398:                         }
16399:                         break;
0104CE  37007B     BRA 0x105C6
0105AC  000000     NOP
0105AE  37000B     BRA 0x105C6
0105B0  000000     NOP
0105B2  370009     BRA 0x105C6
16400:                     case 5:
16401:                         if (HvBt1)
0104D0  809685     MOV Flgs5, W5
0104D2  200804     MOV #0x80, W4
0104D4  628204     AND W5, W4, W4
0104D6  520FE0     SUB W4, #0x0, [W15]
0104D8  32006D     BRA Z, 0x105B4
16402:                         {
16403:                         HvBt1=0;
0104DA  809684     MOV Flgs5, W4
0104DC  A17004     BCLR W4, #7
0104DE  889684     MOV W4, Flgs5
16404:                         if (Profile<3)
0104E0  237E24     MOV #0x37E2, W4
0104E2  784214     MOV.B [W4], W4
0104E4  524FE2     SUB.B W4, #0x2, [W15]
0104E6  3E0006     BRA GTU, 0x104F4
16405:                         Profile++;
0104E8  237E24     MOV #0x37E2, W4
0104EA  784214     MOV.B [W4], W4
0104EC  E84204     INC.B W4, W4
0104EE  237E25     MOV #0x37E2, W5
0104F0  784A84     MOV.B W4, [W5]
0104F2  370003     BRA 0x104FA
16406:                         else
16407:                         Profile=1;
0104F4  237E25     MOV #0x37E2, W5
0104F6  B3C014     MOV.B #0x1, W4
0104F8  784A84     MOV.B W4, [W5]
16408:                         if (StartingBTN)
0104FA  809685     MOV Flgs5, W5
0104FC  240004     MOV #0x4000, W4
0104FE  628204     AND W5, W4, W4
010500  520FE0     SUB W4, #0x0, [W15]
010502  320003     BRA Z, 0x1050A
16409:                         Profile=1;
010504  237E25     MOV #0x37E2, W5
010506  B3C014     MOV.B #0x1, W4
010508  784A84     MOV.B W4, [W5]
16410:                         
16411:                         MassToOptionsProfile();
01050A  074A1F     RCALL MassToOptionsProfile
16412:                         OptionsToMass();
01050C  07E970     RCALL OptionsToMass
16413:                         MustTrmFlashMass=1;
01050E  8095F4     MOV 0x12BE, W4
010510  A02004     BSET W4, #2
010512  8895F4     MOV W4, 0x12BE
16414:                         
16415:                         
16416:                         
16417:                         if (!StartingBTN)
010514  809685     MOV Flgs5, W5
010516  240004     MOV #0x4000, W4
010518  628204     AND W5, W4, W4
01051A  520FE0     SUB W4, #0x0, [W15]
01051C  3A004D     BRA NZ, 0x105B8
16418:                         switch (Profile)
01051E  237E24     MOV #0x37E2, W4
010520  784214     MOV.B [W4], W4
010522  FB8204     ZE W4, W4
010524  520FE2     SUB W4, #0x2, [W15]
010526  320008     BRA Z, 0x10538
010528  520FE3     SUB W4, #0x3, [W15]
01052A  32000A     BRA Z, 0x10540
01052C  520FE1     SUB W4, #0x1, [W15]
01052E  3A0046     BRA NZ, 0x105BC
16419:                            {
16420:                            case 1:
16421:                              SoundNum=15;
010530  2124B5     MOV #0x124B, W5
010532  B3C0F4     MOV.B #0xF, W4
010534  784A84     MOV.B W4, [W5]
16422:                            break;
010536  370008     BRA 0x10548
16423:                            case 2:
16424:                              SoundNum=16;
010538  2124B5     MOV #0x124B, W5
01053A  B3C104     MOV.B #0x10, W4
01053C  784A84     MOV.B W4, [W5]
16425:                            break;
01053E  370004     BRA 0x10548
16426:                            case 3:
16427:                              SoundNum=17;
010540  2124B5     MOV #0x124B, W5
010542  B3C114     MOV.B #0x11, W4
010544  784A84     MOV.B W4, [W5]
16428:                            break;
010546  000000     NOP
16429:                            }
16430:             
16431:                         
16432:                         
16433:                         
16434:                         
16435:                         
16436:             
16437:                         }
16438:                         break;
010548  37003E     BRA 0x105C6
0105B4  000000     NOP
0105B6  370007     BRA 0x105C6
0105B8  000000     NOP
0105BA  370005     BRA 0x105C6
0105BC  000000     NOP
0105BE  370003     BRA 0x105C6
16439:                     case 6:
16440:                            if (HvBt1)
01054A  809685     MOV Flgs5, W5
01054C  200804     MOV #0x80, W4
01054E  628204     AND W5, W4, W4
010550  520FE0     SUB W4, #0x0, [W15]
010552  320004     BRA Z, 0x1055C
16441:                             {
16442:                             PID_OnOff_Func();
010554  0764E8     RCALL PID_OnOff_Func
16443:                             HvBt1=0;
010556  809684     MOV Flgs5, W4
010558  A17004     BCLR W4, #7
01055A  889684     MOV W4, Flgs5
16444:                             }
16445:                           if (Bt1Up)
01055C  809685     MOV Flgs5, W5
01055E  200404     MOV #0x40, W4
010560  628204     AND W5, W4, W4
010562  520FE0     SUB W4, #0x0, [W15]
010564  32002D     BRA Z, 0x105C0
16446:                             {
16447:                             Bt1Up=0;
010566  809684     MOV Flgs5, W4
010568  A16004     BCLR W4, #6
01056A  889684     MOV W4, Flgs5
16448:                             }
16449:                         break;
01056C  37002C     BRA 0x105C6
0105C0  000000     NOP
0105C2  370001     BRA 0x105C6
16450:                     case 7:
16451:                            if (HvBt1)
01056E  809685     MOV Flgs5, W5
010570  200804     MOV #0x80, W4
010572  628204     AND W5, W4, W4
010574  520FE0     SUB W4, #0x0, [W15]
010576  320006     BRA Z, 0x10584
16452:                             {
16453:                             HvBt1=0;
010578  809684     MOV Flgs5, W4
01057A  A17004     BCLR W4, #7
01057C  889684     MOV W4, Flgs5
16454:                             WheelingStateMachine=1;
01057E  230365     MOV #0x3036, W5
010580  B3C014     MOV.B #0x1, W4
010582  784A84     MOV.B W4, [W5]
16455:                             }
16456:                           if (Bt1Up)
010584  809685     MOV Flgs5, W5
010586  200404     MOV #0x40, W4
010588  628204     AND W5, W4, W4
01058A  520FE0     SUB W4, #0x0, [W15]
01058C  32001B     BRA Z, 0x105C4
16457:                             {
16458:                             WheelingStateMachine=4;
01058E  230365     MOV #0x3036, W5
010590  B3C044     MOV.B #0x4, W4
010592  784A84     MOV.B W4, [W5]
16459:                             Bt1Up=0;
010594  809684     MOV Flgs5, W4
010596  A16004     BCLR W4, #6
010598  889684     MOV W4, Flgs5
16460:                             }
16461:                         break;
01059A  370015     BRA 0x105C6
0105C4  000000     NOP
16462:                     
16463:                     
16464:                     
16465:             
16466:                     
16467:                     
16468:                 }
16469:             
16470:             
16471:                     
16472:             
16473:             }
0105C6  FA8000     ULNK
0105C8  060000     RETURN
16474:             
16475:             
16476:             
16477:             void Bt2Process(void)
16478:             {
0105CA  FA0000     LNK #0x0
16479:             
16480:                 switch (But2Func)
0105CC  2401D4     MOV #0x401D, W4
0105CE  784214     MOV.B [W4], W4
0105D0  FB8204     ZE W4, W4
0105D2  DEA2CF     ASR W4, #15, W5
0105D4  200076     MOV #0x7, W6
0105D6  200007     MOV #0x0, W7
0105D8  520F86     SUB W4, W6, [W15]
0105DA  5A8F87     SUBB W5, W7, [W15]
0105DC  3E0177     BRA GTU, 0x108CC
0105DE  010604     BRA W4
0105E0  370007     BRA 0x105F0
0105E2  37000D     BRA 0x105FE
0105E4  370026     BRA 0x10632
0105E6  37004F     BRA 0x10686
0105E8  3700C5     BRA 0x10774
0105EA  3700F5     BRA 0x107D6
0105EC  370131     BRA 0x10850
0105EE  370142     BRA 0x10874
16481:                 {
16482:                     case 0:
16483:                     Bt2Up=0;
0105F0  809684     MOV Flgs5, W4
0105F2  A19004     BCLR W4, #9
0105F4  889684     MOV W4, Flgs5
16484:                     HvBt2=0;
0105F6  809684     MOV Flgs5, W4
0105F8  A1A004     BCLR W4, #10
0105FA  889684     MOV W4, Flgs5
16485:                         break;
0105FC  370167     BRA 0x108CC
16486:                     case 1:
16487:                            if (HvBt2)
0105FE  809685     MOV Flgs5, W5
010600  204004     MOV #0x400, W4
010602  628204     AND W5, W4, W4
010604  520FE0     SUB W4, #0x0, [W15]
010606  320006     BRA Z, 0x10614
16488:                             {
16489:                             HvBt2=0;
010608  809684     MOV Flgs5, W4
01060A  A1A004     BCLR W4, #10
01060C  889684     MOV W4, Flgs5
16490:                             ReversON=1;
01060E  809674     MOV 0x12CE, W4
010610  A0C004     BSET W4, #12
010612  889674     MOV W4, 0x12CE
16491:                             }
16492:                           if (Bt2Up)
010614  809685     MOV Flgs5, W5
010616  202004     MOV #0x200, W4
010618  628204     AND W5, W4, W4
01061A  520FE0     SUB W4, #0x0, [W15]
01061C  320142     BRA Z, 0x108A2
16493:                             {
16494:                               Bt2Up=0;
01061E  809684     MOV Flgs5, W4
010620  A19004     BCLR W4, #9
010622  889684     MOV W4, Flgs5
16495:                               ReversON=0;
010624  809674     MOV 0x12CE, W4
010626  A1C004     BCLR W4, #12
010628  889674     MOV W4, 0x12CE
16496:                               Sounds=0;
01062A  2124A5     MOV #0x124A, W5
01062C  EB4200     CLR.B W4
01062E  784A84     MOV.B W4, [W5]
16497:                             }    
16498:                         break;
010630  37014D     BRA 0x108CC
0108A2  000000     NOP
0108A4  370013     BRA 0x108CC
16499:                     case 2:
16500:                         if (But2Pressed)
010632  809685     MOV Flgs5, W5
010634  208004     MOV #0x800, W4
010636  628204     AND W5, W4, W4
010638  520FE0     SUB W4, #0x0, [W15]
01063A  32000F     BRA Z, 0x1065A
16501:                         {
16502:                             if (!LightOn&&!KeyLightStop)
01063C  809775     MOV StatFlgs3, W5
01063E  202004     MOV #0x200, W4
010640  628204     AND W5, W4, W4
010642  520FE0     SUB W4, #0x0, [W15]
010644  3A0005     BRA NZ, 0x10650
010646  809784     MOV StatFlgs4, W4
010648  620261     AND W4, #0x1, W4
01064A  520FE0     SUB W4, #0x0, [W15]
01064C  3A0001     BRA NZ, 0x10650
16503:             #if !defined VECTORS
16504:                                 Horn=0;
01064E  A94E35     BCLR 0xE35, #2
16505:             #else
16506:                                 //Horn=1;
16507:                                 OC3R=((unsigned int)KeyLightBrightness)<<8;
16508:             #endif
16509:                     {
16510:                     BuzzerOnEvent=6;
010650  2308F5     MOV #0x308F, W5
010652  B3C064     MOV.B #0x6, W4
010654  784A84     MOV.B W4, [W5]
16511:                     BuzzerMacroOn//Buzzer=1;
010656  075ADD     RCALL BzFuncOn
16512:                     }
16513:                         }
16514:                         else
16515:                         {
16516:                             if (!Sounds)
01065A  2124A4     MOV #0x124A, W4
01065C  784214     MOV.B [W4], W4
01065E  524FE0     SUB.B W4, #0x0, [W15]
010660  3A0122     BRA NZ, 0x108A6
16517:                             {
16518:                             if (!LightOn&&!KeyLightStop)
010662  809775     MOV StatFlgs3, W5
010664  202004     MOV #0x200, W4
010666  628204     AND W5, W4, W4
010668  520FE0     SUB W4, #0x0, [W15]
01066A  3A0005     BRA NZ, 0x10676
01066C  809784     MOV StatFlgs4, W4
01066E  620261     AND W4, #0x1, W4
010670  520FE0     SUB W4, #0x0, [W15]
010672  3A0001     BRA NZ, 0x10676
16519:             #if !defined VECTORS
16520:                                 Horn=1;
010674  A84E35     BSET 0xE35, #2
16521:             #else
16522:                                 //Horn=0;
16523:                                 OC3R=0;
16524:             #endif
16525:                             BuzzerMacroOff;
010676  A98E54     BCLR LATF, #4
010678  809775     MOV StatFlgs3, W5
01067A  202004     MOV #0x200, W4
01067C  628204     AND W5, W4, W4
01067E  520FE0     SUB W4, #0x0, [W15]
010680  3A0114     BRA NZ, 0x108AA
010682  A84E35     BSET 0xE35, #2
16526:                             }
16527:                         }
16528:                         break;
010658  370139     BRA 0x108CC
010684  370123     BRA 0x108CC
0108A6  000000     NOP
0108A8  370011     BRA 0x108CC
0108AA  000000     NOP
0108AC  37000F     BRA 0x108CC
16529:                     case 3:
16530:                            if (HvBt2)
010686  809685     MOV Flgs5, W5
010688  204004     MOV #0x400, W4
01068A  628204     AND W5, W4, W4
01068C  520FE0     SUB W4, #0x0, [W15]
01068E  320038     BRA Z, 0x10700
16531:                             {
16532:                                if (AntiPolice)
010690  809765     MOV StatFlgs2, W5
010692  202004     MOV #0x200, W4
010694  628204     AND W5, W4, W4
010696  520FE0     SUB W4, #0x0, [W15]
010698  320004     BRA Z, 0x106A2
16533:                                {
16534:                                    HvBt2=0;
01069A  809684     MOV Flgs5, W4
01069C  A1A004     BCLR W4, #10
01069E  889684     MOV W4, Flgs5
16535:                                    return;
0106A0  370115     BRA 0x108CC
16536:                                }
16537:             
16538:                                 if (!PID_On)
0106A2  809655     MOV 0x12CA, W5
0106A4  202004     MOV #0x200, W4
0106A6  628204     AND W5, W4, W4
0106A8  520FE0     SUB W4, #0x0, [W15]
0106AA  3A0013     BRA NZ, 0x106D2
16539:                                 {
16540:                                     if (!Wheeling)
0106AC  809665     MOV Flgs4, W5
0106AE  208004     MOV #0x800, W4
0106B0  628204     AND W5, W4, W4
0106B2  520FE0     SUB W4, #0x0, [W15]
0106B4  3A0022     BRA NZ, 0x106FA
16541:                                     {
16542:                                         if (!SpeedControl)
0106B6  809754     MOV StatFlgs1, W4
0106B8  620262     AND W4, #0x2, W4
0106BA  520FE0     SUB W4, #0x0, [W15]
0106BC  3A001E     BRA NZ, 0x106FA
16543:                                         {
16544:                                 SoundNum=1;
0106BE  2124B5     MOV #0x124B, W5
0106C0  B3C014     MOV.B #0x1, W4
0106C2  784A84     MOV.B W4, [W5]
16545:                                 StrtPID_On=1;
0106C4  809604     MOV Flgs1, W4
0106C6  A0C004     BSET W4, #12
0106C8  889604     MOV W4, Flgs1
16546:                                 BtPID_Activated=1;
0106CA  809684     MOV Flgs5, W4
0106CC  A0C004     BSET W4, #12
0106CE  889684     MOV W4, Flgs5
0106D0  370014     BRA 0x106FA
16547:                                    /*    if (StrongModePID)
16548:                                 {
16549:                                     PrevStrongMode=StrongMode;
16550:                                     StrongMode=1;
16551:                                 }*/
16552:                                         }
16553:             
16554:                                     }
16555:                                 }
16556:                                 else
16557:                                 {
16558:                                 if (SpeedControl)
0106D2  809754     MOV StatFlgs1, W4
0106D4  620262     AND W4, #0x2, W4
0106D6  520FE0     SUB W4, #0x0, [W15]
0106D8  320010     BRA Z, 0x106FA
16559:                                 {
16560:                                     /*if (StrongModePID)
16561:                                         {
16562:                                         PrevStrongMode=StrongMode;
16563:                                         StrongMode=1;
16564:                                         }*/
16565:                                 SpeedControlPID=1;
0106DA  8095F4     MOV 0x12BE, W4
0106DC  A0C004     BSET W4, #12
0106DE  8895F4     MOV W4, 0x12BE
16566:                                 SpeedControlPIDOffCnt=500;
0106E0  201F44     MOV #0x1F4, W4
0106E2  8887C4     MOV W4, SpeedControlPIDOffCnt
16567:                                 Spd1UST=Spd1Res;
0106E4  817F14     MOV Spd1Res, W4
0106E6  DEA2CF     ASR W4, #15, W5
0106E8  BE0004     MOV.D W4, W0
0106EA  02257C     CALL ___floatsisf
0106EC  000000     NOP
0106EE  BE0200     MOV.D W0, W4
0106F0  897F74     MOV W4, Spd1UST
0106F2  897F85     MOV W5, 0x2FF0
16568:                                 //StrtPID_On=1;
16569:                                 SoundNum=1;
0106F4  2124B5     MOV #0x124B, W5
0106F6  B3C014     MOV.B #0x1, W4
0106F8  784A84     MOV.B W4, [W5]
16570:                                 }
16571:                                 }
16572:                             HvBt2=0;
0106FA  809684     MOV Flgs5, W4
0106FC  A1A004     BCLR W4, #10
0106FE  889684     MOV W4, Flgs5
16573:                             }
16574:                           if (Bt2Up)
010700  809685     MOV Flgs5, W5
010702  202004     MOV #0x200, W4
010704  628204     AND W5, W4, W4
010706  520FE0     SUB W4, #0x0, [W15]
010708  3200D2     BRA Z, 0x108AE
16575:                             {
16576:                                if (AntiPolice)
01070A  809765     MOV StatFlgs2, W5
01070C  202004     MOV #0x200, W4
01070E  628204     AND W5, W4, W4
010710  520FE0     SUB W4, #0x0, [W15]
010712  320004     BRA Z, 0x1071C
16577:                                {
16578:                                    Bt2Up=0;
010714  809684     MOV Flgs5, W4
010716  A19004     BCLR W4, #9
010718  889684     MOV W4, Flgs5
16579:                                    return;
01071A  3700D8     BRA 0x108CC
16580:                                }
16581:             
16582:                                      if (StrongModePID)
01071C  809745     MOV StatFlgs, W5
01071E  220004     MOV #0x2000, W4
010720  628204     AND W5, W4, W4
010722  520FE0     SUB W4, #0x0, [W15]
010724  32000B     BRA Z, 0x1073C
16583:                                     StrongMode=PrevStrongMode;
010726  809694     MOV 0x12D2, W4
010728  DE224A     LSR W4, #10, W4
01072A  624261     AND.B W4, #0x1, W4
01072C  FB8204     ZE W4, W4
01072E  620261     AND W4, #0x1, W4
010730  DD224E     SL W4, #14, W4
010732  8095F6     MOV 0x12BE, W6
010734  2BFFF5     MOV #0xBFFF, W5
010736  630285     AND W6, W5, W5
010738  728204     IOR W5, W4, W4
01073A  8895F4     MOV W4, 0x12BE
16584:              
16585:                                 if (!SpeedControl)
01073C  809754     MOV StatFlgs1, W4
01073E  620262     AND W4, #0x2, W4
010740  520FE0     SUB W4, #0x0, [W15]
010742  3A0004     BRA NZ, 0x1074C
16586:                             PID_On=0;
010744  809654     MOV 0x12CA, W4
010746  A19004     BCLR W4, #9
010748  889654     MOV W4, 0x12CA
01074A  370010     BRA 0x1076C
16587:                                 else
16588:                                 {
16589:                                     if (!StartingBTN)
01074C  809685     MOV Flgs5, W5
01074E  240004     MOV #0x4000, W4
010750  628204     AND W5, W4, W4
010752  520FE0     SUB W4, #0x0, [W15]
010754  3A0008     BRA NZ, 0x10766
16590:                                     {
16591:                                         if (SpeedControlPID)
010756  8095F5     MOV 0x12BE, W5
010758  210004     MOV #0x1000, W4
01075A  628204     AND W5, W4, W4
01075C  520FE0     SUB W4, #0x0, [W15]
01075E  320003     BRA Z, 0x10766
16592:                                             SoundNum=10;
010760  2124B5     MOV #0x124B, W5
010762  B3C0A4     MOV.B #0xA, W4
010764  784A84     MOV.B W4, [W5]
16593:                                     }
16594:                                 SpeedControlPID=0;
010766  8095F4     MOV 0x12BE, W4
010768  A1C004     BCLR W4, #12
01076A  8895F4     MOV W4, 0x12BE
16595:                                 }
16596:             
16597:                             Bt2Up=0;
01076C  809684     MOV Flgs5, W4
01076E  A19004     BCLR W4, #9
010770  889684     MOV W4, Flgs5
16598:                             }
16599:                         break;
010772  3700AC     BRA 0x108CC
0108AE  000000     NOP
0108B0  37000D     BRA 0x108CC
16600:                     case 4:
16601:                         if (HvBt2)
010774  809685     MOV Flgs5, W5
010776  204004     MOV #0x400, W4
010778  628204     AND W5, W4, W4
01077A  520FE0     SUB W4, #0x0, [W15]
01077C  320013     BRA Z, 0x107A4
16602:                         {
16603:                         HvBt2=0;
01077E  809684     MOV Flgs5, W4
010780  A1A004     BCLR W4, #10
010782  889684     MOV W4, Flgs5
16604:                         Profile=2;
010784  237E25     MOV #0x37E2, W5
010786  B3C024     MOV.B #0x2, W4
010788  784A84     MOV.B W4, [W5]
16605:                         MassToOptionsProfile();
01078A  0748DF     RCALL MassToOptionsProfile
16606:                         OptionsToMass();
01078C  07E830     RCALL OptionsToMass
16607:                         MustTrmFlashMass=1;
01078E  8095F4     MOV 0x12BE, W4
010790  A02004     BSET W4, #2
010792  8895F4     MOV W4, 0x12BE
16608:                         if (!StartingBTN)
010794  809685     MOV Flgs5, W5
010796  240004     MOV #0x4000, W4
010798  628204     AND W5, W4, W4
01079A  520FE0     SUB W4, #0x0, [W15]
01079C  3A0003     BRA NZ, 0x107A4
16609:                         SoundNum=16;
01079E  2124B5     MOV #0x124B, W5
0107A0  B3C104     MOV.B #0x10, W4
0107A2  784A84     MOV.B W4, [W5]
16610:                         }
16611:                         if (Bt2Up)
0107A4  809685     MOV Flgs5, W5
0107A6  202004     MOV #0x200, W4
0107A8  628204     AND W5, W4, W4
0107AA  520FE0     SUB W4, #0x0, [W15]
0107AC  320082     BRA Z, 0x108B2
16612:                         {
16613:                         Bt2Up=0;
0107AE  809684     MOV Flgs5, W4
0107B0  A19004     BCLR W4, #9
0107B2  889684     MOV W4, Flgs5
16614:                         Profile=1;
0107B4  237E25     MOV #0x37E2, W5
0107B6  B3C014     MOV.B #0x1, W4
0107B8  784A84     MOV.B W4, [W5]
16615:                         MassToOptionsProfile();
0107BA  0748C7     RCALL MassToOptionsProfile
16616:                         OptionsToMass();
0107BC  07E818     RCALL OptionsToMass
16617:                         MustTrmFlashMass=1;
0107BE  8095F4     MOV 0x12BE, W4
0107C0  A02004     BSET W4, #2
0107C2  8895F4     MOV W4, 0x12BE
16618:                         if (!StartingBTN)
0107C4  809685     MOV Flgs5, W5
0107C6  240004     MOV #0x4000, W4
0107C8  628204     AND W5, W4, W4
0107CA  520FE0     SUB W4, #0x0, [W15]
0107CC  3A0074     BRA NZ, 0x108B6
16619:                         SoundNum=15;
0107CE  2124B5     MOV #0x124B, W5
0107D0  B3C0F4     MOV.B #0xF, W4
0107D2  784A84     MOV.B W4, [W5]
16620:                         }
16621:                         break;
0107D4  37007B     BRA 0x108CC
0108B2  000000     NOP
0108B4  37000B     BRA 0x108CC
0108B6  000000     NOP
0108B8  370009     BRA 0x108CC
16622:                     case 5:
16623:                         if (HvBt2)
0107D6  809685     MOV Flgs5, W5
0107D8  204004     MOV #0x400, W4
0107DA  628204     AND W5, W4, W4
0107DC  520FE0     SUB W4, #0x0, [W15]
0107DE  32006D     BRA Z, 0x108BA
16624:                         {
16625:                         HvBt2=0;
0107E0  809684     MOV Flgs5, W4
0107E2  A1A004     BCLR W4, #10
0107E4  889684     MOV W4, Flgs5
16626:                         if (Profile<3)
0107E6  237E24     MOV #0x37E2, W4
0107E8  784214     MOV.B [W4], W4
0107EA  524FE2     SUB.B W4, #0x2, [W15]
0107EC  3E0006     BRA GTU, 0x107FA
16627:                         Profile++;
0107EE  237E24     MOV #0x37E2, W4
0107F0  784214     MOV.B [W4], W4
0107F2  E84204     INC.B W4, W4
0107F4  237E25     MOV #0x37E2, W5
0107F6  784A84     MOV.B W4, [W5]
0107F8  370003     BRA 0x10800
16628:                         else
16629:                         Profile=1;
0107FA  237E25     MOV #0x37E2, W5
0107FC  B3C014     MOV.B #0x1, W4
0107FE  784A84     MOV.B W4, [W5]
16630:                         if (StartingBTN)
010800  809685     MOV Flgs5, W5
010802  240004     MOV #0x4000, W4
010804  628204     AND W5, W4, W4
010806  520FE0     SUB W4, #0x0, [W15]
010808  320003     BRA Z, 0x10810
16631:                         Profile=1;
01080A  237E25     MOV #0x37E2, W5
01080C  B3C014     MOV.B #0x1, W4
01080E  784A84     MOV.B W4, [W5]
16632:                         
16633:                         MassToOptionsProfile();
010810  07489C     RCALL MassToOptionsProfile
16634:                         OptionsToMass();
010812  07E7ED     RCALL OptionsToMass
16635:                         MustTrmFlashMass=1;
010814  8095F4     MOV 0x12BE, W4
010816  A02004     BSET W4, #2
010818  8895F4     MOV W4, 0x12BE
16636:                         
16637:                         
16638:                         
16639:                         if (!StartingBTN)
01081A  809685     MOV Flgs5, W5
01081C  240004     MOV #0x4000, W4
01081E  628204     AND W5, W4, W4
010820  520FE0     SUB W4, #0x0, [W15]
010822  3A004D     BRA NZ, 0x108BE
16640:                         switch (Profile)
010824  237E24     MOV #0x37E2, W4
010826  784214     MOV.B [W4], W4
010828  FB8204     ZE W4, W4
01082A  520FE2     SUB W4, #0x2, [W15]
01082C  320008     BRA Z, 0x1083E
01082E  520FE3     SUB W4, #0x3, [W15]
010830  32000A     BRA Z, 0x10846
010832  520FE1     SUB W4, #0x1, [W15]
010834  3A0046     BRA NZ, 0x108C2
16641:                            {
16642:                            case 1:
16643:                              SoundNum=15;
010836  2124B5     MOV #0x124B, W5
010838  B3C0F4     MOV.B #0xF, W4
01083A  784A84     MOV.B W4, [W5]
16644:                            break;
01083C  370008     BRA 0x1084E
16645:                            case 2:
16646:                              SoundNum=16;
01083E  2124B5     MOV #0x124B, W5
010840  B3C104     MOV.B #0x10, W4
010842  784A84     MOV.B W4, [W5]
16647:                            break;
010844  370004     BRA 0x1084E
16648:                            case 3:
16649:                              SoundNum=17;
010846  2124B5     MOV #0x124B, W5
010848  B3C114     MOV.B #0x11, W4
01084A  784A84     MOV.B W4, [W5]
16650:                            break;
01084C  000000     NOP
16651:                            }
16652:             
16653:                         
16654:                         
16655:                         
16656:                         
16657:                         
16658:             
16659:                         }
16660:                         break;
01084E  37003E     BRA 0x108CC
0108BA  000000     NOP
0108BC  370007     BRA 0x108CC
0108BE  000000     NOP
0108C0  370005     BRA 0x108CC
0108C2  000000     NOP
0108C4  370003     BRA 0x108CC
16661:                     case 6:
16662:                            if (HvBt2)
010850  809685     MOV Flgs5, W5
010852  204004     MOV #0x400, W4
010854  628204     AND W5, W4, W4
010856  520FE0     SUB W4, #0x0, [W15]
010858  320004     BRA Z, 0x10862
16663:                             {
16664:                             PID_OnOff_Func();
01085A  076365     RCALL PID_OnOff_Func
16665:                             HvBt2=0;
01085C  809684     MOV Flgs5, W4
01085E  A1A004     BCLR W4, #10
010860  889684     MOV W4, Flgs5
16666:                             }
16667:                           if (Bt2Up)
010862  809685     MOV Flgs5, W5
010864  202004     MOV #0x200, W4
010866  628204     AND W5, W4, W4
010868  520FE0     SUB W4, #0x0, [W15]
01086A  32002D     BRA Z, 0x108C6
16668:                             {
16669:                             Bt2Up=0;
01086C  809684     MOV Flgs5, W4
01086E  A19004     BCLR W4, #9
010870  889684     MOV W4, Flgs5
16670:                             }
16671:                         break;
010872  37002C     BRA 0x108CC
0108C6  000000     NOP
0108C8  370001     BRA 0x108CC
16672:                     case 7:
16673:                            if (HvBt2)
010874  809685     MOV Flgs5, W5
010876  204004     MOV #0x400, W4
010878  628204     AND W5, W4, W4
01087A  520FE0     SUB W4, #0x0, [W15]
01087C  320006     BRA Z, 0x1088A
16674:                             {
16675:                             HvBt2=0;
01087E  809684     MOV Flgs5, W4
010880  A1A004     BCLR W4, #10
010882  889684     MOV W4, Flgs5
16676:                             WheelingStateMachine=1;
010884  230365     MOV #0x3036, W5
010886  B3C014     MOV.B #0x1, W4
010888  784A84     MOV.B W4, [W5]
16677:                             }
16678:                           if (Bt2Up)
01088A  809685     MOV Flgs5, W5
01088C  202004     MOV #0x200, W4
01088E  628204     AND W5, W4, W4
010890  520FE0     SUB W4, #0x0, [W15]
010892  32001B     BRA Z, 0x108CA
16679:                             {
16680:                             WheelingStateMachine=4;
010894  230365     MOV #0x3036, W5
010896  B3C044     MOV.B #0x4, W4
010898  784A84     MOV.B W4, [W5]
16681:                             Bt2Up=0;
01089A  809684     MOV Flgs5, W4
01089C  A19004     BCLR W4, #9
01089E  889684     MOV W4, Flgs5
16682:                             }
16683:                         break;
0108A0  370015     BRA 0x108CC
0108CA  000000     NOP
16684:                 }
16685:             
16686:             
16687:                     
16688:             
16689:             }
0108CC  FA8000     ULNK
0108CE  060000     RETURN
16690:             
16691:             
16692:             
16693:             void Bt3Process(void)
16694:             {
0108D0  FA0000     LNK #0x0
16695:             
16696:                 switch (But3Func)
0108D2  2401E4     MOV #0x401E, W4
0108D4  784214     MOV.B [W4], W4
0108D6  FB8204     ZE W4, W4
0108D8  DEA2CF     ASR W4, #15, W5
0108DA  200076     MOV #0x7, W6
0108DC  200007     MOV #0x0, W7
0108DE  520F86     SUB W4, W6, [W15]
0108E0  5A8F87     SUBB W5, W7, [W15]
0108E2  3E016C     BRA GTU, 0x10BBC
0108E4  010604     BRA W4
0108E6  370007     BRA 0x108F6
0108E8  37000D     BRA 0x10904
0108EA  370024     BRA 0x10934
0108EC  37004D     BRA 0x10988
0108EE  3700C1     BRA 0x10A72
0108F0  3700EF     BRA 0x10AD0
0108F2  37012A     BRA 0x10B48
0108F4  370139     BRA 0x10B68
16697:                 {
16698:                     case 0:
16699:                     Bt3Up=0;
0108F6  809684     MOV Flgs5, W4
0108F8  A10004     BCLR W4, #0
0108FA  889684     MOV W4, Flgs5
16700:                     HvBt3=0;
0108FC  809684     MOV Flgs5, W4
0108FE  A11004     BCLR W4, #1
010900  889684     MOV W4, Flgs5
16701:                         break;
010902  37015C     BRA 0x10BBC
16702:                     case 1:
16703:                            if (HvBt3)
010904  809684     MOV Flgs5, W4
010906  620262     AND W4, #0x2, W4
010908  520FE0     SUB W4, #0x0, [W15]
01090A  320006     BRA Z, 0x10918
16704:                             {
16705:                             HvBt3=0;
01090C  809684     MOV Flgs5, W4
01090E  A11004     BCLR W4, #1
010910  889684     MOV W4, Flgs5
16706:                             ReversON=1;
010912  809674     MOV 0x12CE, W4
010914  A0C004     BSET W4, #12
010916  889674     MOV W4, 0x12CE
16707:                             }
16708:                           if (Bt3Up)
010918  809684     MOV Flgs5, W4
01091A  620261     AND W4, #0x1, W4
01091C  520FE0     SUB W4, #0x0, [W15]
01091E  320139     BRA Z, 0x10B92
16709:                             {
16710:                               Bt3Up=0;
010920  809684     MOV Flgs5, W4
010922  A10004     BCLR W4, #0
010924  889684     MOV W4, Flgs5
16711:                               ReversON=0;
010926  809674     MOV 0x12CE, W4
010928  A1C004     BCLR W4, #12
01092A  889674     MOV W4, 0x12CE
16712:                               Sounds=0;
01092C  2124A5     MOV #0x124A, W5
01092E  EB4200     CLR.B W4
010930  784A84     MOV.B W4, [W5]
16713:                             }    
16714:                         break;
010932  370144     BRA 0x10BBC
010B92  000000     NOP
010B94  370013     BRA 0x10BBC
16715:                     case 2:
16716:                         if (But3Pressed)
010934  809625     MOV Flgs2, W5
010936  202004     MOV #0x200, W4
010938  628204     AND W5, W4, W4
01093A  520FE0     SUB W4, #0x0, [W15]
01093C  32000F     BRA Z, 0x1095C
16717:                         {
16718:                           if (!LightOn&&!KeyLightStop)
01093E  809775     MOV StatFlgs3, W5
010940  202004     MOV #0x200, W4
010942  628204     AND W5, W4, W4
010944  520FE0     SUB W4, #0x0, [W15]
010946  3A0005     BRA NZ, 0x10952
010948  809784     MOV StatFlgs4, W4
01094A  620261     AND W4, #0x1, W4
01094C  520FE0     SUB W4, #0x0, [W15]
01094E  3A0001     BRA NZ, 0x10952
16719:             #if !defined VECTORS
16720:                                 Horn=0;
010950  A94E35     BCLR 0xE35, #2
16721:             #else
16722:                                 //Horn=1;
16723:                                 OC3R=((unsigned int)KeyLightBrightness)<<8;
16724:             #endif
16725:                     {
16726:                     BuzzerOnEvent=7;
010952  2308F5     MOV #0x308F, W5
010954  B3C074     MOV.B #0x7, W4
010956  784A84     MOV.B W4, [W5]
16727:                     BuzzerMacroOn//Buzzer=1;
010958  07595C     RCALL BzFuncOn
16728:                     }
16729:                         }
16730:                         else
16731:                         {
16732:                             if (!Sounds)
01095C  2124A4     MOV #0x124A, W4
01095E  784214     MOV.B [W4], W4
010960  524FE0     SUB.B W4, #0x0, [W15]
010962  3A0119     BRA NZ, 0x10B96
16733:                             {
16734:                             if (!LightOn&&!KeyLightStop)
010964  809775     MOV StatFlgs3, W5
010966  202004     MOV #0x200, W4
010968  628204     AND W5, W4, W4
01096A  520FE0     SUB W4, #0x0, [W15]
01096C  3A0005     BRA NZ, 0x10978
01096E  809784     MOV StatFlgs4, W4
010970  620261     AND W4, #0x1, W4
010972  520FE0     SUB W4, #0x0, [W15]
010974  3A0001     BRA NZ, 0x10978
16735:             #if !defined VECTORS
16736:                                 Horn=1;
010976  A84E35     BSET 0xE35, #2
16737:             #else
16738:                                 //Horn=0;
16739:                                 OC3R=0;
16740:             #endif
16741:                             BuzzerMacroOff;
010978  A98E54     BCLR LATF, #4
01097A  809775     MOV StatFlgs3, W5
01097C  202004     MOV #0x200, W4
01097E  628204     AND W5, W4, W4
010980  520FE0     SUB W4, #0x0, [W15]
010982  3A010B     BRA NZ, 0x10B9A
010984  A84E35     BSET 0xE35, #2
16742:                             }
16743:                         }
16744:                         break;
01095A  370130     BRA 0x10BBC
010986  37011A     BRA 0x10BBC
010B96  000000     NOP
010B98  370011     BRA 0x10BBC
010B9A  000000     NOP
010B9C  37000F     BRA 0x10BBC
16745:                     case 3:
16746:                            if (HvBt3)
010988  809684     MOV Flgs5, W4
01098A  620262     AND W4, #0x2, W4
01098C  520FE0     SUB W4, #0x0, [W15]
01098E  320038     BRA Z, 0x10A00
16747:                             {
16748:                                if (AntiPolice)
010990  809765     MOV StatFlgs2, W5
010992  202004     MOV #0x200, W4
010994  628204     AND W5, W4, W4
010996  520FE0     SUB W4, #0x0, [W15]
010998  320004     BRA Z, 0x109A2
16749:                                {
16750:                                    HvBt3=0;
01099A  809684     MOV Flgs5, W4
01099C  A11004     BCLR W4, #1
01099E  889684     MOV W4, Flgs5
16751:                                    return;
0109A0  37010D     BRA 0x10BBC
16752:                                }
16753:             
16754:                                 if (!PID_On)
0109A2  809655     MOV 0x12CA, W5
0109A4  202004     MOV #0x200, W4
0109A6  628204     AND W5, W4, W4
0109A8  520FE0     SUB W4, #0x0, [W15]
0109AA  3A0013     BRA NZ, 0x109D2
16755:                                 {
16756:                                     if (!Wheeling)
0109AC  809665     MOV Flgs4, W5
0109AE  208004     MOV #0x800, W4
0109B0  628204     AND W5, W4, W4
0109B2  520FE0     SUB W4, #0x0, [W15]
0109B4  3A0022     BRA NZ, 0x109FA
16757:                                     {
16758:                                         if (!SpeedControl)
0109B6  809754     MOV StatFlgs1, W4
0109B8  620262     AND W4, #0x2, W4
0109BA  520FE0     SUB W4, #0x0, [W15]
0109BC  3A001E     BRA NZ, 0x109FA
16759:                                         {
16760:                                 SoundNum=1;
0109BE  2124B5     MOV #0x124B, W5
0109C0  B3C014     MOV.B #0x1, W4
0109C2  784A84     MOV.B W4, [W5]
16761:                                 StrtPID_On=1;
0109C4  809604     MOV Flgs1, W4
0109C6  A0C004     BSET W4, #12
0109C8  889604     MOV W4, Flgs1
16762:                                 BtPID_Activated=1;
0109CA  809684     MOV Flgs5, W4
0109CC  A0C004     BSET W4, #12
0109CE  889684     MOV W4, Flgs5
0109D0  370014     BRA 0x109FA
16763:                                 /*if (StrongModePID)
16764:                                 {
16765:                                     PrevStrongMode=StrongMode;
16766:                                     StrongMode=1;
16767:                                 }*/
16768:                                         }
16769:                                     }
16770:                                 }
16771:                                 else
16772:                                 {
16773:                                 if (SpeedControl)
0109D2  809754     MOV StatFlgs1, W4
0109D4  620262     AND W4, #0x2, W4
0109D6  520FE0     SUB W4, #0x0, [W15]
0109D8  320010     BRA Z, 0x109FA
16774:                                 {
16775:                                 SpeedControlPID=1;
0109DA  8095F4     MOV 0x12BE, W4
0109DC  A0C004     BSET W4, #12
0109DE  8895F4     MOV W4, 0x12BE
16776:                                 SpeedControlPIDOffCnt=500;
0109E0  201F44     MOV #0x1F4, W4
0109E2  8887C4     MOV W4, SpeedControlPIDOffCnt
16777:                                 Spd1UST=Spd1Res;
0109E4  817F14     MOV Spd1Res, W4
0109E6  DEA2CF     ASR W4, #15, W5
0109E8  BE0004     MOV.D W4, W0
0109EA  02257C     CALL ___floatsisf
0109EC  000000     NOP
0109EE  BE0200     MOV.D W0, W4
0109F0  897F74     MOV W4, Spd1UST
0109F2  897F85     MOV W5, 0x2FF0
16778:                                 SoundNum=1;
0109F4  2124B5     MOV #0x124B, W5
0109F6  B3C014     MOV.B #0x1, W4
0109F8  784A84     MOV.B W4, [W5]
16779:                                 /*if (StrongModePID)
16780:                                     {
16781:                                     PrevStrongMode=StrongMode;
16782:                                     StrongMode=1;
16783:                                     }*/
16784:                                 }
16785:                                 }
16786:                             HvBt3=0;
0109FA  809684     MOV Flgs5, W4
0109FC  A11004     BCLR W4, #1
0109FE  889684     MOV W4, Flgs5
16787:                             }
16788:                           if (Bt3Up)
010A00  809684     MOV Flgs5, W4
010A02  620261     AND W4, #0x1, W4
010A04  520FE0     SUB W4, #0x0, [W15]
010A06  3200CB     BRA Z, 0x10B9E
16789:                             {
16790:                                if (AntiPolice)
010A08  809765     MOV StatFlgs2, W5
010A0A  202004     MOV #0x200, W4
010A0C  628204     AND W5, W4, W4
010A0E  520FE0     SUB W4, #0x0, [W15]
010A10  320004     BRA Z, 0x10A1A
16791:                                {
16792:                                    Bt3Up=0;
010A12  809684     MOV Flgs5, W4
010A14  A10004     BCLR W4, #0
010A16  889684     MOV W4, Flgs5
16793:                                    return;
010A18  3700D1     BRA 0x10BBC
16794:                                }
16795:             
16796:                                      if (StrongModePID)
010A1A  809745     MOV StatFlgs, W5
010A1C  220004     MOV #0x2000, W4
010A1E  628204     AND W5, W4, W4
010A20  520FE0     SUB W4, #0x0, [W15]
010A22  32000B     BRA Z, 0x10A3A
16797:                                     StrongMode=PrevStrongMode;
010A24  809694     MOV 0x12D2, W4
010A26  DE224A     LSR W4, #10, W4
010A28  624261     AND.B W4, #0x1, W4
010A2A  FB8204     ZE W4, W4
010A2C  620261     AND W4, #0x1, W4
010A2E  DD224E     SL W4, #14, W4
010A30  8095F6     MOV 0x12BE, W6
010A32  2BFFF5     MOV #0xBFFF, W5
010A34  630285     AND W6, W5, W5
010A36  728204     IOR W5, W4, W4
010A38  8895F4     MOV W4, 0x12BE
16798:                                 if (!SpeedControl)
010A3A  809754     MOV StatFlgs1, W4
010A3C  620262     AND W4, #0x2, W4
010A3E  520FE0     SUB W4, #0x0, [W15]
010A40  3A0004     BRA NZ, 0x10A4A
16799:                             PID_On=0;
010A42  809654     MOV 0x12CA, W4
010A44  A19004     BCLR W4, #9
010A46  889654     MOV W4, 0x12CA
010A48  370010     BRA 0x10A6A
16800:                                 else
16801:                                 {
16802:                                     if (!StartingBTN)
010A4A  809685     MOV Flgs5, W5
010A4C  240004     MOV #0x4000, W4
010A4E  628204     AND W5, W4, W4
010A50  520FE0     SUB W4, #0x0, [W15]
010A52  3A0008     BRA NZ, 0x10A64
16803:                                     {
16804:                                         if (SpeedControlPID)
010A54  8095F5     MOV 0x12BE, W5
010A56  210004     MOV #0x1000, W4
010A58  628204     AND W5, W4, W4
010A5A  520FE0     SUB W4, #0x0, [W15]
010A5C  320003     BRA Z, 0x10A64
16805:                                             SoundNum=10;
010A5E  2124B5     MOV #0x124B, W5
010A60  B3C0A4     MOV.B #0xA, W4
010A62  784A84     MOV.B W4, [W5]
16806:                                     }
16807:                                 SpeedControlPID=0;
010A64  8095F4     MOV 0x12BE, W4
010A66  A1C004     BCLR W4, #12
010A68  8895F4     MOV W4, 0x12BE
16808:                                 }
16809:             
16810:                             Bt3Up=0;
010A6A  809684     MOV Flgs5, W4
010A6C  A10004     BCLR W4, #0
010A6E  889684     MOV W4, Flgs5
16811:                             }
16812:                         break;
010A70  3700A5     BRA 0x10BBC
010B9E  000000     NOP
010BA0  37000D     BRA 0x10BBC
16813:                     case 4:
16814:                         if (HvBt3)
010A72  809684     MOV Flgs5, W4
010A74  620262     AND W4, #0x2, W4
010A76  520FE0     SUB W4, #0x0, [W15]
010A78  320013     BRA Z, 0x10AA0
16815:                         {
16816:                         HvBt3=0;
010A7A  809684     MOV Flgs5, W4
010A7C  A11004     BCLR W4, #1
010A7E  889684     MOV W4, Flgs5
16817:                         Profile=2;
010A80  237E25     MOV #0x37E2, W5
010A82  B3C024     MOV.B #0x2, W4
010A84  784A84     MOV.B W4, [W5]
16818:                         MassToOptionsProfile();
010A86  074761     RCALL MassToOptionsProfile
16819:                         OptionsToMass();
010A88  07E6B2     RCALL OptionsToMass
16820:                         MustTrmFlashMass=1;
010A8A  8095F4     MOV 0x12BE, W4
010A8C  A02004     BSET W4, #2
010A8E  8895F4     MOV W4, 0x12BE
16821:                         if (!StartingBTN)
010A90  809685     MOV Flgs5, W5
010A92  240004     MOV #0x4000, W4
010A94  628204     AND W5, W4, W4
010A96  520FE0     SUB W4, #0x0, [W15]
010A98  3A0003     BRA NZ, 0x10AA0
16822:                         SoundNum=16;
010A9A  2124B5     MOV #0x124B, W5
010A9C  B3C104     MOV.B #0x10, W4
010A9E  784A84     MOV.B W4, [W5]
16823:                         }
16824:                         if (Bt3Up)
010AA0  809684     MOV Flgs5, W4
010AA2  620261     AND W4, #0x1, W4
010AA4  520FE0     SUB W4, #0x0, [W15]
010AA6  32007D     BRA Z, 0x10BA2
16825:                         {
16826:                         Bt3Up=0;
010AA8  809684     MOV Flgs5, W4
010AAA  A10004     BCLR W4, #0
010AAC  889684     MOV W4, Flgs5
16827:                         Profile=1;
010AAE  237E25     MOV #0x37E2, W5
010AB0  B3C014     MOV.B #0x1, W4
010AB2  784A84     MOV.B W4, [W5]
16828:                         MassToOptionsProfile();
010AB4  07474A     RCALL MassToOptionsProfile
16829:                         OptionsToMass();
010AB6  07E69B     RCALL OptionsToMass
16830:                         MustTrmFlashMass=1;
010AB8  8095F4     MOV 0x12BE, W4
010ABA  A02004     BSET W4, #2
010ABC  8895F4     MOV W4, 0x12BE
16831:                         if (!StartingBTN)
010ABE  809685     MOV Flgs5, W5
010AC0  240004     MOV #0x4000, W4
010AC2  628204     AND W5, W4, W4
010AC4  520FE0     SUB W4, #0x0, [W15]
010AC6  3A006F     BRA NZ, 0x10BA6
16832:                         SoundNum=15;
010AC8  2124B5     MOV #0x124B, W5
010ACA  B3C0F4     MOV.B #0xF, W4
010ACC  784A84     MOV.B W4, [W5]
16833:                         }
16834:                         break;
010ACE  370076     BRA 0x10BBC
010BA2  000000     NOP
010BA4  37000B     BRA 0x10BBC
010BA6  000000     NOP
010BA8  370009     BRA 0x10BBC
16835:                     case 5:
16836:                         if (HvBt3)
010AD0  809684     MOV Flgs5, W4
010AD2  620262     AND W4, #0x2, W4
010AD4  520FE0     SUB W4, #0x0, [W15]
010AD6  320069     BRA Z, 0x10BAA
16837:                         {
16838:                         HvBt3=0;
010AD8  809684     MOV Flgs5, W4
010ADA  A11004     BCLR W4, #1
010ADC  889684     MOV W4, Flgs5
16839:                         if (Profile<3)
010ADE  237E24     MOV #0x37E2, W4
010AE0  784214     MOV.B [W4], W4
010AE2  524FE2     SUB.B W4, #0x2, [W15]
010AE4  3E0006     BRA GTU, 0x10AF2
16840:                         Profile++;
010AE6  237E24     MOV #0x37E2, W4
010AE8  784214     MOV.B [W4], W4
010AEA  E84204     INC.B W4, W4
010AEC  237E25     MOV #0x37E2, W5
010AEE  784A84     MOV.B W4, [W5]
010AF0  370003     BRA 0x10AF8
16841:                         else
16842:                         Profile=1;
010AF2  237E25     MOV #0x37E2, W5
010AF4  B3C014     MOV.B #0x1, W4
010AF6  784A84     MOV.B W4, [W5]
16843:                         if (StartingBTN)
010AF8  809685     MOV Flgs5, W5
010AFA  240004     MOV #0x4000, W4
010AFC  628204     AND W5, W4, W4
010AFE  520FE0     SUB W4, #0x0, [W15]
010B00  320003     BRA Z, 0x10B08
16844:                         Profile=1;
010B02  237E25     MOV #0x37E2, W5
010B04  B3C014     MOV.B #0x1, W4
010B06  784A84     MOV.B W4, [W5]
16845:                         
16846:                         MassToOptionsProfile();
010B08  074720     RCALL MassToOptionsProfile
16847:                         OptionsToMass();
010B0A  07E671     RCALL OptionsToMass
16848:                         MustTrmFlashMass=1;
010B0C  8095F4     MOV 0x12BE, W4
010B0E  A02004     BSET W4, #2
010B10  8895F4     MOV W4, 0x12BE
16849:                         
16850:                         
16851:                         
16852:                         if (!StartingBTN)
010B12  809685     MOV Flgs5, W5
010B14  240004     MOV #0x4000, W4
010B16  628204     AND W5, W4, W4
010B18  520FE0     SUB W4, #0x0, [W15]
010B1A  3A0049     BRA NZ, 0x10BAE
16853:                         switch (Profile)
010B1C  237E24     MOV #0x37E2, W4
010B1E  784214     MOV.B [W4], W4
010B20  FB8204     ZE W4, W4
010B22  520FE2     SUB W4, #0x2, [W15]
010B24  320008     BRA Z, 0x10B36
010B26  520FE3     SUB W4, #0x3, [W15]
010B28  32000A     BRA Z, 0x10B3E
010B2A  520FE1     SUB W4, #0x1, [W15]
010B2C  3A0042     BRA NZ, 0x10BB2
16854:                            {
16855:                            case 1:
16856:                              SoundNum=15;
010B2E  2124B5     MOV #0x124B, W5
010B30  B3C0F4     MOV.B #0xF, W4
010B32  784A84     MOV.B W4, [W5]
16857:                            break;
010B34  370008     BRA 0x10B46
16858:                            case 2:
16859:                              SoundNum=16;
010B36  2124B5     MOV #0x124B, W5
010B38  B3C104     MOV.B #0x10, W4
010B3A  784A84     MOV.B W4, [W5]
16860:                            break;
010B3C  370004     BRA 0x10B46
16861:                            case 3:
16862:                              SoundNum=17;
010B3E  2124B5     MOV #0x124B, W5
010B40  B3C114     MOV.B #0x11, W4
010B42  784A84     MOV.B W4, [W5]
16863:                            break;
010B44  000000     NOP
16864:                            }
16865:             
16866:                         
16867:                         
16868:                         
16869:                         
16870:                         
16871:             
16872:                         }
16873:                         break;
010B46  37003A     BRA 0x10BBC
010BAA  000000     NOP
010BAC  370007     BRA 0x10BBC
010BAE  000000     NOP
010BB0  370005     BRA 0x10BBC
010BB2  000000     NOP
010BB4  370003     BRA 0x10BBC
16874:                     case 6:
16875:                            if (HvBt3)
010B48  809684     MOV Flgs5, W4
010B4A  620262     AND W4, #0x2, W4
010B4C  520FE0     SUB W4, #0x0, [W15]
010B4E  320004     BRA Z, 0x10B58
16876:                             {
16877:                             PID_OnOff_Func();
010B50  0761EA     RCALL PID_OnOff_Func
16878:                             HvBt3=0;
010B52  809684     MOV Flgs5, W4
010B54  A11004     BCLR W4, #1
010B56  889684     MOV W4, Flgs5
16879:                             }
16880:                           if (Bt3Up)
010B58  809684     MOV Flgs5, W4
010B5A  620261     AND W4, #0x1, W4
010B5C  520FE0     SUB W4, #0x0, [W15]
010B5E  32002B     BRA Z, 0x10BB6
16881:                             {
16882:                             Bt3Up=0;
010B60  809684     MOV Flgs5, W4
010B62  A10004     BCLR W4, #0
010B64  889684     MOV W4, Flgs5
16883:                             }
16884:                         break;
010B66  37002A     BRA 0x10BBC
010BB6  000000     NOP
010BB8  370001     BRA 0x10BBC
16885:                         
16886:                     case 7:
16887:                            if (HvBt3)
010B68  809684     MOV Flgs5, W4
010B6A  620262     AND W4, #0x2, W4
010B6C  520FE0     SUB W4, #0x0, [W15]
010B6E  320006     BRA Z, 0x10B7C
16888:                             {
16889:                             HvBt3=0;
010B70  809684     MOV Flgs5, W4
010B72  A11004     BCLR W4, #1
010B74  889684     MOV W4, Flgs5
16890:                             WheelingStateMachine=1;
010B76  230365     MOV #0x3036, W5
010B78  B3C014     MOV.B #0x1, W4
010B7A  784A84     MOV.B W4, [W5]
16891:                             }
16892:                           if (Bt3Up)
010B7C  809684     MOV Flgs5, W4
010B7E  620261     AND W4, #0x1, W4
010B80  520FE0     SUB W4, #0x0, [W15]
010B82  32001B     BRA Z, 0x10BBA
16893:                             {
16894:                             WheelingStateMachine=4;
010B84  230365     MOV #0x3036, W5
010B86  B3C044     MOV.B #0x4, W4
010B88  784A84     MOV.B W4, [W5]
16895:                             Bt3Up=0;
010B8A  809684     MOV Flgs5, W4
010B8C  A10004     BCLR W4, #0
010B8E  889684     MOV W4, Flgs5
16896:                             }
16897:                         break;
010B90  370015     BRA 0x10BBC
010BBA  000000     NOP
16898:             
16899:                         
16900:                         
16901:                 }
16902:             
16903:             
16904:                     
16905:             
16906:             }
010BBC  FA8000     ULNK
010BBE  060000     RETURN
16907:             
16908:             
16909:             
16910:             void Bt4Process(void)
16911:             {
010BC0  FA0000     LNK #0x0
16912:             
16913:                 switch (But4Func)
010BC2  2401F4     MOV #0x401F, W4
010BC4  784214     MOV.B [W4], W4
010BC6  FB8204     ZE W4, W4
010BC8  DEA2CF     ASR W4, #15, W5
010BCA  200076     MOV #0x7, W6
010BCC  200007     MOV #0x0, W7
010BCE  520F86     SUB W4, W6, [W15]
010BD0  5A8F87     SUBB W5, W7, [W15]
010BD2  3E0177     BRA GTU, 0x10EC2
010BD4  010604     BRA W4
010BD6  370007     BRA 0x10BE6
010BD8  37000D     BRA 0x10BF4
010BDA  370026     BRA 0x10C28
010BDC  37004F     BRA 0x10C7C
010BDE  3700C5     BRA 0x10D6A
010BE0  3700F5     BRA 0x10DCC
010BE2  370131     BRA 0x10E46
010BE4  370142     BRA 0x10E6A
16914:                 {
16915:                     case 0:
16916:                     Bt4Up=0;
010BE6  809604     MOV Flgs1, W4
010BE8  A1E004     BCLR W4, #14
010BEA  889604     MOV W4, Flgs1
16917:                     HvBt4=0;
010BEC  809604     MOV Flgs1, W4
010BEE  A19004     BCLR W4, #9
010BF0  889604     MOV W4, Flgs1
16918:                         break;
010BF2  370167     BRA 0x10EC2
16919:                     case 1:
16920:                            if (HvBt4)
010BF4  809605     MOV Flgs1, W5
010BF6  202004     MOV #0x200, W4
010BF8  628204     AND W5, W4, W4
010BFA  520FE0     SUB W4, #0x0, [W15]
010BFC  320006     BRA Z, 0x10C0A
16921:                             {
16922:                             HvBt4=0;
010BFE  809604     MOV Flgs1, W4
010C00  A19004     BCLR W4, #9
010C02  889604     MOV W4, Flgs1
16923:                             ReversON=1;
010C04  809674     MOV 0x12CE, W4
010C06  A0C004     BSET W4, #12
010C08  889674     MOV W4, 0x12CE
16924:                             }
16925:                           if (Bt4Up)
010C0A  809605     MOV Flgs1, W5
010C0C  240004     MOV #0x4000, W4
010C0E  628204     AND W5, W4, W4
010C10  520FE0     SUB W4, #0x0, [W15]
010C12  320142     BRA Z, 0x10E98
16926:                             {
16927:                               Bt4Up=0;
010C14  809604     MOV Flgs1, W4
010C16  A1E004     BCLR W4, #14
010C18  889604     MOV W4, Flgs1
16928:                               ReversON=0;
010C1A  809674     MOV 0x12CE, W4
010C1C  A1C004     BCLR W4, #12
010C1E  889674     MOV W4, 0x12CE
16929:                               Sounds=0;
010C20  2124A5     MOV #0x124A, W5
010C22  EB4200     CLR.B W4
010C24  784A84     MOV.B W4, [W5]
16930:                             }    
16931:                         break;
010C26  37014D     BRA 0x10EC2
010E98  000000     NOP
010E9A  370013     BRA 0x10EC2
16932:                     case 2:
16933:                         if (But4Pressed)
010C28  809605     MOV Flgs1, W5
010C2A  200804     MOV #0x80, W4
010C2C  628204     AND W5, W4, W4
010C2E  520FE0     SUB W4, #0x0, [W15]
010C30  32000F     BRA Z, 0x10C50
16934:                         {
16935:                           if (!LightOn&&!KeyLightStop)
010C32  809775     MOV StatFlgs3, W5
010C34  202004     MOV #0x200, W4
010C36  628204     AND W5, W4, W4
010C38  520FE0     SUB W4, #0x0, [W15]
010C3A  3A0005     BRA NZ, 0x10C46
010C3C  809784     MOV StatFlgs4, W4
010C3E  620261     AND W4, #0x1, W4
010C40  520FE0     SUB W4, #0x0, [W15]
010C42  3A0001     BRA NZ, 0x10C46
16936:             #if !defined VECTORS
16937:                                 Horn=0;
010C44  A94E35     BCLR 0xE35, #2
16938:             #else
16939:                                 //Horn=1;
16940:                                 OC3R=((unsigned int)KeyLightBrightness)<<8;
16941:             #endif
16942:                     {
16943:                     BuzzerOnEvent=8;
010C46  2308F5     MOV #0x308F, W5
010C48  B3C084     MOV.B #0x8, W4
010C4A  784A84     MOV.B W4, [W5]
16944:                     BuzzerMacroOn//Buzzer=1;
010C4C  0757E2     RCALL BzFuncOn
16945:                     }
16946:                         }
16947:                         else
16948:                         {
16949:                             if (!Sounds)
010C50  2124A4     MOV #0x124A, W4
010C52  784214     MOV.B [W4], W4
010C54  524FE0     SUB.B W4, #0x0, [W15]
010C56  3A0122     BRA NZ, 0x10E9C
16950:                             {
16951:                           if (!LightOn&&!KeyLightStop)
010C58  809775     MOV StatFlgs3, W5
010C5A  202004     MOV #0x200, W4
010C5C  628204     AND W5, W4, W4
010C5E  520FE0     SUB W4, #0x0, [W15]
010C60  3A0005     BRA NZ, 0x10C6C
010C62  809784     MOV StatFlgs4, W4
010C64  620261     AND W4, #0x1, W4
010C66  520FE0     SUB W4, #0x0, [W15]
010C68  3A0001     BRA NZ, 0x10C6C
16952:             #if !defined VECTORS
16953:                                 Horn=1;
010C6A  A84E35     BSET 0xE35, #2
16954:             #else
16955:                                 //Horn=0;
16956:                                 OC3R=0;
16957:             #endif
16958:                             BuzzerMacroOff;
010C6C  A98E54     BCLR LATF, #4
010C6E  809775     MOV StatFlgs3, W5
010C70  202004     MOV #0x200, W4
010C72  628204     AND W5, W4, W4
010C74  520FE0     SUB W4, #0x0, [W15]
010C76  3A0114     BRA NZ, 0x10EA0
010C78  A84E35     BSET 0xE35, #2
16959:                             }
16960:                         }
16961:                         break;
010C4E  370139     BRA 0x10EC2
010C7A  370123     BRA 0x10EC2
010E9C  000000     NOP
010E9E  370011     BRA 0x10EC2
010EA0  000000     NOP
010EA2  37000F     BRA 0x10EC2
16962:                     case 3:
16963:                            if (HvBt4)
010C7C  809605     MOV Flgs1, W5
010C7E  202004     MOV #0x200, W4
010C80  628204     AND W5, W4, W4
010C82  520FE0     SUB W4, #0x0, [W15]
010C84  320038     BRA Z, 0x10CF6
16964:                             {
16965:                                if (AntiPolice)
010C86  809765     MOV StatFlgs2, W5
010C88  202004     MOV #0x200, W4
010C8A  628204     AND W5, W4, W4
010C8C  520FE0     SUB W4, #0x0, [W15]
010C8E  320004     BRA Z, 0x10C98
16966:                                {
16967:                                    HvBt4=0;
010C90  809604     MOV Flgs1, W4
010C92  A19004     BCLR W4, #9
010C94  889604     MOV W4, Flgs1
16968:                                    return;
010C96  370115     BRA 0x10EC2
16969:                                }
16970:             
16971:                                 if (!PID_On)
010C98  809655     MOV 0x12CA, W5
010C9A  202004     MOV #0x200, W4
010C9C  628204     AND W5, W4, W4
010C9E  520FE0     SUB W4, #0x0, [W15]
010CA0  3A0013     BRA NZ, 0x10CC8
16972:                                 {
16973:                                     if (!Wheeling)
010CA2  809665     MOV Flgs4, W5
010CA4  208004     MOV #0x800, W4
010CA6  628204     AND W5, W4, W4
010CA8  520FE0     SUB W4, #0x0, [W15]
010CAA  3A0022     BRA NZ, 0x10CF0
16974:                                     {
16975:                                         if (!SpeedControl)
010CAC  809754     MOV StatFlgs1, W4
010CAE  620262     AND W4, #0x2, W4
010CB0  520FE0     SUB W4, #0x0, [W15]
010CB2  3A001E     BRA NZ, 0x10CF0
16976:                                         {
16977:                                 SoundNum=1;
010CB4  2124B5     MOV #0x124B, W5
010CB6  B3C014     MOV.B #0x1, W4
010CB8  784A84     MOV.B W4, [W5]
16978:                                 StrtPID_On=1;
010CBA  809604     MOV Flgs1, W4
010CBC  A0C004     BSET W4, #12
010CBE  889604     MOV W4, Flgs1
16979:                                 BtPID_Activated=1;
010CC0  809684     MOV Flgs5, W4
010CC2  A0C004     BSET W4, #12
010CC4  889684     MOV W4, Flgs5
010CC6  370014     BRA 0x10CF0
16980:                                 /*if (StrongModePID)
16981:                                 {
16982:                                     PrevStrongMode=StrongMode;
16983:                                     StrongMode=1;
16984:                                 }*/
16985:                                         }
16986:                                     }
16987:                                 }
16988:                                 else
16989:                                 {
16990:                                 if (SpeedControl)
010CC8  809754     MOV StatFlgs1, W4
010CCA  620262     AND W4, #0x2, W4
010CCC  520FE0     SUB W4, #0x0, [W15]
010CCE  320010     BRA Z, 0x10CF0
16991:                                 {
16992:                                 SpeedControlPID=1;
010CD0  8095F4     MOV 0x12BE, W4
010CD2  A0C004     BSET W4, #12
010CD4  8895F4     MOV W4, 0x12BE
16993:                                 Spd1UST=Spd1Res;
010CD6  817F14     MOV Spd1Res, W4
010CD8  DEA2CF     ASR W4, #15, W5
010CDA  BE0004     MOV.D W4, W0
010CDC  02257C     CALL ___floatsisf
010CDE  000000     NOP
010CE0  BE0200     MOV.D W0, W4
010CE2  897F74     MOV W4, Spd1UST
010CE4  897F85     MOV W5, 0x2FF0
16994:                                 SpeedControlPIDOffCnt=500;
010CE6  201F44     MOV #0x1F4, W4
010CE8  8887C4     MOV W4, SpeedControlPIDOffCnt
16995:                                 SoundNum=1;
010CEA  2124B5     MOV #0x124B, W5
010CEC  B3C014     MOV.B #0x1, W4
010CEE  784A84     MOV.B W4, [W5]
16996:                                 /*if (StrongModePID)
16997:                                     {
16998:                                     PrevStrongMode=StrongMode;
16999:                                     StrongMode=1;
17000:                                     }*/
17001:                                 }
17002:                                 }
17003:                             HvBt4=0;
010CF0  809604     MOV Flgs1, W4
010CF2  A19004     BCLR W4, #9
010CF4  889604     MOV W4, Flgs1
17004:                             }
17005:                           if (Bt4Up)
010CF6  809605     MOV Flgs1, W5
010CF8  240004     MOV #0x4000, W4
010CFA  628204     AND W5, W4, W4
010CFC  520FE0     SUB W4, #0x0, [W15]
010CFE  3200D2     BRA Z, 0x10EA4
17006:                             {
17007:                                if (AntiPolice)
010D00  809765     MOV StatFlgs2, W5
010D02  202004     MOV #0x200, W4
010D04  628204     AND W5, W4, W4
010D06  520FE0     SUB W4, #0x0, [W15]
010D08  320004     BRA Z, 0x10D12
17008:                                {
17009:                                    Bt4Up=0;
010D0A  809604     MOV Flgs1, W4
010D0C  A1E004     BCLR W4, #14
010D0E  889604     MOV W4, Flgs1
17010:                                    return;
010D10  3700D8     BRA 0x10EC2
17011:                                }
17012:             
17013:                                      if (StrongModePID)
010D12  809745     MOV StatFlgs, W5
010D14  220004     MOV #0x2000, W4
010D16  628204     AND W5, W4, W4
010D18  520FE0     SUB W4, #0x0, [W15]
010D1A  32000B     BRA Z, 0x10D32
17014:                                     StrongMode=PrevStrongMode;
010D1C  809694     MOV 0x12D2, W4
010D1E  DE224A     LSR W4, #10, W4
010D20  624261     AND.B W4, #0x1, W4
010D22  FB8204     ZE W4, W4
010D24  620261     AND W4, #0x1, W4
010D26  DD224E     SL W4, #14, W4
010D28  8095F6     MOV 0x12BE, W6
010D2A  2BFFF5     MOV #0xBFFF, W5
010D2C  630285     AND W6, W5, W5
010D2E  728204     IOR W5, W4, W4
010D30  8895F4     MOV W4, 0x12BE
17015:                                 if (!SpeedControl)
010D32  809754     MOV StatFlgs1, W4
010D34  620262     AND W4, #0x2, W4
010D36  520FE0     SUB W4, #0x0, [W15]
010D38  3A0004     BRA NZ, 0x10D42
17016:                             PID_On=0;
010D3A  809654     MOV 0x12CA, W4
010D3C  A19004     BCLR W4, #9
010D3E  889654     MOV W4, 0x12CA
010D40  370010     BRA 0x10D62
17017:                                 else
17018:                                 {
17019:                                     if (!StartingBTN)
010D42  809685     MOV Flgs5, W5
010D44  240004     MOV #0x4000, W4
010D46  628204     AND W5, W4, W4
010D48  520FE0     SUB W4, #0x0, [W15]
010D4A  3A0008     BRA NZ, 0x10D5C
17020:                                     {
17021:                                         if (SpeedControlPID)
010D4C  8095F5     MOV 0x12BE, W5
010D4E  210004     MOV #0x1000, W4
010D50  628204     AND W5, W4, W4
010D52  520FE0     SUB W4, #0x0, [W15]
010D54  320003     BRA Z, 0x10D5C
17022:                                             SoundNum=10;
010D56  2124B5     MOV #0x124B, W5
010D58  B3C0A4     MOV.B #0xA, W4
010D5A  784A84     MOV.B W4, [W5]
17023:                                     }
17024:                                 SpeedControlPID=0;
010D5C  8095F4     MOV 0x12BE, W4
010D5E  A1C004     BCLR W4, #12
010D60  8895F4     MOV W4, 0x12BE
17025:                                 }
17026:             
17027:                             Bt4Up=0;
010D62  809604     MOV Flgs1, W4
010D64  A1E004     BCLR W4, #14
010D66  889604     MOV W4, Flgs1
17028:                             }
17029:                         break;
010D68  3700AC     BRA 0x10EC2
010EA4  000000     NOP
010EA6  37000D     BRA 0x10EC2
17030:                     case 4:
17031:                         if (HvBt4)
010D6A  809605     MOV Flgs1, W5
010D6C  202004     MOV #0x200, W4
010D6E  628204     AND W5, W4, W4
010D70  520FE0     SUB W4, #0x0, [W15]
010D72  320013     BRA Z, 0x10D9A
17032:                         {
17033:                         HvBt4=0;
010D74  809604     MOV Flgs1, W4
010D76  A19004     BCLR W4, #9
010D78  889604     MOV W4, Flgs1
17034:                         Profile=2;
010D7A  237E25     MOV #0x37E2, W5
010D7C  B3C024     MOV.B #0x2, W4
010D7E  784A84     MOV.B W4, [W5]
17035:                         MassToOptionsProfile();
010D80  0745E4     RCALL MassToOptionsProfile
17036:                         OptionsToMass();
010D82  07E535     RCALL OptionsToMass
17037:                         MustTrmFlashMass=1;
010D84  8095F4     MOV 0x12BE, W4
010D86  A02004     BSET W4, #2
010D88  8895F4     MOV W4, 0x12BE
17038:                         if (!StartingBTN)
010D8A  809685     MOV Flgs5, W5
010D8C  240004     MOV #0x4000, W4
010D8E  628204     AND W5, W4, W4
010D90  520FE0     SUB W4, #0x0, [W15]
010D92  3A0003     BRA NZ, 0x10D9A
17039:                         SoundNum=16;
010D94  2124B5     MOV #0x124B, W5
010D96  B3C104     MOV.B #0x10, W4
010D98  784A84     MOV.B W4, [W5]
17040:                         }
17041:                         if (Bt4Up)
010D9A  809605     MOV Flgs1, W5
010D9C  240004     MOV #0x4000, W4
010D9E  628204     AND W5, W4, W4
010DA0  520FE0     SUB W4, #0x0, [W15]
010DA2  320082     BRA Z, 0x10EA8
17042:                         {
17043:                         Bt4Up=0;
010DA4  809604     MOV Flgs1, W4
010DA6  A1E004     BCLR W4, #14
010DA8  889604     MOV W4, Flgs1
17044:                         Profile=1;
010DAA  237E25     MOV #0x37E2, W5
010DAC  B3C014     MOV.B #0x1, W4
010DAE  784A84     MOV.B W4, [W5]
17045:                         MassToOptionsProfile();
010DB0  0745CC     RCALL MassToOptionsProfile
17046:                         OptionsToMass();
010DB2  07E51D     RCALL OptionsToMass
17047:                         MustTrmFlashMass=1;
010DB4  8095F4     MOV 0x12BE, W4
010DB6  A02004     BSET W4, #2
010DB8  8895F4     MOV W4, 0x12BE
17048:                         if (!StartingBTN)
010DBA  809685     MOV Flgs5, W5
010DBC  240004     MOV #0x4000, W4
010DBE  628204     AND W5, W4, W4
010DC0  520FE0     SUB W4, #0x0, [W15]
010DC2  3A0074     BRA NZ, 0x10EAC
17049:                         SoundNum=15;
010DC4  2124B5     MOV #0x124B, W5
010DC6  B3C0F4     MOV.B #0xF, W4
010DC8  784A84     MOV.B W4, [W5]
17050:                         }
17051:                         break;
010DCA  37007B     BRA 0x10EC2
010EA8  000000     NOP
010EAA  37000B     BRA 0x10EC2
010EAC  000000     NOP
010EAE  370009     BRA 0x10EC2
17052:                     case 5:
17053:                         if (HvBt4)
010DCC  809605     MOV Flgs1, W5
010DCE  202004     MOV #0x200, W4
010DD0  628204     AND W5, W4, W4
010DD2  520FE0     SUB W4, #0x0, [W15]
010DD4  32006D     BRA Z, 0x10EB0
17054:                         {
17055:                         HvBt4=0;
010DD6  809604     MOV Flgs1, W4
010DD8  A19004     BCLR W4, #9
010DDA  889604     MOV W4, Flgs1
17056:                         if (Profile<3)
010DDC  237E24     MOV #0x37E2, W4
010DDE  784214     MOV.B [W4], W4
010DE0  524FE2     SUB.B W4, #0x2, [W15]
010DE2  3E0006     BRA GTU, 0x10DF0
17057:                         Profile++;
010DE4  237E24     MOV #0x37E2, W4
010DE6  784214     MOV.B [W4], W4
010DE8  E84204     INC.B W4, W4
010DEA  237E25     MOV #0x37E2, W5
010DEC  784A84     MOV.B W4, [W5]
010DEE  370003     BRA 0x10DF6
17058:                         else
17059:                         Profile=1;
010DF0  237E25     MOV #0x37E2, W5
010DF2  B3C014     MOV.B #0x1, W4
010DF4  784A84     MOV.B W4, [W5]
17060:                         if (StartingBTN)
010DF6  809685     MOV Flgs5, W5
010DF8  240004     MOV #0x4000, W4
010DFA  628204     AND W5, W4, W4
010DFC  520FE0     SUB W4, #0x0, [W15]
010DFE  320003     BRA Z, 0x10E06
17061:                         Profile=1;
010E00  237E25     MOV #0x37E2, W5
010E02  B3C014     MOV.B #0x1, W4
010E04  784A84     MOV.B W4, [W5]
17062:                         
17063:                         MassToOptionsProfile();
010E06  0745A1     RCALL MassToOptionsProfile
17064:                         OptionsToMass();
010E08  07E4F2     RCALL OptionsToMass
17065:                         MustTrmFlashMass=1;
010E0A  8095F4     MOV 0x12BE, W4
010E0C  A02004     BSET W4, #2
010E0E  8895F4     MOV W4, 0x12BE
17066:                         
17067:                         
17068:                         
17069:                         if (!StartingBTN)
010E10  809685     MOV Flgs5, W5
010E12  240004     MOV #0x4000, W4
010E14  628204     AND W5, W4, W4
010E16  520FE0     SUB W4, #0x0, [W15]
010E18  3A004D     BRA NZ, 0x10EB4
17070:                         switch (Profile)
010E1A  237E24     MOV #0x37E2, W4
010E1C  784214     MOV.B [W4], W4
010E1E  FB8204     ZE W4, W4
010E20  520FE2     SUB W4, #0x2, [W15]
010E22  320008     BRA Z, 0x10E34
010E24  520FE3     SUB W4, #0x3, [W15]
010E26  32000A     BRA Z, 0x10E3C
010E28  520FE1     SUB W4, #0x1, [W15]
010E2A  3A0046     BRA NZ, 0x10EB8
17071:                            {
17072:                            case 1:
17073:                              SoundNum=15;
010E2C  2124B5     MOV #0x124B, W5
010E2E  B3C0F4     MOV.B #0xF, W4
010E30  784A84     MOV.B W4, [W5]
17074:                            break;
010E32  370008     BRA 0x10E44
17075:                            case 2:
17076:                              SoundNum=16;
010E34  2124B5     MOV #0x124B, W5
010E36  B3C104     MOV.B #0x10, W4
010E38  784A84     MOV.B W4, [W5]
17077:                            break;
010E3A  370004     BRA 0x10E44
17078:                            case 3:
17079:                              SoundNum=17;
010E3C  2124B5     MOV #0x124B, W5
010E3E  B3C114     MOV.B #0x11, W4
010E40  784A84     MOV.B W4, [W5]
17080:                            break;
010E42  000000     NOP
17081:                            }
17082:             
17083:                         
17084:                         
17085:                         
17086:                         
17087:                         
17088:             
17089:                         }
17090:                         break;
010E44  37003E     BRA 0x10EC2
010EB0  000000     NOP
010EB2  370007     BRA 0x10EC2
010EB4  000000     NOP
010EB6  370005     BRA 0x10EC2
010EB8  000000     NOP
010EBA  370003     BRA 0x10EC2
17091:                     case 6:
17092:                            if (HvBt4)
010E46  809605     MOV Flgs1, W5
010E48  202004     MOV #0x200, W4
010E4A  628204     AND W5, W4, W4
010E4C  520FE0     SUB W4, #0x0, [W15]
010E4E  320004     BRA Z, 0x10E58
17093:                             {
17094:                             PID_OnOff_Func();
010E50  07606A     RCALL PID_OnOff_Func
17095:                             HvBt4=0;
010E52  809604     MOV Flgs1, W4
010E54  A19004     BCLR W4, #9
010E56  889604     MOV W4, Flgs1
17096:                             }
17097:                           if (Bt4Up)
010E58  809605     MOV Flgs1, W5
010E5A  240004     MOV #0x4000, W4
010E5C  628204     AND W5, W4, W4
010E5E  520FE0     SUB W4, #0x0, [W15]
010E60  32002D     BRA Z, 0x10EBC
17098:                             {
17099:                             Bt4Up=0;
010E62  809604     MOV Flgs1, W4
010E64  A1E004     BCLR W4, #14
010E66  889604     MOV W4, Flgs1
17100:                             }
17101:                         break;
010E68  37002C     BRA 0x10EC2
010EBC  000000     NOP
010EBE  370001     BRA 0x10EC2
17102:                     case 7:
17103:                            if (HvBt4)
010E6A  809605     MOV Flgs1, W5
010E6C  202004     MOV #0x200, W4
010E6E  628204     AND W5, W4, W4
010E70  520FE0     SUB W4, #0x0, [W15]
010E72  320006     BRA Z, 0x10E80
17104:                             {
17105:                             HvBt4=0;
010E74  809604     MOV Flgs1, W4
010E76  A19004     BCLR W4, #9
010E78  889604     MOV W4, Flgs1
17106:                             WheelingStateMachine=1;
010E7A  230365     MOV #0x3036, W5
010E7C  B3C014     MOV.B #0x1, W4
010E7E  784A84     MOV.B W4, [W5]
17107:                             }
17108:                           if (Bt4Up)
010E80  809605     MOV Flgs1, W5
010E82  240004     MOV #0x4000, W4
010E84  628204     AND W5, W4, W4
010E86  520FE0     SUB W4, #0x0, [W15]
010E88  32001B     BRA Z, 0x10EC0
17109:                             {
17110:                             WheelingStateMachine=4;
010E8A  230365     MOV #0x3036, W5
010E8C  B3C044     MOV.B #0x4, W4
010E8E  784A84     MOV.B W4, [W5]
17111:                             Bt4Up=0;
010E90  809604     MOV Flgs1, W4
010E92  A1E004     BCLR W4, #14
010E94  889604     MOV W4, Flgs1
17112:                             }
17113:                         break;
010E96  370015     BRA 0x10EC2
010EC0  000000     NOP
17114:             
17115:             
17116:                 }
17117:             
17118:             
17119:                     
17120:             
17121:             }
010EC2  FA8000     ULNK
010EC4  060000     RETURN
17122:             
17123:             
17124:             void writeFlash(void)
17125:             {
010EC6  FA0002     LNK #0x2
17126:                 if (!HvToWriteFlash)
010EC8  809614     MOV 0x12C2, W4
010ECA  620268     AND W4, #0x8, W4
010ECC  520FE0     SUB W4, #0x0, [W15]
010ECE  32001C     BRA Z, 0x10F08
17127:                     return;
010F08  000000     NOP
17128:                 HvToWriteFlash=0;
010ED0  809614     MOV 0x12C2, W4
010ED2  A13004     BCLR W4, #3
010ED4  889614     MOV W4, 0x12C2
17129:                                                OptionsToMass();
010ED6  07E48B     RCALL OptionsToMass
17130:                                             WriteOptions();
010ED8  07EC1A     RCALL WriteOptions
17131:                                             unsigned char Th=ReadOptions();
010EDA  07E3DD     RCALL ReadOptions
010EDC  784200     MOV.B W0, W4
010EDE  784F04     MOV.B W4, [W14]
17132:                                             Nop();
010EE0  000000     NOP
17133:                                             Nop();
010EE2  000000     NOP
17134:                                             Nop();
010EE4  000000     NOP
17135:                                             Nop();
010EE6  000000     NOP
17136:                                             if (ErrOptions)
010EE8  2305C4     MOV #0x305C, W4
010EEA  784214     MOV.B [W4], W4
010EEC  524FE0     SUB.B W4, #0x0, [W15]
010EEE  320002     BRA Z, 0x10EF4
17137:                                            OptionsToMass();
010EF0  07E47E     RCALL OptionsToMass
010EF2  370006     BRA 0x10F00
17138:                                             else
17139:                                             if (Th==1)
010EF4  78421E     MOV.B [W14], W4
010EF6  524FE1     SUB.B W4, #0x1, [W15]
010EF8  3A0003     BRA NZ, 0x10F00
17140:                                             {
17141:                                                 SoundNum=1;
010EFA  2124B5     MOV #0x124B, W5
010EFC  B3C014     MOV.B #0x1, W4
010EFE  784A84     MOV.B W4, [W5]
17142:                                             }
17143:             
17144:                                            MustTrmFlashMass=1;
010F00  8095F4     MOV 0x12BE, W4
010F02  A02004     BSET W4, #2
010F04  8895F4     MOV W4, 0x12BE
010F06  370001     BRA 0x10F0A
17145:             
17146:             }
010F0A  FA8000     ULNK
010F0C  060000     RETURN
17147:             
17148:             
17149:             void WriteErrors(void)
17150:             {
010F0E  FA000A     LNK #0xA
17151:                 int Tm=0;
010F10  EB0200     CLR W4
010F12  780F04     MOV W4, [W14]
17152:                 unsigned long int SectorAddr;
17153:                 unsigned char *Ptr;
17154:                 unsigned char j;
17155:             
17156:             
17157:                 if (!WriteErr_Fl)
010F14  809614     MOV 0x12C2, W4
010F16  620270     AND W4, #0x10, W4
010F18  520FE0     SUB W4, #0x0, [W15]
010F1A  3201C7     BRA Z, 0x112AA
17158:                     return;
0112AA  000000     NOP
17159:                 WriteErr_Fl=0;
010F1C  809614     MOV 0x12C2, W4
010F1E  A14004     BCLR W4, #4
010F20  889614     MOV W4, 0x12C2
17160:             
17161:                 FlgsErr.Flags=Flgs.Flags;
010F22  8095E4     MOV Flgs, W4
010F24  8095F5     MOV 0x12BE, W5
010F26  8896E4     MOV W4, FlgsErr
010F28  8896F5     MOV W5, 0x12DE
17162:                 Flgs1Err.Flags=Flgs1.Flags;
010F2A  809604     MOV Flgs1, W4
010F2C  809615     MOV 0x12C2, W5
010F2E  889704     MOV W4, Flgs1Err
010F30  889715     MOV W5, 0x12E2
17163:                 Flgs2Err.Flags=Flgs2.Flags;
010F32  809624     MOV Flgs2, W4
010F34  809635     MOV 0x12C6, W5
010F36  889724     MOV W4, Flgs2Err
010F38  889735     MOV W5, 0x12E6
17164:             
17165:             
17166:             
17167:                 SectorAddr=4096*OdometrSectorNumConst;
010F3A  818456     MOV OdometrSectorNumConst, W6
010F3C  818467     MOV 0x308C, W7
010F3E  DD3A4C     SL W7, #12, W4
010F40  DE32C4     LSR W6, #4, W5
010F42  720285     IOR W4, W5, W5
010F44  DD324C     SL W6, #12, W4
010F46  980734     MOV W4, [W14+6]
010F48  980745     MOV W5, [W14+8]
17168:             
17169:             
17170:             
17171:                  WriteStat_FLASH(0);
010F4A  EB4000     CLR.B W0
010F4C  07E355     RCALL WriteStat_FLASH
17172:                  EraseSector_FLASH(SectorAddr);
010F4E  90003E     MOV [W14+6], W0
010F50  9000CE     MOV [W14+8], W1
010F52  07E367     RCALL EraseSector_FLASH
17173:             
17174:             
17175:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, ErrOptions);
010F54  2305C4     MOV #0x305C, W4
010F56  784014     MOV.B [W4], W0
010F58  78021E     MOV [W14], W4
010F5A  B92361     MUL.SU W4, #1, W6
010F5C  90023E     MOV [W14+6], W4
010F5E  9002CE     MOV [W14+8], W5
010F60  420206     ADD W4, W6, W4
010F62  4A8287     ADDC W5, W7, W5
010F64  784100     MOV.B W0, W2
010F66  BE0004     MOV.D W4, W0
010F68  07E30A     RCALL WriteByte_FLASH
17176:                 Tm++;
010F6A  E80F1E     INC [W14], [W14]
17177:             
17178:                 Ptr=(unsigned char *)&AlfaXResErr;
010F6C  230B04     MOV #0x30B0, W4
010F6E  980714     MOV W4, [W14+2]
17179:                 for (j=0;j<sizeof(AlfaXResErr);j++)
010F70  EB4200     CLR.B W4
010F72  984744     MOV.B W4, [W14+4]
010F74  370012     BRA 0x10F9A
010F94  90424E     MOV.B [W14+4], W4
010F96  E84204     INC.B W4, W4
010F98  984744     MOV.B W4, [W14+4]
010F9A  90424E     MOV.B [W14+4], W4
010F9C  524FE3     SUB.B W4, #0x3, [W15]
010F9E  36FFEB     BRA LEU, 0x10F76
17180:                 {
17181:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
010F76  90021E     MOV [W14+2], W4
010F78  784014     MOV.B [W4], W0
010F7A  78021E     MOV [W14], W4
010F7C  B92361     MUL.SU W4, #1, W6
010F7E  90023E     MOV [W14+6], W4
010F80  9002CE     MOV [W14+8], W5
010F82  420206     ADD W4, W6, W4
010F84  4A8287     ADDC W5, W7, W5
010F86  784100     MOV.B W0, W2
010F88  BE0004     MOV.D W4, W0
010F8A  07E2F9     RCALL WriteByte_FLASH
17182:                 Tm++;
010F8C  E80F1E     INC [W14], [W14]
17183:                 Ptr++;
010F8E  90021E     MOV [W14+2], W4
010F90  E80204     INC W4, W4
010F92  980714     MOV W4, [W14+2]
17184:                 }
17185:             
17186:                 Ptr=(unsigned char *)&AlfaYResErr;
010FA0  230B44     MOV #0x30B4, W4
010FA2  980714     MOV W4, [W14+2]
17187:                 for (j=0;j<sizeof(AlfaYResErr);j++)
010FA4  EB4200     CLR.B W4
010FA6  984744     MOV.B W4, [W14+4]
010FA8  370012     BRA 0x10FCE
010FC8  90424E     MOV.B [W14+4], W4
010FCA  E84204     INC.B W4, W4
010FCC  984744     MOV.B W4, [W14+4]
010FCE  90424E     MOV.B [W14+4], W4
010FD0  524FE3     SUB.B W4, #0x3, [W15]
010FD2  36FFEB     BRA LEU, 0x10FAA
17188:                 {
17189:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
010FAA  90021E     MOV [W14+2], W4
010FAC  784014     MOV.B [W4], W0
010FAE  78021E     MOV [W14], W4
010FB0  B92361     MUL.SU W4, #1, W6
010FB2  90023E     MOV [W14+6], W4
010FB4  9002CE     MOV [W14+8], W5
010FB6  420206     ADD W4, W6, W4
010FB8  4A8287     ADDC W5, W7, W5
010FBA  784100     MOV.B W0, W2
010FBC  BE0004     MOV.D W4, W0
010FBE  07E2DF     RCALL WriteByte_FLASH
17190:                 Tm++;
010FC0  E80F1E     INC [W14], [W14]
17191:                 Ptr++;
010FC2  90021E     MOV [W14+2], W4
010FC4  E80204     INC W4, W4
010FC6  980714     MOV W4, [W14+2]
17192:                 }
17193:             
17194:                 Ptr=(unsigned char *)&SteerXErr;
010FD4  230B84     MOV #0x30B8, W4
010FD6  980714     MOV W4, [W14+2]
17195:                 for (j=0;j<sizeof(SteerXErr);j++)
010FD8  EB4200     CLR.B W4
010FDA  984744     MOV.B W4, [W14+4]
010FDC  370012     BRA 0x11002
010FFC  90424E     MOV.B [W14+4], W4
010FFE  E84204     INC.B W4, W4
011000  984744     MOV.B W4, [W14+4]
011002  90424E     MOV.B [W14+4], W4
011004  524FE3     SUB.B W4, #0x3, [W15]
011006  36FFEB     BRA LEU, 0x10FDE
17196:                 {
17197:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
010FDE  90021E     MOV [W14+2], W4
010FE0  784014     MOV.B [W4], W0
010FE2  78021E     MOV [W14], W4
010FE4  B92361     MUL.SU W4, #1, W6
010FE6  90023E     MOV [W14+6], W4
010FE8  9002CE     MOV [W14+8], W5
010FEA  420206     ADD W4, W6, W4
010FEC  4A8287     ADDC W5, W7, W5
010FEE  784100     MOV.B W0, W2
010FF0  BE0004     MOV.D W4, W0
010FF2  07E2C5     RCALL WriteByte_FLASH
17198:                 Tm++;
010FF4  E80F1E     INC [W14], [W14]
17199:                 Ptr++;
010FF6  90021E     MOV [W14+2], W4
010FF8  E80204     INC W4, W4
010FFA  980714     MOV W4, [W14+2]
17200:                 }
17201:             
17202:                 Ptr=(unsigned char *)&SteerYErr;
011008  230BC4     MOV #0x30BC, W4
01100A  980714     MOV W4, [W14+2]
17203:                 for (j=0;j<sizeof(SteerYErr);j++)
01100C  EB4200     CLR.B W4
01100E  984744     MOV.B W4, [W14+4]
011010  370012     BRA 0x11036
011030  90424E     MOV.B [W14+4], W4
011032  E84204     INC.B W4, W4
011034  984744     MOV.B W4, [W14+4]
011036  90424E     MOV.B [W14+4], W4
011038  524FE3     SUB.B W4, #0x3, [W15]
01103A  36FFEB     BRA LEU, 0x11012
17204:                 {
17205:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
011012  90021E     MOV [W14+2], W4
011014  784014     MOV.B [W4], W0
011016  78021E     MOV [W14], W4
011018  B92361     MUL.SU W4, #1, W6
01101A  90023E     MOV [W14+6], W4
01101C  9002CE     MOV [W14+8], W5
01101E  420206     ADD W4, W6, W4
011020  4A8287     ADDC W5, W7, W5
011022  784100     MOV.B W0, W2
011024  BE0004     MOV.D W4, W0
011026  07E2AB     RCALL WriteByte_FLASH
17206:                 Tm++;
011028  E80F1E     INC [W14], [W14]
17207:                 Ptr++;
01102A  90021E     MOV [W14+2], W4
01102C  E80204     INC W4, W4
01102E  980714     MOV W4, [W14+2]
17208:                 }
17209:             
17210:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, ErrorCode);
01103C  216D04     MOV #0x16D0, W4
01103E  784014     MOV.B [W4], W0
011040  78021E     MOV [W14], W4
011042  B92361     MUL.SU W4, #1, W6
011044  90023E     MOV [W14+6], W4
011046  9002CE     MOV [W14+8], W5
011048  420206     ADD W4, W6, W4
01104A  4A8287     ADDC W5, W7, W5
01104C  784100     MOV.B W0, W2
01104E  BE0004     MOV.D W4, W0
011050  07E296     RCALL WriteByte_FLASH
17211:                 Tm++;
011052  E80F1E     INC [W14], [W14]
17212:             
17213:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, NoBalanceCode);
011054  216D24     MOV #0x16D2, W4
011056  784014     MOV.B [W4], W0
011058  78021E     MOV [W14], W4
01105A  B92361     MUL.SU W4, #1, W6
01105C  90023E     MOV [W14+6], W4
01105E  9002CE     MOV [W14+8], W5
011060  420206     ADD W4, W6, W4
011062  4A8287     ADDC W5, W7, W5
011064  784100     MOV.B W0, W2
011066  BE0004     MOV.D W4, W0
011068  07E28A     RCALL WriteByte_FLASH
17214:                 Tm++;
01106A  E80F1E     INC [W14], [W14]
17215:             
17216:                 Ptr=(unsigned char *)&FlgsErr.Flags;
01106C  212DC4     MOV #0x12DC, W4
01106E  980714     MOV W4, [W14+2]
17217:                 for (j=0;j<sizeof(FlgsErr.Flags);j++)
011070  EB4200     CLR.B W4
011072  984744     MOV.B W4, [W14+4]
011074  370012     BRA 0x1109A
011094  90424E     MOV.B [W14+4], W4
011096  E84204     INC.B W4, W4
011098  984744     MOV.B W4, [W14+4]
01109A  90424E     MOV.B [W14+4], W4
01109C  524FE3     SUB.B W4, #0x3, [W15]
01109E  36FFEB     BRA LEU, 0x11076
17218:                 {
17219:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
011076  90021E     MOV [W14+2], W4
011078  784014     MOV.B [W4], W0
01107A  78021E     MOV [W14], W4
01107C  B92361     MUL.SU W4, #1, W6
01107E  90023E     MOV [W14+6], W4
011080  9002CE     MOV [W14+8], W5
011082  420206     ADD W4, W6, W4
011084  4A8287     ADDC W5, W7, W5
011086  784100     MOV.B W0, W2
011088  BE0004     MOV.D W4, W0
01108A  07E279     RCALL WriteByte_FLASH
17220:                 Tm++;
01108C  E80F1E     INC [W14], [W14]
17221:                 Ptr++;
01108E  90021E     MOV [W14+2], W4
011090  E80204     INC W4, W4
011092  980714     MOV W4, [W14+2]
17222:                 }
17223:             
17224:             
17225:                 Ptr=(unsigned char *)&Flgs1Err.Flags;
0110A0  212E04     MOV #0x12E0, W4
0110A2  980714     MOV W4, [W14+2]
17226:                 for (j=0;j<sizeof(Flgs1Err.Flags);j++)
0110A4  EB4200     CLR.B W4
0110A6  984744     MOV.B W4, [W14+4]
0110A8  370012     BRA 0x110CE
0110C8  90424E     MOV.B [W14+4], W4
0110CA  E84204     INC.B W4, W4
0110CC  984744     MOV.B W4, [W14+4]
0110CE  90424E     MOV.B [W14+4], W4
0110D0  524FE3     SUB.B W4, #0x3, [W15]
0110D2  36FFEB     BRA LEU, 0x110AA
17227:                 {
17228:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
0110AA  90021E     MOV [W14+2], W4
0110AC  784014     MOV.B [W4], W0
0110AE  78021E     MOV [W14], W4
0110B0  B92361     MUL.SU W4, #1, W6
0110B2  90023E     MOV [W14+6], W4
0110B4  9002CE     MOV [W14+8], W5
0110B6  420206     ADD W4, W6, W4
0110B8  4A8287     ADDC W5, W7, W5
0110BA  784100     MOV.B W0, W2
0110BC  BE0004     MOV.D W4, W0
0110BE  07E25F     RCALL WriteByte_FLASH
17229:                 Tm++;
0110C0  E80F1E     INC [W14], [W14]
17230:                 Ptr++;
0110C2  90021E     MOV [W14+2], W4
0110C4  E80204     INC W4, W4
0110C6  980714     MOV W4, [W14+2]
17231:                 }
17232:             
17233:             
17234:                 Ptr=(unsigned char *)&LastMainTiltAngleMnErr;
0110D4  234C64     MOV #0x34C6, W4
0110D6  980714     MOV W4, [W14+2]
17235:                 for (j=0;j<sizeof(LastMainTiltAngleMnErr);j++)
0110D8  EB4200     CLR.B W4
0110DA  984744     MOV.B W4, [W14+4]
0110DC  370012     BRA 0x11102
0110FC  90424E     MOV.B [W14+4], W4
0110FE  E84204     INC.B W4, W4
011100  984744     MOV.B W4, [W14+4]
011102  90424E     MOV.B [W14+4], W4
011104  524FE1     SUB.B W4, #0x1, [W15]
011106  36FFEB     BRA LEU, 0x110DE
17236:                 {
17237:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
0110DE  90021E     MOV [W14+2], W4
0110E0  784014     MOV.B [W4], W0
0110E2  78021E     MOV [W14], W4
0110E4  B92361     MUL.SU W4, #1, W6
0110E6  90023E     MOV [W14+6], W4
0110E8  9002CE     MOV [W14+8], W5
0110EA  420206     ADD W4, W6, W4
0110EC  4A8287     ADDC W5, W7, W5
0110EE  784100     MOV.B W0, W2
0110F0  BE0004     MOV.D W4, W0
0110F2  07E245     RCALL WriteByte_FLASH
17238:                 Tm++;
0110F4  E80F1E     INC [W14], [W14]
17239:                 Ptr++;
0110F6  90021E     MOV [W14+2], W4
0110F8  E80204     INC W4, W4
0110FA  980714     MOV W4, [W14+2]
17240:                 }
17241:             
17242:                 Ptr=(unsigned char *)&LastSteerTiltAngleMnErr;
011108  234C84     MOV #0x34C8, W4
01110A  980714     MOV W4, [W14+2]
17243:                 for (j=0;j<sizeof(LastSteerTiltAngleMnErr);j++)
01110C  EB4200     CLR.B W4
01110E  984744     MOV.B W4, [W14+4]
011110  370012     BRA 0x11136
011130  90424E     MOV.B [W14+4], W4
011132  E84204     INC.B W4, W4
011134  984744     MOV.B W4, [W14+4]
011136  90424E     MOV.B [W14+4], W4
011138  524FE1     SUB.B W4, #0x1, [W15]
01113A  36FFEB     BRA LEU, 0x11112
17244:                 {
17245:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
011112  90021E     MOV [W14+2], W4
011114  784014     MOV.B [W4], W0
011116  78021E     MOV [W14], W4
011118  B92361     MUL.SU W4, #1, W6
01111A  90023E     MOV [W14+6], W4
01111C  9002CE     MOV [W14+8], W5
01111E  420206     ADD W4, W6, W4
011120  4A8287     ADDC W5, W7, W5
011122  784100     MOV.B W0, W2
011124  BE0004     MOV.D W4, W0
011126  07E22B     RCALL WriteByte_FLASH
17246:                 Tm++;
011128  E80F1E     INC [W14], [W14]
17247:                 Ptr++;
01112A  90021E     MOV [W14+2], W4
01112C  E80204     INC W4, W4
01112E  980714     MOV W4, [W14+2]
17248:                 }
17249:             
17250:                 Ptr=(unsigned char *)&TiltAngleAvMnErr;
01113C  234CA4     MOV #0x34CA, W4
01113E  980714     MOV W4, [W14+2]
17251:                 for (j=0;j<sizeof(TiltAngleAvMnErr);j++)
011140  EB4200     CLR.B W4
011142  984744     MOV.B W4, [W14+4]
011144  370012     BRA 0x1116A
011164  90424E     MOV.B [W14+4], W4
011166  E84204     INC.B W4, W4
011168  984744     MOV.B W4, [W14+4]
01116A  90424E     MOV.B [W14+4], W4
01116C  524FE1     SUB.B W4, #0x1, [W15]
01116E  36FFEB     BRA LEU, 0x11146
17252:                 {
17253:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
011146  90021E     MOV [W14+2], W4
011148  784014     MOV.B [W4], W0
01114A  78021E     MOV [W14], W4
01114C  B92361     MUL.SU W4, #1, W6
01114E  90023E     MOV [W14+6], W4
011150  9002CE     MOV [W14+8], W5
011152  420206     ADD W4, W6, W4
011154  4A8287     ADDC W5, W7, W5
011156  784100     MOV.B W0, W2
011158  BE0004     MOV.D W4, W0
01115A  07E211     RCALL WriteByte_FLASH
17254:                 Tm++;
01115C  E80F1E     INC [W14], [W14]
17255:                 Ptr++;
01115E  90021E     MOV [W14+2], W4
011160  E80204     INC W4, W4
011162  980714     MOV W4, [W14+2]
17256:                 }
17257:             
17258:             
17259:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, MainTiltNumErr);
011170  234D24     MOV #0x34D2, W4
011172  784014     MOV.B [W4], W0
011174  78021E     MOV [W14], W4
011176  B92361     MUL.SU W4, #1, W6
011178  90023E     MOV [W14+6], W4
01117A  9002CE     MOV [W14+8], W5
01117C  420206     ADD W4, W6, W4
01117E  4A8287     ADDC W5, W7, W5
011180  784100     MOV.B W0, W2
011182  BE0004     MOV.D W4, W0
011184  07E1FC     RCALL WriteByte_FLASH
17260:                 Tm++;
011186  E80F1E     INC [W14], [W14]
17261:             
17262:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, SteerTiltNumErr);
011188  234D34     MOV #0x34D3, W4
01118A  784014     MOV.B [W4], W0
01118C  78021E     MOV [W14], W4
01118E  B92361     MUL.SU W4, #1, W6
011190  90023E     MOV [W14+6], W4
011192  9002CE     MOV [W14+8], W5
011194  420206     ADD W4, W6, W4
011196  4A8287     ADDC W5, W7, W5
011198  784100     MOV.B W0, W2
01119A  BE0004     MOV.D W4, W0
01119C  07E1F0     RCALL WriteByte_FLASH
17263:                 Tm++;
01119E  E80F1E     INC [W14], [W14]
17264:             
17265:             
17266:                 Ptr=(unsigned char *)&LastMainTiltAngleSteerErr;
0111A0  234CC4     MOV #0x34CC, W4
0111A2  980714     MOV W4, [W14+2]
17267:                 for (j=0;j<sizeof(LastMainTiltAngleSteerErr);j++)
0111A4  EB4200     CLR.B W4
0111A6  984744     MOV.B W4, [W14+4]
0111A8  370012     BRA 0x111CE
0111C8  90424E     MOV.B [W14+4], W4
0111CA  E84204     INC.B W4, W4
0111CC  984744     MOV.B W4, [W14+4]
0111CE  90424E     MOV.B [W14+4], W4
0111D0  524FE1     SUB.B W4, #0x1, [W15]
0111D2  36FFEB     BRA LEU, 0x111AA
17268:                 {
17269:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
0111AA  90021E     MOV [W14+2], W4
0111AC  784014     MOV.B [W4], W0
0111AE  78021E     MOV [W14], W4
0111B0  B92361     MUL.SU W4, #1, W6
0111B2  90023E     MOV [W14+6], W4
0111B4  9002CE     MOV [W14+8], W5
0111B6  420206     ADD W4, W6, W4
0111B8  4A8287     ADDC W5, W7, W5
0111BA  784100     MOV.B W0, W2
0111BC  BE0004     MOV.D W4, W0
0111BE  07E1DF     RCALL WriteByte_FLASH
17270:                 Tm++;
0111C0  E80F1E     INC [W14], [W14]
17271:                 Ptr++;
0111C2  90021E     MOV [W14+2], W4
0111C4  E80204     INC W4, W4
0111C6  980714     MOV W4, [W14+2]
17272:                 }
17273:             
17274:                 Ptr=(unsigned char *)&LastSteerTiltAngleSteerErr;
0111D4  234CE4     MOV #0x34CE, W4
0111D6  980714     MOV W4, [W14+2]
17275:                 for (j=0;j<sizeof(LastSteerTiltAngleSteerErr);j++)
0111D8  EB4200     CLR.B W4
0111DA  984744     MOV.B W4, [W14+4]
0111DC  370012     BRA 0x11202
0111FC  90424E     MOV.B [W14+4], W4
0111FE  E84204     INC.B W4, W4
011200  984744     MOV.B W4, [W14+4]
011202  90424E     MOV.B [W14+4], W4
011204  524FE1     SUB.B W4, #0x1, [W15]
011206  36FFEB     BRA LEU, 0x111DE
17276:                 {
17277:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
0111DE  90021E     MOV [W14+2], W4
0111E0  784014     MOV.B [W4], W0
0111E2  78021E     MOV [W14], W4
0111E4  B92361     MUL.SU W4, #1, W6
0111E6  90023E     MOV [W14+6], W4
0111E8  9002CE     MOV [W14+8], W5
0111EA  420206     ADD W4, W6, W4
0111EC  4A8287     ADDC W5, W7, W5
0111EE  784100     MOV.B W0, W2
0111F0  BE0004     MOV.D W4, W0
0111F2  07E1C5     RCALL WriteByte_FLASH
17278:                 Tm++;
0111F4  E80F1E     INC [W14], [W14]
17279:                 Ptr++;
0111F6  90021E     MOV [W14+2], W4
0111F8  E80204     INC W4, W4
0111FA  980714     MOV W4, [W14+2]
17280:                 }
17281:             
17282:                 Ptr=(unsigned char *)&TiltAngleAvSteerErr;
011208  234D04     MOV #0x34D0, W4
01120A  980714     MOV W4, [W14+2]
17283:                 for (j=0;j<sizeof(TiltAngleAvSteerErr);j++)
01120C  EB4200     CLR.B W4
01120E  984744     MOV.B W4, [W14+4]
011210  370012     BRA 0x11236
011230  90424E     MOV.B [W14+4], W4
011232  E84204     INC.B W4, W4
011234  984744     MOV.B W4, [W14+4]
011236  90424E     MOV.B [W14+4], W4
011238  524FE1     SUB.B W4, #0x1, [W15]
01123A  36FFEB     BRA LEU, 0x11212
17284:                 {
17285:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
011212  90021E     MOV [W14+2], W4
011214  784014     MOV.B [W4], W0
011216  78021E     MOV [W14], W4
011218  B92361     MUL.SU W4, #1, W6
01121A  90023E     MOV [W14+6], W4
01121C  9002CE     MOV [W14+8], W5
01121E  420206     ADD W4, W6, W4
011220  4A8287     ADDC W5, W7, W5
011222  784100     MOV.B W0, W2
011224  BE0004     MOV.D W4, W0
011226  07E1AB     RCALL WriteByte_FLASH
17286:                 Tm++;
011228  E80F1E     INC [W14], [W14]
17287:                 Ptr++;
01122A  90021E     MOV [W14+2], W4
01122C  E80204     INC W4, W4
01122E  980714     MOV W4, [W14+2]
17288:                 }
17289:             
17290:             
17291:                 Ptr=(unsigned char *)&Flgs2Err.Flags;
01123C  212E44     MOV #0x12E4, W4
01123E  980714     MOV W4, [W14+2]
17292:                 for (j=0;j<sizeof(Flgs2Err.Flags);j++)
011240  EB4200     CLR.B W4
011242  984744     MOV.B W4, [W14+4]
011244  370012     BRA 0x1126A
011264  90424E     MOV.B [W14+4], W4
011266  E84204     INC.B W4, W4
011268  984744     MOV.B W4, [W14+4]
01126A  90424E     MOV.B [W14+4], W4
01126C  524FE3     SUB.B W4, #0x3, [W15]
01126E  36FFEB     BRA LEU, 0x11246
17293:                 {
17294:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
011246  90021E     MOV [W14+2], W4
011248  784014     MOV.B [W4], W0
01124A  78021E     MOV [W14], W4
01124C  B92361     MUL.SU W4, #1, W6
01124E  90023E     MOV [W14+6], W4
011250  9002CE     MOV [W14+8], W5
011252  420206     ADD W4, W6, W4
011254  4A8287     ADDC W5, W7, W5
011256  784100     MOV.B W0, W2
011258  BE0004     MOV.D W4, W0
01125A  07E191     RCALL WriteByte_FLASH
17295:                 Tm++;
01125C  E80F1E     INC [W14], [W14]
17296:                 Ptr++;
01125E  90021E     MOV [W14+2], W4
011260  E80204     INC W4, W4
011262  980714     MOV W4, [W14+2]
17297:                 }
17298:             
17299:                 Ptr=(unsigned char *)&BatErr;
011270  237AE4     MOV #0x37AE, W4
011272  980714     MOV W4, [W14+2]
17300:                 for (j=0;j<sizeof(BatErr);j++)
011274  EB4200     CLR.B W4
011276  984744     MOV.B W4, [W14+4]
011278  370012     BRA 0x1129E
011298  90424E     MOV.B [W14+4], W4
01129A  E84204     INC.B W4, W4
01129C  984744     MOV.B W4, [W14+4]
01129E  90424E     MOV.B [W14+4], W4
0112A0  524FE0     SUB.B W4, #0x0, [W15]
0112A2  32FFEB     BRA Z, 0x1127A
17301:                 {
17302:                 WriteByte_FLASH(SectorAddr+(unsigned long int)Tm, *Ptr);
01127A  90021E     MOV [W14+2], W4
01127C  784014     MOV.B [W4], W0
01127E  78021E     MOV [W14], W4
011280  B92361     MUL.SU W4, #1, W6
011282  90023E     MOV [W14+6], W4
011284  9002CE     MOV [W14+8], W5
011286  420206     ADD W4, W6, W4
011288  4A8287     ADDC W5, W7, W5
01128A  784100     MOV.B W0, W2
01128C  BE0004     MOV.D W4, W0
01128E  07E177     RCALL WriteByte_FLASH
17303:                 Tm++;
011290  E80F1E     INC [W14], [W14]
17304:                 Ptr++;
011292  90021E     MOV [W14+2], W4
011294  E80204     INC W4, W4
011296  980714     MOV W4, [W14+2]
17305:                 }
17306:             
17307:             
17308:                 WriteStat_FLASH(0x3c);
0112A4  B3C3C0     MOV.B #0x3C, W0
0112A6  07E1A8     RCALL WriteStat_FLASH
0112A8  370001     BRA 0x112AC
17309:              
17310:             
17311:             }
0112AC  FA8000     ULNK
0112AE  060000     RETURN
17312:             
17313:             
17314:             void ReadErrors(void)
17315:             {
0112B0  FA0006     LNK #0x6
17316:                 int Tm=0;
0112B2  EB0200     CLR W4
0112B4  780F04     MOV W4, [W14]
17317:                 unsigned long int SectorAddr;
17318:             
17319:                 SectorAddr=4096*OdometrSectorNumConst;
0112B6  818456     MOV OdometrSectorNumConst, W6
0112B8  818467     MOV 0x308C, W7
0112BA  DD3A4C     SL W7, #12, W4
0112BC  DE32C4     LSR W6, #4, W5
0112BE  720285     IOR W4, W5, W5
0112C0  DD324C     SL W6, #12, W4
0112C2  980714     MOV W4, [W14+2]
0112C4  980725     MOV W5, [W14+4]
17320:             
17321:             
17322:                 ReadFlash(SectorAddr+Tm,sizeof(ErrOptions),(unsigned char *)&ErrOptions);
0112C6  78021E     MOV [W14], W4
0112C8  B92361     MUL.SU W4, #1, W6
0112CA  90021E     MOV [W14+2], W4
0112CC  9002AE     MOV [W14+4], W5
0112CE  420206     ADD W4, W6, W4
0112D0  4A8287     ADDC W5, W7, W5
0112D2  2305C3     MOV #0x305C, W3
0112D4  200012     MOV #0x1, W2
0112D6  BE0004     MOV.D W4, W0
0112D8  07E0F4     RCALL ReadFlash
17323:                 Tm=Tm+sizeof(ErrOptions);
0112DA  78021E     MOV [W14], W4
0112DC  E80204     INC W4, W4
0112DE  780F04     MOV W4, [W14]
17324:             
17325:                 ReadFlash(SectorAddr+Tm,sizeof(AlfaXResErr),(unsigned char *)&AlfaXResErr);
0112E0  230B00     MOV #0x30B0, W0
0112E2  78021E     MOV [W14], W4
0112E4  B92361     MUL.SU W4, #1, W6
0112E6  90021E     MOV [W14+2], W4
0112E8  9002AE     MOV [W14+4], W5
0112EA  420206     ADD W4, W6, W4
0112EC  4A8287     ADDC W5, W7, W5
0112EE  780180     MOV W0, W3
0112F0  200042     MOV #0x4, W2
0112F2  BE0004     MOV.D W4, W0
0112F4  07E0E6     RCALL ReadFlash
17326:                 Tm=Tm+sizeof(AlfaXResErr);
0112F6  78021E     MOV [W14], W4
0112F8  420264     ADD W4, #0x4, W4
0112FA  780F04     MOV W4, [W14]
17327:             
17328:                 ReadFlash(SectorAddr+Tm,sizeof(AlfaYResErr),(unsigned char *)&AlfaYResErr);
0112FC  230B40     MOV #0x30B4, W0
0112FE  78021E     MOV [W14], W4
011300  B92361     MUL.SU W4, #1, W6
011302  90021E     MOV [W14+2], W4
011304  9002AE     MOV [W14+4], W5
011306  420206     ADD W4, W6, W4
011308  4A8287     ADDC W5, W7, W5
01130A  780180     MOV W0, W3
01130C  200042     MOV #0x4, W2
01130E  BE0004     MOV.D W4, W0
011310  07E0D8     RCALL ReadFlash
17329:                 Tm=Tm+sizeof(AlfaYResErr);
011312  78021E     MOV [W14], W4
011314  420264     ADD W4, #0x4, W4
011316  780F04     MOV W4, [W14]
17330:             
17331:                 ReadFlash(SectorAddr+Tm,sizeof(SteerXErr),(unsigned char *)&SteerXErr);
011318  230B80     MOV #0x30B8, W0
01131A  78021E     MOV [W14], W4
01131C  B92361     MUL.SU W4, #1, W6
01131E  90021E     MOV [W14+2], W4
011320  9002AE     MOV [W14+4], W5
011322  420206     ADD W4, W6, W4
011324  4A8287     ADDC W5, W7, W5
011326  780180     MOV W0, W3
011328  200042     MOV #0x4, W2
01132A  BE0004     MOV.D W4, W0
01132C  07E0CA     RCALL ReadFlash
17332:                 Tm=Tm+sizeof(SteerXErr);
01132E  78021E     MOV [W14], W4
011330  420264     ADD W4, #0x4, W4
011332  780F04     MOV W4, [W14]
17333:             
17334:                 ReadFlash(SectorAddr+Tm,sizeof(SteerYErr),(unsigned char *)&SteerYErr);
011334  230BC0     MOV #0x30BC, W0
011336  78021E     MOV [W14], W4
011338  B92361     MUL.SU W4, #1, W6
01133A  90021E     MOV [W14+2], W4
01133C  9002AE     MOV [W14+4], W5
01133E  420206     ADD W4, W6, W4
011340  4A8287     ADDC W5, W7, W5
011342  780180     MOV W0, W3
011344  200042     MOV #0x4, W2
011346  BE0004     MOV.D W4, W0
011348  07E0BC     RCALL ReadFlash
17335:                 Tm=Tm+sizeof(SteerYErr);
01134A  78021E     MOV [W14], W4
01134C  420264     ADD W4, #0x4, W4
01134E  780F04     MOV W4, [W14]
17336:             
17337:                 ReadFlash(SectorAddr+Tm,sizeof(ErrorCode),(unsigned char *)&ErrorCode);
011350  78021E     MOV [W14], W4
011352  B92361     MUL.SU W4, #1, W6
011354  90021E     MOV [W14+2], W4
011356  9002AE     MOV [W14+4], W5
011358  420206     ADD W4, W6, W4
01135A  4A8287     ADDC W5, W7, W5
01135C  216D03     MOV #0x16D0, W3
01135E  200012     MOV #0x1, W2
011360  BE0004     MOV.D W4, W0
011362  07E0AF     RCALL ReadFlash
17338:                 Tm=Tm+sizeof(ErrorCode);
011364  78021E     MOV [W14], W4
011366  E80204     INC W4, W4
011368  780F04     MOV W4, [W14]
17339:             
17340:                 ReadFlash(SectorAddr+Tm,sizeof(NoBalanceCode),(unsigned char *)&NoBalanceCode);
01136A  78021E     MOV [W14], W4
01136C  B92361     MUL.SU W4, #1, W6
01136E  90021E     MOV [W14+2], W4
011370  9002AE     MOV [W14+4], W5
011372  420206     ADD W4, W6, W4
011374  4A8287     ADDC W5, W7, W5
011376  216D23     MOV #0x16D2, W3
011378  200012     MOV #0x1, W2
01137A  BE0004     MOV.D W4, W0
01137C  07E0A2     RCALL ReadFlash
17341:                 Tm=Tm+sizeof(NoBalanceCode);
01137E  78021E     MOV [W14], W4
011380  E80204     INC W4, W4
011382  780F04     MOV W4, [W14]
17342:             
17343:                 ReadFlash(SectorAddr+Tm,sizeof(FlgsErr.Flags),(unsigned char *)&FlgsErr.Flags);
011384  212DC0     MOV #0x12DC, W0
011386  78021E     MOV [W14], W4
011388  B92361     MUL.SU W4, #1, W6
01138A  90021E     MOV [W14+2], W4
01138C  9002AE     MOV [W14+4], W5
01138E  420206     ADD W4, W6, W4
011390  4A8287     ADDC W5, W7, W5
011392  780180     MOV W0, W3
011394  200042     MOV #0x4, W2
011396  BE0004     MOV.D W4, W0
011398  07E094     RCALL ReadFlash
17344:                 Tm=Tm+sizeof(FlgsErr.Flags);
01139A  78021E     MOV [W14], W4
01139C  420264     ADD W4, #0x4, W4
01139E  780F04     MOV W4, [W14]
17345:             
17346:                 ReadFlash(SectorAddr+Tm,sizeof(Flgs1Err.Flags),(unsigned char *)&Flgs1Err.Flags);
0113A0  212E00     MOV #0x12E0, W0
0113A2  78021E     MOV [W14], W4
0113A4  B92361     MUL.SU W4, #1, W6
0113A6  90021E     MOV [W14+2], W4
0113A8  9002AE     MOV [W14+4], W5
0113AA  420206     ADD W4, W6, W4
0113AC  4A8287     ADDC W5, W7, W5
0113AE  780180     MOV W0, W3
0113B0  200042     MOV #0x4, W2
0113B2  BE0004     MOV.D W4, W0
0113B4  07E086     RCALL ReadFlash
17347:                 Tm=Tm+sizeof(Flgs1Err.Flags);
0113B6  78021E     MOV [W14], W4
0113B8  420264     ADD W4, #0x4, W4
0113BA  780F04     MOV W4, [W14]
17348:             
17349:                 ReadFlash(SectorAddr+Tm,sizeof(LastMainTiltAngleMnErr),(unsigned char *)&LastMainTiltAngleMnErr);
0113BC  234C60     MOV #0x34C6, W0
0113BE  78021E     MOV [W14], W4
0113C0  B92361     MUL.SU W4, #1, W6
0113C2  90021E     MOV [W14+2], W4
0113C4  9002AE     MOV [W14+4], W5
0113C6  420206     ADD W4, W6, W4
0113C8  4A8287     ADDC W5, W7, W5
0113CA  780180     MOV W0, W3
0113CC  200022     MOV #0x2, W2
0113CE  BE0004     MOV.D W4, W0
0113D0  07E078     RCALL ReadFlash
17350:                 Tm=Tm+sizeof(LastMainTiltAngleMnErr);
0113D2  78021E     MOV [W14], W4
0113D4  E88204     INC2 W4, W4
0113D6  780F04     MOV W4, [W14]
17351:             
17352:                 ReadFlash(SectorAddr+Tm,sizeof(LastSteerTiltAngleMnErr),(unsigned char *)&LastSteerTiltAngleMnErr);
0113D8  234C80     MOV #0x34C8, W0
0113DA  78021E     MOV [W14], W4
0113DC  B92361     MUL.SU W4, #1, W6
0113DE  90021E     MOV [W14+2], W4
0113E0  9002AE     MOV [W14+4], W5
0113E2  420206     ADD W4, W6, W4
0113E4  4A8287     ADDC W5, W7, W5
0113E6  780180     MOV W0, W3
0113E8  200022     MOV #0x2, W2
0113EA  BE0004     MOV.D W4, W0
0113EC  07E06A     RCALL ReadFlash
17353:                 Tm=Tm+sizeof(LastSteerTiltAngleMnErr);
0113EE  78021E     MOV [W14], W4
0113F0  E88204     INC2 W4, W4
0113F2  780F04     MOV W4, [W14]
17354:             
17355:                 ReadFlash(SectorAddr+Tm,sizeof(TiltAngleAvMnErr),(unsigned char *)&TiltAngleAvMnErr);
0113F4  234CA0     MOV #0x34CA, W0
0113F6  78021E     MOV [W14], W4
0113F8  B92361     MUL.SU W4, #1, W6
0113FA  90021E     MOV [W14+2], W4
0113FC  9002AE     MOV [W14+4], W5
0113FE  420206     ADD W4, W6, W4
011400  4A8287     ADDC W5, W7, W5
011402  780180     MOV W0, W3
011404  200022     MOV #0x2, W2
011406  BE0004     MOV.D W4, W0
011408  07E05C     RCALL ReadFlash
17356:                 Tm=Tm+sizeof(TiltAngleAvMnErr);
01140A  78021E     MOV [W14], W4
01140C  E88204     INC2 W4, W4
01140E  780F04     MOV W4, [W14]
17357:             
17358:                 ReadFlash(SectorAddr+Tm,sizeof(MainTiltNumErr),(unsigned char *)&MainTiltNumErr);
011410  78021E     MOV [W14], W4
011412  B92361     MUL.SU W4, #1, W6
011414  90021E     MOV [W14+2], W4
011416  9002AE     MOV [W14+4], W5
011418  420206     ADD W4, W6, W4
01141A  4A8287     ADDC W5, W7, W5
01141C  234D23     MOV #0x34D2, W3
01141E  200012     MOV #0x1, W2
011420  BE0004     MOV.D W4, W0
011422  07E04F     RCALL ReadFlash
17359:                 Tm=Tm+sizeof(MainTiltNumErr);
011424  78021E     MOV [W14], W4
011426  E80204     INC W4, W4
011428  780F04     MOV W4, [W14]
17360:             
17361:                 ReadFlash(SectorAddr+Tm,sizeof(SteerTiltNumErr),(unsigned char *)&SteerTiltNumErr);
01142A  78021E     MOV [W14], W4
01142C  B92361     MUL.SU W4, #1, W6
01142E  90021E     MOV [W14+2], W4
011430  9002AE     MOV [W14+4], W5
011432  420206     ADD W4, W6, W4
011434  4A8287     ADDC W5, W7, W5
011436  234D33     MOV #0x34D3, W3
011438  200012     MOV #0x1, W2
01143A  BE0004     MOV.D W4, W0
01143C  07E042     RCALL ReadFlash
17362:                 Tm=Tm+sizeof(SteerTiltNumErr);
01143E  78021E     MOV [W14], W4
011440  E80204     INC W4, W4
011442  780F04     MOV W4, [W14]
17363:             
17364:                 ReadFlash(SectorAddr+Tm,sizeof(LastMainTiltAngleSteerErr),(unsigned char *)&LastMainTiltAngleSteerErr);
011444  234CC0     MOV #0x34CC, W0
011446  78021E     MOV [W14], W4
011448  B92361     MUL.SU W4, #1, W6
01144A  90021E     MOV [W14+2], W4
01144C  9002AE     MOV [W14+4], W5
01144E  420206     ADD W4, W6, W4
011450  4A8287     ADDC W5, W7, W5
011452  780180     MOV W0, W3
011454  200022     MOV #0x2, W2
011456  BE0004     MOV.D W4, W0
011458  07E034     RCALL ReadFlash
17365:                 Tm=Tm+sizeof(LastMainTiltAngleSteerErr);
01145A  78021E     MOV [W14], W4
01145C  E88204     INC2 W4, W4
01145E  780F04     MOV W4, [W14]
17366:             
17367:                 ReadFlash(SectorAddr+Tm,sizeof(LastSteerTiltAngleSteerErr),(unsigned char *)&LastSteerTiltAngleSteerErr);
011460  234CE0     MOV #0x34CE, W0
011462  78021E     MOV [W14], W4
011464  B92361     MUL.SU W4, #1, W6
011466  90021E     MOV [W14+2], W4
011468  9002AE     MOV [W14+4], W5
01146A  420206     ADD W4, W6, W4
01146C  4A8287     ADDC W5, W7, W5
01146E  780180     MOV W0, W3
011470  200022     MOV #0x2, W2
011472  BE0004     MOV.D W4, W0
011474  07E026     RCALL ReadFlash
17368:                 Tm=Tm+sizeof(LastSteerTiltAngleSteerErr);
011476  78021E     MOV [W14], W4
011478  E88204     INC2 W4, W4
01147A  780F04     MOV W4, [W14]
17369:             
17370:                 ReadFlash(SectorAddr+Tm,sizeof(TiltAngleAvSteerErr),(unsigned char *)&TiltAngleAvSteerErr);
01147C  234D00     MOV #0x34D0, W0
01147E  78021E     MOV [W14], W4
011480  B92361     MUL.SU W4, #1, W6
011482  90021E     MOV [W14+2], W4
011484  9002AE     MOV [W14+4], W5
011486  420206     ADD W4, W6, W4
011488  4A8287     ADDC W5, W7, W5
01148A  780180     MOV W0, W3
01148C  200022     MOV #0x2, W2
01148E  BE0004     MOV.D W4, W0
011490  07E018     RCALL ReadFlash
17371:                 Tm=Tm+sizeof(TiltAngleAvSteerErr);
011492  78021E     MOV [W14], W4
011494  E88204     INC2 W4, W4
011496  780F04     MOV W4, [W14]
17372:             
17373:                 ReadFlash(SectorAddr+Tm,sizeof(Flgs2Err.Flags),(unsigned char *)&Flgs2Err.Flags);
011498  212E40     MOV #0x12E4, W0
01149A  78021E     MOV [W14], W4
01149C  B92361     MUL.SU W4, #1, W6
01149E  90021E     MOV [W14+2], W4
0114A0  9002AE     MOV [W14+4], W5
0114A2  420206     ADD W4, W6, W4
0114A4  4A8287     ADDC W5, W7, W5
0114A6  780180     MOV W0, W3
0114A8  200042     MOV #0x4, W2
0114AA  BE0004     MOV.D W4, W0
0114AC  07E00A     RCALL ReadFlash
17374:                 Tm=Tm+sizeof(Flgs2Err.Flags);
0114AE  78021E     MOV [W14], W4
0114B0  420264     ADD W4, #0x4, W4
0114B2  780F04     MOV W4, [W14]
17375:             
17376:                 ReadFlash(SectorAddr+Tm,sizeof(BatErr),(unsigned char *)&BatErr);
0114B4  78021E     MOV [W14], W4
0114B6  B92361     MUL.SU W4, #1, W6
0114B8  90021E     MOV [W14+2], W4
0114BA  9002AE     MOV [W14+4], W5
0114BC  420206     ADD W4, W6, W4
0114BE  4A8287     ADDC W5, W7, W5
0114C0  237AE3     MOV #0x37AE, W3
0114C2  200012     MOV #0x1, W2
0114C4  BE0004     MOV.D W4, W0
0114C6  07DFFD     RCALL ReadFlash
17377:                 Tm=Tm+sizeof(BatErr);
0114C8  78021E     MOV [W14], W4
0114CA  E80204     INC W4, W4
0114CC  780F04     MOV W4, [W14]
17378:             
17379:             
17380:             }
0114CE  FA8000     ULNK
0114D0  060000     RETURN
17381:             
17382:             
17383:             
17384:             
17385:             void UARTInit_U4(void)
17386:             {
0114D2  FA0000     LNK #0x0
17387:             
17388:             	IPC22bits.U4TXIP = 1;
0114D4  804364     MOV IPC22, W4
0114D6  A04004     BSET W4, #4
0114D8  A15004     BCLR W4, #5
0114DA  A16004     BCLR W4, #6
0114DC  884364     MOV W4, IPC22
17389:             	IPC22bits.U4RXIP = 7;
0114DE  804364     MOV IPC22, W4
0114E0  A00004     BSET W4, #0
0114E2  A01004     BSET W4, #1
0114E4  A02004     BSET W4, #2
0114E6  884364     MOV W4, IPC22
17390:             
17391:             
17392:             #if defined REV2
17393:             #if defined SERVICE
17394:                 if (U4_9600)
17395:             #else
17396:                 if (0)
17397:             #endif
17398:                 	U4BRG =   390;//
17399:                 else
17400:                     U4BRG =   97;//390;//
0114E8  200614     MOV #0x61, W4
0114EA  8815C4     MOV W4, U4BRG
17401:             #else
17402:             	U4BRG =  97;//390;//
17403:             #endif    
17404:             
17405:             
17406:             
17407:             
17408:             	U4MODEbits.UARTEN = 1;		// UART2 is Enabled
0114EC  A8E2B1     BSET 0x2B1, #7
17409:             	U4MODEbits.USIDL = 0;		// Continue operation at Idlestate
0114EE  A9A2B1     BCLR 0x2B1, #5
17410:             	U4MODEbits.IREN = 0;		// IrDA En/Decoder is disabled
0114F0  A982B1     BCLR 0x2B1, #4
17411:             	U4MODEbits.RTSMD = 1; 		// Simplex mode
0114F2  A862B1     BSET 0x2B1, #3
17412:             	U4MODEbits.UEN = 0b00;		// UxTX and UxRX pins are enabled and used; UxCTS, UxRTS and BCLKx pins are controlled by port latches.
0114F4  801584     MOV U4MODE, W4
0114F6  A18004     BCLR W4, #8
0114F8  A19004     BCLR W4, #9
0114FA  881584     MOV W4, U4MODE
17413:             	U4MODEbits.WAKE = 0;		// Wake-up on start bit is enabled
0114FC  A9E2B0     BCLR U4MODE, #7
17414:             	U4MODEbits.LPBACK = 0;		// Loop-back is disabled
0114FE  A9C2B0     BCLR U4MODE, #6
17415:             	U4MODEbits.ABAUD = 0;		// auto baud is disabled
011500  A9A2B0     BCLR U4MODE, #5
17416:             	U4MODEbits.RXINV = 0;		// No RX inversion
011502  A982B0     BCLR U4MODE, #4
17417:             	U4MODEbits.BRGH = 0;//1;		// low boud rate
011504  A962B0     BCLR U4MODE, #3
17418:             	U4MODEbits.PDSEL = 0b00; 	// 8bit no parity
011506  801584     MOV U4MODE, W4
011508  A11004     BCLR W4, #1
01150A  A12004     BCLR W4, #2
01150C  881584     MOV W4, U4MODE
17419:             	U4MODEbits.STSEL = 0;		// one stop bit
01150E  A902B0     BCLR U4MODE, #0
17420:             
17421:             
17422:             	U4STAbits.UTXISEL0 = 0;
011510  A9A2B3     BCLR 0x2B3, #5
17423:             	U4STAbits.UTXISEL1 = 0;
011512  A9E2B3     BCLR 0x2B3, #7
17424:             	U4STA &= 0xDFFF;			// clear TXINV by bit masking
011514  801595     MOV U4STA, W5
011516  2DFFF4     MOV #0xDFFF, W4
011518  628204     AND W5, W4, W4
01151A  881594     MOV W4, U4STA
17425:             	U4STAbits.UTXBRK = 0;		// sync break tx is disabled
01151C  A962B3     BCLR 0x2B3, #3
17426:             	U4STAbits.UTXEN = 1;		//transmit  is enabled
01151E  A842B3     BSET 0x2B3, #2
17427:             	U4STAbits.URXISEL = 0b00;	// interrupt flag bit is set when RXBUF is filled whith 1 character
011520  801594     MOV U4STA, W4
011522  A16004     BCLR W4, #6
011524  A17004     BCLR W4, #7
011526  881594     MOV W4, U4STA
17428:             	U4STAbits.ADDEN = 0;		// address detect mode is disabled
011528  A9A2B2     BCLR U4STA, #5
17429:             
17430:             	IFS5bits.U4RXIF = 0;		// clear interrupt flag of rx
01152A  A9080B     BCLR 0x80B, #0
17431:             	IEC5bits.U4RXIE = 1;		// enable rx recieved data interrupt
01152C  A8082B     BSET 0x82B, #0
17432:             
17433:             	IFS5bits.U4TXIF = 0;		// clear interrupt flag of rx
01152E  A9280B     BCLR 0x80B, #1
17434:             	IEC5bits.U4TXIE = 0;		// enable rx recieved data interrupt
011530  A9282B     BCLR 0x82B, #1
17435:             
17436:             
17437:                //     U4TXREG = 0xaa;
17438:             
17439:             
17440:             
17441:             }
011532  FA8000     ULNK
011534  060000     RETURN
17442:             
17443:             
17444:             void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void){
011536  BE9F84     MOV.D W4, [W15++]
011538  F80032     PUSH DSRPAG
01153A  202004     MOV #0x200, W4
01153C  880194     MOV W4, DSRPAG
01153E  000000     NOP
011540  FA0000     LNK #0x0
17445:                 IFS5bits.U4TXIF = 0;// Clear TX Interrupt flag
011542  A9280B     BCLR 0x80B, #1
17446:                 //U4TXREG = 0xab;
17447:                 //return;
17448:                 TimeOutHC05=125;
011544  2007D4     MOV #0x7D, W4
011546  8A1474     MOV W4, TimeOutHC05
17449:             
17450:                 if (CntTrmHC05<CntTrmHC05_N)
011548  231CB4     MOV #0x31CB, W4
01154A  784214     MOV.B [W4], W4
01154C  FB8284     ZE W4, W5
01154E  818E74     MOV CntTrmHC05_N, W4
011550  528F84     SUB W5, W4, [W15]
011552  3D001C     BRA GE, 0x1158C
17451:                 {
17452:                     if (AT_Trm)
011554  809615     MOV 0x12C2, W5
011556  210004     MOV #0x1000, W4
011558  628204     AND W5, W4, W4
01155A  520FE0     SUB W4, #0x0, [W15]
01155C  320009     BRA Z, 0x11570
17453:                 U4TXREG = TrmMassHC05[CntTrmHC05];
01155E  231CB4     MOV #0x31CB, W4
011560  784214     MOV.B [W4], W4
011562  FB8204     ZE W4, W4
011564  231D05     MOV #0x31D0, W5
011566  428204     ADD W5, W4, W4
011568  784214     MOV.B [W4], W4
01156A  FB0204     SE W4, W4
01156C  8815A4     MOV W4, U4TXREG
01156E  370008     BRA 0x11580
17454:                     else
17455:                 U4TXREG = HC05TrmMass[CntTrmHC05];
011570  231CB4     MOV #0x31CB, W4
011572  784214     MOV.B [W4], W4
011574  FB8204     ZE W4, W4
011576  230CE5     MOV #0x30CE, W5
011578  428204     ADD W5, W4, W4
01157A  784214     MOV.B [W4], W4
01157C  FB8204     ZE W4, W4
01157E  8815A4     MOV W4, U4TXREG
17456:             
17457:                 CntTrmHC05++;
011580  231CB4     MOV #0x31CB, W4
011582  784214     MOV.B [W4], W4
011584  E84204     INC.B W4, W4
011586  231CB5     MOV #0x31CB, W5
011588  784A84     MOV.B W4, [W5]
01158A  370007     BRA 0x1159A
17458:                 }
17459:                 else
17460:                 {
17461:                 OnTransmittHC05=0;
01158C  809614     MOV 0x12C2, W4
01158E  A19004     BCLR W4, #9
011590  889614     MOV W4, 0x12C2
17462:                 HC05_BUSY=0;
011592  809634     MOV 0x12C6, W4
011594  A1A004     BCLR W4, #10
011596  889634     MOV W4, 0x12C6
17463:                 IEC5bits.U4TXIE = 0;		// enable rx recieved data interrupt
011598  A9282B     BCLR 0x82B, #1
17464:                 }
17465:             
17466:             
17467:             }
01159A  FA8000     ULNK
01159C  F90032     POP DSRPAG
01159E  BE024F     MOV.D [--W15], W4
0115A0  064000     RETFIE
17468:             
17469:             
17470:             
17471:             
17472:             
17473:             
17474:             void InitPort_U4(void)
17475:             {
0115A2  FA0000     LNK #0x0
17476:             TRISGbits.TRISG14=0;
0115A4  A9CE61     BCLR 0xE61, #6
17477:             TRISGbits.TRISG12=1;
0115A6  A88E61     BSET 0xE61, #4
17478:             
17479:             RPINR28bits.U4RXR=124;
0115A8  8036C5     MOV RPINR28, W5
0115AA  2FF804     MOV #0xFF80, W4
0115AC  628284     AND W5, W4, W5
0115AE  2007C4     MOV #0x7C, W4
0115B0  728204     IOR W5, W4, W4
0115B2  8836C4     MOV W4, RPINR28
17480:             RPOR15bits.RP126R=0b011101;
0115B4  8034F5     MOV RPOR15, W5
0115B6  2FFC04     MOV #0xFFC0, W4
0115B8  628204     AND W5, W4, W4
0115BA  B301D4     IOR #0x1D, W4
0115BC  8834F4     MOV W4, RPOR15
17481:             #ifdef REV2
17482:             TRIS_KEY_BT=0;
0115BE  A9EE60     BCLR TRISG, #7
17483:             #endif
17484:             }
0115C0  FA8000     ULNK
0115C2  060000     RETURN
17485:             
17486:             void __attribute__((interrupt, auto_psv))   _U4RXInterrupt()
17487:             {																	//?????????????????????????????? ?????? ?????????????????? ??????????????? UART2
0115C4  F80036     PUSH RCOUNT
0115C6  BE9F80     MOV.D W0, [W15++]
0115C8  BE9F82     MOV.D W2, [W15++]
0115CA  BE9F84     MOV.D W4, [W15++]
0115CC  BE9F86     MOV.D W6, [W15++]
0115CE  F80032     PUSH DSRPAG
0115D0  202000     MOV #0x200, W0
0115D2  880190     MOV W0, DSRPAG
0115D4  000000     NOP
0115D6  FA0002     LNK #0x2
17488:             																	// ??????????????? ?????? ?????????????????????????????????
17489:             unsigned char BtRc;
17490:             	BtRc=U4RXREG;
0115D8  8015B4     MOV U4RXREG, W4
0115DA  784F04     MOV.B W4, [W14]
17491:             	IFS5bits.U4RXIF = 0;					// ??????????????? ???????????????
0115DC  A9080B     BCLR 0x80B, #0
17492:             
17493:                     CntU4TimeOut=500;
0115DE  201F44     MOV #0x1F4, W4
0115E0  8A13F4     MOV W4, CntU4TimeOut
17494:             
17495:                         if (U4STAbits.OERR)
0115E2  801594     MOV U4STA, W4
0115E4  620262     AND W4, #0x2, W4
0115E6  520FE0     SUB W4, #0x0, [W15]
0115E8  320001     BRA Z, 0x115EC
17496:                         {
17497:                         U4STAbits.OERR=0;
0115EA  A922B2     BCLR U4STA, #1
17498:                         }
17499:             
17500:             
17501:                     if (AT_Rec)
0115EC  809615     MOV 0x12C2, W5
0115EE  240004     MOV #0x4000, W4
0115F0  628204     AND W5, W4, W4
0115F2  520FE0     SUB W4, #0x0, [W15]
0115F4  320029     BRA Z, 0x11648
17502:                     {
17503:             
17504:             
17505:                         RecMassHC05[CntRecHC05]=BtRc;
0115F6  231CC4     MOV #0x31CC, W4
0115F8  784214     MOV.B [W4], W4
0115FA  FB8284     ZE W4, W5
0115FC  78421E     MOV.B [W14], W4
0115FE  232346     MOV #0x3234, W6
011600  430285     ADD W6, W5, W5
011602  784A84     MOV.B W4, [W5]
17506:                         CntRecHC05++;
011604  231CC4     MOV #0x31CC, W4
011606  784214     MOV.B [W4], W4
011608  E84204     INC.B W4, W4
01160A  231CC5     MOV #0x31CC, W5
01160C  784A84     MOV.B W4, [W5]
17507:             
17508:                     if ((CntRecHC05>2)&&(RecMassHC05[CntRecHC05-2]==13)&&(RecMassHC05[CntRecHC05-1]==10))
01160E  231CC4     MOV #0x31CC, W4
011610  784214     MOV.B [W4], W4
011612  524FE2     SUB.B W4, #0x2, [W15]
011614  360072     BRA LEU, 0x116FA
011616  231CC4     MOV #0x31CC, W4
011618  784214     MOV.B [W4], W4
01161A  FB8204     ZE W4, W4
01161C  E98204     DEC2 W4, W4
01161E  232345     MOV #0x3234, W5
011620  428204     ADD W5, W4, W4
011622  784214     MOV.B [W4], W4
011624  524FED     SUB.B W4, #0xD, [W15]
011626  3A0069     BRA NZ, 0x116FA
011628  231CC4     MOV #0x31CC, W4
01162A  784214     MOV.B [W4], W4
01162C  FB8204     ZE W4, W4
01162E  E90204     DEC W4, W4
011630  232345     MOV #0x3234, W5
011632  428204     ADD W5, W4, W4
011634  784214     MOV.B [W4], W4
011636  524FEA     SUB.B W4, #0xA, [W15]
011638  3A0060     BRA NZ, 0x116FA
17509:                     {
17510:                         CntRecHC05=0;
01163A  231CC5     MOV #0x31CC, W5
01163C  EB4200     CLR.B W4
01163E  784A84     MOV.B W4, [W5]
17511:                         HvReplyHC05=1;
011640  809614     MOV 0x12C2, W4
011642  A0A004     BSET W4, #10
011644  889614     MOV W4, 0x12C2
011646  370059     BRA 0x116FA
17512:                     }
17513:                     }
17514:                     else
17515:                     {
17516:             
17517:             
17518:             if (!GettingPacketU4_FL)
011648  809615     MOV 0x12C2, W5
01164A  280004     MOV #0x8000, W4
01164C  628204     AND W5, W4, W4
01164E  520FE0     SUB W4, #0x0, [W15]
011650  3A0015     BRA NZ, 0x1167C
17519:             {
17520:             	if ((BtRc==BtRcPrev_U4)&&(BtRc==0xff))
011652  214524     MOV #0x1452, W4
011654  784214     MOV.B [W4], W4
011656  78429E     MOV.B [W14], W5
011658  52CF84     SUB.B W5, W4, [W15]
01165A  3A000D     BRA NZ, 0x11676
01165C  78421E     MOV.B [W14], W4
01165E  424FE1     ADD.B W4, #0x1, [W15]
011660  3A000A     BRA NZ, 0x11676
17521:             	{
17522:             	BtRcPrev_U4=0;
011662  214525     MOV #0x1452, W5
011664  EB4200     CLR.B W4
011666  784A84     MOV.B W4, [W5]
17523:             	GettingPacketU4_FL=1;
011668  809614     MOV 0x12C2, W4
01166A  A0F004     BSET W4, #15
01166C  889614     MOV W4, 0x12C2
17524:             	CntRec_U4=0;
01166E  214535     MOV #0x1453, W5
011670  EB4200     CLR.B W4
011672  784A84     MOV.B W4, [W5]
011674  370042     BRA 0x116FA
17525:             	}
17526:             	else
17527:             	{
17528:             	BtRcPrev_U4=BtRc;
011676  214524     MOV #0x1452, W4
011678  784A1E     MOV.B [W14], [W4]
01167A  37003F     BRA 0x116FA
17529:             	}
17530:             }
17531:             else
17532:             {
17533:             	if (CntRec_U4>(sizeof(RecBytes)-1))
01167C  214534     MOV #0x1453, W4
01167E  784214     MOV.B [W4], W4
011680  424FE3     ADD.B W4, #0x3, [W15]
011682  360004     BRA LEU, 0x1168C
17534:             	GettingPacketU4_FL=0;
011684  809614     MOV 0x12C2, W4
011686  A1F004     BCLR W4, #15
011688  889614     MOV W4, 0x12C2
01168A  370037     BRA 0x116FA
17535:             	else
17536:             	{
17537:             	RecBytes[CntRec_U4]=BtRc;
01168C  214534     MOV #0x1453, W4
01168E  784214     MOV.B [W4], W4
011690  FB8204     ZE W4, W4
011692  229265     MOV #0x2926, W5
011694  428204     ADD W5, W4, W4
011696  784A1E     MOV.B [W14], [W4]
17538:             	CntRec_U4++;
011698  214534     MOV #0x1453, W4
01169A  784214     MOV.B [W4], W4
01169C  E84204     INC.B W4, W4
01169E  214535     MOV #0x1453, W5
0116A0  784A84     MOV.B W4, [W5]
17539:             		if (CntRec_U4>(RecBytes[0]+1))
0116A2  214534     MOV #0x1453, W4
0116A4  784214     MOV.B [W4], W4
0116A6  FB8284     ZE W4, W5
0116A8  229264     MOV #0x2926, W4
0116AA  784214     MOV.B [W4], W4
0116AC  FB8204     ZE W4, W4
0116AE  E80204     INC W4, W4
0116B0  528F84     SUB W5, W4, [W15]
0116B2  340023     BRA LE, 0x116FA
17540:             		{
17541:             		GettingPacketU4_FL=0;
0116B4  809614     MOV 0x12C2, W4
0116B6  A1F004     BCLR W4, #15
0116B8  889614     MOV W4, 0x12C2
17542:                        //     TiltTimoutCnt=TiltTimoutConst;
17543:             
17544:                     if (RecBytes[1]==112)
0116BA  229274     MOV #0x2927, W4
0116BC  784294     MOV.B [W4], W5
0116BE  B3C704     MOV.B #0x70, W4
0116C0  52CF84     SUB.B W5, W4, [W15]
0116C2  3A0003     BRA NZ, 0x116CA
17545:                     {
17546:                         Nop();
0116C4  000000     NOP
17547:                         Nop();
0116C6  000000     NOP
17548:                         Nop();
0116C8  000000     NOP
17549:                     }
17550:                     
17551:                     
17552:                 			if (CalcCheckSumm(RecBytes[0]+1, RecBytes)!=RecBytes[RecBytes[0]+1])
0116CA  229264     MOV #0x2926, W4
0116CC  784214     MOV.B [W4], W4
0116CE  FB8204     ZE W4, W4
0116D0  E80204     INC W4, W4
0116D2  229261     MOV #0x2926, W1
0116D4  780004     MOV W4, W0
0116D6  07C20F     RCALL CalcCheckSumm
0116D8  784200     MOV.B W0, W4
0116DA  229265     MOV #0x2926, W5
0116DC  784295     MOV.B [W5], W5
0116DE  FB8285     ZE W5, W5
0116E0  E80285     INC W5, W5
0116E2  229266     MOV #0x2926, W6
0116E4  430285     ADD W6, W5, W5
0116E6  784295     MOV.B [W5], W5
0116E8  524F85     SUB.B W4, W5, [W15]
0116EA  320004     BRA Z, 0x116F4
17553:             			{
17554:             			CHK_Err_U4=1;
0116EC  809624     MOV Flgs2, W4
0116EE  A00004     BSET W4, #0
0116F0  889624     MOV W4, Flgs2
0116F2  370003     BRA 0x116FA
17555:             			}
17556:             			else
17557:             			{
17558:              /*                           int nn=RecBytes[0];
17559:                                         int j;
17560:                                         for (j=0;j<nn;j++)
17561:                                         {
17562:                                             RecBytes[j]=RecBytes[j+1];
17563:                                         }*/
17564:                                     HvPacketU4_FL=1;
0116F4  809624     MOV Flgs2, W4
0116F6  A01004     BSET W4, #1
0116F8  889624     MOV W4, Flgs2
17565:             
17566:             			}
17567:             		}
17568:             	}
17569:             
17570:             
17571:             
17572:             
17573:                     }
17574:                     }
17575:             
17576:             
17577:             }
0116FA  FA8000     ULNK
0116FC  F90032     POP DSRPAG
0116FE  BE034F     MOV.D [--W15], W6
011700  BE024F     MOV.D [--W15], W4
011702  BE014F     MOV.D [--W15], W2
011704  BE004F     MOV.D [--W15], W0
011706  F90036     POP RCOUNT
011708  064000     RETFIE
17578:             
17579:             
17580:             void TrmHC05_AT(char *Mass,int N)
17581:             {
01170A  FA0006     LNK #0x6
01170C  980710     MOV W0, [W14+2]
01170E  980721     MOV W1, [W14+4]
17582:                 int i;
17583:                 while (OnTransmittHC05);
011710  000000     NOP
011712  809615     MOV 0x12C2, W5
011714  202004     MOV #0x200, W4
011716  628204     AND W5, W4, W4
011718  520FE0     SUB W4, #0x0, [W15]
01171A  3AFFFB     BRA NZ, 0x11712
17584:             
17585:                 AT_Trm=1;
01171C  809614     MOV 0x12C2, W4
01171E  A0C004     BSET W4, #12
011720  889614     MOV W4, 0x12C2
17586:             
17587:                 for (i=0;i<30000;i++);
011722  EB0200     CLR W4
011724  780F04     MOV W4, [W14]
011726  370001     BRA 0x1172A
011728  E80F1E     INC [W14], [W14]
01172A  2752F4     MOV #0x752F, W4
01172C  78029E     MOV [W14], W5
01172E  528F84     SUB W5, W4, [W15]
011730  34FFFB     BRA LE, 0x11728
17588:             
17589:                 for (i=0;i<N;i++)
011732  EB0200     CLR W4
011734  780F04     MOV W4, [W14]
011736  370008     BRA 0x11748
011746  E80F1E     INC [W14], [W14]
011748  90022E     MOV [W14+4], W4
01174A  78029E     MOV [W14], W5
01174C  528F84     SUB W5, W4, [W15]
01174E  35FFF4     BRA LT, 0x11738
17590:                 {
17591:                     TrmMassHC05[i]=Mass[i];
011738  78021E     MOV [W14], W4
01173A  90029E     MOV [W14+2], W5
01173C  428204     ADD W5, W4, W4
01173E  784214     MOV.B [W4], W4
011740  231D05     MOV #0x31D0, W5
011742  42829E     ADD W5, [W14], W5
011744  784A84     MOV.B W4, [W5]
17592:                 }
17593:             
17594:             
17595:                 TrmMassHC05[i-1]=0xd;
011750  E9021E     DEC [W14], W4
011752  231D05     MOV #0x31D0, W5
011754  428284     ADD W5, W4, W5
011756  B3C0D4     MOV.B #0xD, W4
011758  784A84     MOV.B W4, [W5]
17596:                 TrmMassHC05[i]=0xa;
01175A  231D04     MOV #0x31D0, W4
01175C  42029E     ADD W4, [W14], W5
01175E  B3C0A4     MOV.B #0xA, W4
011760  784A84     MOV.B W4, [W5]
17597:                 if (MustResetPIN)
011762  8096B4     MOV 0x12D6, W4
011764  620270     AND W4, #0x10, W4
011766  520FE0     SUB W4, #0x0, [W15]
011768  32000A     BRA Z, 0x1177E
17598:                 {
17599:                 TrmMassHC05[i+1]=0xd;
01176A  E8021E     INC [W14], W4
01176C  231D05     MOV #0x31D0, W5
01176E  428284     ADD W5, W4, W5
011770  B3C0D4     MOV.B #0xD, W4
011772  784A84     MOV.B W4, [W5]
17600:                 TrmMassHC05[i+2]=0xa;
011774  E8821E     INC2 [W14], W4
011776  231D05     MOV #0x31D0, W5
011778  428284     ADD W5, W4, W5
01177A  B3C0A4     MOV.B #0xA, W4
01177C  784A84     MOV.B W4, [W5]
17601:                 //N++;
17602:                 //N++;
17603:                 }
17604:             
17605:             
17606:                 OnTransmittHC05=1;
01177E  809614     MOV 0x12C2, W4
011780  A09004     BSET W4, #9
011782  889614     MOV W4, 0x12C2
17607:                 CntTrmHC05=1;
011784  231CB5     MOV #0x31CB, W5
011786  B3C014     MOV.B #0x1, W4
011788  784A84     MOV.B W4, [W5]
17608:                 CntTrmHC05_N=N+1;
01178A  90022E     MOV [W14+4], W4
01178C  E80204     INC W4, W4
01178E  898E74     MOV W4, CntTrmHC05_N
17609:             
17610:                 U4TXREG = TrmMassHC05[0];
011790  231D04     MOV #0x31D0, W4
011792  784214     MOV.B [W4], W4
011794  FB0204     SE W4, W4
011796  8815A4     MOV W4, U4TXREG
17611:                 IEC5bits.U4TXIE = 1;
011798  A8282B     BSET 0x82B, #1
17612:             
17613:             
17614:             }
01179A  FA8000     ULNK
01179C  060000     RETURN
17615:             
17616:             
17617:             
17618:             
17619:             void TrmHC05(unsigned char *Mass)
17620:             {
01179E  FA0004     LNK #0x4
0117A0  980710     MOV W0, [W14+2]
17621:                 unsigned char N=Mass[2];
0117A2  90021E     MOV [W14+2], W4
0117A4  E88204     INC2 W4, W4
0117A6  784F14     MOV.B [W4], [W14]
17622:             
17623:             
17624:             
17625:                 while (OnTransmittHC05);
0117A8  000000     NOP
0117AA  809615     MOV 0x12C2, W5
0117AC  202004     MOV #0x200, W4
0117AE  628204     AND W5, W4, W4
0117B0  520FE0     SUB W4, #0x0, [W15]
0117B2  3AFFFB     BRA NZ, 0x117AA
17626:             
17627:             
17628:             
17629:                 AT_Trm=0;
0117B4  809614     MOV 0x12C2, W4
0117B6  A1C004     BCLR W4, #12
0117B8  889614     MOV W4, 0x12C2
17630:             
17631:             
17632:             
17633:             
17634:                 OnTransmittHC05=1;
0117BA  809614     MOV 0x12C2, W4
0117BC  A09004     BSET W4, #9
0117BE  889614     MOV W4, 0x12C2
17635:                 CntTrmHC05=1;
0117C0  231CB5     MOV #0x31CB, W5
0117C2  B3C014     MOV.B #0x1, W4
0117C4  784A84     MOV.B W4, [W5]
17636:                 CntTrmHC05_N=N+4;
0117C6  78429E     MOV.B [W14], W5
0117C8  FB8205     ZE W5, W4
0117CA  420264     ADD W4, #0x4, W4
0117CC  898E74     MOV W4, CntTrmHC05_N
17637:             
17638:                 U4TXREG = Mass[0];
0117CE  90021E     MOV [W14+2], W4
0117D0  784214     MOV.B [W4], W4
0117D2  FB8204     ZE W4, W4
0117D4  8815A4     MOV W4, U4TXREG
17639:                 IEC5bits.U4TXIE = 1;
0117D6  A8282B     BSET 0x82B, #1
17640:             
17641:             
17642:             }
0117D8  FA8000     ULNK
0117DA  060000     RETURN
17643:             
17644:             
17645:             
17646:             
17647:             void CloseU4(void)
17648:             {
0117DC  FA0000     LNK #0x0
17649:                 RPINR28bits.U4RXR=0;
0117DE  8036C5     MOV RPINR28, W5
0117E0  2FF804     MOV #0xFF80, W4
0117E2  628204     AND W5, W4, W4
0117E4  8836C4     MOV W4, RPINR28
17650:                 RPOR4bits.RP79R=0;
0117E6  803445     MOV RPOR4, W5
0117E8  2FFC04     MOV #0xFFC0, W4
0117EA  628204     AND W5, W4, W4
0117EC  883444     MOV W4, RPOR4
17651:                 U4MODEbits.UARTEN = 0;
0117EE  A9E2B1     BCLR 0x2B1, #7
17652:             }
0117F0  FA8000     ULNK
0117F2  060000     RETURN
17653:             
17654:             //UART 4  End
17655:             
17656:             
17657:             
17658:             
17659:             void TrmDataPacketHC05(void)
17660:             {
0117F4  FA0008     LNK #0x8
0117F6  781F88     MOV W8, [W15++]
17661:                 unsigned int CntBt=4;
0117F8  200044     MOV #0x4, W4
0117FA  980714     MOV W4, [W14+2]
17662:                 int Tmp;
17663:             
17664:              //   if (!MustTrmPacketHC05_FL)
17665:                //     return;
17666:                 //MustTrmPacketHC05_FL=0;
17667:                     if (HC05_BUSY)
0117FC  809635     MOV 0x12C6, W5
0117FE  204004     MOV #0x400, W4
011800  628204     AND W5, W4, W4
011802  520FE0     SUB W4, #0x0, [W15]
011804  3A0C05     BRA NZ, 0x13010
17668:                     return;
013010  000000     NOP
013012  370003     BRA 0x1301A
17669:             
17670:             
17671:                 if (NoAutoTrm)
011806  809745     MOV StatFlgs, W5
011808  204004     MOV #0x400, W4
01180A  628204     AND W5, W4, W4
01180C  520FE0     SUB W4, #0x0, [W15]
01180E  320005     BRA Z, 0x1181A
17672:                 {
17673:                 if(!MustSendDataPacket)
011810  809645     MOV Flgs3, W5
011812  200804     MOV #0x80, W4
011814  628204     AND W5, W4, W4
011816  520FE0     SUB W4, #0x0, [W15]
011818  320BFD     BRA Z, 0x13014
17674:                     return;
013014  000000     NOP
013016  370001     BRA 0x1301A
17675:                 }
17676:             
17677:             
17678:             
17679:             
17680:             
17681:                 if ((OnTransmittHC05)&&(TimeOutHC05))
01181A  809615     MOV 0x12C2, W5
01181C  202004     MOV #0x200, W4
01181E  628204     AND W5, W4, W4
011820  520FE0     SUB W4, #0x0, [W15]
011822  32000A     BRA Z, 0x11838
011824  821474     MOV TimeOutHC05, W4
011826  520FE0     SUB W4, #0x0, [W15]
011828  320007     BRA Z, 0x11838
17682:                 {
17683:                 if (!TimeOutHC05)
01182A  821474     MOV TimeOutHC05, W4
01182C  520FE0     SUB W4, #0x0, [W15]
01182E  3A0BF4     BRA NZ, 0x13018
17684:                     BuzzerOnAlways=1;
011830  809634     MOV 0x12C6, W4
011832  A08004     BSET W4, #8
011834  889634     MOV W4, 0x12C6
17685:                     return;
011836  370BF1     BRA 0x1301A
013018  000000     NOP
17686:                 }
17687:             
17688:                 HC05_BUSY=1;
011838  809634     MOV 0x12C6, W4
01183A  A0A004     BSET W4, #10
01183C  889634     MOV W4, 0x12C6
17689:             
17690:                 MustSendDataPacket=0;
01183E  809644     MOV Flgs3, W4
011840  A17004     BCLR W4, #7
011842  889644     MOV W4, Flgs3
17691:                 MustTrmHC05=0;
011844  809634     MOV 0x12C6, W4
011846  A19004     BCLR W4, #9
011848  889634     MOV W4, 0x12C6
17692:             
17693:                 HC05TrmMass[0]=0xff;
01184A  230CE5     MOV #0x30CE, W5
01184C  EBC200     SETM.B W4
01184E  784A84     MOV.B W4, [W5]
17694:                 HC05TrmMass[1]=0xff;
011850  230CF5     MOV #0x30CF, W5
011852  EBC200     SETM.B W4
011854  784A84     MOV.B W4, [W5]
17695:             
17696:             
17697:                 HC05TrmMass[3]=5;//COMMAND
011856  230D15     MOV #0x30D1, W5
011858  B3C054     MOV.B #0x5, W4
01185A  784A84     MOV.B W4, [W5]
17698:             
17699:                 HC05TrmMass[CntBt++]=CntSamples;
01185C  8099E4     MOV CntSamples, W4
01185E  8099F5     MOV 0x133E, W5
011860  784204     MOV.B W4, W4
011862  230CE6     MOV #0x30CE, W6
011864  90029E     MOV [W14+2], W5
011866  430285     ADD W6, W5, W5
011868  784A84     MOV.B W4, [W5]
01186A  90021E     MOV [W14+2], W4
01186C  E80204     INC W4, W4
01186E  980714     MOV W4, [W14+2]
17700:                 HC05TrmMass[CntBt++]=CntSamples>>8;
011870  8099E4     MOV CntSamples, W4
011872  8099F5     MOV 0x133E, W5
011874  DD2B48     SL W5, #8, W6
011876  DE2248     LSR W4, #8, W4
011878  730204     IOR W6, W4, W4
01187A  DE2AC8     LSR W5, #8, W5
01187C  784204     MOV.B W4, W4
01187E  230CE6     MOV #0x30CE, W6
011880  90029E     MOV [W14+2], W5
011882  430285     ADD W6, W5, W5
011884  784A84     MOV.B W4, [W5]
011886  90021E     MOV [W14+2], W4
011888  E80204     INC W4, W4
01188A  980714     MOV W4, [W14+2]
17701:                 HC05TrmMass[CntBt++]=CntSamples>>16;
01188C  8099E4     MOV CntSamples, W4
01188E  8099F5     MOV 0x133E, W5
011890  DE2A40     LSR W5, #0, W4
011892  200005     MOV #0x0, W5
011894  784204     MOV.B W4, W4
011896  230CE6     MOV #0x30CE, W6
011898  90029E     MOV [W14+2], W5
01189A  430285     ADD W6, W5, W5
01189C  784A84     MOV.B W4, [W5]
01189E  90021E     MOV [W14+2], W4
0118A0  E80204     INC W4, W4
0118A2  980714     MOV W4, [W14+2]
17702:                 HC05TrmMass[CntBt++]=CntSamples>>24;
0118A4  8099E4     MOV CntSamples, W4
0118A6  8099F5     MOV 0x133E, W5
0118A8  DE2A48     LSR W5, #8, W4
0118AA  200005     MOV #0x0, W5
0118AC  784204     MOV.B W4, W4
0118AE  230CE6     MOV #0x30CE, W6
0118B0  90029E     MOV [W14+2], W5
0118B2  430285     ADD W6, W5, W5
0118B4  784A84     MOV.B W4, [W5]
0118B6  90021E     MOV [W14+2], W4
0118B8  E80204     INC W4, W4
0118BA  980714     MOV W4, [W14+2]
17703:             
17704:                 Tmp=(int)(AlfaXRes*100);                //AlfaXRes;     1
0118BC  8151E4     MOV AlfaXRes, W4
0118BE  8151F5     MOV 0x2A3E, W5
0118C0  200002     MOV #0x0, W2
0118C2  242C83     MOV #0x42C8, W3
0118C4  BE0004     MOV.D W4, W0
0118C6  022630     CALL ___mulsf3
0118C8  000000     NOP
0118CA  BE0200     MOV.D W0, W4
0118CC  BE0004     MOV.D W4, W0
0118CE  022504     CALL ___fixsfsi
0118D0  000000     NOP
0118D2  BE0200     MOV.D W0, W4
0118D4  780F04     MOV W4, [W14]
17705:                 HC05TrmMass[CntBt++]=Tmp;
0118D6  78021E     MOV [W14], W4
0118D8  784204     MOV.B W4, W4
0118DA  230CE6     MOV #0x30CE, W6
0118DC  90029E     MOV [W14+2], W5
0118DE  430285     ADD W6, W5, W5
0118E0  784A84     MOV.B W4, [W5]
0118E2  90021E     MOV [W14+2], W4
0118E4  E80204     INC W4, W4
0118E6  980714     MOV W4, [W14+2]
17706:                 HC05TrmMass[CntBt++]=Tmp>>8;
0118E8  78021E     MOV [W14], W4
0118EA  DEA248     ASR W4, #8, W4
0118EC  784204     MOV.B W4, W4
0118EE  230CE6     MOV #0x30CE, W6
0118F0  90029E     MOV [W14+2], W5
0118F2  430285     ADD W6, W5, W5
0118F4  784A84     MOV.B W4, [W5]
0118F6  90021E     MOV [W14+2], W4
0118F8  E80204     INC W4, W4
0118FA  980714     MOV W4, [W14+2]
17707:             
17708:                 Tmp=(int)(AlfaYRes*100);                //AlfaYRes;     2
0118FC  815204     MOV AlfaYRes, W4
0118FE  815215     MOV 0x2A42, W5
011900  200002     MOV #0x0, W2
011902  242C83     MOV #0x42C8, W3
011904  BE0004     MOV.D W4, W0
011906  022630     CALL ___mulsf3
011908  000000     NOP
01190A  BE0200     MOV.D W0, W4
01190C  BE0004     MOV.D W4, W0
01190E  022504     CALL ___fixsfsi
011910  000000     NOP
011912  BE0200     MOV.D W0, W4
011914  780F04     MOV W4, [W14]
17709:                 HC05TrmMass[CntBt++]=Tmp;
011916  78021E     MOV [W14], W4
011918  784204     MOV.B W4, W4
01191A  230CE6     MOV #0x30CE, W6
01191C  90029E     MOV [W14+2], W5
01191E  430285     ADD W6, W5, W5
011920  784A84     MOV.B W4, [W5]
011922  90021E     MOV [W14+2], W4
011924  E80204     INC W4, W4
011926  980714     MOV W4, [W14+2]
17710:                 HC05TrmMass[CntBt++]=Tmp>>8;
011928  78021E     MOV [W14], W4
01192A  DEA248     ASR W4, #8, W4
01192C  784204     MOV.B W4, W4
01192E  230CE6     MOV #0x30CE, W6
011930  90029E     MOV [W14+2], W5
011932  430285     ADD W6, W5, W5
011934  784A84     MOV.B W4, [W5]
011936  90021E     MOV [W14+2], W4
011938  E80204     INC W4, W4
01193A  980714     MOV W4, [W14+2]
17711:             
17712:                 Tmp=(int)GyroXFl;                              //GyroX;        3
01193C  80C0E4     MOV GyroXFl, W4
01193E  80C0F5     MOV 0x181E, W5
011940  BE0004     MOV.D W4, W0
011942  022504     CALL ___fixsfsi
011944  000000     NOP
011946  BE0200     MOV.D W0, W4
011948  780F04     MOV W4, [W14]
17713:                 HC05TrmMass[CntBt++]=Tmp;
01194A  78021E     MOV [W14], W4
01194C  784204     MOV.B W4, W4
01194E  230CE6     MOV #0x30CE, W6
011950  90029E     MOV [W14+2], W5
011952  430285     ADD W6, W5, W5
011954  784A84     MOV.B W4, [W5]
011956  90021E     MOV [W14+2], W4
011958  E80204     INC W4, W4
01195A  980714     MOV W4, [W14+2]
17714:                 HC05TrmMass[CntBt++]=Tmp>>8;
01195C  78021E     MOV [W14], W4
01195E  DEA248     ASR W4, #8, W4
011960  784204     MOV.B W4, W4
011962  230CE6     MOV #0x30CE, W6
011964  90029E     MOV [W14+2], W5
011966  430285     ADD W6, W5, W5
011968  784A84     MOV.B W4, [W5]
01196A  90021E     MOV [W14+2], W4
01196C  E80204     INC W4, W4
01196E  980714     MOV W4, [W14+2]
17715:             
17716:                 Tmp=TiltXRes;                              //TiltXRes;        4
011970  8095C4     MOV TiltXRes, W4
011972  780F04     MOV W4, [W14]
17717:                 HC05TrmMass[CntBt++]=Tmp;
011974  78021E     MOV [W14], W4
011976  784204     MOV.B W4, W4
011978  230CE6     MOV #0x30CE, W6
01197A  90029E     MOV [W14+2], W5
01197C  430285     ADD W6, W5, W5
01197E  784A84     MOV.B W4, [W5]
011980  90021E     MOV [W14+2], W4
011982  E80204     INC W4, W4
011984  980714     MOV W4, [W14+2]
17718:                 HC05TrmMass[CntBt++]=Tmp>>8;
011986  78021E     MOV [W14], W4
011988  DEA248     ASR W4, #8, W4
01198A  784204     MOV.B W4, W4
01198C  230CE6     MOV #0x30CE, W6
01198E  90029E     MOV [W14+2], W5
011990  430285     ADD W6, W5, W5
011992  784A84     MOV.B W4, [W5]
011994  90021E     MOV [W14+2], W4
011996  E80204     INC W4, W4
011998  980714     MOV W4, [W14+2]
17719:             
17720:             
17721:                 Tmp=LightSensor;                              //TiltYRes;        5
01199A  818374     MOV LightSensor, W4
01199C  780F04     MOV W4, [W14]
17722:                 HC05TrmMass[CntBt++]=Tmp;
01199E  78021E     MOV [W14], W4
0119A0  784204     MOV.B W4, W4
0119A2  230CE6     MOV #0x30CE, W6
0119A4  90029E     MOV [W14+2], W5
0119A6  430285     ADD W6, W5, W5
0119A8  784A84     MOV.B W4, [W5]
0119AA  90021E     MOV [W14+2], W4
0119AC  E80204     INC W4, W4
0119AE  980714     MOV W4, [W14+2]
17723:                 HC05TrmMass[CntBt++]=Tmp>>8;
0119B0  78021E     MOV [W14], W4
0119B2  DEA248     ASR W4, #8, W4
0119B4  784204     MOV.B W4, W4
0119B6  230CE6     MOV #0x30CE, W6
0119B8  90029E     MOV [W14+2], W5
0119BA  430285     ADD W6, W5, W5
0119BC  784A84     MOV.B W4, [W5]
0119BE  90021E     MOV [W14+2], W4
0119C0  E80204     INC W4, W4
0119C2  980714     MOV W4, [W14+2]
17724:             
17725:                 Tmp=(int)Ep;                              //Ep;        6
0119C4  809A84     MOV Ep, W4
0119C6  809A95     MOV 0x1352, W5
0119C8  BE0004     MOV.D W4, W0
0119CA  022504     CALL ___fixsfsi
0119CC  000000     NOP
0119CE  BE0200     MOV.D W0, W4
0119D0  780F04     MOV W4, [W14]
17726:                 HC05TrmMass[CntBt++]=Tmp;
0119D2  78021E     MOV [W14], W4
0119D4  784204     MOV.B W4, W4
0119D6  230CE6     MOV #0x30CE, W6
0119D8  90029E     MOV [W14+2], W5
0119DA  430285     ADD W6, W5, W5
0119DC  784A84     MOV.B W4, [W5]
0119DE  90021E     MOV [W14+2], W4
0119E0  E80204     INC W4, W4
0119E2  980714     MOV W4, [W14+2]
17727:                 HC05TrmMass[CntBt++]=Tmp>>8;
0119E4  78021E     MOV [W14], W4
0119E6  DEA248     ASR W4, #8, W4
0119E8  784204     MOV.B W4, W4
0119EA  230CE6     MOV #0x30CE, W6
0119EC  90029E     MOV [W14+2], W5
0119EE  430285     ADD W6, W5, W5
0119F0  784A84     MOV.B W4, [W5]
0119F2  90021E     MOV [W14+2], W4
0119F4  E80204     INC W4, W4
0119F6  980714     MOV W4, [W14+2]
17728:             
17729:                 Tmp=(int)Ei;                              //Ei;        7
0119F8  809AC4     MOV Ei, W4
0119FA  809AD5     MOV 0x135A, W5
0119FC  BE0004     MOV.D W4, W0
0119FE  022504     CALL ___fixsfsi
011A00  000000     NOP
011A02  BE0200     MOV.D W0, W4
011A04  780F04     MOV W4, [W14]
17730:                 HC05TrmMass[CntBt++]=Tmp;
011A06  78021E     MOV [W14], W4
011A08  784204     MOV.B W4, W4
011A0A  230CE6     MOV #0x30CE, W6
011A0C  90029E     MOV [W14+2], W5
011A0E  430285     ADD W6, W5, W5
011A10  784A84     MOV.B W4, [W5]
011A12  90021E     MOV [W14+2], W4
011A14  E80204     INC W4, W4
011A16  980714     MOV W4, [W14+2]
17731:                 HC05TrmMass[CntBt++]=Tmp>>8;
011A18  78021E     MOV [W14], W4
011A1A  DEA248     ASR W4, #8, W4
011A1C  784204     MOV.B W4, W4
011A1E  230CE6     MOV #0x30CE, W6
011A20  90029E     MOV [W14+2], W5
011A22  430285     ADD W6, W5, W5
011A24  784A84     MOV.B W4, [W5]
011A26  90021E     MOV [W14+2], W4
011A28  E80204     INC W4, W4
011A2A  980714     MOV W4, [W14+2]
17732:             
17733:             
17734:                 
17735:                 
17736:                 if (PWM1Plus)
011A2C  8095E5     MOV Flgs, W5
011A2E  210004     MOV #0x1000, W4
011A30  628204     AND W5, W4, W4
011A32  520FE0     SUB W4, #0x0, [W15]
011A34  320003     BRA Z, 0x11A3C
17737:                 Tmp=PWM1Show;                              //PWM1;        8
011A36  8092A6     MOV PWM1Show, W6
011A38  780F06     MOV W6, [W14]
011A3A  370002     BRA 0x11A40
17738:                 else
17739:                 Tmp=-PWM1Show;
011A3C  8092A4     MOV PWM1Show, W4
011A3E  EA0F04     NEG W4, [W14]
17740:                 HC05TrmMass[CntBt++]=Tmp;
011A40  78021E     MOV [W14], W4
011A42  784204     MOV.B W4, W4
011A44  230CE6     MOV #0x30CE, W6
011A46  90029E     MOV [W14+2], W5
011A48  430285     ADD W6, W5, W5
011A4A  784A84     MOV.B W4, [W5]
011A4C  90021E     MOV [W14+2], W4
011A4E  E80204     INC W4, W4
011A50  980714     MOV W4, [W14+2]
17741:                 HC05TrmMass[CntBt++]=Tmp>>8;
011A52  78021E     MOV [W14], W4
011A54  DEA248     ASR W4, #8, W4
011A56  784204     MOV.B W4, W4
011A58  230CE6     MOV #0x30CE, W6
011A5A  90029E     MOV [W14+2], W5
011A5C  430285     ADD W6, W5, W5
011A5E  784A84     MOV.B W4, [W5]
011A60  90021E     MOV [W14+2], W4
011A62  E80204     INC W4, W4
011A64  980714     MOV W4, [W14+2]
17742:             
17743:                 
17744:                     
17745:             
17746:                 Tmp=(int)Curr1Show;//Curr1;//                              //(int)Curr1;        9
011A66  8097E4     MOV Curr1Show, W4
011A68  8097F5     MOV 0x12FE, W5
011A6A  BE0004     MOV.D W4, W0
011A6C  022504     CALL ___fixsfsi
011A6E  000000     NOP
011A70  BE0200     MOV.D W0, W4
011A72  780F04     MOV W4, [W14]
17747:                 HC05TrmMass[CntBt++]=Tmp;
011A74  78021E     MOV [W14], W4
011A76  784204     MOV.B W4, W4
011A78  230CE6     MOV #0x30CE, W6
011A7A  90029E     MOV [W14+2], W5
011A7C  430285     ADD W6, W5, W5
011A7E  784A84     MOV.B W4, [W5]
011A80  90021E     MOV [W14+2], W4
011A82  E80204     INC W4, W4
011A84  980714     MOV W4, [W14+2]
17748:                 HC05TrmMass[CntBt++]=Tmp>>8;
011A86  78021E     MOV [W14], W4
011A88  DEA248     ASR W4, #8, W4
011A8A  784204     MOV.B W4, W4
011A8C  230CE6     MOV #0x30CE, W6
011A8E  90029E     MOV [W14+2], W5
011A90  430285     ADD W6, W5, W5
011A92  784A84     MOV.B W4, [W5]
011A94  90021E     MOV [W14+2], W4
011A96  E80204     INC W4, W4
011A98  980714     MOV W4, [W14+2]
17749:             
17750:                 Tmp=(int)(Spd1UST*10*ImpToKmH1_t);//KMH;//                              //Spd1UST;        10  
011A9A  817F74     MOV Spd1UST, W4
011A9C  817F85     MOV 0x2FF0, W5
011A9E  200002     MOV #0x0, W2
011AA0  241203     MOV #0x4120, W3
011AA2  BE0004     MOV.D W4, W0
011AA4  022630     CALL ___mulsf3
011AA6  000000     NOP
011AA8  BE0200     MOV.D W0, W4
011AAA  BE0304     MOV.D W4, W6
011AAC  817E24     MOV ImpToKmH1_t, W4
011AAE  817E35     MOV 0x2FC6, W5
011AB0  BE0104     MOV.D W4, W2
011AB2  BE0006     MOV.D W6, W0
011AB4  022630     CALL ___mulsf3
011AB6  000000     NOP
011AB8  BE0200     MOV.D W0, W4
011ABA  BE0004     MOV.D W4, W0
011ABC  022504     CALL ___fixsfsi
011ABE  000000     NOP
011AC0  BE0200     MOV.D W0, W4
011AC2  780F04     MOV W4, [W14]
17751:                 HC05TrmMass[CntBt++]=Tmp;
011AC4  78021E     MOV [W14], W4
011AC6  784204     MOV.B W4, W4
011AC8  230CE6     MOV #0x30CE, W6
011ACA  90029E     MOV [W14+2], W5
011ACC  430285     ADD W6, W5, W5
011ACE  784A84     MOV.B W4, [W5]
011AD0  90021E     MOV [W14+2], W4
011AD2  E80204     INC W4, W4
011AD4  980714     MOV W4, [W14+2]
17752:                 HC05TrmMass[CntBt++]=Tmp>>8;
011AD6  78021E     MOV [W14], W4
011AD8  DEA248     ASR W4, #8, W4
011ADA  784204     MOV.B W4, W4
011ADC  230CE6     MOV #0x30CE, W6
011ADE  90029E     MOV [W14+2], W5
011AE0  430285     ADD W6, W5, W5
011AE2  784A84     MOV.B W4, [W5]
011AE4  90021E     MOV [W14+2], W4
011AE6  E80204     INC W4, W4
011AE8  980714     MOV W4, [W14+2]
17753:             
17754:             
17755:                                                     //PWM2;        11
17756:                 Tmp=(int)(Temperature3*10);
011AEA  8201B4     MOV Temperature3, W4
011AEC  8201C5     MOV 0x4038, W5
011AEE  200002     MOV #0x0, W2
011AF0  241203     MOV #0x4120, W3
011AF2  BE0004     MOV.D W4, W0
011AF4  022630     CALL ___mulsf3
011AF6  000000     NOP
011AF8  BE0200     MOV.D W0, W4
011AFA  BE0004     MOV.D W4, W0
011AFC  022504     CALL ___fixsfsi
011AFE  000000     NOP
011B00  BE0200     MOV.D W0, W4
011B02  780F04     MOV W4, [W14]
17757:                 HC05TrmMass[CntBt++]=Tmp;       //                                                 
011B04  78021E     MOV [W14], W4
011B06  784204     MOV.B W4, W4
011B08  230CE6     MOV #0x30CE, W6
011B0A  90029E     MOV [W14+2], W5
011B0C  430285     ADD W6, W5, W5
011B0E  784A84     MOV.B W4, [W5]
011B10  90021E     MOV [W14+2], W4
011B12  E80204     INC W4, W4
011B14  980714     MOV W4, [W14+2]
17758:                 HC05TrmMass[CntBt++]=Tmp>>8;
011B16  78021E     MOV [W14], W4
011B18  DEA248     ASR W4, #8, W4
011B1A  784204     MOV.B W4, W4
011B1C  230CE6     MOV #0x30CE, W6
011B1E  90029E     MOV [W14+2], W5
011B20  430285     ADD W6, W5, W5
011B22  784A84     MOV.B W4, [W5]
011B24  90021E     MOV [W14+2], W4
011B26  E80204     INC W4, W4
011B28  980714     MOV W4, [W14+2]
17759:             
17760:             
17761:                 HC05TrmMass[CntBt++]=Odometr;               //Odometr;        12
011B2A  818384     MOV Odometr, W4
011B2C  818395     MOV 0x3072, W5
011B2E  784204     MOV.B W4, W4
011B30  230CE6     MOV #0x30CE, W6
011B32  90029E     MOV [W14+2], W5
011B34  430285     ADD W6, W5, W5
011B36  784A84     MOV.B W4, [W5]
011B38  90021E     MOV [W14+2], W4
011B3A  E80204     INC W4, W4
011B3C  980714     MOV W4, [W14+2]
17762:                 HC05TrmMass[CntBt++]=Odometr>>8;
011B3E  818384     MOV Odometr, W4
011B40  818395     MOV 0x3072, W5
011B42  DD2B48     SL W5, #8, W6
011B44  DE2248     LSR W4, #8, W4
011B46  730204     IOR W6, W4, W4
011B48  DE2AC8     LSR W5, #8, W5
011B4A  784204     MOV.B W4, W4
011B4C  230CE6     MOV #0x30CE, W6
011B4E  90029E     MOV [W14+2], W5
011B50  430285     ADD W6, W5, W5
011B52  784A84     MOV.B W4, [W5]
011B54  90021E     MOV [W14+2], W4
011B56  E80204     INC W4, W4
011B58  980714     MOV W4, [W14+2]
17763:                 HC05TrmMass[CntBt++]=Odometr>>16;
011B5A  818384     MOV Odometr, W4
011B5C  818395     MOV 0x3072, W5
011B5E  DE2A40     LSR W5, #0, W4
011B60  200005     MOV #0x0, W5
011B62  784204     MOV.B W4, W4
011B64  230CE6     MOV #0x30CE, W6
011B66  90029E     MOV [W14+2], W5
011B68  430285     ADD W6, W5, W5
011B6A  784A84     MOV.B W4, [W5]
011B6C  90021E     MOV [W14+2], W4
011B6E  E80204     INC W4, W4
011B70  980714     MOV W4, [W14+2]
17764:                 HC05TrmMass[CntBt++]=Odometr>>24;
011B72  818384     MOV Odometr, W4
011B74  818395     MOV 0x3072, W5
011B76  DE2A48     LSR W5, #8, W4
011B78  200005     MOV #0x0, W5
011B7A  784204     MOV.B W4, W4
011B7C  230CE6     MOV #0x30CE, W6
011B7E  90029E     MOV [W14+2], W5
011B80  430285     ADD W6, W5, W5
011B82  784A84     MOV.B W4, [W5]
011B84  90021E     MOV [W14+2], W4
011B86  E80204     INC W4, W4
011B88  980714     MOV W4, [W14+2]
17765:             
17766:                 Tmp=(int)Spd1Res;                              //Spd1Res;        13
011B8A  817F14     MOV Spd1Res, W4
011B8C  780F04     MOV W4, [W14]
17767:                 HC05TrmMass[CntBt++]=Tmp;
011B8E  78021E     MOV [W14], W4
011B90  784204     MOV.B W4, W4
011B92  230CE6     MOV #0x30CE, W6
011B94  90029E     MOV [W14+2], W5
011B96  430285     ADD W6, W5, W5
011B98  784A84     MOV.B W4, [W5]
011B9A  90021E     MOV [W14+2], W4
011B9C  E80204     INC W4, W4
011B9E  980714     MOV W4, [W14+2]
17768:                 HC05TrmMass[CntBt++]=Tmp>>8;
011BA0  78021E     MOV [W14], W4
011BA2  DEA248     ASR W4, #8, W4
011BA4  784204     MOV.B W4, W4
011BA6  230CE6     MOV #0x30CE, W6
011BA8  90029E     MOV [W14+2], W5
011BAA  430285     ADD W6, W5, W5
011BAC  784A84     MOV.B W4, [W5]
011BAE  90021E     MOV [W14+2], W4
011BB0  E80204     INC W4, W4
011BB2  980714     MOV W4, [W14+2]
17769:             
17770:                 
17771:                    if (Temperature2<10)
011BB4  820194     MOV Temperature2, W4
011BB6  8201A5     MOV 0x4034, W5
011BB8  B3C018     MOV.B #0x1, W8
011BBA  200002     MOV #0x0, W2
011BBC  241203     MOV #0x4120, W3
011BBE  BE0004     MOV.D W4, W0
011BC0  0224FC     CALL ___lesf2
011BC2  000000     NOP
011BC4  780200     MOV W0, W4
011BC6  520FE0     SUB W4, #0x0, [W15]
011BC8  350001     BRA LT, 0x11BCC
011BCA  EB4400     CLR.B W8
011BCC  544FE0     SUB.B W8, #0x0, [W15]
011BCE  320004     BRA Z, 0x11BD8
17772:                 {
17773:                     Nop();
011BD0  000000     NOP
17774:                     Nop();
011BD2  000000     NOP
17775:                     Nop();
011BD4  000000     NOP
17776:                     Nop();
011BD6  000000     NOP
17777:                 }
17778:                 
17779:                 
17780:                 Tmp=(int)(Temperature2*10);                 //14
011BD8  820194     MOV Temperature2, W4
011BDA  8201A5     MOV 0x4034, W5
011BDC  200002     MOV #0x0, W2
011BDE  241203     MOV #0x4120, W3
011BE0  BE0004     MOV.D W4, W0
011BE2  022630     CALL ___mulsf3
011BE4  000000     NOP
011BE6  BE0200     MOV.D W0, W4
011BE8  BE0004     MOV.D W4, W0
011BEA  022504     CALL ___fixsfsi
011BEC  000000     NOP
011BEE  BE0200     MOV.D W0, W4
011BF0  780F04     MOV W4, [W14]
17781:                 HC05TrmMass[CntBt++]=Tmp;
011BF2  78021E     MOV [W14], W4
011BF4  784204     MOV.B W4, W4
011BF6  230CE6     MOV #0x30CE, W6
011BF8  90029E     MOV [W14+2], W5
011BFA  430285     ADD W6, W5, W5
011BFC  784A84     MOV.B W4, [W5]
011BFE  90021E     MOV [W14+2], W4
011C00  E80204     INC W4, W4
011C02  980714     MOV W4, [W14+2]
17782:                 HC05TrmMass[CntBt++]=Tmp>>8;
011C04  78021E     MOV [W14], W4
011C06  DEA248     ASR W4, #8, W4
011C08  784204     MOV.B W4, W4
011C0A  230CE6     MOV #0x30CE, W6
011C0C  90029E     MOV [W14+2], W5
011C0E  430285     ADD W6, W5, W5
011C10  784A84     MOV.B W4, [W5]
011C12  90021E     MOV [W14+2], W4
011C14  E80204     INC W4, W4
011C16  980714     MOV W4, [W14+2]
17783:             
17784:                 Tmp=(int)(Temperature1*10);//               15
011C18  820174     MOV Temperature1, W4
011C1A  820185     MOV 0x4030, W5
011C1C  200002     MOV #0x0, W2
011C1E  241203     MOV #0x4120, W3
011C20  BE0004     MOV.D W4, W0
011C22  022630     CALL ___mulsf3
011C24  000000     NOP
011C26  BE0200     MOV.D W0, W4
011C28  BE0004     MOV.D W4, W0
011C2A  022504     CALL ___fixsfsi
011C2C  000000     NOP
011C2E  BE0200     MOV.D W0, W4
011C30  780F04     MOV W4, [W14]
17785:                 HC05TrmMass[CntBt++]=Tmp;
011C32  78021E     MOV [W14], W4
011C34  784204     MOV.B W4, W4
011C36  230CE6     MOV #0x30CE, W6
011C38  90029E     MOV [W14+2], W5
011C3A  430285     ADD W6, W5, W5
011C3C  784A84     MOV.B W4, [W5]
011C3E  90021E     MOV [W14+2], W4
011C40  E80204     INC W4, W4
011C42  980714     MOV W4, [W14+2]
17786:                 HC05TrmMass[CntBt++]=Tmp>>8;
011C44  78021E     MOV [W14], W4
011C46  DEA248     ASR W4, #8, W4
011C48  784204     MOV.B W4, W4
011C4A  230CE6     MOV #0x30CE, W6
011C4C  90029E     MOV [W14+2], W5
011C4E  430285     ADD W6, W5, W5
011C50  784A84     MOV.B W4, [W5]
011C52  90021E     MOV [W14+2], W4
011C54  E80204     INC W4, W4
011C56  980714     MOV W4, [W14+2]
17787:             
17788:                 Tmp=(int)Kp_p;//Kp;                              //Kp;        16
011C58  81A5F4     MOV Kp_p, W4
011C5A  81A605     MOV 0x34C0, W5
011C5C  BE0004     MOV.D W4, W0
011C5E  022504     CALL ___fixsfsi
011C60  000000     NOP
011C62  BE0200     MOV.D W0, W4
011C64  780F04     MOV W4, [W14]
17789:                 HC05TrmMass[CntBt++]=Tmp;
011C66  78021E     MOV [W14], W4
011C68  784204     MOV.B W4, W4
011C6A  230CE6     MOV #0x30CE, W6
011C6C  90029E     MOV [W14+2], W5
011C6E  430285     ADD W6, W5, W5
011C70  784A84     MOV.B W4, [W5]
011C72  90021E     MOV [W14+2], W4
011C74  E80204     INC W4, W4
011C76  980714     MOV W4, [W14+2]
17790:                 HC05TrmMass[CntBt++]=Tmp>>8;
011C78  78021E     MOV [W14], W4
011C7A  DEA248     ASR W4, #8, W4
011C7C  784204     MOV.B W4, W4
011C7E  230CE6     MOV #0x30CE, W6
011C80  90029E     MOV [W14+2], W5
011C82  430285     ADD W6, W5, W5
011C84  784A84     MOV.B W4, [W5]
011C86  90021E     MOV [W14+2], W4
011C88  E80204     INC W4, W4
011C8A  980714     MOV W4, [W14+2]
17791:             
17792:                 Tmp=(int)(UBtFl*10);                              //UBT;        17
011C8C  820064     MOV UBtFl, W4
011C8E  820075     MOV 0x400E, W5
011C90  200002     MOV #0x0, W2
011C92  241203     MOV #0x4120, W3
011C94  BE0004     MOV.D W4, W0
011C96  022630     CALL ___mulsf3
011C98  000000     NOP
011C9A  BE0200     MOV.D W0, W4
011C9C  BE0004     MOV.D W4, W0
011C9E  022504     CALL ___fixsfsi
011CA0  000000     NOP
011CA2  BE0200     MOV.D W0, W4
011CA4  780F04     MOV W4, [W14]
17793:                 HC05TrmMass[CntBt++]=Tmp;
011CA6  78021E     MOV [W14], W4
011CA8  784204     MOV.B W4, W4
011CAA  230CE6     MOV #0x30CE, W6
011CAC  90029E     MOV [W14+2], W5
011CAE  430285     ADD W6, W5, W5
011CB0  784A84     MOV.B W4, [W5]
011CB2  90021E     MOV [W14+2], W4
011CB4  E80204     INC W4, W4
011CB6  980714     MOV W4, [W14+2]
17794:                 HC05TrmMass[CntBt++]=Tmp>>8;
011CB8  78021E     MOV [W14], W4
011CBA  DEA248     ASR W4, #8, W4
011CBC  784204     MOV.B W4, W4
011CBE  230CE6     MOV #0x30CE, W6
011CC0  90029E     MOV [W14+2], W5
011CC2  430285     ADD W6, W5, W5
011CC4  784A84     MOV.B W4, [W5]
011CC6  90021E     MOV [W14+2], W4
011CC8  E80204     INC W4, W4
011CCA  980714     MOV W4, [W14+2]
17795:             
17796:                 Tmp=GyroVert_Steer;                              //GyroVert_Steer;        18
011CCC  80C0B6     MOV GyroVert_Steer, W6
011CCE  780F06     MOV W6, [W14]
17797:                 HC05TrmMass[CntBt++]=Tmp;
011CD0  78021E     MOV [W14], W4
011CD2  784204     MOV.B W4, W4
011CD4  230CE6     MOV #0x30CE, W6
011CD6  90029E     MOV [W14+2], W5
011CD8  430285     ADD W6, W5, W5
011CDA  784A84     MOV.B W4, [W5]
011CDC  90021E     MOV [W14+2], W4
011CDE  E80204     INC W4, W4
011CE0  980714     MOV W4, [W14+2]
17798:                 HC05TrmMass[CntBt++]=Tmp>>8;
011CE2  78021E     MOV [W14], W4
011CE4  DEA248     ASR W4, #8, W4
011CE6  784204     MOV.B W4, W4
011CE8  230CE6     MOV #0x30CE, W6
011CEA  90029E     MOV [W14+2], W5
011CEC  430285     ADD W6, W5, W5
011CEE  784A84     MOV.B W4, [W5]
011CF0  90021E     MOV [W14+2], W4
011CF2  E80204     INC W4, W4
011CF4  980714     MOV W4, [W14+2]
17799:             
17800:             
17801:                 Tmp=StatFlgs.StatusFlags;                              //StatFlgs.StatusFlags;        19
011CF6  809744     MOV StatFlgs, W4
011CF8  780F04     MOV W4, [W14]
17802:                 HC05TrmMass[CntBt++]=Tmp;
011CFA  78021E     MOV [W14], W4
011CFC  784204     MOV.B W4, W4
011CFE  230CE6     MOV #0x30CE, W6
011D00  90029E     MOV [W14+2], W5
011D02  430285     ADD W6, W5, W5
011D04  784A84     MOV.B W4, [W5]
011D06  90021E     MOV [W14+2], W4
011D08  E80204     INC W4, W4
011D0A  980714     MOV W4, [W14+2]
17803:                 HC05TrmMass[CntBt++]=Tmp>>8;
011D0C  78021E     MOV [W14], W4
011D0E  DEA248     ASR W4, #8, W4
011D10  784204     MOV.B W4, W4
011D12  230CE6     MOV #0x30CE, W6
011D14  90029E     MOV [W14+2], W5
011D16  430285     ADD W6, W5, W5
011D18  784A84     MOV.B W4, [W5]
011D1A  90021E     MOV [W14+2], W4
011D1C  E80204     INC W4, W4
011D1E  980714     MOV W4, [W14+2]
17804:             
17805:                 Tmp=(int)GyroZFilter;                              //GyroZFilter        20
011D20  809FD4     MOV GyroZFilter, W4
011D22  809FE5     MOV 0x13FC, W5
011D24  780F04     MOV W4, [W14]
17806:                 HC05TrmMass[CntBt++]=Tmp;
011D26  78021E     MOV [W14], W4
011D28  784204     MOV.B W4, W4
011D2A  230CE6     MOV #0x30CE, W6
011D2C  90029E     MOV [W14+2], W5
011D2E  430285     ADD W6, W5, W5
011D30  784A84     MOV.B W4, [W5]
011D32  90021E     MOV [W14+2], W4
011D34  E80204     INC W4, W4
011D36  980714     MOV W4, [W14+2]
17807:                 HC05TrmMass[CntBt++]=Tmp>>8;
011D38  78021E     MOV [W14], W4
011D3A  DEA248     ASR W4, #8, W4
011D3C  784204     MOV.B W4, W4
011D3E  230CE6     MOV #0x30CE, W6
011D40  90029E     MOV [W14+2], W5
011D42  430285     ADD W6, W5, W5
011D44  784A84     MOV.B W4, [W5]
011D46  90021E     MOV [W14+2], W4
011D48  E80204     INC W4, W4
011D4A  980714     MOV W4, [W14+2]
17808:             
17809:                 Tmp=(int)AlfaYResPrevAv;                              //AlfaYResPrevAv        21
011D4C  8194E4     MOV AlfaYResPrevAv, W4
011D4E  8194F5     MOV 0x329E, W5
011D50  780F04     MOV W4, [W14]
17810:                 HC05TrmMass[CntBt++]=Tmp;
011D52  78021E     MOV [W14], W4
011D54  784204     MOV.B W4, W4
011D56  230CE6     MOV #0x30CE, W6
011D58  90029E     MOV [W14+2], W5
011D5A  430285     ADD W6, W5, W5
011D5C  784A84     MOV.B W4, [W5]
011D5E  90021E     MOV [W14+2], W4
011D60  E80204     INC W4, W4
011D62  980714     MOV W4, [W14+2]
17811:                 HC05TrmMass[CntBt++]=Tmp>>8;
011D64  78021E     MOV [W14], W4
011D66  DEA248     ASR W4, #8, W4
011D68  784204     MOV.B W4, W4
011D6A  230CE6     MOV #0x30CE, W6
011D6C  90029E     MOV [W14+2], W5
011D6E  430285     ADD W6, W5, W5
011D70  784A84     MOV.B W4, [W5]
011D72  90021E     MOV [W14+2], W4
011D74  E80204     INC W4, W4
011D76  980714     MOV W4, [W14+2]
17812:             
17813:                 Tmp=(int)DiffBetweenTilts;                         //DiffBetweenTilts        22
011D78  81A534     MOV DiffBetweenTilts, W4
011D7A  780F04     MOV W4, [W14]
17814:                 HC05TrmMass[CntBt++]=Tmp;
011D7C  78021E     MOV [W14], W4
011D7E  784204     MOV.B W4, W4
011D80  230CE6     MOV #0x30CE, W6
011D82  90029E     MOV [W14+2], W5
011D84  430285     ADD W6, W5, W5
011D86  784A84     MOV.B W4, [W5]
011D88  90021E     MOV [W14+2], W4
011D8A  E80204     INC W4, W4
011D8C  980714     MOV W4, [W14+2]
17815:                 HC05TrmMass[CntBt++]=Tmp>>8;
011D8E  78021E     MOV [W14], W4
011D90  DEA248     ASR W4, #8, W4
011D92  784204     MOV.B W4, W4
011D94  230CE6     MOV #0x30CE, W6
011D96  90029E     MOV [W14+2], W5
011D98  430285     ADD W6, W5, W5
011D9A  784A84     MOV.B W4, [W5]
011D9C  90021E     MOV [W14+2], W4
011D9E  E80204     INC W4, W4
011DA0  980714     MOV W4, [W14+2]
17816:             
17817:                 HC05TrmMass[CntBt++]=Flgs.Flags;               //Odometr;        23
011DA2  8095E4     MOV Flgs, W4
011DA4  8095F5     MOV 0x12BE, W5
011DA6  784204     MOV.B W4, W4
011DA8  230CE6     MOV #0x30CE, W6
011DAA  90029E     MOV [W14+2], W5
011DAC  430285     ADD W6, W5, W5
011DAE  784A84     MOV.B W4, [W5]
011DB0  90021E     MOV [W14+2], W4
011DB2  E80204     INC W4, W4
011DB4  980714     MOV W4, [W14+2]
17818:                 HC05TrmMass[CntBt++]=Flgs.Flags>>8;
011DB6  8095E4     MOV Flgs, W4
011DB8  8095F5     MOV 0x12BE, W5
011DBA  DD2B48     SL W5, #8, W6
011DBC  DE2248     LSR W4, #8, W4
011DBE  730204     IOR W6, W4, W4
011DC0  DE2AC8     LSR W5, #8, W5
011DC2  784204     MOV.B W4, W4
011DC4  230CE6     MOV #0x30CE, W6
011DC6  90029E     MOV [W14+2], W5
011DC8  430285     ADD W6, W5, W5
011DCA  784A84     MOV.B W4, [W5]
011DCC  90021E     MOV [W14+2], W4
011DCE  E80204     INC W4, W4
011DD0  980714     MOV W4, [W14+2]
17819:                 HC05TrmMass[CntBt++]=Flgs.Flags>>16;
011DD2  8095E4     MOV Flgs, W4
011DD4  8095F5     MOV 0x12BE, W5
011DD6  DE2A40     LSR W5, #0, W4
011DD8  200005     MOV #0x0, W5
011DDA  784204     MOV.B W4, W4
011DDC  230CE6     MOV #0x30CE, W6
011DDE  90029E     MOV [W14+2], W5
011DE0  430285     ADD W6, W5, W5
011DE2  784A84     MOV.B W4, [W5]
011DE4  90021E     MOV [W14+2], W4
011DE6  E80204     INC W4, W4
011DE8  980714     MOV W4, [W14+2]
17820:                 HC05TrmMass[CntBt++]=Flgs.Flags>>24;
011DEA  8095E4     MOV Flgs, W4
011DEC  8095F5     MOV 0x12BE, W5
011DEE  DE2A48     LSR W5, #8, W4
011DF0  200005     MOV #0x0, W5
011DF2  784204     MOV.B W4, W4
011DF4  230CE6     MOV #0x30CE, W6
011DF6  90029E     MOV [W14+2], W5
011DF8  430285     ADD W6, W5, W5
011DFA  784A84     MOV.B W4, [W5]
011DFC  90021E     MOV [W14+2], W4
011DFE  E80204     INC W4, W4
011E00  980714     MOV W4, [W14+2]
17821:             
17822:                 HC05TrmMass[CntBt++]=Flgs1.Flags;               //Odometr;        24
011E02  809604     MOV Flgs1, W4
011E04  809615     MOV 0x12C2, W5
011E06  784204     MOV.B W4, W4
011E08  230CE6     MOV #0x30CE, W6
011E0A  90029E     MOV [W14+2], W5
011E0C  430285     ADD W6, W5, W5
011E0E  784A84     MOV.B W4, [W5]
011E10  90021E     MOV [W14+2], W4
011E12  E80204     INC W4, W4
011E14  980714     MOV W4, [W14+2]
17823:                 HC05TrmMass[CntBt++]=Flgs1.Flags>>8;
011E16  809604     MOV Flgs1, W4
011E18  809615     MOV 0x12C2, W5
011E1A  DD2B48     SL W5, #8, W6
011E1C  DE2248     LSR W4, #8, W4
011E1E  730204     IOR W6, W4, W4
011E20  DE2AC8     LSR W5, #8, W5
011E22  784204     MOV.B W4, W4
011E24  230CE6     MOV #0x30CE, W6
011E26  90029E     MOV [W14+2], W5
011E28  430285     ADD W6, W5, W5
011E2A  784A84     MOV.B W4, [W5]
011E2C  90021E     MOV [W14+2], W4
011E2E  E80204     INC W4, W4
011E30  980714     MOV W4, [W14+2]
17824:                 HC05TrmMass[CntBt++]=Flgs1.Flags>>16;
011E32  809604     MOV Flgs1, W4
011E34  809615     MOV 0x12C2, W5
011E36  DE2A40     LSR W5, #0, W4
011E38  200005     MOV #0x0, W5
011E3A  784204     MOV.B W4, W4
011E3C  230CE6     MOV #0x30CE, W6
011E3E  90029E     MOV [W14+2], W5
011E40  430285     ADD W6, W5, W5
011E42  784A84     MOV.B W4, [W5]
011E44  90021E     MOV [W14+2], W4
011E46  E80204     INC W4, W4
011E48  980714     MOV W4, [W14+2]
17825:                 HC05TrmMass[CntBt++]=Flgs1.Flags>>24;
011E4A  809604     MOV Flgs1, W4
011E4C  809615     MOV 0x12C2, W5
011E4E  DE2A48     LSR W5, #8, W4
011E50  200005     MOV #0x0, W5
011E52  784204     MOV.B W4, W4
011E54  230CE6     MOV #0x30CE, W6
011E56  90029E     MOV [W14+2], W5
011E58  430285     ADD W6, W5, W5
011E5A  784A84     MOV.B W4, [W5]
011E5C  90021E     MOV [W14+2], W4
011E5E  E80204     INC W4, W4
011E60  980714     MOV W4, [W14+2]
17826:             
17827:                 HC05TrmMass[CntBt++]=Flgs2.Flags;               //Odometr;        25
011E62  809624     MOV Flgs2, W4
011E64  809635     MOV 0x12C6, W5
011E66  784204     MOV.B W4, W4
011E68  230CE6     MOV #0x30CE, W6
011E6A  90029E     MOV [W14+2], W5
011E6C  430285     ADD W6, W5, W5
011E6E  784A84     MOV.B W4, [W5]
011E70  90021E     MOV [W14+2], W4
011E72  E80204     INC W4, W4
011E74  980714     MOV W4, [W14+2]
17828:                 HC05TrmMass[CntBt++]=Flgs2.Flags>>8;
011E76  809624     MOV Flgs2, W4
011E78  809635     MOV 0x12C6, W5
011E7A  DD2B48     SL W5, #8, W6
011E7C  DE2248     LSR W4, #8, W4
011E7E  730204     IOR W6, W4, W4
011E80  DE2AC8     LSR W5, #8, W5
011E82  784204     MOV.B W4, W4
011E84  230CE6     MOV #0x30CE, W6
011E86  90029E     MOV [W14+2], W5
011E88  430285     ADD W6, W5, W5
011E8A  784A84     MOV.B W4, [W5]
011E8C  90021E     MOV [W14+2], W4
011E8E  E80204     INC W4, W4
011E90  980714     MOV W4, [W14+2]
17829:                 HC05TrmMass[CntBt++]=Flgs2.Flags>>16;
011E92  809624     MOV Flgs2, W4
011E94  809635     MOV 0x12C6, W5
011E96  DE2A40     LSR W5, #0, W4
011E98  200005     MOV #0x0, W5
011E9A  784204     MOV.B W4, W4
011E9C  230CE6     MOV #0x30CE, W6
011E9E  90029E     MOV [W14+2], W5
011EA0  430285     ADD W6, W5, W5
011EA2  784A84     MOV.B W4, [W5]
011EA4  90021E     MOV [W14+2], W4
011EA6  E80204     INC W4, W4
011EA8  980714     MOV W4, [W14+2]
17830:                 HC05TrmMass[CntBt++]=Flgs2.Flags>>24;
011EAA  809624     MOV Flgs2, W4
011EAC  809635     MOV 0x12C6, W5
011EAE  DE2A48     LSR W5, #8, W4
011EB0  200005     MOV #0x0, W5
011EB2  784204     MOV.B W4, W4
011EB4  230CE6     MOV #0x30CE, W6
011EB6  90029E     MOV [W14+2], W5
011EB8  430285     ADD W6, W5, W5
011EBA  784A84     MOV.B W4, [W5]
011EBC  90021E     MOV [W14+2], W4
011EBE  E80204     INC W4, W4
011EC0  980714     MOV W4, [W14+2]
17831:             
17832:             
17833:             
17834:                 Tmp=(int)(TiltZad*10);                         //TiltZad        26
011EC2  8155D4     MOV TiltZad, W4
011EC4  8155E5     MOV 0x2ABC, W5
011EC6  200002     MOV #0x0, W2
011EC8  241203     MOV #0x4120, W3
011ECA  BE0004     MOV.D W4, W0
011ECC  022630     CALL ___mulsf3
011ECE  000000     NOP
011ED0  BE0200     MOV.D W0, W4
011ED2  BE0004     MOV.D W4, W0
011ED4  022504     CALL ___fixsfsi
011ED6  000000     NOP
011ED8  BE0200     MOV.D W0, W4
011EDA  780F04     MOV W4, [W14]
17835:                 HC05TrmMass[CntBt++]=Tmp;
011EDC  78021E     MOV [W14], W4
011EDE  784204     MOV.B W4, W4
011EE0  230CE6     MOV #0x30CE, W6
011EE2  90029E     MOV [W14+2], W5
011EE4  430285     ADD W6, W5, W5
011EE6  784A84     MOV.B W4, [W5]
011EE8  90021E     MOV [W14+2], W4
011EEA  E80204     INC W4, W4
011EEC  980714     MOV W4, [W14+2]
17836:                 HC05TrmMass[CntBt++]=Tmp>>8;
011EEE  78021E     MOV [W14], W4
011EF0  DEA248     ASR W4, #8, W4
011EF2  784204     MOV.B W4, W4
011EF4  230CE6     MOV #0x30CE, W6
011EF6  90029E     MOV [W14+2], W5
011EF8  430285     ADD W6, W5, W5
011EFA  784A84     MOV.B W4, [W5]
011EFC  90021E     MOV [W14+2], W4
011EFE  E80204     INC W4, W4
011F00  980714     MOV W4, [W14+2]
17837:             
17838:                 Tmp=StartRot;                         //StartRot        27
011F02  815494     MOV StartRot, W4
011F04  780F04     MOV W4, [W14]
17839:                 HC05TrmMass[CntBt++]=Tmp;
011F06  78021E     MOV [W14], W4
011F08  784204     MOV.B W4, W4
011F0A  230CE6     MOV #0x30CE, W6
011F0C  90029E     MOV [W14+2], W5
011F0E  430285     ADD W6, W5, W5
011F10  784A84     MOV.B W4, [W5]
011F12  90021E     MOV [W14+2], W4
011F14  E80204     INC W4, W4
011F16  980714     MOV W4, [W14+2]
17840:                 HC05TrmMass[CntBt++]=Tmp>>8;
011F18  78021E     MOV [W14], W4
011F1A  DEA248     ASR W4, #8, W4
011F1C  784204     MOV.B W4, W4
011F1E  230CE6     MOV #0x30CE, W6
011F20  90029E     MOV [W14+2], W5
011F22  430285     ADD W6, W5, W5
011F24  784A84     MOV.B W4, [W5]
011F26  90021E     MOV [W14+2], W4
011F28  E80204     INC W4, W4
011F2A  980714     MOV W4, [W14+2]
17841:             
17842:                 Tmp=(int)(Ki*1000);                         //StartRot        28
011F2C  809B04     MOV Ki, W4
011F2E  809B15     MOV 0x1362, W5
011F30  200002     MOV #0x0, W2
011F32  2447A3     MOV #0x447A, W3
011F34  BE0004     MOV.D W4, W0
011F36  022630     CALL ___mulsf3
011F38  000000     NOP
011F3A  BE0200     MOV.D W0, W4
011F3C  BE0004     MOV.D W4, W0
011F3E  022504     CALL ___fixsfsi
011F40  000000     NOP
011F42  BE0200     MOV.D W0, W4
011F44  780F04     MOV W4, [W14]
17843:                 HC05TrmMass[CntBt++]=Tmp;
011F46  78021E     MOV [W14], W4
011F48  784204     MOV.B W4, W4
011F4A  230CE6     MOV #0x30CE, W6
011F4C  90029E     MOV [W14+2], W5
011F4E  430285     ADD W6, W5, W5
011F50  784A84     MOV.B W4, [W5]
011F52  90021E     MOV [W14+2], W4
011F54  E80204     INC W4, W4
011F56  980714     MOV W4, [W14+2]
17844:                 HC05TrmMass[CntBt++]=Tmp>>8;
011F58  78021E     MOV [W14], W4
011F5A  DEA248     ASR W4, #8, W4
011F5C  784204     MOV.B W4, W4
011F5E  230CE6     MOV #0x30CE, W6
011F60  90029E     MOV [W14+2], W5
011F62  430285     ADD W6, W5, W5
011F64  784A84     MOV.B W4, [W5]
011F66  90021E     MOV [W14+2], W4
011F68  E80204     INC W4, W4
011F6A  980714     MOV W4, [W14+2]
17845:             
17846:                 Tmp=KRot;                               //StartRot        29
011F6C  8154A6     MOV KRot, W6
011F6E  780F06     MOV W6, [W14]
17847:                 HC05TrmMass[CntBt++]=Tmp;
011F70  78021E     MOV [W14], W4
011F72  784204     MOV.B W4, W4
011F74  230CE6     MOV #0x30CE, W6
011F76  90029E     MOV [W14+2], W5
011F78  430285     ADD W6, W5, W5
011F7A  784A84     MOV.B W4, [W5]
011F7C  90021E     MOV [W14+2], W4
011F7E  E80204     INC W4, W4
011F80  980714     MOV W4, [W14+2]
17848:                 HC05TrmMass[CntBt++]=Tmp>>8;
011F82  78021E     MOV [W14], W4
011F84  DEA248     ASR W4, #8, W4
011F86  784204     MOV.B W4, W4
011F88  230CE6     MOV #0x30CE, W6
011F8A  90029E     MOV [W14+2], W5
011F8C  430285     ADD W6, W5, W5
011F8E  784A84     MOV.B W4, [W5]
011F90  90021E     MOV [W14+2], W4
011F92  E80204     INC W4, W4
011F94  980714     MOV W4, [W14+2]
17849:             
17850:                 Tmp=(int)(KpRot*100);                           //StartRot        30
011F96  809C84     MOV KpRot, W4
011F98  809C95     MOV 0x1392, W5
011F9A  200002     MOV #0x0, W2
011F9C  242C83     MOV #0x42C8, W3
011F9E  BE0004     MOV.D W4, W0
011FA0  022630     CALL ___mulsf3
011FA2  000000     NOP
011FA4  BE0200     MOV.D W0, W4
011FA6  BE0004     MOV.D W4, W0
011FA8  022504     CALL ___fixsfsi
011FAA  000000     NOP
011FAC  BE0200     MOV.D W0, W4
011FAE  780F04     MOV W4, [W14]
17851:                 HC05TrmMass[CntBt++]=Tmp;
011FB0  78021E     MOV [W14], W4
011FB2  784204     MOV.B W4, W4
011FB4  230CE6     MOV #0x30CE, W6
011FB6  90029E     MOV [W14+2], W5
011FB8  430285     ADD W6, W5, W5
011FBA  784A84     MOV.B W4, [W5]
011FBC  90021E     MOV [W14+2], W4
011FBE  E80204     INC W4, W4
011FC0  980714     MOV W4, [W14+2]
17852:                 HC05TrmMass[CntBt++]=Tmp>>8;
011FC2  78021E     MOV [W14], W4
011FC4  DEA248     ASR W4, #8, W4
011FC6  784204     MOV.B W4, W4
011FC8  230CE6     MOV #0x30CE, W6
011FCA  90029E     MOV [W14+2], W5
011FCC  430285     ADD W6, W5, W5
011FCE  784A84     MOV.B W4, [W5]
011FD0  90021E     MOV [W14+2], W4
011FD2  E80204     INC W4, W4
011FD4  980714     MOV W4, [W14+2]
17853:             
17854:                 Tmp=(int)(KiRot*10000);                         //StartRot        31
011FD6  809CE4     MOV KiRot, W4
011FD8  809CF5     MOV 0x139E, W5
011FDA  240002     MOV #0x4000, W2
011FDC  2461C3     MOV #0x461C, W3
011FDE  BE0004     MOV.D W4, W0
011FE0  022630     CALL ___mulsf3
011FE2  000000     NOP
011FE4  BE0200     MOV.D W0, W4
011FE6  BE0004     MOV.D W4, W0
011FE8  022504     CALL ___fixsfsi
011FEA  000000     NOP
011FEC  BE0200     MOV.D W0, W4
011FEE  780F04     MOV W4, [W14]
17855:                 HC05TrmMass[CntBt++]=Tmp;
011FF0  78021E     MOV [W14], W4
011FF2  784204     MOV.B W4, W4
011FF4  230CE6     MOV #0x30CE, W6
011FF6  90029E     MOV [W14+2], W5
011FF8  430285     ADD W6, W5, W5
011FFA  784A84     MOV.B W4, [W5]
011FFC  90021E     MOV [W14+2], W4
011FFE  E80204     INC W4, W4
012000  980714     MOV W4, [W14+2]
17856:                 HC05TrmMass[CntBt++]=Tmp>>8;
012002  78021E     MOV [W14], W4
012004  DEA248     ASR W4, #8, W4
012006  784204     MOV.B W4, W4
012008  230CE6     MOV #0x30CE, W6
01200A  90029E     MOV [W14+2], W5
01200C  430285     ADD W6, W5, W5
01200E  784A84     MOV.B W4, [W5]
012010  90021E     MOV [W14+2], W4
012012  E80204     INC W4, W4
012014  980714     MOV W4, [W14+2]
17857:             
17858:                 Tmp=ADCThrottle;                                  //ADCThrottle        32
012016  809354     MOV ADCThrottle, W4
012018  780F04     MOV W4, [W14]
17859:                 HC05TrmMass[CntBt++]=Tmp;
01201A  78021E     MOV [W14], W4
01201C  784204     MOV.B W4, W4
01201E  230CE6     MOV #0x30CE, W6
012020  90029E     MOV [W14+2], W5
012022  430285     ADD W6, W5, W5
012024  784A84     MOV.B W4, [W5]
012026  90021E     MOV [W14+2], W4
012028  E80204     INC W4, W4
01202A  980714     MOV W4, [W14+2]
17860:                 HC05TrmMass[CntBt++]=Tmp>>8;
01202C  78021E     MOV [W14], W4
01202E  DEA248     ASR W4, #8, W4
012030  784204     MOV.B W4, W4
012032  230CE6     MOV #0x30CE, W6
012034  90029E     MOV [W14+2], W5
012036  430285     ADD W6, W5, W5
012038  784A84     MOV.B W4, [W5]
01203A  90021E     MOV [W14+2], W4
01203C  E80204     INC W4, W4
01203E  980714     MOV W4, [W14+2]
17861:             
17862:                 Tmp=ThrottleTmp;                                  //Preas2ADC        33
012040  81FF34     MOV ThrottleTmp, W4
012042  780F04     MOV W4, [W14]
17863:                 HC05TrmMass[CntBt++]=Tmp;
012044  78021E     MOV [W14], W4
012046  784204     MOV.B W4, W4
012048  230CE6     MOV #0x30CE, W6
01204A  90029E     MOV [W14+2], W5
01204C  430285     ADD W6, W5, W5
01204E  784A84     MOV.B W4, [W5]
012050  90021E     MOV [W14+2], W4
012052  E80204     INC W4, W4
012054  980714     MOV W4, [W14+2]
17864:                 HC05TrmMass[CntBt++]=Tmp>>8;
012056  78021E     MOV [W14], W4
012058  DEA248     ASR W4, #8, W4
01205A  784204     MOV.B W4, W4
01205C  230CE6     MOV #0x30CE, W6
01205E  90029E     MOV [W14+2], W5
012060  430285     ADD W6, W5, W5
012062  784A84     MOV.B W4, [W5]
012064  90021E     MOV [W14+2], W4
012066  E80204     INC W4, W4
012068  980714     MOV W4, [W14+2]
17865:             
17866:                 HC05TrmMass[CntBt++]=CurrLimit;                     //EMPTY             34
01206A  80C194     MOV CurrLimit, W4
01206C  784204     MOV.B W4, W4
01206E  230CE6     MOV #0x30CE, W6
012070  90029E     MOV [W14+2], W5
012072  430285     ADD W6, W5, W5
012074  784A84     MOV.B W4, [W5]
012076  90021E     MOV [W14+2], W4
012078  E80204     INC W4, W4
01207A  980714     MOV W4, [W14+2]
17867:             
17868:                 Tmp=KpSPD;                                      //KpSPD        35
01207C  818134     MOV KpSPD, W4
01207E  780F04     MOV W4, [W14]
17869:                 HC05TrmMass[CntBt++]=Tmp;
012080  78021E     MOV [W14], W4
012082  784204     MOV.B W4, W4
012084  230CE6     MOV #0x30CE, W6
012086  90029E     MOV [W14+2], W5
012088  430285     ADD W6, W5, W5
01208A  784A84     MOV.B W4, [W5]
01208C  90021E     MOV [W14+2], W4
01208E  E80204     INC W4, W4
012090  980714     MOV W4, [W14+2]
17870:                 HC05TrmMass[CntBt++]=Tmp>>8;
012092  78021E     MOV [W14], W4
012094  DEA248     ASR W4, #8, W4
012096  784204     MOV.B W4, W4
012098  230CE6     MOV #0x30CE, W6
01209A  90029E     MOV [W14+2], W5
01209C  430285     ADD W6, W5, W5
01209E  784A84     MOV.B W4, [W5]
0120A0  90021E     MOV [W14+2], W4
0120A2  E80204     INC W4, W4
0120A4  980714     MOV W4, [W14+2]
17871:             
17872:                 Tmp=AngleLimit;                                      //AngleLimit        36
0120A6  818246     MOV AngleLimit, W6
0120A8  780F06     MOV W6, [W14]
17873:                 HC05TrmMass[CntBt++]=Tmp;
0120AA  78021E     MOV [W14], W4
0120AC  784204     MOV.B W4, W4
0120AE  230CE6     MOV #0x30CE, W6
0120B0  90029E     MOV [W14+2], W5
0120B2  430285     ADD W6, W5, W5
0120B4  784A84     MOV.B W4, [W5]
0120B6  90021E     MOV [W14+2], W4
0120B8  E80204     INC W4, W4
0120BA  980714     MOV W4, [W14+2]
17874:                 HC05TrmMass[CntBt++]=Tmp>>8;
0120BC  78021E     MOV [W14], W4
0120BE  DEA248     ASR W4, #8, W4
0120C0  784204     MOV.B W4, W4
0120C2  230CE6     MOV #0x30CE, W6
0120C4  90029E     MOV [W14+2], W5
0120C6  430285     ADD W6, W5, W5
0120C8  784A84     MOV.B W4, [W5]
0120CA  90021E     MOV [W14+2], W4
0120CC  E80204     INC W4, W4
0120CE  980714     MOV W4, [W14+2]
17875:             
17876:             
17877:                 HC05TrmMass[CntBt++]=CurrTuda1;               //CurrTuda1;        37
0120D0  81B824     MOV CurrTuda1, W4
0120D2  81B835     MOV 0x3706, W5
0120D4  784204     MOV.B W4, W4
0120D6  230CE6     MOV #0x30CE, W6
0120D8  90029E     MOV [W14+2], W5
0120DA  430285     ADD W6, W5, W5
0120DC  784A84     MOV.B W4, [W5]
0120DE  90021E     MOV [W14+2], W4
0120E0  E80204     INC W4, W4
0120E2  980714     MOV W4, [W14+2]
17878:                 HC05TrmMass[CntBt++]=CurrTuda1>>8;
0120E4  81B824     MOV CurrTuda1, W4
0120E6  81B835     MOV 0x3706, W5
0120E8  DD2B48     SL W5, #8, W6
0120EA  DE2248     LSR W4, #8, W4
0120EC  730204     IOR W6, W4, W4
0120EE  DE2AC8     LSR W5, #8, W5
0120F0  784204     MOV.B W4, W4
0120F2  230CE6     MOV #0x30CE, W6
0120F4  90029E     MOV [W14+2], W5
0120F6  430285     ADD W6, W5, W5
0120F8  784A84     MOV.B W4, [W5]
0120FA  90021E     MOV [W14+2], W4
0120FC  E80204     INC W4, W4
0120FE  980714     MOV W4, [W14+2]
17879:                 HC05TrmMass[CntBt++]=CurrTuda1>>16;
012100  81B824     MOV CurrTuda1, W4
012102  81B835     MOV 0x3706, W5
012104  DE2A40     LSR W5, #0, W4
012106  200005     MOV #0x0, W5
012108  784204     MOV.B W4, W4
01210A  230CE6     MOV #0x30CE, W6
01210C  90029E     MOV [W14+2], W5
01210E  430285     ADD W6, W5, W5
012110  784A84     MOV.B W4, [W5]
012112  90021E     MOV [W14+2], W4
012114  E80204     INC W4, W4
012116  980714     MOV W4, [W14+2]
17880:                 HC05TrmMass[CntBt++]=CurrTuda1>>24;
012118  81B824     MOV CurrTuda1, W4
01211A  81B835     MOV 0x3706, W5
01211C  DE2A48     LSR W5, #8, W4
01211E  200005     MOV #0x0, W5
012120  784204     MOV.B W4, W4
012122  230CE6     MOV #0x30CE, W6
012124  90029E     MOV [W14+2], W5
012126  430285     ADD W6, W5, W5
012128  784A84     MOV.B W4, [W5]
01212A  90021E     MOV [W14+2], W4
01212C  E80204     INC W4, W4
01212E  980714     MOV W4, [W14+2]
17881:             
17882:                 HC05TrmMass[CntBt++]=CurrRegen1;               //CurrRegen1;        38
012130  81B844     MOV CurrRegen1, W4
012132  81B855     MOV 0x370A, W5
012134  784204     MOV.B W4, W4
012136  230CE6     MOV #0x30CE, W6
012138  90029E     MOV [W14+2], W5
01213A  430285     ADD W6, W5, W5
01213C  784A84     MOV.B W4, [W5]
01213E  90021E     MOV [W14+2], W4
012140  E80204     INC W4, W4
012142  980714     MOV W4, [W14+2]
17883:                 HC05TrmMass[CntBt++]=CurrRegen1>>8;
012144  81B844     MOV CurrRegen1, W4
012146  81B855     MOV 0x370A, W5
012148  DD2B48     SL W5, #8, W6
01214A  DE2248     LSR W4, #8, W4
01214C  730204     IOR W6, W4, W4
01214E  DE2AC8     LSR W5, #8, W5
012150  784204     MOV.B W4, W4
012152  230CE6     MOV #0x30CE, W6
012154  90029E     MOV [W14+2], W5
012156  430285     ADD W6, W5, W5
012158  784A84     MOV.B W4, [W5]
01215A  90021E     MOV [W14+2], W4
01215C  E80204     INC W4, W4
01215E  980714     MOV W4, [W14+2]
17884:                 HC05TrmMass[CntBt++]=CurrRegen1>>16;
012160  81B844     MOV CurrRegen1, W4
012162  81B855     MOV 0x370A, W5
012164  DE2A40     LSR W5, #0, W4
012166  200005     MOV #0x0, W5
012168  784204     MOV.B W4, W4
01216A  230CE6     MOV #0x30CE, W6
01216C  90029E     MOV [W14+2], W5
01216E  430285     ADD W6, W5, W5
012170  784A84     MOV.B W4, [W5]
012172  90021E     MOV [W14+2], W4
012174  E80204     INC W4, W4
012176  980714     MOV W4, [W14+2]
17885:                 HC05TrmMass[CntBt++]=CurrRegen1>>24;
012178  81B844     MOV CurrRegen1, W4
01217A  81B855     MOV 0x370A, W5
01217C  DE2A48     LSR W5, #8, W4
01217E  200005     MOV #0x0, W5
012180  784204     MOV.B W4, W4
012182  230CE6     MOV #0x30CE, W6
012184  90029E     MOV [W14+2], W5
012186  430285     ADD W6, W5, W5
012188  784A84     MOV.B W4, [W5]
01218A  90021E     MOV [W14+2], W4
01218C  E80204     INC W4, W4
01218E  980714     MOV W4, [W14+2]
17886:             
17887:                 HC05TrmMass[CntBt++]=Flgs4.Flags;               //Flgs4;        39
012190  809664     MOV Flgs4, W4
012192  809675     MOV 0x12CE, W5
012194  784204     MOV.B W4, W4
012196  230CE6     MOV #0x30CE, W6
012198  90029E     MOV [W14+2], W5
01219A  430285     ADD W6, W5, W5
01219C  784A84     MOV.B W4, [W5]
01219E  90021E     MOV [W14+2], W4
0121A0  E80204     INC W4, W4
0121A2  980714     MOV W4, [W14+2]
17888:                 HC05TrmMass[CntBt++]=Flgs4.Flags>>8;
0121A4  809664     MOV Flgs4, W4
0121A6  809675     MOV 0x12CE, W5
0121A8  DD2B48     SL W5, #8, W6
0121AA  DE2248     LSR W4, #8, W4
0121AC  730204     IOR W6, W4, W4
0121AE  DE2AC8     LSR W5, #8, W5
0121B0  784204     MOV.B W4, W4
0121B2  230CE6     MOV #0x30CE, W6
0121B4  90029E     MOV [W14+2], W5
0121B6  430285     ADD W6, W5, W5
0121B8  784A84     MOV.B W4, [W5]
0121BA  90021E     MOV [W14+2], W4
0121BC  E80204     INC W4, W4
0121BE  980714     MOV W4, [W14+2]
17889:                 HC05TrmMass[CntBt++]=Flgs4.Flags>>16;
0121C0  809664     MOV Flgs4, W4
0121C2  809675     MOV 0x12CE, W5
0121C4  DE2A40     LSR W5, #0, W4
0121C6  200005     MOV #0x0, W5
0121C8  784204     MOV.B W4, W4
0121CA  230CE6     MOV #0x30CE, W6
0121CC  90029E     MOV [W14+2], W5
0121CE  430285     ADD W6, W5, W5
0121D0  784A84     MOV.B W4, [W5]
0121D2  90021E     MOV [W14+2], W4
0121D4  E80204     INC W4, W4
0121D6  980714     MOV W4, [W14+2]
17890:                 HC05TrmMass[CntBt++]=Flgs4.Flags>>24;
0121D8  809664     MOV Flgs4, W4
0121DA  809675     MOV 0x12CE, W5
0121DC  DE2A48     LSR W5, #8, W4
0121DE  200005     MOV #0x0, W5
0121E0  784204     MOV.B W4, W4
0121E2  230CE6     MOV #0x30CE, W6
0121E4  90029E     MOV [W14+2], W5
0121E6  430285     ADD W6, W5, W5
0121E8  784A84     MOV.B W4, [W5]
0121EA  90021E     MOV [W14+2], W4
0121EC  E80204     INC W4, W4
0121EE  980714     MOV W4, [W14+2]
17891:             
17892:                 HC05TrmMass[CntBt++]=Flgs5.Flags;               //Flgs5;        40
0121F0  809684     MOV Flgs5, W4
0121F2  809695     MOV 0x12D2, W5
0121F4  784204     MOV.B W4, W4
0121F6  230CE6     MOV #0x30CE, W6
0121F8  90029E     MOV [W14+2], W5
0121FA  430285     ADD W6, W5, W5
0121FC  784A84     MOV.B W4, [W5]
0121FE  90021E     MOV [W14+2], W4
012200  E80204     INC W4, W4
012202  980714     MOV W4, [W14+2]
17893:                 HC05TrmMass[CntBt++]=Flgs5.Flags>>8;
012204  809684     MOV Flgs5, W4
012206  809695     MOV 0x12D2, W5
012208  DD2B48     SL W5, #8, W6
01220A  DE2248     LSR W4, #8, W4
01220C  730204     IOR W6, W4, W4
01220E  DE2AC8     LSR W5, #8, W5
012210  784204     MOV.B W4, W4
012212  230CE6     MOV #0x30CE, W6
012214  90029E     MOV [W14+2], W5
012216  430285     ADD W6, W5, W5
012218  784A84     MOV.B W4, [W5]
01221A  90021E     MOV [W14+2], W4
01221C  E80204     INC W4, W4
01221E  980714     MOV W4, [W14+2]
17894:                 HC05TrmMass[CntBt++]=Flgs5.Flags>>16;
012220  809684     MOV Flgs5, W4
012222  809695     MOV 0x12D2, W5
012224  DE2A40     LSR W5, #0, W4
012226  200005     MOV #0x0, W5
012228  784204     MOV.B W4, W4
01222A  230CE6     MOV #0x30CE, W6
01222C  90029E     MOV [W14+2], W5
01222E  430285     ADD W6, W5, W5
012230  784A84     MOV.B W4, [W5]
012232  90021E     MOV [W14+2], W4
012234  E80204     INC W4, W4
012236  980714     MOV W4, [W14+2]
17895:                 HC05TrmMass[CntBt++]=Flgs5.Flags>>24;
012238  809684     MOV Flgs5, W4
01223A  809695     MOV 0x12D2, W5
01223C  DE2A48     LSR W5, #8, W4
01223E  200005     MOV #0x0, W5
012240  784204     MOV.B W4, W4
012242  230CE6     MOV #0x30CE, W6
012244  90029E     MOV [W14+2], W5
012246  430285     ADD W6, W5, W5
012248  784A84     MOV.B W4, [W5]
01224A  90021E     MOV [W14+2], W4
01224C  E80204     INC W4, W4
01224E  980714     MOV W4, [W14+2]
17896:             
17897:                 HC05TrmMass[CntBt++]=Flgs3.Flags;               //Flgs3;        41
012250  809644     MOV Flgs3, W4
012252  809655     MOV 0x12CA, W5
012254  784204     MOV.B W4, W4
012256  230CE6     MOV #0x30CE, W6
012258  90029E     MOV [W14+2], W5
01225A  430285     ADD W6, W5, W5
01225C  784A84     MOV.B W4, [W5]
01225E  90021E     MOV [W14+2], W4
012260  E80204     INC W4, W4
012262  980714     MOV W4, [W14+2]
17898:                 HC05TrmMass[CntBt++]=Flgs3.Flags>>8;
012264  809644     MOV Flgs3, W4
012266  809655     MOV 0x12CA, W5
012268  DD2B48     SL W5, #8, W6
01226A  DE2248     LSR W4, #8, W4
01226C  730204     IOR W6, W4, W4
01226E  DE2AC8     LSR W5, #8, W5
012270  784204     MOV.B W4, W4
012272  230CE6     MOV #0x30CE, W6
012274  90029E     MOV [W14+2], W5
012276  430285     ADD W6, W5, W5
012278  784A84     MOV.B W4, [W5]
01227A  90021E     MOV [W14+2], W4
01227C  E80204     INC W4, W4
01227E  980714     MOV W4, [W14+2]
17899:                 HC05TrmMass[CntBt++]=Flgs3.Flags>>16;
012280  809644     MOV Flgs3, W4
012282  809655     MOV 0x12CA, W5
012284  DE2A40     LSR W5, #0, W4
012286  200005     MOV #0x0, W5
012288  784204     MOV.B W4, W4
01228A  230CE6     MOV #0x30CE, W6
01228C  90029E     MOV [W14+2], W5
01228E  430285     ADD W6, W5, W5
012290  784A84     MOV.B W4, [W5]
012292  90021E     MOV [W14+2], W4
012294  E80204     INC W4, W4
012296  980714     MOV W4, [W14+2]
17900:                 HC05TrmMass[CntBt++]=Flgs3.Flags>>24;
012298  809644     MOV Flgs3, W4
01229A  809655     MOV 0x12CA, W5
01229C  DE2A48     LSR W5, #8, W4
01229E  200005     MOV #0x0, W5
0122A0  784204     MOV.B W4, W4
0122A2  230CE6     MOV #0x30CE, W6
0122A4  90029E     MOV [W14+2], W5
0122A6  430285     ADD W6, W5, W5
0122A8  784A84     MOV.B W4, [W5]
0122AA  90021E     MOV [W14+2], W4
0122AC  E80204     INC W4, W4
0122AE  980714     MOV W4, [W14+2]
17901:             
17902:             
17903:                 HC05TrmMass[CntBt++]=TimerCnt;               //TimerCnt;        42
0122B0  81BA64     MOV TimerCnt, W4
0122B2  81BA75     MOV 0x374E, W5
0122B4  784204     MOV.B W4, W4
0122B6  230CE6     MOV #0x30CE, W6
0122B8  90029E     MOV [W14+2], W5
0122BA  430285     ADD W6, W5, W5
0122BC  784A84     MOV.B W4, [W5]
0122BE  90021E     MOV [W14+2], W4
0122C0  E80204     INC W4, W4
0122C2  980714     MOV W4, [W14+2]
17904:                 HC05TrmMass[CntBt++]=TimerCnt>>8;
0122C4  81BA64     MOV TimerCnt, W4
0122C6  81BA75     MOV 0x374E, W5
0122C8  DD2B48     SL W5, #8, W6
0122CA  DE2248     LSR W4, #8, W4
0122CC  730204     IOR W6, W4, W4
0122CE  DE2AC8     LSR W5, #8, W5
0122D0  784204     MOV.B W4, W4
0122D2  230CE6     MOV #0x30CE, W6
0122D4  90029E     MOV [W14+2], W5
0122D6  430285     ADD W6, W5, W5
0122D8  784A84     MOV.B W4, [W5]
0122DA  90021E     MOV [W14+2], W4
0122DC  E80204     INC W4, W4
0122DE  980714     MOV W4, [W14+2]
17905:                 HC05TrmMass[CntBt++]=TimerCnt>>16;
0122E0  81BA64     MOV TimerCnt, W4
0122E2  81BA75     MOV 0x374E, W5
0122E4  DE2A40     LSR W5, #0, W4
0122E6  200005     MOV #0x0, W5
0122E8  784204     MOV.B W4, W4
0122EA  230CE6     MOV #0x30CE, W6
0122EC  90029E     MOV [W14+2], W5
0122EE  430285     ADD W6, W5, W5
0122F0  784A84     MOV.B W4, [W5]
0122F2  90021E     MOV [W14+2], W4
0122F4  E80204     INC W4, W4
0122F6  980714     MOV W4, [W14+2]
17906:                 HC05TrmMass[CntBt++]=TimerCnt>>24;
0122F8  81BA64     MOV TimerCnt, W4
0122FA  81BA75     MOV 0x374E, W5
0122FC  DE2A48     LSR W5, #8, W4
0122FE  200005     MOV #0x0, W5
012300  784204     MOV.B W4, W4
012302  230CE6     MOV #0x30CE, W6
012304  90029E     MOV [W14+2], W5
012306  430285     ADD W6, W5, W5
012308  784A84     MOV.B W4, [W5]
01230A  90021E     MOV [W14+2], W4
01230C  E80204     INC W4, W4
01230E  980714     MOV W4, [W14+2]
17907:             
17908:             
17909:                     
17910:                 Tmp=(unsigned int)(_3VFl*100);                                  //V1        43
012310  813F04     MOV _3VFl, W4
012312  813F15     MOV 0x27E2, W5
012314  200002     MOV #0x0, W2
012316  242C83     MOV #0x42C8, W3
012318  BE0004     MOV.D W4, W0
01231A  022630     CALL ___mulsf3
01231C  000000     NOP
01231E  BE0200     MOV.D W0, W4
012320  BE0004     MOV.D W4, W0
012322  022546     CALL ___fixunssfsi
012324  000000     NOP
012326  BE0200     MOV.D W0, W4
012328  780204     MOV W4, W4
01232A  780F04     MOV W4, [W14]
17911:                 HC05TrmMass[CntBt++]=Tmp;
01232C  78021E     MOV [W14], W4
01232E  784204     MOV.B W4, W4
012330  230CE6     MOV #0x30CE, W6
012332  90029E     MOV [W14+2], W5
012334  430285     ADD W6, W5, W5
012336  784A84     MOV.B W4, [W5]
012338  90021E     MOV [W14+2], W4
01233A  E80204     INC W4, W4
01233C  980714     MOV W4, [W14+2]
17912:                 HC05TrmMass[CntBt++]=Tmp>>8;
01233E  78021E     MOV [W14], W4
012340  DEA248     ASR W4, #8, W4
012342  784204     MOV.B W4, W4
012344  230CE6     MOV #0x30CE, W6
012346  90029E     MOV [W14+2], W5
012348  430285     ADD W6, W5, W5
01234A  784A84     MOV.B W4, [W5]
01234C  90021E     MOV [W14+2], W4
01234E  E80204     INC W4, W4
012350  980714     MOV W4, [W14+2]
17913:             
17914:                 Tmp=(unsigned int)(_5VFl*100);                                  //V2        44
012352  813F24     MOV _5VFl, W4
012354  813F35     MOV 0x27E6, W5
012356  200002     MOV #0x0, W2
012358  242C83     MOV #0x42C8, W3
01235A  BE0004     MOV.D W4, W0
01235C  022630     CALL ___mulsf3
01235E  000000     NOP
012360  BE0200     MOV.D W0, W4
012362  BE0004     MOV.D W4, W0
012364  022546     CALL ___fixunssfsi
012366  000000     NOP
012368  BE0200     MOV.D W0, W4
01236A  780204     MOV W4, W4
01236C  780F04     MOV W4, [W14]
17915:                 HC05TrmMass[CntBt++]=Tmp;
01236E  78021E     MOV [W14], W4
012370  784204     MOV.B W4, W4
012372  230CE6     MOV #0x30CE, W6
012374  90029E     MOV [W14+2], W5
012376  430285     ADD W6, W5, W5
012378  784A84     MOV.B W4, [W5]
01237A  90021E     MOV [W14+2], W4
01237C  E80204     INC W4, W4
01237E  980714     MOV W4, [W14+2]
17916:                 HC05TrmMass[CntBt++]=Tmp>>8;
012380  78021E     MOV [W14], W4
012382  DEA248     ASR W4, #8, W4
012384  784204     MOV.B W4, W4
012386  230CE6     MOV #0x30CE, W6
012388  90029E     MOV [W14+2], W5
01238A  430285     ADD W6, W5, W5
01238C  784A84     MOV.B W4, [W5]
01238E  90021E     MOV [W14+2], W4
012390  E80204     INC W4, W4
012392  980714     MOV W4, [W14+2]
17917:             
17918:                 Tmp=(unsigned int)(_12VFl*100);                                  //V3        45
012394  813F44     MOV _12VFl, W4
012396  813F55     MOV 0x27EA, W5
012398  200002     MOV #0x0, W2
01239A  242C83     MOV #0x42C8, W3
01239C  BE0004     MOV.D W4, W0
01239E  022630     CALL ___mulsf3
0123A0  000000     NOP
0123A2  BE0200     MOV.D W0, W4
0123A4  BE0004     MOV.D W4, W0
0123A6  022546     CALL ___fixunssfsi
0123A8  000000     NOP
0123AA  BE0200     MOV.D W0, W4
0123AC  780204     MOV W4, W4
0123AE  780F04     MOV W4, [W14]
17919:                 HC05TrmMass[CntBt++]=Tmp;
0123B0  78021E     MOV [W14], W4
0123B2  784204     MOV.B W4, W4
0123B4  230CE6     MOV #0x30CE, W6
0123B6  90029E     MOV [W14+2], W5
0123B8  430285     ADD W6, W5, W5
0123BA  784A84     MOV.B W4, [W5]
0123BC  90021E     MOV [W14+2], W4
0123BE  E80204     INC W4, W4
0123C0  980714     MOV W4, [W14+2]
17920:                 HC05TrmMass[CntBt++]=Tmp>>8;
0123C2  78021E     MOV [W14], W4
0123C4  DEA248     ASR W4, #8, W4
0123C6  784204     MOV.B W4, W4
0123C8  230CE6     MOV #0x30CE, W6
0123CA  90029E     MOV [W14+2], W5
0123CC  430285     ADD W6, W5, W5
0123CE  784A84     MOV.B W4, [W5]
0123D0  90021E     MOV [W14+2], W4
0123D2  E80204     INC W4, W4
0123D4  980714     MOV W4, [W14+2]
17921:             
17922:                 Tmp=(int)(CurrA*10);                                  //V4        46
0123D6  8097A4     MOV CurrA, W4
0123D8  8097B5     MOV 0x12F6, W5
0123DA  200002     MOV #0x0, W2
0123DC  241203     MOV #0x4120, W3
0123DE  BE0004     MOV.D W4, W0
0123E0  022630     CALL ___mulsf3
0123E2  000000     NOP
0123E4  BE0200     MOV.D W0, W4
0123E6  BE0004     MOV.D W4, W0
0123E8  022504     CALL ___fixsfsi
0123EA  000000     NOP
0123EC  BE0200     MOV.D W0, W4
0123EE  780F04     MOV W4, [W14]
17923:                 HC05TrmMass[CntBt++]=Tmp;
0123F0  78021E     MOV [W14], W4
0123F2  784204     MOV.B W4, W4
0123F4  230CE6     MOV #0x30CE, W6
0123F6  90029E     MOV [W14+2], W5
0123F8  430285     ADD W6, W5, W5
0123FA  784A84     MOV.B W4, [W5]
0123FC  90021E     MOV [W14+2], W4
0123FE  E80204     INC W4, W4
012400  980714     MOV W4, [W14+2]
17924:                 HC05TrmMass[CntBt++]=Tmp>>8;
012402  78021E     MOV [W14], W4
012404  DEA248     ASR W4, #8, W4
012406  784204     MOV.B W4, W4
012408  230CE6     MOV #0x30CE, W6
01240A  90029E     MOV [W14+2], W5
01240C  430285     ADD W6, W5, W5
01240E  784A84     MOV.B W4, [W5]
012410  90021E     MOV [W14+2], W4
012412  E80204     INC W4, W4
012414  980714     MOV W4, [W14+2]
17925:             
17926:                 Tmp=CurrA_N_Av;                                  //V5        47
012416  80B564     MOV CurrA_N_Av, W4
012418  780F04     MOV W4, [W14]
17927:                 HC05TrmMass[CntBt++]=Tmp;
01241A  78021E     MOV [W14], W4
01241C  784204     MOV.B W4, W4
01241E  230CE6     MOV #0x30CE, W6
012420  90029E     MOV [W14+2], W5
012422  430285     ADD W6, W5, W5
012424  784A84     MOV.B W4, [W5]
012426  90021E     MOV [W14+2], W4
012428  E80204     INC W4, W4
01242A  980714     MOV W4, [W14+2]
17928:                 HC05TrmMass[CntBt++]=Tmp>>8;
01242C  78021E     MOV [W14], W4
01242E  DEA248     ASR W4, #8, W4
012430  784204     MOV.B W4, W4
012432  230CE6     MOV #0x30CE, W6
012434  90029E     MOV [W14+2], W5
012436  430285     ADD W6, W5, W5
012438  784A84     MOV.B W4, [W5]
01243A  90021E     MOV [W14+2], W4
01243C  E80204     INC W4, W4
01243E  980714     MOV W4, [W14+2]
17929:             
17930:                 Tmp=(int)(CurrC*10);                                  //V6        48
012440  8097C4     MOV CurrC, W4
012442  8097D5     MOV 0x12FA, W5
012444  200002     MOV #0x0, W2
012446  241203     MOV #0x4120, W3
012448  BE0004     MOV.D W4, W0
01244A  022630     CALL ___mulsf3
01244C  000000     NOP
01244E  BE0200     MOV.D W0, W4
012450  BE0004     MOV.D W4, W0
012452  022504     CALL ___fixsfsi
012454  000000     NOP
012456  BE0200     MOV.D W0, W4
012458  780F04     MOV W4, [W14]
17931:                 HC05TrmMass[CntBt++]=Tmp;
01245A  78021E     MOV [W14], W4
01245C  784204     MOV.B W4, W4
01245E  230CE6     MOV #0x30CE, W6
012460  90029E     MOV [W14+2], W5
012462  430285     ADD W6, W5, W5
012464  784A84     MOV.B W4, [W5]
012466  90021E     MOV [W14+2], W4
012468  E80204     INC W4, W4
01246A  980714     MOV W4, [W14+2]
17932:                 HC05TrmMass[CntBt++]=Tmp>>8;
01246C  78021E     MOV [W14], W4
01246E  DEA248     ASR W4, #8, W4
012470  784204     MOV.B W4, W4
012472  230CE6     MOV #0x30CE, W6
012474  90029E     MOV [W14+2], W5
012476  430285     ADD W6, W5, W5
012478  784A84     MOV.B W4, [W5]
01247A  90021E     MOV [W14+2], W4
01247C  E80204     INC W4, W4
01247E  980714     MOV W4, [W14+2]
17933:             
17934:                 Tmp=CurrC_N_Av;                                  //V7        49
012480  80B586     MOV CurrC_N_Av, W6
012482  780F06     MOV W6, [W14]
17935:                 HC05TrmMass[CntBt++]=Tmp;
012484  78021E     MOV [W14], W4
012486  784204     MOV.B W4, W4
012488  230CE6     MOV #0x30CE, W6
01248A  90029E     MOV [W14+2], W5
01248C  430285     ADD W6, W5, W5
01248E  784A84     MOV.B W4, [W5]
012490  90021E     MOV [W14+2], W4
012492  E80204     INC W4, W4
012494  980714     MOV W4, [W14+2]
17936:                 HC05TrmMass[CntBt++]=Tmp>>8;
012496  78021E     MOV [W14], W4
012498  DEA248     ASR W4, #8, W4
01249A  784204     MOV.B W4, W4
01249C  230CE6     MOV #0x30CE, W6
01249E  90029E     MOV [W14+2], W5
0124A0  430285     ADD W6, W5, W5
0124A2  784A84     MOV.B W4, [W5]
0124A4  90021E     MOV [W14+2], W4
0124A6  E80204     INC W4, W4
0124A8  980714     MOV W4, [W14+2]
17937:             
17938:                 Tmp=(unsigned int)V8;                                  //V8        50
0124AA  8215B4     MOV V8, W4
0124AC  8215C5     MOV 0x42B8, W5
0124AE  780F04     MOV W4, [W14]
17939:                 HC05TrmMass[CntBt++]=Tmp;
0124B0  78021E     MOV [W14], W4
0124B2  784204     MOV.B W4, W4
0124B4  230CE6     MOV #0x30CE, W6
0124B6  90029E     MOV [W14+2], W5
0124B8  430285     ADD W6, W5, W5
0124BA  784A84     MOV.B W4, [W5]
0124BC  90021E     MOV [W14+2], W4
0124BE  E80204     INC W4, W4
0124C0  980714     MOV W4, [W14+2]
17940:                 HC05TrmMass[CntBt++]=Tmp>>8;
0124C2  78021E     MOV [W14], W4
0124C4  DEA248     ASR W4, #8, W4
0124C6  784204     MOV.B W4, W4
0124C8  230CE6     MOV #0x30CE, W6
0124CA  90029E     MOV [W14+2], W5
0124CC  430285     ADD W6, W5, W5
0124CE  784A84     MOV.B W4, [W5]
0124D0  90021E     MOV [W14+2], W4
0124D2  E80204     INC W4, W4
0124D4  980714     MOV W4, [W14+2]
17941:             
17942:                 Tmp=(unsigned int)V9;                                  //V9        51
0124D6  8215D4     MOV V9, W4
0124D8  8215E5     MOV 0x42BC, W5
0124DA  780F04     MOV W4, [W14]
17943:                 HC05TrmMass[CntBt++]=Tmp;
0124DC  78021E     MOV [W14], W4
0124DE  784204     MOV.B W4, W4
0124E0  230CE6     MOV #0x30CE, W6
0124E2  90029E     MOV [W14+2], W5
0124E4  430285     ADD W6, W5, W5
0124E6  784A84     MOV.B W4, [W5]
0124E8  90021E     MOV [W14+2], W4
0124EA  E80204     INC W4, W4
0124EC  980714     MOV W4, [W14+2]
17944:                 HC05TrmMass[CntBt++]=Tmp>>8;
0124EE  78021E     MOV [W14], W4
0124F0  DEA248     ASR W4, #8, W4
0124F2  784204     MOV.B W4, W4
0124F4  230CE6     MOV #0x30CE, W6
0124F6  90029E     MOV [W14+2], W5
0124F8  430285     ADD W6, W5, W5
0124FA  784A84     MOV.B W4, [W5]
0124FC  90021E     MOV [W14+2], W4
0124FE  E80204     INC W4, W4
012500  980714     MOV W4, [W14+2]
17945:             
17946:                 Tmp=(unsigned int)V10;                                  //V10        52
012502  8215F4     MOV V10, W4
012504  821605     MOV 0x42C0, W5
012506  780F04     MOV W4, [W14]
17947:                 HC05TrmMass[CntBt++]=Tmp;
012508  78021E     MOV [W14], W4
01250A  784204     MOV.B W4, W4
01250C  230CE6     MOV #0x30CE, W6
01250E  90029E     MOV [W14+2], W5
012510  430285     ADD W6, W5, W5
012512  784A84     MOV.B W4, [W5]
012514  90021E     MOV [W14+2], W4
012516  E80204     INC W4, W4
012518  980714     MOV W4, [W14+2]
17948:                 HC05TrmMass[CntBt++]=Tmp>>8;
01251A  78021E     MOV [W14], W4
01251C  DEA248     ASR W4, #8, W4
01251E  784204     MOV.B W4, W4
012520  230CE6     MOV #0x30CE, W6
012522  90029E     MOV [W14+2], W5
012524  430285     ADD W6, W5, W5
012526  784A84     MOV.B W4, [W5]
012528  90021E     MOV [W14+2], W4
01252A  E80204     INC W4, W4
01252C  980714     MOV W4, [W14+2]
17949:             
17950:                 Tmp=(unsigned int)V11;                                  //V11        53
01252E  821614     MOV V11, W4
012530  821625     MOV 0x42C4, W5
012532  780F04     MOV W4, [W14]
17951:                 HC05TrmMass[CntBt++]=Tmp;
012534  78021E     MOV [W14], W4
012536  784204     MOV.B W4, W4
012538  230CE6     MOV #0x30CE, W6
01253A  90029E     MOV [W14+2], W5
01253C  430285     ADD W6, W5, W5
01253E  784A84     MOV.B W4, [W5]
012540  90021E     MOV [W14+2], W4
012542  E80204     INC W4, W4
012544  980714     MOV W4, [W14+2]
17952:                 HC05TrmMass[CntBt++]=Tmp>>8;
012546  78021E     MOV [W14], W4
012548  DEA248     ASR W4, #8, W4
01254A  784204     MOV.B W4, W4
01254C  230CE6     MOV #0x30CE, W6
01254E  90029E     MOV [W14+2], W5
012550  430285     ADD W6, W5, W5
012552  784A84     MOV.B W4, [W5]
012554  90021E     MOV [W14+2], W4
012556  E80204     INC W4, W4
012558  980714     MOV W4, [W14+2]
17953:             
17954:                 Tmp=(unsigned int)V12;                                  //V12        54
01255A  821634     MOV V12, W4
01255C  821645     MOV 0x42C8, W5
01255E  780F04     MOV W4, [W14]
17955:                 HC05TrmMass[CntBt++]=Tmp;
012560  78021E     MOV [W14], W4
012562  784204     MOV.B W4, W4
012564  230CE6     MOV #0x30CE, W6
012566  90029E     MOV [W14+2], W5
012568  430285     ADD W6, W5, W5
01256A  784A84     MOV.B W4, [W5]
01256C  90021E     MOV [W14+2], W4
01256E  E80204     INC W4, W4
012570  980714     MOV W4, [W14+2]
17956:                 HC05TrmMass[CntBt++]=Tmp>>8;
012572  78021E     MOV [W14], W4
012574  DEA248     ASR W4, #8, W4
012576  784204     MOV.B W4, W4
012578  230CE6     MOV #0x30CE, W6
01257A  90029E     MOV [W14+2], W5
01257C  430285     ADD W6, W5, W5
01257E  784A84     MOV.B W4, [W5]
012580  90021E     MOV [W14+2], W4
012582  E80204     INC W4, W4
012584  980714     MOV W4, [W14+2]
17957:             
17958:                 Tmp=(unsigned int)V13;                                  //V13        55
012586  821654     MOV V13, W4
012588  821665     MOV 0x42CC, W5
01258A  780F04     MOV W4, [W14]
17959:                 HC05TrmMass[CntBt++]=Tmp;
01258C  78021E     MOV [W14], W4
01258E  784204     MOV.B W4, W4
012590  230CE6     MOV #0x30CE, W6
012592  90029E     MOV [W14+2], W5
012594  430285     ADD W6, W5, W5
012596  784A84     MOV.B W4, [W5]
012598  90021E     MOV [W14+2], W4
01259A  E80204     INC W4, W4
01259C  980714     MOV W4, [W14+2]
17960:                 HC05TrmMass[CntBt++]=Tmp>>8;
01259E  78021E     MOV [W14], W4
0125A0  DEA248     ASR W4, #8, W4
0125A2  784204     MOV.B W4, W4
0125A4  230CE6     MOV #0x30CE, W6
0125A6  90029E     MOV [W14+2], W5
0125A8  430285     ADD W6, W5, W5
0125AA  784A84     MOV.B W4, [W5]
0125AC  90021E     MOV [W14+2], W4
0125AE  E80204     INC W4, W4
0125B0  980714     MOV W4, [W14+2]
17961:             
17962:                 Tmp=(unsigned int)V14;                                  //V14        56
0125B2  821674     MOV V14, W4
0125B4  821685     MOV 0x42D0, W5
0125B6  780F04     MOV W4, [W14]
17963:                 HC05TrmMass[CntBt++]=Tmp;
0125B8  78021E     MOV [W14], W4
0125BA  784204     MOV.B W4, W4
0125BC  230CE6     MOV #0x30CE, W6
0125BE  90029E     MOV [W14+2], W5
0125C0  430285     ADD W6, W5, W5
0125C2  784A84     MOV.B W4, [W5]
0125C4  90021E     MOV [W14+2], W4
0125C6  E80204     INC W4, W4
0125C8  980714     MOV W4, [W14+2]
17964:                 HC05TrmMass[CntBt++]=Tmp>>8;
0125CA  78021E     MOV [W14], W4
0125CC  DEA248     ASR W4, #8, W4
0125CE  784204     MOV.B W4, W4
0125D0  230CE6     MOV #0x30CE, W6
0125D2  90029E     MOV [W14+2], W5
0125D4  430285     ADD W6, W5, W5
0125D6  784A84     MOV.B W4, [W5]
0125D8  90021E     MOV [W14+2], W4
0125DA  E80204     INC W4, W4
0125DC  980714     MOV W4, [W14+2]
17965:             
17966:                 Tmp=(unsigned int)V15;                                  //V15        57
0125DE  821694     MOV V15, W4
0125E0  8216A5     MOV 0x42D4, W5
0125E2  780F04     MOV W4, [W14]
17967:                 HC05TrmMass[CntBt++]=Tmp;
0125E4  78021E     MOV [W14], W4
0125E6  784204     MOV.B W4, W4
0125E8  230CE6     MOV #0x30CE, W6
0125EA  90029E     MOV [W14+2], W5
0125EC  430285     ADD W6, W5, W5
0125EE  784A84     MOV.B W4, [W5]
0125F0  90021E     MOV [W14+2], W4
0125F2  E80204     INC W4, W4
0125F4  980714     MOV W4, [W14+2]
17968:                 HC05TrmMass[CntBt++]=Tmp>>8;
0125F6  78021E     MOV [W14], W4
0125F8  DEA248     ASR W4, #8, W4
0125FA  784204     MOV.B W4, W4
0125FC  230CE6     MOV #0x30CE, W6
0125FE  90029E     MOV [W14+2], W5
012600  430285     ADD W6, W5, W5
012602  784A84     MOV.B W4, [W5]
012604  90021E     MOV [W14+2], W4
012606  E80204     INC W4, W4
012608  980714     MOV W4, [W14+2]
17969:             
17970:                 Tmp=(unsigned int)V16;                                  //V16        58
01260A  8216B4     MOV V16, W4
01260C  8216C5     MOV 0x42D8, W5
01260E  780F04     MOV W4, [W14]
17971:                 HC05TrmMass[CntBt++]=Tmp;
012610  78021E     MOV [W14], W4
012612  784204     MOV.B W4, W4
012614  230CE6     MOV #0x30CE, W6
012616  90029E     MOV [W14+2], W5
012618  430285     ADD W6, W5, W5
01261A  784A84     MOV.B W4, [W5]
01261C  90021E     MOV [W14+2], W4
01261E  E80204     INC W4, W4
012620  980714     MOV W4, [W14+2]
17972:                 HC05TrmMass[CntBt++]=Tmp>>8;
012622  78021E     MOV [W14], W4
012624  DEA248     ASR W4, #8, W4
012626  784204     MOV.B W4, W4
012628  230CE6     MOV #0x30CE, W6
01262A  90029E     MOV [W14+2], W5
01262C  430285     ADD W6, W5, W5
01262E  784A84     MOV.B W4, [W5]
012630  90021E     MOV [W14+2], W4
012632  E80204     INC W4, W4
012634  980714     MOV W4, [W14+2]
17973:             
17974:                 Tmp=(unsigned int)V17;                                  //V16        59
012636  8216D4     MOV V17, W4
012638  8216E5     MOV 0x42DC, W5
01263A  780F04     MOV W4, [W14]
17975:                 HC05TrmMass[CntBt++]=Tmp;
01263C  78021E     MOV [W14], W4
01263E  784204     MOV.B W4, W4
012640  230CE6     MOV #0x30CE, W6
012642  90029E     MOV [W14+2], W5
012644  430285     ADD W6, W5, W5
012646  784A84     MOV.B W4, [W5]
012648  90021E     MOV [W14+2], W4
01264A  E80204     INC W4, W4
01264C  980714     MOV W4, [W14+2]
17976:                 HC05TrmMass[CntBt++]=Tmp>>8;
01264E  78021E     MOV [W14], W4
012650  DEA248     ASR W4, #8, W4
012652  784204     MOV.B W4, W4
012654  230CE6     MOV #0x30CE, W6
012656  90029E     MOV [W14+2], W5
012658  430285     ADD W6, W5, W5
01265A  784A84     MOV.B W4, [W5]
01265C  90021E     MOV [W14+2], W4
01265E  E80204     INC W4, W4
012660  980714     MOV W4, [W14+2]
17977:             
17978:                 Tmp=(unsigned int)V18;                                  //V16        60
012662  8216F4     MOV V18, W4
012664  821705     MOV 0x42E0, W5
012666  780F04     MOV W4, [W14]
17979:                 HC05TrmMass[CntBt++]=Tmp;
012668  78021E     MOV [W14], W4
01266A  784204     MOV.B W4, W4
01266C  230CE6     MOV #0x30CE, W6
01266E  90029E     MOV [W14+2], W5
012670  430285     ADD W6, W5, W5
012672  784A84     MOV.B W4, [W5]
012674  90021E     MOV [W14+2], W4
012676  E80204     INC W4, W4
012678  980714     MOV W4, [W14+2]
17980:                 HC05TrmMass[CntBt++]=Tmp>>8;
01267A  78021E     MOV [W14], W4
01267C  DEA248     ASR W4, #8, W4
01267E  784204     MOV.B W4, W4
012680  230CE6     MOV #0x30CE, W6
012682  90029E     MOV [W14+2], W5
012684  430285     ADD W6, W5, W5
012686  784A84     MOV.B W4, [W5]
012688  90021E     MOV [W14+2], W4
01268A  E80204     INC W4, W4
01268C  980714     MOV W4, [W14+2]
17981:             
17982:             
17983:              //   Tmp=BatteryKeys;                                        //BatteryKeys        61
17984:                 HC05TrmMass[CntBt++]=BatteryKeys;
01268E  81BC94     MOV BatteryKeys, W4
012690  81BCA5     MOV 0x3794, W5
012692  784204     MOV.B W4, W4
012694  230CE6     MOV #0x30CE, W6
012696  90029E     MOV [W14+2], W5
012698  430285     ADD W6, W5, W5
01269A  784A84     MOV.B W4, [W5]
01269C  90021E     MOV [W14+2], W4
01269E  E80204     INC W4, W4
0126A0  980714     MOV W4, [W14+2]
17985:                 HC05TrmMass[CntBt++]=BatteryKeys>>8;
0126A2  81BC94     MOV BatteryKeys, W4
0126A4  81BCA5     MOV 0x3794, W5
0126A6  DD2B48     SL W5, #8, W6
0126A8  DE2248     LSR W4, #8, W4
0126AA  730204     IOR W6, W4, W4
0126AC  DE2AC8     LSR W5, #8, W5
0126AE  784204     MOV.B W4, W4
0126B0  230CE6     MOV #0x30CE, W6
0126B2  90029E     MOV [W14+2], W5
0126B4  430285     ADD W6, W5, W5
0126B6  784A84     MOV.B W4, [W5]
0126B8  90021E     MOV [W14+2], W4
0126BA  E80204     INC W4, W4
0126BC  980714     MOV W4, [W14+2]
17986:                 HC05TrmMass[CntBt++]=BatteryKeys>>16;
0126BE  81BC94     MOV BatteryKeys, W4
0126C0  81BCA5     MOV 0x3794, W5
0126C2  DE2A40     LSR W5, #0, W4
0126C4  200005     MOV #0x0, W5
0126C6  784204     MOV.B W4, W4
0126C8  230CE6     MOV #0x30CE, W6
0126CA  90029E     MOV [W14+2], W5
0126CC  430285     ADD W6, W5, W5
0126CE  784A84     MOV.B W4, [W5]
0126D0  90021E     MOV [W14+2], W4
0126D2  E80204     INC W4, W4
0126D4  980714     MOV W4, [W14+2]
17987:                 HC05TrmMass[CntBt++]=BatteryKeys>>24;
0126D6  81BC94     MOV BatteryKeys, W4
0126D8  81BCA5     MOV 0x3794, W5
0126DA  DE2A48     LSR W5, #8, W4
0126DC  200005     MOV #0x0, W5
0126DE  784204     MOV.B W4, W4
0126E0  230CE6     MOV #0x30CE, W6
0126E2  90029E     MOV [W14+2], W5
0126E4  430285     ADD W6, W5, W5
0126E6  784A84     MOV.B W4, [W5]
0126E8  90021E     MOV [W14+2], W4
0126EA  E80204     INC W4, W4
0126EC  980714     MOV W4, [W14+2]
17988:             
17989:                 HC05TrmMass[CntBt++]=ChagerKeys;                        //ChagerKeys        62
0126EE  237964     MOV #0x3796, W4
0126F0  784214     MOV.B [W4], W4
0126F2  230CE6     MOV #0x30CE, W6
0126F4  90029E     MOV [W14+2], W5
0126F6  430285     ADD W6, W5, W5
0126F8  784A84     MOV.B W4, [W5]
0126FA  90021E     MOV [W14+2], W4
0126FC  E80204     INC W4, W4
0126FE  980714     MOV W4, [W14+2]
17990:             
17991:                 HC05TrmMass[CntBt++]=(int)AccXFl;//Fl;                        //AccXFl        63
012700  80BD54     MOV AccXFl, W4
012702  784204     MOV.B W4, W4
012704  230CE6     MOV #0x30CE, W6
012706  90029E     MOV [W14+2], W5
012708  430285     ADD W6, W5, W5
01270A  784A84     MOV.B W4, [W5]
01270C  90021E     MOV [W14+2], W4
01270E  E80204     INC W4, W4
012710  980714     MOV W4, [W14+2]
17992:                 HC05TrmMass[CntBt++]=(int)AccXFl>>8;//Fl;
012712  80BD54     MOV AccXFl, W4
012714  DEA248     ASR W4, #8, W4
012716  784204     MOV.B W4, W4
012718  230CE6     MOV #0x30CE, W6
01271A  90029E     MOV [W14+2], W5
01271C  430285     ADD W6, W5, W5
01271E  784A84     MOV.B W4, [W5]
012720  90021E     MOV [W14+2], W4
012722  E80204     INC W4, W4
012724  980714     MOV W4, [W14+2]
17993:             
17994:                 HC05TrmMass[CntBt++]=(int)AccYFl;//Fl;                        //AccYFl        64
012726  80BD64     MOV AccYFl, W4
012728  784204     MOV.B W4, W4
01272A  230CE6     MOV #0x30CE, W6
01272C  90029E     MOV [W14+2], W5
01272E  430285     ADD W6, W5, W5
012730  784A84     MOV.B W4, [W5]
012732  90021E     MOV [W14+2], W4
012734  E80204     INC W4, W4
012736  980714     MOV W4, [W14+2]
17995:                 HC05TrmMass[CntBt++]=(int)AccYFl>>8;
012738  80BD64     MOV AccYFl, W4
01273A  DEA248     ASR W4, #8, W4
01273C  784204     MOV.B W4, W4
01273E  230CE6     MOV #0x30CE, W6
012740  90029E     MOV [W14+2], W5
012742  430285     ADD W6, W5, W5
012744  784A84     MOV.B W4, [W5]
012746  90021E     MOV [W14+2], W4
012748  E80204     INC W4, W4
01274A  980714     MOV W4, [W14+2]
17996:                 
17997:                 HC05TrmMass[CntBt++]=(int)AccZFl;//Fl;                        //AccZFl        65
01274C  80BD74     MOV AccZFl, W4
01274E  784204     MOV.B W4, W4
012750  230CE6     MOV #0x30CE, W6
012752  90029E     MOV [W14+2], W5
012754  430285     ADD W6, W5, W5
012756  784A84     MOV.B W4, [W5]
012758  90021E     MOV [W14+2], W4
01275A  E80204     INC W4, W4
01275C  980714     MOV W4, [W14+2]
17998:                 HC05TrmMass[CntBt++]=(int)AccZFl>>8;
01275E  80BD74     MOV AccZFl, W4
012760  DEA248     ASR W4, #8, W4
012762  784204     MOV.B W4, W4
012764  230CE6     MOV #0x30CE, W6
012766  90029E     MOV [W14+2], W5
012768  430285     ADD W6, W5, W5
01276A  784A84     MOV.B W4, [W5]
01276C  90021E     MOV [W14+2], W4
01276E  E80204     INC W4, W4
012770  980714     MOV W4, [W14+2]
17999:                 
18000:                 HC05TrmMass[CntBt++]=Sensor1_Prev;                     //Sensor1_Prev        66
012772  212474     MOV #0x1247, W4
012774  784214     MOV.B [W4], W4
012776  230CE6     MOV #0x30CE, W6
012778  90029E     MOV [W14+2], W5
01277A  430285     ADD W6, W5, W5
01277C  784A84     MOV.B W4, [W5]
01277E  90021E     MOV [W14+2], W4
012780  E80204     INC W4, W4
012782  980714     MOV W4, [W14+2]
18001:                 HC05TrmMass[CntBt++]=Sensor2_Prev;                     //Sensor1_Prev        67
012784  2124D4     MOV #0x124D, W4
012786  784214     MOV.B [W4], W4
012788  230CE6     MOV #0x30CE, W6
01278A  90029E     MOV [W14+2], W5
01278C  430285     ADD W6, W5, W5
01278E  784A84     MOV.B W4, [W5]
012790  90021E     MOV [W14+2], W4
012792  E80204     INC W4, W4
012794  980714     MOV W4, [W14+2]
18002:             
18003:                 Tmp=(int)(Temperature4*10);                            //        68
012796  8201D4     MOV Temperature4, W4
012798  8201E5     MOV 0x403C, W5
01279A  200002     MOV #0x0, W2
01279C  241203     MOV #0x4120, W3
01279E  BE0004     MOV.D W4, W0
0127A0  022630     CALL ___mulsf3
0127A2  000000     NOP
0127A4  BE0200     MOV.D W0, W4
0127A6  BE0004     MOV.D W4, W0
0127A8  022504     CALL ___fixsfsi
0127AA  000000     NOP
0127AC  BE0200     MOV.D W0, W4
0127AE  780F04     MOV W4, [W14]
18004:                 HC05TrmMass[CntBt++]=Tmp;
0127B0  78021E     MOV [W14], W4
0127B2  784204     MOV.B W4, W4
0127B4  230CE6     MOV #0x30CE, W6
0127B6  90029E     MOV [W14+2], W5
0127B8  430285     ADD W6, W5, W5
0127BA  784A84     MOV.B W4, [W5]
0127BC  90021E     MOV [W14+2], W4
0127BE  E80204     INC W4, W4
0127C0  980714     MOV W4, [W14+2]
18005:                 HC05TrmMass[CntBt++]=Tmp>>8;
0127C2  78021E     MOV [W14], W4
0127C4  DEA248     ASR W4, #8, W4
0127C6  784204     MOV.B W4, W4
0127C8  230CE6     MOV #0x30CE, W6
0127CA  90029E     MOV [W14+2], W5
0127CC  430285     ADD W6, W5, W5
0127CE  784A84     MOV.B W4, [W5]
0127D0  90021E     MOV [W14+2], W4
0127D2  E80204     INC W4, W4
0127D4  980714     MOV W4, [W14+2]
18006:             
18007:             
18008:                 HC05TrmMass[CntBt++]=Distance;               //Odometr;        69
0127D6  81B8A4     MOV Distance, W4
0127D8  81B8B5     MOV 0x3716, W5
0127DA  784204     MOV.B W4, W4
0127DC  230CE6     MOV #0x30CE, W6
0127DE  90029E     MOV [W14+2], W5
0127E0  430285     ADD W6, W5, W5
0127E2  784A84     MOV.B W4, [W5]
0127E4  90021E     MOV [W14+2], W4
0127E6  E80204     INC W4, W4
0127E8  980714     MOV W4, [W14+2]
18009:                 HC05TrmMass[CntBt++]=Distance>>8;
0127EA  81B8A4     MOV Distance, W4
0127EC  81B8B5     MOV 0x3716, W5
0127EE  DD2B48     SL W5, #8, W6
0127F0  DE2248     LSR W4, #8, W4
0127F2  730204     IOR W6, W4, W4
0127F4  DE2AC8     LSR W5, #8, W5
0127F6  784204     MOV.B W4, W4
0127F8  230CE6     MOV #0x30CE, W6
0127FA  90029E     MOV [W14+2], W5
0127FC  430285     ADD W6, W5, W5
0127FE  784A84     MOV.B W4, [W5]
012800  90021E     MOV [W14+2], W4
012802  E80204     INC W4, W4
012804  980714     MOV W4, [W14+2]
18010:                 HC05TrmMass[CntBt++]=Distance>>16;
012806  81B8A4     MOV Distance, W4
012808  81B8B5     MOV 0x3716, W5
01280A  DE2A40     LSR W5, #0, W4
01280C  200005     MOV #0x0, W5
01280E  784204     MOV.B W4, W4
012810  230CE6     MOV #0x30CE, W6
012812  90029E     MOV [W14+2], W5
012814  430285     ADD W6, W5, W5
012816  784A84     MOV.B W4, [W5]
012818  90021E     MOV [W14+2], W4
01281A  E80204     INC W4, W4
01281C  980714     MOV W4, [W14+2]
18011:                 HC05TrmMass[CntBt++]=Distance>>24;
01281E  81B8A4     MOV Distance, W4
012820  81B8B5     MOV 0x3716, W5
012822  DE2A48     LSR W5, #8, W4
012824  200005     MOV #0x0, W5
012826  784204     MOV.B W4, W4
012828  230CE6     MOV #0x30CE, W6
01282A  90029E     MOV [W14+2], W5
01282C  430285     ADD W6, W5, W5
01282E  784A84     MOV.B W4, [W5]
012830  90021E     MOV [W14+2], W4
012832  E80204     INC W4, W4
012834  980714     MOV W4, [W14+2]
18012:             
18013:             
18014:                 Tmp=ProtectValue;                               //StatFlgs.StatusFlags;        70
012836  820634     MOV ProtectValue, W4
012838  780F04     MOV W4, [W14]
18015:                 HC05TrmMass[CntBt++]=Tmp;
01283A  78021E     MOV [W14], W4
01283C  784204     MOV.B W4, W4
01283E  230CE6     MOV #0x30CE, W6
012840  90029E     MOV [W14+2], W5
012842  430285     ADD W6, W5, W5
012844  784A84     MOV.B W4, [W5]
012846  90021E     MOV [W14+2], W4
012848  E80204     INC W4, W4
01284A  980714     MOV W4, [W14+2]
18016:                 HC05TrmMass[CntBt++]=Tmp>>8;
01284C  78021E     MOV [W14], W4
01284E  DEA248     ASR W4, #8, W4
012850  784204     MOV.B W4, W4
012852  230CE6     MOV #0x30CE, W6
012854  90029E     MOV [W14+2], W5
012856  430285     ADD W6, W5, W5
012858  784A84     MOV.B W4, [W5]
01285A  90021E     MOV [W14+2], W4
01285C  E80204     INC W4, W4
01285E  980714     MOV W4, [W14+2]
18017:             
18018:                 HC05TrmMass[CntBt++]=Temperature;            //Temperature                  71
012860  230844     MOV #0x3084, W4
012862  784214     MOV.B [W4], W4
012864  230CE6     MOV #0x30CE, W6
012866  90029E     MOV [W14+2], W5
012868  430285     ADD W6, W5, W5
01286A  784A84     MOV.B W4, [W5]
01286C  90021E     MOV [W14+2], W4
01286E  E80204     INC W4, W4
012870  980714     MOV W4, [W14+2]
18019:             
18020:                 HC05TrmMass[CntBt++]=0;            //                       EMPTY !!!!!!                  72
012872  230CE5     MOV #0x30CE, W5
012874  90021E     MOV [W14+2], W4
012876  428284     ADD W5, W4, W5
012878  EB4200     CLR.B W4
01287A  784A84     MOV.B W4, [W5]
01287C  90021E     MOV [W14+2], W4
01287E  E80204     INC W4, W4
012880  980714     MOV W4, [W14+2]
18021:             
18022:                 HC05TrmMass[CntBt++]=KAccGyroSteer;            //KAccGyroSteer                  73
012882  237DC4     MOV #0x37DC, W4
012884  784214     MOV.B [W4], W4
012886  230CE6     MOV #0x30CE, W6
012888  90029E     MOV [W14+2], W5
01288A  430285     ADD W6, W5, W5
01288C  784A84     MOV.B W4, [W5]
01288E  90021E     MOV [W14+2], W4
012890  E80204     INC W4, W4
012892  980714     MOV W4, [W14+2]
18023:             
18024:             
18025:                 Tmp=(int)GyroXFl;//CurrControlPIRes;//PDC1;                               //GyroXFl;        74
012894  80C0E4     MOV GyroXFl, W4
012896  80C0F5     MOV 0x181E, W5
012898  BE0004     MOV.D W4, W0
01289A  022504     CALL ___fixsfsi
01289C  000000     NOP
01289E  BE0200     MOV.D W0, W4
0128A0  780F04     MOV W4, [W14]
18026:                 HC05TrmMass[CntBt++]=Tmp;
0128A2  78021E     MOV [W14], W4
0128A4  784204     MOV.B W4, W4
0128A6  230CE6     MOV #0x30CE, W6
0128A8  90029E     MOV [W14+2], W5
0128AA  430285     ADD W6, W5, W5
0128AC  784A84     MOV.B W4, [W5]
0128AE  90021E     MOV [W14+2], W4
0128B0  E80204     INC W4, W4
0128B2  980714     MOV W4, [W14+2]
18027:                 HC05TrmMass[CntBt++]=Tmp>>8;
0128B4  78021E     MOV [W14], W4
0128B6  DEA248     ASR W4, #8, W4
0128B8  784204     MOV.B W4, W4
0128BA  230CE6     MOV #0x30CE, W6
0128BC  90029E     MOV [W14+2], W5
0128BE  430285     ADD W6, W5, W5
0128C0  784A84     MOV.B W4, [W5]
0128C2  90021E     MOV [W14+2], W4
0128C4  E80204     INC W4, W4
0128C6  980714     MOV W4, [W14+2]
18028:             
18029:                 Tmp=(int)GyroYFl;//EPID_Res;//PDC2;                               //GyroYFl;        75
0128C8  80C104     MOV GyroYFl, W4
0128CA  80C115     MOV 0x1822, W5
0128CC  BE0004     MOV.D W4, W0
0128CE  022504     CALL ___fixsfsi
0128D0  000000     NOP
0128D2  BE0200     MOV.D W0, W4
0128D4  780F04     MOV W4, [W14]
18030:                 HC05TrmMass[CntBt++]=Tmp;
0128D6  78021E     MOV [W14], W4
0128D8  784204     MOV.B W4, W4
0128DA  230CE6     MOV #0x30CE, W6
0128DC  90029E     MOV [W14+2], W5
0128DE  430285     ADD W6, W5, W5
0128E0  784A84     MOV.B W4, [W5]
0128E2  90021E     MOV [W14+2], W4
0128E4  E80204     INC W4, W4
0128E6  980714     MOV W4, [W14+2]
18031:                 HC05TrmMass[CntBt++]=Tmp>>8;
0128E8  78021E     MOV [W14], W4
0128EA  DEA248     ASR W4, #8, W4
0128EC  784204     MOV.B W4, W4
0128EE  230CE6     MOV #0x30CE, W6
0128F0  90029E     MOV [W14+2], W5
0128F2  430285     ADD W6, W5, W5
0128F4  784A84     MOV.B W4, [W5]
0128F6  90021E     MOV [W14+2], W4
0128F8  E80204     INC W4, W4
0128FA  980714     MOV W4, [W14+2]
18032:             
18033:                 Tmp=(int)GyroZFl;//PDC3;                                   //GyroZFl;        76
0128FC  80C124     MOV GyroZFl, W4
0128FE  80C135     MOV 0x1826, W5
012900  BE0004     MOV.D W4, W0
012902  022504     CALL ___fixsfsi
012904  000000     NOP
012906  BE0200     MOV.D W0, W4
012908  780F04     MOV W4, [W14]
18034:                 HC05TrmMass[CntBt++]=Tmp;
01290A  78021E     MOV [W14], W4
01290C  784204     MOV.B W4, W4
01290E  230CE6     MOV #0x30CE, W6
012910  90029E     MOV [W14+2], W5
012912  430285     ADD W6, W5, W5
012914  784A84     MOV.B W4, [W5]
012916  90021E     MOV [W14+2], W4
012918  E80204     INC W4, W4
01291A  980714     MOV W4, [W14+2]
18035:                 HC05TrmMass[CntBt++]=Tmp>>8;
01291C  78021E     MOV [W14], W4
01291E  DEA248     ASR W4, #8, W4
012920  784204     MOV.B W4, W4
012922  230CE6     MOV #0x30CE, W6
012924  90029E     MOV [W14+2], W5
012926  430285     ADD W6, W5, W5
012928  784A84     MOV.B W4, [W5]
01292A  90021E     MOV [W14+2], W4
01292C  E80204     INC W4, W4
01292E  980714     MOV W4, [W14+2]
18036:             
18037:                 Tmp=(int)ESumm;//Theta1CntPWMSND;                               //Ed;        77
012930  809B84     MOV ESumm, W4
012932  809B95     MOV 0x1372, W5
012934  BE0004     MOV.D W4, W0
012936  022504     CALL ___fixsfsi
012938  000000     NOP
01293A  BE0200     MOV.D W0, W4
01293C  780F04     MOV W4, [W14]
18038:                 HC05TrmMass[CntBt++]=Tmp;
01293E  78021E     MOV [W14], W4
012940  784204     MOV.B W4, W4
012942  230CE6     MOV #0x30CE, W6
012944  90029E     MOV [W14+2], W5
012946  430285     ADD W6, W5, W5
012948  784A84     MOV.B W4, [W5]
01294A  90021E     MOV [W14+2], W4
01294C  E80204     INC W4, W4
01294E  980714     MOV W4, [W14+2]
18039:                 HC05TrmMass[CntBt++]=Tmp>>8;
012950  78021E     MOV [W14], W4
012952  DEA248     ASR W4, #8, W4
012954  784204     MOV.B W4, W4
012956  230CE6     MOV #0x30CE, W6
012958  90029E     MOV [W14+2], W5
01295A  430285     ADD W6, W5, W5
01295C  784A84     MOV.B W4, [W5]
01295E  90021E     MOV [W14+2], W4
012960  E80204     INC W4, W4
012962  980714     MOV W4, [W14+2]
18040:             
18041:                 Tmp=(int)GyroYAv;                               //GyroYAv;        78
012964  80B5D4     MOV GyroYAv, W4
012966  80B5E5     MOV 0x16BC, W5
012968  780F04     MOV W4, [W14]
18042:                 HC05TrmMass[CntBt++]=Tmp;
01296A  78021E     MOV [W14], W4
01296C  784204     MOV.B W4, W4
01296E  230CE6     MOV #0x30CE, W6
012970  90029E     MOV [W14+2], W5
012972  430285     ADD W6, W5, W5
012974  784A84     MOV.B W4, [W5]
012976  90021E     MOV [W14+2], W4
012978  E80204     INC W4, W4
01297A  980714     MOV W4, [W14+2]
18043:                 HC05TrmMass[CntBt++]=Tmp>>8;
01297C  78021E     MOV [W14], W4
01297E  DEA248     ASR W4, #8, W4
012980  784204     MOV.B W4, W4
012982  230CE6     MOV #0x30CE, W6
012984  90029E     MOV [W14+2], W5
012986  430285     ADD W6, W5, W5
012988  784A84     MOV.B W4, [W5]
01298A  90021E     MOV [W14+2], W4
01298C  E80204     INC W4, W4
01298E  980714     MOV W4, [W14+2]
18044:             
18045:                 Tmp=(int)(Kd/100);                               //Kd;        79
012990  821334     MOV Kd, W4
012992  821345     MOV 0x4268, W5
012994  200002     MOV #0x0, W2
012996  242C83     MOV #0x42C8, W3
012998  BE0004     MOV.D W4, W0
01299A  02245A     CALL ___divsf3
01299C  000000     NOP
01299E  BE0200     MOV.D W0, W4
0129A0  BE0004     MOV.D W4, W0
0129A2  022504     CALL ___fixsfsi
0129A4  000000     NOP
0129A6  BE0200     MOV.D W0, W4
0129A8  780F04     MOV W4, [W14]
18046:                 HC05TrmMass[CntBt++]=Tmp;
0129AA  78021E     MOV [W14], W4
0129AC  784204     MOV.B W4, W4
0129AE  230CE6     MOV #0x30CE, W6
0129B0  90029E     MOV [W14+2], W5
0129B2  430285     ADD W6, W5, W5
0129B4  784A84     MOV.B W4, [W5]
0129B6  90021E     MOV [W14+2], W4
0129B8  E80204     INC W4, W4
0129BA  980714     MOV W4, [W14+2]
18047:                 HC05TrmMass[CntBt++]=Tmp>>8;
0129BC  78021E     MOV [W14], W4
0129BE  DEA248     ASR W4, #8, W4
0129C0  784204     MOV.B W4, W4
0129C2  230CE6     MOV #0x30CE, W6
0129C4  90029E     MOV [W14+2], W5
0129C6  430285     ADD W6, W5, W5
0129C8  784A84     MOV.B W4, [W5]
0129CA  90021E     MOV [W14+2], W4
0129CC  E80204     INC W4, W4
0129CE  980714     MOV W4, [W14+2]
18048:             
18049:                 Tmp=TS4;                               //Kd;        80
0129D0  8217C4     MOV TS4, W4
0129D2  780F04     MOV W4, [W14]
18050:                 HC05TrmMass[CntBt++]=Tmp;
0129D4  78021E     MOV [W14], W4
0129D6  784204     MOV.B W4, W4
0129D8  230CE6     MOV #0x30CE, W6
0129DA  90029E     MOV [W14+2], W5
0129DC  430285     ADD W6, W5, W5
0129DE  784A84     MOV.B W4, [W5]
0129E0  90021E     MOV [W14+2], W4
0129E2  E80204     INC W4, W4
0129E4  980714     MOV W4, [W14+2]
18051:                 HC05TrmMass[CntBt++]=Tmp>>8;
0129E6  78021E     MOV [W14], W4
0129E8  DEA248     ASR W4, #8, W4
0129EA  784204     MOV.B W4, W4
0129EC  230CE6     MOV #0x30CE, W6
0129EE  90029E     MOV [W14+2], W5
0129F0  430285     ADD W6, W5, W5
0129F2  784A84     MOV.B W4, [W5]
0129F4  90021E     MOV [W14+2], W4
0129F6  E80204     INC W4, W4
0129F8  980714     MOV W4, [W14+2]
18052:             
18053:             
18054:                 HC05TrmMass[CntBt++]=PhasesCnt2;               //PhasesCnt2;        81
0129FA  8183A4     MOV PhasesCnt2, W4
0129FC  8183B5     MOV 0x3076, W5
0129FE  784204     MOV.B W4, W4
012A00  230CE6     MOV #0x30CE, W6
012A02  90029E     MOV [W14+2], W5
012A04  430285     ADD W6, W5, W5
012A06  784A84     MOV.B W4, [W5]
012A08  90021E     MOV [W14+2], W4
012A0A  E80204     INC W4, W4
012A0C  980714     MOV W4, [W14+2]
18055:                 HC05TrmMass[CntBt++]=PhasesCnt2>>8;
012A0E  8183A4     MOV PhasesCnt2, W4
012A10  8183B5     MOV 0x3076, W5
012A12  DD2B48     SL W5, #8, W6
012A14  DE2248     LSR W4, #8, W4
012A16  730204     IOR W6, W4, W4
012A18  DE2AC8     LSR W5, #8, W5
012A1A  784204     MOV.B W4, W4
012A1C  230CE6     MOV #0x30CE, W6
012A1E  90029E     MOV [W14+2], W5
012A20  430285     ADD W6, W5, W5
012A22  784A84     MOV.B W4, [W5]
012A24  90021E     MOV [W14+2], W4
012A26  E80204     INC W4, W4
012A28  980714     MOV W4, [W14+2]
18056:                 HC05TrmMass[CntBt++]=PhasesCnt2>>16;
012A2A  8183A4     MOV PhasesCnt2, W4
012A2C  8183B5     MOV 0x3076, W5
012A2E  DE2A40     LSR W5, #0, W4
012A30  200005     MOV #0x0, W5
012A32  784204     MOV.B W4, W4
012A34  230CE6     MOV #0x30CE, W6
012A36  90029E     MOV [W14+2], W5
012A38  430285     ADD W6, W5, W5
012A3A  784A84     MOV.B W4, [W5]
012A3C  90021E     MOV [W14+2], W4
012A3E  E80204     INC W4, W4
012A40  980714     MOV W4, [W14+2]
18057:                 HC05TrmMass[CntBt++]=PhasesCnt2>>24;
012A42  8183A4     MOV PhasesCnt2, W4
012A44  8183B5     MOV 0x3076, W5
012A46  DE2A48     LSR W5, #8, W4
012A48  200005     MOV #0x0, W5
012A4A  784204     MOV.B W4, W4
012A4C  230CE6     MOV #0x30CE, W6
012A4E  90029E     MOV [W14+2], W5
012A50  430285     ADD W6, W5, W5
012A52  784A84     MOV.B W4, [W5]
012A54  90021E     MOV [W14+2], W4
012A56  E80204     INC W4, W4
012A58  980714     MOV W4, [W14+2]
18058:             
18059:             
18060:                 Tmp=(int)Spd1Fl;                               //Spd1Fl;        82
012A5A  81C364     MOV Spd1Fl, W4
012A5C  81C375     MOV 0x386E, W5
012A5E  BE0004     MOV.D W4, W0
012A60  022504     CALL ___fixsfsi
012A62  000000     NOP
012A64  BE0200     MOV.D W0, W4
012A66  780F04     MOV W4, [W14]
18061:                 HC05TrmMass[CntBt++]=Tmp;
012A68  78021E     MOV [W14], W4
012A6A  784204     MOV.B W4, W4
012A6C  230CE6     MOV #0x30CE, W6
012A6E  90029E     MOV [W14+2], W5
012A70  430285     ADD W6, W5, W5
012A72  784A84     MOV.B W4, [W5]
012A74  90021E     MOV [W14+2], W4
012A76  E80204     INC W4, W4
012A78  980714     MOV W4, [W14+2]
18062:                 HC05TrmMass[CntBt++]=Tmp>>8;
012A7A  78021E     MOV [W14], W4
012A7C  DEA248     ASR W4, #8, W4
012A7E  784204     MOV.B W4, W4
012A80  230CE6     MOV #0x30CE, W6
012A82  90029E     MOV [W14+2], W5
012A84  430285     ADD W6, W5, W5
012A86  784A84     MOV.B W4, [W5]
012A88  90021E     MOV [W14+2], W4
012A8A  E80204     INC W4, W4
012A8C  980714     MOV W4, [W14+2]
18063:             
18064:                 Tmp=0;//(int)(Temperature5*10);//                 EMPTY                         83
012A8E  EB0200     CLR W4
012A90  780F04     MOV W4, [W14]
18065:                 HC05TrmMass[CntBt++]=Tmp;
012A92  78021E     MOV [W14], W4
012A94  784204     MOV.B W4, W4
012A96  230CE6     MOV #0x30CE, W6
012A98  90029E     MOV [W14+2], W5
012A9A  430285     ADD W6, W5, W5
012A9C  784A84     MOV.B W4, [W5]
012A9E  90021E     MOV [W14+2], W4
012AA0  E80204     INC W4, W4
012AA2  980714     MOV W4, [W14+2]
18066:                 HC05TrmMass[CntBt++]=Tmp>>8;
012AA4  78021E     MOV [W14], W4
012AA6  DEA248     ASR W4, #8, W4
012AA8  784204     MOV.B W4, W4
012AAA  230CE6     MOV #0x30CE, W6
012AAC  90029E     MOV [W14+2], W5
012AAE  430285     ADD W6, W5, W5
012AB0  784A84     MOV.B W4, [W5]
012AB2  90021E     MOV [W14+2], W4
012AB4  E80204     INC W4, W4
012AB6  980714     MOV W4, [W14+2]
18067:             
18068:                 Tmp=(int)TiltZadAdd;//(int)(Temperature6*10);       //                 84
012AB8  8155F4     MOV TiltZadAdd, W4
012ABA  815605     MOV 0x2AC0, W5
012ABC  BE0004     MOV.D W4, W0
012ABE  022504     CALL ___fixsfsi
012AC0  000000     NOP
012AC2  BE0200     MOV.D W0, W4
012AC4  780F04     MOV W4, [W14]
18069:                 HC05TrmMass[CntBt++]=Tmp;
012AC6  78021E     MOV [W14], W4
012AC8  784204     MOV.B W4, W4
012ACA  230CE6     MOV #0x30CE, W6
012ACC  90029E     MOV [W14+2], W5
012ACE  430285     ADD W6, W5, W5
012AD0  784A84     MOV.B W4, [W5]
012AD2  90021E     MOV [W14+2], W4
012AD4  E80204     INC W4, W4
012AD6  980714     MOV W4, [W14+2]
18070:                 HC05TrmMass[CntBt++]=Tmp>>8;
012AD8  78021E     MOV [W14], W4
012ADA  DEA248     ASR W4, #8, W4
012ADC  784204     MOV.B W4, W4
012ADE  230CE6     MOV #0x30CE, W6
012AE0  90029E     MOV [W14+2], W5
012AE2  430285     ADD W6, W5, W5
012AE4  784A84     MOV.B W4, [W5]
012AE6  90021E     MOV [W14+2], W4
012AE8  E80204     INC W4, W4
012AEA  980714     MOV W4, [W14+2]
18071:             
18072:                 unsigned long int tt=PI_Temperature;
012AEC  820374     MOV PI_Temperature, W4
012AEE  820385     MOV 0x4070, W5
012AF0  BE0004     MOV.D W4, W0
012AF2  022546     CALL ___fixunssfsi
012AF4  000000     NOP
012AF6  BE0200     MOV.D W0, W4
012AF8  980724     MOV W4, [W14+4]
012AFA  980735     MOV W5, [W14+6]
18073:                 HC05TrmMass[CntBt++]=tt;               //Phase1Period1;        85
012AFC  90022E     MOV [W14+4], W4
012AFE  784204     MOV.B W4, W4
012B00  230CE6     MOV #0x30CE, W6
012B02  90029E     MOV [W14+2], W5
012B04  430285     ADD W6, W5, W5
012B06  784A84     MOV.B W4, [W5]
012B08  90021E     MOV [W14+2], W4
012B0A  E80204     INC W4, W4
012B0C  980714     MOV W4, [W14+2]
18074:                 HC05TrmMass[CntBt++]=tt>>8;
012B0E  90022E     MOV [W14+4], W4
012B10  9002BE     MOV [W14+6], W5
012B12  DD2B48     SL W5, #8, W6
012B14  DE2248     LSR W4, #8, W4
012B16  730204     IOR W6, W4, W4
012B18  DE2AC8     LSR W5, #8, W5
012B1A  784204     MOV.B W4, W4
012B1C  230CE6     MOV #0x30CE, W6
012B1E  90029E     MOV [W14+2], W5
012B20  430285     ADD W6, W5, W5
012B22  784A84     MOV.B W4, [W5]
012B24  90021E     MOV [W14+2], W4
012B26  E80204     INC W4, W4
012B28  980714     MOV W4, [W14+2]
18075:                 HC05TrmMass[CntBt++]=tt>>16;
012B2A  90022E     MOV [W14+4], W4
012B2C  9002BE     MOV [W14+6], W5
012B2E  DE2A40     LSR W5, #0, W4
012B30  200005     MOV #0x0, W5
012B32  784204     MOV.B W4, W4
012B34  230CE6     MOV #0x30CE, W6
012B36  90029E     MOV [W14+2], W5
012B38  430285     ADD W6, W5, W5
012B3A  784A84     MOV.B W4, [W5]
012B3C  90021E     MOV [W14+2], W4
012B3E  E80204     INC W4, W4
012B40  980714     MOV W4, [W14+2]
18076:                 HC05TrmMass[CntBt++]=tt>>24;
012B42  90022E     MOV [W14+4], W4
012B44  9002BE     MOV [W14+6], W5
012B46  DE2A48     LSR W5, #8, W4
012B48  200005     MOV #0x0, W5
012B4A  784204     MOV.B W4, W4
012B4C  230CE6     MOV #0x30CE, W6
012B4E  90029E     MOV [W14+2], W5
012B50  430285     ADD W6, W5, W5
012B52  784A84     MOV.B W4, [W5]
012B54  90021E     MOV [W14+2], W4
012B56  E80204     INC W4, W4
012B58  980714     MOV W4, [W14+2]
18077:             
18078:                 tt=TemperatureFETs*10;
012B5A  8202F4     MOV TemperatureFETs, W4
012B5C  820305     MOV 0x4060, W5
012B5E  200002     MOV #0x0, W2
012B60  241203     MOV #0x4120, W3
012B62  BE0004     MOV.D W4, W0
012B64  022630     CALL ___mulsf3
012B66  000000     NOP
012B68  BE0200     MOV.D W0, W4
012B6A  BE0004     MOV.D W4, W0
012B6C  022546     CALL ___fixunssfsi
012B6E  000000     NOP
012B70  BE0200     MOV.D W0, W4
012B72  980724     MOV W4, [W14+4]
012B74  980735     MOV W5, [W14+6]
18079:                 HC05TrmMass[CntBt++]=tt;               //Phase1Period2;        86
012B76  90022E     MOV [W14+4], W4
012B78  784204     MOV.B W4, W4
012B7A  230CE6     MOV #0x30CE, W6
012B7C  90029E     MOV [W14+2], W5
012B7E  430285     ADD W6, W5, W5
012B80  784A84     MOV.B W4, [W5]
012B82  90021E     MOV [W14+2], W4
012B84  E80204     INC W4, W4
012B86  980714     MOV W4, [W14+2]
18080:                 HC05TrmMass[CntBt++]=tt>>8;
012B88  90022E     MOV [W14+4], W4
012B8A  9002BE     MOV [W14+6], W5
012B8C  DD2B48     SL W5, #8, W6
012B8E  DE2248     LSR W4, #8, W4
012B90  730204     IOR W6, W4, W4
012B92  DE2AC8     LSR W5, #8, W5
012B94  784204     MOV.B W4, W4
012B96  230CE6     MOV #0x30CE, W6
012B98  90029E     MOV [W14+2], W5
012B9A  430285     ADD W6, W5, W5
012B9C  784A84     MOV.B W4, [W5]
012B9E  90021E     MOV [W14+2], W4
012BA0  E80204     INC W4, W4
012BA2  980714     MOV W4, [W14+2]
18081:                 HC05TrmMass[CntBt++]=tt>>16;
012BA4  90022E     MOV [W14+4], W4
012BA6  9002BE     MOV [W14+6], W5
012BA8  DE2A40     LSR W5, #0, W4
012BAA  200005     MOV #0x0, W5
012BAC  784204     MOV.B W4, W4
012BAE  230CE6     MOV #0x30CE, W6
012BB0  90029E     MOV [W14+2], W5
012BB2  430285     ADD W6, W5, W5
012BB4  784A84     MOV.B W4, [W5]
012BB6  90021E     MOV [W14+2], W4
012BB8  E80204     INC W4, W4
012BBA  980714     MOV W4, [W14+2]
18082:                 HC05TrmMass[CntBt++]=tt>>24;
012BBC  90022E     MOV [W14+4], W4
012BBE  9002BE     MOV [W14+6], W5
012BC0  DE2A48     LSR W5, #8, W4
012BC2  200005     MOV #0x0, W5
012BC4  784204     MOV.B W4, W4
012BC6  230CE6     MOV #0x30CE, W6
012BC8  90029E     MOV [W14+2], W5
012BCA  430285     ADD W6, W5, W5
012BCC  784A84     MOV.B W4, [W5]
012BCE  90021E     MOV [W14+2], W4
012BD0  E80204     INC W4, W4
012BD2  980714     MOV W4, [W14+2]
18083:             
18084:                 tt=(long int)EpTemperIN;//EpCurr1;//ADCThroottleZero;
012BD4  8202D4     MOV EpTemperIN, W4
012BD6  8202E5     MOV 0x405C, W5
012BD8  BE0004     MOV.D W4, W0
012BDA  022504     CALL ___fixsfsi
012BDC  000000     NOP
012BDE  BE0200     MOV.D W0, W4
012BE0  980724     MOV W4, [W14+4]
012BE2  980735     MOV W5, [W14+6]
18085:                 HC05TrmMass[CntBt++]=tt;               //Phase1Period3;        87
012BE4  90022E     MOV [W14+4], W4
012BE6  784204     MOV.B W4, W4
012BE8  230CE6     MOV #0x30CE, W6
012BEA  90029E     MOV [W14+2], W5
012BEC  430285     ADD W6, W5, W5
012BEE  784A84     MOV.B W4, [W5]
012BF0  90021E     MOV [W14+2], W4
012BF2  E80204     INC W4, W4
012BF4  980714     MOV W4, [W14+2]
18086:                 HC05TrmMass[CntBt++]=tt>>8;
012BF6  90022E     MOV [W14+4], W4
012BF8  9002BE     MOV [W14+6], W5
012BFA  DD2B48     SL W5, #8, W6
012BFC  DE2248     LSR W4, #8, W4
012BFE  730204     IOR W6, W4, W4
012C00  DE2AC8     LSR W5, #8, W5
012C02  784204     MOV.B W4, W4
012C04  230CE6     MOV #0x30CE, W6
012C06  90029E     MOV [W14+2], W5
012C08  430285     ADD W6, W5, W5
012C0A  784A84     MOV.B W4, [W5]
012C0C  90021E     MOV [W14+2], W4
012C0E  E80204     INC W4, W4
012C10  980714     MOV W4, [W14+2]
18087:                 HC05TrmMass[CntBt++]=tt>>16;
012C12  90022E     MOV [W14+4], W4
012C14  9002BE     MOV [W14+6], W5
012C16  DE2A40     LSR W5, #0, W4
012C18  200005     MOV #0x0, W5
012C1A  784204     MOV.B W4, W4
012C1C  230CE6     MOV #0x30CE, W6
012C1E  90029E     MOV [W14+2], W5
012C20  430285     ADD W6, W5, W5
012C22  784A84     MOV.B W4, [W5]
012C24  90021E     MOV [W14+2], W4
012C26  E80204     INC W4, W4
012C28  980714     MOV W4, [W14+2]
18088:                 HC05TrmMass[CntBt++]=tt>>24;
012C2A  90022E     MOV [W14+4], W4
012C2C  9002BE     MOV [W14+6], W5
012C2E  DE2A48     LSR W5, #8, W4
012C30  200005     MOV #0x0, W5
012C32  784204     MOV.B W4, W4
012C34  230CE6     MOV #0x30CE, W6
012C36  90029E     MOV [W14+2], W5
012C38  430285     ADD W6, W5, W5
012C3A  784A84     MOV.B W4, [W5]
012C3C  90021E     MOV [W14+2], W4
012C3E  E80204     INC W4, W4
012C40  980714     MOV W4, [W14+2]
18089:             
18090:                 tt=CntBEMF;
012C42  210FD4     MOV #0x10FD, W4
012C44  784214     MOV.B [W4], W4
012C46  FB8204     ZE W4, W4
012C48  200005     MOV #0x0, W5
012C4A  980724     MOV W4, [W14+4]
012C4C  980735     MOV W5, [W14+6]
18091:                 HC05TrmMass[CntBt++]=tt;               //Phase1Period4;        88
012C4E  90022E     MOV [W14+4], W4
012C50  784204     MOV.B W4, W4
012C52  230CE6     MOV #0x30CE, W6
012C54  90029E     MOV [W14+2], W5
012C56  430285     ADD W6, W5, W5
012C58  784A84     MOV.B W4, [W5]
012C5A  90021E     MOV [W14+2], W4
012C5C  E80204     INC W4, W4
012C5E  980714     MOV W4, [W14+2]
18092:                 HC05TrmMass[CntBt++]=tt>>8;
012C60  90022E     MOV [W14+4], W4
012C62  9002BE     MOV [W14+6], W5
012C64  DD2B48     SL W5, #8, W6
012C66  DE2248     LSR W4, #8, W4
012C68  730204     IOR W6, W4, W4
012C6A  DE2AC8     LSR W5, #8, W5
012C6C  784204     MOV.B W4, W4
012C6E  230CE6     MOV #0x30CE, W6
012C70  90029E     MOV [W14+2], W5
012C72  430285     ADD W6, W5, W5
012C74  784A84     MOV.B W4, [W5]
012C76  90021E     MOV [W14+2], W4
012C78  E80204     INC W4, W4
012C7A  980714     MOV W4, [W14+2]
18093:                 HC05TrmMass[CntBt++]=tt>>16;
012C7C  90022E     MOV [W14+4], W4
012C7E  9002BE     MOV [W14+6], W5
012C80  DE2A40     LSR W5, #0, W4
012C82  200005     MOV #0x0, W5
012C84  784204     MOV.B W4, W4
012C86  230CE6     MOV #0x30CE, W6
012C88  90029E     MOV [W14+2], W5
012C8A  430285     ADD W6, W5, W5
012C8C  784A84     MOV.B W4, [W5]
012C8E  90021E     MOV [W14+2], W4
012C90  E80204     INC W4, W4
012C92  980714     MOV W4, [W14+2]
18094:                 HC05TrmMass[CntBt++]=tt>>24;
012C94  90022E     MOV [W14+4], W4
012C96  9002BE     MOV [W14+6], W5
012C98  DE2A48     LSR W5, #8, W4
012C9A  200005     MOV #0x0, W5
012C9C  784204     MOV.B W4, W4
012C9E  230CE6     MOV #0x30CE, W6
012CA0  90029E     MOV [W14+2], W5
012CA2  430285     ADD W6, W5, W5
012CA4  784A84     MOV.B W4, [W5]
012CA6  90021E     MOV [W14+2], W4
012CA8  E80204     INC W4, W4
012CAA  980714     MOV W4, [W14+2]
18095:             
18096:                 tt=SensorLessTimerConst;
012CAC  8218A4     MOV SensorLessTimerConst, W4
012CAE  200005     MOV #0x0, W5
012CB0  980724     MOV W4, [W14+4]
012CB2  980735     MOV W5, [W14+6]
18097:                 HC05TrmMass[CntBt++]=tt;               //Phase1Period5;        89
012CB4  90022E     MOV [W14+4], W4
012CB6  784204     MOV.B W4, W4
012CB8  230CE6     MOV #0x30CE, W6
012CBA  90029E     MOV [W14+2], W5
012CBC  430285     ADD W6, W5, W5
012CBE  784A84     MOV.B W4, [W5]
012CC0  90021E     MOV [W14+2], W4
012CC2  E80204     INC W4, W4
012CC4  980714     MOV W4, [W14+2]
18098:                 HC05TrmMass[CntBt++]=tt>>8;
012CC6  90022E     MOV [W14+4], W4
012CC8  9002BE     MOV [W14+6], W5
012CCA  DD2B48     SL W5, #8, W6
012CCC  DE2248     LSR W4, #8, W4
012CCE  730204     IOR W6, W4, W4
012CD0  DE2AC8     LSR W5, #8, W5
012CD2  784204     MOV.B W4, W4
012CD4  230CE6     MOV #0x30CE, W6
012CD6  90029E     MOV [W14+2], W5
012CD8  430285     ADD W6, W5, W5
012CDA  784A84     MOV.B W4, [W5]
012CDC  90021E     MOV [W14+2], W4
012CDE  E80204     INC W4, W4
012CE0  980714     MOV W4, [W14+2]
18099:                 HC05TrmMass[CntBt++]=tt>>16;
012CE2  90022E     MOV [W14+4], W4
012CE4  9002BE     MOV [W14+6], W5
012CE6  DE2A40     LSR W5, #0, W4
012CE8  200005     MOV #0x0, W5
012CEA  784204     MOV.B W4, W4
012CEC  230CE6     MOV #0x30CE, W6
012CEE  90029E     MOV [W14+2], W5
012CF0  430285     ADD W6, W5, W5
012CF2  784A84     MOV.B W4, [W5]
012CF4  90021E     MOV [W14+2], W4
012CF6  E80204     INC W4, W4
012CF8  980714     MOV W4, [W14+2]
18100:                 HC05TrmMass[CntBt++]=tt>>24;
012CFA  90022E     MOV [W14+4], W4
012CFC  9002BE     MOV [W14+6], W5
012CFE  DE2A48     LSR W5, #8, W4
012D00  200005     MOV #0x0, W5
012D02  784204     MOV.B W4, W4
012D04  230CE6     MOV #0x30CE, W6
012D06  90029E     MOV [W14+2], W5
012D08  430285     ADD W6, W5, W5
012D0A  784A84     MOV.B W4, [W5]
012D0C  90021E     MOV [W14+2], W4
012D0E  E80204     INC W4, W4
012D10  980714     MOV W4, [W14+2]
18101:             
18102:                 tt=(long int)ESumm_PWM_Mode;//Spd1UST_Tmp;//DiffMixed;//CntAcqSensor;
012D12  809924     MOV ESumm_PWM_Mode, W4
012D14  809935     MOV 0x1326, W5
012D16  BE0004     MOV.D W4, W0
012D18  022504     CALL ___fixsfsi
012D1A  000000     NOP
012D1C  BE0200     MOV.D W0, W4
012D1E  980724     MOV W4, [W14+4]
012D20  980735     MOV W5, [W14+6]
18103:                 HC05TrmMass[CntBt++]=tt;               //Phase1Period6;        90
012D22  90022E     MOV [W14+4], W4
012D24  784204     MOV.B W4, W4
012D26  230CE6     MOV #0x30CE, W6
012D28  90029E     MOV [W14+2], W5
012D2A  430285     ADD W6, W5, W5
012D2C  784A84     MOV.B W4, [W5]
012D2E  90021E     MOV [W14+2], W4
012D30  E80204     INC W4, W4
012D32  980714     MOV W4, [W14+2]
18104:                 HC05TrmMass[CntBt++]=tt>>8;
012D34  90022E     MOV [W14+4], W4
012D36  9002BE     MOV [W14+6], W5
012D38  DD2B48     SL W5, #8, W6
012D3A  DE2248     LSR W4, #8, W4
012D3C  730204     IOR W6, W4, W4
012D3E  DE2AC8     LSR W5, #8, W5
012D40  784204     MOV.B W4, W4
012D42  230CE6     MOV #0x30CE, W6
012D44  90029E     MOV [W14+2], W5
012D46  430285     ADD W6, W5, W5
012D48  784A84     MOV.B W4, [W5]
012D4A  90021E     MOV [W14+2], W4
012D4C  E80204     INC W4, W4
012D4E  980714     MOV W4, [W14+2]
18105:                 HC05TrmMass[CntBt++]=tt>>16;
012D50  90022E     MOV [W14+4], W4
012D52  9002BE     MOV [W14+6], W5
012D54  DE2A40     LSR W5, #0, W4
012D56  200005     MOV #0x0, W5
012D58  784204     MOV.B W4, W4
012D5A  230CE6     MOV #0x30CE, W6
012D5C  90029E     MOV [W14+2], W5
012D5E  430285     ADD W6, W5, W5
012D60  784A84     MOV.B W4, [W5]
012D62  90021E     MOV [W14+2], W4
012D64  E80204     INC W4, W4
012D66  980714     MOV W4, [W14+2]
18106:                 HC05TrmMass[CntBt++]=tt>>24;
012D68  90022E     MOV [W14+4], W4
012D6A  9002BE     MOV [W14+6], W5
012D6C  DE2A48     LSR W5, #8, W4
012D6E  200005     MOV #0x0, W5
012D70  784204     MOV.B W4, W4
012D72  230CE6     MOV #0x30CE, W6
012D74  90029E     MOV [W14+2], W5
012D76  430285     ADD W6, W5, W5
012D78  784A84     MOV.B W4, [W5]
012D7A  90021E     MOV [W14+2], W4
012D7C  E80204     INC W4, W4
012D7E  980714     MOV W4, [W14+2]
18107:             
18108:                 Tmp=(int)(CurrUst);                                   //CurrUst      91  
012D80  81F494     MOV CurrUst, W4
012D82  780F04     MOV W4, [W14]
18109:                 HC05TrmMass[CntBt++]=Tmp;
012D84  78021E     MOV [W14], W4
012D86  784204     MOV.B W4, W4
012D88  230CE6     MOV #0x30CE, W6
012D8A  90029E     MOV [W14+2], W5
012D8C  430285     ADD W6, W5, W5
012D8E  784A84     MOV.B W4, [W5]
012D90  90021E     MOV [W14+2], W4
012D92  E80204     INC W4, W4
012D94  980714     MOV W4, [W14+2]
18110:                 HC05TrmMass[CntBt++]=Tmp>>8;
012D96  78021E     MOV [W14], W4
012D98  DEA248     ASR W4, #8, W4
012D9A  784204     MOV.B W4, W4
012D9C  230CE6     MOV #0x30CE, W6
012D9E  90029E     MOV [W14+2], W5
012DA0  430285     ADD W6, W5, W5
012DA2  784A84     MOV.B W4, [W5]
012DA4  90021E     MOV [W14+2], W4
012DA6  E80204     INC W4, W4
012DA8  980714     MOV W4, [W14+2]
18111:                 
18112:                 HC05TrmMass[CntBt++]=CriticalError;                 //CriticalError  92
012DAA  214074     MOV #0x1407, W4
012DAC  784214     MOV.B [W4], W4
012DAE  230CE6     MOV #0x30CE, W6
012DB0  90029E     MOV [W14+2], W5
012DB2  430285     ADD W6, W5, W5
012DB4  784A84     MOV.B W4, [W5]
012DB6  90021E     MOV [W14+2], W4
012DB8  E80204     INC W4, W4
012DBA  980714     MOV W4, [W14+2]
18113:                 
18114:                 
18115:                 Tmp=(int)+ETemperINSumm;//ECurr1Summ;//;                                    //BreakTMP      93  
012DBC  820354     MOV ETemperINSumm, W4
012DBE  820365     MOV 0x406C, W5
012DC0  BE0004     MOV.D W4, W0
012DC2  022504     CALL ___fixsfsi
012DC4  000000     NOP
012DC6  BE0200     MOV.D W0, W4
012DC8  780F04     MOV W4, [W14]
18116:                 HC05TrmMass[CntBt++]=Tmp;
012DCA  78021E     MOV [W14], W4
012DCC  784204     MOV.B W4, W4
012DCE  230CE6     MOV #0x30CE, W6
012DD0  90029E     MOV [W14+2], W5
012DD2  430285     ADD W6, W5, W5
012DD4  784A84     MOV.B W4, [W5]
012DD6  90021E     MOV [W14+2], W4
012DD8  E80204     INC W4, W4
012DDA  980714     MOV W4, [W14+2]
18117:                 HC05TrmMass[CntBt++]=Tmp>>8;
012DDC  78021E     MOV [W14], W4
012DDE  DEA248     ASR W4, #8, W4
012DE0  784204     MOV.B W4, W4
012DE2  230CE6     MOV #0x30CE, W6
012DE4  90029E     MOV [W14+2], W5
012DE6  430285     ADD W6, W5, W5
012DE8  784A84     MOV.B W4, [W5]
012DEA  90021E     MOV [W14+2], W4
012DEC  E80204     INC W4, W4
012DEE  980714     MOV W4, [W14+2]
18118:                 
18119:                 Tmp=ADCThrottleBreak;                               //BreakTMP      94  
012DF0  8093E4     MOV ADCThrottleBreak, W4
012DF2  780F04     MOV W4, [W14]
18120:                 HC05TrmMass[CntBt++]=Tmp;
012DF4  78021E     MOV [W14], W4
012DF6  784204     MOV.B W4, W4
012DF8  230CE6     MOV #0x30CE, W6
012DFA  90029E     MOV [W14+2], W5
012DFC  430285     ADD W6, W5, W5
012DFE  784A84     MOV.B W4, [W5]
012E00  90021E     MOV [W14+2], W4
012E02  E80204     INC W4, W4
012E04  980714     MOV W4, [W14+2]
18121:                 HC05TrmMass[CntBt++]=Tmp>>8;
012E06  78021E     MOV [W14], W4
012E08  DEA248     ASR W4, #8, W4
012E0A  784204     MOV.B W4, W4
012E0C  230CE6     MOV #0x30CE, W6
012E0E  90029E     MOV [W14+2], W5
012E10  430285     ADD W6, W5, W5
012E12  784A84     MOV.B W4, [W5]
012E14  90021E     MOV [W14+2], W4
012E16  E80204     INC W4, W4
012E18  980714     MOV W4, [W14+2]
18122:                 
18123:                 Tmp=RCON_Mem;                                       //RCON_Mem      95
012E1A  820654     MOV RCON_Mem, W4
012E1C  780F04     MOV W4, [W14]
18124:                 HC05TrmMass[CntBt++]=Tmp;
012E1E  78021E     MOV [W14], W4
012E20  784204     MOV.B W4, W4
012E22  230CE6     MOV #0x30CE, W6
012E24  90029E     MOV [W14+2], W5
012E26  430285     ADD W6, W5, W5
012E28  784A84     MOV.B W4, [W5]
012E2A  90021E     MOV [W14+2], W4
012E2C  E80204     INC W4, W4
012E2E  980714     MOV W4, [W14+2]
18125:                 HC05TrmMass[CntBt++]=Tmp>>8;
012E30  78021E     MOV [W14], W4
012E32  DEA248     ASR W4, #8, W4
012E34  784204     MOV.B W4, W4
012E36  230CE6     MOV #0x30CE, W6
012E38  90029E     MOV [W14+2], W5
012E3A  430285     ADD W6, W5, W5
012E3C  784A84     MOV.B W4, [W5]
012E3E  90021E     MOV [W14+2], W4
012E40  E80204     INC W4, W4
012E42  980714     MOV W4, [W14+2]
18126:                 
18127:                 Tmp=Version;                                       //Version      96
012E44  203304     MOV #0x330, W4
012E46  780F04     MOV W4, [W14]
18128:                 HC05TrmMass[CntBt++]=Tmp;
012E48  78021E     MOV [W14], W4
012E4A  784204     MOV.B W4, W4
012E4C  230CE6     MOV #0x30CE, W6
012E4E  90029E     MOV [W14+2], W5
012E50  430285     ADD W6, W5, W5
012E52  784A84     MOV.B W4, [W5]
012E54  90021E     MOV [W14+2], W4
012E56  E80204     INC W4, W4
012E58  980714     MOV W4, [W14+2]
18129:                 HC05TrmMass[CntBt++]=Tmp>>8;
012E5A  78021E     MOV [W14], W4
012E5C  DEA248     ASR W4, #8, W4
012E5E  784204     MOV.B W4, W4
012E60  230CE6     MOV #0x30CE, W6
012E62  90029E     MOV [W14+2], W5
012E64  430285     ADD W6, W5, W5
012E66  784A84     MOV.B W4, [W5]
012E68  90021E     MOV [W14+2], W4
012E6A  E80204     INC W4, W4
012E6C  980714     MOV W4, [W14+2]
18130:                 
18131:                 HC05TrmMass[CntBt++]=MPU6050Err;                    //MPU6050Err  97
012E6E  230254     MOV #0x3025, W4
012E70  784214     MOV.B [W4], W4
012E72  230CE6     MOV #0x30CE, W6
012E74  90029E     MOV [W14+2], W5
012E76  430285     ADD W6, W5, W5
012E78  784A84     MOV.B W4, [W5]
012E7A  90021E     MOV [W14+2], W4
012E7C  E80204     INC W4, W4
012E7E  980714     MOV W4, [W14+2]
18132:             
18133:                 Tmp=(int)PhaseCurrShow;                              //(int)Curr1;        98
012E80  81B746     MOV PhaseCurrShow, W6
012E82  780F06     MOV W6, [W14]
18134:                 HC05TrmMass[CntBt++]=Tmp;
012E84  78021E     MOV [W14], W4
012E86  784204     MOV.B W4, W4
012E88  230CE6     MOV #0x30CE, W6
012E8A  90029E     MOV [W14+2], W5
012E8C  430285     ADD W6, W5, W5
012E8E  784A84     MOV.B W4, [W5]
012E90  90021E     MOV [W14+2], W4
012E92  E80204     INC W4, W4
012E94  980714     MOV W4, [W14+2]
18135:                 HC05TrmMass[CntBt++]=Tmp>>8;
012E96  78021E     MOV [W14], W4
012E98  DEA248     ASR W4, #8, W4
012E9A  784204     MOV.B W4, W4
012E9C  230CE6     MOV #0x30CE, W6
012E9E  90029E     MOV [W14+2], W5
012EA0  430285     ADD W6, W5, W5
012EA2  784A84     MOV.B W4, [W5]
012EA4  90021E     MOV [W14+2], W4
012EA6  E80204     INC W4, W4
012EA8  980714     MOV W4, [W14+2]
18136:             
18137:                 Tmp=(int)HallErrCnt;                              //(int)Curr1;        99
012EAA  81A6A4     MOV HallErrCnt, W4
012EAC  780F04     MOV W4, [W14]
18138:                 HC05TrmMass[CntBt++]=Tmp;
012EAE  78021E     MOV [W14], W4
012EB0  784204     MOV.B W4, W4
012EB2  230CE6     MOV #0x30CE, W6
012EB4  90029E     MOV [W14+2], W5
012EB6  430285     ADD W6, W5, W5
012EB8  784A84     MOV.B W4, [W5]
012EBA  90021E     MOV [W14+2], W4
012EBC  E80204     INC W4, W4
012EBE  980714     MOV W4, [W14+2]
18139:                 HC05TrmMass[CntBt++]=Tmp>>8;
012EC0  78021E     MOV [W14], W4
012EC2  DEA248     ASR W4, #8, W4
012EC4  784204     MOV.B W4, W4
012EC6  230CE6     MOV #0x30CE, W6
012EC8  90029E     MOV [W14+2], W5
012ECA  430285     ADD W6, W5, W5
012ECC  784A84     MOV.B W4, [W5]
012ECE  90021E     MOV [W14+2], W4
012ED0  E80204     INC W4, W4
012ED2  980714     MOV W4, [W14+2]
18140:             
18141:                 Tmp=(int)(CurrPhaseLimit);                                   //CurrPhaseLimit      100  
012ED4  81F4C4     MOV CurrPhaseLimit, W4
012ED6  780F04     MOV W4, [W14]
18142:                 HC05TrmMass[CntBt++]=Tmp;
012ED8  78021E     MOV [W14], W4
012EDA  784204     MOV.B W4, W4
012EDC  230CE6     MOV #0x30CE, W6
012EDE  90029E     MOV [W14+2], W5
012EE0  430285     ADD W6, W5, W5
012EE2  784A84     MOV.B W4, [W5]
012EE4  90021E     MOV [W14+2], W4
012EE6  E80204     INC W4, W4
012EE8  980714     MOV W4, [W14+2]
18143:                 HC05TrmMass[CntBt++]=Tmp>>8;
012EEA  78021E     MOV [W14], W4
012EEC  DEA248     ASR W4, #8, W4
012EEE  784204     MOV.B W4, W4
012EF0  230CE6     MOV #0x30CE, W6
012EF2  90029E     MOV [W14+2], W5
012EF4  430285     ADD W6, W5, W5
012EF6  784A84     MOV.B W4, [W5]
012EF8  90021E     MOV [W14+2], W4
012EFA  E80204     INC W4, W4
012EFC  980714     MOV W4, [W14+2]
18144:             
18145:                 
18146:                 
18147:                 tt=(long int)Phase1Period1;                     //Phase1Period1  101
012EFE  808894     MOV Phase1Period1, W4
012F00  8088A5     MOV 0x1114, W5
012F02  980724     MOV W4, [W14+4]
012F04  980735     MOV W5, [W14+6]
18148:                 HC05TrmMass[CntBt++]=tt;   
012F06  90022E     MOV [W14+4], W4
012F08  784204     MOV.B W4, W4
012F0A  230CE6     MOV #0x30CE, W6
012F0C  90029E     MOV [W14+2], W5
012F0E  430285     ADD W6, W5, W5
012F10  784A84     MOV.B W4, [W5]
012F12  90021E     MOV [W14+2], W4
012F14  E80204     INC W4, W4
012F16  980714     MOV W4, [W14+2]
18149:                 HC05TrmMass[CntBt++]=tt>>8;
012F18  90022E     MOV [W14+4], W4
012F1A  9002BE     MOV [W14+6], W5
012F1C  DD2B48     SL W5, #8, W6
012F1E  DE2248     LSR W4, #8, W4
012F20  730204     IOR W6, W4, W4
012F22  DE2AC8     LSR W5, #8, W5
012F24  784204     MOV.B W4, W4
012F26  230CE6     MOV #0x30CE, W6
012F28  90029E     MOV [W14+2], W5
012F2A  430285     ADD W6, W5, W5
012F2C  784A84     MOV.B W4, [W5]
012F2E  90021E     MOV [W14+2], W4
012F30  E80204     INC W4, W4
012F32  980714     MOV W4, [W14+2]
18150:                 HC05TrmMass[CntBt++]=tt>>16;
012F34  90022E     MOV [W14+4], W4
012F36  9002BE     MOV [W14+6], W5
012F38  DE2A40     LSR W5, #0, W4
012F3A  200005     MOV #0x0, W5
012F3C  784204     MOV.B W4, W4
012F3E  230CE6     MOV #0x30CE, W6
012F40  90029E     MOV [W14+2], W5
012F42  430285     ADD W6, W5, W5
012F44  784A84     MOV.B W4, [W5]
012F46  90021E     MOV [W14+2], W4
012F48  E80204     INC W4, W4
012F4A  980714     MOV W4, [W14+2]
18151:                 HC05TrmMass[CntBt++]=tt>>24;
012F4C  90022E     MOV [W14+4], W4
012F4E  9002BE     MOV [W14+6], W5
012F50  DE2A48     LSR W5, #8, W4
012F52  200005     MOV #0x0, W5
012F54  784204     MOV.B W4, W4
012F56  230CE6     MOV #0x30CE, W6
012F58  90029E     MOV [W14+2], W5
012F5A  430285     ADD W6, W5, W5
012F5C  784A84     MOV.B W4, [W5]
012F5E  90021E     MOV [W14+2], W4
012F60  E80204     INC W4, W4
012F62  980714     MOV W4, [W14+2]
18152:                 
18153:                 
18154:                 
18155:                 
18156:                 
18157:                 //Halls=ReadSensor1_F_V();
18158:                 HC05TrmMass[CntBt++]=Sensor1_Prev;//Halls;                      //Sensor  102
012F64  212474     MOV #0x1247, W4
012F66  784214     MOV.B [W4], W4
012F68  230CE6     MOV #0x30CE, W6
012F6A  90029E     MOV [W14+2], W5
012F6C  430285     ADD W6, W5, W5
012F6E  784A84     MOV.B W4, [W5]
012F70  90021E     MOV [W14+2], W4
012F72  E80204     INC W4, W4
012F74  980714     MOV W4, [W14+2]
18159:                 
18160:                 HC05TrmMass[CntBt++]=HallDelay1_F;              //HallDelay1_F  103
012F76  2425A4     MOV #0x425A, W4
012F78  784214     MOV.B [W4], W4
012F7A  230CE6     MOV #0x30CE, W6
012F7C  90029E     MOV [W14+2], W5
012F7E  430285     ADD W6, W5, W5
012F80  784A84     MOV.B W4, [W5]
012F82  90021E     MOV [W14+2], W4
012F84  E80204     INC W4, W4
012F86  980714     MOV W4, [W14+2]
18161:                 HC05TrmMass[CntBt++]=HallDelay1_B;              //HallDelay1_B  104
012F88  2425B4     MOV #0x425B, W4
012F8A  784214     MOV.B [W4], W4
012F8C  230CE6     MOV #0x30CE, W6
012F8E  90029E     MOV [W14+2], W5
012F90  430285     ADD W6, W5, W5
012F92  784A84     MOV.B W4, [W5]
012F94  90021E     MOV [W14+2], W4
012F96  E80204     INC W4, W4
012F98  980714     MOV W4, [W14+2]
18162:                 
18163:                 Tmp=(int)(EPID_ResTmp);                                   //EPID_ResTmp      105
012F9A  80C164     MOV EPID_ResTmp, W4
012F9C  80C175     MOV 0x182E, W5
012F9E  BE0004     MOV.D W4, W0
012FA0  022504     CALL ___fixsfsi
012FA2  000000     NOP
012FA4  BE0200     MOV.D W0, W4
012FA6  780F04     MOV W4, [W14]
18164:                 HC05TrmMass[CntBt++]=Tmp;
012FA8  78021E     MOV [W14], W4
012FAA  784204     MOV.B W4, W4
012FAC  230CE6     MOV #0x30CE, W6
012FAE  90029E     MOV [W14+2], W5
012FB0  430285     ADD W6, W5, W5
012FB2  784A84     MOV.B W4, [W5]
012FB4  90021E     MOV [W14+2], W4
012FB6  E80204     INC W4, W4
012FB8  980714     MOV W4, [W14+2]
18165:                 HC05TrmMass[CntBt++]=Tmp>>8;
012FBA  78021E     MOV [W14], W4
012FBC  DEA248     ASR W4, #8, W4
012FBE  784204     MOV.B W4, W4
012FC0  230CE6     MOV #0x30CE, W6
012FC2  90029E     MOV [W14+2], W5
012FC4  430285     ADD W6, W5, W5
012FC6  784A84     MOV.B W4, [W5]
012FC8  90021E     MOV [W14+2], W4
012FCA  E80204     INC W4, W4
012FCC  980714     MOV W4, [W14+2]
18166:                 
18167:                 HC05TrmMass[CntBt++]=BuzzerOnEvent;
012FCE  2308F4     MOV #0x308F, W4
012FD0  784214     MOV.B [W4], W4
012FD2  230CE6     MOV #0x30CE, W6
012FD4  90029E     MOV [W14+2], W5
012FD6  430285     ADD W6, W5, W5
012FD8  784A84     MOV.B W4, [W5]
012FDA  90021E     MOV [W14+2], W4
012FDC  E80204     INC W4, W4
012FDE  980714     MOV W4, [W14+2]
18168:                 
18169:                 HC05TrmMass[2]=CntBt-3;
012FE0  90021E     MOV [W14+2], W4
012FE2  784204     MOV.B W4, W4
012FE4  524263     SUB.B W4, #0x3, W4
012FE6  230D05     MOV #0x30D0, W5
012FE8  784A84     MOV.B W4, [W5]
18170:             
18171:             
18172:             
18173:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
012FEA  230D04     MOV #0x30D0, W4
012FEC  784214     MOV.B [W4], W4
012FEE  FB8204     ZE W4, W4
012FF0  E80204     INC W4, W4
012FF2  230D01     MOV #0x30D0, W1
012FF4  780004     MOV W4, W0
012FF6  07B57F     RCALL CalcCheckSumm
012FF8  784200     MOV.B W0, W4
012FFA  230CE6     MOV #0x30CE, W6
012FFC  90029E     MOV [W14+2], W5
012FFE  430285     ADD W6, W5, W5
013000  784A84     MOV.B W4, [W5]
013002  90021E     MOV [W14+2], W4
013004  E80204     INC W4, W4
013006  980714     MOV W4, [W14+2]
18174:             
18175:                 MustTrmHC05=1;
013008  809634     MOV 0x12C6, W4
01300A  A09004     BSET W4, #9
01300C  889634     MOV W4, 0x12C6
01300E  370005     BRA 0x1301A
18176:             
18177:             
18178:             
18179:             
18180:             }
01301A  78044F     MOV [--W15], W8
01301C  FA8000     ULNK
01301E  060000     RETURN
18181:             
18182:             
18183:             
18184:             void TrmFlashMass(void)
18185:             {
013020  FA0002     LNK #0x2
18186:                 int i;
18187:             
18188:                 if (HC05_BUSY)
013022  809635     MOV 0x12C6, W5
013024  204004     MOV #0x400, W4
013026  628204     AND W5, W4, W4
013028  520FE0     SUB W4, #0x0, [W15]
01302A  3A0042     BRA NZ, 0x130B0
18189:                     return;
0130B0  000000     NOP
0130B2  370005     BRA 0x130BE
18190:             
18191:                 if (!Hv_HC05)
01302C  8096D5     MOV 0x12DA, W5
01302E  200404     MOV #0x40, W4
013030  628204     AND W5, W4, W4
013032  520FE0     SUB W4, #0x0, [W15]
013034  32003F     BRA Z, 0x130B4
18192:                 return;
0130B4  000000     NOP
0130B6  370003     BRA 0x130BE
18193:                 if (!MustTrmFlashMass)
013036  8095F4     MOV 0x12BE, W4
013038  620264     AND W4, #0x4, W4
01303A  520FE0     SUB W4, #0x0, [W15]
01303C  32003D     BRA Z, 0x130B8
18194:                 return;
0130B8  000000     NOP
0130BA  370001     BRA 0x130BE
18195:                 if (OnTransmittHC05)
01303E  809615     MOV 0x12C2, W5
013040  202004     MOV #0x200, W4
013042  628204     AND W5, W4, W4
013044  520FE0     SUB W4, #0x0, [W15]
013046  3A003A     BRA NZ, 0x130BC
18196:                     return;
0130BC  000000     NOP
18197:                 HC05_BUSY=1;
013048  809634     MOV 0x12C6, W4
01304A  A0A004     BSET W4, #10
01304C  889634     MOV W4, 0x12C6
18198:                 MustTrmFlashMass=0;
01304E  8095F4     MOV 0x12BE, W4
013050  A12004     BCLR W4, #2
013052  8895F4     MOV W4, 0x12BE
18199:             
18200:                 HC05TrmMass[0]=0xff;
013054  230CE5     MOV #0x30CE, W5
013056  EBC200     SETM.B W4
013058  784A84     MOV.B W4, [W5]
18201:                 HC05TrmMass[1]=0xff;
01305A  230CF5     MOV #0x30CF, W5
01305C  EBC200     SETM.B W4
01305E  784A84     MOV.B W4, [W5]
18202:                 HC05TrmMass[2]=sizeof(FlashMass)+1;
013060  230D05     MOV #0x30D0, W5
013062  B3CF44     MOV.B #0xF4, W4
013064  784A84     MOV.B W4, [W5]
18203:                 HC05TrmMass[3]=6;//COMMAND
013066  230D15     MOV #0x30D1, W5
013068  B3C064     MOV.B #0x6, W4
01306A  784A84     MOV.B W4, [W5]
18204:             
18205:             
18206:                 for (i=4;i<(sizeof(FlashMass)+4);i++)
01306C  200044     MOV #0x4, W4
01306E  780F04     MOV W4, [W14]
013070  370009     BRA 0x13084
013082  E80F1E     INC [W14], [W14]
013084  78029E     MOV [W14], W5
013086  200F64     MOV #0xF6, W4
013088  528F84     SUB W5, W4, [W15]
01308A  36FFF3     BRA LEU, 0x13072
18207:                 HC05TrmMass[i]=FlashMass[i-4];
013072  78029E     MOV [W14], W5
013074  528264     SUB W5, #0x4, W4
013076  22AE05     MOV #0x2AE0, W5
013078  428204     ADD W5, W4, W4
01307A  784214     MOV.B [W4], W4
01307C  230CE5     MOV #0x30CE, W5
01307E  42829E     ADD W5, [W14], W5
013080  784A84     MOV.B W4, [W5]
18208:             
18209:                 HC05TrmMass[i]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01308C  230D04     MOV #0x30D0, W4
01308E  784214     MOV.B [W4], W4
013090  FB8204     ZE W4, W4
013092  E80204     INC W4, W4
013094  230D01     MOV #0x30D0, W1
013096  780004     MOV W4, W0
013098  07B52E     RCALL CalcCheckSumm
01309A  784200     MOV.B W0, W4
01309C  230CE5     MOV #0x30CE, W5
01309E  42829E     ADD W5, [W14], W5
0130A0  784A84     MOV.B W4, [W5]
18210:             
18211:                 MustTrmHC05=1;
0130A2  809634     MOV 0x12C6, W4
0130A4  A09004     BSET W4, #9
0130A6  889634     MOV W4, 0x12C6
18212:                 //TrmHC05(HC05TrmMass);
18213:                 MustTrmFlashMass2=1;
0130A8  8096C4     MOV Flgs7, W4
0130AA  A0A004     BSET W4, #10
0130AC  8896C4     MOV W4, Flgs7
0130AE  370007     BRA 0x130BE
18214:             }
0130BE  FA8000     ULNK
0130C0  060000     RETURN
18215:             
18216:             void TrmFlashMass2(void)
18217:             {
0130C2  FA0002     LNK #0x2
18218:                 int i;
18219:             
18220:                 if (HC05_BUSY)
0130C4  809635     MOV 0x12C6, W5
0130C6  204004     MOV #0x400, W4
0130C8  628204     AND W5, W4, W4
0130CA  520FE0     SUB W4, #0x0, [W15]
0130CC  3A0040     BRA NZ, 0x1314E
18221:                     return;
01314E  000000     NOP
013150  370005     BRA 0x1315C
18222:             
18223:                 if (!Hv_HC05)
0130CE  8096D5     MOV 0x12DA, W5
0130D0  200404     MOV #0x40, W4
0130D2  628204     AND W5, W4, W4
0130D4  520FE0     SUB W4, #0x0, [W15]
0130D6  32003D     BRA Z, 0x13152
18224:                 return;
013152  000000     NOP
013154  370003     BRA 0x1315C
18225:                 if (!MustTrmFlashMass2)
0130D8  8096C5     MOV Flgs7, W5
0130DA  204004     MOV #0x400, W4
0130DC  628204     AND W5, W4, W4
0130DE  520FE0     SUB W4, #0x0, [W15]
0130E0  32003A     BRA Z, 0x13156
18226:                 return;
013156  000000     NOP
013158  370001     BRA 0x1315C
18227:                 if (OnTransmittHC05)
0130E2  809615     MOV 0x12C2, W5
0130E4  202004     MOV #0x200, W4
0130E6  628204     AND W5, W4, W4
0130E8  520FE0     SUB W4, #0x0, [W15]
0130EA  3A0037     BRA NZ, 0x1315A
18228:                     return;
01315A  000000     NOP
18229:                 HC05_BUSY=1;
0130EC  809634     MOV 0x12C6, W4
0130EE  A0A004     BSET W4, #10
0130F0  889634     MOV W4, 0x12C6
18230:                 MustTrmFlashMass2=0;
0130F2  8096C4     MOV Flgs7, W4
0130F4  A1A004     BCLR W4, #10
0130F6  8896C4     MOV W4, Flgs7
18231:             
18232:                 HC05TrmMass[0]=0xff;
0130F8  230CE5     MOV #0x30CE, W5
0130FA  EBC200     SETM.B W4
0130FC  784A84     MOV.B W4, [W5]
18233:                 HC05TrmMass[1]=0xff;
0130FE  230CF5     MOV #0x30CF, W5
013100  EBC200     SETM.B W4
013102  784A84     MOV.B W4, [W5]
18234:                 HC05TrmMass[2]=sizeof(FlashMass2)+1;
013104  230D05     MOV #0x30D0, W5
013106  B3CF44     MOV.B #0xF4, W4
013108  784A84     MOV.B W4, [W5]
18235:                 HC05TrmMass[3]=16;//COMMAND
01310A  230D15     MOV #0x30D1, W5
01310C  B3C104     MOV.B #0x10, W4
01310E  784A84     MOV.B W4, [W5]
18236:             
18237:             
18238:                 for (i=4;i<(sizeof(FlashMass2)+4);i++)
013110  200044     MOV #0x4, W4
013112  780F04     MOV W4, [W14]
013114  370009     BRA 0x13128
013126  E80F1E     INC [W14], [W14]
013128  78029E     MOV [W14], W5
01312A  200F64     MOV #0xF6, W4
01312C  528F84     SUB W5, W4, [W15]
01312E  36FFF3     BRA LEU, 0x13116
18239:                 HC05TrmMass[i]=FlashMass2[i-4];
013116  78029E     MOV [W14], W5
013118  528264     SUB W5, #0x4, W4
01311A  22CC65     MOV #0x2CC6, W5
01311C  428204     ADD W5, W4, W4
01311E  784214     MOV.B [W4], W4
013120  230CE5     MOV #0x30CE, W5
013122  42829E     ADD W5, [W14], W5
013124  784A84     MOV.B W4, [W5]
18240:             
18241:                 HC05TrmMass[i]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
013130  230D04     MOV #0x30D0, W4
013132  784214     MOV.B [W4], W4
013134  FB8204     ZE W4, W4
013136  E80204     INC W4, W4
013138  230D01     MOV #0x30D0, W1
01313A  780004     MOV W4, W0
01313C  07B4DC     RCALL CalcCheckSumm
01313E  784200     MOV.B W0, W4
013140  230CE5     MOV #0x30CE, W5
013142  42829E     ADD W5, [W14], W5
013144  784A84     MOV.B W4, [W5]
18242:             
18243:                 MustTrmHC05=1;
013146  809634     MOV 0x12C6, W4
013148  A09004     BSET W4, #9
01314A  889634     MOV W4, 0x12C6
01314C  370007     BRA 0x1315C
18244:                 //TrmHC05(HC05TrmMass);
18245:             
18246:             }
01315C  FA8000     ULNK
01315E  060000     RETURN
18247:             
18248:             
18249:             
18250:             void TrmErrorsHC05(void)
18251:             {
013160  FA0004     LNK #0x4
18252:                 unsigned int CntBt=4;
013162  200044     MOV #0x4, W4
013164  780F04     MOV W4, [W14]
18253:                 int Tmp;
18254:             
18255:                 if (HC05_BUSY)
013166  809635     MOV 0x12C6, W5
013168  204004     MOV #0x400, W4
01316A  628204     AND W5, W4, W4
01316C  520FE0     SUB W4, #0x0, [W15]
01316E  3A019F     BRA NZ, 0x134AE
18256:                     return;
0134AE  000000     NOP
0134B0  370005     BRA 0x134BC
18257:             
18258:                 if (!Hv_HC05)
013170  8096D5     MOV 0x12DA, W5
013172  200404     MOV #0x40, W4
013174  628204     AND W5, W4, W4
013176  520FE0     SUB W4, #0x0, [W15]
013178  32019C     BRA Z, 0x134B2
18259:                 return;
0134B2  000000     NOP
0134B4  370003     BRA 0x134BC
18260:                 if (!MustTrmErrors)
01317A  809625     MOV Flgs2, W5
01317C  201004     MOV #0x100, W4
01317E  628204     AND W5, W4, W4
013180  520FE0     SUB W4, #0x0, [W15]
013182  320199     BRA Z, 0x134B6
18261:                 return;
0134B6  000000     NOP
0134B8  370001     BRA 0x134BC
18262:                 if (OnTransmittHC05)
013184  809615     MOV 0x12C2, W5
013186  202004     MOV #0x200, W4
013188  628204     AND W5, W4, W4
01318A  520FE0     SUB W4, #0x0, [W15]
01318C  3A0196     BRA NZ, 0x134BA
18263:                     return;
0134BA  000000     NOP
18264:                 HC05_BUSY=1;
01318E  809634     MOV 0x12C6, W4
013190  A0A004     BSET W4, #10
013192  889634     MOV W4, 0x12C6
18265:             
18266:                 MustTrmErrors=0;
013194  809624     MOV Flgs2, W4
013196  A18004     BCLR W4, #8
013198  889624     MOV W4, Flgs2
18267:             
18268:             
18269:             /*
18270:                         ErrOptions=0x12;
18271:                         AlfaXResErr=34.56;
18272:                         AlfaYResErr=78.91;
18273:                         SteerXErr=23.45;
18274:                         SteerYErr=67.89;
18275:                         ErrorCode=12;
18276:                         NoBalanceCode=34;
18277:                    //     Flgs.Flags=0x12345678;
18278:                     //    Flgs1.Flags=0x90abcdef;
18279:                         LastMainTiltAngleMnErr=1234;
18280:                         LastSteerTiltAngleMnErr=5678;
18281:                         TiltAngleAvMnErr=9101;
18282:                         MainTiltNumErr=95;
18283:                         SteerTiltNumErr=39;
18284:                         LastMainTiltAngleSteerErr=1234;
18285:                         LastSteerTiltAngleSteerErr=5678;
18286:                         TiltAngleAvSteerErr=9101;
18287:             
18288:             */
18289:             
18290:             
18291:             
18292:             
18293:             
18294:                 HC05TrmMass[0]=0xff;
01319A  230CE5     MOV #0x30CE, W5
01319C  EBC200     SETM.B W4
01319E  784A84     MOV.B W4, [W5]
18295:                 HC05TrmMass[1]=0xff;
0131A0  230CF5     MOV #0x30CF, W5
0131A2  EBC200     SETM.B W4
0131A4  784A84     MOV.B W4, [W5]
18296:             
18297:             
18298:                 HC05TrmMass[3]=7;//COMMAND
0131A6  230D15     MOV #0x30D1, W5
0131A8  B3C074     MOV.B #0x7, W4
0131AA  784A84     MOV.B W4, [W5]
18299:             
18300:                 HC05TrmMass[CntBt++]=ErrOptions;
0131AC  2305C4     MOV #0x305C, W4
0131AE  784214     MOV.B [W4], W4
0131B0  230CE5     MOV #0x30CE, W5
0131B2  42829E     ADD W5, [W14], W5
0131B4  784A84     MOV.B W4, [W5]
0131B6  E80F1E     INC [W14], [W14]
18301:             
18302:                 Tmp=(int)(AlfaXResErr*100);                //AlfaXRes;     1
0131B8  818584     MOV AlfaXResErr, W4
0131BA  818595     MOV 0x30B2, W5
0131BC  200002     MOV #0x0, W2
0131BE  242C83     MOV #0x42C8, W3
0131C0  BE0004     MOV.D W4, W0
0131C2  022630     CALL ___mulsf3
0131C4  000000     NOP
0131C6  BE0200     MOV.D W0, W4
0131C8  BE0004     MOV.D W4, W0
0131CA  022504     CALL ___fixsfsi
0131CC  000000     NOP
0131CE  BE0200     MOV.D W0, W4
0131D0  980714     MOV W4, [W14+2]
18303:                 HC05TrmMass[CntBt++]=Tmp;
0131D2  90021E     MOV [W14+2], W4
0131D4  784204     MOV.B W4, W4
0131D6  230CE5     MOV #0x30CE, W5
0131D8  42829E     ADD W5, [W14], W5
0131DA  784A84     MOV.B W4, [W5]
0131DC  E80F1E     INC [W14], [W14]
18304:                 HC05TrmMass[CntBt++]=Tmp>>8;
0131DE  90021E     MOV [W14+2], W4
0131E0  DEA248     ASR W4, #8, W4
0131E2  784204     MOV.B W4, W4
0131E4  230CE5     MOV #0x30CE, W5
0131E6  42829E     ADD W5, [W14], W5
0131E8  784A84     MOV.B W4, [W5]
0131EA  E80F1E     INC [W14], [W14]
18305:             
18306:             
18307:                 Tmp=(int)(AlfaYResErr*100);                //AlfaXRes;     1
0131EC  8185A4     MOV AlfaYResErr, W4
0131EE  8185B5     MOV 0x30B6, W5
0131F0  200002     MOV #0x0, W2
0131F2  242C83     MOV #0x42C8, W3
0131F4  BE0004     MOV.D W4, W0
0131F6  022630     CALL ___mulsf3
0131F8  000000     NOP
0131FA  BE0200     MOV.D W0, W4
0131FC  BE0004     MOV.D W4, W0
0131FE  022504     CALL ___fixsfsi
013200  000000     NOP
013202  BE0200     MOV.D W0, W4
013204  980714     MOV W4, [W14+2]
18308:                 HC05TrmMass[CntBt++]=Tmp;
013206  90021E     MOV [W14+2], W4
013208  784204     MOV.B W4, W4
01320A  230CE5     MOV #0x30CE, W5
01320C  42829E     ADD W5, [W14], W5
01320E  784A84     MOV.B W4, [W5]
013210  E80F1E     INC [W14], [W14]
18309:                 HC05TrmMass[CntBt++]=Tmp>>8;
013212  90021E     MOV [W14+2], W4
013214  DEA248     ASR W4, #8, W4
013216  784204     MOV.B W4, W4
013218  230CE5     MOV #0x30CE, W5
01321A  42829E     ADD W5, [W14], W5
01321C  784A84     MOV.B W4, [W5]
01321E  E80F1E     INC [W14], [W14]
18310:             
18311:                 Tmp=(int)(SteerXErr*100);                //AlfaXRes;     1
013220  8185C4     MOV SteerXErr, W4
013222  8185D5     MOV 0x30BA, W5
013224  200002     MOV #0x0, W2
013226  242C83     MOV #0x42C8, W3
013228  BE0004     MOV.D W4, W0
01322A  022630     CALL ___mulsf3
01322C  000000     NOP
01322E  BE0200     MOV.D W0, W4
013230  BE0004     MOV.D W4, W0
013232  022504     CALL ___fixsfsi
013234  000000     NOP
013236  BE0200     MOV.D W0, W4
013238  980714     MOV W4, [W14+2]
18312:                 HC05TrmMass[CntBt++]=Tmp;
01323A  90021E     MOV [W14+2], W4
01323C  784204     MOV.B W4, W4
01323E  230CE5     MOV #0x30CE, W5
013240  42829E     ADD W5, [W14], W5
013242  784A84     MOV.B W4, [W5]
013244  E80F1E     INC [W14], [W14]
18313:                 HC05TrmMass[CntBt++]=Tmp>>8;
013246  90021E     MOV [W14+2], W4
013248  DEA248     ASR W4, #8, W4
01324A  784204     MOV.B W4, W4
01324C  230CE5     MOV #0x30CE, W5
01324E  42829E     ADD W5, [W14], W5
013250  784A84     MOV.B W4, [W5]
013252  E80F1E     INC [W14], [W14]
18314:             
18315:                 Tmp=(int)(SteerYErr*100);                //AlfaXRes;     1
013254  8185E4     MOV SteerYErr, W4
013256  8185F5     MOV 0x30BE, W5
013258  200002     MOV #0x0, W2
01325A  242C83     MOV #0x42C8, W3
01325C  BE0004     MOV.D W4, W0
01325E  022630     CALL ___mulsf3
013260  000000     NOP
013262  BE0200     MOV.D W0, W4
013264  BE0004     MOV.D W4, W0
013266  022504     CALL ___fixsfsi
013268  000000     NOP
01326A  BE0200     MOV.D W0, W4
01326C  980714     MOV W4, [W14+2]
18316:                 HC05TrmMass[CntBt++]=Tmp;
01326E  90021E     MOV [W14+2], W4
013270  784204     MOV.B W4, W4
013272  230CE5     MOV #0x30CE, W5
013274  42829E     ADD W5, [W14], W5
013276  784A84     MOV.B W4, [W5]
013278  E80F1E     INC [W14], [W14]
18317:                 HC05TrmMass[CntBt++]=Tmp>>8;
01327A  90021E     MOV [W14+2], W4
01327C  DEA248     ASR W4, #8, W4
01327E  784204     MOV.B W4, W4
013280  230CE5     MOV #0x30CE, W5
013282  42829E     ADD W5, [W14], W5
013284  784A84     MOV.B W4, [W5]
013286  E80F1E     INC [W14], [W14]
18318:             
18319:                 HC05TrmMass[CntBt++]=ErrorCode;
013288  216D04     MOV #0x16D0, W4
01328A  784214     MOV.B [W4], W4
01328C  230CE5     MOV #0x30CE, W5
01328E  42829E     ADD W5, [W14], W5
013290  784A84     MOV.B W4, [W5]
013292  E80F1E     INC [W14], [W14]
18320:             
18321:                 HC05TrmMass[CntBt++]=NoBalanceCode;
013294  216D24     MOV #0x16D2, W4
013296  784214     MOV.B [W4], W4
013298  230CE5     MOV #0x30CE, W5
01329A  42829E     ADD W5, [W14], W5
01329C  784A84     MOV.B W4, [W5]
01329E  E80F1E     INC [W14], [W14]
18322:             
18323:                 HC05TrmMass[CntBt++]=FlgsErr.Flags;               //Odometr;        12
0132A0  8096E4     MOV FlgsErr, W4
0132A2  8096F5     MOV 0x12DE, W5
0132A4  784204     MOV.B W4, W4
0132A6  230CE5     MOV #0x30CE, W5
0132A8  42829E     ADD W5, [W14], W5
0132AA  784A84     MOV.B W4, [W5]
0132AC  E80F1E     INC [W14], [W14]
18324:                 HC05TrmMass[CntBt++]=FlgsErr.Flags>>8;
0132AE  8096E4     MOV FlgsErr, W4
0132B0  8096F5     MOV 0x12DE, W5
0132B2  DD2B48     SL W5, #8, W6
0132B4  DE2248     LSR W4, #8, W4
0132B6  730204     IOR W6, W4, W4
0132B8  DE2AC8     LSR W5, #8, W5
0132BA  784204     MOV.B W4, W4
0132BC  230CE5     MOV #0x30CE, W5
0132BE  42829E     ADD W5, [W14], W5
0132C0  784A84     MOV.B W4, [W5]
0132C2  E80F1E     INC [W14], [W14]
18325:                 HC05TrmMass[CntBt++]=FlgsErr.Flags>>16;
0132C4  8096E4     MOV FlgsErr, W4
0132C6  8096F5     MOV 0x12DE, W5
0132C8  DE2A40     LSR W5, #0, W4
0132CA  200005     MOV #0x0, W5
0132CC  784204     MOV.B W4, W4
0132CE  230CE5     MOV #0x30CE, W5
0132D0  42829E     ADD W5, [W14], W5
0132D2  784A84     MOV.B W4, [W5]
0132D4  E80F1E     INC [W14], [W14]
18326:                 HC05TrmMass[CntBt++]=FlgsErr.Flags>>24;
0132D6  8096E4     MOV FlgsErr, W4
0132D8  8096F5     MOV 0x12DE, W5
0132DA  DE2A48     LSR W5, #8, W4
0132DC  200005     MOV #0x0, W5
0132DE  784204     MOV.B W4, W4
0132E0  230CE5     MOV #0x30CE, W5
0132E2  42829E     ADD W5, [W14], W5
0132E4  784A84     MOV.B W4, [W5]
0132E6  E80F1E     INC [W14], [W14]
18327:             
18328:             
18329:                 HC05TrmMass[CntBt++]=Flgs1Err.Flags;               //Odometr;        12
0132E8  809704     MOV Flgs1Err, W4
0132EA  809715     MOV 0x12E2, W5
0132EC  784204     MOV.B W4, W4
0132EE  230CE5     MOV #0x30CE, W5
0132F0  42829E     ADD W5, [W14], W5
0132F2  784A84     MOV.B W4, [W5]
0132F4  E80F1E     INC [W14], [W14]
18330:                 HC05TrmMass[CntBt++]=Flgs1Err.Flags>>8;
0132F6  809704     MOV Flgs1Err, W4
0132F8  809715     MOV 0x12E2, W5
0132FA  DD2B48     SL W5, #8, W6
0132FC  DE2248     LSR W4, #8, W4
0132FE  730204     IOR W6, W4, W4
013300  DE2AC8     LSR W5, #8, W5
013302  784204     MOV.B W4, W4
013304  230CE5     MOV #0x30CE, W5
013306  42829E     ADD W5, [W14], W5
013308  784A84     MOV.B W4, [W5]
01330A  E80F1E     INC [W14], [W14]
18331:                 HC05TrmMass[CntBt++]=Flgs1Err.Flags>>16;
01330C  809704     MOV Flgs1Err, W4
01330E  809715     MOV 0x12E2, W5
013310  DE2A40     LSR W5, #0, W4
013312  200005     MOV #0x0, W5
013314  784204     MOV.B W4, W4
013316  230CE5     MOV #0x30CE, W5
013318  42829E     ADD W5, [W14], W5
01331A  784A84     MOV.B W4, [W5]
01331C  E80F1E     INC [W14], [W14]
18332:                 HC05TrmMass[CntBt++]=Flgs1Err.Flags>>24;
01331E  809704     MOV Flgs1Err, W4
013320  809715     MOV 0x12E2, W5
013322  DE2A48     LSR W5, #8, W4
013324  200005     MOV #0x0, W5
013326  784204     MOV.B W4, W4
013328  230CE5     MOV #0x30CE, W5
01332A  42829E     ADD W5, [W14], W5
01332C  784A84     MOV.B W4, [W5]
01332E  E80F1E     INC [W14], [W14]
18333:             
18334:                 Tmp=LastMainTiltAngleMnErr;
013330  81A634     MOV LastMainTiltAngleMnErr, W4
013332  980714     MOV W4, [W14+2]
18335:                 HC05TrmMass[CntBt++]=Tmp;
013334  90021E     MOV [W14+2], W4
013336  784204     MOV.B W4, W4
013338  230CE5     MOV #0x30CE, W5
01333A  42829E     ADD W5, [W14], W5
01333C  784A84     MOV.B W4, [W5]
01333E  E80F1E     INC [W14], [W14]
18336:                 HC05TrmMass[CntBt++]=Tmp>>8;
013340  90021E     MOV [W14+2], W4
013342  DEA248     ASR W4, #8, W4
013344  784204     MOV.B W4, W4
013346  230CE5     MOV #0x30CE, W5
013348  42829E     ADD W5, [W14], W5
01334A  784A84     MOV.B W4, [W5]
01334C  E80F1E     INC [W14], [W14]
18337:             
18338:                 Tmp=LastSteerTiltAngleMnErr;
01334E  81A646     MOV LastSteerTiltAngleMnErr, W6
013350  980716     MOV W6, [W14+2]
18339:                 HC05TrmMass[CntBt++]=Tmp;
013352  90021E     MOV [W14+2], W4
013354  784204     MOV.B W4, W4
013356  230CE5     MOV #0x30CE, W5
013358  42829E     ADD W5, [W14], W5
01335A  784A84     MOV.B W4, [W5]
01335C  E80F1E     INC [W14], [W14]
18340:                 HC05TrmMass[CntBt++]=Tmp>>8;
01335E  90021E     MOV [W14+2], W4
013360  DEA248     ASR W4, #8, W4
013362  784204     MOV.B W4, W4
013364  230CE5     MOV #0x30CE, W5
013366  42829E     ADD W5, [W14], W5
013368  784A84     MOV.B W4, [W5]
01336A  E80F1E     INC [W14], [W14]
18341:             
18342:                 Tmp=TiltAngleAvMnErr;
01336C  81A654     MOV TiltAngleAvMnErr, W4
01336E  980714     MOV W4, [W14+2]
18343:                 HC05TrmMass[CntBt++]=Tmp;
013370  90021E     MOV [W14+2], W4
013372  784204     MOV.B W4, W4
013374  230CE5     MOV #0x30CE, W5
013376  42829E     ADD W5, [W14], W5
013378  784A84     MOV.B W4, [W5]
01337A  E80F1E     INC [W14], [W14]
18344:                 HC05TrmMass[CntBt++]=Tmp>>8;
01337C  90021E     MOV [W14+2], W4
01337E  DEA248     ASR W4, #8, W4
013380  784204     MOV.B W4, W4
013382  230CE5     MOV #0x30CE, W5
013384  42829E     ADD W5, [W14], W5
013386  784A84     MOV.B W4, [W5]
013388  E80F1E     INC [W14], [W14]
18345:             
18346:                 HC05TrmMass[CntBt++]=MainTiltNumErr;
01338A  234D24     MOV #0x34D2, W4
01338C  784214     MOV.B [W4], W4
01338E  230CE5     MOV #0x30CE, W5
013390  42829E     ADD W5, [W14], W5
013392  784A84     MOV.B W4, [W5]
013394  E80F1E     INC [W14], [W14]
18347:             
18348:                 HC05TrmMass[CntBt++]=SteerTiltNumErr;
013396  234D34     MOV #0x34D3, W4
013398  784214     MOV.B [W4], W4
01339A  230CE5     MOV #0x30CE, W5
01339C  42829E     ADD W5, [W14], W5
01339E  784A84     MOV.B W4, [W5]
0133A0  E80F1E     INC [W14], [W14]
18349:             
18350:                 Tmp=StatFlgs.StatusFlags;
0133A2  809744     MOV StatFlgs, W4
0133A4  980714     MOV W4, [W14+2]
18351:                 HC05TrmMass[CntBt++]=Tmp;
0133A6  90021E     MOV [W14+2], W4
0133A8  784204     MOV.B W4, W4
0133AA  230CE5     MOV #0x30CE, W5
0133AC  42829E     ADD W5, [W14], W5
0133AE  784A84     MOV.B W4, [W5]
0133B0  E80F1E     INC [W14], [W14]
18352:                 HC05TrmMass[CntBt++]=Tmp>>8;
0133B2  90021E     MOV [W14+2], W4
0133B4  DEA248     ASR W4, #8, W4
0133B6  784204     MOV.B W4, W4
0133B8  230CE5     MOV #0x30CE, W5
0133BA  42829E     ADD W5, [W14], W5
0133BC  784A84     MOV.B W4, [W5]
0133BE  E80F1E     INC [W14], [W14]
18353:             
18354:                 Tmp=LastMainTiltAngleSteerErr;
0133C0  81A666     MOV LastMainTiltAngleSteerErr, W6
0133C2  980716     MOV W6, [W14+2]
18355:                 HC05TrmMass[CntBt++]=Tmp;
0133C4  90021E     MOV [W14+2], W4
0133C6  784204     MOV.B W4, W4
0133C8  230CE5     MOV #0x30CE, W5
0133CA  42829E     ADD W5, [W14], W5
0133CC  784A84     MOV.B W4, [W5]
0133CE  E80F1E     INC [W14], [W14]
18356:                 HC05TrmMass[CntBt++]=Tmp>>8;
0133D0  90021E     MOV [W14+2], W4
0133D2  DEA248     ASR W4, #8, W4
0133D4  784204     MOV.B W4, W4
0133D6  230CE5     MOV #0x30CE, W5
0133D8  42829E     ADD W5, [W14], W5
0133DA  784A84     MOV.B W4, [W5]
0133DC  E80F1E     INC [W14], [W14]
18357:             
18358:                 Tmp=LastSteerTiltAngleSteerErr;
0133DE  81A674     MOV LastSteerTiltAngleSteerErr, W4
0133E0  980714     MOV W4, [W14+2]
18359:                 HC05TrmMass[CntBt++]=Tmp;
0133E2  90021E     MOV [W14+2], W4
0133E4  784204     MOV.B W4, W4
0133E6  230CE5     MOV #0x30CE, W5
0133E8  42829E     ADD W5, [W14], W5
0133EA  784A84     MOV.B W4, [W5]
0133EC  E80F1E     INC [W14], [W14]
18360:                 HC05TrmMass[CntBt++]=Tmp>>8;
0133EE  90021E     MOV [W14+2], W4
0133F0  DEA248     ASR W4, #8, W4
0133F2  784204     MOV.B W4, W4
0133F4  230CE5     MOV #0x30CE, W5
0133F6  42829E     ADD W5, [W14], W5
0133F8  784A84     MOV.B W4, [W5]
0133FA  E80F1E     INC [W14], [W14]
18361:             
18362:                 Tmp=TiltAngleAvSteerErr;
0133FC  81A686     MOV TiltAngleAvSteerErr, W6
0133FE  980716     MOV W6, [W14+2]
18363:                 HC05TrmMass[CntBt++]=Tmp;
013400  90021E     MOV [W14+2], W4
013402  784204     MOV.B W4, W4
013404  230CE5     MOV #0x30CE, W5
013406  42829E     ADD W5, [W14], W5
013408  784A84     MOV.B W4, [W5]
01340A  E80F1E     INC [W14], [W14]
18364:                 HC05TrmMass[CntBt++]=Tmp>>8;
01340C  90021E     MOV [W14+2], W4
01340E  DEA248     ASR W4, #8, W4
013410  784204     MOV.B W4, W4
013412  230CE5     MOV #0x30CE, W5
013414  42829E     ADD W5, [W14], W5
013416  784A84     MOV.B W4, [W5]
013418  E80F1E     INC [W14], [W14]
18365:             
18366:             
18367:                 HC05TrmMass[CntBt++]=Flgs2Err.Flags;               //Odometr;        12
01341A  809724     MOV Flgs2Err, W4
01341C  809735     MOV 0x12E6, W5
01341E  784204     MOV.B W4, W4
013420  230CE5     MOV #0x30CE, W5
013422  42829E     ADD W5, [W14], W5
013424  784A84     MOV.B W4, [W5]
013426  E80F1E     INC [W14], [W14]
18368:                 HC05TrmMass[CntBt++]=Flgs2Err.Flags>>8;
013428  809724     MOV Flgs2Err, W4
01342A  809735     MOV 0x12E6, W5
01342C  DD2B48     SL W5, #8, W6
01342E  DE2248     LSR W4, #8, W4
013430  730204     IOR W6, W4, W4
013432  DE2AC8     LSR W5, #8, W5
013434  784204     MOV.B W4, W4
013436  230CE5     MOV #0x30CE, W5
013438  42829E     ADD W5, [W14], W5
01343A  784A84     MOV.B W4, [W5]
01343C  E80F1E     INC [W14], [W14]
18369:                 HC05TrmMass[CntBt++]=Flgs2Err.Flags>>16;
01343E  809724     MOV Flgs2Err, W4
013440  809735     MOV 0x12E6, W5
013442  DE2A40     LSR W5, #0, W4
013444  200005     MOV #0x0, W5
013446  784204     MOV.B W4, W4
013448  230CE5     MOV #0x30CE, W5
01344A  42829E     ADD W5, [W14], W5
01344C  784A84     MOV.B W4, [W5]
01344E  E80F1E     INC [W14], [W14]
18370:                 HC05TrmMass[CntBt++]=Flgs2Err.Flags>>24;
013450  809724     MOV Flgs2Err, W4
013452  809735     MOV 0x12E6, W5
013454  DE2A48     LSR W5, #8, W4
013456  200005     MOV #0x0, W5
013458  784204     MOV.B W4, W4
01345A  230CE5     MOV #0x30CE, W5
01345C  42829E     ADD W5, [W14], W5
01345E  784A84     MOV.B W4, [W5]
013460  E80F1E     INC [W14], [W14]
18371:             
18372:                 Tmp=BatErr;
013462  237AE4     MOV #0x37AE, W4
013464  784214     MOV.B [W4], W4
013466  FB8204     ZE W4, W4
013468  980714     MOV W4, [W14+2]
18373:                 HC05TrmMass[CntBt++]=Tmp;
01346A  90021E     MOV [W14+2], W4
01346C  784204     MOV.B W4, W4
01346E  230CE5     MOV #0x30CE, W5
013470  42829E     ADD W5, [W14], W5
013472  784A84     MOV.B W4, [W5]
013474  E80F1E     INC [W14], [W14]
18374:                 HC05TrmMass[CntBt++]=Tmp>>8;
013476  90021E     MOV [W14+2], W4
013478  DEA248     ASR W4, #8, W4
01347A  784204     MOV.B W4, W4
01347C  230CE5     MOV #0x30CE, W5
01347E  42829E     ADD W5, [W14], W5
013480  784A84     MOV.B W4, [W5]
013482  E80F1E     INC [W14], [W14]
18375:             
18376:                 HC05TrmMass[2]=CntBt-3;
013484  78021E     MOV [W14], W4
013486  784204     MOV.B W4, W4
013488  524263     SUB.B W4, #0x3, W4
01348A  230D05     MOV #0x30D0, W5
01348C  784A84     MOV.B W4, [W5]
18377:             
18378:             
18379:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01348E  230D04     MOV #0x30D0, W4
013490  784214     MOV.B [W4], W4
013492  FB8204     ZE W4, W4
013494  E80204     INC W4, W4
013496  230D01     MOV #0x30D0, W1
013498  780004     MOV W4, W0
01349A  07B32D     RCALL CalcCheckSumm
01349C  784200     MOV.B W0, W4
01349E  230CE5     MOV #0x30CE, W5
0134A0  42829E     ADD W5, [W14], W5
0134A2  784A84     MOV.B W4, [W5]
0134A4  E80F1E     INC [W14], [W14]
18380:             
18381:                 MustTrmHC05=1;
0134A6  809634     MOV 0x12C6, W4
0134A8  A09004     BSET W4, #9
0134AA  889634     MOV W4, 0x12C6
0134AC  370007     BRA 0x134BC
18382:             
18383:             
18384:             //    TrmHC05(HC05TrmMass);
18385:             
18386:             
18387:             
18388:             
18389:             }
0134BC  FA8000     ULNK
0134BE  060000     RETURN
18390:             
18391:             
18392:             
18393:             
18394:             
18395:             
18396:             
18397:             
18398:             void SetKpMustBe_UP(void)
18399:             {
0134C0  FA0000     LNK #0x0
0134C2  781F88     MOV W8, [W15++]
18400:                 if (Kp<KpMustBe)
0134C4  809AE6     MOV Kp, W6
0134C6  809AF7     MOV 0x135E, W7
0134C8  809BC4     MOV KpMustBe, W4
0134CA  809BD5     MOV 0x137A, W5
0134CC  B3C018     MOV.B #0x1, W8
0134CE  BE0104     MOV.D W4, W2
0134D0  BE0006     MOV.D W6, W0
0134D2  0224FC     CALL ___lesf2
0134D4  000000     NOP
0134D6  780200     MOV W0, W4
0134D8  520FE0     SUB W4, #0x0, [W15]
0134DA  350001     BRA LT, 0x134DE
0134DC  EB4400     CLR.B W8
0134DE  544FE0     SUB.B W8, #0x0, [W15]
0134E0  320004     BRA Z, 0x134EA
18401:                     KpMustBe_UP=1;
0134E2  809634     MOV 0x12C6, W4
0134E4  A00004     BSET W4, #0
0134E6  889634     MOV W4, 0x12C6
0134E8  370003     BRA 0x134F0
18402:                 else
18403:                     KpMustBe_UP=0;
0134EA  809634     MOV 0x12C6, W4
0134EC  A10004     BCLR W4, #0
0134EE  889634     MOV W4, 0x12C6
18404:             }
0134F0  78044F     MOV [--W15], W8
0134F2  FA8000     ULNK
0134F4  060000     RETURN
18405:             
18406:             
18407:             
18408:             void SetStartRot_UP(void)
18409:             {
0134F6  FA0000     LNK #0x0
18410:                 if (StartRot<StartRotMustBe)
0134F8  815495     MOV StartRot, W5
0134FA  8154D4     MOV StartRotMustBe, W4
0134FC  528F84     SUB W5, W4, [W15]
0134FE  3D0004     BRA GE, 0x13508
18411:                     StartRot_UP=1;
013500  809634     MOV 0x12C6, W4
013502  A01004     BSET W4, #1
013504  889634     MOV W4, 0x12C6
013506  370003     BRA 0x1350E
18412:                 else
18413:                     StartRot_UP=0;
013508  809634     MOV 0x12C6, W4
01350A  A11004     BCLR W4, #1
01350C  889634     MOV W4, 0x12C6
18414:             }
01350E  FA8000     ULNK
013510  060000     RETURN
18415:             void SetKd_UP(void)
18416:             {
013512  FA0000     LNK #0x0
013514  781F88     MOV W8, [W15++]
18417:                 if (Kd<KdMustBe)
013516  821336     MOV Kd, W6
013518  821347     MOV 0x4268, W7
01351A  809C04     MOV KdMustBe, W4
01351C  809C15     MOV 0x1382, W5
01351E  B3C018     MOV.B #0x1, W8
013520  BE0104     MOV.D W4, W2
013522  BE0006     MOV.D W6, W0
013524  0224FC     CALL ___lesf2
013526  000000     NOP
013528  780200     MOV W0, W4
01352A  520FE0     SUB W4, #0x0, [W15]
01352C  350001     BRA LT, 0x13530
01352E  EB4400     CLR.B W8
013530  544FE0     SUB.B W8, #0x0, [W15]
013532  320004     BRA Z, 0x1353C
18418:                     Kd_UP=1;
013534  809664     MOV Flgs4, W4
013536  A06004     BSET W4, #6
013538  889664     MOV W4, Flgs4
01353A  370003     BRA 0x13542
18419:                 else
18420:                     Kd_UP=0;
01353C  809664     MOV Flgs4, W4
01353E  A16004     BCLR W4, #6
013540  889664     MOV W4, Flgs4
18421:             }
013542  78044F     MOV [--W15], W8
013544  FA8000     ULNK
013546  060000     RETURN
18422:             
18423:             void SetKi_UP(void)
18424:             {
013548  FA0000     LNK #0x0
01354A  781F88     MOV W8, [W15++]
18425:                 if (Ki<KiMustBe)
01354C  809B06     MOV Ki, W6
01354E  809B17     MOV 0x1362, W7
013550  809B24     MOV KiMustBe, W4
013552  809B35     MOV 0x1366, W5
013554  B3C018     MOV.B #0x1, W8
013556  BE0104     MOV.D W4, W2
013558  BE0006     MOV.D W6, W0
01355A  0224FC     CALL ___lesf2
01355C  000000     NOP
01355E  780200     MOV W0, W4
013560  520FE0     SUB W4, #0x0, [W15]
013562  350001     BRA LT, 0x13566
013564  EB4400     CLR.B W8
013566  544FE0     SUB.B W8, #0x0, [W15]
013568  320004     BRA Z, 0x13572
18426:                     Ki_UP=1;
01356A  809634     MOV 0x12C6, W4
01356C  A02004     BSET W4, #2
01356E  889634     MOV W4, 0x12C6
013570  370003     BRA 0x13578
18427:                 else
18428:                     Ki_UP=0;
013572  809634     MOV 0x12C6, W4
013574  A12004     BCLR W4, #2
013576  889634     MOV W4, 0x12C6
18429:             }
013578  78044F     MOV [--W15], W8
01357A  FA8000     ULNK
01357C  060000     RETURN
18430:             void SetKRot_UP(void)
18431:             {
01357E  FA0000     LNK #0x0
18432:                 if (KRot<KRotMustBe)
013580  8154A5     MOV KRot, W5
013582  8154B4     MOV KRotMustBe, W4
013584  528F84     SUB W5, W4, [W15]
013586  3D0004     BRA GE, 0x13590
18433:                     KRot_UP=1;
013588  809634     MOV 0x12C6, W4
01358A  A03004     BSET W4, #3
01358C  889634     MOV W4, 0x12C6
01358E  370003     BRA 0x13596
18434:                 else
18435:                     KRot_UP=0;
013590  809634     MOV 0x12C6, W4
013592  A13004     BCLR W4, #3
013594  889634     MOV W4, 0x12C6
18436:             }
013596  FA8000     ULNK
013598  060000     RETURN
18437:             
18438:             void SetKpRot_UP(void)
18439:             {
01359A  FA0000     LNK #0x0
01359C  781F88     MOV W8, [W15++]
18440:                 if (KpRot<KpRotMustBe)
01359E  809C86     MOV KpRot, W6
0135A0  809C97     MOV 0x1392, W7
0135A2  809CA4     MOV KpRotMustBe, W4
0135A4  809CB5     MOV 0x1396, W5
0135A6  B3C018     MOV.B #0x1, W8
0135A8  BE0104     MOV.D W4, W2
0135AA  BE0006     MOV.D W6, W0
0135AC  0224FC     CALL ___lesf2
0135AE  000000     NOP
0135B0  780200     MOV W0, W4
0135B2  520FE0     SUB W4, #0x0, [W15]
0135B4  350001     BRA LT, 0x135B8
0135B6  EB4400     CLR.B W8
0135B8  544FE0     SUB.B W8, #0x0, [W15]
0135BA  320004     BRA Z, 0x135C4
18441:                     KpRot_UP=1;
0135BC  809634     MOV 0x12C6, W4
0135BE  A04004     BSET W4, #4
0135C0  889634     MOV W4, 0x12C6
0135C2  370003     BRA 0x135CA
18442:                 else
18443:                     KpRot_UP=0;
0135C4  809634     MOV 0x12C6, W4
0135C6  A14004     BCLR W4, #4
0135C8  889634     MOV W4, 0x12C6
18444:             }
0135CA  78044F     MOV [--W15], W8
0135CC  FA8000     ULNK
0135CE  060000     RETURN
18445:             
18446:             void SetKiRot_UP(void)
18447:             {
0135D0  FA0000     LNK #0x0
0135D2  781F88     MOV W8, [W15++]
18448:                 if (KiRot<KiRotMustBe)
0135D4  809CE6     MOV KiRot, W6
0135D6  809CF7     MOV 0x139E, W7
0135D8  809D04     MOV KiRotMustBe, W4
0135DA  809D15     MOV 0x13A2, W5
0135DC  B3C018     MOV.B #0x1, W8
0135DE  BE0104     MOV.D W4, W2
0135E0  BE0006     MOV.D W6, W0
0135E2  0224FC     CALL ___lesf2
0135E4  000000     NOP
0135E6  780200     MOV W0, W4
0135E8  520FE0     SUB W4, #0x0, [W15]
0135EA  350001     BRA LT, 0x135EE
0135EC  EB4400     CLR.B W8
0135EE  544FE0     SUB.B W8, #0x0, [W15]
0135F0  320004     BRA Z, 0x135FA
18449:                     KiRot_UP=1;
0135F2  809634     MOV 0x12C6, W4
0135F4  A05004     BSET W4, #5
0135F6  889634     MOV W4, 0x12C6
0135F8  370003     BRA 0x13600
18450:                 else
18451:                     KiRot_UP=0;
0135FA  809634     MOV 0x12C6, W4
0135FC  A15004     BCLR W4, #5
0135FE  889634     MOV W4, 0x12C6
18452:             }
013600  78044F     MOV [--W15], W8
013602  FA8000     ULNK
013604  060000     RETURN
18453:             
18454:             void SetKpSPD_UP(void)
18455:             {
013606  FA0000     LNK #0x0
18456:                 if (KpSPD<KpSPDMustBe)
013608  818135     MOV KpSPD, W5
01360A  818184     MOV KpSPDMustBe, W4
01360C  528F84     SUB W5, W4, [W15]
01360E  310004     BRA C, 0x13618
18457:                     KpSPD_UP=1;
013610  809634     MOV 0x12C6, W4
013612  A0B004     BSET W4, #11
013614  889634     MOV W4, 0x12C6
013616  370003     BRA 0x1361E
18458:                 else
18459:                     KpSPD_UP=0;
013618  809634     MOV 0x12C6, W4
01361A  A1B004     BCLR W4, #11
01361C  889634     MOV W4, 0x12C6
18460:             }
01361E  FA8000     ULNK
013620  060000     RETURN
18461:             
18462:             
18463:             void SetAngleLimit_UP(void)
18464:             {
013622  FA0000     LNK #0x0
18465:                 if (AngleLimit<AngleLimitMustBe)
013624  818245     MOV AngleLimit, W5
013626  818264     MOV AngleLimitMustBe, W4
013628  528F84     SUB W5, W4, [W15]
01362A  3D0004     BRA GE, 0x13634
18466:                     AngleLimit_UP=1;
01362C  809634     MOV 0x12C6, W4
01362E  A0C004     BSET W4, #12
013630  889634     MOV W4, 0x12C6
013632  370003     BRA 0x1363A
18467:                 else
18468:                     AngleLimit_UP=0;
013634  809634     MOV 0x12C6, W4
013636  A1C004     BCLR W4, #12
013638  889634     MOV W4, 0x12C6
18469:             
18470:             }
01363A  FA8000     ULNK
01363C  060000     RETURN
18471:             
18472:             
18473:             
18474:             
18475:             
18476:             
18477:             
18478:             
18479:             
18480:             void DefaultOptions(void)
18481:             {
01363E  FA0006     LNK #0x6
013640  BE9F88     MOV.D W8, [W15++]
18482:                 unsigned char Dr1=0;
013642  EB4200     CLR.B W4
013644  784F04     MOV.B W4, [W14]
18483:                 if (DirPWM1)
013646  809754     MOV StatFlgs1, W4
013648  620261     AND W4, #0x1, W4
01364A  520FE0     SUB W4, #0x0, [W15]
01364C  320002     BRA Z, 0x13652
18484:                     Dr1=1;
01364E  B3C014     MOV.B #0x1, W4
013650  784F04     MOV.B W4, [W14]
18485:                 
18486:                 CurrUstWork=200;
013652  200C84     MOV #0xC8, W4
013654  89F4E4     MOV W4, CurrUstWork
18487:                 
18488:                 AutoPID_On_PWM=20;
013656  240BA5     MOV #0x40BA, W5
013658  B3C144     MOV.B #0x14, W4
01365A  784A84     MOV.B W4, [W5]
18489:                 AutoPID_On_Speed=2;
01365C  240BB5     MOV #0x40BB, W5
01365E  B3C024     MOV.B #0x2, W4
013660  784A84     MOV.B W4, [W5]
18490:                 
18491:                 
18492:                 DefaultProfileOptions();
013662  073C27     RCALL DefaultProfileOptions
18493:                 Profile=1;
013664  237E25     MOV #0x37E2, W5
013666  B3C014     MOV.B #0x1, W4
013668  784A84     MOV.B W4, [W5]
18494:                 MassToOptionsProfile();
01366A  07316F     RCALL MassToOptionsProfile
18495:                 
18496:                 SensorlessSpdChngCntConst=12;
01366C  2000C4     MOV #0xC, W4
01366E  888764     MOV W4, SensorlessSpdChngCntConst
18497:                 SensorlessCntAlignConst=50;
013670  200324     MOV #0x32, W4
013672  897E94     MOV W4, SensorlessCntAlignConst
18498:                 SenosrlessPWM1_1Const=750;
013674  202EE4     MOV #0x2EE, W4
013676  8892F4     MOV W4, SenosrlessPWM1_1Const
18499:                 SensorlessCurrUst=24;
013678  200184     MOV #0x18, W4
01367A  89F4F4     MOV W4, SensorlessCurrUst
18500:                 SensorLessCurrLimit=1;
01367C  200014     MOV #0x1, W4
01367E  88C1B4     MOV W4, SensorLessCurrLimit
18501:                 TemperatureTYPE=0;
013680  210FF5     MOV #0x10FF, W5
013682  EB4200     CLR.B W4
013684  784A84     MOV.B W4, [W5]
18502:                 TemperatureMaxOUT=120;
013686  200004     MOV #0x0, W4
013688  242F05     MOV #0x42F0, W5
01368A  8A0234     MOV W4, TemperatureMaxOUT
01368C  8A0245     MOV W5, 0x4048
18503:                 TemperatureMaxIN=62;
01368E  200004     MOV #0x0, W4
013690  242785     MOV #0x4278, W5
013692  8A0274     MOV W4, TemperatureMaxIN
013694  8A0285     MOV W5, 0x4050
18504:                 
18505:                 SensorllessSpdThreshold=9;
013696  2140B5     MOV #0x140B, W5
013698  B3C094     MOV.B #0x9, W4
01369A  784A84     MOV.B W4, [W5]
18506:                 SensorLessTimerConstConst=60;
01369C  2003C4     MOV #0x3C, W4
01369E  8A0134     MOV W4, SensorLessTimerConstConst
18507:             
18508:                 KiCurr=1;
0136A0  200004     MOV #0x0, W4
0136A2  23F805     MOV #0x3F80, W5
0136A4  89F444     MOV W4, KiCurr
0136A6  89F455     MOV W5, 0x3E8A
18509:                 CurrUst=10000;
0136A8  227104     MOV #0x2710, W4
0136AA  89F494     MOV W4, CurrUst
18510:             
18511:                 But1Func=1;
0136AC  2401C5     MOV #0x401C, W5
0136AE  B3C014     MOV.B #0x1, W4
0136B0  784A84     MOV.B W4, [W5]
18512:                 But2Func=2;
0136B2  2401D5     MOV #0x401D, W5
0136B4  B3C024     MOV.B #0x2, W4
0136B6  784A84     MOV.B W4, [W5]
18513:                 But3Func=3;
0136B8  2401E5     MOV #0x401E, W5
0136BA  B3C034     MOV.B #0x3, W4
0136BC  784A84     MOV.B W4, [W5]
18514:                 But4Func=4;
0136BE  2401F5     MOV #0x401F, W5
0136C0  B3C044     MOV.B #0x4, W4
0136C2  784A84     MOV.B W4, [W5]
18515:                 But5Func=0;
0136C4  240205     MOV #0x4020, W5
0136C6  EB4200     CLR.B W4
0136C8  784A84     MOV.B W4, [W5]
18516:             
18517:             
18518:                 TemperatureMaxOUT_H=130;
0136CA  200004     MOV #0x0, W4
0136CC  243025     MOV #0x4302, W5
0136CE  8A0254     MOV W4, TemperatureMaxOUT_H
0136D0  8A0265     MOV W5, 0x404C
18519:                 TemperatureMaxIN_H=720;
0136D2  200004     MOV #0x0, W4
0136D4  244345     MOV #0x4434, W5
0136D6  8A0294     MOV W4, TemperatureMaxIN_H
0136D8  8A02A5     MOV W5, 0x4054
18520:             
18521:                 HallDelayMem1_F=0;
0136DA  214565     MOV #0x1456, W5
0136DC  EB4200     CLR.B W4
0136DE  784A84     MOV.B W4, [W5]
18522:                 HallDelayMem1_B=0;
0136E0  214575     MOV #0x1457, W5
0136E2  EB4200     CLR.B W4
0136E4  784A84     MOV.B W4, [W5]
18523:             //    HallDelayMem2_F=0;                      EMPTY
18524:             //    HallDelayMem2_B=0;                      EMPTY
18525:             
18526:                 Theta1Zero=31;
0136E6  213FE5     MOV #0x13FE, W5
0136E8  B3C1F4     MOV.B #0x1F, W4
0136EA  784A84     MOV.B W4, [W5]
18527:                 Theta2Zero=31;
0136EC  213FF5     MOV #0x13FF, W5
0136EE  B3C1F4     MOV.B #0x1F, W4
0136F0  784A84     MOV.B W4, [W5]
18528:             
18529:                 BreakThreshold=2000;
0136F2  207D04     MOV #0x7D0, W4
0136F4  889494     MOV W4, BreakThreshold
18530:                 KThreshold=(long int)((((float)MAX_PWM)/(MAX_PWM-BreakThreshold))*256);
0136F6  8212F4     MOV MAX_PWM, W4
0136F8  DEA2CF     ASR W4, #15, W5
0136FA  BE0004     MOV.D W4, W0
0136FC  02257C     CALL ___floatsisf
0136FE  000000     NOP
013700  BE0400     MOV.D W0, W8
013702  8212F5     MOV MAX_PWM, W5
013704  809494     MOV BreakThreshold, W4
013706  528204     SUB W5, W4, W4
013708  DEA2CF     ASR W4, #15, W5
01370A  BE0004     MOV.D W4, W0
01370C  02257C     CALL ___floatsisf
01370E  000000     NOP
013710  BE0200     MOV.D W0, W4
013712  BE0104     MOV.D W4, W2
013714  BE0008     MOV.D W8, W0
013716  02245A     CALL ___divsf3
013718  000000     NOP
01371A  BE0200     MOV.D W0, W4
01371C  200002     MOV #0x0, W2
01371E  243803     MOV #0x4380, W3
013720  BE0004     MOV.D W4, W0
013722  022630     CALL ___mulsf3
013724  000000     NOP
013726  BE0200     MOV.D W0, W4
013728  BE0004     MOV.D W4, W0
01372A  022504     CALL ___fixsfsi
01372C  000000     NOP
01372E  BE0200     MOV.D W0, W4
013730  8A0024     MOV W4, KThreshold
013732  8A0035     MOV W5, 0x4006
18531:                 KThresholdBreak=(long int)((((float)MAX_PWM)/(BreakThreshold))*256);
013734  8212F4     MOV MAX_PWM, W4
013736  DEA2CF     ASR W4, #15, W5
013738  BE0004     MOV.D W4, W0
01373A  02257C     CALL ___floatsisf
01373C  000000     NOP
01373E  BE0400     MOV.D W0, W8
013740  809494     MOV BreakThreshold, W4
013742  DEA2CF     ASR W4, #15, W5
013744  BE0004     MOV.D W4, W0
013746  02257C     CALL ___floatsisf
013748  000000     NOP
01374A  BE0200     MOV.D W0, W4
01374C  BE0104     MOV.D W4, W2
01374E  BE0008     MOV.D W8, W0
013750  02245A     CALL ___divsf3
013752  000000     NOP
013754  BE0200     MOV.D W0, W4
013756  200002     MOV #0x0, W2
013758  243803     MOV #0x4380, W3
01375A  BE0004     MOV.D W4, W0
01375C  022630     CALL ___mulsf3
01375E  000000     NOP
013760  BE0200     MOV.D W0, W4
013762  BE0004     MOV.D W4, W0
013764  022504     CALL ___fixsfsi
013766  000000     NOP
013768  BE0200     MOV.D W0, W4
01376A  8A0044     MOV W4, KThresholdBreak
01376C  8A0055     MOV W5, 0x400A
18532:             
18533:             
18534:                 V_MIN_OFF=2100;
01376E  208344     MOV #0x834, W4
013770  89C3C4     MOV W4, V_MIN_OFF
18535:                 V_MIN_Pre_OFF=2300;
013772  208FC4     MOV #0x8FC, W4
013774  89C3D4     MOV W4, V_MIN_Pre_OFF
18536:                 V_MIN_Sound=2900;
013776  20B544     MOV #0xB54, W4
013778  89C3E4     MOV W4, V_MIN_Sound
18537:                 V_min_OverV=3950;
01377A  20F6E4     MOV #0xF6E, W4
01377C  89C3F4     MOV W4, V_min_OverV
18538:             
18539:                 KFirstBreak=1500;
01377E  205DC4     MOV #0x5DC, W4
013780  8894A4     MOV W4, KFirstBreak
18540:             
18541:             
18542:                 SpeedLimitSt4=4;
013782  230235     MOV #0x3023, W5
013784  B3C044     MOV.B #0x4, W4
013786  784A84     MOV.B W4, [W5]
18543:             
18544:                 
18545:                 
18546:                 
18547:                 
18548:             
18549:             
18550:                 MAH=10000;
013788  227104     MOV #0x2710, W4
01378A  89BD44     MOV W4, MAH
18551:                 SpdRstSpeedLim=8;
01378C  200084     MOV #0x8, W4
01378E  897EF4     MOV W4, SpdRstSpeedLim
18552:             
18553:                 TiltZadState5=100;
013790  200004     MOV #0x0, W4
013792  242C85     MOV #0x42C8, W5
013794  895674     MOV W4, TiltZadState5
013796  895685     MOV W5, 0x2AD0
18554:             
18555:                 SensOrder1=0;
013798  212495     MOV #0x1249, W5
01379A  EB4200     CLR.B W4
01379C  784A84     MOV.B W4, [W5]
18556:             
18557:             
18558:                 KpMustBe=100;
01379E  200004     MOV #0x0, W4
0137A0  242C85     MOV #0x42C8, W5
0137A2  889BC4     MOV W4, KpMustBe
0137A4  889BD5     MOV W5, 0x137A
18559:                 KpNoMan=20;
0137A6  200004     MOV #0x0, W4
0137A8  241A05     MOV #0x41A0, W5
0137AA  889BE4     MOV W4, KpNoMan
0137AC  889BF5     MOV W5, 0x137E
18560:                 KdNoMan=0;
0137AE  B82260     MUL.UU W4, #0, W4
0137B0  889C24     MOV W4, KdNoMan
0137B2  889C35     MOV W5, 0x1386
18561:                 KiNoMan=7;
0137B4  200004     MOV #0x0, W4
0137B6  240E05     MOV #0x40E0, W5
0137B8  889B44     MOV W4, KiNoMan
0137BA  889B55     MOV W5, 0x136A
18562:                 KpKpSpd=0;
0137BC  B82260     MUL.UU W4, #0, W4
0137BE  889884     MOV W4, KpKpSpd
0137C0  889895     MOV W5, 0x1312
18563:                 
18564:                 KGYRO=0.997;
0137C2  23B644     MOV #0x3B64, W4
0137C4  23F7F5     MOV #0x3F7F, W5
0137C6  897DC4     MOV W4, KGYRO
0137C8  897DD5     MOV W5, 0x2FBA
18565:                 KACC=1-KGYRO;
0137CA  817DC4     MOV KGYRO, W4
0137CC  817DD5     MOV 0x2FBA, W5
0137CE  BE0104     MOV.D W4, W2
0137D0  200000     MOV #0x0, W0
0137D2  23F801     MOV #0x3F80, W1
0137D4  0222D0     CALL ___subsf3
0137D6  000000     NOP
0137D8  BE0200     MOV.D W0, W4
0137DA  897DE4     MOV W4, KACC
0137DC  897DF5     MOV W5, 0x2FBE
18566:             
18567:                 
18568:             
18569:             
18570:                 SensorLessTimerConst2=35;
0137DE  200234     MOV #0x23, W4
0137E0  8A0144     MOV W4, SensorLessTimerConst2
18571:                 SenosrlessPWM1_2Const=750;
0137E2  202EE4     MOV #0x2EE, W4
0137E4  889304     MOV W4, SenosrlessPWM1_2Const
18572:                 SensorLessTimerConstMin=12;
0137E6  2000C4     MOV #0xC, W4
0137E8  897EC4     MOV W4, SensorLessTimerConstMin
18573:             
18574:                 CalibrationGyroX=-220;//389;
0137EA  2FF244     MOV #0xFF24, W4
0137EC  895554     MOV W4, CalibrationGyroX
18575:                 CalibrationGyroY=82;//-138;
0137EE  200524     MOV #0x52, W4
0137F0  895564     MOV W4, CalibrationGyroY
18576:                 CalibrationGyroZ=-164;//50;
0137F2  2FF5C4     MOV #0xFF5C, W4
0137F4  895574     MOV W4, CalibrationGyroZ
18577:                 CalibrationAccX=328;
0137F6  201484     MOV #0x148, W4
0137F8  895584     MOV W4, CalibrationAccX
18578:                 CalibrationAccY=143;
0137FA  2008F4     MOV #0x8F, W4
0137FC  895594     MOV W4, CalibrationAccY
18579:                 CalibrationAccZ=990;
0137FE  203DE4     MOV #0x3DE, W4
013800  8955A4     MOV W4, CalibrationAccZ
18580:             
18581:                 MaxSpeed=50;
013802  200324     MOV #0x32, W4
013804  8954C4     MOV W4, MaxSpeed
18582:             
18583:             
18584:                 StartRotNoMan=1015;
013806  203F74     MOV #0x3F7, W4
013808  8954E4     MOV W4, StartRotNoMan
18585:             
18586:                 KFilterPrev=96;
01380A  200604     MOV #0x60, W4
01380C  200005     MOV #0x0, W5
01380E  898054     MOV W4, KFilterPrev
013810  898065     MOV W5, 0x300C
18587:                 KFilter=128-KFilterPrev;
013812  818054     MOV KFilterPrev, W4
013814  818065     MOV 0x300C, W5
013816  200806     MOV #0x80, W6
013818  200007     MOV #0x0, W7
01381A  530204     SUB W6, W4, W4
01381C  5B8285     SUBB W7, W5, W5
01381E  898074     MOV W4, KFilter
013820  898085     MOV W5, 0x3010
18588:                 CurrLimitWork=2;
013822  200024     MOV #0x2, W4
013824  88C1A4     MOV W4, CurrLimitWork
18589:                 if (!Sensorless)
013826  809755     MOV StatFlgs1, W5
013828  200204     MOV #0x20, W4
01382A  628204     AND W5, W4, W4
01382C  520FE0     SUB W4, #0x0, [W15]
01382E  3A0002     BRA NZ, 0x13834
18590:                     CurrLimit=CurrLimitWork;
013830  80C1A4     MOV CurrLimitWork, W4
013832  88C194     MOV W4, CurrLimit
18591:                 ChangeCVR();
013834  07E0DA     RCALL ChangeCVR
18592:             
18593:                 
18594:             
18595:             
18596:                 KpSPDMove=1;
013836  200014     MOV #0x1, W4
013838  898174     MOV W4, KpSPDMove
18597:                 KdSPD=0;
01383A  EB0200     CLR W4
01383C  898144     MOV W4, KdSPD
18598:                 KiSPD=0;
01383E  EB0200     CLR W4
013840  898154     MOV W4, KiSPD
18599:                 AngleLimitMove=4;
013842  200044     MOV #0x4, W4
013844  898274     MOV W4, AngleLimitMove
18600:                 SpeedLimit1=5;
013846  200054     MOV #0x5, W4
013848  898164     MOV W4, SpeedLimit1
18601:             
18602:                 if (Unicycle)
01384A  809745     MOV StatFlgs, W5
01384C  200804     MOV #0x80, W4
01384E  628204     AND W5, W4, W4
013850  520FE0     SUB W4, #0x0, [W15]
013852  320008     BRA Z, 0x13864
18603:                 {
18604:                 StatFlgs.StatusFlags=0x30;
013854  200304     MOV #0x30, W4
013856  889744     MOV W4, StatFlgs
18605:                 Unicycle=1;
013858  809744     MOV StatFlgs, W4
01385A  A07004     BSET W4, #7
01385C  889744     MOV W4, StatFlgs
18606:                 
18607:                 SensorThresholdDn=1000;
01385E  203E84     MOV #0x3E8, W4
013860  889474     MOV W4, SensorThresholdDn
013862  370004     BRA 0x1386C
18608:                 }
18609:                 else
18610:                 {
18611:                 SensorThresholdDn=800;
013864  203204     MOV #0x320, W4
013866  889474     MOV W4, SensorThresholdDn
18612:                 StatFlgs.StatusFlags=0x2214;//0x30;
013868  222144     MOV #0x2214, W4
01386A  889744     MOV W4, StatFlgs
18613:                 
18614:                 }
18615:                 SensorThresholdUp=3200;
01386C  20C804     MOV #0xC80, W4
01386E  889484     MOV W4, SensorThresholdUp
18616:                 
18617:                 UseTmr=0;
013870  2373E5     MOV #0x373E, W5
013872  EB4200     CLR.B W4
013874  784A84     MOV.B W4, [W5]
18618:                 SmoothBreak=1;
013876  809744     MOV StatFlgs, W4
013878  A05004     BSET W4, #5
01387A  889744     MOV W4, StatFlgs
18619:                 
18620:                 CalibrHalls=0;
01387C  809744     MOV StatFlgs, W4
01387E  A1E004     BCLR W4, #14
013880  889744     MOV W4, StatFlgs
18621:             
18622:                 XLimit=30;
013882  2001E4     MOV #0x1E, W4
013884  8982F4     MOV W4, XLimit
18623:                 YLimit=20;
013886  200144     MOV #0x14, W4
013888  898304     MOV W4, YLimit
18624:                 UBatLow=41;
01388A  200294     MOV #0x29, W4
01388C  898324     MOV W4, UBatLow
18625:             #if !defined VECTOR
18626:             #if !defined ISOLATED                               
18627:                                            float UBtFl=(float)UBatLow*(float)38.388;
18628:                                            UBtLim1=(unsigned int)UBtFl;
18629:                                            UBtLim2=UBtLim1+115;
18630:             #else
18631:                                            float UBtFl=(float)UBatLow/(float)0.4167965;
18632:                                            UBtLim1=(unsigned int)UBtFl;
18633:                                            UBtLim2=UBtLim1+7;
18634:             #endif    
18635:             #else
18636:                                            float UBtFl=(float)UBatLow*(float)38.388;
01388E  818324     MOV UBatLow, W4
013890  200005     MOV #0x0, W5
013892  BE0004     MOV.D W4, W0
013894  022582     CALL ___floatunsisf
013896  000000     NOP
013898  BE0200     MOV.D W0, W4
01389A  28D502     MOV #0x8D50, W2
01389C  242193     MOV #0x4219, W3
01389E  BE0004     MOV.D W4, W0
0138A0  022630     CALL ___mulsf3
0138A2  000000     NOP
0138A4  BE0200     MOV.D W0, W4
0138A6  980714     MOV W4, [W14+2]
0138A8  980725     MOV W5, [W14+4]
18637:                                            UBtLim1=(unsigned int)UBtFl;
0138AA  90001E     MOV [W14+2], W0
0138AC  9000AE     MOV [W14+4], W1
0138AE  022546     CALL ___fixunssfsi
0138B0  000000     NOP
0138B2  BE0200     MOV.D W0, W4
0138B4  780204     MOV W4, W4
0138B6  898334     MOV W4, UBtLim1
18638:                                            UBtLim2=UBtLim1+115;
0138B8  818334     MOV UBtLim1, W4
0138BA  B00734     ADD #0x73, W4
0138BC  898344     MOV W4, UBtLim2
18639:             #endif
18640:                 CntMixedModeMax=30;
0138BE  2001E4     MOV #0x1E, W4
0138C0  89FFE4     MOV W4, CntMixedModeMax
18641:                 MixedModeLevelOn=100;
0138C2  200644     MOV #0x64, W4
0138C4  89FFC4     MOV W4, MixedModeLevelOn
18642:                 SpeedLimit2=10;
0138C6  230205     MOV #0x3020, W5
0138C8  B3C0A4     MOV.B #0xA, W4
0138CA  784A84     MOV.B W4, [W5]
18643:                 SpeedLimit3=20;
0138CC  230215     MOV #0x3021, W5
0138CE  B3C144     MOV.B #0x14, W4
0138D0  784A84     MOV.B W4, [W5]
18644:                 NumSpeedLimit=1;
0138D2  230225     MOV #0x3022, W5
0138D4  B3C014     MOV.B #0x1, W4
0138D6  784A84     MOV.B W4, [W5]
18645:                 CurrMixed=25;
0138D8  200194     MOV #0x19, W4
0138DA  89FFF4     MOV W4, CurrMixed
18646:                 KpMax=700;
0138DC  200004     MOV #0x0, W4
0138DE  2442F5     MOV #0x442F, W5
0138E0  889D24     MOV W4, KpMax
0138E2  889D35     MOV W5, 0x13A6
18647:             
18648:                 
18649:                 SpdKpMax=10;
0138E4  2124E5     MOV #0x124E, W5
0138E6  B3C0A4     MOV.B #0xA, W4
0138E8  784A84     MOV.B W4, [W5]
18650:                 MixedModeLevelOff=100;
0138EA  200644     MOV #0x64, W4
0138EC  89FFD4     MOV W4, MixedModeLevelOff
18651:                 KpCurr=0.02;
0138EE  2D70A4     MOV #0xD70A, W4
0138F0  23CA35     MOV #0x3CA3, W5
0138F2  89F464     MOV W4, KpCurr
0138F4  89F475     MOV W5, 0x3E8E
18652:                 Ki_PWM_Mode=10;
0138F6  200004     MOV #0x0, W4
0138F8  241205     MOV #0x4120, W5
0138FA  8982A4     MOV W4, Ki_PWM_Mode
0138FC  8982B5     MOV W5, 0x3056
18653:             
18654:             
18655:                 KpWheelingMem=201;
0138FE  200004     MOV #0x0, W4
013900  243495     MOV #0x4349, W5
013902  889D44     MOV W4, KpWheelingMem
013904  889D55     MOV W5, 0x13AA
18656:                 KpMustBe=KpWheelingMem;
013906  809D44     MOV KpWheelingMem, W4
013908  809D55     MOV 0x13AA, W5
01390A  889BC4     MOV W4, KpMustBe
01390C  889BD5     MOV W5, 0x137A
18657:                 SetKpMustBe_UP();
01390E  07FDD8     RCALL SetKpMustBe_UP
18658:             
18659:             
18660:                 KiWheelingMem=0.55;
013910  2CCCD4     MOV #0xCCCD, W4
013912  23F0C5     MOV #0x3F0C, W5
013914  889B64     MOV W4, KiWheelingMem
013916  889B75     MOV W5, 0x136E
18661:                 KiMustBe=KiWheelingMem;
013918  809B64     MOV KiWheelingMem, W4
01391A  809B75     MOV 0x136E, W5
01391C  889B24     MOV W4, KiMustBe
01391E  889B35     MOV W5, 0x1366
18662:                 SetKi_UP();
013920  07FE13     RCALL SetKi_UP
18663:             
18664:             
18665:                 TiltZadWheeling=-4;
013922  200004     MOV #0x0, W4
013924  2C0805     MOV #0xC080, W5
013926  895694     MOV W4, TiltZadWheeling
013928  8956A5     MOV W5, 0x2AD4
18666:                 TiltZadTmp=TiltZadWheeling;
01392A  815694     MOV TiltZadWheeling, W4
01392C  8156A5     MOV 0x2AD4, W5
01392E  895614     MOV W4, TiltZadTmp
013930  895625     MOV W5, 0x2AC4
18667:             
18668:                 
18669:                 KiTemperIN=1;
013932  200004     MOV #0x0, W4
013934  23F805     MOV #0x3F80, W5
013936  8A0314     MOV W4, KiTemperIN
013938  8A0325     MOV W5, 0x4064
18670:                 KpTemperIN=300;
01393A  200004     MOV #0x0, W4
01393C  243965     MOV #0x4396, W5
01393E  8A0334     MOV W4, KpTemperIN
013940  8A0345     MOV W5, 0x4068
18671:                 KpTemperOUT=300;
013942  200004     MOV #0x0, W4
013944  243965     MOV #0x4396, W5
013946  8A03D4     MOV W4, KpTemperOUT
013948  8A03E5     MOV W5, 0x407C
18672:             
18673:             
18674:             //OneTwoLeg
18675:                 KiTemperOUT=1;//1
01394A  200004     MOV #0x0, W4
01394C  23F805     MOV #0x3F80, W5
01394E  8A03B4     MOV W4, KiTemperOUT
013950  8A03C5     MOV W5, 0x4078
18676:                 MAX_PWM_Revers=30;
013952  2001E4     MOV #0x1E, W4
013954  8899A4     MOV W4, MAX_PWM_Revers
18677:                 MaxSpdRevers=10;
013956  230C65     MOV #0x30C6, W5
013958  B3C0A4     MOV.B #0xA, W4
01395A  784A84     MOV.B W4, [W5]
18678:                     
18679:                     
18680:             
18681:                 if (Unicycle)//4
01395C  809745     MOV StatFlgs, W5
01395E  200804     MOV #0x80, W4
013960  628204     AND W5, W4, W4
013962  520FE0     SUB W4, #0x0, [W15]
013964  320004     BRA Z, 0x1396E
18682:                 KpRotOneTwoLeg=0;
013966  B82260     MUL.UU W4, #0, W4
013968  89A6B4     MOV W4, KpRotOneTwoLeg
01396A  89A6C5     MOV W5, 0x34D8
01396C  370004     BRA 0x13976
18683:                 else
18684:                 KpRotOneTwoLeg=0.12;
01396E  2C28F4     MOV #0xC28F, W4
013970  23DF55     MOV #0x3DF5, W5
013972  89A6B4     MOV W4, KpRotOneTwoLeg
013974  89A6C5     MOV W5, 0x34D8
18685:             
18686:                 if (Unicycle)//5
013976  809745     MOV StatFlgs, W5
013978  200804     MOV #0x80, W4
01397A  628204     AND W5, W4, W4
01397C  520FE0     SUB W4, #0x0, [W15]
01397E  320004     BRA Z, 0x13988
18687:                 KiRotOneTwoLeg=0;
013980  B82260     MUL.UU W4, #0, W4
013982  89A6D4     MOV W4, KiRotOneTwoLeg
013984  89A6E5     MOV W5, 0x34DC
013986  370004     BRA 0x13990
18688:                 else
18689:                 KiRotOneTwoLeg=0.0008;
013988  2B7174     MOV #0xB717, W4
01398A  23A515     MOV #0x3A51, W5
01398C  89A6D4     MOV W4, KiRotOneTwoLeg
01398E  89A6E5     MOV W5, 0x34DC
18690:             
18691:             
18692:                 AutoPID_On_CntConst=1250;
013990  204E24     MOV #0x4E2, W4
013992  8A18B4     MOV W4, AutoPID_On_CntConst
18693:             
18694:             
18695:             
18696:             
18697:                 Diametr1=610;
013994  202624     MOV #0x262, W4
013996  8A1434     MOV W4, Diametr1
18698:                 PhasesPerRev1=138;
013998  2008A4     MOV #0x8A, W4
01399A  8A1424     MOV W4, PhasesPerRev1
18699:                 UBatHiMem=55;
01399C  200374     MOV #0x37, W4
01399E  898354     MOV W4, UBatHiMem
18700:                 UBatHi=(unsigned int)((float)UBatHiMem*(float)38.388);
0139A0  818354     MOV UBatHiMem, W4
0139A2  200005     MOV #0x0, W5
0139A4  BE0004     MOV.D W4, W0
0139A6  022582     CALL ___floatunsisf
0139A8  000000     NOP
0139AA  BE0200     MOV.D W0, W4
0139AC  28D502     MOV #0x8D50, W2
0139AE  242193     MOV #0x4219, W3
0139B0  BE0004     MOV.D W4, W0
0139B2  022630     CALL ___mulsf3
0139B4  000000     NOP
0139B6  BE0200     MOV.D W0, W4
0139B8  BE0004     MOV.D W4, W0
0139BA  022546     CALL ___fixunssfsi
0139BC  000000     NOP
0139BE  BE0200     MOV.D W0, W4
0139C0  780204     MOV W4, W4
0139C2  898364     MOV W4, UBatHi
18701:             
18702:             
18703:             //Fresman
18704:             
18705:             
18706:                 BreakThresholdDn=800;
0139C4  203204     MOV #0x320, W4
0139C6  8894C4     MOV W4, BreakThresholdDn
18707:                 BreakThresholdUp=2900;
0139C8  20B544     MOV #0xB54, W4
0139CA  8894B4     MOV W4, BreakThresholdUp
18708:                 KTemperatureSPDControl=0.01;
0139CC  2D70A4     MOV #0xD70A, W4
0139CE  23C235     MOV #0x3C23, W5
0139D0  89B794     MOV W4, KTemperatureSPDControl
0139D2  89B7A5     MOV W5, 0x36F4
18709:                 Profile=1;
0139D4  237E25     MOV #0x37E2, W5
0139D6  B3C014     MOV.B #0x1, W4
0139D8  784A84     MOV.B W4, [W5]
18710:             
18711:                 CurrPhaseLimitWork=209;
0139DA  200D14     MOV #0xD1, W4
0139DC  89F4D4     MOV W4, CurrPhaseLimitWork
18712:                 StartRotFreshmanL=50;
0139DE  200324     MOV #0x32, W4
0139E0  89B7C4     MOV W4, StartRotFreshmanL
18713:                 CurrUstSpd0=100;
0139E2  200644     MOV #0x64, W4
0139E4  89F4A4     MOV W4, CurrUstSpd0
18714:                 CurrPhaseLimitSpd0=100;
0139E6  200644     MOV #0x64, W4
0139E8  89B7B4     MOV W4, CurrPhaseLimitSpd0
18715:                 CurrLimitSpd0=0;
0139EA  EB0200     CLR W4
0139EC  89B7E4     MOV W4, CurrLimitSpd0
18716:                 MaxAngleStopBreak=4;
0139EE  236FE5     MOV #0x36FE, W5
0139F0  B3C044     MOV.B #0x4, W4
0139F2  784A84     MOV.B W4, [W5]
18717:             
18718:             
18719:                 BeepPauseConstAlm=200;
0139F4  200C84     MOV #0xC8, W4
0139F6  898574     MOV W4, BeepPauseConstAlm
18720:                 BzOnCntSeriaConstAlm=200;
0139F8  200C84     MOV #0xC8, W4
0139FA  8980C4     MOV W4, BzOnCntSeriaConstAlm
18721:                 CntSingleBeepAlm=30;
0139FC  230AA5     MOV #0x30AA, W5
0139FE  B3C1E4     MOV.B #0x1E, W4
013A00  784A84     MOV.B W4, [W5]
18722:             
18723:                 DiffAlfaConstL=3;
013A02  236FF5     MOV #0x36FF, W5
013A04  B3C034     MOV.B #0x3, W4
013A06  784A84     MOV.B W4, [W5]
18724:                 DiffAlfaConstH=5;
013A08  237005     MOV #0x3700, W5
013A0A  B3C054     MOV.B #0x5, W4
013A0C  784A84     MOV.B W4, [W5]
18725:             
18726:                 ZeroCurr1=1018;
013A0E  203FA4     MOV #0x3FA, W4
013A10  889534     MOV W4, ZeroCurr1
18727:                 
18728:             
18729:                 
18730:                 Timer1Mem=5;
013A12  200054     MOV #0x5, W4
013A14  89BA04     MOV W4, Timer1Mem
18731:                 Timer2Mem=10;
013A16  2000A4     MOV #0xA, W4
013A18  89BA14     MOV W4, Timer2Mem
18732:             
18733:                 
18734:             
18735:             
18736:             //OneTwoLeg1
18737:                 
18738:                 
18739:                 SlowStrtSpd=5;
013A1A  240D05     MOV #0x40D0, W5
013A1C  B3C054     MOV.B #0x5, W4
013A1E  784A84     MOV.B W4, [W5]
18740:                 AntiPolicePower=25;
013A20  240D15     MOV #0x40D1, W5
013A22  B3C194     MOV.B #0x19, W4
013A24  784A84     MOV.B W4, [W5]
18741:                 
18742:                 
18743:                 GyroZFlTurn=1000;
013A26  203E84     MOV #0x3E8, W4
013A28  898314     MOV W4, GyroZFlTurn
18744:             
18745:                 
18746:             
18747:             
18748:                 Spd0TimerConst=250;
013A2A  200FA4     MOV #0xFA, W4
013A2C  8A1484     MOV W4, Spd0TimerConst
18749:             
18750:             
18751:                 StartRotOneTwoLeg_1=18;//7
013A2E  200124     MOV #0x12, W4
013A30  89B784     MOV W4, StartRotOneTwoLeg_1
18752:             
18753:             
18754:                 DirPWM1=Dr1;
013A32  78429E     MOV.B [W14], W5
013A34  62C261     AND.B W5, #0x1, W4
013A36  FB8204     ZE W4, W4
013A38  620261     AND W4, #0x1, W4
013A3A  809756     MOV StatFlgs1, W6
013A3C  2FFFE5     MOV #0xFFFE, W5
013A3E  630285     AND W6, W5, W5
013A40  728204     IOR W5, W4, W4
013A42  889754     MOV W4, StatFlgs1
18755:             
18756:             
18757:             
18758:             
18759:                 
18760:                 
18761:                 
18762:             
18763:                 KdOneTwoLeg=0;
013A44  B82260     MUL.UU W4, #0, W4
013A46  889C44     MOV W4, KdOneTwoLeg
013A48  889C55     MOV W5, 0x138A
18764:             
18765:                 
18766:                 Beep_10m=0;
013A4A  809744     MOV StatFlgs, W4
013A4C  A13004     BCLR W4, #3
013A4E  889744     MOV W4, StatFlgs
18767:                 Unicycle=0;
013A50  809744     MOV StatFlgs, W4
013A52  A17004     BCLR W4, #7
013A54  889744     MOV W4, StatFlgs
18768:                 NoAutoTrm=0;
013A56  809744     MOV StatFlgs, W4
013A58  A1A004     BCLR W4, #10
013A5A  889744     MOV W4, StatFlgs
18769:                 SpeedControl=0;
013A5C  809754     MOV StatFlgs1, W4
013A5E  A11004     BCLR W4, #1
013A60  889754     MOV W4, StatFlgs1
18770:                 DoNotTestBMS=1;
013A62  809754     MOV StatFlgs1, W4
013A64  A04004     BSET W4, #4
013A66  889754     MOV W4, StatFlgs1
18771:                 Sensorless=0;
013A68  809754     MOV StatFlgs1, W4
013A6A  A15004     BCLR W4, #5
013A6C  889754     MOV W4, StatFlgs1
18772:                 BreakInvBtn=0;
013A6E  809754     MOV StatFlgs1, W4
013A70  A16004     BCLR W4, #6
013A72  889754     MOV W4, StatFlgs1
18773:                 Tmprt1=0;
013A74  809754     MOV StatFlgs1, W4
013A76  A17004     BCLR W4, #7
013A78  889754     MOV W4, StatFlgs1
18774:                 Tmprt2=0;
013A7A  809754     MOV StatFlgs1, W4
013A7C  A19004     BCLR W4, #9
013A7E  889754     MOV W4, StatFlgs1
18775:                 Tmprt3=0;
013A80  809764     MOV StatFlgs2, W4
013A82  A10004     BCLR W4, #0
013A84  889764     MOV W4, StatFlgs2
18776:                 Tmprt4=0;
013A86  809764     MOV StatFlgs2, W4
013A88  A11004     BCLR W4, #1
013A8A  889764     MOV W4, StatFlgs2
18777:                 Lock=0;
013A8C  809754     MOV StatFlgs1, W4
013A8E  A18004     BCLR W4, #8
013A90  889754     MOV W4, StatFlgs1
18778:                 
18779:                 TrapezoidaRAM1=0;
013A92  809754     MOV StatFlgs1, W4
013A94  A1C004     BCLR W4, #12
013A96  889754     MOV W4, StatFlgs1
18780:                 CURRENT_PROTECTION=1;
013A98  809754     MOV StatFlgs1, W4
013A9A  A0D004     BSET W4, #13
013A9C  889754     MOV W4, StatFlgs1
18781:                 PWM32Bits=1;
013A9E  809754     MOV StatFlgs1, W4
013AA0  A0F004     BSET W4, #15
013AA2  889754     MOV W4, StatFlgs1
18782:                 StrongModeMem=0;
013AA4  809764     MOV StatFlgs2, W4
013AA6  A12004     BCLR W4, #2
013AA8  889764     MOV W4, StatFlgs2
18783:             }
013AAA  BE044F     MOV.D [--W15], W8
013AAC  FA8000     ULNK
013AAE  060000     RETURN
18784:             
18785:             
18786:             void AccToMemALM(void)
18787:             {
013AB0  FA0000     LNK #0x0
18788:                 AlfaXResAlmMem=AlfaXResTmpAlm;
013AB2  815374     MOV AlfaXResTmpAlm, W4
013AB4  8953A4     MOV W4, AlfaXResAlmMem
18789:                 AlfaYResAlmMem=AlfaYResTmpAlm;
013AB6  815384     MOV AlfaYResTmpAlm, W4
013AB8  8953B4     MOV W4, AlfaYResAlmMem
18790:                 AlfaZResAlmMem=AlfaZResTmpAlm;
013ABA  815394     MOV AlfaZResTmpAlm, W4
013ABC  8953C4     MOV W4, AlfaZResAlmMem
18791:             }
013ABE  FA8000     ULNK
013AC0  060000     RETURN
18792:             
18793:             void AlmOn(void)
18794:             {
013AC2  FA0000     LNK #0x0
18795:                 AccToMemALM();
013AC4  07FFF5     RCALL AccToMemALM
18796:                 AlarmOn=1;
013AC6  809634     MOV 0x12C6, W4
013AC8  A0E004     BSET W4, #14
013ACA  889634     MOV W4, 0x12C6
18797:                 HornAlmOn=1;
013ACC  809644     MOV Flgs3, W4
013ACE  A06004     BSET W4, #6
013AD0  889644     MOV W4, Flgs3
18798:                 HorningL=0;
013AD2  809624     MOV Flgs2, W4
013AD4  A1C004     BCLR W4, #12
013AD6  889624     MOV W4, Flgs2
18799:                 HorningH=0;
013AD8  809634     MOV 0x12C6, W4
013ADA  A1F004     BCLR W4, #15
013ADC  889634     MOV W4, 0x12C6
18800:             #if !defined VECTORS
18801:                                 Horn=1;
013ADE  A84E35     BSET 0xE35, #2
18802:             #else
18803:                                 //Horn=0;
18804:                                 OC3R=0;
18805:             #endif
18806:                  SoundNum=12;
013AE0  2124B5     MOV #0x124B, W5
013AE2  B3C0C4     MOV.B #0xC, W4
013AE4  784A84     MOV.B W4, [W5]
18807:                  VectorMem=0;
013AE6  809754     MOV StatFlgs1, W4
013AE8  A1A004     BCLR W4, #10
013AEA  889754     MOV W4, StatFlgs1
18808:             
18809:             }
013AEC  FA8000     ULNK
013AEE  060000     RETURN
18810:             
18811:             void AlmOff(void)
18812:             {
013AF0  FA0000     LNK #0x0
18813:                 AlarmOn=0;
013AF2  809634     MOV 0x12C6, W4
013AF4  A1E004     BCLR W4, #14
013AF6  889634     MOV W4, 0x12C6
18814:                 
18815:             #if !defined VECTORS
18816:                                 Horn=1;
013AF8  A84E35     BSET 0xE35, #2
18817:             #else
18818:                                 //Horn=0;
18819:                                 OC3R=0;
18820:             #endif
18821:                  SoundNum=11;
013AFA  2124B5     MOV #0x124B, W5
013AFC  B3C0B4     MOV.B #0xB, W4
013AFE  784A84     MOV.B W4, [W5]
18822:                  HorningL=0;
013B00  809624     MOV Flgs2, W4
013B02  A1C004     BCLR W4, #12
013B04  889624     MOV W4, Flgs2
18823:                  HorningH=0;
013B06  809634     MOV 0x12C6, W4
013B08  A1F004     BCLR W4, #15
013B0A  889634     MOV W4, 0x12C6
18824:             }
013B0C  FA8000     ULNK
013B0E  060000     RETURN
18825:             
18826:             void Alm(void)
18827:             {
013B10  FA000C     LNK #0xC
18828:             int DiffAlfaX,DiffAlfaY,DiffAlfaZ,DiffAlfa,DiffConstH,DiffConstL;
18829:             
18830:                     if (HvAccData)
013B12  8095E5     MOV Flgs, W5
013B14  220004     MOV #0x2000, W4
013B16  628204     AND W5, W4, W4
013B18  520FE0     SUB W4, #0x0, [W15]
013B1A  320003     BRA Z, 0x13B22
18831:                 {
18832:                     HvAccData=0;
013B1C  8095E4     MOV Flgs, W4
013B1E  A1D004     BCLR W4, #13
013B20  8895E4     MOV W4, Flgs
18833:                 }
18834:             
18835:                 DiffAlfaX=AlfaXResAlmMem-AccXAvRes;
013B22  8153A5     MOV AlfaXResAlmMem, W5
013B24  809544     MOV AccXAvRes, W4
013B26  528F04     SUB W5, W4, [W14]
18836:                 DiffAlfaY=AlfaYResAlmMem-AccYAvRes;
013B28  8153B5     MOV AlfaYResAlmMem, W5
013B2A  809554     MOV AccYAvRes, W4
013B2C  528204     SUB W5, W4, W4
013B2E  980714     MOV W4, [W14+2]
18837:                 DiffAlfaZ=AlfaZResAlmMem-AccZAvRes;
013B30  8153C5     MOV AlfaZResAlmMem, W5
013B32  809564     MOV AccZAvRes, W4
013B34  528204     SUB W5, W4, W4
013B36  980724     MOV W4, [W14+4]
18838:             
18839:                 if (DiffAlfaX<0)
013B38  78021E     MOV [W14], W4
013B3A  520FE0     SUB W4, #0x0, [W15]
013B3C  3D0001     BRA GE, 0x13B40
18840:                     DiffAlfaX=-DiffAlfaX;
013B3E  EA0F1E     NEG [W14], [W14]
18841:                 if (DiffAlfaY<0)
013B40  90021E     MOV [W14+2], W4
013B42  520FE0     SUB W4, #0x0, [W15]
013B44  3D0003     BRA GE, 0x13B4C
18842:                     DiffAlfaY=-DiffAlfaY;
013B46  90021E     MOV [W14+2], W4
013B48  EA0204     NEG W4, W4
013B4A  980714     MOV W4, [W14+2]
18843:                 if (DiffAlfaZ<0)
013B4C  90022E     MOV [W14+4], W4
013B4E  520FE0     SUB W4, #0x0, [W15]
013B50  3D0003     BRA GE, 0x13B58
18844:                     DiffAlfaZ=-DiffAlfaZ;
013B52  90022E     MOV [W14+4], W4
013B54  EA0204     NEG W4, W4
013B56  980724     MOV W4, [W14+4]
18845:             
18846:             
18847:                 DiffAlfa=DiffAlfaX;
013B58  78021E     MOV [W14], W4
013B5A  980734     MOV W4, [W14+6]
18848:                 if (DiffAlfa<DiffAlfaY)
013B5C  9002BE     MOV [W14+6], W5
013B5E  90021E     MOV [W14+2], W4
013B60  528F84     SUB W5, W4, [W15]
013B62  3D0002     BRA GE, 0x13B68
18849:                     DiffAlfa=DiffAlfaY;
013B64  90021E     MOV [W14+2], W4
013B66  980734     MOV W4, [W14+6]
18850:                 if (DiffAlfa<DiffAlfaZ)
013B68  9002BE     MOV [W14+6], W5
013B6A  90022E     MOV [W14+4], W4
013B6C  528F84     SUB W5, W4, [W15]
013B6E  3D0002     BRA GE, 0x13B74
18851:                     DiffAlfa=DiffAlfaZ;
013B70  90022E     MOV [W14+4], W4
013B72  980734     MOV W4, [W14+6]
18852:             
18853:             
18854:                 DiffConstH=((int)DiffAlfaConstH)*100;
013B74  237004     MOV #0x3700, W4
013B76  784214     MOV.B [W4], W4
013B78  FB8284     ZE W4, W5
013B7A  200644     MOV #0x64, W4
013B7C  B82A84     MUL.UU W5, W4, W4
013B7E  980744     MOV W4, [W14+8]
18855:             
18856:                 if (DiffAlfa>DiffConstH)
013B80  9002BE     MOV [W14+6], W5
013B82  90024E     MOV [W14+8], W4
013B84  528F84     SUB W5, W4, [W15]
013B86  340012     BRA LE, 0x13BAC
18857:                 {
18858:                     if (!HorningH)
013B88  809635     MOV 0x12C6, W5
013B8A  280004     MOV #0x8000, W4
013B8C  628204     AND W5, W4, W4
013B8E  520FE0     SUB W4, #0x0, [W15]
013B90  3A000D     BRA NZ, 0x13BAC
013B92  370001     BRA 0x13B96
18859:                     {
18860:             HrnH:            HorningH=1;
013B96  809634     MOV 0x12C6, W4
013B98  A0F004     BSET W4, #15
013B9A  889634     MOV W4, 0x12C6
18861:             
18862:                         if (!Sounds)
013B9C  2124A4     MOV #0x124A, W4
013B9E  784214     MOV.B [W4], W4
013BA0  524FE0     SUB.B W4, #0x0, [W15]
013BA2  3A005C     BRA NZ, 0x13C5C
18863:                      SoundNum=14;
013BA4  2124B5     MOV #0x124B, W5
013BA6  B3C0E4     MOV.B #0xE, W4
013BA8  784A84     MOV.B W4, [W5]
18864:                 
18865:             
18866:                     return;
013BAA  370059     BRA 0x13C5E
013C5C  000000     NOP
18867:                     }
18868:                 }
18869:             
18870:             
18871:             
18872:             
18873:                 DiffAlfaX=AlfaXResAlmMem-AccXFl;
013BAC  8153A5     MOV AlfaXResAlmMem, W5
013BAE  80BD54     MOV AccXFl, W4
013BB0  528F04     SUB W5, W4, [W14]
18874:                 DiffAlfaY=AlfaYResAlmMem-AccYFl;
013BB2  8153B5     MOV AlfaYResAlmMem, W5
013BB4  80BD64     MOV AccYFl, W4
013BB6  528204     SUB W5, W4, W4
013BB8  980714     MOV W4, [W14+2]
18875:                 DiffAlfaZ=AlfaZResAlmMem-AccZFl;
013BBA  8153C5     MOV AlfaZResAlmMem, W5
013BBC  80BD74     MOV AccZFl, W4
013BBE  528204     SUB W5, W4, W4
013BC0  980724     MOV W4, [W14+4]
18876:             
18877:                 if (DiffAlfaX<0)
013BC2  78021E     MOV [W14], W4
013BC4  520FE0     SUB W4, #0x0, [W15]
013BC6  3D0001     BRA GE, 0x13BCA
18878:                     DiffAlfaX=-DiffAlfaX;
013BC8  EA0F1E     NEG [W14], [W14]
18879:                 if (DiffAlfaY<0)
013BCA  90021E     MOV [W14+2], W4
013BCC  520FE0     SUB W4, #0x0, [W15]
013BCE  3D0003     BRA GE, 0x13BD6
18880:                     DiffAlfaY=-DiffAlfaY;
013BD0  90021E     MOV [W14+2], W4
013BD2  EA0204     NEG W4, W4
013BD4  980714     MOV W4, [W14+2]
18881:                 if (DiffAlfaZ<0)
013BD6  90022E     MOV [W14+4], W4
013BD8  520FE0     SUB W4, #0x0, [W15]
013BDA  3D0003     BRA GE, 0x13BE2
18882:                     DiffAlfaZ=-DiffAlfaZ;
013BDC  90022E     MOV [W14+4], W4
013BDE  EA0204     NEG W4, W4
013BE0  980724     MOV W4, [W14+4]
18883:             
18884:             
18885:                 DiffAlfa=DiffAlfaX;
013BE2  78021E     MOV [W14], W4
013BE4  980734     MOV W4, [W14+6]
18886:                 if (DiffAlfa<DiffAlfaY)
013BE6  9002BE     MOV [W14+6], W5
013BE8  90021E     MOV [W14+2], W4
013BEA  528F84     SUB W5, W4, [W15]
013BEC  3D0002     BRA GE, 0x13BF2
18887:                     DiffAlfa=DiffAlfaY;
013BEE  90021E     MOV [W14+2], W4
013BF0  980734     MOV W4, [W14+6]
18888:                 if (DiffAlfa<DiffAlfaZ)
013BF2  9002BE     MOV [W14+6], W5
013BF4  90022E     MOV [W14+4], W4
013BF6  528F84     SUB W5, W4, [W15]
013BF8  3D0002     BRA GE, 0x13BFE
18889:                     DiffAlfa=DiffAlfaZ;
013BFA  90022E     MOV [W14+4], W4
013BFC  980734     MOV W4, [W14+6]
18890:             
18891:             
18892:                 DiffConstL=((int)DiffAlfaConstL)*100;
013BFE  236FF4     MOV #0x36FF, W4
013C00  784214     MOV.B [W4], W4
013C02  FB8284     ZE W4, W5
013C04  200644     MOV #0x64, W4
013C06  B82A84     MUL.UU W5, W4, W4
013C08  980754     MOV W4, [W14+10]
18893:             
18894:                 if (DiffAlfa>DiffConstL)
013C0A  9002BE     MOV [W14+6], W5
013C0C  90025E     MOV [W14+10], W4
013C0E  528F84     SUB W5, W4, [W15]
013C10  340026     BRA LE, 0x13C5E
18895:                 {
18896:                     if ((!HorningL)&&(!HorningH))
013C12  809625     MOV Flgs2, W5
013C14  210004     MOV #0x1000, W4
013C16  628204     AND W5, W4, W4
013C18  520FE0     SUB W4, #0x0, [W15]
013C1A  3A0021     BRA NZ, 0x13C5E
013C1C  809635     MOV 0x12C6, W5
013C1E  280004     MOV #0x8000, W4
013C20  628204     AND W5, W4, W4
013C22  520FE0     SUB W4, #0x0, [W15]
013C24  3A001C     BRA NZ, 0x13C5E
18897:                     {
18898:                         HorningL=1;
013C26  809624     MOV Flgs2, W4
013C28  A0C004     BSET W4, #12
013C2A  889624     MOV W4, Flgs2
18899:                        if (!Sounds)
013C2C  2124A4     MOV #0x124A, W4
013C2E  784214     MOV.B [W4], W4
013C30  524FE0     SUB.B W4, #0x0, [W15]
013C32  3A0003     BRA NZ, 0x13C3A
18900:                      SoundNum=10;
013C34  2124B5     MOV #0x124B, W5
013C36  B3C0A4     MOV.B #0xA, W4
013C38  784A84     MOV.B W4, [W5]
18901:             
18902:                         if (CntHorningL)
013C3A  81B814     MOV CntHorningL, W4
013C3C  520FE0     SUB W4, #0x0, [W15]
013C3E  32000B     BRA Z, 0x13C56
18903:                         {
18904:                             CntHrnL++;
013C40  2373C4     MOV #0x373C, W4
013C42  784214     MOV.B [W4], W4
013C44  E84204     INC.B W4, W4
013C46  2373C5     MOV #0x373C, W5
013C48  784A84     MOV.B W4, [W5]
18905:                             if (CntHrnL>CntHrnLConst)
013C4A  2373C4     MOV #0x373C, W4
013C4C  784294     MOV.B [W4], W5
013C4E  2373D4     MOV #0x373D, W4
013C50  784214     MOV.B [W4], W4
013C52  52CF84     SUB.B W5, W4, [W15]
013C54  3EFF9F     BRA GTU, 0x13B94
18906:                             goto HrnH;
013B94  000000     NOP
18907:                         }
18908:                         CntHorningL=1500;
013C56  205DC4     MOV #0x5DC, W4
013C58  89B814     MOV W4, CntHorningL
013C5A  370001     BRA 0x13C5E
18909:                     }
18910:                 }
18911:             
18912:                 
18913:             }
013C5E  FA8000     ULNK
013C60  060000     RETURN
18914:             
18915:              void Rbw(void)
18916:              {
013C62  FA0008     LNK #0x8
18917:             
18918:                  if (!Robowell)
013C64  809644     MOV Flgs3, W4
013C66  620261     AND W4, #0x1, W4
013C68  520FE0     SUB W4, #0x0, [W15]
013C6A  3200DD     BRA Z, 0x13E26
18919:                      return;
013E26  000000     NOP
013E28  370003     BRA 0x13E30
18920:                  if (OnTransmittHC05)
013C6C  809615     MOV 0x12C2, W5
013C6E  202004     MOV #0x200, W4
013C70  628204     AND W5, W4, W4
013C72  520FE0     SUB W4, #0x0, [W15]
013C74  3A00DA     BRA NZ, 0x13E2A
18921:                      return;
013E2A  000000     NOP
013E2C  370001     BRA 0x13E30
18922:                     if (HC05_BUSY)
013C76  809635     MOV 0x12C6, W5
013C78  204004     MOV #0x400, W4
013C7A  628204     AND W5, W4, W4
013C7C  520FE0     SUB W4, #0x0, [W15]
013C7E  3A00D7     BRA NZ, 0x13E2E
18923:                     return;
013E2E  000000     NOP
18924:                  unsigned int Tm,TmSer=SerNumber;
013C80  81BAA0     MOV SerNumber, W0
013C82  980720     MOV W0, [W14+4]
18925:             
18926:                  
18927:             
18928:                  Str[0]='A';
013C84  237565     MOV #0x3756, W5
013C86  B3C414     MOV.B #0x41, W4
013C88  784A84     MOV.B W4, [W5]
18929:                  Str[1]='T';
013C8A  237575     MOV #0x3757, W5
013C8C  B3C544     MOV.B #0x54, W4
013C8E  784A84     MOV.B W4, [W5]
18930:                  Str[2]='+';
013C90  237585     MOV #0x3758, W5
013C92  B3C2B4     MOV.B #0x2B, W4
013C94  784A84     MOV.B W4, [W5]
18931:                  Str[3]='N';
013C96  237595     MOV #0x3759, W5
013C98  B3C4E4     MOV.B #0x4E, W4
013C9A  784A84     MOV.B W4, [W5]
18932:                  Str[4]='A';
013C9C  2375A5     MOV #0x375A, W5
013C9E  B3C414     MOV.B #0x41, W4
013CA0  784A84     MOV.B W4, [W5]
18933:                  Str[5]='M';
013CA2  2375B5     MOV #0x375B, W5
013CA4  B3C4D4     MOV.B #0x4D, W4
013CA6  784A84     MOV.B W4, [W5]
18934:                  Str[6]='E';
013CA8  2375C5     MOV #0x375C, W5
013CAA  B3C454     MOV.B #0x45, W4
013CAC  784A84     MOV.B W4, [W5]
18935:                  Str[7]='=';
013CAE  2375D5     MOV #0x375D, W5
013CB0  B3C3D4     MOV.B #0x3D, W4
013CB2  784A84     MOV.B W4, [W5]
18936:                  Str[8]='V';
013CB4  2375E5     MOV #0x375E, W5
013CB6  B3C564     MOV.B #0x56, W4
013CB8  784A84     MOV.B W4, [W5]
18937:                  Str[9]='e';
013CBA  2375F5     MOV #0x375F, W5
013CBC  B3C654     MOV.B #0x65, W4
013CBE  784A84     MOV.B W4, [W5]
18938:                  Str[10]='c';
013CC0  237605     MOV #0x3760, W5
013CC2  B3C634     MOV.B #0x63, W4
013CC4  784A84     MOV.B W4, [W5]
18939:                  Str[11]='t';
013CC6  237615     MOV #0x3761, W5
013CC8  B3C744     MOV.B #0x74, W4
013CCA  784A84     MOV.B W4, [W5]
18940:                  Str[12]='o';
013CCC  237625     MOV #0x3762, W5
013CCE  B3C6F4     MOV.B #0x6F, W4
013CD0  784A84     MOV.B W4, [W5]
18941:                  Str[13]='r';
013CD2  237635     MOV #0x3763, W5
013CD4  B3C724     MOV.B #0x72, W4
013CD6  784A84     MOV.B W4, [W5]
18942:                  Str[14]='-';
013CD8  237645     MOV #0x3764, W5
013CDA  B3C2D4     MOV.B #0x2D, W4
013CDC  784A84     MOV.B W4, [W5]
18943:             #if defined VECTORS
18944:                  Str[15]='S';
18945:             #else
18946:                  Str[15]='M';
013CDE  237655     MOV #0x3765, W5
013CE0  B3C4D4     MOV.B #0x4D, W4
013CE2  784A84     MOV.B W4, [W5]
18947:             #endif
18948:                  Str[16]=':';
013CE4  237665     MOV #0x3766, W5
013CE6  B3C3A4     MOV.B #0x3A, W4
013CE8  784A84     MOV.B W4, [W5]
18949:                  Tm=TmSer-(TmSer/10)*10+0x30;
013CEA  9002AE     MOV [W14+4], W5
013CEC  2000A4     MOV #0xA, W4
013CEE  090011     REPEAT #0x11
013CF0  D88284     DIV.UW W5, W4
013CF2  780201     MOV W1, W4
013CF4  B00304     ADD #0x30, W4
013CF6  980734     MOV W4, [W14+6]
18950:                  TmSer=TmSer/10;
013CF8  9002AE     MOV [W14+4], W5
013CFA  2000A4     MOV #0xA, W4
013CFC  090011     REPEAT #0x11
013CFE  D88284     DIV.UW W5, W4
013D00  780200     MOV W0, W4
013D02  980724     MOV W4, [W14+4]
18951:                  Str[21]=Tm;
013D04  90023E     MOV [W14+6], W4
013D06  784204     MOV.B W4, W4
013D08  2376B5     MOV #0x376B, W5
013D0A  784A84     MOV.B W4, [W5]
18952:                  Tm=TmSer-(TmSer/10)*10+0x30;
013D0C  9002AE     MOV [W14+4], W5
013D0E  2000A4     MOV #0xA, W4
013D10  090011     REPEAT #0x11
013D12  D88284     DIV.UW W5, W4
013D14  780201     MOV W1, W4
013D16  B00304     ADD #0x30, W4
013D18  980734     MOV W4, [W14+6]
18953:                  TmSer=TmSer/10;
013D1A  9002AE     MOV [W14+4], W5
013D1C  2000A4     MOV #0xA, W4
013D1E  090011     REPEAT #0x11
013D20  D88284     DIV.UW W5, W4
013D22  780200     MOV W0, W4
013D24  980724     MOV W4, [W14+4]
18954:                  Str[20]=Tm;
013D26  90023E     MOV [W14+6], W4
013D28  784204     MOV.B W4, W4
013D2A  2376A5     MOV #0x376A, W5
013D2C  784A84     MOV.B W4, [W5]
18955:                  Tm=TmSer-(TmSer/10)*10+0x30;
013D2E  9002AE     MOV [W14+4], W5
013D30  2000A4     MOV #0xA, W4
013D32  090011     REPEAT #0x11
013D34  D88284     DIV.UW W5, W4
013D36  780201     MOV W1, W4
013D38  B00304     ADD #0x30, W4
013D3A  980734     MOV W4, [W14+6]
18956:                  TmSer=TmSer/10;
013D3C  9002AE     MOV [W14+4], W5
013D3E  2000A4     MOV #0xA, W4
013D40  090011     REPEAT #0x11
013D42  D88284     DIV.UW W5, W4
013D44  780200     MOV W0, W4
013D46  980724     MOV W4, [W14+4]
18957:                  Str[19]=Tm;
013D48  90023E     MOV [W14+6], W4
013D4A  784204     MOV.B W4, W4
013D4C  237695     MOV #0x3769, W5
013D4E  784A84     MOV.B W4, [W5]
18958:                  Tm=TmSer-(TmSer/10)*10+0x30;
013D50  9002AE     MOV [W14+4], W5
013D52  2000A4     MOV #0xA, W4
013D54  090011     REPEAT #0x11
013D56  D88284     DIV.UW W5, W4
013D58  780201     MOV W1, W4
013D5A  B00304     ADD #0x30, W4
013D5C  980734     MOV W4, [W14+6]
18959:                  TmSer=TmSer/10;
013D5E  9002AE     MOV [W14+4], W5
013D60  2000A4     MOV #0xA, W4
013D62  090011     REPEAT #0x11
013D64  D88284     DIV.UW W5, W4
013D66  780200     MOV W0, W4
013D68  980724     MOV W4, [W14+4]
18960:                  Str[18]=Tm;
013D6A  90023E     MOV [W14+6], W4
013D6C  784204     MOV.B W4, W4
013D6E  237685     MOV #0x3768, W5
013D70  784A84     MOV.B W4, [W5]
18961:                  Tm=TmSer-(TmSer/10)*10+0x30;
013D72  9002AE     MOV [W14+4], W5
013D74  2000A4     MOV #0xA, W4
013D76  090011     REPEAT #0x11
013D78  D88284     DIV.UW W5, W4
013D7A  780201     MOV W1, W4
013D7C  B00304     ADD #0x30, W4
013D7E  980734     MOV W4, [W14+6]
18962:                  TmSer=TmSer/10;
013D80  9002AE     MOV [W14+4], W5
013D82  2000A4     MOV #0xA, W4
013D84  090011     REPEAT #0x11
013D86  D88284     DIV.UW W5, W4
013D88  780200     MOV W0, W4
013D8A  980724     MOV W4, [W14+4]
18963:                  Str[17]=Tm;
013D8C  90023E     MOV [W14+6], W4
013D8E  784204     MOV.B W4, W4
013D90  237675     MOV #0x3767, W5
013D92  784A84     MOV.B W4, [W5]
18964:             
18965:             
18966:             
18967:                  HC05_BUSY=1;
013D94  809634     MOV 0x12C6, W4
013D96  A0A004     BSET W4, #10
013D98  889634     MOV W4, 0x12C6
18968:                  Robowell=0;
013D9A  809644     MOV Flgs3, W4
013D9C  A10004     BCLR W4, #0
013D9E  889644     MOV W4, Flgs3
18969:             #if !defined VECTOR
18970:             #if defined ISOLATED    
18971:                 KEY_BT=1;
18972:             #else
18973:                 KEY_BT=0;
18974:             #endif
18975:             #else
18976:                 KEY_BT=1;
013DA0  A8EE64     BSET LATG, #7
18977:             #endif
18978:                                         Nop();
013DA2  000000     NOP
18979:                                         long int g;
18980:                                         for (g=0;g<150000;g++);
013DA4  B82260     MUL.UU W4, #0, W4
013DA6  BE8F04     MOV.D W4, [W14]
013DA8  370004     BRA 0x13DB2
013DAA  200014     MOV #0x1, W4
013DAC  200005     MOV #0x0, W5
013DAE  420F1E     ADD W4, [W14], [W14]
013DB0  4A975E     ADDC W5, [++W14], [W14--]
013DB2  249EF4     MOV #0x49EF, W4
013DB4  200025     MOV #0x2, W5
013DB6  BE031E     MOV.D [W14], W6
013DB8  530F84     SUB W6, W4, [W15]
013DBA  5B8F85     SUBB W7, W5, [W15]
013DBC  34FFF6     BRA LE, 0x13DAA
18981:                                         HvReplyHC05=0;
013DBE  809614     MOV 0x12C2, W4
013DC0  A1A004     BCLR W4, #10
013DC2  889614     MOV W4, 0x12C2
18982:                                         MyTimeOut=550;
013DC4  202264     MOV #0x226, W4
013DC6  8994C4     MOV W4, MyTimeOut
18983:                                         AT_Rec=1;
013DC8  809614     MOV 0x12C2, W4
013DCA  A0E004     BSET W4, #14
013DCC  889614     MOV W4, 0x12C2
18984:                                         RecMassHC05[0]=3;
013DCE  232345     MOV #0x3234, W5
013DD0  B3C034     MOV.B #0x3, W4
013DD2  784A84     MOV.B W4, [W5]
18985:                                         if (NameRBW)
013DD4  809644     MOV Flgs3, W4
013DD6  620262     AND W4, #0x2, W4
013DD8  520FE0     SUB W4, #0x0, [W15]
013DDA  320003     BRA Z, 0x13DE2
18986:                                      //   TrmHC05_AT("AT+NAME=RoboWell",sizeof("AT+NAME=RoboWell"));
18987:                                             TrmHC05_AT(Str,sizeof(Str)+1);//
013DDC  200171     MOV #0x17, W1
013DDE  237560     MOV #0x3756, W0
013DE0  07EC94     RCALL TrmHC05_AT
18988:                                         if (SpeedRBW)
013DE2  809644     MOV Flgs3, W4
013DE4  620264     AND W4, #0x4, W4
013DE6  520FE0     SUB W4, #0x0, [W15]
013DE8  320004     BRA Z, 0x13DF2
18989:                                         TrmHC05_AT("AT+UART=38400,1,0",sizeof("AT+UART=38400,1,0"));//
013DEA  200121     MOV #0x12, W1
013DEC  2B2B50     MOV #0xB2B5, W0
013DEE  07EC8D     RCALL TrmHC05_AT
18990:             
18991:                                         while ((!HvReplyHC05)&&(MyTimeOut));
013DF0  370001     BRA 0x13DF4
013DF2  000000     NOP
013DF4  809615     MOV 0x12C2, W5
013DF6  204004     MOV #0x400, W4
013DF8  628204     AND W5, W4, W4
013DFA  520FE0     SUB W4, #0x0, [W15]
013DFC  3A0003     BRA NZ, 0x13E04
013DFE  8194C4     MOV MyTimeOut, W4
013E00  520FE0     SUB W4, #0x0, [W15]
013E02  3AFFF8     BRA NZ, 0x13DF4
18992:                                         if (RecMassHC05[0]=='O')
013E04  232344     MOV #0x3234, W4
013E06  784294     MOV.B [W4], W5
013E08  B3C4F4     MOV.B #0x4F, W4
013E0A  52CF84     SUB.B W5, W4, [W15]
013E0C  3A0004     BRA NZ, 0x13E16
18993:                                         {
18994:                                              SoundNum=1;
013E0E  2124B5     MOV #0x124B, W5
013E10  B3C014     MOV.B #0x1, W4
013E12  784A84     MOV.B W4, [W5]
013E14  370003     BRA 0x13E1C
18995:                                             }
18996:                                         else
18997:                                         {
18998:                                             Nop();
013E16  000000     NOP
18999:                                             Nop();
013E18  000000     NOP
19000:                                             Nop();
013E1A  000000     NOP
19001:                                         }
19002:                                         AT_Rec=0;
013E1C  809614     MOV 0x12C2, W4
013E1E  A1E004     BCLR W4, #14
013E20  889614     MOV W4, 0x12C2
19003:             #if !defined VECTOR
19004:             #if defined ISOLATED    
19005:                                         KEY_BT=0;
19006:             #else
19007:                                         KEY_BT=1;
19008:             #endif
19009:             #else
19010:                                         KEY_BT=0;
013E22  A9EE64     BCLR LATG, #7
013E24  370005     BRA 0x13E30
19011:             #endif
19012:             }
013E30  FA8000     ULNK
013E32  060000     RETURN
19013:             
19014:             void GetRbw(void)
19015:              {
013E34  FA0004     LNK #0x4
19016:             
19017:                  if (!GetRobowell)
013E36  809644     MOV Flgs3, W4
013E38  620268     AND W4, #0x8, W4
013E3A  520FE0     SUB W4, #0x0, [W15]
013E3C  32004A     BRA Z, 0x13ED2
19018:                      return;
013ED2  000000     NOP
013ED4  370003     BRA 0x13EDC
19019:                  if (OnTransmittHC05)
013E3E  809615     MOV 0x12C2, W5
013E40  202004     MOV #0x200, W4
013E42  628204     AND W5, W4, W4
013E44  520FE0     SUB W4, #0x0, [W15]
013E46  3A0047     BRA NZ, 0x13ED6
19020:                      return;
013ED6  000000     NOP
013ED8  370001     BRA 0x13EDC
19021:                     if (HC05_BUSY)
013E48  809635     MOV 0x12C6, W5
013E4A  204004     MOV #0x400, W4
013E4C  628204     AND W5, W4, W4
013E4E  520FE0     SUB W4, #0x0, [W15]
013E50  3A0044     BRA NZ, 0x13EDA
19022:                     return;
013EDA  000000     NOP
19023:             
19024:             
19025:                  HC05_BUSY=1;
013E52  809634     MOV 0x12C6, W4
013E54  A0A004     BSET W4, #10
013E56  889634     MOV W4, 0x12C6
19026:                  GetRobowell=0;
013E58  809644     MOV Flgs3, W4
013E5A  A13004     BCLR W4, #3
013E5C  889644     MOV W4, Flgs3
19027:             
19028:             #if !defined VECTOR
19029:             #if defined ISOLATED    
19030:                                         KEY_BT=1;
19031:             #else
19032:                                         KEY_BT=0;
19033:             #endif
19034:             #else
19035:                                         KEY_BT=1;
013E5E  A8EE64     BSET LATG, #7
19036:             #endif
19037:                                         Nop();
013E60  000000     NOP
19038:                                         long int g;
19039:                                         for (g=0;g<150000;g++);
013E62  B82260     MUL.UU W4, #0, W4
013E64  BE8F04     MOV.D W4, [W14]
013E66  370004     BRA 0x13E70
013E68  200014     MOV #0x1, W4
013E6A  200005     MOV #0x0, W5
013E6C  420F1E     ADD W4, [W14], [W14]
013E6E  4A975E     ADDC W5, [++W14], [W14--]
013E70  249EF4     MOV #0x49EF, W4
013E72  200025     MOV #0x2, W5
013E74  BE031E     MOV.D [W14], W6
013E76  530F84     SUB W6, W4, [W15]
013E78  5B8F85     SUBB W7, W5, [W15]
013E7A  34FFF6     BRA LE, 0x13E68
19040:                                         HvReplyHC05=0;
013E7C  809614     MOV 0x12C2, W4
013E7E  A1A004     BCLR W4, #10
013E80  889614     MOV W4, 0x12C2
19041:                                         MyTimeOut=550;
013E82  202264     MOV #0x226, W4
013E84  8994C4     MOV W4, MyTimeOut
19042:                                         AT_Rec=1;
013E86  809614     MOV 0x12C2, W4
013E88  A0E004     BSET W4, #14
013E8A  889614     MOV W4, 0x12C2
19043:                                         RecMassHC05[0]=3;
013E8C  232345     MOV #0x3234, W5
013E8E  B3C034     MOV.B #0x3, W4
013E90  784A84     MOV.B W4, [W5]
19044:                                         if (NameRBW)
013E92  809644     MOV Flgs3, W4
013E94  620262     AND W4, #0x2, W4
013E96  520FE0     SUB W4, #0x0, [W15]
013E98  320003     BRA Z, 0x13EA0
19045:                                         TrmHC05_AT("AT+NAME?",sizeof("AT+NAME?"));//
013E9A  200091     MOV #0x9, W1
013E9C  2B2C70     MOV #0xB2C7, W0
013E9E  07EC35     RCALL TrmHC05_AT
19046:                                         if (SpeedRBW)
013EA0  809644     MOV Flgs3, W4
013EA2  620264     AND W4, #0x4, W4
013EA4  520FE0     SUB W4, #0x0, [W15]
013EA6  320004     BRA Z, 0x13EB0
19047:                                         TrmHC05_AT("AT+UART?",sizeof("AT+UART?"));//
013EA8  200091     MOV #0x9, W1
013EAA  2B2D00     MOV #0xB2D0, W0
013EAC  07EC2E     RCALL TrmHC05_AT
19048:             
19049:                                         while ((!HvReplyHC05)&&(MyTimeOut));
013EAE  370001     BRA 0x13EB2
013EB0  000000     NOP
013EB2  809615     MOV 0x12C2, W5
013EB4  204004     MOV #0x400, W4
013EB6  628204     AND W5, W4, W4
013EB8  520FE0     SUB W4, #0x0, [W15]
013EBA  3A0003     BRA NZ, 0x13EC2
013EBC  8194C4     MOV MyTimeOut, W4
013EBE  520FE0     SUB W4, #0x0, [W15]
013EC0  3AFFF8     BRA NZ, 0x13EB2
19050:                                             Nop();
013EC2  000000     NOP
19051:                                             Nop();
013EC4  000000     NOP
19052:                                             Nop();
013EC6  000000     NOP
19053:                                         AT_Rec=0;
013EC8  809614     MOV 0x12C2, W4
013ECA  A1E004     BCLR W4, #14
013ECC  889614     MOV W4, 0x12C2
19054:             #if !defined VECTOR
19055:             #if defined ISOLATED    
19056:                                         KEY_BT=0;
19057:             #else
19058:                                         KEY_BT=1;
19059:             #endif
19060:             #else
19061:                                         KEY_BT=0;
013ECE  A9EE64     BCLR LATG, #7
013ED0  370005     BRA 0x13EDC
19062:             #endif
19063:             }
013EDC  FA8000     ULNK
013EDE  060000     RETURN
19064:             
19065:             void CalibrateCurr(void)
19066:             {
013EE0  FA0004     LNK #0x4
19067:                 long int tm1;
19068:                 if (!Calibrating)
013EE2  809644     MOV Flgs3, W4
013EE4  620270     AND W4, #0x10, W4
013EE6  520FE0     SUB W4, #0x0, [W15]
013EE8  3A0006     BRA NZ, 0x13EF6
19069:                 {
19070:                     ZeroCurr1Summ=0;
013EEA  B82260     MUL.UU W4, #0, W4
013EEC  889574     MOV W4, ZeroCurr1Summ
013EEE  889585     MOV W5, 0x12B0
19071:                     CntCalibrateCurr=0;
013EF0  EB0200     CLR W4
013EF2  889374     MOV W4, CntCalibrateCurr
013EF4  370036     BRA 0x13F62
19072:                 }
19073:                 else
19074:                 {
19075:                     ZeroCurr1Summ=ZeroCurr1Summ+(long int)Crr1;
013EF6  809524     MOV Crr1, W4
013EF8  B92361     MUL.SU W4, #1, W6
013EFA  809574     MOV ZeroCurr1Summ, W4
013EFC  809585     MOV 0x12B0, W5
013EFE  420206     ADD W4, W6, W4
013F00  4A8287     ADDC W5, W7, W5
013F02  889574     MOV W4, ZeroCurr1Summ
013F04  889585     MOV W5, 0x12B0
19076:                     CntCalibrateCurr++;
013F06  809374     MOV CntCalibrateCurr, W4
013F08  E80204     INC W4, W4
013F0A  889374     MOV W4, CntCalibrateCurr
19077:                     if (CntCalibrateCurr>=1024)
013F0C  809375     MOV CntCalibrateCurr, W5
013F0E  203FF4     MOV #0x3FF, W4
013F10  528F84     SUB W5, W4, [W15]
013F12  360027     BRA LEU, 0x13F62
19078:                     {
19079:                         Calibrating=0;
013F14  809644     MOV Flgs3, W4
013F16  A14004     BCLR W4, #4
013F18  889644     MOV W4, Flgs3
19080:                         tm1=ZeroCurr1Summ>>10;
013F1A  809574     MOV ZeroCurr1Summ, W4
013F1C  809585     MOV 0x12B0, W5
013F1E  DD2B46     SL W5, #6, W6
013F20  DE224A     LSR W4, #10, W4
013F22  730204     IOR W6, W4, W4
013F24  DEAACA     ASR W5, #10, W5
013F26  BE8F04     MOV.D W4, [W14]
19081:                         ZeroCurr1=tm1;
013F28  78021E     MOV [W14], W4
013F2A  889534     MOV W4, ZeroCurr1
19082:                         tm1=tm1<<10;
013F2C  BE031E     MOV.D [W14], W6
013F2E  DD3A4A     SL W7, #10, W4
013F30  DE32C6     LSR W6, #6, W5
013F32  720285     IOR W4, W5, W5
013F34  DD324A     SL W6, #10, W4
013F36  BE8F04     MOV.D W4, [W14]
19083:                         ZeroCurr1Summ=ZeroCurr1Summ-tm1;
013F38  809574     MOV ZeroCurr1Summ, W4
013F3A  809585     MOV 0x12B0, W5
013F3C  52033E     SUB W4, [W14++], W6
013F3E  5A83AE     SUBB W5, [W14--], W7
013F40  BE0206     MOV.D W6, W4
013F42  889574     MOV W4, ZeroCurr1Summ
013F44  889585     MOV W5, 0x12B0
19084:                         if (ZeroCurr1Summ>511)
013F46  809576     MOV ZeroCurr1Summ, W6
013F48  809587     MOV 0x12B0, W7
013F4A  201FF4     MOV #0x1FF, W4
013F4C  200005     MOV #0x0, W5
013F4E  530F84     SUB W6, W4, [W15]
013F50  5B8F85     SUBB W7, W5, [W15]
013F52  340003     BRA LE, 0x13F5A
19085:                         ZeroCurr1++;
013F54  809534     MOV ZeroCurr1, W4
013F56  E80204     INC W4, W4
013F58  889534     MOV W4, ZeroCurr1
19086:             
19087:             
19088:             
19089:                         OptionsToMass();
013F5A  07CC49     RCALL OptionsToMass
19090:                         MustTrmFlashMass=1;
013F5C  8095F4     MOV 0x12BE, W4
013F5E  A02004     BSET W4, #2
013F60  8895F4     MOV W4, 0x12BE
19091:             
19092:                     }
19093:                     
19094:                 }
19095:             
19096:             }
013F62  FA8000     ULNK
013F64  060000     RETURN
19097:             
19098:             void InitSensorsNear(void)
19099:             {
013F66  FA0000     LNK #0x0
19100:             NearSensors[0][0]=0;//_L
013F68  2371C5     MOV #0x371C, W5
013F6A  EB4200     CLR.B W4
013F6C  784A84     MOV.B W4, [W5]
19101:             NearSensors[0][1]=0;//_R
013F6E  2371D5     MOV #0x371D, W5
013F70  EB4200     CLR.B W4
013F72  784A84     MOV.B W4, [W5]
19102:             
19103:             NearSensors[1][0]=5;//1_L
013F74  237205     MOV #0x3720, W5
013F76  B3C054     MOV.B #0x5, W4
013F78  784A84     MOV.B W4, [W5]
19104:             NearSensors[1][1]=3;//1_R
013F7A  237215     MOV #0x3721, W5
013F7C  B3C034     MOV.B #0x3, W4
013F7E  784A84     MOV.B W4, [W5]
19105:             
19106:             NearSensors[2][0]=3;//2_L
013F80  237245     MOV #0x3724, W5
013F82  B3C034     MOV.B #0x3, W4
013F84  784A84     MOV.B W4, [W5]
19107:             NearSensors[2][1]=6;//2_R
013F86  237255     MOV #0x3725, W5
013F88  B3C064     MOV.B #0x6, W4
013F8A  784A84     MOV.B W4, [W5]
19108:             
19109:             NearSensors[3][0]=1;//3_L
013F8C  237285     MOV #0x3728, W5
013F8E  B3C014     MOV.B #0x1, W4
013F90  784A84     MOV.B W4, [W5]
19110:             NearSensors[3][1]=2;//3_R
013F92  237295     MOV #0x3729, W5
013F94  B3C024     MOV.B #0x2, W4
013F96  784A84     MOV.B W4, [W5]
19111:             
19112:             NearSensors[4][0]=6;//4_L
013F98  2372C5     MOV #0x372C, W5
013F9A  B3C064     MOV.B #0x6, W4
013F9C  784A84     MOV.B W4, [W5]
19113:             NearSensors[4][1]=5;//4_R
013F9E  2372D5     MOV #0x372D, W5
013FA0  B3C054     MOV.B #0x5, W4
013FA2  784A84     MOV.B W4, [W5]
19114:             
19115:             NearSensors[5][0]=4;//5_L
013FA4  237305     MOV #0x3730, W5
013FA6  B3C044     MOV.B #0x4, W4
013FA8  784A84     MOV.B W4, [W5]
19116:             NearSensors[5][1]=1;//5_R
013FAA  237315     MOV #0x3731, W5
013FAC  B3C014     MOV.B #0x1, W4
013FAE  784A84     MOV.B W4, [W5]
19117:             
19118:             NearSensors[6][0]=2;//6_L
013FB0  237345     MOV #0x3734, W5
013FB2  B3C024     MOV.B #0x2, W4
013FB4  784A84     MOV.B W4, [W5]
19119:             NearSensors[6][1]=4;//6_R
013FB6  237355     MOV #0x3735, W5
013FB8  B3C044     MOV.B #0x4, W4
013FBA  784A84     MOV.B W4, [W5]
19120:             
19121:             NearSensors[7][0]=255;//_L
013FBC  237385     MOV #0x3738, W5
013FBE  EBC200     SETM.B W4
013FC0  784A84     MOV.B W4, [W5]
19122:             NearSensors[7][1]=255;//_R
013FC2  237395     MOV #0x3739, W5
013FC4  EBC200     SETM.B W4
013FC6  784A84     MOV.B W4, [W5]
19123:             
19124:             }
013FC8  FA8000     ULNK
013FCA  060000     RETURN
19125:             
19126:             void SetTmrConst(void)
19127:             {
013FCC  FA0000     LNK #0x0
19128:                     if (UseTmr==1)
013FCE  2373E4     MOV #0x373E, W4
013FD0  784214     MOV.B [W4], W4
013FD2  524FE1     SUB.B W4, #0x1, [W15]
013FD4  3A0012     BRA NZ, 0x13FFA
19129:                     {
19130:                         TimerConst=Timer1Mem;
013FD6  81BA04     MOV Timer1Mem, W4
013FD8  200005     MOV #0x0, W5
013FDA  89BA84     MOV W4, TimerConst
013FDC  89BA95     MOV W5, 0x3752
19131:                         TimerConst=TimerConst*30000;
013FDE  81BA84     MOV TimerConst, W4
013FE0  81BA95     MOV 0x3752, W5
013FE2  275306     MOV #0x7530, W6
013FE4  B82B86     MUL.UU W5, W6, W6
013FE6  B821E0     MUL.UU W4, #0, W2
013FE8  780382     MOV W2, W7
013FEA  430307     ADD W6, W7, W6
013FEC  780284     MOV W4, W5
013FEE  275304     MOV #0x7530, W4
013FF0  B82A04     MUL.UU W5, W4, W4
013FF2  430305     ADD W6, W5, W6
013FF4  780286     MOV W6, W5
013FF6  89BA84     MOV W4, TimerConst
013FF8  89BA95     MOV W5, 0x3752
19132:                     }
19133:                     if (UseTmr==2)
013FFA  2373E4     MOV #0x373E, W4
013FFC  784214     MOV.B [W4], W4
013FFE  524FE2     SUB.B W4, #0x2, [W15]
014000  3A0012     BRA NZ, 0x14026
19134:                     {
19135:                         TimerConst=Timer2Mem;
014002  81BA14     MOV Timer2Mem, W4
014004  200005     MOV #0x0, W5
014006  89BA84     MOV W4, TimerConst
014008  89BA95     MOV W5, 0x3752
19136:                         TimerConst=TimerConst*30000;
01400A  81BA84     MOV TimerConst, W4
01400C  81BA95     MOV 0x3752, W5
01400E  275306     MOV #0x7530, W6
014010  B82B86     MUL.UU W5, W6, W6
014012  B821E0     MUL.UU W4, #0, W2
014014  780382     MOV W2, W7
014016  430307     ADD W6, W7, W6
014018  780284     MOV W4, W5
01401A  275304     MOV #0x7530, W4
01401C  B82A04     MUL.UU W5, W4, W4
01401E  430305     ADD W6, W5, W6
014020  780286     MOV W6, W5
014022  89BA84     MOV W4, TimerConst
014024  89BA95     MOV W5, 0x3752
19137:                     }
19138:             }
014026  FA8000     ULNK
014028  060000     RETURN
19139:             
19140:             
19141:             
19142:             
19143:             //Init: BytesToRec  StartReceiveBMS  LongForTrmBMS
19144:             
19145:             void DataFrmBMS(void)
19146:             {
01402A  FA0000     LNK #0x0
19147:             #if !defined BMS
19148:                 return;
19149:             #endif
19150:             unsigned char BatErrTmp=BatErr,BMS_V_LowPrev=BMS_V_Low;
19151:             unsigned char *ptr;
19152:             
19153:             
19154:             
19155:               if (((BMS1Err>100)||(BMS2Err>100)||(BMS3Err>100)||(BMS4Err>100)||(BMS5Err>100)))
19156:               {
19157:               BMSErr=1;
19158:               }
19159:             
19160:               if (((BMS1Err<=100)&&(BMS2Err<=100)&&(BMS3Err<=100)&&(BMS4Err<=100)&&(BMS5Err<=100)))
19161:               {
19162:                   BMSErr=0;
19163:               }
19164:             
19165:                 if (DoNotTestBMS)
19166:                   BMSErr=0;
19167:             
19168:                 if (!HvPacketBMS)
19169:                     return;
19170:                 
19171:                 switch (BMSAddrCnt)
19172:                 {
19173:                     case 0:
19174:                         if (GettingStorage)
19175:                         {
19176:             
19177:                             GettingStorage=0;
19178:             
19179:                            ptr=(unsigned char *)&Odometr;
19180:                            *ptr=BMSRecMass[0];
19181:                            ptr++;
19182:                            *ptr=BMSRecMass[1];
19183:                            ptr++;
19184:                            *ptr=BMSRecMass[2];
19185:                            ptr++;
19186:                            *ptr=BMSRecMass[3];
19187:             
19188:                            ptr=(unsigned char *)&Distance;
19189:                            *ptr=BMSRecMass[4];
19190:                            ptr++;
19191:                            *ptr=BMSRecMass[5];
19192:                            ptr++;
19193:                            *ptr=BMSRecMass[6];
19194:                            ptr++;
19195:                            *ptr=BMSRecMass[7];
19196:                     
19197:                            ptr=(unsigned char *)&CurrTuda1;
19198:                            *ptr=BMSRecMass[8];
19199:                            ptr++;
19200:                            *ptr=BMSRecMass[9];
19201:                            ptr++;
19202:                            *ptr=BMSRecMass[10];
19203:                            ptr++;
19204:                            *ptr=BMSRecMass[11];
19205:             
19206:                            ptr=(unsigned char *)&CurrRegen1;
19207:                            *ptr=BMSRecMass[12];
19208:                            ptr++;
19209:                            *ptr=BMSRecMass[13];
19210:                            ptr++;
19211:                            *ptr=BMSRecMass[14];
19212:                            ptr++;
19213:                            *ptr=BMSRecMass[15];
19214:             
19215:                     
19216:                     
19217:                     
19218:             
19219:             
19220:             
19221:             
19222:             
19223:                             HvPacketBMS=0;
19224:                             return;
19225:                         }
19226:                 //    HvPacketBMS=0;
19227:                         BMS1Err=0;
19228:                     V1=BMSRecMass[2];
19229:                     V1=V1<<8;
19230:                     V1=V1+BMSRecMass[1];
19231:                     V1=V1<<8;
19232:                     V1=V1+BMSRecMass[0];
19233:             
19234:                     V2=BMSRecMass[5];
19235:                     V2=V2<<8;
19236:                     V2=V2+BMSRecMass[4];
19237:                     V2=V2<<8;
19238:                     V2=V2+BMSRecMass[3];
19239:             
19240:                     V3=BMSRecMass[8];
19241:                     V3=V3<<8;
19242:                     V3=V3+BMSRecMass[7];
19243:                     V3=V3<<8;
19244:                     V3=V3+BMSRecMass[6];
19245:             
19246:                     V4=BMSRecMass[11];
19247:                     V4=V4<<8;
19248:                     V4=V4+BMSRecMass[10];
19249:                     V4=V4<<8;
19250:                     V4=V4+BMSRecMass[9];
19251:                     BMSAddrCnt=1;
19252:             
19253:                     if (V1&0x800000)
19254:                     BatteryKeys=BatteryKeys|1;
19255:                     else
19256:                     BatteryKeys=BatteryKeys&0xfffffffe;
19257:                     if (V2&0x800000)
19258:                     BatteryKeys=BatteryKeys|2;
19259:                     else
19260:                     BatteryKeys=BatteryKeys&(0xffffffff-2);
19261:                     if (V3&0x800000)
19262:                     BatteryKeys=BatteryKeys|4;
19263:                     else
19264:                     BatteryKeys=BatteryKeys&(0xffffffff-4);
19265:                     if (V4&0x800000)
19266:                     BatteryKeys=BatteryKeys|8;
19267:                     else
19268:                     BatteryKeys=BatteryKeys&(0xffffffff-8);
19269:             
19270:                     if (V1&0x400000)
19271:                     ChagerKeys=ChagerKeys|1;
19272:                     else
19273:                     ChagerKeys=ChagerKeys&0xfffffffe;
19274:             
19275:                     if (V2&0x400000)
19276:                     ChagerKeys=ChagerKeys|2;
19277:                     else
19278:                     ChagerKeys=ChagerKeys&(0xffffffff-2);
19279:             
19280:                     if (V3&0x400000)
19281:                     ChagerKeys=ChagerKeys|4;
19282:                     else
19283:                     ChagerKeys=ChagerKeys&(0xffffffff-4);
19284:             
19285:             
19286:             
19287:                     V1=V1&0x00ffff;
19288:                     V2=V2&0x00ffff;
19289:                     V3=V3&0x00ffff;
19290:                     V4=V4&0x00ffff;
19291:             
19292:             
19293:                     if (V1<V_MIN_OFF)
19294:                     {
19295:                         BatErr=1;
19296:                         BMS_V_Low=1;
19297:                     }
19298:                     else
19299:                     {
19300:             
19301:                     }
19302:                     if (V2<V_MIN_OFF)
19303:                     {
19304:                         BatErr=2;
19305:                         BMS_V_Low=1;
19306:                     }
19307:                     if (V3<V_MIN_OFF)
19308:                     {
19309:                         BatErr=3;
19310:                         BMS_V_Low=1;
19311:                     }
19312:                     if (V4<V_MIN_OFF)
19313:                     {
19314:                         BatErr=4;
19315:                         BMS_V_Low=1;
19316:                     }
19317:             
19318:             
19319:             
19320:             
19321:                     break;
19322:             
19323:                     case 1:
19324:                   //  HvPacketBMS=0;
19325:                         BMS2Err=0;
19326:                     V5=BMSRecMass[2];
19327:                     V5=V5<<8;
19328:                     V5=V5+BMSRecMass[1];
19329:                     V5=V5<<8;
19330:                     V5=V5+BMSRecMass[0];
19331:             
19332:                     V6=BMSRecMass[5];
19333:                     V6=V6<<8;
19334:                     V6=V6+BMSRecMass[4];
19335:                     V6=V6<<8;
19336:                     V6=V6+BMSRecMass[3];
19337:             
19338:                     V7=BMSRecMass[8];
19339:                     V7=V7<<8;
19340:                     V7=V7+BMSRecMass[7];
19341:                     V7=V7<<8;
19342:                     V7=V7+BMSRecMass[6];
19343:             
19344:                     V8=BMSRecMass[11];
19345:                     V8=V8<<8;
19346:                     V8=V8+BMSRecMass[10];
19347:                     V8=V8<<8;
19348:                     V8=V8+BMSRecMass[9];
19349:                     BMSAddrCnt=2;
19350:             
19351:                     if (V5&0x800000)
19352:                     BatteryKeys=BatteryKeys|0x10;
19353:                     else
19354:                     BatteryKeys=BatteryKeys&(0xffffffff-0x10);
19355:                     if (V6&0x800000)
19356:                     BatteryKeys=BatteryKeys|0x20;
19357:                     else
19358:                     BatteryKeys=BatteryKeys&(0xffffffff-0x20);
19359:                     if (V7&0x800000)
19360:                     BatteryKeys=BatteryKeys|0x40;
19361:                     else
19362:                     BatteryKeys=BatteryKeys&(0xffffffff-0x40);
19363:                     if (V8&0x800000)
19364:                     BatteryKeys=BatteryKeys|0x80;
19365:                     else
19366:                     BatteryKeys=BatteryKeys&(0xffffffff-0x80);
19367:             
19368:                     if (V5&0x400000)
19369:                     ChagerKeys=ChagerKeys|8;
19370:                     else
19371:                     ChagerKeys=ChagerKeys&(0xffffffff-0x8);
19372:             
19373:                     V5=V5&0x00ffff;
19374:                     V6=V6&0x00ffff;
19375:                     V7=V7&0x00ffff;
19376:                     V8=V8&0x00ffff;
19377:             
19378:                     if (V5<V_MIN_OFF)
19379:                     {
19380:                         BatErr=5;
19381:                         BMS_V_Low=1;
19382:                     }
19383:                     if (V6<V_MIN_OFF)
19384:                     {
19385:                         BatErr=6;
19386:                         BMS_V_Low=1;
19387:                     }
19388:                     if (V7<V_MIN_OFF)
19389:                     {
19390:                         BatErr=7;
19391:                         BMS_V_Low=1;
19392:                     }
19393:                     if (V8<V_MIN_OFF)
19394:                     {
19395:                         BatErr=8;
19396:                         BMS_V_Low=1;
19397:                     }
19398:             
19399:             
19400:                     break;
19401:                     case 2:
19402:                     //HvPacketBMS=0;
19403:                         BMS3Err=0;
19404:                     V9=BMSRecMass[2];
19405:                     V9=V9<<8;
19406:                     V9=V9+BMSRecMass[1];
19407:                     V9=V9<<8;
19408:                     V9=V9+BMSRecMass[0];
19409:             
19410:                     V10=BMSRecMass[5];
19411:                     V10=V10<<8;
19412:                     V10=V10+BMSRecMass[4];
19413:                     V10=V10<<8;
19414:                     V10=V10+BMSRecMass[3];
19415:             
19416:                     V11=BMSRecMass[8];
19417:                     V11=V11<<8;
19418:                     V11=V11+BMSRecMass[7];
19419:                     V11=V11<<8;
19420:                     V11=V11+BMSRecMass[6];
19421:             
19422:                     V12=BMSRecMass[11];
19423:                     V12=V12<<8;
19424:                     V12=V12+BMSRecMass[10];
19425:                     V12=V12<<8;
19426:                     V12=V12+BMSRecMass[9];
19427:                     BMSAddrCnt=3;
19428:             
19429:                     if (V9&0x800000)
19430:                     BatteryKeys=BatteryKeys|0x100;
19431:                     else
19432:                     BatteryKeys=BatteryKeys&(0xffffffff-0x100);
19433:             
19434:                     if (V10&0x800000)
19435:                     BatteryKeys=BatteryKeys|0x200;
19436:                     else
19437:                     BatteryKeys=BatteryKeys&(0xffffffff-0x200);
19438:             
19439:                     if (V11&0x800000)
19440:                     BatteryKeys=BatteryKeys|0x400;
19441:                     else
19442:                     BatteryKeys=BatteryKeys&(0xffffffff-0x400);
19443:             
19444:                     if (V12&0x800000)
19445:                     BatteryKeys=BatteryKeys|0x800;
19446:                     else
19447:                     BatteryKeys=BatteryKeys&(0xffffffff-0x800);
19448:             
19449:             
19450:                     if (V9&0x400000)
19451:                     ChagerKeys=ChagerKeys|0x10;
19452:                     else
19453:                     ChagerKeys=ChagerKeys&(0xffffffff-0x10);
19454:             
19455:                     V9=V9&0x00ffff;
19456:                     V10=V10&0x00ffff;
19457:                     V11=V11&0x00ffff;
19458:                     V12=V12&0x00ffff;
19459:             
19460:                     if (V9<V_MIN_OFF)
19461:                     {
19462:                         BatErr=9;
19463:                         BMS_V_Low=1;
19464:                     }
19465:                     if (V10<V_MIN_OFF)
19466:                     {
19467:                         BatErr=10;
19468:                         BMS_V_Low=1;
19469:                     }
19470:                     if (V11<V_MIN_OFF)
19471:                     {
19472:                         BatErr=11;
19473:                         BMS_V_Low=1;
19474:                     }
19475:                     if (V12<V_MIN_OFF)
19476:                     {
19477:                         BatErr=12;
19478:                         BMS_V_Low=1;
19479:                     }
19480:             
19481:             
19482:             
19483:                     break;
19484:                     case 3:
19485:                     //HvPacketBMS=0;
19486:                         BMS4Err=0;
19487:                     V13=BMSRecMass[2];
19488:                     V13=V13<<8;
19489:                     V13=V13+BMSRecMass[1];
19490:                     V13=V13<<8;
19491:                     V13=V13+BMSRecMass[0];
19492:             
19493:                     V14=BMSRecMass[5];
19494:                     V14=V14<<8;
19495:                     V14=V14+BMSRecMass[4];
19496:                     V14=V14<<8;
19497:                     V14=V14+BMSRecMass[3];
19498:             
19499:                     V15=BMSRecMass[8];
19500:                     V15=V15<<8;
19501:                     V15=V15+BMSRecMass[7];
19502:                     V15=V15<<8;
19503:                     V15=V15+BMSRecMass[6];
19504:             
19505:                     V16=BMSRecMass[11];
19506:                     V16=V16<<8;
19507:                     V16=V16+BMSRecMass[10];
19508:                     V16=V16<<8;
19509:                     V16=V16+BMSRecMass[9];
19510:                     BMSAddrCnt=4;
19511:             
19512:                     if (V13&0x800000)
19513:                     BatteryKeys=BatteryKeys|0x1000;
19514:                     else
19515:                     BatteryKeys=BatteryKeys&(0xffffffff-0x1000);
19516:             
19517:                     if (V14&0x800000)
19518:                     BatteryKeys=BatteryKeys|0x2000;
19519:                     else
19520:                     BatteryKeys=BatteryKeys&(0xffffffff-0x2000);
19521:             
19522:                     if (V15&0x800000)
19523:                     BatteryKeys=BatteryKeys|0x4000;
19524:                     else
19525:                     BatteryKeys=BatteryKeys&(0xffffffff-0x4000);
19526:             
19527:                     if (V16&0x800000)
19528:                     BatteryKeys=BatteryKeys|0x8000;
19529:                     else
19530:                     BatteryKeys=BatteryKeys&(0xffffffff-0x8000);
19531:             
19532:                     if (V13&0x400000)
19533:                     ChagerKeys=ChagerKeys|0x20;
19534:                     else
19535:                     ChagerKeys=ChagerKeys&(0xffffffff-0x20);
19536:             
19537:                     V13=V13&0x00ffff;
19538:                     V14=V14&0x00ffff;
19539:                     V15=V15&0x00ffff;
19540:                     V16=V16&0x00ffff;
19541:             
19542:             
19543:             
19544:             
19545:                     if (V13<V_MIN_OFF)
19546:                     {
19547:                         BatErr=13;
19548:                         BMS_V_Low=1;
19549:                     }
19550:                     if (V14<V_MIN_OFF)
19551:                     {
19552:                         BatErr=14;
19553:                         BMS_V_Low=1;
19554:                     }
19555:                     if (V15<V_MIN_OFF)
19556:                     {
19557:                         BatErr=15;
19558:                         BMS_V_Low=1;
19559:                     }
19560:                     if (V16<V_MIN_OFF)
19561:                     {
19562:                         BatErr=16;
19563:                         BMS_V_Low=1;
19564:                     }
19565:             
19566:             
19567:                     break;
19568:             
19569:             
19570:                     case 4:
19571:                     //HvPacketBMS=0;
19572:                         BMS5Err=0;
19573:                     V17=BMSRecMass[2];
19574:                     V17=V17<<8;
19575:                     V17=V17+BMSRecMass[1];
19576:                     V17=V17<<8;
19577:                     V17=V17+BMSRecMass[0];
19578:             
19579:                     V18=BMSRecMass[5];
19580:                     V18=V18<<8;
19581:                     V18=V18+BMSRecMass[4];
19582:                     V18=V18<<8;
19583:                     V18=V18+BMSRecMass[3];
19584:             
19585:             
19586:                     if (V17&0x800000)
19587:                     BatteryKeys=BatteryKeys|0x10000;
19588:                     else
19589:                     BatteryKeys=BatteryKeys&(0xffffffff-0x10000);
19590:             
19591:                     if (V18&0x800000)
19592:                     BatteryKeys=BatteryKeys|0x20000;
19593:                     else
19594:                     BatteryKeys=BatteryKeys&(0xffffffff-0x20000);
19595:             
19596:             
19597:                     if (V17&0x400000)
19598:                     ChagerKeys=ChagerKeys|0x40;
19599:                     else
19600:                     ChagerKeys=ChagerKeys&(0xffffffff-0x40);
19601:             
19602:                     V17=V17&0x00ffff;
19603:                     V18=V18&0x00ffff;
19604:             
19605:                     BMSAddrCnt=0;
19606:             
19607:             
19608:             
19609:                     if (V17<V_MIN_OFF)
19610:                     {
19611:                         BatErr=17;
19612:                         BMS_V_Low=1;
19613:                     }
19614:                     if (V18<V_MIN_OFF)
19615:                     {
19616:                         BatErr=18;
19617:                         BMS_V_Low=1;
19618:                     }
19619:             
19620:             
19621:                     break;
19622:             
19623:             
19624:             
19625:             
19626:                 }
19627:             
19628:             Nop();
19629:             Nop();
19630:             Nop();
19631:             
19632:             
19633:             
19634:                 Vmin=V1;
19635:                 if (Vmin>V2)
19636:                     Vmin=V2;
19637:                 if (Vmin>V3)
19638:                     Vmin=V3;
19639:                 if (Vmin>V4)
19640:                     Vmin=V4;
19641:                 if (Vmin>V5)
19642:                     Vmin=V5;
19643:                 if (Vmin>V6)
19644:                     Vmin=V6;
19645:                 if (Vmin>V7)
19646:                     Vmin=V7;
19647:                 if (Vmin>V8)
19648:                     Vmin=V8;
19649:                 if (Vmin>V9)
19650:                     Vmin=V9;
19651:                 if (Vmin>V10)
19652:                     Vmin=V10;
19653:                 if (Vmin>V11)
19654:                     Vmin=V11;
19655:                 if (Vmin>V12)
19656:                     Vmin=V12;
19657:                 if (Vmin>V13)
19658:                     Vmin=V13;
19659:                 if (Vmin>V14)
19660:                     Vmin=V14;
19661:                 if (Vmin>V15)
19662:                     Vmin=V15;
19663:                 if (Vmin>V16)
19664:                     Vmin=V16;
19665:                 if (Vmin>V17)
19666:                     Vmin=V17;
19667:                 if (Vmin>V18)
19668:                     Vmin=V18;
19669:             
19670:             //Vmin=VminTST;
19671:             
19672:                 if (Vmin>2500)
19673:                 StateInd=1;
19674:             
19675:             
19676:             
19677:                 if ((V1>=V_MIN_OFF)&&(V2>=V_MIN_OFF)&&(V3>=V_MIN_OFF)&&(V4>=V_MIN_OFF)&&(V5>=V_MIN_OFF)&&(V6>=V_MIN_OFF)&&(V7>=V_MIN_OFF)&&(V8>=V_MIN_OFF)&&(V9>=V_MIN_OFF)&&(V10>=V_MIN_OFF)&&(V11>=V_MIN_OFF)&&(V12>=V_MIN_OFF)&&(V13>=V_MIN_OFF)&&(V14>=V_MIN_OFF)&&(V15>=V_MIN_OFF)&&(V16>=V_MIN_OFF)&&(V17>=V_MIN_OFF)&&(V18>=V_MIN_OFF))
19678:                         BMS_V_Low=0;
19679:             
19680:                 if ((V1>=V_min_OverV)||(V2>=V_min_OverV)||(V3>=V_min_OverV)||(V4>=V_min_OverV)||(V5>=V_min_OverV)||(V6>=V_min_OverV)||(V7>=V_min_OverV)||(V8>=V_min_OverV)||(V9>=V_min_OverV)||(V10>=V_min_OverV)||(V11>=V_min_OverV)||(V12>=V_min_OverV)||(V13>=V_min_OverV)||(V14>=V_min_OverV)||(V15>=V_min_OverV)||(V16>=V_min_OverV)||(V17>=V_min_OverV)||(V18>=V_min_OverV))
19681:                 {
19682:                        if (!RegenOver3900)
19683:                        {
19684:                        RegenOver3900=1;
19685:                        
19686:                        }
19687:                 }
19688:                 else
19689:                 {
19690:                        if (RegenOver3900)
19691:                        {
19692:                        RegenOver3900=0;
19693:                         if (!Sounds)
19694:                             SoundNum=1;
19695:                         
19696:                        }
19697:                 }
19698:             
19699:             
19700:                 if ((V1>=V_MIN_Sound)&&(V2>=V_MIN_Sound)&&(V3>=V_MIN_Sound)&&(V4>=V_MIN_Sound)&&(V5>=V_MIN_Sound)&&(V6>=V_MIN_Sound)&&(V7>=V_MIN_Sound)&&(V8>=V_MIN_Sound)&&(V9>=V_MIN_Sound)&&(V10>=V_MIN_Sound)&&(V11>=V_MIN_Sound)&&(V12>=V_MIN_Sound)&&(V13>=V_MIN_Sound)&&(V14>=V_MIN_Sound)&&(V15>=V_MIN_Sound)&&(V16>=V_MIN_Sound)&&(V17>=V_MIN_Sound)&&(V18>=V_MIN_Sound))
19701:                         BMS_L=0;
19702:                 else
19703:                 {
19704:                 if ((V1>=V_MIN_Pre_OFF)&&(V2>=V_MIN_Pre_OFF)&&(V3>=V_MIN_Pre_OFF)&&(V4>=V_MIN_Pre_OFF)&&(V5>=V_MIN_Pre_OFF)&&(V6>=V_MIN_Pre_OFF)&&(V7>=V_MIN_Pre_OFF)&&(V8>=V_MIN_Pre_OFF)&&(V9>=V_MIN_Pre_OFF)&&(V10>=V_MIN_Pre_OFF)&&(V11>=V_MIN_Pre_OFF)&&(V12>=V_MIN_Pre_OFF)&&(V13>=V_MIN_Pre_OFF)&&(V14>=V_MIN_Pre_OFF)&&(V15>=V_MIN_Pre_OFF)&&(V16>=V_MIN_Pre_OFF)&&(V17>=V_MIN_Pre_OFF)&&(V18>=V_MIN_Pre_OFF))
19705:                         BMS_L=1;
19706:                 else
19707:                         BMS_L=2;
19708:             
19709:                 }
19710:             
19711:                
19712:                 if (DoNotTestBMS)
19713:                 {
19714:                     BMS_V_Low=0;
19715:                     BMS_L=0;
19716:                 }
19717:             
19718:             
19719:             if ((BatErrTmp!=BatErr)&&(BatErr!=0))
19720:             {
19721:             //WriteErr_Fl=1;
19722:             }
19723:             
19724:             if (RegenOver3900)
19725:             {
19726:                         if (!Sounds)
19727:                             SoundNum=8;
19728:             }
19729:             
19730:             
19731:             
19732:             if (BMS_V_Low)
19733:             {
19734:                         if (!Sounds)
19735:                             SoundNum=8;
19736:             }
19737:             if ((!BMS_V_Low)&&(BMS_V_LowPrev)&&(Sounds!=0))
19738:             {
19739:             Sounds=1;
19740:             }
19741:                 BMSDelayCnt=BMSDelayCnt_CONST;
19742:                 HvPacketBMS=0;
19743:             
19744:             }
01402C  FA8000     ULNK
01402E  060000     RETURN
19745:             
19746:             
19747:             
19748:             
19749:             
19750:             void ErrorSound(void)
19751:             {
014030  FA0000     LNK #0x0
19752:             if ((!Sounds)&&(BMSErr||((!TiltTimoutCnt)&&(!Unicycle))))
014032  2124A4     MOV #0x124A, W4
014034  784214     MOV.B [W4], W4
014036  524FE0     SUB.B W4, #0x0, [W15]
014038  3A0014     BRA NZ, 0x14062
01403A  8096D4     MOV 0x12DA, W4
01403C  620264     AND W4, #0x4, W4
01403E  520FE0     SUB W4, #0x0, [W15]
014040  3A0009     BRA NZ, 0x14054
014042  216D34     MOV #0x16D3, W4
014044  784214     MOV.B [W4], W4
014046  524FE0     SUB.B W4, #0x0, [W15]
014048  3A000C     BRA NZ, 0x14062
01404A  809745     MOV StatFlgs, W5
01404C  200804     MOV #0x80, W4
01404E  628204     AND W5, W4, W4
014050  520FE0     SUB W4, #0x0, [W15]
014052  3A0007     BRA NZ, 0x14062
19753:             {
19754:             if (!Sounds)
014054  2124A4     MOV #0x124A, W4
014056  784214     MOV.B [W4], W4
014058  524FE0     SUB.B W4, #0x0, [W15]
01405A  3A0003     BRA NZ, 0x14062
19755:                     SoundNum=254;
01405C  2124B5     MOV #0x124B, W5
01405E  B3CFE4     MOV.B #0xFE, W4
014060  784A84     MOV.B W4, [W5]
19756:             
19757:             
19758:             }
19759:             if ((Sounds)&&ErrorSnd&&!BMSErr&&TiltTimoutCnt)
014062  2124A4     MOV #0x124A, W4
014064  784214     MOV.B [W4], W4
014066  524FE0     SUB.B W4, #0x0, [W15]
014068  320013     BRA Z, 0x14090
01406A  809655     MOV 0x12CA, W5
01406C  208004     MOV #0x800, W4
01406E  628204     AND W5, W4, W4
014070  520FE0     SUB W4, #0x0, [W15]
014072  32000E     BRA Z, 0x14090
014074  8096D4     MOV 0x12DA, W4
014076  620264     AND W4, #0x4, W4
014078  520FE0     SUB W4, #0x0, [W15]
01407A  3A000A     BRA NZ, 0x14090
01407C  216D34     MOV #0x16D3, W4
01407E  784214     MOV.B [W4], W4
014080  524FE0     SUB.B W4, #0x0, [W15]
014082  320006     BRA Z, 0x14090
19760:             {
19761:                 ErrorSnd=0;
014084  809654     MOV 0x12CA, W4
014086  A1B004     BCLR W4, #11
014088  889654     MOV W4, 0x12CA
19762:                 SoundNum=1;
01408A  2124B5     MOV #0x124B, W5
01408C  B3C014     MOV.B #0x1, W4
01408E  784A84     MOV.B W4, [W5]
19763:             }
19764:             
19765:             
19766:             
19767:             }
014090  FA8000     ULNK
014092  060000     RETURN
19768:             
19769:             
19770:             
19771:             void Dbg(void)
19772:             {
014094  FA0004     LNK #0x4
19773:             unsigned long int TmpO=Odometr/(ImpNa10Metr/10);
014096  818384     MOV Odometr, W4
014098  818395     MOV 0x3072, W5
01409A  BE0004     MOV.D W4, W0
01409C  022582     CALL ___floatunsisf
01409E  000000     NOP
0140A0  BE0200     MOV.D W0, W4
0140A2  2A24E2     MOV #0xA24E, W2
0140A4  242DB3     MOV #0x42DB, W3
0140A6  BE0004     MOV.D W4, W0
0140A8  02245A     CALL ___divsf3
0140AA  000000     NOP
0140AC  BE0200     MOV.D W0, W4
0140AE  BE0004     MOV.D W4, W0
0140B0  022546     CALL ___fixunssfsi
0140B2  000000     NOP
0140B4  BE0200     MOV.D W0, W4
0140B6  BE8F04     MOV.D W4, [W14]
19774:             return;
19775:                 TmpO=TmpO/1000;
19776:                 Nop();
19777:                 Nop();
19778:                 Nop();
19779:                 Nop();
19780:                 Nop();
19781:                 Nop();
19782:                 Nop();
19783:                     if (TmpO>1000)
19784:                     {
19785:                         Nop();
19786:                         Nop();
19787:                         Nop();
19788:                         if (!DbgOdmtr)
19789:                         {
19790:                     {
19791:                     BuzzerOnEvent=9;
19792:                     BuzzerMacroOn//Buzzer=1;
19793:                     }
19794:                         }
19795:                     }
19796:             
19797:             }
0140B8  FA8000     ULNK
0140BA  060000     RETURN
19798:             
19799:             
19800:             
19801:             
19802:             
19803:             unsigned char ChangeSensorOrder(unsigned char Sns,unsigned char SendOrder)
19804:             {
0140BC  FA0004     LNK #0x4
0140BE  984720     MOV.B W0, [W14+2]
0140C0  984731     MOV.B W1, [W14+3]
19805:                 unsigned char SensTmp=Sns;
0140C2  90422E     MOV.B [W14+2], W4
0140C4  784F04     MOV.B W4, [W14]
19806:                 switch (SendOrder)
0140C6  90423E     MOV.B [W14+3], W4
0140C8  FB8204     ZE W4, W4
0140CA  DEA2CF     ASR W4, #15, W5
0140CC  200056     MOV #0x5, W6
0140CE  200007     MOV #0x0, W7
0140D0  520F86     SUB W4, W6, [W15]
0140D2  5A8F87     SUBB W5, W7, [W15]
0140D4  3E0076     BRA GTU, 0x141C2
0140D6  010604     BRA W4
0140D8  370005     BRA 0x140E4
0140DA  370006     BRA 0x140E8
0140DC  370016     BRA 0x1410A
0140DE  37002C     BRA 0x14138
0140E0  370042     BRA 0x14166
0140E2  370058     BRA 0x14194
19807:                 {
19808:                     case 0:
19809:                         return Sns;
0140E4  90422E     MOV.B [W14+2], W4
0140E6  37006E     BRA 0x141C4
19810:                         break;
19811:                     case 1:
19812:                         SensTmp=SensTmp&0x4;
0140E8  78421E     MOV.B [W14], W4
0140EA  624F64     AND.B W4, #0x4, [W14]
19813:             
19814:                         if (Sns&1)              //A -> B
0140EC  90422E     MOV.B [W14+2], W4
0140EE  FB8204     ZE W4, W4
0140F0  620261     AND W4, #0x1, W4
0140F2  784204     MOV.B W4, W4
0140F4  524FE0     SUB.B W4, #0x0, [W15]
0140F6  320001     BRA Z, 0x140FA
19815:                         SensTmp=SensTmp|2;
0140F8  A0141E     BSET.B [W14], #1
19816:             
19817:                         if (Sns&2)              //B -> A
0140FA  90422E     MOV.B [W14+2], W4
0140FC  FB8204     ZE W4, W4
0140FE  620262     AND W4, #0x2, W4
014100  520FE0     SUB W4, #0x0, [W15]
014102  320001     BRA Z, 0x14106
19818:                         SensTmp=SensTmp|1;
014104  A0041E     BSET.B [W14], #0
19819:             
19820:                         return SensTmp;
014106  78421E     MOV.B [W14], W4
014108  37005D     BRA 0x141C4
19821:                         break;
19822:                     case 2:
19823:                         SensTmp=0;
01410A  EB4200     CLR.B W4
01410C  784F04     MOV.B W4, [W14]
19824:             
19825:                         if (Sns&1)              //A -> C
01410E  90422E     MOV.B [W14+2], W4
014110  FB8204     ZE W4, W4
014112  620261     AND W4, #0x1, W4
014114  784204     MOV.B W4, W4
014116  524FE0     SUB.B W4, #0x0, [W15]
014118  320001     BRA Z, 0x1411C
19826:                         SensTmp=SensTmp|4;
01411A  A0241E     BSET.B [W14], #2
19827:             
19828:                         if (Sns&2)              //B -> A
01411C  90422E     MOV.B [W14+2], W4
01411E  FB8204     ZE W4, W4
014120  620262     AND W4, #0x2, W4
014122  520FE0     SUB W4, #0x0, [W15]
014124  320001     BRA Z, 0x14128
19829:                         SensTmp=SensTmp|1;
014126  A0041E     BSET.B [W14], #0
19830:             
19831:                         if (Sns&4)              //C -> B
014128  90422E     MOV.B [W14+2], W4
01412A  FB8204     ZE W4, W4
01412C  620264     AND W4, #0x4, W4
01412E  520FE0     SUB W4, #0x0, [W15]
014130  320001     BRA Z, 0x14134
19832:                         SensTmp=SensTmp|2;
014132  A0141E     BSET.B [W14], #1
19833:             
19834:                         return SensTmp;
014134  78421E     MOV.B [W14], W4
014136  370046     BRA 0x141C4
19835:                         break;
19836:                     case 3:
19837:                         SensTmp=0;
014138  EB4200     CLR.B W4
01413A  784F04     MOV.B W4, [W14]
19838:             
19839:                         if (Sns&1)              //A -> A
01413C  90422E     MOV.B [W14+2], W4
01413E  FB8204     ZE W4, W4
014140  620261     AND W4, #0x1, W4
014142  784204     MOV.B W4, W4
014144  524FE0     SUB.B W4, #0x0, [W15]
014146  320001     BRA Z, 0x1414A
19840:                         SensTmp=SensTmp|1;
014148  A0041E     BSET.B [W14], #0
19841:             
19842:                         if (Sns&2)              //B -> C
01414A  90422E     MOV.B [W14+2], W4
01414C  FB8204     ZE W4, W4
01414E  620262     AND W4, #0x2, W4
014150  520FE0     SUB W4, #0x0, [W15]
014152  320001     BRA Z, 0x14156
19843:                         SensTmp=SensTmp|4;
014154  A0241E     BSET.B [W14], #2
19844:             
19845:                         if (Sns&4)              //C -> B
014156  90422E     MOV.B [W14+2], W4
014158  FB8204     ZE W4, W4
01415A  620264     AND W4, #0x4, W4
01415C  520FE0     SUB W4, #0x0, [W15]
01415E  320001     BRA Z, 0x14162
19846:                         SensTmp=SensTmp|2;
014160  A0141E     BSET.B [W14], #1
19847:             
19848:                         return SensTmp;
014162  78421E     MOV.B [W14], W4
014164  37002F     BRA 0x141C4
19849:                         break;
19850:                     case 4:
19851:                         SensTmp=0;
014166  EB4200     CLR.B W4
014168  784F04     MOV.B W4, [W14]
19852:             
19853:                         if (Sns&1)              //A -> B
01416A  90422E     MOV.B [W14+2], W4
01416C  FB8204     ZE W4, W4
01416E  620261     AND W4, #0x1, W4
014170  784204     MOV.B W4, W4
014172  524FE0     SUB.B W4, #0x0, [W15]
014174  320001     BRA Z, 0x14178
19854:                         SensTmp=SensTmp|2;
014176  A0141E     BSET.B [W14], #1
19855:             
19856:                         if (Sns&2)              //B -> C
014178  90422E     MOV.B [W14+2], W4
01417A  FB8204     ZE W4, W4
01417C  620262     AND W4, #0x2, W4
01417E  520FE0     SUB W4, #0x0, [W15]
014180  320001     BRA Z, 0x14184
19857:                         SensTmp=SensTmp|4;
014182  A0241E     BSET.B [W14], #2
19858:             
19859:                         if (Sns&4)              //C -> A
014184  90422E     MOV.B [W14+2], W4
014186  FB8204     ZE W4, W4
014188  620264     AND W4, #0x4, W4
01418A  520FE0     SUB W4, #0x0, [W15]
01418C  320001     BRA Z, 0x14190
19860:                         SensTmp=SensTmp|1;
01418E  A0041E     BSET.B [W14], #0
19861:             
19862:                         return SensTmp;
014190  78421E     MOV.B [W14], W4
014192  370018     BRA 0x141C4
19863:                         break;
19864:                     case 5:
19865:                         SensTmp=0;
014194  EB4200     CLR.B W4
014196  784F04     MOV.B W4, [W14]
19866:             
19867:                         if (Sns&1)              //A -> C
014198  90422E     MOV.B [W14+2], W4
01419A  FB8204     ZE W4, W4
01419C  620261     AND W4, #0x1, W4
01419E  784204     MOV.B W4, W4
0141A0  524FE0     SUB.B W4, #0x0, [W15]
0141A2  320001     BRA Z, 0x141A6
19868:                         SensTmp=SensTmp|4;
0141A4  A0241E     BSET.B [W14], #2
19869:             
19870:                         if (Sns&2)              //B -> B
0141A6  90422E     MOV.B [W14+2], W4
0141A8  FB8204     ZE W4, W4
0141AA  620262     AND W4, #0x2, W4
0141AC  520FE0     SUB W4, #0x0, [W15]
0141AE  320001     BRA Z, 0x141B2
19871:                         SensTmp=SensTmp|2;
0141B0  A0141E     BSET.B [W14], #1
19872:             
19873:                         if (Sns&4)              //C -> A
0141B2  90422E     MOV.B [W14+2], W4
0141B4  FB8204     ZE W4, W4
0141B6  620264     AND W4, #0x4, W4
0141B8  520FE0     SUB W4, #0x0, [W15]
0141BA  320001     BRA Z, 0x141BE
19874:                         SensTmp=SensTmp|1;
0141BC  A0041E     BSET.B [W14], #0
19875:             
19876:                         return SensTmp;
0141BE  78421E     MOV.B [W14], W4
0141C0  370001     BRA 0x141C4
19877:                         break;
19878:                     default:
19879:                         return 0;
0141C2  EB4200     CLR.B W4
19880:                         break;
19881:             
19882:                 }
19883:             }
0141C4  784004     MOV.B W4, W0
0141C6  FA8000     ULNK
0141C8  060000     RETURN
19884:             
19885:             
19886:             
19887:             void CountSpd(void)
19888:             {
0141CA  FA0000     LNK #0x0
0141CC  781F88     MOV W8, [W15++]
19889:             Spd1KpLevel=(float)SpdKpMax/ImpToKmH1_t;
0141CE  2124E4     MOV #0x124E, W4
0141D0  784214     MOV.B [W4], W4
0141D2  FB8204     ZE W4, W4
0141D4  200005     MOV #0x0, W5
0141D6  BE0004     MOV.D W4, W0
0141D8  022582     CALL ___floatunsisf
0141DA  000000     NOP
0141DC  BE0300     MOV.D W0, W6
0141DE  817E24     MOV ImpToKmH1_t, W4
0141E0  817E35     MOV 0x2FC6, W5
0141E2  BE0104     MOV.D W4, W2
0141E4  BE0006     MOV.D W6, W0
0141E6  02245A     CALL ___divsf3
0141E8  000000     NOP
0141EA  BE0200     MOV.D W0, W4
0141EC  BE0004     MOV.D W4, W0
0141EE  022504     CALL ___fixsfsi
0141F0  000000     NOP
0141F2  BE0200     MOV.D W0, W4
0141F4  780204     MOV W4, W4
0141F6  8A13A4     MOV W4, Spd1KpLevel
19890:             
19891:             MixedModeSlowSpeedFl=((float)MixedModeSlowSpeed)/ImpToKmH1_t;
0141F8  236EA4     MOV #0x36EA, W4
0141FA  784214     MOV.B [W4], W4
0141FC  FB8204     ZE W4, W4
0141FE  200005     MOV #0x0, W5
014200  BE0004     MOV.D W4, W0
014202  022582     CALL ___floatunsisf
014204  000000     NOP
014206  BE0300     MOV.D W0, W6
014208  817E24     MOV ImpToKmH1_t, W4
01420A  817E35     MOV 0x2FC6, W5
01420C  BE0104     MOV.D W4, W2
01420E  BE0006     MOV.D W6, W0
014210  02245A     CALL ___divsf3
014212  000000     NOP
014214  BE0200     MOV.D W0, W4
014216  897FD4     MOV W4, MixedModeSlowSpeedFl
014218  897FE5     MOV W5, 0x2FFC
19892:             
19893:             Spd1Fl=(float)Spd1Res*ImpToKmH1_t;
01421A  817F14     MOV Spd1Res, W4
01421C  DEA2CF     ASR W4, #15, W5
01421E  BE0004     MOV.D W4, W0
014220  02257C     CALL ___floatsisf
014222  000000     NOP
014224  BE0300     MOV.D W0, W6
014226  817E24     MOV ImpToKmH1_t, W4
014228  817E35     MOV 0x2FC6, W5
01422A  BE0104     MOV.D W4, W2
01422C  BE0006     MOV.D W6, W0
01422E  022630     CALL ___mulsf3
014230  000000     NOP
014232  BE0200     MOV.D W0, W4
014234  89C364     MOV W4, Spd1Fl
014236  89C375     MOV W5, 0x386E
19894:             if (Spd1Fl<0)
014238  81C364     MOV Spd1Fl, W4
01423A  81C375     MOV 0x386E, W5
01423C  B3C018     MOV.B #0x1, W8
01423E  B81160     MUL.UU W2, #0, W2
014240  BE0004     MOV.D W4, W0
014242  0224FC     CALL ___lesf2
014244  000000     NOP
014246  780200     MOV W0, W4
014248  520FE0     SUB W4, #0x0, [W15]
01424A  350001     BRA LT, 0x1424E
01424C  EB4400     CLR.B W8
01424E  544FE0     SUB.B W8, #0x0, [W15]
014250  320006     BRA Z, 0x1425E
19895:                 Spd1FlPlus=-Spd1Fl;
014252  81C364     MOV Spd1Fl, W4
014254  81C375     MOV 0x386E, W5
014256  A2F005     BTG W5, #15
014258  89C384     MOV W4, Spd1FlPlus
01425A  89C395     MOV W5, 0x3872
01425C  370004     BRA 0x14266
19896:             else
19897:                 Spd1FlPlus=Spd1Fl;
01425E  81C364     MOV Spd1Fl, W4
014260  81C375     MOV 0x386E, W5
014262  89C384     MOV W4, Spd1FlPlus
014264  89C395     MOV W5, 0x3872
19898:             HvSpdFloat_Fl=1;
014266  809654     MOV 0x12CA, W4
014268  A06004     BSET W4, #6
01426A  889654     MOV W4, 0x12CA
19899:             
19900:              Spd1USTKMH=Spd1UST*ImpToKmH1_t*10;
01426C  817F76     MOV Spd1UST, W6
01426E  817F87     MOV 0x2FF0, W7
014270  817E24     MOV ImpToKmH1_t, W4
014272  817E35     MOV 0x2FC6, W5
014274  BE0104     MOV.D W4, W2
014276  BE0006     MOV.D W6, W0
014278  022630     CALL ___mulsf3
01427A  000000     NOP
01427C  BE0200     MOV.D W0, W4
01427E  200002     MOV #0x0, W2
014280  241203     MOV #0x4120, W3
014282  BE0004     MOV.D W4, W0
014284  022630     CALL ___mulsf3
014286  000000     NOP
014288  BE0200     MOV.D W0, W4
01428A  897FB4     MOV W4, Spd1USTKMH
01428C  897FC5     MOV W5, 0x2FF8
19901:             
19902:             if (Spd1USTKMH<0)
01428E  817FB4     MOV Spd1USTKMH, W4
014290  817FC5     MOV 0x2FF8, W5
014292  B3C018     MOV.B #0x1, W8
014294  B81160     MUL.UU W2, #0, W2
014296  BE0004     MOV.D W4, W0
014298  0224FC     CALL ___lesf2
01429A  000000     NOP
01429C  780200     MOV W0, W4
01429E  520FE0     SUB W4, #0x0, [W15]
0142A0  350001     BRA LT, 0x142A4
0142A2  EB4400     CLR.B W8
0142A4  544FE0     SUB.B W8, #0x0, [W15]
0142A6  320005     BRA Z, 0x142B2
19903:                 Spd1USTKMH=-Spd1USTKMH;
0142A8  817FB4     MOV Spd1USTKMH, W4
0142AA  817FC5     MOV 0x2FF8, W5
0142AC  A2F005     BTG W5, #15
0142AE  897FB4     MOV W4, Spd1USTKMH
0142B0  897FC5     MOV W5, 0x2FF8
19904:             
19905:             
19906:             
19907:              HallDelayMaxSPDNoKMH=((float)HallDelayMaxSPD)/ImpToKmH1_t;
0142B2  237E54     MOV #0x37E5, W4
0142B4  784214     MOV.B [W4], W4
0142B6  FB8204     ZE W4, W4
0142B8  200005     MOV #0x0, W5
0142BA  BE0004     MOV.D W4, W0
0142BC  022582     CALL ___floatunsisf
0142BE  000000     NOP
0142C0  BE0300     MOV.D W0, W6
0142C2  817E24     MOV ImpToKmH1_t, W4
0142C4  817E35     MOV 0x2FC6, W5
0142C6  BE0104     MOV.D W4, W2
0142C8  BE0006     MOV.D W6, W0
0142CA  02245A     CALL ___divsf3
0142CC  000000     NOP
0142CE  BE0200     MOV.D W0, W4
0142D0  89BE44     MOV W4, HallDelayMaxSPDNoKMH
0142D2  89BE55     MOV W5, 0x37CA
19908:             
19909:             K_HallDelay=((float)(HallDelay1MaxSPD_F-HallDelayMem1_F))/HallDelayMaxSPDNoKMH;
0142D4  237E34     MOV #0x37E3, W4
0142D6  784214     MOV.B [W4], W4
0142D8  FB0284     SE W4, W5
0142DA  214564     MOV #0x1456, W4
0142DC  784214     MOV.B [W4], W4
0142DE  FB0204     SE W4, W4
0142E0  528204     SUB W5, W4, W4
0142E2  DEA2CF     ASR W4, #15, W5
0142E4  BE0004     MOV.D W4, W0
0142E6  02257C     CALL ___floatsisf
0142E8  000000     NOP
0142EA  BE0300     MOV.D W0, W6
0142EC  81BE44     MOV HallDelayMaxSPDNoKMH, W4
0142EE  81BE55     MOV 0x37CA, W5
0142F0  BE0104     MOV.D W4, W2
0142F2  BE0006     MOV.D W6, W0
0142F4  02245A     CALL ___divsf3
0142F6  000000     NOP
0142F8  BE0200     MOV.D W0, W4
0142FA  8898A4     MOV W4, K_HallDelay
0142FC  8898B5     MOV W5, 0x1316
19910:             
19911:             
19912:             #if !defined VECTOR
19913:             if (HvUBT)
19914:             {
19915:                 HvUBT=0;
19916:                 UBT=((float)UBT)*1.043956;
19917:             }
19918:             #endif
19919:             
19920:             }
0142FE  78044F     MOV [--W15], W8
014300  FA8000     ULNK
014302  060000     RETURN
19921:             
19922:             
19923:             
19924:             
19925:             void SoundNoBMS(void)
19926:             {
014304  FA0000     LNK #0x0
19927:             if (Sounds==0)
014306  2124A4     MOV #0x124A, W4
014308  784214     MOV.B [W4], W4
01430A  524FE0     SUB.B W4, #0x0, [W15]
01430C  3A0003     BRA NZ, 0x14314
19928:             {
19929:                 SoundNum=8;
01430E  2124B5     MOV #0x124B, W5
014310  B3C084     MOV.B #0x8, W4
014312  784A84     MOV.B W4, [W5]
19930:             }
19931:             
19932:             }
014314  FA8000     ULNK
014316  060000     RETURN
19933:             
19934:             
19935:             void VectorInit(void)
19936:             {
014318  FA0000     LNK #0x0
19937:                 MAX_PWM=MAX_PWM_CONST;
01431A  8092D4     MOV MAX_PWM_CONST, W4
01431C  8A12F4     MOV W4, MAX_PWM
19938:                 if (MAX_PWM==0)
01431E  8212F4     MOV MAX_PWM, W4
014320  520FE0     SUB W4, #0x0, [W15]
014322  320029     BRA Z, 0x14376
19939:                     return;
014376  000000     NOP
19940:                 Vector=1;
014324  809684     MOV Flgs5, W4
014326  A04004     BSET W4, #4
014328  889684     MOV W4, Flgs5
19941:                 IPC22bits.U4RXIP = 7;
01432A  804364     MOV IPC22, W4
01432C  A00004     BSET W4, #0
01432E  A01004     BSET W4, #1
014330  A02004     BSET W4, #2
014332  884364     MOV W4, IPC22
19942:                 IPC20bits.U3RXIP = 7;
014334  804344     MOV IPC20, W4
014336  A08004     BSET W4, #8
014338  A09004     BSET W4, #9
01433A  A0A004     BSET W4, #10
01433C  884344     MOV W4, IPC20
19943:                 IPC2bits.T3IP = 7;
01433E  804224     MOV IPC2, W4
014340  A00004     BSET W4, #0
014342  A01004     BSET W4, #1
014344  A02004     BSET W4, #2
014346  884224     MOV W4, IPC2
19944:                 IPC5bits.AD2IP=0;
014348  804254     MOV IPC5, W4
01434A  A14004     BCLR W4, #4
01434C  A15004     BCLR W4, #5
01434E  A16004     BCLR W4, #6
014350  884254     MOV W4, IPC5
19945:                 IEC1bits.AD2IE=0;
014352  A9A822     BCLR IEC1, #5
19946:             
19947:                 
19948:                 T4_5Init();
014354  070013     RCALL T4_5Init
19949:                 T8Init();
014356  0700C3     RCALL T8Init
19950:                 
19951:                          
19952:                 if (SIN_MIDDLE)
014358  809765     MOV StatFlgs2, W5
01435A  240004     MOV #0x4000, W4
01435C  628204     AND W5, W4, W4
01435E  520FE0     SUB W4, #0x0, [W15]
014360  320003     BRA Z, 0x14368
19953:                     StrongMode=1;
014362  8095F4     MOV 0x12BE, W4
014364  A0E004     BSET W4, #14
014366  8895F4     MOV W4, 0x12BE
19954:                 
19955:                 SensorlessInitialized=0;
014368  809694     MOV 0x12D2, W4
01436A  A15004     BCLR W4, #5
01436C  889694     MOV W4, 0x12D2
19956:                 InitPWM_Vector();
01436E  070140     RCALL InitPWM_Vector
19957:                 
19958:                     AD2CON1=0;
014370  EB0200     CLR W4
014372  881B04     MOV W4, AD2CON1
014374  370001     BRA 0x14378
19959:             
19960:             }
014378  FA8000     ULNK
01437A  060000     RETURN
19961:             
19962:             
19963:             
19964:             void T4_5Init(void)
19965:             {
01437C  FA0000     LNK #0x0
19966:              T5CONbits.TON = 0; // Stop any 16-bit Timer3 operation
01437E  A9E121     BCLR 0x121, #7
19967:             T4CONbits.TON = 0; // Stop any 16/32-bit Timer3 operation
014380  A9E11F     BCLR 0x11F, #7
19968:             T4CONbits.T32 = 1; // Enable 32-bit Timer mode
014382  A8611E     BSET T4CON, #3
19969:             T4CONbits.TCS = 0; // Select internal instruction cycle clock
014384  A9211E     BCLR T4CON, #1
19970:             T4CONbits.TGATE = 0; // Disable Gated Timer mode
014386  A9C11E     BCLR T4CON, #6
19971:             T4CONbits.TCKPS = 0b00; // Select 1:1 Prescaler
014388  8008F4     MOV T4CON, W4
01438A  A14004     BCLR W4, #4
01438C  A15004     BCLR W4, #5
01438E  8808F4     MOV W4, T4CON
19972:             TMR5 = 0x00; // Clear 32-bit Timer (msw)
014390  EB0200     CLR W4
014392  8808C4     MOV W4, TMR5
19973:             TMR4 = 0x00; // Clear 32-bit Timer (lsw)
014394  EB0200     CLR W4
014396  8808A4     MOV W4, TMR4
19974:             PR4 = 0x2d00; // Load 32-bit period value (lsw)
014398  22D004     MOV #0x2D00, W4
01439A  8808D4     MOV W4, PR4
19975:             PR5 = 0x131; // Load 32-bit period value (msw)
01439C  201314     MOV #0x131, W4
01439E  8808E4     MOV W4, PR5
19976:             IPC7bits.T5IP = 0x01; // Set Timer3 Interrupt Priority Level
0143A0  804274     MOV IPC7, W4
0143A2  A00004     BSET W4, #0
0143A4  A11004     BCLR W4, #1
0143A6  A12004     BCLR W4, #2
0143A8  884274     MOV W4, IPC7
19977:             IFS1bits.T5IF = 0; // Clear Timer3 Interrupt Flag
0143AA  A98803     BCLR 0x803, #4
19978:             IEC1bits.T5IE = 1; // Enable Timer3 interrupt
0143AC  A88823     BSET 0x823, #4
19979:             T4CONbits.TON = 1; // Start 32-bit Timer
0143AE  A8E11F     BSET 0x11F, #7
19980:             
19981:             }
0143B0  FA8000     ULNK
0143B2  060000     RETURN
19982:             
19983:             
19984:             void __attribute__((interrupt, auto_psv))  _T5Interrupt( void )
19985:             {
0143B4  781F84     MOV W4, [W15++]
0143B6  F80032     PUSH DSRPAG
0143B8  202004     MOV #0x200, W4
0143BA  880194     MOV W4, DSRPAG
0143BC  000000     NOP
0143BE  FA0000     LNK #0x0
19986:              	IFS1bits.T5IF = 0;
0143C0  A98803     BCLR 0x803, #4
19987:             
19988:                     T45Over=1;
0143C2  809674     MOV 0x12CE, W4
0143C4  A00004     BSET W4, #0
0143C6  889674     MOV W4, 0x12CE
19989:                     T45OverFl=1;
0143C8  809674     MOV 0x12CE, W4
0143CA  A01004     BSET W4, #1
0143CC  889674     MOV W4, 0x12CE
19990:             }
0143CE  FA8000     ULNK
0143D0  F90032     POP DSRPAG
0143D2  78024F     MOV [--W15], W4
0143D4  064000     RETFIE
19991:             
19992:             
19993:             
19994:             
19995:             void T6_7Init(void)
19996:             {
0143D6  FA0000     LNK #0x0
19997:              T7CONbits.TON = 0; // Stop any 16-bit Timer3 operation
0143D8  A9E12F     BCLR 0x12F, #7
19998:             T6CONbits.TON = 0; // Stop any 16/32-bit Timer3 operation
0143DA  A9E12D     BCLR 0x12D, #7
19999:             T6CONbits.T32 = 1; // Enable 32-bit Timer mode
0143DC  A8612C     BSET T6CON, #3
20000:             T6CONbits.TCS = 0; // Select internal instruction cycle clock
0143DE  A9212C     BCLR T6CON, #1
20001:             T6CONbits.TGATE = 0; // Disable Gated Timer mode
0143E0  A9C12C     BCLR T6CON, #6
20002:             T6CONbits.TCKPS = 0b00; // Select 1:1 Prescaler
0143E2  800964     MOV T6CON, W4
0143E4  A14004     BCLR W4, #4
0143E6  A15004     BCLR W4, #5
0143E8  880964     MOV W4, T6CON
20003:             TMR7 = 0x00; // Clear 32-bit Timer (msw)
0143EA  EB0200     CLR W4
0143EC  880934     MOV W4, TMR7
20004:             TMR6 = 0x00; // Clear 32-bit Timer (lsw)
0143EE  EB0200     CLR W4
0143F0  880914     MOV W4, TMR6
20005:             PR6 = 0;//0x2d00; // Load 32-bit period value (lsw)
0143F2  EB0200     CLR W4
0143F4  880944     MOV W4, PR6
20006:             PR7 = 0;//0x131; // Load 32-bit period value (msw)
0143F6  EB0200     CLR W4
0143F8  880954     MOV W4, PR7
20007:             IPC12bits.T7IP = 0x06; // Set Timer3 Interrupt Priority Level
0143FA  8042C4     MOV IPC12, W4
0143FC  A10004     BCLR W4, #0
0143FE  A01004     BSET W4, #1
014400  A02004     BSET W4, #2
014402  8842C4     MOV W4, IPC12
20008:             IFS3bits.T7IF = 0; // Clear Timer3 Interrupt Flag
014404  A90806     BCLR IFS3, #0
20009:             IEC3bits.T7IE = 1; // Enable Timer3 interrupt
014406  A80826     BSET IEC3, #0
20010:             T6CONbits.TON = 1; // Start 32-bit Timer
014408  A8E12D     BSET 0x12D, #7
20011:             
20012:             }
01440A  FA8000     ULNK
01440C  060000     RETURN
20013:             
20014:             
20015:             
20016:             
20017:             
20018:             
20019:             void __attribute__((interrupt, auto_psv))  _T7Interrupt( void )
20020:             {
01440E  F80036     PUSH RCOUNT
014410  BE9F80     MOV.D W0, [W15++]
014412  BE9F82     MOV.D W2, [W15++]
014414  BE9F84     MOV.D W4, [W15++]
014416  BE9F86     MOV.D W6, [W15++]
014418  F80032     PUSH DSRPAG
01441A  202000     MOV #0x200, W0
01441C  880190     MOV W0, DSRPAG
01441E  000000     NOP
014420  FA0000     LNK #0x0
20021:              	IFS3bits.T7IF = 0;
014422  A90806     BCLR IFS3, #0
20022:             
20023:             
20024:                 if (Sensorless)
014424  809755     MOV StatFlgs1, W5
014426  200204     MOV #0x20, W4
014428  628204     AND W5, W4, W4
01442A  520FE0     SUB W4, #0x0, [W15]
01442C  320024     BRA Z, 0x14476
20025:                 {
20026:                 if (!SensorlessNotBEMF)
01442E  809654     MOV 0x12CA, W4
014430  620270     AND W4, #0x10, W4
014432  520FE0     SUB W4, #0x0, [W15]
014434  3A0020     BRA NZ, 0x14476
20027:                 {
20028:                     
20029:                             //Light=!Light;
20030:                                 CanZeroCrossing=1;
014436  809644     MOV Flgs3, W4
014438  A0F004     BSET W4, #15
01443A  889644     MOV W4, Flgs3
20031:                               //  if (Sensor1_Prev!=SensorBEMF)
20032:                                 //    SoundNum=12;
20033:                                 if (!DirPWM1)
01443C  809754     MOV StatFlgs1, W4
01443E  620261     AND W4, #0x1, W4
014440  520FE0     SUB W4, #0x0, [W15]
014442  3A000A     BRA NZ, 0x14458
20034:                                 Sensor1_Prev=NearSensors[SensorBEMF][0];
014444  230794     MOV #0x3079, W4
014446  784214     MOV.B [W4], W4
014448  FB8204     ZE W4, W4
01444A  DD2242     SL W4, #2, W4
01444C  2371C5     MOV #0x371C, W5
01444E  428204     ADD W5, W4, W4
014450  784214     MOV.B [W4], W4
014452  212475     MOV #0x1247, W5
014454  784A84     MOV.B W4, [W5]
014456  37000A     BRA 0x1446C
20035:                                 else
20036:                                 Sensor1_Prev=NearSensors[SensorBEMF][1];
014458  230794     MOV #0x3079, W4
01445A  784214     MOV.B [W4], W4
01445C  FB8204     ZE W4, W4
01445E  DD2242     SL W4, #2, W4
014460  E80204     INC W4, W4
014462  2371C5     MOV #0x371C, W5
014464  428204     ADD W5, W4, W4
014466  784214     MOV.B [W4], W4
014468  212475     MOV #0x1247, W5
01446A  784A84     MOV.B W4, [W5]
20037:                                 Sensor1=Sensor1_Prev;
01446C  212474     MOV #0x1247, W4
01446E  784214     MOV.B [W4], W4
014470  212465     MOV #0x1246, W5
014472  784A84     MOV.B W4, [W5]
20038:                                 Phases1();
014474  07A430     RCALL Phases1
20039:             
20040:                 }
20041:                 }
20042:             
20043:                 
20044:             
20045:             }
014476  FA8000     ULNK
014478  F90032     POP DSRPAG
01447A  BE034F     MOV.D [--W15], W6
01447C  BE024F     MOV.D [--W15], W4
01447E  BE014F     MOV.D [--W15], W2
014480  BE004F     MOV.D [--W15], W0
014482  F90036     POP RCOUNT
014484  064000     RETFIE
20046:             
20047:             
20048:             void TrapeziumInit(void)
20049:             {
014486  FA0000     LNK #0x0
20050:                 MAX_PWM=MAX_PWM_CONST;
014488  8092D4     MOV MAX_PWM_CONST, W4
01448A  8A12F4     MOV W4, MAX_PWM
20051:                 IPC22bits.U4RXIP = 7;
01448C  804364     MOV IPC22, W4
01448E  A00004     BSET W4, #0
014490  A01004     BSET W4, #1
014492  A02004     BSET W4, #2
014494  884364     MOV W4, IPC22
20052:                 IPC20bits.U3RXIP = 7;
014496  804344     MOV IPC20, W4
014498  A08004     BSET W4, #8
01449A  A09004     BSET W4, #9
01449C  A0A004     BSET W4, #10
01449E  884344     MOV W4, IPC20
20053:                 IPC2bits.T3IP = 7;
0144A0  804224     MOV IPC2, W4
0144A2  A00004     BSET W4, #0
0144A4  A01004     BSET W4, #1
0144A6  A02004     BSET W4, #2
0144A8  884224     MOV W4, IPC2
20054:                 IPC5bits.AD2IP=0;
0144AA  804254     MOV IPC5, W4
0144AC  A14004     BCLR W4, #4
0144AE  A15004     BCLR W4, #5
0144B0  A16004     BCLR W4, #6
0144B2  884254     MOV W4, IPC5
20055:                 IEC1bits.AD2IE=0;
0144B4  A9A822     BCLR IEC1, #5
20056:             
20057:                 
20058:                 T8CON=0;
0144B6  EB0200     CLR W4
0144B8  8809D4     MOV W4, T8CON
20059:                 T4CON=0;//7777777777777777777777777777777777777777777777777777777777777777777777777777
0144BA  EB0200     CLR W4
0144BC  8808F4     MOV W4, T4CON
20060:                 T5CON=0;//7777777777777777777777777777777777777777777777777777777777777777777777777777
0144BE  EB0200     CLR W4
0144C0  880904     MOV W4, T5CON
20061:             
20062:                 T2CON=0;
0144C2  EB0200     CLR W4
0144C4  880884     MOV W4, T2CON
20063:                 T6CON=0;
0144C6  EB0200     CLR W4
0144C8  880964     MOV W4, T6CON
20064:                 T7CON=0;
0144CA  EB0200     CLR W4
0144CC  880974     MOV W4, T7CON
20065:             
20066:                 SensorlessInitialized=0;
0144CE  809694     MOV 0x12D2, W4
0144D0  A15004     BCLR W4, #5
0144D2  889694     MOV W4, 0x12D2
20067:                 //InitPWM();
20068:                 InitPWM_Vector();
0144D4  07008D     RCALL InitPWM_Vector
20069:                 
20070:                 AD2CON1=0;
0144D6  EB0200     CLR W4
0144D8  881B04     MOV W4, AD2CON1
20071:                 
20072:             }
0144DA  FA8000     ULNK
0144DC  060000     RETURN
20073:             
20074:             
20075:             void T8Init(void)
20076:             {
0144DE  FA0000     LNK #0x0
20077:                 	TMR8 = 0;
0144E0  EB0200     CLR W4
0144E2  880984     MOV W4, TMR8
20078:             	T8CON = 0x8000;
0144E4  280004     MOV #0x8000, W4
0144E6  8809D4     MOV W4, T8CON
20079:              	PR8 = 33333;//500 Hz Int
0144E8  282354     MOV #0x8235, W4
0144EA  8809B4     MOV W4, PR8
20080:             	IPC12bits.T8IP = 5;//6;//7;
0144EC  8042C4     MOV IPC12, W4
0144EE  A0C004     BSET W4, #12
0144F0  A1D004     BCLR W4, #13
0144F2  A0E004     BSET W4, #14
0144F4  8842C4     MOV W4, IPC12
20081:              	IEC3bits.T8IE = 1;
0144F6  A86826     BSET IEC3, #3
20082:             
20083:             }
0144F8  FA8000     ULNK
0144FA  060000     RETURN
20084:             
20085:             
20086:             void __attribute__((interrupt, auto_psv))  _T8Interrupt( void )
20087:             {
0144FC  F80036     PUSH RCOUNT
0144FE  BE9F80     MOV.D W0, [W15++]
014500  BE9F82     MOV.D W2, [W15++]
014502  BE9F84     MOV.D W4, [W15++]
014504  BE9F86     MOV.D W6, [W15++]
014506  F80032     PUSH DSRPAG
014508  202000     MOV #0x200, W0
01450A  880190     MOV W0, DSRPAG
01450C  000000     NOP
01450E  FA0000     LNK #0x0
20088:               	IFS3bits.T8IF = 0;
014510  A96806     BCLR IFS3, #3
20089:                     if (!Sensorless)
014512  809755     MOV StatFlgs1, W5
014514  200204     MOV #0x20, W4
014516  628204     AND W5, W4, W4
014518  520FE0     SUB W4, #0x0, [W15]
01451A  3A0062     BRA NZ, 0x145E0
20090:                     {
20091:             
20092:                     PR8Cnt++;
01451C  809394     MOV PR8Cnt, W4
01451E  E80204     INC W4, W4
014520  889394     MOV W4, PR8Cnt
20093:             
20094:                     if (PR8Temp)
014522  80C084     MOV PR8Temp, W4
014524  520FE0     SUB W4, #0x0, [W15]
014526  320004     BRA Z, 0x14530
20095:                     {
20096:             //           IEC1bits.CNIE = 0;
20097:                         PR8=PR8Temp;
014528  80C084     MOV PR8Temp, W4
01452A  8809B4     MOV W4, PR8
20098:             
20099:             
20100:             
20101:                         PR8Temp=0;
01452C  EB0200     CLR W4
01452E  88C084     MOV W4, PR8Temp
20102:               //          IEC1bits.CNIE = 1;
20103:             
20104:             
20105:             
20106:             
20107:                     }
20108:             
20109:                     if (PR8<1200)
014530  8009B5     MOV PR8, W5
014532  204AF4     MOV #0x4AF, W4
014534  528F84     SUB W5, W4, [W15]
014536  3E0002     BRA GTU, 0x1453C
20110:                     {
20111:                         PR8=1200;
014538  204B04     MOV #0x4B0, W4
01453A  8809B4     MOV W4, PR8
20112:                     }
20113:             
20114:             
20115:                         if (HallDelayCnt_1)
01453C  214004     MOV #0x1400, W4
01453E  784214     MOV.B [W4], W4
014540  524FE0     SUB.B W4, #0x0, [W15]
014542  320033     BRA Z, 0x145AA
20116:                     {
20117:                         HallDelayCnt_1--;
014544  214004     MOV #0x1400, W4
014546  784214     MOV.B [W4], W4
014548  E94204     DEC.B W4, W4
01454A  214005     MOV #0x1400, W5
01454C  784A84     MOV.B W4, [W5]
20118:                         if (!HallDelayCnt_1)
01454E  214004     MOV #0x1400, W4
014550  784214     MOV.B [W4], W4
014552  524FE0     SUB.B W4, #0x0, [W15]
014554  3A002A     BRA NZ, 0x145AA
20119:                         {
20120:                             Theta1CntPWMSND=Theta1Cnt;
014556  8212B4     MOV Theta1Cnt, W4
014558  784204     MOV.B W4, W4
01455A  214025     MOV #0x1402, W5
01455C  784A84     MOV.B W4, [W5]
20121:                             Theta1Cnt=0;
01455E  EB0200     CLR W4
014560  8A12B4     MOV W4, Theta1Cnt
20122:                             CanGetHalls1=1;
014562  809674     MOV 0x12CE, W4
014564  A04004     BSET W4, #4
014566  889674     MOV W4, 0x12CE
20123:             
20124:                          //   Sensor1_Prev_OP=ReadSensor1_F_V();
20125:             
20126:                         if (!DirPWM1)
014568  809754     MOV StatFlgs1, W4
01456A  620261     AND W4, #0x1, W4
01456C  520FE0     SUB W4, #0x0, [W15]
01456E  3A000F     BRA NZ, 0x1458E
20127:                         {
20128:                     if (Forward1)
014570  8095E5     MOV Flgs, W5
014572  200404     MOV #0x40, W4
014574  628204     AND W5, W4, W4
014576  520FE0     SUB W4, #0x0, [W15]
014578  320005     BRA Z, 0x14584
20129:                     Sensor1_Prev_OP=ReadSensor1_F_V();
01457A  071556     RCALL ReadSensor1_F_V
01457C  784200     MOV.B W0, W4
01457E  210FA5     MOV #0x10FA, W5
014580  784A84     MOV.B W4, [W5]
014582  370013     BRA 0x145AA
20130:                     else
20131:                     Sensor1_Prev_OP=ReadSensor1_B_V();
014584  07152A     RCALL ReadSensor1_B_V
014586  784200     MOV.B W0, W4
014588  210FA5     MOV #0x10FA, W5
01458A  784A84     MOV.B W4, [W5]
01458C  37000E     BRA 0x145AA
20132:                         }
20133:                         else
20134:                         {
20135:                     if (Forward1)
01458E  8095E5     MOV Flgs, W5
014590  200404     MOV #0x40, W4
014592  628204     AND W5, W4, W4
014594  520FE0     SUB W4, #0x0, [W15]
014596  320005     BRA Z, 0x145A2
20136:                     Sensor1_Prev_OP=ReadSensor1_B_V();
014598  071520     RCALL ReadSensor1_B_V
01459A  784200     MOV.B W0, W4
01459C  210FA5     MOV #0x10FA, W5
01459E  784A84     MOV.B W4, [W5]
0145A0  370004     BRA 0x145AA
20137:                     else
20138:                     Sensor1_Prev_OP=ReadSensor1_F_V();
0145A2  071542     RCALL ReadSensor1_F_V
0145A4  784200     MOV.B W0, W4
0145A6  210FA5     MOV #0x10FA, W5
0145A8  784A84     MOV.B W4, [W5]
20139:                         }
20140:             
20141:             
20142:                         }
20143:                     }
20144:             
20145:             
20146:                             SVPWM1();
0145AA  0700F6     RCALL SVPWM1
20147:             
20148:             
20149:                             if (PWM32Bits)
0145AC  809755     MOV StatFlgs1, W5
0145AE  280004     MOV #0x8000, W4
0145B0  628204     AND W5, W4, W4
0145B2  520FE0     SUB W4, #0x0, [W15]
0145B4  32000B     BRA Z, 0x145CC
20150:                             {
20151:                     if (Theta1Cnt<60)
0145B6  8212B5     MOV Theta1Cnt, W5
0145B8  2003B4     MOV #0x3B, W4
0145BA  528F84     SUB W5, W4, [W15]
0145BC  3E0004     BRA GTU, 0x145C6
20152:                     Theta1Cnt=Theta1Cnt+4;
0145BE  8212B4     MOV Theta1Cnt, W4
0145C0  420264     ADD W4, #0x4, W4
0145C2  8A12B4     MOV W4, Theta1Cnt
0145C4  37000D     BRA 0x145E0
20153:                     else
20154:                         Theta1Cnt=63;
0145C6  2003F4     MOV #0x3F, W4
0145C8  8A12B4     MOV W4, Theta1Cnt
0145CA  37000A     BRA 0x145E0
20155:                             }
20156:                             else
20157:                             {
20158:             //        if (Theta1Cnt<63)
20159:               //      Theta1Cnt++;
20160:                     if (Theta1Cnt<62)
0145CC  8212B5     MOV Theta1Cnt, W5
0145CE  2003D4     MOV #0x3D, W4
0145D0  528F84     SUB W5, W4, [W15]
0145D2  3E0004     BRA GTU, 0x145DC
20161:                     Theta1Cnt=Theta1Cnt+2;
0145D4  8212B4     MOV Theta1Cnt, W4
0145D6  E88204     INC2 W4, W4
0145D8  8A12B4     MOV W4, Theta1Cnt
0145DA  370002     BRA 0x145E0
20162:                     else
20163:                         Theta1Cnt=63;
0145DC  2003F4     MOV #0x3F, W4
0145DE  8A12B4     MOV W4, Theta1Cnt
20164:                             }
20165:                     
20166:             
20167:             
20168:             }
20169:                     else
20170:                     {
20171:                         
20172:                     }
20173:             
20174:             }
0145E0  FA8000     ULNK
0145E2  F90032     POP DSRPAG
0145E4  BE034F     MOV.D [--W15], W6
0145E6  BE024F     MOV.D [--W15], W4
0145E8  BE014F     MOV.D [--W15], W2
0145EA  BE004F     MOV.D [--W15], W0
0145EC  F90036     POP RCOUNT
0145EE  064000     RETFIE
20175:             
20176:             
20177:             
20178:             void InitPWM_Vector(void)
20179:             {
0145F0  FA0000     LNK #0x0
20180:             Mgnovenniy=0;
0145F2  809774     MOV StatFlgs3, W4
0145F4  A12004     BCLR W4, #2
0145F6  889774     MOV W4, StatFlgs3
20181:             
20182:             /* Set PWM Period on Primary Time Base */
20183:             PTPER = 6000;
0145F8  217704     MOV #0x1770, W4
0145FA  886024     MOV W4, PTPER
20184:             /* Set Phase Shift */
20185:             
20186:             if (0)
20187:             {
20188:             PHASE1 = 1500;
20189:             PHASE2 = 1500;
20190:             PHASE3 = 1500;
20191:             }
20192:             else
20193:             {
20194:             PHASE1 = MAX_PWM+DEADTIME+Khard;
0145FC  8212F4     MOV MAX_PWM, W4
0145FE  780284     MOV W4, W5
014600  808844     MOV Khard, W4
014602  428204     ADD W5, W4, W4
014604  B00644     ADD #0x64, W4
014606  886144     MOV W4, PHASE1
20195:             PHASE2 = MAX_PWM+DEADTIME+Khard;
014608  8212F4     MOV MAX_PWM, W4
01460A  780284     MOV W4, W5
01460C  808844     MOV Khard, W4
01460E  428204     ADD W5, W4, W4
014610  B00644     ADD #0x64, W4
014612  886244     MOV W4, PHASE2
20196:             PHASE3 = MAX_PWM+DEADTIME+Khard;
014614  8212F4     MOV MAX_PWM, W4
014616  780284     MOV W4, W5
014618  808844     MOV Khard, W4
01461A  428204     ADD W5, W4, W4
01461C  B00644     ADD #0x64, W4
01461E  886344     MOV W4, PHASE3
20197:             }
20198:             /* Set Duty Cycles */
20199:             
20200:             //MDC=200;
20201:             
20202:             PDC1 = 100;
014620  200644     MOV #0x64, W4
014622  886134     MOV W4, PDC1
20203:             PDC2 = 100;
014624  200644     MOV #0x64, W4
014626  886234     MOV W4, PDC2
20204:             PDC3 = 100;
014628  200644     MOV #0x64, W4
01462A  886334     MOV W4, PDC3
20205:             /* Set Dead Time Values */
20206:             DTR1 = DTR2 = DTR3=DEADTIME;     //DTRx Registers are ignored in this mode
01462C  200644     MOV #0x64, W4
01462E  886354     MOV W4, DTR3
014630  806354     MOV DTR3, W4
014632  886254     MOV W4, DTR2
014634  806254     MOV DTR2, W4
014636  886154     MOV W4, DTR1
20207:             ALTDTR1 = ALTDTR2 = ALTDTR3=DEADTIME;
014638  200644     MOV #0x64, W4
01463A  886364     MOV W4, ALTDTR3
01463C  806364     MOV ALTDTR3, W4
01463E  886264     MOV W4, ALTDTR2
014640  806264     MOV ALTDTR2, W4
014642  886164     MOV W4, ALTDTR1
20208:             /* Set PWM Mode to Complementary */
20209:             IOCON1 = IOCON2 = IOCON3= 0xc000;
014644  2C0004     MOV #0xC000, W4
014646  886314     MOV W4, IOCON3
014648  806314     MOV IOCON3, W4
01464A  886214     MOV W4, IOCON2
01464C  806214     MOV IOCON2, W4
01464E  886114     MOV W4, IOCON1
20210:             /* Set Primary Time Base, Edge-Aligned Mode and Independent Duty Cycles */
20211:             if (ShortCircuit)
014650  809774     MOV StatFlgs3, W4
014652  620262     AND W4, #0x2, W4
014654  520FE0     SUB W4, #0x0, [W15]
014656  320007     BRA Z, 0x14666
20212:             PWMCON1 = PWMCON2 = PWMCON3= 0x1204;
014658  212044     MOV #0x1204, W4
01465A  886304     MOV W4, PWMCON3
01465C  806304     MOV PWMCON3, W4
01465E  886204     MOV W4, PWMCON2
014660  806204     MOV PWMCON2, W4
014662  886104     MOV W4, PWMCON1
014664  370006     BRA 0x14672
20213:             else
20214:             PWMCON1 = PWMCON2 = PWMCON3= 0x0204;
014666  202044     MOV #0x204, W4
014668  886304     MOV W4, PWMCON3
01466A  806304     MOV PWMCON3, W4
01466C  886204     MOV W4, PWMCON2
01466E  806204     MOV PWMCON2, W4
014670  886104     MOV W4, PWMCON1
20215:                 
20216:             /* Configure Faults */
20217:             FCLCON1 = FCLCON2 = FCLCON3= 0x0003;
014672  200034     MOV #0x3, W4
014674  886324     MOV W4, FCLCON3
014676  806324     MOV FCLCON3, W4
014678  886224     MOV W4, FCLCON2
01467A  806224     MOV FCLCON2, W4
01467C  886124     MOV W4, FCLCON1
20218:             
20219:             
20220:             PEN1_A_H=1;
01467E  A8EC23     BSET 0xC23, #7
20221:             PEN1_A_L=1;
014680  A8CC23     BSET 0xC23, #6
20222:             PEN1_B_H=1;
014682  A8EC43     BSET 0xC43, #7
20223:             PEN1_B_L=1;
014684  A8CC43     BSET 0xC43, #6
20224:             PEN1_C_H=1;
014686  A8EC63     BSET 0xC63, #7
20225:             PEN1_C_L=1;
014688  A8CC63     BSET 0xC63, #6
20226:             
20227:             //#if !defined TEST_PWM_KEYS
20228:                         if (!TEST_PWM_KEYS)
01468A  809655     MOV 0x12CA, W5
01468C  204004     MOV #0x400, W4
01468E  628204     AND W5, W4, W4
014690  520FE0     SUB W4, #0x0, [W15]
014692  3A007C     BRA NZ, 0x1478C
20229:                         {                     
20230:                                                     
20231:             
20232:             if (!SIN_MIDDLE)
014694  809765     MOV StatFlgs2, W5
014696  240004     MOV #0x4000, W4
014698  628204     AND W5, W4, W4
01469A  520FE0     SUB W4, #0x0, [W15]
01469C  3A0071     BRA NZ, 0x14780
20233:             {
20234:                 if (ShortCircuit)
01469E  809774     MOV StatFlgs3, W4
0146A0  620262     AND W4, #0x2, W4
0146A2  520FE0     SUB W4, #0x0, [W15]
0146A4  32002E     BRA Z, 0x14702
20235:                 {
20236:             FCLCON1bits.FLTSRC=0b01001;
0146A6  806125     MOV FCLCON1, W5
0146A8  2FF074     MOV #0xFF07, W4
0146AA  628284     AND W5, W4, W5
0146AC  200484     MOV #0x48, W4
0146AE  728204     IOR W5, W4, W4
0146B0  886124     MOV W4, FCLCON1
20237:             FCLCON2bits.FLTSRC=0b01001;
0146B2  806225     MOV FCLCON2, W5
0146B4  2FF074     MOV #0xFF07, W4
0146B6  628284     AND W5, W4, W5
0146B8  200484     MOV #0x48, W4
0146BA  728204     IOR W5, W4, W4
0146BC  886224     MOV W4, FCLCON2
20238:             FCLCON3bits.FLTSRC=0b01001;
0146BE  806325     MOV FCLCON3, W5
0146C0  2FF074     MOV #0xFF07, W4
0146C2  628284     AND W5, W4, W5
0146C4  200484     MOV #0x48, W4
0146C6  728204     IOR W5, W4, W4
0146C8  886324     MOV W4, FCLCON3
20239:             FCLCON1bits.FLTMOD=0;//1;
0146CA  806124     MOV FCLCON1, W4
0146CC  A10004     BCLR W4, #0
0146CE  A11004     BCLR W4, #1
0146D0  886124     MOV W4, FCLCON1
20240:             FCLCON2bits.FLTMOD=0;//1;
0146D2  806224     MOV FCLCON2, W4
0146D4  A10004     BCLR W4, #0
0146D6  A11004     BCLR W4, #1
0146D8  886224     MOV W4, FCLCON2
20241:             FCLCON3bits.FLTMOD=0;//1;
0146DA  806324     MOV FCLCON3, W4
0146DC  A10004     BCLR W4, #0
0146DE  A11004     BCLR W4, #1
0146E0  886324     MOV W4, FCLCON3
20242:             #if defined REV2
20243:             FCLCON1bits.FLTPOL=0;//1;
0146E2  A94C24     BCLR FCLCON1, #2
20244:             FCLCON2bits.FLTPOL=0;//1;
0146E4  A94C44     BCLR FCLCON2, #2
20245:             FCLCON3bits.FLTPOL=0;//1;
0146E6  A94C64     BCLR FCLCON3, #2
20246:             #else
20247:             FCLCON1bits.FLTPOL=0;
20248:             FCLCON2bits.FLTPOL=0;
20249:             FCLCON3bits.FLTPOL=0;
20250:             #endif
20251:             
20252:             IOCON1bits.FLTDAT=0b00;
0146E8  806114     MOV IOCON1, W4
0146EA  A14004     BCLR W4, #4
0146EC  A15004     BCLR W4, #5
0146EE  886114     MOV W4, IOCON1
20253:             IOCON2bits.FLTDAT=0b00;
0146F0  806214     MOV IOCON2, W4
0146F2  A14004     BCLR W4, #4
0146F4  A15004     BCLR W4, #5
0146F6  886214     MOV W4, IOCON2
20254:             IOCON3bits.FLTDAT=0b00;
0146F8  806314     MOV IOCON3, W4
0146FA  A14004     BCLR W4, #4
0146FC  A15004     BCLR W4, #5
0146FE  886314     MOV W4, IOCON3
014700  370045     BRA 0x1478C
20255:                 }
20256:                 else
20257:                 {
20258:                     if (Mgnovenniy)
014702  809774     MOV StatFlgs3, W4
014704  620264     AND W4, #0x4, W4
014706  520FE0     SUB W4, #0x0, [W15]
014708  32002E     BRA Z, 0x14766
20259:                     {
20260:             FCLCON1bits.FLTSRC=0b01001;
01470A  806125     MOV FCLCON1, W5
01470C  2FF074     MOV #0xFF07, W4
01470E  628284     AND W5, W4, W5
014710  200484     MOV #0x48, W4
014712  728204     IOR W5, W4, W4
014714  886124     MOV W4, FCLCON1
20261:             FCLCON2bits.FLTSRC=0b01001;
014716  806225     MOV FCLCON2, W5
014718  2FF074     MOV #0xFF07, W4
01471A  628284     AND W5, W4, W5
01471C  200484     MOV #0x48, W4
01471E  728204     IOR W5, W4, W4
014720  886224     MOV W4, FCLCON2
20262:             FCLCON3bits.FLTSRC=0b01001;
014722  806325     MOV FCLCON3, W5
014724  2FF074     MOV #0xFF07, W4
014726  628284     AND W5, W4, W5
014728  200484     MOV #0x48, W4
01472A  728204     IOR W5, W4, W4
01472C  886324     MOV W4, FCLCON3
20263:             FCLCON1bits.FLTMOD=1;
01472E  806124     MOV FCLCON1, W4
014730  A00004     BSET W4, #0
014732  A11004     BCLR W4, #1
014734  886124     MOV W4, FCLCON1
20264:             FCLCON2bits.FLTMOD=1;
014736  806224     MOV FCLCON2, W4
014738  A00004     BSET W4, #0
01473A  A11004     BCLR W4, #1
01473C  886224     MOV W4, FCLCON2
20265:             FCLCON3bits.FLTMOD=1;
01473E  806324     MOV FCLCON3, W4
014740  A00004     BSET W4, #0
014742  A11004     BCLR W4, #1
014744  886324     MOV W4, FCLCON3
20266:             #if defined REV2
20267:             FCLCON1bits.FLTPOL=1;
014746  A84C24     BSET FCLCON1, #2
20268:             FCLCON2bits.FLTPOL=1;
014748  A84C44     BSET FCLCON2, #2
20269:             FCLCON3bits.FLTPOL=1;
01474A  A84C64     BSET FCLCON3, #2
20270:             #else
20271:             FCLCON1bits.FLTPOL=0;
20272:             FCLCON2bits.FLTPOL=0;
20273:             FCLCON3bits.FLTPOL=0;
20274:             #endif
20275:             
20276:             IOCON1bits.FLTDAT=0b00;
01474C  806114     MOV IOCON1, W4
01474E  A14004     BCLR W4, #4
014750  A15004     BCLR W4, #5
014752  886114     MOV W4, IOCON1
20277:             IOCON2bits.FLTDAT=0b00;
014754  806214     MOV IOCON2, W4
014756  A14004     BCLR W4, #4
014758  A15004     BCLR W4, #5
01475A  886214     MOV W4, IOCON2
20278:             IOCON3bits.FLTDAT=0b00;
01475C  806314     MOV IOCON3, W4
01475E  A14004     BCLR W4, #4
014760  A15004     BCLR W4, #5
014762  886314     MOV W4, IOCON3
014764  370013     BRA 0x1478C
20279:                     }
20280:                     else
20281:                     {
20282:             FCLCON1bits.FLTMOD=3;
014766  806124     MOV FCLCON1, W4
014768  A00004     BSET W4, #0
01476A  A01004     BSET W4, #1
01476C  886124     MOV W4, FCLCON1
20283:             FCLCON2bits.FLTMOD=3;
01476E  806224     MOV FCLCON2, W4
014770  A00004     BSET W4, #0
014772  A01004     BSET W4, #1
014774  886224     MOV W4, FCLCON2
20284:             FCLCON3bits.FLTMOD=3;
014776  806324     MOV FCLCON3, W4
014778  A00004     BSET W4, #0
01477A  A01004     BSET W4, #1
01477C  886324     MOV W4, FCLCON3
01477E  370006     BRA 0x1478C
20285:                     }
20286:                 }
20287:             }
20288:             else
20289:             {
20290:             FCLCON1 = FCLCON2 = FCLCON3= 0x0003;
014780  200034     MOV #0x3, W4
014782  886324     MOV W4, FCLCON3
014784  806324     MOV FCLCON3, W4
014786  886224     MOV W4, FCLCON2
014788  806224     MOV FCLCON2, W4
01478A  886124     MOV W4, FCLCON1
20291:             }
20292:                         }
20293:             //#endif
20294:             //SEVTCMP=100;
20295:             
20296:             
20297:             /* 1:1 Prescaler */
20298:             PTCON2 = 0x0000;
01478C  EB0200     CLR W4
01478E  886014     MOV W4, PTCON2
20299:             /* Enable PWM Module */
20300:             PTCON = 0x8000;
014790  280004     MOV #0x8000, W4
014792  886004     MOV W4, PTCON
20301:             
20302:             
20303:             /*	//----------------------------------
20304:             	//	Unlock the Reprogrammable Pin Mechanism
20305:             	__builtin_write_OSCCONL(OSCCON & (~(1<<6))); // clear bit 6
20306:             	// Select RP88 as input for fault 1
20307:             	RPINR12 = 0x0058;
20308:             	//	Lock the Reprogrammable Pin Mechanism
20309:             	__builtin_write_OSCCONL(OSCCON | (1<<6)); 	 // Set bit 6
20310:             
20311:             	PTCON = 0x8000;		// start PWM
20312:             
20313:             
20314:                     */
20315:             //while (1);
20316:             }
014794  FA8000     ULNK
014796  060000     RETURN
20317:             
20318:             
20319:             
20320:             
20321:             
20322:             
20323:             
20324:             
20325:             void SVPWM1(void)
20326:             {
014798  FA0002     LNK #0x2
20327:             unsigned char DirPWM1TMP;
20328:             
20329:             
20330:                 if (ChagerViaMotor)
01479A  809604     MOV Flgs1, W4
01479C  620262     AND W4, #0x2, W4
01479E  520FE0     SUB W4, #0x0, [W15]
0147A0  320002     BRA Z, 0x147A6
20331:                 {
20332:                     SetPWM_ChagerViaMotor();
0147A2  0745A5     RCALL SetPWM_ChagerViaMotor
20333:                     return;
0147A4  370B11     BRA 0x15DC8
20334:                 }
20335:             
20336:                 if (DS)
0147A6  8096B5     MOV 0x12D6, W5
0147A8  208004     MOV #0x800, W4
0147AA  628204     AND W5, W4, W4
0147AC  520FE0     SUB W4, #0x0, [W15]
0147AE  320012     BRA Z, 0x147D4
20337:                 {
20338:                     
20339:                 PWM1_A_H=0;
0147B0  A92E44     BCLR LATE, #1
20340:                 PWM1_A_L=0;
0147B2  A90E44     BCLR LATE, #0
20341:                 PWM1_B_H=0;
0147B4  A96E44     BCLR LATE, #3
20342:                 PWM1_B_L=0;
0147B6  A94E44     BCLR LATE, #2
20343:                 PWM1_C_H=0;
0147B8  A9AE44     BCLR LATE, #5
20344:                 PWM1_C_L=0;
0147BA  A98E44     BCLR LATE, #4
20345:             
20346:                 
20347:                 PEN1_A_H=0;
0147BC  A9EC23     BCLR 0xC23, #7
20348:                 PEN1_A_L=0;
0147BE  A9CC23     BCLR 0xC23, #6
20349:                 PEN1_B_H=0;
0147C0  A9EC43     BCLR 0xC43, #7
20350:                 PEN1_B_L=0;
0147C2  A9CC43     BCLR 0xC43, #6
20351:                 PEN1_C_H=0;
0147C4  A9EC63     BCLR 0xC63, #7
20352:                 PEN1_C_L=0;
0147C6  A9CC63     BCLR 0xC63, #6
20353:                 PhasePWM=PWM1Show=0;
0147C8  EB0200     CLR W4
0147CA  8892A4     MOV W4, PWM1Show
0147CC  B82260     MUL.UU W4, #0, W4
0147CE  89F524     MOV W4, PhasePWM
0147D0  89F535     MOV W5, 0x3EA6
20354:                 return;
0147D2  370AFA     BRA 0x15DC8
20355:                 }
20356:             
20357:             
20358:                 if (BreakPressed)
0147D4  809614     MOV 0x12C2, W4
0147D6  620261     AND W4, #0x1, W4
0147D8  520FE0     SUB W4, #0x0, [W15]
0147DA  3A0AF5     BRA NZ, 0x15DC6
20359:                     return;
015DC6  000000     NOP
20360:             DirPWM1TMP=!DirPWM1;
0147DC  809754     MOV StatFlgs1, W4
0147DE  620261     AND W4, #0x1, W4
0147E0  A7F004     BTSC W4, #15
0147E2  EA0204     NEG W4, W4
0147E4  E90204     DEC W4, W4
0147E6  DE224F     LSR W4, #15, W4
0147E8  784F04     MOV.B W4, [W14]
20361:             if (InvSin)
0147EA  809765     MOV StatFlgs2, W5
0147EC  280004     MOV #0x8000, W4
0147EE  628204     AND W5, W4, W4
0147F0  520FE0     SUB W4, #0x0, [W15]
0147F2  320005     BRA Z, 0x147FE
20362:             DirPWM1TMP=!DirPWM1TMP;
0147F4  78401E     MOV.B [W14], W0
0147F6  FB8200     ZE W0, W4
0147F8  E90204     DEC W4, W4
0147FA  DE224F     LSR W4, #15, W4
0147FC  784F04     MOV.B W4, [W14]
20363:             
20364:             
20365:                 if (!TrapezoidaRAM1)
0147FE  809755     MOV StatFlgs1, W5
014800  210004     MOV #0x1000, W4
014802  628204     AND W5, W4, W4
014804  520FE0     SUB W4, #0x0, [W15]
014806  3A000B     BRA NZ, 0x1481E
20366:                 {
20367:                     if (StrongMode)
014808  8095F5     MOV 0x12BE, W5
01480A  240004     MOV #0x4000, W4
01480C  628204     AND W5, W4, W4
01480E  520FE0     SUB W4, #0x0, [W15]
014810  320006     BRA Z, 0x1481E
20368:                     {
20369:                         PEN1_A_H=1;
014812  A8EC23     BSET 0xC23, #7
20370:                         PEN1_A_L=1;
014814  A8CC23     BSET 0xC23, #6
20371:                         PEN1_B_H=1;
014816  A8EC43     BSET 0xC43, #7
20372:                         PEN1_B_L=1;
014818  A8CC43     BSET 0xC43, #6
20373:                         PEN1_C_H=1;
01481A  A8EC63     BSET 0xC63, #7
20374:                         PEN1_C_L=1;
01481C  A8CC63     BSET 0xC63, #6
20375:                     }
20376:             
20377:                 }
20378:             
20379:                     if (T45Over)
01481E  809674     MOV 0x12CE, W4
014820  620261     AND W4, #0x1, W4
014822  520FE0     SUB W4, #0x0, [W15]
014824  320004     BRA Z, 0x1482E
20380:                         Theta1Cnt=Theta1Zero;
014826  213FE4     MOV #0x13FE, W4
014828  784214     MOV.B [W4], W4
01482A  FB8204     ZE W4, W4
01482C  8A12B4     MOV W4, Theta1Cnt
20381:             
20382:             //Sensor1_Prev_OP=1;
20383:             
20384:             
20385:                 
20386:             
20387:             
20388:             if (DirPWM1TMP)
01482E  78421E     MOV.B [W14], W4
014830  524FE0     SUB.B W4, #0x0, [W15]
014832  32005A     BRA Z, 0x148E8
20389:             {
20390:             if (Forward1)
014834  8095E5     MOV Flgs, W5
014836  200404     MOV #0x40, W4
014838  628204     AND W5, W4, W4
01483A  520FE0     SUB W4, #0x0, [W15]
01483C  32002A     BRA Z, 0x14892
20391:             {
20392:                 HallDelay1_Direction=0;
01483E  809614     MOV 0x12C2, W4
014840  A1D004     BCLR W4, #13
014842  889614     MOV W4, 0x12C2
20393:                 if (HallDelay1_F>0)
014844  2425A4     MOV #0x425A, W4
014846  784214     MOV.B [W4], W4
014848  524FE0     SUB.B W4, #0x0, [W15]
01484A  34001F     BRA LE, 0x1488A
20394:                 {
20395:                     if (Theta1Cnt>(63-HallDelay1_F))
01484C  2425A4     MOV #0x425A, W4
01484E  784214     MOV.B [W4], W4
014850  FB0204     SE W4, W4
014852  2003F5     MOV #0x3F, W5
014854  528204     SUB W5, W4, W4
014856  780284     MOV W4, W5
014858  8212B4     MOV Theta1Cnt, W4
01485A  528F84     SUB W5, W4, [W15]
01485C  310012     BRA C, 0x14882
20396:                 {
20397:                     if (!SensorDl_1)
01485E  210FB4     MOV #0x10FB, W4
014860  784214     MOV.B [W4], W4
014862  524FE0     SUB.B W4, #0x0, [W15]
014864  3A009A     BRA NZ, 0x1499A
20398:                     {
20399:                         SensorDl_1=NearSensors[Sensor1_Prev_OP][0];
014866  210FA4     MOV #0x10FA, W4
014868  784214     MOV.B [W4], W4
01486A  FB8204     ZE W4, W4
01486C  DD2242     SL W4, #2, W4
01486E  2371C5     MOV #0x371C, W5
014870  428204     ADD W5, W4, W4
014872  784214     MOV.B [W4], W4
014874  210FB5     MOV #0x10FB, W5
014876  784A84     MOV.B W4, [W5]
20400:                         Sensor1_Prev_OP=SensorDl_1;
014878  210FB4     MOV #0x10FB, W4
01487A  784214     MOV.B [W4], W4
01487C  210FA5     MOV #0x10FA, W5
01487E  784A84     MOV.B W4, [W5]
014880  37008C     BRA 0x1499A
20401:                     }
20402:                 }
20403:                 else
20404:                 {
20405:                         SensorDl_1=0;
014882  210FB5     MOV #0x10FB, W5
014884  EB4200     CLR.B W4
014886  784A84     MOV.B W4, [W5]
014888  370088     BRA 0x1499A
20406:                        // Sensor1_Prev_OP=ReadSensor1_F_V();//++++++++++++++++++++++++++++
20407:             
20408:                 }
20409:                 }
20410:                 else
20411:                 {
20412:                         SensorDl_1=0;
01488A  210FB5     MOV #0x10FB, W5
01488C  EB4200     CLR.B W4
01488E  784A84     MOV.B W4, [W5]
014890  370084     BRA 0x1499A
20413:                     //   if (CanGetHalls1)
20414:                      //Sensor1_Prev_OP=ReadSensor1_F_V();//+++++++++++++++++++++++++++++++++
20415:                 }
20416:             
20417:             }
20418:             else
20419:             {
20420:                 HallDelay1_Direction=1;
014892  809614     MOV 0x12C2, W4
014894  A0D004     BSET W4, #13
014896  889614     MOV W4, 0x12C2
20421:                 if (HallDelay1_B>0)
014898  2425B4     MOV #0x425B, W4
01489A  784214     MOV.B [W4], W4
01489C  524FE0     SUB.B W4, #0x0, [W15]
01489E  340020     BRA LE, 0x148E0
20422:                 {
20423:                 if (Theta1Cnt>(63-HallDelay1_B))
0148A0  2425B4     MOV #0x425B, W4
0148A2  784214     MOV.B [W4], W4
0148A4  FB0204     SE W4, W4
0148A6  2003F5     MOV #0x3F, W5
0148A8  528204     SUB W5, W4, W4
0148AA  780284     MOV W4, W5
0148AC  8212B4     MOV Theta1Cnt, W4
0148AE  528F84     SUB W5, W4, [W15]
0148B0  310013     BRA C, 0x148D8
20424:                 {
20425:                     if (!SensorDl_1)
0148B2  210FB4     MOV #0x10FB, W4
0148B4  784214     MOV.B [W4], W4
0148B6  524FE0     SUB.B W4, #0x0, [W15]
0148B8  3A0070     BRA NZ, 0x1499A
20426:                     {
20427:                         SensorDl_1=NearSensors[Sensor1_Prev_OP][1];
0148BA  210FA4     MOV #0x10FA, W4
0148BC  784214     MOV.B [W4], W4
0148BE  FB8204     ZE W4, W4
0148C0  DD2242     SL W4, #2, W4
0148C2  E80204     INC W4, W4
0148C4  2371C5     MOV #0x371C, W5
0148C6  428204     ADD W5, W4, W4
0148C8  784214     MOV.B [W4], W4
0148CA  210FB5     MOV #0x10FB, W5
0148CC  784A84     MOV.B W4, [W5]
20428:                         Sensor1_Prev_OP=SensorDl_1;
0148CE  210FB4     MOV #0x10FB, W4
0148D0  784214     MOV.B [W4], W4
0148D2  210FA5     MOV #0x10FA, W5
0148D4  784A84     MOV.B W4, [W5]
0148D6  370061     BRA 0x1499A
20429:                     }
20430:                 }
20431:                 else
20432:                 {
20433:                      //   Sensor1_Prev_OP=ReadSensor1_B_V();//-----------------------
20434:                         SensorDl_1=0;
0148D8  210FB5     MOV #0x10FB, W5
0148DA  EB4200     CLR.B W4
0148DC  784A84     MOV.B W4, [W5]
0148DE  37005D     BRA 0x1499A
20435:                 }
20436:                 }
20437:                 else
20438:                 {
20439:                         SensorDl_1=0;
0148E0  210FB5     MOV #0x10FB, W5
0148E2  EB4200     CLR.B W4
0148E4  784A84     MOV.B W4, [W5]
0148E6  370059     BRA 0x1499A
20440:                   //     if (CanGetHalls1)
20441:                      //Sensor1_Prev_OP=ReadSensor1_B_V();//---------------------------------
20442:                 }
20443:             }
20444:             }
20445:             else
20446:             {
20447:             if (!Forward1)
0148E8  8095E5     MOV Flgs, W5
0148EA  200404     MOV #0x40, W4
0148EC  628204     AND W5, W4, W4
0148EE  520FE0     SUB W4, #0x0, [W15]
0148F0  3A002A     BRA NZ, 0x14946
20448:             {
20449:                 HallDelay1_Direction=0;
0148F2  809614     MOV 0x12C2, W4
0148F4  A1D004     BCLR W4, #13
0148F6  889614     MOV W4, 0x12C2
20450:                 if (HallDelay1_F>0)
0148F8  2425A4     MOV #0x425A, W4
0148FA  784214     MOV.B [W4], W4
0148FC  524FE0     SUB.B W4, #0x0, [W15]
0148FE  34001F     BRA LE, 0x1493E
20451:                 {
20452:                     if (Theta1Cnt>(63-HallDelay1_F))
014900  2425A4     MOV #0x425A, W4
014902  784214     MOV.B [W4], W4
014904  FB0204     SE W4, W4
014906  2003F5     MOV #0x3F, W5
014908  528204     SUB W5, W4, W4
01490A  780284     MOV W4, W5
01490C  8212B4     MOV Theta1Cnt, W4
01490E  528F84     SUB W5, W4, [W15]
014910  310012     BRA C, 0x14936
20453:                 {
20454:                     if (!SensorDl_1)
014912  210FB4     MOV #0x10FB, W4
014914  784214     MOV.B [W4], W4
014916  524FE0     SUB.B W4, #0x0, [W15]
014918  3A0040     BRA NZ, 0x1499A
20455:                     {
20456:                         SensorDl_1=NearSensors[Sensor1_Prev_OP][0];
01491A  210FA4     MOV #0x10FA, W4
01491C  784214     MOV.B [W4], W4
01491E  FB8204     ZE W4, W4
014920  DD2242     SL W4, #2, W4
014922  2371C5     MOV #0x371C, W5
014924  428204     ADD W5, W4, W4
014926  784214     MOV.B [W4], W4
014928  210FB5     MOV #0x10FB, W5
01492A  784A84     MOV.B W4, [W5]
20457:                         Sensor1_Prev_OP=SensorDl_1;
01492C  210FB4     MOV #0x10FB, W4
01492E  784214     MOV.B [W4], W4
014930  210FA5     MOV #0x10FA, W5
014932  784A84     MOV.B W4, [W5]
014934  370032     BRA 0x1499A
20458:                     }
20459:                 }
20460:                 else
20461:                 {
20462:                         SensorDl_1=0;
014936  210FB5     MOV #0x10FB, W5
014938  EB4200     CLR.B W4
01493A  784A84     MOV.B W4, [W5]
01493C  37002E     BRA 0x1499A
20463:                    //     Sensor1_Prev_OP=ReadSensor1_F_V();//--------------------------------------
20464:             
20465:                 }
20466:                 }
20467:                 else
20468:                 {
20469:                         SensorDl_1=0;
01493E  210FB5     MOV #0x10FB, W5
014940  EB4200     CLR.B W4
014942  784A84     MOV.B W4, [W5]
014944  37002A     BRA 0x1499A
20470:                 //       if (CanGetHalls1)
20471:                //      Sensor1_Prev_OP=ReadSensor1_F_V();//----------------------------
20472:             
20473:                 }
20474:             
20475:             }
20476:             else
20477:             {
20478:                 HallDelay1_Direction=1;
014946  809614     MOV 0x12C2, W4
014948  A0D004     BSET W4, #13
01494A  889614     MOV W4, 0x12C2
20479:                 if (HallDelay1_B>0)
01494C  2425B4     MOV #0x425B, W4
01494E  784214     MOV.B [W4], W4
014950  524FE0     SUB.B W4, #0x0, [W15]
014952  340020     BRA LE, 0x14994
20480:                 {
20481:                 if (Theta1Cnt>(63-HallDelay1_B))
014954  2425B4     MOV #0x425B, W4
014956  784214     MOV.B [W4], W4
014958  FB0204     SE W4, W4
01495A  2003F5     MOV #0x3F, W5
01495C  528204     SUB W5, W4, W4
01495E  780284     MOV W4, W5
014960  8212B4     MOV Theta1Cnt, W4
014962  528F84     SUB W5, W4, [W15]
014964  310013     BRA C, 0x1498C
20482:                 {
20483:                     if (!SensorDl_1)
014966  210FB4     MOV #0x10FB, W4
014968  784214     MOV.B [W4], W4
01496A  524FE0     SUB.B W4, #0x0, [W15]
01496C  3A0016     BRA NZ, 0x1499A
20484:                     {
20485:                         SensorDl_1=NearSensors[Sensor1_Prev_OP][1];
01496E  210FA4     MOV #0x10FA, W4
014970  784214     MOV.B [W4], W4
014972  FB8204     ZE W4, W4
014974  DD2242     SL W4, #2, W4
014976  E80204     INC W4, W4
014978  2371C5     MOV #0x371C, W5
01497A  428204     ADD W5, W4, W4
01497C  784214     MOV.B [W4], W4
01497E  210FB5     MOV #0x10FB, W5
014980  784A84     MOV.B W4, [W5]
20486:                         Sensor1_Prev_OP=SensorDl_1;
014982  210FB4     MOV #0x10FB, W4
014984  784214     MOV.B [W4], W4
014986  210FA5     MOV #0x10FA, W5
014988  784A84     MOV.B W4, [W5]
01498A  370007     BRA 0x1499A
20487:                     }
20488:                 }
20489:                 else
20490:                 {
20491:             //         Sensor1_Prev_OP=ReadSensor1_B_V();//+++++++++++++++++++++
20492:                         SensorDl_1=0;
01498C  210FB5     MOV #0x10FB, W5
01498E  EB4200     CLR.B W4
014990  784A84     MOV.B W4, [W5]
014992  370003     BRA 0x1499A
20493:                 }
20494:                 }
20495:                 else
20496:                 {
20497:                         SensorDl_1=0;
014994  210FB5     MOV #0x10FB, W5
014996  EB4200     CLR.B W4
014998  784A84     MOV.B W4, [W5]
20498:                    //    if (CanGetHalls1)
20499:             //                Sensor1_Prev_OP=ReadSensor1_B_V();//+++++++++++++++++++
20500:             
20501:             
20502:                 }
20503:             }
20504:             }
20505:             
20506:             #ifdef HALFTABLE
20507:                   if (Theta1Cnt<32)//64)//THETA_NUM)
20508:                     {
20509:             if (Forward1)
20510:                         Theta1CntPWM=63-(Theta1Cnt<<1);
20511:             else
20512:                         Theta1CntPWM=Theta1Cnt<<1;
20513:             #else
20514:                   if (Theta1Cnt<64)//THETA_NUM)
01499A  8212B5     MOV Theta1Cnt, W5
01499C  2003F4     MOV #0x3F, W4
01499E  528F84     SUB W5, W4, [W15]
0149A0  3E08F5     BRA GTU, 0x15B8C
20515:                     {
20516:                       if (DirPWM1TMP)
0149A2  78421E     MOV.B [W14], W4
0149A4  524FE0     SUB.B W4, #0x0, [W15]
0149A6  32002F     BRA Z, 0x14A06
20517:                       {
20518:             if (Forward1)
0149A8  8095E5     MOV Flgs, W5
0149AA  200404     MOV #0x40, W4
0149AC  628204     AND W5, W4, W4
0149AE  520FE0     SUB W4, #0x0, [W15]
0149B0  320017     BRA Z, 0x149E0
20519:                 if (SensorDl_1)
0149B2  210FB4     MOV #0x10FB, W4
0149B4  784214     MOV.B [W4], W4
0149B6  524FE0     SUB.B W4, #0x0, [W15]
0149B8  32000A     BRA Z, 0x149CE
20520:                 {
20521:                         Theta1CntPWM=127-HallDelay1_F-Theta1Cnt;
0149BA  2425A4     MOV #0x425A, W4
0149BC  784214     MOV.B [W4], W4
0149BE  FB0204     SE W4, W4
0149C0  EA0204     NEG W4, W4
0149C2  780284     MOV W4, W5
0149C4  8212B4     MOV Theta1Cnt, W4
0149C6  528204     SUB W5, W4, W4
0149C8  B007F4     ADD #0x7F, W4
0149CA  888794     MOV W4, Theta1CntPWM
0149CC  37004A     BRA 0x14A62
20522:                      //  Theta1CntPWM=HallDelay1_F-Theta1Cnt;
20523:                 }
20524:                 else
20525:                 {
20526:                         Theta1CntPWM=63-Theta1Cnt-HallDelay1_F;
0149CE  8212B4     MOV Theta1Cnt, W4
0149D0  EA0284     NEG W4, W5
0149D2  2425A4     MOV #0x425A, W4
0149D4  784214     MOV.B [W4], W4
0149D6  FB0204     SE W4, W4
0149D8  528204     SUB W5, W4, W4
0149DA  B003F4     ADD #0x3F, W4
0149DC  888794     MOV W4, Theta1CntPWM
0149DE  370041     BRA 0x14A62
20527:                 }
20528:             else
20529:                 if (SensorDl_1)
0149E0  210FB4     MOV #0x10FB, W4
0149E2  784214     MOV.B [W4], W4
0149E4  524FE0     SUB.B W4, #0x0, [W15]
0149E6  320008     BRA Z, 0x149F8
20530:                 {
20531:                         Theta1CntPWM=HallDelay1_B-(64-Theta1Cnt);
0149E8  2425B4     MOV #0x425B, W4
0149EA  784214     MOV.B [W4], W4
0149EC  FB0284     SE W4, W5
0149EE  8212B4     MOV Theta1Cnt, W4
0149F0  428204     ADD W5, W4, W4
0149F2  B10404     SUB #0x40, W4
0149F4  888794     MOV W4, Theta1CntPWM
0149F6  370035     BRA 0x14A62
20532:                 }
20533:                 else
20534:                 {
20535:                         Theta1CntPWM=Theta1Cnt+HallDelay1_B;
0149F8  2425B4     MOV #0x425B, W4
0149FA  784214     MOV.B [W4], W4
0149FC  FB0284     SE W4, W5
0149FE  8212B4     MOV Theta1Cnt, W4
014A00  428204     ADD W5, W4, W4
014A02  888794     MOV W4, Theta1CntPWM
014A04  37002E     BRA 0x14A62
20536:                 }
20537:                       }
20538:                       else
20539:                       {
20540:             if (!Forward1)
014A06  8095E5     MOV Flgs, W5
014A08  200404     MOV #0x40, W4
014A0A  628204     AND W5, W4, W4
014A0C  520FE0     SUB W4, #0x0, [W15]
014A0E  3A0017     BRA NZ, 0x14A3E
20541:                 if (SensorDl_1)
014A10  210FB4     MOV #0x10FB, W4
014A12  784214     MOV.B [W4], W4
014A14  524FE0     SUB.B W4, #0x0, [W15]
014A16  32000A     BRA Z, 0x14A2C
20542:                 {
20543:                         Theta1CntPWM=127-HallDelay1_F-Theta1Cnt;
014A18  2425A4     MOV #0x425A, W4
014A1A  784214     MOV.B [W4], W4
014A1C  FB0204     SE W4, W4
014A1E  EA0204     NEG W4, W4
014A20  780284     MOV W4, W5
014A22  8212B4     MOV Theta1Cnt, W4
014A24  528204     SUB W5, W4, W4
014A26  B007F4     ADD #0x7F, W4
014A28  888794     MOV W4, Theta1CntPWM
014A2A  37001B     BRA 0x14A62
20544:                      //  Theta1CntPWM=HallDelay1_F-Theta1Cnt;
20545:                 }
20546:                 else
20547:                 {
20548:                         Theta1CntPWM=63-Theta1Cnt-HallDelay1_F;
014A2C  8212B4     MOV Theta1Cnt, W4
014A2E  EA0284     NEG W4, W5
014A30  2425A4     MOV #0x425A, W4
014A32  784214     MOV.B [W4], W4
014A34  FB0204     SE W4, W4
014A36  528204     SUB W5, W4, W4
014A38  B003F4     ADD #0x3F, W4
014A3A  888794     MOV W4, Theta1CntPWM
014A3C  370012     BRA 0x14A62
20549:                 }
20550:             else
20551:                 if (SensorDl_1)
014A3E  210FB4     MOV #0x10FB, W4
014A40  784214     MOV.B [W4], W4
014A42  524FE0     SUB.B W4, #0x0, [W15]
014A44  320008     BRA Z, 0x14A56
20552:                 {
20553:                         Theta1CntPWM=HallDelay1_B-(64-Theta1Cnt);
014A46  2425B4     MOV #0x425B, W4
014A48  784214     MOV.B [W4], W4
014A4A  FB0284     SE W4, W5
014A4C  8212B4     MOV Theta1Cnt, W4
014A4E  428204     ADD W5, W4, W4
014A50  B10404     SUB #0x40, W4
014A52  888794     MOV W4, Theta1CntPWM
014A54  370006     BRA 0x14A62
20554:                 }
20555:                 else
20556:                 {
20557:                         Theta1CntPWM=Theta1Cnt+HallDelay1_B;
014A56  2425B4     MOV #0x425B, W4
014A58  784214     MOV.B [W4], W4
014A5A  FB0284     SE W4, W5
014A5C  8212B4     MOV Theta1Cnt, W4
014A5E  428204     ADD W5, W4, W4
014A60  888794     MOV W4, Theta1CntPWM
20558:                 }
20559:                       }
20560:             #endif
20561:             if (CURRENT_PROTECTION)
014A62  809755     MOV StatFlgs1, W5
014A64  220004     MOV #0x2000, W4
014A66  628204     AND W5, W4, W4
014A68  520FE0     SUB W4, #0x0, [W15]
014A6A  320015     BRA Z, 0x14A96
20562:                       {
20563:                       if (Amplitude1>PI_Curr1Res)
014A6C  81F404     MOV PI_Curr1Res, W4
014A6E  81F415     MOV 0x3E82, W5
014A70  BE0304     MOV.D W4, W6
014A72  809A44     MOV Amplitude1, W4
014A74  809A55     MOV 0x134A, W5
014A76  530F84     SUB W6, W4, [W15]
014A78  5B8F85     SUBB W7, W5, [W15]
014A7A  310009     BRA C, 0x14A8E
20564:                     Amplitude1Tmp=Amplitude1-PI_Curr1Res;
014A7C  809A46     MOV Amplitude1, W6
014A7E  809A57     MOV 0x134A, W7
014A80  81F404     MOV PI_Curr1Res, W4
014A82  81F415     MOV 0x3E82, W5
014A84  530204     SUB W6, W4, W4
014A86  5B8285     SUBB W7, W5, W5
014A88  89F504     MOV W4, Amplitude1Tmp
014A8A  89F515     MOV W5, 0x3EA2
014A8C  370008     BRA 0x14A9E
20565:                       else
20566:                           Amplitude1Tmp=0;
014A8E  B82260     MUL.UU W4, #0, W4
014A90  89F504     MOV W4, Amplitude1Tmp
014A92  89F515     MOV W5, 0x3EA2
014A94  370004     BRA 0x14A9E
20567:                       }
20568:             else
20569:             Amplitude1Tmp=Amplitude1;
014A96  809A44     MOV Amplitude1, W4
014A98  809A55     MOV 0x134A, W5
014A9A  89F504     MOV W4, Amplitude1Tmp
014A9C  89F515     MOV W5, 0x3EA2
20570:                     PhasePWM=Amplitude1Tmp;
014A9E  81F504     MOV Amplitude1Tmp, W4
014AA0  81F515     MOV 0x3EA2, W5
014AA2  89F524     MOV W4, PhasePWM
014AA4  89F535     MOV W5, 0x3EA6
20571:                       
20572:                     
20573:                     
20574:                       PWM1Show=Amplitude1Tmp;
014AA6  81F504     MOV Amplitude1Tmp, W4
014AA8  81F515     MOV 0x3EA2, W5
014AAA  780204     MOV W4, W4
014AAC  8892A4     MOV W4, PWM1Show
20575:                       
20576:                       
20577:                       //Theta1CntPWM=63-Theta1CntPWM;
20578:             
20579:                       if (TrapezoidaRAM1)
014AAE  809755     MOV StatFlgs1, W5
014AB0  210004     MOV #0x1000, W4
014AB2  628204     AND W5, W4, W4
014AB4  520FE0     SUB W4, #0x0, [W15]
014AB6  32024F     BRA Z, 0x14F56
20580:                       {
20581:                   switch (Sensor1_Prev_OP)
014AB8  210FA4     MOV #0x10FA, W4
014ABA  784214     MOV.B [W4], W4
014ABC  FB8204     ZE W4, W4
014ABE  B92361     MUL.SU W4, #1, W6
014AC0  EB8200     SETM W4
014AC2  EB8280     SETM W5
014AC4  420206     ADD W4, W6, W4
014AC6  4A8287     ADDC W5, W7, W5
014AC8  200056     MOV #0x5, W6
014ACA  200007     MOV #0x0, W7
014ACC  520F86     SUB W4, W6, [W15]
014ACE  5A8F87     SUBB W5, W7, [W15]
014AD0  3E085C     BRA GTU, 0x15B8A
014AD2  010604     BRA W4
014AD4  370005     BRA 0x14AE0
014AD6  3700C2     BRA 0x14C5C
014AD8  370062     BRA 0x14B9E
014ADA  37017E     BRA 0x14DD8
014ADC  3701DD     BRA 0x14E98
014ADE  37011D     BRA 0x14D1A
20582:                    {
20583:                    case 1 :
20584:                         PWM1_A_H=0;
014AE0  A92E44     BCLR LATE, #1
20585:                         PWM1_A_L=1;
014AE2  A80E44     BSET LATE, #0
20586:                         PWM1_B_H=0;
014AE4  A96E44     BCLR LATE, #3
20587:                         PWM1_B_L=0;
014AE6  A94E44     BCLR LATE, #2
20588:                         PWM1_C_H=0;
014AE8  A9AE44     BCLR LATE, #5
20589:                         PWM1_C_L=0;
014AEA  A98E44     BCLR LATE, #4
20590:             
20591:                         PEN1_A_H=0;
014AEC  A9EC23     BCLR 0xC23, #7
20592:                         PEN1_A_L=0;
014AEE  A9CC23     BCLR 0xC23, #6
20593:                         PEN1_B_H=1;
014AF0  A8EC43     BSET 0xC43, #7
20594:                         if (StrongMode)
014AF2  8095F5     MOV 0x12BE, W5
014AF4  240004     MOV #0x4000, W4
014AF6  628204     AND W5, W4, W4
014AF8  520FE0     SUB W4, #0x0, [W15]
014AFA  320002     BRA Z, 0x14B00
20595:                         PEN1_B_L=1;
014AFC  A8CC43     BSET 0xC43, #6
014AFE  370001     BRA 0x14B02
20596:                         else
20597:                         PEN1_B_L=0;
014B00  A9CC43     BCLR 0xC43, #6
20598:                         PEN1_C_H=0;//1;
014B02  A9EC63     BCLR 0xC63, #7
20599:                         PEN1_C_L=0;
014B04  A9CC63     BCLR 0xC63, #6
20600:             
20601:             
20602:             
20603:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-1])>>8) ;
014B06  808794     MOV Theta1CntPWM, W4
014B08  2017F5     MOV #0x17F, W5
014B0A  528204     SUB W5, W4, W4
014B0C  240D65     MOV #0x40D6, W5
014B0E  428204     ADD W5, W4, W4
014B10  784214     MOV.B [W4], W4
014B12  FB8304     ZE W4, W6
014B14  200007     MOV #0x0, W7
014B16  81F504     MOV Amplitude1Tmp, W4
014B18  81F515     MOV 0x3EA2, W5
014B1A  B83884     MUL.UU W7, W4, W0
014B1C  B82986     MUL.UU W5, W6, W2
014B1E  780082     MOV W2, W1
014B20  400001     ADD W0, W1, W0
014B22  780306     MOV W6, W6
014B24  780204     MOV W4, W4
014B26  B83204     MUL.UU W6, W4, W4
014B28  400005     ADD W0, W5, W0
014B2A  780280     MOV W0, W5
014B2C  DD2B48     SL W5, #8, W6
014B2E  DE2248     LSR W4, #8, W4
014B30  730204     IOR W6, W4, W4
014B32  DE2AC8     LSR W5, #8, W5
014B34  780204     MOV W4, W4
014B36  888814     MOV W4, SV_PWM1_0
20604:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-257])>>8) ;
014B38  808794     MOV Theta1CntPWM, W4
014B3A  2007F5     MOV #0x7F, W5
014B3C  528204     SUB W5, W4, W4
014B3E  240D65     MOV #0x40D6, W5
014B40  428204     ADD W5, W4, W4
014B42  784214     MOV.B [W4], W4
014B44  FB8304     ZE W4, W6
014B46  200007     MOV #0x0, W7
014B48  81F504     MOV Amplitude1Tmp, W4
014B4A  81F515     MOV 0x3EA2, W5
014B4C  B83884     MUL.UU W7, W4, W0
014B4E  B82986     MUL.UU W5, W6, W2
014B50  780082     MOV W2, W1
014B52  400001     ADD W0, W1, W0
014B54  780306     MOV W6, W6
014B56  780204     MOV W4, W4
014B58  B83204     MUL.UU W6, W4, W4
014B5A  400005     ADD W0, W5, W0
014B5C  780280     MOV W0, W5
014B5E  DD2B48     SL W5, #8, W6
014B60  DE2248     LSR W4, #8, W4
014B62  730204     IOR W6, W4, W4
014B64  DE2AC8     LSR W5, #8, W5
014B66  780204     MOV W4, W4
014B68  888824     MOV W4, SV_PWM1_1
20605:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-129])>>8) ;
014B6A  808794     MOV Theta1CntPWM, W4
014B6C  200FF5     MOV #0xFF, W5
014B6E  528204     SUB W5, W4, W4
014B70  240D65     MOV #0x40D6, W5
014B72  428204     ADD W5, W4, W4
014B74  784214     MOV.B [W4], W4
014B76  FB8304     ZE W4, W6
014B78  200007     MOV #0x0, W7
014B7A  81F504     MOV Amplitude1Tmp, W4
014B7C  81F515     MOV 0x3EA2, W5
014B7E  B83884     MUL.UU W7, W4, W0
014B80  B82986     MUL.UU W5, W6, W2
014B82  780082     MOV W2, W1
014B84  400001     ADD W0, W1, W0
014B86  780306     MOV W6, W6
014B88  780204     MOV W4, W4
014B8A  B83204     MUL.UU W6, W4, W4
014B8C  400005     ADD W0, W5, W0
014B8E  780280     MOV W0, W5
014B90  DD2B48     SL W5, #8, W6
014B92  DE2248     LSR W4, #8, W4
014B94  730204     IOR W6, W4, W4
014B96  DE2AC8     LSR W5, #8, W5
014B98  780204     MOV W4, W4
014B9A  888834     MOV W4, SV_PWM1_2
20606:                       break ;
014B9C  3707F7     BRA 0x15B8C
20607:                    case 3 :
20608:                        PWM1_A_H=0;
014B9E  A92E44     BCLR LATE, #1
20609:                        PWM1_A_L=1;
014BA0  A80E44     BSET LATE, #0
20610:                         PWM1_B_H=0;
014BA2  A96E44     BCLR LATE, #3
20611:                         PWM1_B_L=0;
014BA4  A94E44     BCLR LATE, #2
20612:                         PWM1_C_H=0;
014BA6  A9AE44     BCLR LATE, #5
20613:                         PWM1_C_L=0;
014BA8  A98E44     BCLR LATE, #4
20614:             
20615:             
20616:                         PEN1_A_H=0;
014BAA  A9EC23     BCLR 0xC23, #7
20617:                         PEN1_A_L=0;
014BAC  A9CC23     BCLR 0xC23, #6
20618:                         PEN1_B_H=0;//1;
014BAE  A9EC43     BCLR 0xC43, #7
20619:                         PEN1_B_L=0;
014BB0  A9CC43     BCLR 0xC43, #6
20620:                         PEN1_C_H=1;
014BB2  A8EC63     BSET 0xC63, #7
20621:                         if (StrongMode)
014BB4  8095F5     MOV 0x12BE, W5
014BB6  240004     MOV #0x4000, W4
014BB8  628204     AND W5, W4, W4
014BBA  520FE0     SUB W4, #0x0, [W15]
014BBC  320002     BRA Z, 0x14BC2
20622:                         PEN1_C_L=1;
014BBE  A8CC63     BSET 0xC63, #6
014BC0  370001     BRA 0x14BC4
20623:                         else
20624:                         PEN1_C_L=0;
014BC2  A9CC63     BCLR 0xC63, #6
20625:             
20626:             
20627:                         SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-65])>>8) ;
014BC4  808794     MOV Theta1CntPWM, W4
014BC6  2013F5     MOV #0x13F, W5
014BC8  528204     SUB W5, W4, W4
014BCA  240D65     MOV #0x40D6, W5
014BCC  428204     ADD W5, W4, W4
014BCE  784214     MOV.B [W4], W4
014BD0  FB8304     ZE W4, W6
014BD2  200007     MOV #0x0, W7
014BD4  81F504     MOV Amplitude1Tmp, W4
014BD6  81F515     MOV 0x3EA2, W5
014BD8  B83884     MUL.UU W7, W4, W0
014BDA  B82986     MUL.UU W5, W6, W2
014BDC  780082     MOV W2, W1
014BDE  400001     ADD W0, W1, W0
014BE0  780306     MOV W6, W6
014BE2  780204     MOV W4, W4
014BE4  B83204     MUL.UU W6, W4, W4
014BE6  400005     ADD W0, W5, W0
014BE8  780280     MOV W0, W5
014BEA  DD2B48     SL W5, #8, W6
014BEC  DE2248     LSR W4, #8, W4
014BEE  730204     IOR W6, W4, W4
014BF0  DE2AC8     LSR W5, #8, W5
014BF2  780204     MOV W4, W4
014BF4  888814     MOV W4, SV_PWM1_0
20628:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-321])>>8) ;
014BF6  808794     MOV Theta1CntPWM, W4
014BF8  2003F5     MOV #0x3F, W5
014BFA  528204     SUB W5, W4, W4
014BFC  240D65     MOV #0x40D6, W5
014BFE  428204     ADD W5, W4, W4
014C00  784214     MOV.B [W4], W4
014C02  FB8304     ZE W4, W6
014C04  200007     MOV #0x0, W7
014C06  81F504     MOV Amplitude1Tmp, W4
014C08  81F515     MOV 0x3EA2, W5
014C0A  B83884     MUL.UU W7, W4, W0
014C0C  B82986     MUL.UU W5, W6, W2
014C0E  780082     MOV W2, W1
014C10  400001     ADD W0, W1, W0
014C12  780306     MOV W6, W6
014C14  780204     MOV W4, W4
014C16  B83204     MUL.UU W6, W4, W4
014C18  400005     ADD W0, W5, W0
014C1A  780280     MOV W0, W5
014C1C  DD2B48     SL W5, #8, W6
014C1E  DE2248     LSR W4, #8, W4
014C20  730204     IOR W6, W4, W4
014C22  DE2AC8     LSR W5, #8, W5
014C24  780204     MOV W4, W4
014C26  888824     MOV W4, SV_PWM1_1
20629:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-193])>>8) ;
014C28  808794     MOV Theta1CntPWM, W4
014C2A  200BF5     MOV #0xBF, W5
014C2C  528204     SUB W5, W4, W4
014C2E  240D65     MOV #0x40D6, W5
014C30  428204     ADD W5, W4, W4
014C32  784214     MOV.B [W4], W4
014C34  FB8304     ZE W4, W6
014C36  200007     MOV #0x0, W7
014C38  81F504     MOV Amplitude1Tmp, W4
014C3A  81F515     MOV 0x3EA2, W5
014C3C  B83884     MUL.UU W7, W4, W0
014C3E  B82986     MUL.UU W5, W6, W2
014C40  780082     MOV W2, W1
014C42  400001     ADD W0, W1, W0
014C44  780306     MOV W6, W6
014C46  780204     MOV W4, W4
014C48  B83204     MUL.UU W6, W4, W4
014C4A  400005     ADD W0, W5, W0
014C4C  780280     MOV W0, W5
014C4E  DD2B48     SL W5, #8, W6
014C50  DE2248     LSR W4, #8, W4
014C52  730204     IOR W6, W4, W4
014C54  DE2AC8     LSR W5, #8, W5
014C56  780204     MOV W4, W4
014C58  888834     MOV W4, SV_PWM1_2
20630:                       break ;
014C5A  370798     BRA 0x15B8C
20631:                    case 2 :
20632:                         PWM1_A_H=0;
014C5C  A92E44     BCLR LATE, #1
20633:                         PWM1_A_L=0;
014C5E  A90E44     BCLR LATE, #0
20634:                         PWM1_B_H=0;
014C60  A96E44     BCLR LATE, #3
20635:                         PWM1_B_L=1;
014C62  A84E44     BSET LATE, #2
20636:                         PWM1_C_H=0;
014C64  A9AE44     BCLR LATE, #5
20637:                         PWM1_C_L=0;
014C66  A98E44     BCLR LATE, #4
20638:             
20639:             
20640:                         PEN1_A_H=0;//1;
014C68  A9EC23     BCLR 0xC23, #7
20641:                         PEN1_A_L=0;
014C6A  A9CC23     BCLR 0xC23, #6
20642:                         PEN1_B_H=0;
014C6C  A9EC43     BCLR 0xC43, #7
20643:                         PEN1_B_L=0;
014C6E  A9CC43     BCLR 0xC43, #6
20644:                         PEN1_C_H=1;
014C70  A8EC63     BSET 0xC63, #7
20645:                         if (StrongMode)
014C72  8095F5     MOV 0x12BE, W5
014C74  240004     MOV #0x4000, W4
014C76  628204     AND W5, W4, W4
014C78  520FE0     SUB W4, #0x0, [W15]
014C7A  320002     BRA Z, 0x14C80
20646:                         PEN1_C_L=1;
014C7C  A8CC63     BSET 0xC63, #6
014C7E  370001     BRA 0x14C82
20647:                         else
20648:                         PEN1_C_L=0;
014C80  A9CC63     BCLR 0xC63, #6
20649:             
20650:              
20651:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-129])>>8) ;
014C82  808794     MOV Theta1CntPWM, W4
014C84  200FF5     MOV #0xFF, W5
014C86  528204     SUB W5, W4, W4
014C88  240D65     MOV #0x40D6, W5
014C8A  428204     ADD W5, W4, W4
014C8C  784214     MOV.B [W4], W4
014C8E  FB8304     ZE W4, W6
014C90  200007     MOV #0x0, W7
014C92  81F504     MOV Amplitude1Tmp, W4
014C94  81F515     MOV 0x3EA2, W5
014C96  B83884     MUL.UU W7, W4, W0
014C98  B82986     MUL.UU W5, W6, W2
014C9A  780082     MOV W2, W1
014C9C  400001     ADD W0, W1, W0
014C9E  780306     MOV W6, W6
014CA0  780204     MOV W4, W4
014CA2  B83204     MUL.UU W6, W4, W4
014CA4  400005     ADD W0, W5, W0
014CA6  780280     MOV W0, W5
014CA8  DD2B48     SL W5, #8, W6
014CAA  DE2248     LSR W4, #8, W4
014CAC  730204     IOR W6, W4, W4
014CAE  DE2AC8     LSR W5, #8, W5
014CB0  780204     MOV W4, W4
014CB2  888814     MOV W4, SV_PWM1_0
20652:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-1])>>8) ;
014CB4  808794     MOV Theta1CntPWM, W4
014CB6  2017F5     MOV #0x17F, W5
014CB8  528204     SUB W5, W4, W4
014CBA  240D65     MOV #0x40D6, W5
014CBC  428204     ADD W5, W4, W4
014CBE  784214     MOV.B [W4], W4
014CC0  FB8304     ZE W4, W6
014CC2  200007     MOV #0x0, W7
014CC4  81F504     MOV Amplitude1Tmp, W4
014CC6  81F515     MOV 0x3EA2, W5
014CC8  B83884     MUL.UU W7, W4, W0
014CCA  B82986     MUL.UU W5, W6, W2
014CCC  780082     MOV W2, W1
014CCE  400001     ADD W0, W1, W0
014CD0  780306     MOV W6, W6
014CD2  780204     MOV W4, W4
014CD4  B83204     MUL.UU W6, W4, W4
014CD6  400005     ADD W0, W5, W0
014CD8  780280     MOV W0, W5
014CDA  DD2B48     SL W5, #8, W6
014CDC  DE2248     LSR W4, #8, W4
014CDE  730204     IOR W6, W4, W4
014CE0  DE2AC8     LSR W5, #8, W5
014CE2  780204     MOV W4, W4
014CE4  888824     MOV W4, SV_PWM1_1
20653:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-257])>>8) ;
014CE6  808794     MOV Theta1CntPWM, W4
014CE8  2007F5     MOV #0x7F, W5
014CEA  528204     SUB W5, W4, W4
014CEC  240D65     MOV #0x40D6, W5
014CEE  428204     ADD W5, W4, W4
014CF0  784214     MOV.B [W4], W4
014CF2  FB8304     ZE W4, W6
014CF4  200007     MOV #0x0, W7
014CF6  81F504     MOV Amplitude1Tmp, W4
014CF8  81F515     MOV 0x3EA2, W5
014CFA  B83884     MUL.UU W7, W4, W0
014CFC  B82986     MUL.UU W5, W6, W2
014CFE  780082     MOV W2, W1
014D00  400001     ADD W0, W1, W0
014D02  780306     MOV W6, W6
014D04  780204     MOV W4, W4
014D06  B83204     MUL.UU W6, W4, W4
014D08  400005     ADD W0, W5, W0
014D0A  780280     MOV W0, W5
014D0C  DD2B48     SL W5, #8, W6
014D0E  DE2248     LSR W4, #8, W4
014D10  730204     IOR W6, W4, W4
014D12  DE2AC8     LSR W5, #8, W5
014D14  780204     MOV W4, W4
014D16  888834     MOV W4, SV_PWM1_2
20654:                       break ;
014D18  370739     BRA 0x15B8C
20655:                    case 6 :
20656:                         PWM1_A_H=0;
014D1A  A92E44     BCLR LATE, #1
20657:                         PWM1_A_L=0;
014D1C  A90E44     BCLR LATE, #0
20658:                         PWM1_B_H=0;
014D1E  A96E44     BCLR LATE, #3
20659:                         PWM1_B_L=1;
014D20  A84E44     BSET LATE, #2
20660:                         PWM1_C_H=0;
014D22  A9AE44     BCLR LATE, #5
20661:                         PWM1_C_L=0;
014D24  A98E44     BCLR LATE, #4
20662:             
20663:             
20664:                         PEN1_A_H=1;
014D26  A8EC23     BSET 0xC23, #7
20665:                         if (StrongMode)
014D28  8095F5     MOV 0x12BE, W5
014D2A  240004     MOV #0x4000, W4
014D2C  628204     AND W5, W4, W4
014D2E  520FE0     SUB W4, #0x0, [W15]
014D30  320002     BRA Z, 0x14D36
20666:                         PEN1_A_L=1;
014D32  A8CC23     BSET 0xC23, #6
014D34  370001     BRA 0x14D38
20667:                         else
20668:                         PEN1_A_L=0;
014D36  A9CC23     BCLR 0xC23, #6
20669:                         PEN1_B_H=0;
014D38  A9EC43     BCLR 0xC43, #7
20670:                         PEN1_B_L=0;
014D3A  A9CC43     BCLR 0xC43, #6
20671:                         PEN1_C_H=0;//1;
014D3C  A9EC63     BCLR 0xC63, #7
20672:                         PEN1_C_L=0;
014D3E  A9CC63     BCLR 0xC63, #6
20673:              
20674:             
20675:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-193])>>8) ;
014D40  808794     MOV Theta1CntPWM, W4
014D42  200BF5     MOV #0xBF, W5
014D44  528204     SUB W5, W4, W4
014D46  240D65     MOV #0x40D6, W5
014D48  428204     ADD W5, W4, W4
014D4A  784214     MOV.B [W4], W4
014D4C  FB8304     ZE W4, W6
014D4E  200007     MOV #0x0, W7
014D50  81F504     MOV Amplitude1Tmp, W4
014D52  81F515     MOV 0x3EA2, W5
014D54  B83884     MUL.UU W7, W4, W0
014D56  B82986     MUL.UU W5, W6, W2
014D58  780082     MOV W2, W1
014D5A  400001     ADD W0, W1, W0
014D5C  780306     MOV W6, W6
014D5E  780204     MOV W4, W4
014D60  B83204     MUL.UU W6, W4, W4
014D62  400005     ADD W0, W5, W0
014D64  780280     MOV W0, W5
014D66  DD2B48     SL W5, #8, W6
014D68  DE2248     LSR W4, #8, W4
014D6A  730204     IOR W6, W4, W4
014D6C  DE2AC8     LSR W5, #8, W5
014D6E  780204     MOV W4, W4
014D70  888814     MOV W4, SV_PWM1_0
20676:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-65])>>8) ;
014D72  808794     MOV Theta1CntPWM, W4
014D74  2013F5     MOV #0x13F, W5
014D76  528204     SUB W5, W4, W4
014D78  240D65     MOV #0x40D6, W5
014D7A  428204     ADD W5, W4, W4
014D7C  784214     MOV.B [W4], W4
014D7E  FB8304     ZE W4, W6
014D80  200007     MOV #0x0, W7
014D82  81F504     MOV Amplitude1Tmp, W4
014D84  81F515     MOV 0x3EA2, W5
014D86  B83884     MUL.UU W7, W4, W0
014D88  B82986     MUL.UU W5, W6, W2
014D8A  780082     MOV W2, W1
014D8C  400001     ADD W0, W1, W0
014D8E  780306     MOV W6, W6
014D90  780204     MOV W4, W4
014D92  B83204     MUL.UU W6, W4, W4
014D94  400005     ADD W0, W5, W0
014D96  780280     MOV W0, W5
014D98  DD2B48     SL W5, #8, W6
014D9A  DE2248     LSR W4, #8, W4
014D9C  730204     IOR W6, W4, W4
014D9E  DE2AC8     LSR W5, #8, W5
014DA0  780204     MOV W4, W4
014DA2  888824     MOV W4, SV_PWM1_1
20677:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-321])>>8) ;
014DA4  808794     MOV Theta1CntPWM, W4
014DA6  2003F5     MOV #0x3F, W5
014DA8  528204     SUB W5, W4, W4
014DAA  240D65     MOV #0x40D6, W5
014DAC  428204     ADD W5, W4, W4
014DAE  784214     MOV.B [W4], W4
014DB0  FB8304     ZE W4, W6
014DB2  200007     MOV #0x0, W7
014DB4  81F504     MOV Amplitude1Tmp, W4
014DB6  81F515     MOV 0x3EA2, W5
014DB8  B83884     MUL.UU W7, W4, W0
014DBA  B82986     MUL.UU W5, W6, W2
014DBC  780082     MOV W2, W1
014DBE  400001     ADD W0, W1, W0
014DC0  780306     MOV W6, W6
014DC2  780204     MOV W4, W4
014DC4  B83204     MUL.UU W6, W4, W4
014DC6  400005     ADD W0, W5, W0
014DC8  780280     MOV W0, W5
014DCA  DD2B48     SL W5, #8, W6
014DCC  DE2248     LSR W4, #8, W4
014DCE  730204     IOR W6, W4, W4
014DD0  DE2AC8     LSR W5, #8, W5
014DD2  780204     MOV W4, W4
014DD4  888834     MOV W4, SV_PWM1_2
20678:                       break ;
014DD6  3706DA     BRA 0x15B8C
20679:                    case 4 :
20680:                         PWM1_A_H=0;
014DD8  A92E44     BCLR LATE, #1
20681:                         PWM1_A_L=0;
014DDA  A90E44     BCLR LATE, #0
20682:                         PWM1_B_H=0;
014DDC  A96E44     BCLR LATE, #3
20683:                         PWM1_B_L=0;
014DDE  A94E44     BCLR LATE, #2
20684:                         PWM1_C_H=0;
014DE0  A9AE44     BCLR LATE, #5
20685:                         PWM1_C_L=1;
014DE2  A88E44     BSET LATE, #4
20686:             
20687:             
20688:                         if (StrongMode)
014DE4  8095F5     MOV 0x12BE, W5
014DE6  240004     MOV #0x4000, W4
014DE8  628204     AND W5, W4, W4
014DEA  520FE0     SUB W4, #0x0, [W15]
014DEC  320002     BRA Z, 0x14DF2
20689:                         PEN1_A_L=1;
014DEE  A8CC23     BSET 0xC23, #6
014DF0  370001     BRA 0x14DF4
20690:                         else
20691:                         PEN1_A_L=0;
014DF2  A9CC23     BCLR 0xC23, #6
20692:                         PEN1_A_H=1;
014DF4  A8EC23     BSET 0xC23, #7
20693:                         PEN1_B_H=0;//1;
014DF6  A9EC43     BCLR 0xC43, #7
20694:                         PEN1_B_L=0;
014DF8  A9CC43     BCLR 0xC43, #6
20695:                         PEN1_C_H=0;
014DFA  A9EC63     BCLR 0xC63, #7
20696:                         PEN1_C_L=0;
014DFC  A9CC63     BCLR 0xC63, #6
20697:                
20698:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-257])>>8) ;
014DFE  808794     MOV Theta1CntPWM, W4
014E00  2007F5     MOV #0x7F, W5
014E02  528204     SUB W5, W4, W4
014E04  240D65     MOV #0x40D6, W5
014E06  428204     ADD W5, W4, W4
014E08  784214     MOV.B [W4], W4
014E0A  FB8304     ZE W4, W6
014E0C  200007     MOV #0x0, W7
014E0E  81F504     MOV Amplitude1Tmp, W4
014E10  81F515     MOV 0x3EA2, W5
014E12  B83884     MUL.UU W7, W4, W0
014E14  B82986     MUL.UU W5, W6, W2
014E16  780082     MOV W2, W1
014E18  400001     ADD W0, W1, W0
014E1A  780306     MOV W6, W6
014E1C  780204     MOV W4, W4
014E1E  B83204     MUL.UU W6, W4, W4
014E20  400005     ADD W0, W5, W0
014E22  780280     MOV W0, W5
014E24  DD2B48     SL W5, #8, W6
014E26  DE2248     LSR W4, #8, W4
014E28  730204     IOR W6, W4, W4
014E2A  DE2AC8     LSR W5, #8, W5
014E2C  780204     MOV W4, W4
014E2E  888814     MOV W4, SV_PWM1_0
20699:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-129])>>8) ;
014E30  808794     MOV Theta1CntPWM, W4
014E32  200FF5     MOV #0xFF, W5
014E34  528204     SUB W5, W4, W4
014E36  240D65     MOV #0x40D6, W5
014E38  428204     ADD W5, W4, W4
014E3A  784214     MOV.B [W4], W4
014E3C  FB8304     ZE W4, W6
014E3E  200007     MOV #0x0, W7
014E40  81F504     MOV Amplitude1Tmp, W4
014E42  81F515     MOV 0x3EA2, W5
014E44  B83884     MUL.UU W7, W4, W0
014E46  B82986     MUL.UU W5, W6, W2
014E48  780082     MOV W2, W1
014E4A  400001     ADD W0, W1, W0
014E4C  780306     MOV W6, W6
014E4E  780204     MOV W4, W4
014E50  B83204     MUL.UU W6, W4, W4
014E52  400005     ADD W0, W5, W0
014E54  780280     MOV W0, W5
014E56  DD2B48     SL W5, #8, W6
014E58  DE2248     LSR W4, #8, W4
014E5A  730204     IOR W6, W4, W4
014E5C  DE2AC8     LSR W5, #8, W5
014E5E  780204     MOV W4, W4
014E60  888824     MOV W4, SV_PWM1_1
20700:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-1])>>8) ;
014E62  808794     MOV Theta1CntPWM, W4
014E64  2017F5     MOV #0x17F, W5
014E66  528204     SUB W5, W4, W4
014E68  240D65     MOV #0x40D6, W5
014E6A  428204     ADD W5, W4, W4
014E6C  784214     MOV.B [W4], W4
014E6E  FB8304     ZE W4, W6
014E70  200007     MOV #0x0, W7
014E72  81F504     MOV Amplitude1Tmp, W4
014E74  81F515     MOV 0x3EA2, W5
014E76  B83884     MUL.UU W7, W4, W0
014E78  B82986     MUL.UU W5, W6, W2
014E7A  780082     MOV W2, W1
014E7C  400001     ADD W0, W1, W0
014E7E  780306     MOV W6, W6
014E80  780204     MOV W4, W4
014E82  B83204     MUL.UU W6, W4, W4
014E84  400005     ADD W0, W5, W0
014E86  780280     MOV W0, W5
014E88  DD2B48     SL W5, #8, W6
014E8A  DE2248     LSR W4, #8, W4
014E8C  730204     IOR W6, W4, W4
014E8E  DE2AC8     LSR W5, #8, W5
014E90  780204     MOV W4, W4
014E92  888834     MOV W4, SV_PWM1_2
20701:                       break ;
014E94  000000     NOP
014E96  37067A     BRA 0x15B8C
20702:                    case 5 :
20703:                         PWM1_A_H=0;
014E98  A92E44     BCLR LATE, #1
20704:                         PWM1_A_L=0;
014E9A  A90E44     BCLR LATE, #0
20705:                         PWM1_B_H=0;
014E9C  A96E44     BCLR LATE, #3
20706:                         PWM1_B_L=0;
014E9E  A94E44     BCLR LATE, #2
20707:                         PWM1_C_H=0;
014EA0  A9AE44     BCLR LATE, #5
20708:                         PWM1_C_L=1;
014EA2  A88E44     BSET LATE, #4
20709:             
20710:             
20711:                         PEN1_A_H=0;//1;
014EA4  A9EC23     BCLR 0xC23, #7
20712:                         PEN1_A_L=0;
014EA6  A9CC23     BCLR 0xC23, #6
20713:                         PEN1_B_H=1;
014EA8  A8EC43     BSET 0xC43, #7
20714:                         if (StrongMode)
014EAA  8095F5     MOV 0x12BE, W5
014EAC  240004     MOV #0x4000, W4
014EAE  628204     AND W5, W4, W4
014EB0  520FE0     SUB W4, #0x0, [W15]
014EB2  320002     BRA Z, 0x14EB8
20715:                         PEN1_B_L=1;
014EB4  A8CC43     BSET 0xC43, #6
014EB6  370001     BRA 0x14EBA
20716:                         else
20717:                         PEN1_B_L=0;
014EB8  A9CC43     BCLR 0xC43, #6
20718:                         PEN1_C_H=0;
014EBA  A9EC63     BCLR 0xC63, #7
20719:                         PEN1_C_L=0;
014EBC  A9CC63     BCLR 0xC63, #6
20720:                
20721:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-321])>>8) ;
014EBE  808794     MOV Theta1CntPWM, W4
014EC0  2003F5     MOV #0x3F, W5
014EC2  528204     SUB W5, W4, W4
014EC4  240D65     MOV #0x40D6, W5
014EC6  428204     ADD W5, W4, W4
014EC8  784214     MOV.B [W4], W4
014ECA  FB8304     ZE W4, W6
014ECC  200007     MOV #0x0, W7
014ECE  81F504     MOV Amplitude1Tmp, W4
014ED0  81F515     MOV 0x3EA2, W5
014ED2  B83884     MUL.UU W7, W4, W0
014ED4  B82986     MUL.UU W5, W6, W2
014ED6  780082     MOV W2, W1
014ED8  400001     ADD W0, W1, W0
014EDA  780306     MOV W6, W6
014EDC  780204     MOV W4, W4
014EDE  B83204     MUL.UU W6, W4, W4
014EE0  400005     ADD W0, W5, W0
014EE2  780280     MOV W0, W5
014EE4  DD2B48     SL W5, #8, W6
014EE6  DE2248     LSR W4, #8, W4
014EE8  730204     IOR W6, W4, W4
014EEA  DE2AC8     LSR W5, #8, W5
014EEC  780204     MOV W4, W4
014EEE  888814     MOV W4, SV_PWM1_0
20722:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-193])>>8) ;
014EF0  808794     MOV Theta1CntPWM, W4
014EF2  200BF5     MOV #0xBF, W5
014EF4  528204     SUB W5, W4, W4
014EF6  240D65     MOV #0x40D6, W5
014EF8  428204     ADD W5, W4, W4
014EFA  784214     MOV.B [W4], W4
014EFC  FB8304     ZE W4, W6
014EFE  200007     MOV #0x0, W7
014F00  81F504     MOV Amplitude1Tmp, W4
014F02  81F515     MOV 0x3EA2, W5
014F04  B83884     MUL.UU W7, W4, W0
014F06  B82986     MUL.UU W5, W6, W2
014F08  780082     MOV W2, W1
014F0A  400001     ADD W0, W1, W0
014F0C  780306     MOV W6, W6
014F0E  780204     MOV W4, W4
014F10  B83204     MUL.UU W6, W4, W4
014F12  400005     ADD W0, W5, W0
014F14  780280     MOV W0, W5
014F16  DD2B48     SL W5, #8, W6
014F18  DE2248     LSR W4, #8, W4
014F1A  730204     IOR W6, W4, W4
014F1C  DE2AC8     LSR W5, #8, W5
014F1E  780204     MOV W4, W4
014F20  888824     MOV W4, SV_PWM1_1
20723:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-65])>>8) ;
014F22  808794     MOV Theta1CntPWM, W4
014F24  2013F5     MOV #0x13F, W5
014F26  528204     SUB W5, W4, W4
014F28  240D65     MOV #0x40D6, W5
014F2A  428204     ADD W5, W4, W4
014F2C  784214     MOV.B [W4], W4
014F2E  FB8304     ZE W4, W6
014F30  200007     MOV #0x0, W7
014F32  81F504     MOV Amplitude1Tmp, W4
014F34  81F515     MOV 0x3EA2, W5
014F36  B83884     MUL.UU W7, W4, W0
014F38  B82986     MUL.UU W5, W6, W2
014F3A  780082     MOV W2, W1
014F3C  400001     ADD W0, W1, W0
014F3E  780306     MOV W6, W6
014F40  780204     MOV W4, W4
014F42  B83204     MUL.UU W6, W4, W4
014F44  400005     ADD W0, W5, W0
014F46  780280     MOV W0, W5
014F48  DD2B48     SL W5, #8, W6
014F4A  DE2248     LSR W4, #8, W4
014F4C  730204     IOR W6, W4, W4
014F4E  DE2AC8     LSR W5, #8, W5
014F50  780204     MOV W4, W4
014F52  888834     MOV W4, SV_PWM1_2
20724:                       break ;
014F54  37061B     BRA 0x15B8C
015B8A  000000     NOP
20725:             
20726:                   }
20727:                       }
20728:                       else
20729:                       {
20730:                   switch (Sensor1_Prev_OP)
014F56  210FA4     MOV #0x10FA, W4
014F58  784214     MOV.B [W4], W4
014F5A  FB8204     ZE W4, W4
014F5C  B92361     MUL.SU W4, #1, W6
014F5E  EB8200     SETM W4
014F60  EB8280     SETM W5
014F62  420206     ADD W4, W6, W4
014F64  4A8287     ADDC W5, W7, W5
014F66  200056     MOV #0x5, W6
014F68  200007     MOV #0x0, W7
014F6A  520F86     SUB W4, W6, [W15]
014F6C  5A8F87     SUBB W5, W7, [W15]
014F6E  3E060E     BRA GTU, 0x15B8C
014F70  010604     BRA W4
014F72  370005     BRA 0x14F7E
014F74  370206     BRA 0x15382
014F76  370104     BRA 0x15180
014F78  370406     BRA 0x15786
014F7A  370506     BRA 0x15988
014F7C  370303     BRA 0x15584
20731:                    {
20732:             
20733:                    case 1 :
20734:             
20735:                        if (!SIN_MIDDLE)
014F7E  809765     MOV StatFlgs2, W5
014F80  240004     MOV #0x4000, W4
014F82  628204     AND W5, W4, W4
014F84  520FE0     SUB W4, #0x0, [W15]
014F86  3A0021     BRA NZ, 0x14FCA
20736:                        {
20737:                            ThetaIndex=THETA_NUM-Theta1CntPWM-1;
014F88  808794     MOV Theta1CntPWM, W4
014F8A  2017F5     MOV #0x17F, W5
014F8C  528204     SUB W5, W4, W4
014F8E  897D34     MOV W4, ThetaIndex
20738:                        TabRes0=(unsigned long int)tab_sin[ThetaIndex];
014F90  817D34     MOV ThetaIndex, W4
014F92  2A9785     MOV #0xA978, W5
014F94  428204     ADD W5, W4, W4
014F96  784214     MOV.B [W4], W4
014F98  FB8204     ZE W4, W4
014F9A  200005     MOV #0x0, W5
014F9C  89FEC4     MOV W4, TabRes0
014F9E  89FED5     MOV W5, 0x3FDA
20739:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-257];
014FA0  808794     MOV Theta1CntPWM, W4
014FA2  2007F5     MOV #0x7F, W5
014FA4  528204     SUB W5, W4, W4
014FA6  2A9785     MOV #0xA978, W5
014FA8  428204     ADD W5, W4, W4
014FAA  784214     MOV.B [W4], W4
014FAC  FB8204     ZE W4, W4
014FAE  200005     MOV #0x0, W5
014FB0  89FEE4     MOV W4, TabRes1
014FB2  89FEF5     MOV W5, 0x3FDE
20740:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-129];
014FB4  808794     MOV Theta1CntPWM, W4
014FB6  200FF5     MOV #0xFF, W5
014FB8  528204     SUB W5, W4, W4
014FBA  2A9785     MOV #0xA978, W5
014FBC  428204     ADD W5, W4, W4
014FBE  784214     MOV.B [W4], W4
014FC0  FB8204     ZE W4, W4
014FC2  200005     MOV #0x0, W5
014FC4  89FF04     MOV W4, TabRes2
014FC6  89FF15     MOV W5, 0x3FE2
014FC8  37001E     BRA 0x15006
20741:                        }
20742:                     else 
20743:                     {
20744:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-1]);
014FCA  808794     MOV Theta1CntPWM, W4
014FCC  2017F5     MOV #0x17F, W5
014FCE  528204     SUB W5, W4, W4
014FD0  2AAF85     MOV #0xAAF8, W5
014FD2  428204     ADD W5, W4, W4
014FD4  784214     MOV.B [W4], W4
014FD6  FB0204     SE W4, W4
014FD8  DEA2CF     ASR W4, #15, W5
014FDA  89FEC4     MOV W4, TabRes0
014FDC  89FED5     MOV W5, 0x3FDA
20745:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-257]);
014FDE  808794     MOV Theta1CntPWM, W4
014FE0  2007F5     MOV #0x7F, W5
014FE2  528204     SUB W5, W4, W4
014FE4  2AAF85     MOV #0xAAF8, W5
014FE6  428204     ADD W5, W4, W4
014FE8  784214     MOV.B [W4], W4
014FEA  FB0204     SE W4, W4
014FEC  DEA2CF     ASR W4, #15, W5
014FEE  89FEE4     MOV W4, TabRes1
014FF0  89FEF5     MOV W5, 0x3FDE
20746:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-129]);
014FF2  808794     MOV Theta1CntPWM, W4
014FF4  200FF5     MOV #0xFF, W5
014FF6  528204     SUB W5, W4, W4
014FF8  2AAF85     MOV #0xAAF8, W5
014FFA  428204     ADD W5, W4, W4
014FFC  784214     MOV.B [W4], W4
014FFE  FB0204     SE W4, W4
015000  DEA2CF     ASR W4, #15, W5
015002  89FF04     MOV W4, TabRes2
015004  89FF15     MOV W5, 0x3FE2
20747:                     }
20748:             
20749:                        if   (!StrongMode)
015006  8095F5     MOV 0x12BE, W5
015008  240004     MOV #0x4000, W4
01500A  628204     AND W5, W4, W4
01500C  520FE0     SUB W4, #0x0, [W15]
01500E  3A002A     BRA NZ, 0x15064
20750:                        {
20751:                        if (TabRes0==0)
015010  81FEC4     MOV TabRes0, W4
015012  81FED5     MOV 0x3FDA, W5
015014  520FE0     SUB W4, #0x0, [W15]
015016  5A8FE0     SUBB W5, #0x0, [W15]
015018  3A0005     BRA NZ, 0x15024
20752:                        {
20753:                         PWM1_A_H=0;
01501A  A92E44     BCLR LATE, #1
20754:                         PWM1_A_L=1;
01501C  A80E44     BSET LATE, #0
20755:                         PEN1_A_H=0;
01501E  A9EC23     BCLR 0xC23, #7
20756:                         PEN1_A_L=0;
015020  A9CC23     BCLR 0xC23, #6
015022  370004     BRA 0x1502C
20757:                        }
20758:                        else
20759:                        {
20760:                         PWM1_A_H=0;
015024  A92E44     BCLR LATE, #1
20761:                         PWM1_A_L=0;
015026  A90E44     BCLR LATE, #0
20762:                         PEN1_A_H=1;
015028  A8EC23     BSET 0xC23, #7
20763:                         PEN1_A_L=0;
01502A  A9CC23     BCLR 0xC23, #6
20764:                        }
20765:             
20766:                        if (TabRes1==0)
01502C  81FEE4     MOV TabRes1, W4
01502E  81FEF5     MOV 0x3FDE, W5
015030  520FE0     SUB W4, #0x0, [W15]
015032  5A8FE0     SUBB W5, #0x0, [W15]
015034  3A0005     BRA NZ, 0x15040
20767:                        {
20768:                         PWM1_B_H=0;
015036  A96E44     BCLR LATE, #3
20769:                         PWM1_B_L=1;
015038  A84E44     BSET LATE, #2
20770:                         PEN1_B_H=0;
01503A  A9EC43     BCLR 0xC43, #7
20771:                         PEN1_B_L=0;
01503C  A9CC43     BCLR 0xC43, #6
01503E  370004     BRA 0x15048
20772:                        }
20773:                        else
20774:                        {
20775:                         PWM1_B_H=0;
015040  A96E44     BCLR LATE, #3
20776:                         PWM1_B_L=0;
015042  A94E44     BCLR LATE, #2
20777:                         PEN1_B_H=1;
015044  A8EC43     BSET 0xC43, #7
20778:                         PEN1_B_L=0;
015046  A9CC43     BCLR 0xC43, #6
20779:                        }
20780:             
20781:             
20782:                        if (TabRes2==0)
015048  81FF04     MOV TabRes2, W4
01504A  81FF15     MOV 0x3FE2, W5
01504C  520FE0     SUB W4, #0x0, [W15]
01504E  5A8FE0     SUBB W5, #0x0, [W15]
015050  3A0005     BRA NZ, 0x1505C
20783:                        {
20784:                         PWM1_C_H=0;
015052  A9AE44     BCLR LATE, #5
20785:                         PWM1_C_L=1;
015054  A88E44     BSET LATE, #4
20786:                         PEN1_C_H=0;
015056  A9EC63     BCLR 0xC63, #7
20787:                         PEN1_C_L=0;
015058  A9CC63     BCLR 0xC63, #6
01505A  370004     BRA 0x15064
20788:                        }
20789:                        else
20790:                        {
20791:                         PWM1_C_H=0;
01505C  A9AE44     BCLR LATE, #5
20792:                         PWM1_C_L=0;
01505E  A98E44     BCLR LATE, #4
20793:                         PEN1_C_H=1;
015060  A8EC63     BSET 0xC63, #7
20794:                         PEN1_C_L=0;
015062  A9CC63     BCLR 0xC63, #6
20795:                        }
20796:             
20797:                 
20798:                        }
20799:             
20800:                    
20801:                        if (!SIN_MIDDLE)
015064  809765     MOV StatFlgs2, W5
015066  240004     MOV #0x4000, W4
015068  628204     AND W5, W4, W4
01506A  520FE0     SUB W4, #0x0, [W15]
01506C  3A003A     BRA NZ, 0x150E2
20802:                        {
20803:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
01506E  81F506     MOV Amplitude1Tmp, W6
015070  81F517     MOV 0x3EA2, W7
015072  81FEC4     MOV TabRes0, W4
015074  81FED5     MOV 0x3FDA, W5
015076  B83884     MUL.UU W7, W4, W0
015078  B82986     MUL.UU W5, W6, W2
01507A  780082     MOV W2, W1
01507C  400001     ADD W0, W1, W0
01507E  780306     MOV W6, W6
015080  780204     MOV W4, W4
015082  B83204     MUL.UU W6, W4, W4
015084  400005     ADD W0, W5, W0
015086  780280     MOV W0, W5
015088  DD2B48     SL W5, #8, W6
01508A  DE2248     LSR W4, #8, W4
01508C  730204     IOR W6, W4, W4
01508E  DE2AC8     LSR W5, #8, W5
015090  780204     MOV W4, W4
015092  888814     MOV W4, SV_PWM1_0
20804:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
015094  81F506     MOV Amplitude1Tmp, W6
015096  81F517     MOV 0x3EA2, W7
015098  81FEE4     MOV TabRes1, W4
01509A  81FEF5     MOV 0x3FDE, W5
01509C  B83884     MUL.UU W7, W4, W0
01509E  B82986     MUL.UU W5, W6, W2
0150A0  780082     MOV W2, W1
0150A2  400001     ADD W0, W1, W0
0150A4  780306     MOV W6, W6
0150A6  780204     MOV W4, W4
0150A8  B83204     MUL.UU W6, W4, W4
0150AA  400005     ADD W0, W5, W0
0150AC  780280     MOV W0, W5
0150AE  DD2B48     SL W5, #8, W6
0150B0  DE2248     LSR W4, #8, W4
0150B2  730204     IOR W6, W4, W4
0150B4  DE2AC8     LSR W5, #8, W5
0150B6  780204     MOV W4, W4
0150B8  888824     MOV W4, SV_PWM1_1
20805:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
0150BA  81F506     MOV Amplitude1Tmp, W6
0150BC  81F517     MOV 0x3EA2, W7
0150BE  81FF04     MOV TabRes2, W4
0150C0  81FF15     MOV 0x3FE2, W5
0150C2  B83884     MUL.UU W7, W4, W0
0150C4  B82986     MUL.UU W5, W6, W2
0150C6  780082     MOV W2, W1
0150C8  400001     ADD W0, W1, W0
0150CA  780306     MOV W6, W6
0150CC  780204     MOV W4, W4
0150CE  B83204     MUL.UU W6, W4, W4
0150D0  400005     ADD W0, W5, W0
0150D2  780280     MOV W0, W5
0150D4  DD2B48     SL W5, #8, W6
0150D6  DE2248     LSR W4, #8, W4
0150D8  730204     IOR W6, W4, W4
0150DA  DE2AC8     LSR W5, #8, W5
0150DC  780204     MOV W4, W4
0150DE  888834     MOV W4, SV_PWM1_2
20806:                        }
20807:                 else
20808:                 {
20809:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
0150E2  81F504     MOV Amplitude1Tmp, W4
0150E4  81F515     MOV 0x3EA2, W5
0150E6  BE0304     MOV.D W4, W6
0150E8  81FEC4     MOV TabRes0, W4
0150EA  81FED5     MOV 0x3FDA, W5
0150EC  B83884     MUL.UU W7, W4, W0
0150EE  B82986     MUL.UU W5, W6, W2
0150F0  780082     MOV W2, W1
0150F2  400001     ADD W0, W1, W0
0150F4  780306     MOV W6, W6
0150F6  780204     MOV W4, W4
0150F8  B83204     MUL.UU W6, W4, W4
0150FA  400005     ADD W0, W5, W0
0150FC  780280     MOV W0, W5
0150FE  DD2B48     SL W5, #8, W6
015100  DE2248     LSR W4, #8, W4
015102  730204     IOR W6, W4, W4
015104  DEAAC8     ASR W5, #8, W5
015106  780284     MOV W4, W5
015108  8092D6     MOV MAX_PWM_CONST, W6
01510A  200024     MOV #0x2, W4
01510C  090011     REPEAT #0x11
01510E  D80304     DIV.SW W6, W4
015110  780200     MOV W0, W4
015112  428204     ADD W5, W4, W4
015114  888814     MOV W4, SV_PWM1_0
20810:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
015116  81F504     MOV Amplitude1Tmp, W4
015118  81F515     MOV 0x3EA2, W5
01511A  BE0304     MOV.D W4, W6
01511C  81FEE4     MOV TabRes1, W4
01511E  81FEF5     MOV 0x3FDE, W5
015120  B83884     MUL.UU W7, W4, W0
015122  B82986     MUL.UU W5, W6, W2
015124  780082     MOV W2, W1
015126  400001     ADD W0, W1, W0
015128  780306     MOV W6, W6
01512A  780204     MOV W4, W4
01512C  B83204     MUL.UU W6, W4, W4
01512E  400005     ADD W0, W5, W0
015130  780280     MOV W0, W5
015132  DD2B48     SL W5, #8, W6
015134  DE2248     LSR W4, #8, W4
015136  730204     IOR W6, W4, W4
015138  DEAAC8     ASR W5, #8, W5
01513A  780284     MOV W4, W5
01513C  8092D6     MOV MAX_PWM_CONST, W6
01513E  200024     MOV #0x2, W4
015140  090011     REPEAT #0x11
015142  D80304     DIV.SW W6, W4
015144  780200     MOV W0, W4
015146  428204     ADD W5, W4, W4
015148  888824     MOV W4, SV_PWM1_1
20811:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
01514A  81F504     MOV Amplitude1Tmp, W4
01514C  81F515     MOV 0x3EA2, W5
01514E  BE0304     MOV.D W4, W6
015150  81FF04     MOV TabRes2, W4
015152  81FF15     MOV 0x3FE2, W5
015154  B83884     MUL.UU W7, W4, W0
015156  B82986     MUL.UU W5, W6, W2
015158  780082     MOV W2, W1
01515A  400001     ADD W0, W1, W0
01515C  780306     MOV W6, W6
01515E  780204     MOV W4, W4
015160  B83204     MUL.UU W6, W4, W4
015162  400005     ADD W0, W5, W0
015164  780280     MOV W0, W5
015166  DD2B48     SL W5, #8, W6
015168  DE2248     LSR W4, #8, W4
01516A  730204     IOR W6, W4, W4
01516C  DEAAC8     ASR W5, #8, W5
01516E  780284     MOV W4, W5
015170  8092D6     MOV MAX_PWM_CONST, W6
015172  200024     MOV #0x2, W4
015174  090011     REPEAT #0x11
015176  D80304     DIV.SW W6, W4
015178  780200     MOV W0, W4
01517A  428204     ADD W5, W4, W4
01517C  888834     MOV W4, SV_PWM1_2
20812:                 }
20813:             
20814:                       
20815:                       break ;
0150E0  370555     BRA 0x15B8C
01517E  370506     BRA 0x15B8C
20816:                    case 3 :
20817:                        if (!SIN_MIDDLE)
015180  809765     MOV StatFlgs2, W5
015182  240004     MOV #0x4000, W4
015184  628204     AND W5, W4, W4
015186  520FE0     SUB W4, #0x0, [W15]
015188  3A0021     BRA NZ, 0x151CC
20818:                        {
20819:                            ThetaIndex=THETA_NUM-Theta1CntPWM-65;
01518A  808794     MOV Theta1CntPWM, W4
01518C  2013F5     MOV #0x13F, W5
01518E  528204     SUB W5, W4, W4
015190  897D34     MOV W4, ThetaIndex
20820:                        TabRes0=(unsigned long int)tab_sin[ThetaIndex];
015192  817D34     MOV ThetaIndex, W4
015194  2A9785     MOV #0xA978, W5
015196  428204     ADD W5, W4, W4
015198  784214     MOV.B [W4], W4
01519A  FB8204     ZE W4, W4
01519C  200005     MOV #0x0, W5
01519E  89FEC4     MOV W4, TabRes0
0151A0  89FED5     MOV W5, 0x3FDA
20821:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-321];
0151A2  808794     MOV Theta1CntPWM, W4
0151A4  2003F5     MOV #0x3F, W5
0151A6  528204     SUB W5, W4, W4
0151A8  2A9785     MOV #0xA978, W5
0151AA  428204     ADD W5, W4, W4
0151AC  784214     MOV.B [W4], W4
0151AE  FB8204     ZE W4, W4
0151B0  200005     MOV #0x0, W5
0151B2  89FEE4     MOV W4, TabRes1
0151B4  89FEF5     MOV W5, 0x3FDE
20822:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-193];
0151B6  808794     MOV Theta1CntPWM, W4
0151B8  200BF5     MOV #0xBF, W5
0151BA  528204     SUB W5, W4, W4
0151BC  2A9785     MOV #0xA978, W5
0151BE  428204     ADD W5, W4, W4
0151C0  784214     MOV.B [W4], W4
0151C2  FB8204     ZE W4, W4
0151C4  200005     MOV #0x0, W5
0151C6  89FF04     MOV W4, TabRes2
0151C8  89FF15     MOV W5, 0x3FE2
0151CA  37001E     BRA 0x15208
20823:                        }
20824:                         else
20825:                         {
20826:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-65]);
0151CC  808794     MOV Theta1CntPWM, W4
0151CE  2013F5     MOV #0x13F, W5
0151D0  528204     SUB W5, W4, W4
0151D2  2AAF85     MOV #0xAAF8, W5
0151D4  428204     ADD W5, W4, W4
0151D6  784214     MOV.B [W4], W4
0151D8  FB0204     SE W4, W4
0151DA  DEA2CF     ASR W4, #15, W5
0151DC  89FEC4     MOV W4, TabRes0
0151DE  89FED5     MOV W5, 0x3FDA
20827:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-321]);
0151E0  808794     MOV Theta1CntPWM, W4
0151E2  2003F5     MOV #0x3F, W5
0151E4  528204     SUB W5, W4, W4
0151E6  2AAF85     MOV #0xAAF8, W5
0151E8  428204     ADD W5, W4, W4
0151EA  784214     MOV.B [W4], W4
0151EC  FB0204     SE W4, W4
0151EE  DEA2CF     ASR W4, #15, W5
0151F0  89FEE4     MOV W4, TabRes1
0151F2  89FEF5     MOV W5, 0x3FDE
20828:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-193]);
0151F4  808794     MOV Theta1CntPWM, W4
0151F6  200BF5     MOV #0xBF, W5
0151F8  528204     SUB W5, W4, W4
0151FA  2AAF85     MOV #0xAAF8, W5
0151FC  428204     ADD W5, W4, W4
0151FE  784214     MOV.B [W4], W4
015200  FB0204     SE W4, W4
015202  DEA2CF     ASR W4, #15, W5
015204  89FF04     MOV W4, TabRes2
015206  89FF15     MOV W5, 0x3FE2
20829:                         }
20830:             
20831:                        if   (!StrongMode)
015208  8095F5     MOV 0x12BE, W5
01520A  240004     MOV #0x4000, W4
01520C  628204     AND W5, W4, W4
01520E  520FE0     SUB W4, #0x0, [W15]
015210  3A002A     BRA NZ, 0x15266
20832:                        {
20833:             
20834:                        if (TabRes0==0)
015212  81FEC4     MOV TabRes0, W4
015214  81FED5     MOV 0x3FDA, W5
015216  520FE0     SUB W4, #0x0, [W15]
015218  5A8FE0     SUBB W5, #0x0, [W15]
01521A  3A0005     BRA NZ, 0x15226
20835:                        {
20836:                         PWM1_A_H=0;
01521C  A92E44     BCLR LATE, #1
20837:                         PWM1_A_L=1;
01521E  A80E44     BSET LATE, #0
20838:                         PEN1_A_H=0;
015220  A9EC23     BCLR 0xC23, #7
20839:                         PEN1_A_L=0;
015222  A9CC23     BCLR 0xC23, #6
015224  370004     BRA 0x1522E
20840:                        }
20841:                        else
20842:                        {
20843:                         PWM1_A_H=0;
015226  A92E44     BCLR LATE, #1
20844:                         PWM1_A_L=0;
015228  A90E44     BCLR LATE, #0
20845:                         PEN1_A_H=1;
01522A  A8EC23     BSET 0xC23, #7
20846:                         PEN1_A_L=0;
01522C  A9CC23     BCLR 0xC23, #6
20847:                        }
20848:             
20849:                        if (TabRes1==0)
01522E  81FEE4     MOV TabRes1, W4
015230  81FEF5     MOV 0x3FDE, W5
015232  520FE0     SUB W4, #0x0, [W15]
015234  5A8FE0     SUBB W5, #0x0, [W15]
015236  3A0005     BRA NZ, 0x15242
20850:                        {
20851:                         PWM1_B_H=0;
015238  A96E44     BCLR LATE, #3
20852:                         PWM1_B_L=1;
01523A  A84E44     BSET LATE, #2
20853:                         PEN1_B_H=0;
01523C  A9EC43     BCLR 0xC43, #7
20854:                         PEN1_B_L=0;
01523E  A9CC43     BCLR 0xC43, #6
015240  370004     BRA 0x1524A
20855:                        }
20856:                        else
20857:                        {
20858:                         PWM1_B_H=0;
015242  A96E44     BCLR LATE, #3
20859:                         PWM1_B_L=0;
015244  A94E44     BCLR LATE, #2
20860:                         PEN1_B_H=1;
015246  A8EC43     BSET 0xC43, #7
20861:                         PEN1_B_L=0;
015248  A9CC43     BCLR 0xC43, #6
20862:                        }
20863:             
20864:             
20865:                        if (TabRes2==0)
01524A  81FF04     MOV TabRes2, W4
01524C  81FF15     MOV 0x3FE2, W5
01524E  520FE0     SUB W4, #0x0, [W15]
015250  5A8FE0     SUBB W5, #0x0, [W15]
015252  3A0005     BRA NZ, 0x1525E
20866:                        {
20867:                         PWM1_C_H=0;
015254  A9AE44     BCLR LATE, #5
20868:                         PWM1_C_L=1;
015256  A88E44     BSET LATE, #4
20869:                         PEN1_C_H=0;
015258  A9EC63     BCLR 0xC63, #7
20870:                         PEN1_C_L=0;
01525A  A9CC63     BCLR 0xC63, #6
01525C  370004     BRA 0x15266
20871:                        }
20872:                        else
20873:                        {
20874:                         PWM1_C_H=0;
01525E  A9AE44     BCLR LATE, #5
20875:                         PWM1_C_L=0;
015260  A98E44     BCLR LATE, #4
20876:                         PEN1_C_H=1;
015262  A8EC63     BSET 0xC63, #7
20877:                         PEN1_C_L=0;
015264  A9CC63     BCLR 0xC63, #6
20878:                        }
20879:             
20880:                        }
20881:             
20882:                        if (!SIN_MIDDLE)
015266  809765     MOV StatFlgs2, W5
015268  240004     MOV #0x4000, W4
01526A  628204     AND W5, W4, W4
01526C  520FE0     SUB W4, #0x0, [W15]
01526E  3A003A     BRA NZ, 0x152E4
20883:                        {
20884:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
015270  81F506     MOV Amplitude1Tmp, W6
015272  81F517     MOV 0x3EA2, W7
015274  81FEC4     MOV TabRes0, W4
015276  81FED5     MOV 0x3FDA, W5
015278  B83884     MUL.UU W7, W4, W0
01527A  B82986     MUL.UU W5, W6, W2
01527C  780082     MOV W2, W1
01527E  400001     ADD W0, W1, W0
015280  780306     MOV W6, W6
015282  780204     MOV W4, W4
015284  B83204     MUL.UU W6, W4, W4
015286  400005     ADD W0, W5, W0
015288  780280     MOV W0, W5
01528A  DD2B48     SL W5, #8, W6
01528C  DE2248     LSR W4, #8, W4
01528E  730204     IOR W6, W4, W4
015290  DE2AC8     LSR W5, #8, W5
015292  780204     MOV W4, W4
015294  888814     MOV W4, SV_PWM1_0
20885:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
015296  81F506     MOV Amplitude1Tmp, W6
015298  81F517     MOV 0x3EA2, W7
01529A  81FEE4     MOV TabRes1, W4
01529C  81FEF5     MOV 0x3FDE, W5
01529E  B83884     MUL.UU W7, W4, W0
0152A0  B82986     MUL.UU W5, W6, W2
0152A2  780082     MOV W2, W1
0152A4  400001     ADD W0, W1, W0
0152A6  780306     MOV W6, W6
0152A8  780204     MOV W4, W4
0152AA  B83204     MUL.UU W6, W4, W4
0152AC  400005     ADD W0, W5, W0
0152AE  780280     MOV W0, W5
0152B0  DD2B48     SL W5, #8, W6
0152B2  DE2248     LSR W4, #8, W4
0152B4  730204     IOR W6, W4, W4
0152B6  DE2AC8     LSR W5, #8, W5
0152B8  780204     MOV W4, W4
0152BA  888824     MOV W4, SV_PWM1_1
20886:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
0152BC  81F506     MOV Amplitude1Tmp, W6
0152BE  81F517     MOV 0x3EA2, W7
0152C0  81FF04     MOV TabRes2, W4
0152C2  81FF15     MOV 0x3FE2, W5
0152C4  B83884     MUL.UU W7, W4, W0
0152C6  B82986     MUL.UU W5, W6, W2
0152C8  780082     MOV W2, W1
0152CA  400001     ADD W0, W1, W0
0152CC  780306     MOV W6, W6
0152CE  780204     MOV W4, W4
0152D0  B83204     MUL.UU W6, W4, W4
0152D2  400005     ADD W0, W5, W0
0152D4  780280     MOV W0, W5
0152D6  DD2B48     SL W5, #8, W6
0152D8  DE2248     LSR W4, #8, W4
0152DA  730204     IOR W6, W4, W4
0152DC  DE2AC8     LSR W5, #8, W5
0152DE  780204     MOV W4, W4
0152E0  888834     MOV W4, SV_PWM1_2
20887:                        }
20888:                     else
20889:                     {
20890:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
0152E4  81F504     MOV Amplitude1Tmp, W4
0152E6  81F515     MOV 0x3EA2, W5
0152E8  BE0304     MOV.D W4, W6
0152EA  81FEC4     MOV TabRes0, W4
0152EC  81FED5     MOV 0x3FDA, W5
0152EE  B83884     MUL.UU W7, W4, W0
0152F0  B82986     MUL.UU W5, W6, W2
0152F2  780082     MOV W2, W1
0152F4  400001     ADD W0, W1, W0
0152F6  780306     MOV W6, W6
0152F8  780204     MOV W4, W4
0152FA  B83204     MUL.UU W6, W4, W4
0152FC  400005     ADD W0, W5, W0
0152FE  780280     MOV W0, W5
015300  DD2B48     SL W5, #8, W6
015302  DE2248     LSR W4, #8, W4
015304  730204     IOR W6, W4, W4
015306  DEAAC8     ASR W5, #8, W5
015308  780284     MOV W4, W5
01530A  8092D6     MOV MAX_PWM_CONST, W6
01530C  200024     MOV #0x2, W4
01530E  090011     REPEAT #0x11
015310  D80304     DIV.SW W6, W4
015312  780200     MOV W0, W4
015314  428204     ADD W5, W4, W4
015316  888814     MOV W4, SV_PWM1_0
20891:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
015318  81F504     MOV Amplitude1Tmp, W4
01531A  81F515     MOV 0x3EA2, W5
01531C  BE0304     MOV.D W4, W6
01531E  81FEE4     MOV TabRes1, W4
015320  81FEF5     MOV 0x3FDE, W5
015322  B83884     MUL.UU W7, W4, W0
015324  B82986     MUL.UU W5, W6, W2
015326  780082     MOV W2, W1
015328  400001     ADD W0, W1, W0
01532A  780306     MOV W6, W6
01532C  780204     MOV W4, W4
01532E  B83204     MUL.UU W6, W4, W4
015330  400005     ADD W0, W5, W0
015332  780280     MOV W0, W5
015334  DD2B48     SL W5, #8, W6
015336  DE2248     LSR W4, #8, W4
015338  730204     IOR W6, W4, W4
01533A  DEAAC8     ASR W5, #8, W5
01533C  780284     MOV W4, W5
01533E  8092D6     MOV MAX_PWM_CONST, W6
015340  200024     MOV #0x2, W4
015342  090011     REPEAT #0x11
015344  D80304     DIV.SW W6, W4
015346  780200     MOV W0, W4
015348  428204     ADD W5, W4, W4
01534A  888824     MOV W4, SV_PWM1_1
20892:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
01534C  81F504     MOV Amplitude1Tmp, W4
01534E  81F515     MOV 0x3EA2, W5
015350  BE0304     MOV.D W4, W6
015352  81FF04     MOV TabRes2, W4
015354  81FF15     MOV 0x3FE2, W5
015356  B83884     MUL.UU W7, W4, W0
015358  B82986     MUL.UU W5, W6, W2
01535A  780082     MOV W2, W1
01535C  400001     ADD W0, W1, W0
01535E  780306     MOV W6, W6
015360  780204     MOV W4, W4
015362  B83204     MUL.UU W6, W4, W4
015364  400005     ADD W0, W5, W0
015366  780280     MOV W0, W5
015368  DD2B48     SL W5, #8, W6
01536A  DE2248     LSR W4, #8, W4
01536C  730204     IOR W6, W4, W4
01536E  DEAAC8     ASR W5, #8, W5
015370  780284     MOV W4, W5
015372  8092D6     MOV MAX_PWM_CONST, W6
015374  200024     MOV #0x2, W4
015376  090011     REPEAT #0x11
015378  D80304     DIV.SW W6, W4
01537A  780200     MOV W0, W4
01537C  428204     ADD W5, W4, W4
01537E  888834     MOV W4, SV_PWM1_2
20893:                     }
20894:             
20895:                       break ;
0152E2  370454     BRA 0x15B8C
015380  370405     BRA 0x15B8C
20896:                    case 2 :
20897:                        if (!SIN_MIDDLE)
015382  809765     MOV StatFlgs2, W5
015384  240004     MOV #0x4000, W4
015386  628204     AND W5, W4, W4
015388  520FE0     SUB W4, #0x0, [W15]
01538A  3A0021     BRA NZ, 0x153CE
20898:                        {
20899:                            ThetaIndex=THETA_NUM-Theta1CntPWM-129;
01538C  808794     MOV Theta1CntPWM, W4
01538E  200FF5     MOV #0xFF, W5
015390  528204     SUB W5, W4, W4
015392  897D34     MOV W4, ThetaIndex
20900:                        TabRes0=(unsigned long int)tab_sin[ThetaIndex];
015394  817D34     MOV ThetaIndex, W4
015396  2A9785     MOV #0xA978, W5
015398  428204     ADD W5, W4, W4
01539A  784214     MOV.B [W4], W4
01539C  FB8204     ZE W4, W4
01539E  200005     MOV #0x0, W5
0153A0  89FEC4     MOV W4, TabRes0
0153A2  89FED5     MOV W5, 0x3FDA
20901:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-1];
0153A4  808794     MOV Theta1CntPWM, W4
0153A6  2017F5     MOV #0x17F, W5
0153A8  528204     SUB W5, W4, W4
0153AA  2A9785     MOV #0xA978, W5
0153AC  428204     ADD W5, W4, W4
0153AE  784214     MOV.B [W4], W4
0153B0  FB8204     ZE W4, W4
0153B2  200005     MOV #0x0, W5
0153B4  89FEE4     MOV W4, TabRes1
0153B6  89FEF5     MOV W5, 0x3FDE
20902:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-257];
0153B8  808794     MOV Theta1CntPWM, W4
0153BA  2007F5     MOV #0x7F, W5
0153BC  528204     SUB W5, W4, W4
0153BE  2A9785     MOV #0xA978, W5
0153C0  428204     ADD W5, W4, W4
0153C2  784214     MOV.B [W4], W4
0153C4  FB8204     ZE W4, W4
0153C6  200005     MOV #0x0, W5
0153C8  89FF04     MOV W4, TabRes2
0153CA  89FF15     MOV W5, 0x3FE2
0153CC  37001E     BRA 0x1540A
20903:                        }
20904:                         else
20905:                         {
20906:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-129]);
0153CE  808794     MOV Theta1CntPWM, W4
0153D0  200FF5     MOV #0xFF, W5
0153D2  528204     SUB W5, W4, W4
0153D4  2AAF85     MOV #0xAAF8, W5
0153D6  428204     ADD W5, W4, W4
0153D8  784214     MOV.B [W4], W4
0153DA  FB0204     SE W4, W4
0153DC  DEA2CF     ASR W4, #15, W5
0153DE  89FEC4     MOV W4, TabRes0
0153E0  89FED5     MOV W5, 0x3FDA
20907:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-1]);
0153E2  808794     MOV Theta1CntPWM, W4
0153E4  2017F5     MOV #0x17F, W5
0153E6  528204     SUB W5, W4, W4
0153E8  2AAF85     MOV #0xAAF8, W5
0153EA  428204     ADD W5, W4, W4
0153EC  784214     MOV.B [W4], W4
0153EE  FB0204     SE W4, W4
0153F0  DEA2CF     ASR W4, #15, W5
0153F2  89FEE4     MOV W4, TabRes1
0153F4  89FEF5     MOV W5, 0x3FDE
20908:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-257]);
0153F6  808794     MOV Theta1CntPWM, W4
0153F8  2007F5     MOV #0x7F, W5
0153FA  528204     SUB W5, W4, W4
0153FC  2AAF85     MOV #0xAAF8, W5
0153FE  428204     ADD W5, W4, W4
015400  784214     MOV.B [W4], W4
015402  FB0204     SE W4, W4
015404  DEA2CF     ASR W4, #15, W5
015406  89FF04     MOV W4, TabRes2
015408  89FF15     MOV W5, 0x3FE2
20909:                         }
20910:             
20911:             
20912:                        if   (!StrongMode)
01540A  8095F5     MOV 0x12BE, W5
01540C  240004     MOV #0x4000, W4
01540E  628204     AND W5, W4, W4
015410  520FE0     SUB W4, #0x0, [W15]
015412  3A002A     BRA NZ, 0x15468
20913:                        {
20914:             
20915:                        if (TabRes0==0)
015414  81FEC4     MOV TabRes0, W4
015416  81FED5     MOV 0x3FDA, W5
015418  520FE0     SUB W4, #0x0, [W15]
01541A  5A8FE0     SUBB W5, #0x0, [W15]
01541C  3A0005     BRA NZ, 0x15428
20916:                        {
20917:                         PWM1_A_H=0;
01541E  A92E44     BCLR LATE, #1
20918:                         PWM1_A_L=1;
015420  A80E44     BSET LATE, #0
20919:                         PEN1_A_H=0;
015422  A9EC23     BCLR 0xC23, #7
20920:                         PEN1_A_L=0;
015424  A9CC23     BCLR 0xC23, #6
015426  370004     BRA 0x15430
20921:                        }
20922:                        else
20923:                        {
20924:                         PWM1_A_H=0;
015428  A92E44     BCLR LATE, #1
20925:                         PWM1_A_L=0;
01542A  A90E44     BCLR LATE, #0
20926:                         PEN1_A_H=1;
01542C  A8EC23     BSET 0xC23, #7
20927:                         PEN1_A_L=0;
01542E  A9CC23     BCLR 0xC23, #6
20928:                        }
20929:             
20930:                        if (TabRes1==0)
015430  81FEE4     MOV TabRes1, W4
015432  81FEF5     MOV 0x3FDE, W5
015434  520FE0     SUB W4, #0x0, [W15]
015436  5A8FE0     SUBB W5, #0x0, [W15]
015438  3A0005     BRA NZ, 0x15444
20931:                        {
20932:                         PWM1_B_H=0;
01543A  A96E44     BCLR LATE, #3
20933:                         PWM1_B_L=1;
01543C  A84E44     BSET LATE, #2
20934:                         PEN1_B_H=0;
01543E  A9EC43     BCLR 0xC43, #7
20935:                         PEN1_B_L=0;
015440  A9CC43     BCLR 0xC43, #6
015442  370004     BRA 0x1544C
20936:                        }
20937:                        else
20938:                        {
20939:                         PWM1_B_H=0;
015444  A96E44     BCLR LATE, #3
20940:                         PWM1_B_L=0;
015446  A94E44     BCLR LATE, #2
20941:                         PEN1_B_H=1;
015448  A8EC43     BSET 0xC43, #7
20942:                         PEN1_B_L=0;
01544A  A9CC43     BCLR 0xC43, #6
20943:                        }
20944:             
20945:             
20946:                        if (TabRes2==0)
01544C  81FF04     MOV TabRes2, W4
01544E  81FF15     MOV 0x3FE2, W5
015450  520FE0     SUB W4, #0x0, [W15]
015452  5A8FE0     SUBB W5, #0x0, [W15]
015454  3A0005     BRA NZ, 0x15460
20947:                        {
20948:                         PWM1_C_H=0;
015456  A9AE44     BCLR LATE, #5
20949:                         PWM1_C_L=1;
015458  A88E44     BSET LATE, #4
20950:                         PEN1_C_H=0;
01545A  A9EC63     BCLR 0xC63, #7
20951:                         PEN1_C_L=0;
01545C  A9CC63     BCLR 0xC63, #6
01545E  370004     BRA 0x15468
20952:                        }
20953:                        else
20954:                        {
20955:                         PWM1_C_H=0;
015460  A9AE44     BCLR LATE, #5
20956:                         PWM1_C_L=0;
015462  A98E44     BCLR LATE, #4
20957:                         PEN1_C_H=1;
015464  A8EC63     BSET 0xC63, #7
20958:                         PEN1_C_L=0;
015466  A9CC63     BCLR 0xC63, #6
20959:                        }
20960:             
20961:                        }
20962:                        if (!SIN_MIDDLE)
015468  809765     MOV StatFlgs2, W5
01546A  240004     MOV #0x4000, W4
01546C  628204     AND W5, W4, W4
01546E  520FE0     SUB W4, #0x0, [W15]
015470  3A003A     BRA NZ, 0x154E6
20963:                        {
20964:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
015472  81F506     MOV Amplitude1Tmp, W6
015474  81F517     MOV 0x3EA2, W7
015476  81FEC4     MOV TabRes0, W4
015478  81FED5     MOV 0x3FDA, W5
01547A  B83884     MUL.UU W7, W4, W0
01547C  B82986     MUL.UU W5, W6, W2
01547E  780082     MOV W2, W1
015480  400001     ADD W0, W1, W0
015482  780306     MOV W6, W6
015484  780204     MOV W4, W4
015486  B83204     MUL.UU W6, W4, W4
015488  400005     ADD W0, W5, W0
01548A  780280     MOV W0, W5
01548C  DD2B48     SL W5, #8, W6
01548E  DE2248     LSR W4, #8, W4
015490  730204     IOR W6, W4, W4
015492  DE2AC8     LSR W5, #8, W5
015494  780204     MOV W4, W4
015496  888814     MOV W4, SV_PWM1_0
20965:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
015498  81F506     MOV Amplitude1Tmp, W6
01549A  81F517     MOV 0x3EA2, W7
01549C  81FEE4     MOV TabRes1, W4
01549E  81FEF5     MOV 0x3FDE, W5
0154A0  B83884     MUL.UU W7, W4, W0
0154A2  B82986     MUL.UU W5, W6, W2
0154A4  780082     MOV W2, W1
0154A6  400001     ADD W0, W1, W0
0154A8  780306     MOV W6, W6
0154AA  780204     MOV W4, W4
0154AC  B83204     MUL.UU W6, W4, W4
0154AE  400005     ADD W0, W5, W0
0154B0  780280     MOV W0, W5
0154B2  DD2B48     SL W5, #8, W6
0154B4  DE2248     LSR W4, #8, W4
0154B6  730204     IOR W6, W4, W4
0154B8  DE2AC8     LSR W5, #8, W5
0154BA  780204     MOV W4, W4
0154BC  888824     MOV W4, SV_PWM1_1
20966:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
0154BE  81F506     MOV Amplitude1Tmp, W6
0154C0  81F517     MOV 0x3EA2, W7
0154C2  81FF04     MOV TabRes2, W4
0154C4  81FF15     MOV 0x3FE2, W5
0154C6  B83884     MUL.UU W7, W4, W0
0154C8  B82986     MUL.UU W5, W6, W2
0154CA  780082     MOV W2, W1
0154CC  400001     ADD W0, W1, W0
0154CE  780306     MOV W6, W6
0154D0  780204     MOV W4, W4
0154D2  B83204     MUL.UU W6, W4, W4
0154D4  400005     ADD W0, W5, W0
0154D6  780280     MOV W0, W5
0154D8  DD2B48     SL W5, #8, W6
0154DA  DE2248     LSR W4, #8, W4
0154DC  730204     IOR W6, W4, W4
0154DE  DE2AC8     LSR W5, #8, W5
0154E0  780204     MOV W4, W4
0154E2  888834     MOV W4, SV_PWM1_2
20967:                        }
20968:                     else
20969:                     {
20970:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
0154E6  81F504     MOV Amplitude1Tmp, W4
0154E8  81F515     MOV 0x3EA2, W5
0154EA  BE0304     MOV.D W4, W6
0154EC  81FEC4     MOV TabRes0, W4
0154EE  81FED5     MOV 0x3FDA, W5
0154F0  B83884     MUL.UU W7, W4, W0
0154F2  B82986     MUL.UU W5, W6, W2
0154F4  780082     MOV W2, W1
0154F6  400001     ADD W0, W1, W0
0154F8  780306     MOV W6, W6
0154FA  780204     MOV W4, W4
0154FC  B83204     MUL.UU W6, W4, W4
0154FE  400005     ADD W0, W5, W0
015500  780280     MOV W0, W5
015502  DD2B48     SL W5, #8, W6
015504  DE2248     LSR W4, #8, W4
015506  730204     IOR W6, W4, W4
015508  DEAAC8     ASR W5, #8, W5
01550A  780284     MOV W4, W5
01550C  8092D6     MOV MAX_PWM_CONST, W6
01550E  200024     MOV #0x2, W4
015510  090011     REPEAT #0x11
015512  D80304     DIV.SW W6, W4
015514  780200     MOV W0, W4
015516  428204     ADD W5, W4, W4
015518  888814     MOV W4, SV_PWM1_0
20971:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
01551A  81F504     MOV Amplitude1Tmp, W4
01551C  81F515     MOV 0x3EA2, W5
01551E  BE0304     MOV.D W4, W6
015520  81FEE4     MOV TabRes1, W4
015522  81FEF5     MOV 0x3FDE, W5
015524  B83884     MUL.UU W7, W4, W0
015526  B82986     MUL.UU W5, W6, W2
015528  780082     MOV W2, W1
01552A  400001     ADD W0, W1, W0
01552C  780306     MOV W6, W6
01552E  780204     MOV W4, W4
015530  B83204     MUL.UU W6, W4, W4
015532  400005     ADD W0, W5, W0
015534  780280     MOV W0, W5
015536  DD2B48     SL W5, #8, W6
015538  DE2248     LSR W4, #8, W4
01553A  730204     IOR W6, W4, W4
01553C  DEAAC8     ASR W5, #8, W5
01553E  780284     MOV W4, W5
015540  8092D6     MOV MAX_PWM_CONST, W6
015542  200024     MOV #0x2, W4
015544  090011     REPEAT #0x11
015546  D80304     DIV.SW W6, W4
015548  780200     MOV W0, W4
01554A  428204     ADD W5, W4, W4
01554C  888824     MOV W4, SV_PWM1_1
20972:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
01554E  81F504     MOV Amplitude1Tmp, W4
015550  81F515     MOV 0x3EA2, W5
015552  BE0304     MOV.D W4, W6
015554  81FF04     MOV TabRes2, W4
015556  81FF15     MOV 0x3FE2, W5
015558  B83884     MUL.UU W7, W4, W0
01555A  B82986     MUL.UU W5, W6, W2
01555C  780082     MOV W2, W1
01555E  400001     ADD W0, W1, W0
015560  780306     MOV W6, W6
015562  780204     MOV W4, W4
015564  B83204     MUL.UU W6, W4, W4
015566  400005     ADD W0, W5, W0
015568  780280     MOV W0, W5
01556A  DD2B48     SL W5, #8, W6
01556C  DE2248     LSR W4, #8, W4
01556E  730204     IOR W6, W4, W4
015570  DEAAC8     ASR W5, #8, W5
015572  780284     MOV W4, W5
015574  8092D6     MOV MAX_PWM_CONST, W6
015576  200024     MOV #0x2, W4
015578  090011     REPEAT #0x11
01557A  D80304     DIV.SW W6, W4
01557C  780200     MOV W0, W4
01557E  428204     ADD W5, W4, W4
015580  888834     MOV W4, SV_PWM1_2
20973:                     }
20974:             
20975:                       break ;
0154E4  370353     BRA 0x15B8C
015582  370304     BRA 0x15B8C
20976:                    case 6 :
20977:                        if (!SIN_MIDDLE)
015584  809765     MOV StatFlgs2, W5
015586  240004     MOV #0x4000, W4
015588  628204     AND W5, W4, W4
01558A  520FE0     SUB W4, #0x0, [W15]
01558C  3A0021     BRA NZ, 0x155D0
20978:                        {
20979:                            ThetaIndex=THETA_NUM-Theta1CntPWM-193;
01558E  808794     MOV Theta1CntPWM, W4
015590  200BF5     MOV #0xBF, W5
015592  528204     SUB W5, W4, W4
015594  897D34     MOV W4, ThetaIndex
20980:                        TabRes0=(unsigned long int)tab_sin[ThetaIndex];
015596  817D34     MOV ThetaIndex, W4
015598  2A9785     MOV #0xA978, W5
01559A  428204     ADD W5, W4, W4
01559C  784214     MOV.B [W4], W4
01559E  FB8204     ZE W4, W4
0155A0  200005     MOV #0x0, W5
0155A2  89FEC4     MOV W4, TabRes0
0155A4  89FED5     MOV W5, 0x3FDA
20981:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-65];
0155A6  808794     MOV Theta1CntPWM, W4
0155A8  2013F5     MOV #0x13F, W5
0155AA  528204     SUB W5, W4, W4
0155AC  2A9785     MOV #0xA978, W5
0155AE  428204     ADD W5, W4, W4
0155B0  784214     MOV.B [W4], W4
0155B2  FB8204     ZE W4, W4
0155B4  200005     MOV #0x0, W5
0155B6  89FEE4     MOV W4, TabRes1
0155B8  89FEF5     MOV W5, 0x3FDE
20982:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-321];
0155BA  808794     MOV Theta1CntPWM, W4
0155BC  2003F5     MOV #0x3F, W5
0155BE  528204     SUB W5, W4, W4
0155C0  2A9785     MOV #0xA978, W5
0155C2  428204     ADD W5, W4, W4
0155C4  784214     MOV.B [W4], W4
0155C6  FB8204     ZE W4, W4
0155C8  200005     MOV #0x0, W5
0155CA  89FF04     MOV W4, TabRes2
0155CC  89FF15     MOV W5, 0x3FE2
0155CE  37001E     BRA 0x1560C
20983:                        }
20984:                     else
20985:                     {
20986:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-193]);
0155D0  808794     MOV Theta1CntPWM, W4
0155D2  200BF5     MOV #0xBF, W5
0155D4  528204     SUB W5, W4, W4
0155D6  2AAF85     MOV #0xAAF8, W5
0155D8  428204     ADD W5, W4, W4
0155DA  784214     MOV.B [W4], W4
0155DC  FB0204     SE W4, W4
0155DE  DEA2CF     ASR W4, #15, W5
0155E0  89FEC4     MOV W4, TabRes0
0155E2  89FED5     MOV W5, 0x3FDA
20987:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-65]);
0155E4  808794     MOV Theta1CntPWM, W4
0155E6  2013F5     MOV #0x13F, W5
0155E8  528204     SUB W5, W4, W4
0155EA  2AAF85     MOV #0xAAF8, W5
0155EC  428204     ADD W5, W4, W4
0155EE  784214     MOV.B [W4], W4
0155F0  FB0204     SE W4, W4
0155F2  DEA2CF     ASR W4, #15, W5
0155F4  89FEE4     MOV W4, TabRes1
0155F6  89FEF5     MOV W5, 0x3FDE
20988:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-321]);
0155F8  808794     MOV Theta1CntPWM, W4
0155FA  2003F5     MOV #0x3F, W5
0155FC  528204     SUB W5, W4, W4
0155FE  2AAF85     MOV #0xAAF8, W5
015600  428204     ADD W5, W4, W4
015602  784214     MOV.B [W4], W4
015604  FB0204     SE W4, W4
015606  DEA2CF     ASR W4, #15, W5
015608  89FF04     MOV W4, TabRes2
01560A  89FF15     MOV W5, 0x3FE2
20989:                     }
20990:             
20991:             
20992:             
20993:                        if   (!StrongMode)
01560C  8095F5     MOV 0x12BE, W5
01560E  240004     MOV #0x4000, W4
015610  628204     AND W5, W4, W4
015612  520FE0     SUB W4, #0x0, [W15]
015614  3A002A     BRA NZ, 0x1566A
20994:                        {
20995:             
20996:             
20997:                        if (TabRes0==0)
015616  81FEC4     MOV TabRes0, W4
015618  81FED5     MOV 0x3FDA, W5
01561A  520FE0     SUB W4, #0x0, [W15]
01561C  5A8FE0     SUBB W5, #0x0, [W15]
01561E  3A0005     BRA NZ, 0x1562A
20998:                        {
20999:                         PWM1_A_H=0;
015620  A92E44     BCLR LATE, #1
21000:                         PWM1_A_L=1;
015622  A80E44     BSET LATE, #0
21001:                         PEN1_A_H=0;
015624  A9EC23     BCLR 0xC23, #7
21002:                         PEN1_A_L=0;
015626  A9CC23     BCLR 0xC23, #6
015628  370004     BRA 0x15632
21003:                        }
21004:                        else
21005:                        {
21006:                         PWM1_A_H=0;
01562A  A92E44     BCLR LATE, #1
21007:                         PWM1_A_L=0;
01562C  A90E44     BCLR LATE, #0
21008:                         PEN1_A_H=1;
01562E  A8EC23     BSET 0xC23, #7
21009:                         PEN1_A_L=0;
015630  A9CC23     BCLR 0xC23, #6
21010:                        }
21011:             
21012:                        if (TabRes1==0)
015632  81FEE4     MOV TabRes1, W4
015634  81FEF5     MOV 0x3FDE, W5
015636  520FE0     SUB W4, #0x0, [W15]
015638  5A8FE0     SUBB W5, #0x0, [W15]
01563A  3A0005     BRA NZ, 0x15646
21013:                        {
21014:                         PWM1_B_H=0;
01563C  A96E44     BCLR LATE, #3
21015:                         PWM1_B_L=1;
01563E  A84E44     BSET LATE, #2
21016:                         PEN1_B_H=0;
015640  A9EC43     BCLR 0xC43, #7
21017:                         PEN1_B_L=0;
015642  A9CC43     BCLR 0xC43, #6
015644  370004     BRA 0x1564E
21018:                        }
21019:                        else
21020:                        {
21021:                         PWM1_B_H=0;
015646  A96E44     BCLR LATE, #3
21022:                         PWM1_B_L=0;
015648  A94E44     BCLR LATE, #2
21023:                         PEN1_B_H=1;
01564A  A8EC43     BSET 0xC43, #7
21024:                         PEN1_B_L=0;
01564C  A9CC43     BCLR 0xC43, #6
21025:                        }
21026:             
21027:             
21028:                        if (TabRes2==0)
01564E  81FF04     MOV TabRes2, W4
015650  81FF15     MOV 0x3FE2, W5
015652  520FE0     SUB W4, #0x0, [W15]
015654  5A8FE0     SUBB W5, #0x0, [W15]
015656  3A0005     BRA NZ, 0x15662
21029:                        {
21030:                         PWM1_C_H=0;
015658  A9AE44     BCLR LATE, #5
21031:                         PWM1_C_L=1;
01565A  A88E44     BSET LATE, #4
21032:                         PEN1_C_H=0;
01565C  A9EC63     BCLR 0xC63, #7
21033:                         PEN1_C_L=0;
01565E  A9CC63     BCLR 0xC63, #6
015660  370004     BRA 0x1566A
21034:                        }
21035:                        else
21036:                        {
21037:                         PWM1_C_H=0;
015662  A9AE44     BCLR LATE, #5
21038:                         PWM1_C_L=0;
015664  A98E44     BCLR LATE, #4
21039:                         PEN1_C_H=1;
015666  A8EC63     BSET 0xC63, #7
21040:                         PEN1_C_L=0;
015668  A9CC63     BCLR 0xC63, #6
21041:                        }
21042:             
21043:                                 
21044:             
21045:                        }
21046:             
21047:             
21048:                        if (!SIN_MIDDLE)
01566A  809765     MOV StatFlgs2, W5
01566C  240004     MOV #0x4000, W4
01566E  628204     AND W5, W4, W4
015670  520FE0     SUB W4, #0x0, [W15]
015672  3A003A     BRA NZ, 0x156E8
21049:                        {
21050:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
015674  81F506     MOV Amplitude1Tmp, W6
015676  81F517     MOV 0x3EA2, W7
015678  81FEC4     MOV TabRes0, W4
01567A  81FED5     MOV 0x3FDA, W5
01567C  B83884     MUL.UU W7, W4, W0
01567E  B82986     MUL.UU W5, W6, W2
015680  780082     MOV W2, W1
015682  400001     ADD W0, W1, W0
015684  780306     MOV W6, W6
015686  780204     MOV W4, W4
015688  B83204     MUL.UU W6, W4, W4
01568A  400005     ADD W0, W5, W0
01568C  780280     MOV W0, W5
01568E  DD2B48     SL W5, #8, W6
015690  DE2248     LSR W4, #8, W4
015692  730204     IOR W6, W4, W4
015694  DE2AC8     LSR W5, #8, W5
015696  780204     MOV W4, W4
015698  888814     MOV W4, SV_PWM1_0
21051:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
01569A  81F506     MOV Amplitude1Tmp, W6
01569C  81F517     MOV 0x3EA2, W7
01569E  81FEE4     MOV TabRes1, W4
0156A0  81FEF5     MOV 0x3FDE, W5
0156A2  B83884     MUL.UU W7, W4, W0
0156A4  B82986     MUL.UU W5, W6, W2
0156A6  780082     MOV W2, W1
0156A8  400001     ADD W0, W1, W0
0156AA  780306     MOV W6, W6
0156AC  780204     MOV W4, W4
0156AE  B83204     MUL.UU W6, W4, W4
0156B0  400005     ADD W0, W5, W0
0156B2  780280     MOV W0, W5
0156B4  DD2B48     SL W5, #8, W6
0156B6  DE2248     LSR W4, #8, W4
0156B8  730204     IOR W6, W4, W4
0156BA  DE2AC8     LSR W5, #8, W5
0156BC  780204     MOV W4, W4
0156BE  888824     MOV W4, SV_PWM1_1
21052:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
0156C0  81F506     MOV Amplitude1Tmp, W6
0156C2  81F517     MOV 0x3EA2, W7
0156C4  81FF04     MOV TabRes2, W4
0156C6  81FF15     MOV 0x3FE2, W5
0156C8  B83884     MUL.UU W7, W4, W0
0156CA  B82986     MUL.UU W5, W6, W2
0156CC  780082     MOV W2, W1
0156CE  400001     ADD W0, W1, W0
0156D0  780306     MOV W6, W6
0156D2  780204     MOV W4, W4
0156D4  B83204     MUL.UU W6, W4, W4
0156D6  400005     ADD W0, W5, W0
0156D8  780280     MOV W0, W5
0156DA  DD2B48     SL W5, #8, W6
0156DC  DE2248     LSR W4, #8, W4
0156DE  730204     IOR W6, W4, W4
0156E0  DE2AC8     LSR W5, #8, W5
0156E2  780204     MOV W4, W4
0156E4  888834     MOV W4, SV_PWM1_2
21053:                        }
21054:                     else
21055:                     {
21056:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
0156E8  81F504     MOV Amplitude1Tmp, W4
0156EA  81F515     MOV 0x3EA2, W5
0156EC  BE0304     MOV.D W4, W6
0156EE  81FEC4     MOV TabRes0, W4
0156F0  81FED5     MOV 0x3FDA, W5
0156F2  B83884     MUL.UU W7, W4, W0
0156F4  B82986     MUL.UU W5, W6, W2
0156F6  780082     MOV W2, W1
0156F8  400001     ADD W0, W1, W0
0156FA  780306     MOV W6, W6
0156FC  780204     MOV W4, W4
0156FE  B83204     MUL.UU W6, W4, W4
015700  400005     ADD W0, W5, W0
015702  780280     MOV W0, W5
015704  DD2B48     SL W5, #8, W6
015706  DE2248     LSR W4, #8, W4
015708  730204     IOR W6, W4, W4
01570A  DEAAC8     ASR W5, #8, W5
01570C  780284     MOV W4, W5
01570E  8092D6     MOV MAX_PWM_CONST, W6
015710  200024     MOV #0x2, W4
015712  090011     REPEAT #0x11
015714  D80304     DIV.SW W6, W4
015716  780200     MOV W0, W4
015718  428204     ADD W5, W4, W4
01571A  888814     MOV W4, SV_PWM1_0
21057:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
01571C  81F504     MOV Amplitude1Tmp, W4
01571E  81F515     MOV 0x3EA2, W5
015720  BE0304     MOV.D W4, W6
015722  81FEE4     MOV TabRes1, W4
015724  81FEF5     MOV 0x3FDE, W5
015726  B83884     MUL.UU W7, W4, W0
015728  B82986     MUL.UU W5, W6, W2
01572A  780082     MOV W2, W1
01572C  400001     ADD W0, W1, W0
01572E  780306     MOV W6, W6
015730  780204     MOV W4, W4
015732  B83204     MUL.UU W6, W4, W4
015734  400005     ADD W0, W5, W0
015736  780280     MOV W0, W5
015738  DD2B48     SL W5, #8, W6
01573A  DE2248     LSR W4, #8, W4
01573C  730204     IOR W6, W4, W4
01573E  DEAAC8     ASR W5, #8, W5
015740  780284     MOV W4, W5
015742  8092D6     MOV MAX_PWM_CONST, W6
015744  200024     MOV #0x2, W4
015746  090011     REPEAT #0x11
015748  D80304     DIV.SW W6, W4
01574A  780200     MOV W0, W4
01574C  428204     ADD W5, W4, W4
01574E  888824     MOV W4, SV_PWM1_1
21058:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
015750  81F504     MOV Amplitude1Tmp, W4
015752  81F515     MOV 0x3EA2, W5
015754  BE0304     MOV.D W4, W6
015756  81FF04     MOV TabRes2, W4
015758  81FF15     MOV 0x3FE2, W5
01575A  B83884     MUL.UU W7, W4, W0
01575C  B82986     MUL.UU W5, W6, W2
01575E  780082     MOV W2, W1
015760  400001     ADD W0, W1, W0
015762  780306     MOV W6, W6
015764  780204     MOV W4, W4
015766  B83204     MUL.UU W6, W4, W4
015768  400005     ADD W0, W5, W0
01576A  780280     MOV W0, W5
01576C  DD2B48     SL W5, #8, W6
01576E  DE2248     LSR W4, #8, W4
015770  730204     IOR W6, W4, W4
015772  DEAAC8     ASR W5, #8, W5
015774  780284     MOV W4, W5
015776  8092D6     MOV MAX_PWM_CONST, W6
015778  200024     MOV #0x2, W4
01577A  090011     REPEAT #0x11
01577C  D80304     DIV.SW W6, W4
01577E  780200     MOV W0, W4
015780  428204     ADD W5, W4, W4
015782  888834     MOV W4, SV_PWM1_2
21059:                     }
21060:                       break ;
0156E6  370252     BRA 0x15B8C
015784  370203     BRA 0x15B8C
21061:                    case 4 :
21062:                        if (!SIN_MIDDLE)
015786  809765     MOV StatFlgs2, W5
015788  240004     MOV #0x4000, W4
01578A  628204     AND W5, W4, W4
01578C  520FE0     SUB W4, #0x0, [W15]
01578E  3A0021     BRA NZ, 0x157D2
21063:                        {
21064:                            ThetaIndex=THETA_NUM-Theta1CntPWM-257;
015790  808794     MOV Theta1CntPWM, W4
015792  2007F5     MOV #0x7F, W5
015794  528204     SUB W5, W4, W4
015796  897D34     MOV W4, ThetaIndex
21065:                        TabRes0=(unsigned long int)tab_sin[ThetaIndex];
015798  817D34     MOV ThetaIndex, W4
01579A  2A9785     MOV #0xA978, W5
01579C  428204     ADD W5, W4, W4
01579E  784214     MOV.B [W4], W4
0157A0  FB8204     ZE W4, W4
0157A2  200005     MOV #0x0, W5
0157A4  89FEC4     MOV W4, TabRes0
0157A6  89FED5     MOV W5, 0x3FDA
21066:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-129];
0157A8  808794     MOV Theta1CntPWM, W4
0157AA  200FF5     MOV #0xFF, W5
0157AC  528204     SUB W5, W4, W4
0157AE  2A9785     MOV #0xA978, W5
0157B0  428204     ADD W5, W4, W4
0157B2  784214     MOV.B [W4], W4
0157B4  FB8204     ZE W4, W4
0157B6  200005     MOV #0x0, W5
0157B8  89FEE4     MOV W4, TabRes1
0157BA  89FEF5     MOV W5, 0x3FDE
21067:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-1];
0157BC  808794     MOV Theta1CntPWM, W4
0157BE  2017F5     MOV #0x17F, W5
0157C0  528204     SUB W5, W4, W4
0157C2  2A9785     MOV #0xA978, W5
0157C4  428204     ADD W5, W4, W4
0157C6  784214     MOV.B [W4], W4
0157C8  FB8204     ZE W4, W4
0157CA  200005     MOV #0x0, W5
0157CC  89FF04     MOV W4, TabRes2
0157CE  89FF15     MOV W5, 0x3FE2
0157D0  37001E     BRA 0x1580E
21068:                        }
21069:                         else
21070:                         {
21071:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-257]);
0157D2  808794     MOV Theta1CntPWM, W4
0157D4  2007F5     MOV #0x7F, W5
0157D6  528204     SUB W5, W4, W4
0157D8  2AAF85     MOV #0xAAF8, W5
0157DA  428204     ADD W5, W4, W4
0157DC  784214     MOV.B [W4], W4
0157DE  FB0204     SE W4, W4
0157E0  DEA2CF     ASR W4, #15, W5
0157E2  89FEC4     MOV W4, TabRes0
0157E4  89FED5     MOV W5, 0x3FDA
21072:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-129]);
0157E6  808794     MOV Theta1CntPWM, W4
0157E8  200FF5     MOV #0xFF, W5
0157EA  528204     SUB W5, W4, W4
0157EC  2AAF85     MOV #0xAAF8, W5
0157EE  428204     ADD W5, W4, W4
0157F0  784214     MOV.B [W4], W4
0157F2  FB0204     SE W4, W4
0157F4  DEA2CF     ASR W4, #15, W5
0157F6  89FEE4     MOV W4, TabRes1
0157F8  89FEF5     MOV W5, 0x3FDE
21073:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-1]);
0157FA  808794     MOV Theta1CntPWM, W4
0157FC  2017F5     MOV #0x17F, W5
0157FE  528204     SUB W5, W4, W4
015800  2AAF85     MOV #0xAAF8, W5
015802  428204     ADD W5, W4, W4
015804  784214     MOV.B [W4], W4
015806  FB0204     SE W4, W4
015808  DEA2CF     ASR W4, #15, W5
01580A  89FF04     MOV W4, TabRes2
01580C  89FF15     MOV W5, 0x3FE2
21074:                         }
21075:             
21076:                        if   (!StrongMode)
01580E  8095F5     MOV 0x12BE, W5
015810  240004     MOV #0x4000, W4
015812  628204     AND W5, W4, W4
015814  520FE0     SUB W4, #0x0, [W15]
015816  3A002A     BRA NZ, 0x1586C
21077:                        {
21078:             
21079:                        if (TabRes0==0)
015818  81FEC4     MOV TabRes0, W4
01581A  81FED5     MOV 0x3FDA, W5
01581C  520FE0     SUB W4, #0x0, [W15]
01581E  5A8FE0     SUBB W5, #0x0, [W15]
015820  3A0005     BRA NZ, 0x1582C
21080:                        {
21081:                         PWM1_A_H=0;
015822  A92E44     BCLR LATE, #1
21082:                         PWM1_A_L=1;
015824  A80E44     BSET LATE, #0
21083:                         PEN1_A_H=0;
015826  A9EC23     BCLR 0xC23, #7
21084:                         PEN1_A_L=0;
015828  A9CC23     BCLR 0xC23, #6
01582A  370004     BRA 0x15834
21085:                        }
21086:                        else
21087:                        {
21088:                         PWM1_A_H=0;
01582C  A92E44     BCLR LATE, #1
21089:                         PWM1_A_L=0;
01582E  A90E44     BCLR LATE, #0
21090:                         PEN1_A_H=1;
015830  A8EC23     BSET 0xC23, #7
21091:                         PEN1_A_L=0;
015832  A9CC23     BCLR 0xC23, #6
21092:                        }
21093:             
21094:                        if (TabRes1==0)
015834  81FEE4     MOV TabRes1, W4
015836  81FEF5     MOV 0x3FDE, W5
015838  520FE0     SUB W4, #0x0, [W15]
01583A  5A8FE0     SUBB W5, #0x0, [W15]
01583C  3A0005     BRA NZ, 0x15848
21095:                        {
21096:                         PWM1_B_H=0;
01583E  A96E44     BCLR LATE, #3
21097:                         PWM1_B_L=1;
015840  A84E44     BSET LATE, #2
21098:                         PEN1_B_H=0;
015842  A9EC43     BCLR 0xC43, #7
21099:                         PEN1_B_L=0;
015844  A9CC43     BCLR 0xC43, #6
015846  370004     BRA 0x15850
21100:                        }
21101:                        else
21102:                        {
21103:                         PWM1_B_H=0;
015848  A96E44     BCLR LATE, #3
21104:                         PWM1_B_L=0;
01584A  A94E44     BCLR LATE, #2
21105:                         PEN1_B_H=1;
01584C  A8EC43     BSET 0xC43, #7
21106:                         PEN1_B_L=0;
01584E  A9CC43     BCLR 0xC43, #6
21107:                        }
21108:             
21109:             
21110:                        if (TabRes2==0)
015850  81FF04     MOV TabRes2, W4
015852  81FF15     MOV 0x3FE2, W5
015854  520FE0     SUB W4, #0x0, [W15]
015856  5A8FE0     SUBB W5, #0x0, [W15]
015858  3A0005     BRA NZ, 0x15864
21111:                        {
21112:                         PWM1_C_H=0;
01585A  A9AE44     BCLR LATE, #5
21113:                         PWM1_C_L=1;
01585C  A88E44     BSET LATE, #4
21114:                         PEN1_C_H=0;
01585E  A9EC63     BCLR 0xC63, #7
21115:                         PEN1_C_L=0;
015860  A9CC63     BCLR 0xC63, #6
015862  370004     BRA 0x1586C
21116:                        }
21117:                        else
21118:                        {
21119:                         PWM1_C_H=0;
015864  A9AE44     BCLR LATE, #5
21120:                         PWM1_C_L=0;
015866  A98E44     BCLR LATE, #4
21121:                         PEN1_C_H=1;
015868  A8EC63     BSET 0xC63, #7
21122:                         PEN1_C_L=0;
01586A  A9CC63     BCLR 0xC63, #6
21123:                        }
21124:                          
21125:                        }
21126:             
21127:             
21128:                        if (!SIN_MIDDLE)
01586C  809765     MOV StatFlgs2, W5
01586E  240004     MOV #0x4000, W4
015870  628204     AND W5, W4, W4
015872  520FE0     SUB W4, #0x0, [W15]
015874  3A003A     BRA NZ, 0x158EA
21129:                        {
21130:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
015876  81F506     MOV Amplitude1Tmp, W6
015878  81F517     MOV 0x3EA2, W7
01587A  81FEC4     MOV TabRes0, W4
01587C  81FED5     MOV 0x3FDA, W5
01587E  B83884     MUL.UU W7, W4, W0
015880  B82986     MUL.UU W5, W6, W2
015882  780082     MOV W2, W1
015884  400001     ADD W0, W1, W0
015886  780306     MOV W6, W6
015888  780204     MOV W4, W4
01588A  B83204     MUL.UU W6, W4, W4
01588C  400005     ADD W0, W5, W0
01588E  780280     MOV W0, W5
015890  DD2B48     SL W5, #8, W6
015892  DE2248     LSR W4, #8, W4
015894  730204     IOR W6, W4, W4
015896  DE2AC8     LSR W5, #8, W5
015898  780204     MOV W4, W4
01589A  888814     MOV W4, SV_PWM1_0
21131:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
01589C  81F506     MOV Amplitude1Tmp, W6
01589E  81F517     MOV 0x3EA2, W7
0158A0  81FEE4     MOV TabRes1, W4
0158A2  81FEF5     MOV 0x3FDE, W5
0158A4  B83884     MUL.UU W7, W4, W0
0158A6  B82986     MUL.UU W5, W6, W2
0158A8  780082     MOV W2, W1
0158AA  400001     ADD W0, W1, W0
0158AC  780306     MOV W6, W6
0158AE  780204     MOV W4, W4
0158B0  B83204     MUL.UU W6, W4, W4
0158B2  400005     ADD W0, W5, W0
0158B4  780280     MOV W0, W5
0158B6  DD2B48     SL W5, #8, W6
0158B8  DE2248     LSR W4, #8, W4
0158BA  730204     IOR W6, W4, W4
0158BC  DE2AC8     LSR W5, #8, W5
0158BE  780204     MOV W4, W4
0158C0  888824     MOV W4, SV_PWM1_1
21132:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
0158C2  81F506     MOV Amplitude1Tmp, W6
0158C4  81F517     MOV 0x3EA2, W7
0158C6  81FF04     MOV TabRes2, W4
0158C8  81FF15     MOV 0x3FE2, W5
0158CA  B83884     MUL.UU W7, W4, W0
0158CC  B82986     MUL.UU W5, W6, W2
0158CE  780082     MOV W2, W1
0158D0  400001     ADD W0, W1, W0
0158D2  780306     MOV W6, W6
0158D4  780204     MOV W4, W4
0158D6  B83204     MUL.UU W6, W4, W4
0158D8  400005     ADD W0, W5, W0
0158DA  780280     MOV W0, W5
0158DC  DD2B48     SL W5, #8, W6
0158DE  DE2248     LSR W4, #8, W4
0158E0  730204     IOR W6, W4, W4
0158E2  DE2AC8     LSR W5, #8, W5
0158E4  780204     MOV W4, W4
0158E6  888834     MOV W4, SV_PWM1_2
21133:                        }
21134:                     else
21135:                     {
21136:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
0158EA  81F504     MOV Amplitude1Tmp, W4
0158EC  81F515     MOV 0x3EA2, W5
0158EE  BE0304     MOV.D W4, W6
0158F0  81FEC4     MOV TabRes0, W4
0158F2  81FED5     MOV 0x3FDA, W5
0158F4  B83884     MUL.UU W7, W4, W0
0158F6  B82986     MUL.UU W5, W6, W2
0158F8  780082     MOV W2, W1
0158FA  400001     ADD W0, W1, W0
0158FC  780306     MOV W6, W6
0158FE  780204     MOV W4, W4
015900  B83204     MUL.UU W6, W4, W4
015902  400005     ADD W0, W5, W0
015904  780280     MOV W0, W5
015906  DD2B48     SL W5, #8, W6
015908  DE2248     LSR W4, #8, W4
01590A  730204     IOR W6, W4, W4
01590C  DEAAC8     ASR W5, #8, W5
01590E  780284     MOV W4, W5
015910  8092D6     MOV MAX_PWM_CONST, W6
015912  200024     MOV #0x2, W4
015914  090011     REPEAT #0x11
015916  D80304     DIV.SW W6, W4
015918  780200     MOV W0, W4
01591A  428204     ADD W5, W4, W4
01591C  888814     MOV W4, SV_PWM1_0
21137:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
01591E  81F504     MOV Amplitude1Tmp, W4
015920  81F515     MOV 0x3EA2, W5
015922  BE0304     MOV.D W4, W6
015924  81FEE4     MOV TabRes1, W4
015926  81FEF5     MOV 0x3FDE, W5
015928  B83884     MUL.UU W7, W4, W0
01592A  B82986     MUL.UU W5, W6, W2
01592C  780082     MOV W2, W1
01592E  400001     ADD W0, W1, W0
015930  780306     MOV W6, W6
015932  780204     MOV W4, W4
015934  B83204     MUL.UU W6, W4, W4
015936  400005     ADD W0, W5, W0
015938  780280     MOV W0, W5
01593A  DD2B48     SL W5, #8, W6
01593C  DE2248     LSR W4, #8, W4
01593E  730204     IOR W6, W4, W4
015940  DEAAC8     ASR W5, #8, W5
015942  780284     MOV W4, W5
015944  8092D6     MOV MAX_PWM_CONST, W6
015946  200024     MOV #0x2, W4
015948  090011     REPEAT #0x11
01594A  D80304     DIV.SW W6, W4
01594C  780200     MOV W0, W4
01594E  428204     ADD W5, W4, W4
015950  888824     MOV W4, SV_PWM1_1
21138:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
015952  81F504     MOV Amplitude1Tmp, W4
015954  81F515     MOV 0x3EA2, W5
015956  BE0304     MOV.D W4, W6
015958  81FF04     MOV TabRes2, W4
01595A  81FF15     MOV 0x3FE2, W5
01595C  B83884     MUL.UU W7, W4, W0
01595E  B82986     MUL.UU W5, W6, W2
015960  780082     MOV W2, W1
015962  400001     ADD W0, W1, W0
015964  780306     MOV W6, W6
015966  780204     MOV W4, W4
015968  B83204     MUL.UU W6, W4, W4
01596A  400005     ADD W0, W5, W0
01596C  780280     MOV W0, W5
01596E  DD2B48     SL W5, #8, W6
015970  DE2248     LSR W4, #8, W4
015972  730204     IOR W6, W4, W4
015974  DEAAC8     ASR W5, #8, W5
015976  780284     MOV W4, W5
015978  8092D6     MOV MAX_PWM_CONST, W6
01597A  200024     MOV #0x2, W4
01597C  090011     REPEAT #0x11
01597E  D80304     DIV.SW W6, W4
015980  780200     MOV W0, W4
015982  428204     ADD W5, W4, W4
015984  888834     MOV W4, SV_PWM1_2
21139:                     }
21140:             
21141:                       break ;
0158E8  370151     BRA 0x15B8C
015986  370102     BRA 0x15B8C
21142:                    case 5 :
21143:                        if (!SIN_MIDDLE)
015988  809765     MOV StatFlgs2, W5
01598A  240004     MOV #0x4000, W4
01598C  628204     AND W5, W4, W4
01598E  520FE0     SUB W4, #0x0, [W15]
015990  3A0021     BRA NZ, 0x159D4
21144:                        {
21145:                            ThetaIndex=THETA_NUM-Theta1CntPWM-321;
015992  808794     MOV Theta1CntPWM, W4
015994  2003F5     MOV #0x3F, W5
015996  528204     SUB W5, W4, W4
015998  897D34     MOV W4, ThetaIndex
21146:                        TabRes0=(unsigned long int)tab_sin[ThetaIndex];
01599A  817D34     MOV ThetaIndex, W4
01599C  2A9785     MOV #0xA978, W5
01599E  428204     ADD W5, W4, W4
0159A0  784214     MOV.B [W4], W4
0159A2  FB8204     ZE W4, W4
0159A4  200005     MOV #0x0, W5
0159A6  89FEC4     MOV W4, TabRes0
0159A8  89FED5     MOV W5, 0x3FDA
21147:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-193];
0159AA  808794     MOV Theta1CntPWM, W4
0159AC  200BF5     MOV #0xBF, W5
0159AE  528204     SUB W5, W4, W4
0159B0  2A9785     MOV #0xA978, W5
0159B2  428204     ADD W5, W4, W4
0159B4  784214     MOV.B [W4], W4
0159B6  FB8204     ZE W4, W4
0159B8  200005     MOV #0x0, W5
0159BA  89FEE4     MOV W4, TabRes1
0159BC  89FEF5     MOV W5, 0x3FDE
21148:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-65];
0159BE  808794     MOV Theta1CntPWM, W4
0159C0  2013F5     MOV #0x13F, W5
0159C2  528204     SUB W5, W4, W4
0159C4  2A9785     MOV #0xA978, W5
0159C6  428204     ADD W5, W4, W4
0159C8  784214     MOV.B [W4], W4
0159CA  FB8204     ZE W4, W4
0159CC  200005     MOV #0x0, W5
0159CE  89FF04     MOV W4, TabRes2
0159D0  89FF15     MOV W5, 0x3FE2
0159D2  37001E     BRA 0x15A10
21149:                        }
21150:                         else
21151:                         {
21152:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-321]);
0159D4  808794     MOV Theta1CntPWM, W4
0159D6  2003F5     MOV #0x3F, W5
0159D8  528204     SUB W5, W4, W4
0159DA  2AAF85     MOV #0xAAF8, W5
0159DC  428204     ADD W5, W4, W4
0159DE  784214     MOV.B [W4], W4
0159E0  FB0204     SE W4, W4
0159E2  DEA2CF     ASR W4, #15, W5
0159E4  89FEC4     MOV W4, TabRes0
0159E6  89FED5     MOV W5, 0x3FDA
21153:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-193]);
0159E8  808794     MOV Theta1CntPWM, W4
0159EA  200BF5     MOV #0xBF, W5
0159EC  528204     SUB W5, W4, W4
0159EE  2AAF85     MOV #0xAAF8, W5
0159F0  428204     ADD W5, W4, W4
0159F2  784214     MOV.B [W4], W4
0159F4  FB0204     SE W4, W4
0159F6  DEA2CF     ASR W4, #15, W5
0159F8  89FEE4     MOV W4, TabRes1
0159FA  89FEF5     MOV W5, 0x3FDE
21154:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-65]);
0159FC  808794     MOV Theta1CntPWM, W4
0159FE  2013F5     MOV #0x13F, W5
015A00  528204     SUB W5, W4, W4
015A02  2AAF85     MOV #0xAAF8, W5
015A04  428204     ADD W5, W4, W4
015A06  784214     MOV.B [W4], W4
015A08  FB0204     SE W4, W4
015A0A  DEA2CF     ASR W4, #15, W5
015A0C  89FF04     MOV W4, TabRes2
015A0E  89FF15     MOV W5, 0x3FE2
21155:                         }
21156:             
21157:             
21158:                        if   (!StrongMode)
015A10  8095F5     MOV 0x12BE, W5
015A12  240004     MOV #0x4000, W4
015A14  628204     AND W5, W4, W4
015A16  520FE0     SUB W4, #0x0, [W15]
015A18  3A002A     BRA NZ, 0x15A6E
21159:                        {
21160:             
21161:                        if (TabRes0==0)
015A1A  81FEC4     MOV TabRes0, W4
015A1C  81FED5     MOV 0x3FDA, W5
015A1E  520FE0     SUB W4, #0x0, [W15]
015A20  5A8FE0     SUBB W5, #0x0, [W15]
015A22  3A0005     BRA NZ, 0x15A2E
21162:                        {
21163:                         PWM1_A_H=0;
015A24  A92E44     BCLR LATE, #1
21164:                         PWM1_A_L=1;
015A26  A80E44     BSET LATE, #0
21165:                         PEN1_A_H=0;
015A28  A9EC23     BCLR 0xC23, #7
21166:                         PEN1_A_L=0;
015A2A  A9CC23     BCLR 0xC23, #6
015A2C  370004     BRA 0x15A36
21167:                        }
21168:                        else
21169:                        {
21170:                         PWM1_A_H=0;
015A2E  A92E44     BCLR LATE, #1
21171:                         PWM1_A_L=0;
015A30  A90E44     BCLR LATE, #0
21172:                         PEN1_A_H=1;
015A32  A8EC23     BSET 0xC23, #7
21173:                         PEN1_A_L=0;
015A34  A9CC23     BCLR 0xC23, #6
21174:                        }
21175:             
21176:                        if (TabRes1==0)
015A36  81FEE4     MOV TabRes1, W4
015A38  81FEF5     MOV 0x3FDE, W5
015A3A  520FE0     SUB W4, #0x0, [W15]
015A3C  5A8FE0     SUBB W5, #0x0, [W15]
015A3E  3A0005     BRA NZ, 0x15A4A
21177:                        {
21178:                         PWM1_B_H=0;
015A40  A96E44     BCLR LATE, #3
21179:                         PWM1_B_L=1;
015A42  A84E44     BSET LATE, #2
21180:                         PEN1_B_H=0;
015A44  A9EC43     BCLR 0xC43, #7
21181:                         PEN1_B_L=0;
015A46  A9CC43     BCLR 0xC43, #6
015A48  370004     BRA 0x15A52
21182:                        }
21183:                        else
21184:                        {
21185:                         PWM1_B_H=0;
015A4A  A96E44     BCLR LATE, #3
21186:                         PWM1_B_L=0;
015A4C  A94E44     BCLR LATE, #2
21187:                         PEN1_B_H=1;
015A4E  A8EC43     BSET 0xC43, #7
21188:                         PEN1_B_L=0;
015A50  A9CC43     BCLR 0xC43, #6
21189:                        }
21190:             
21191:             
21192:                        if (TabRes2==0)
015A52  81FF04     MOV TabRes2, W4
015A54  81FF15     MOV 0x3FE2, W5
015A56  520FE0     SUB W4, #0x0, [W15]
015A58  5A8FE0     SUBB W5, #0x0, [W15]
015A5A  3A0005     BRA NZ, 0x15A66
21193:                        {
21194:                         PWM1_C_H=0;
015A5C  A9AE44     BCLR LATE, #5
21195:                         PWM1_C_L=1;
015A5E  A88E44     BSET LATE, #4
21196:                         PEN1_C_H=0;
015A60  A9EC63     BCLR 0xC63, #7
21197:                         PEN1_C_L=0;
015A62  A9CC63     BCLR 0xC63, #6
015A64  370004     BRA 0x15A6E
21198:                        }
21199:                        else
21200:                        {
21201:                         PWM1_C_H=0;
015A66  A9AE44     BCLR LATE, #5
21202:                         PWM1_C_L=0;
015A68  A98E44     BCLR LATE, #4
21203:                         PEN1_C_H=1;
015A6A  A8EC63     BSET 0xC63, #7
21204:                         PEN1_C_L=0;
015A6C  A9CC63     BCLR 0xC63, #6
21205:                        }
21206:                
21207:                        }
21208:             
21209:             
21210:                        if (!SIN_MIDDLE)
015A6E  809765     MOV StatFlgs2, W5
015A70  240004     MOV #0x4000, W4
015A72  628204     AND W5, W4, W4
015A74  520FE0     SUB W4, #0x0, [W15]
015A76  3A003A     BRA NZ, 0x15AEC
21211:                        {
21212:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
015A78  81F506     MOV Amplitude1Tmp, W6
015A7A  81F517     MOV 0x3EA2, W7
015A7C  81FEC4     MOV TabRes0, W4
015A7E  81FED5     MOV 0x3FDA, W5
015A80  B83884     MUL.UU W7, W4, W0
015A82  B82986     MUL.UU W5, W6, W2
015A84  780082     MOV W2, W1
015A86  400001     ADD W0, W1, W0
015A88  780306     MOV W6, W6
015A8A  780204     MOV W4, W4
015A8C  B83204     MUL.UU W6, W4, W4
015A8E  400005     ADD W0, W5, W0
015A90  780280     MOV W0, W5
015A92  DD2B48     SL W5, #8, W6
015A94  DE2248     LSR W4, #8, W4
015A96  730204     IOR W6, W4, W4
015A98  DE2AC8     LSR W5, #8, W5
015A9A  780204     MOV W4, W4
015A9C  888814     MOV W4, SV_PWM1_0
21213:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
015A9E  81F506     MOV Amplitude1Tmp, W6
015AA0  81F517     MOV 0x3EA2, W7
015AA2  81FEE4     MOV TabRes1, W4
015AA4  81FEF5     MOV 0x3FDE, W5
015AA6  B83884     MUL.UU W7, W4, W0
015AA8  B82986     MUL.UU W5, W6, W2
015AAA  780082     MOV W2, W1
015AAC  400001     ADD W0, W1, W0
015AAE  780306     MOV W6, W6
015AB0  780204     MOV W4, W4
015AB2  B83204     MUL.UU W6, W4, W4
015AB4  400005     ADD W0, W5, W0
015AB6  780280     MOV W0, W5
015AB8  DD2B48     SL W5, #8, W6
015ABA  DE2248     LSR W4, #8, W4
015ABC  730204     IOR W6, W4, W4
015ABE  DE2AC8     LSR W5, #8, W5
015AC0  780204     MOV W4, W4
015AC2  888824     MOV W4, SV_PWM1_1
21214:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
015AC4  81F506     MOV Amplitude1Tmp, W6
015AC6  81F517     MOV 0x3EA2, W7
015AC8  81FF04     MOV TabRes2, W4
015ACA  81FF15     MOV 0x3FE2, W5
015ACC  B83884     MUL.UU W7, W4, W0
015ACE  B82986     MUL.UU W5, W6, W2
015AD0  780082     MOV W2, W1
015AD2  400001     ADD W0, W1, W0
015AD4  780306     MOV W6, W6
015AD6  780204     MOV W4, W4
015AD8  B83204     MUL.UU W6, W4, W4
015ADA  400005     ADD W0, W5, W0
015ADC  780280     MOV W0, W5
015ADE  DD2B48     SL W5, #8, W6
015AE0  DE2248     LSR W4, #8, W4
015AE2  730204     IOR W6, W4, W4
015AE4  DE2AC8     LSR W5, #8, W5
015AE6  780204     MOV W4, W4
015AE8  888834     MOV W4, SV_PWM1_2
21215:                        }
21216:                     else
21217:                     {
21218:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
015AEC  81F504     MOV Amplitude1Tmp, W4
015AEE  81F515     MOV 0x3EA2, W5
015AF0  BE0304     MOV.D W4, W6
015AF2  81FEC4     MOV TabRes0, W4
015AF4  81FED5     MOV 0x3FDA, W5
015AF6  B83884     MUL.UU W7, W4, W0
015AF8  B82986     MUL.UU W5, W6, W2
015AFA  780082     MOV W2, W1
015AFC  400001     ADD W0, W1, W0
015AFE  780306     MOV W6, W6
015B00  780204     MOV W4, W4
015B02  B83204     MUL.UU W6, W4, W4
015B04  400005     ADD W0, W5, W0
015B06  780280     MOV W0, W5
015B08  DD2B48     SL W5, #8, W6
015B0A  DE2248     LSR W4, #8, W4
015B0C  730204     IOR W6, W4, W4
015B0E  DEAAC8     ASR W5, #8, W5
015B10  780284     MOV W4, W5
015B12  8092D6     MOV MAX_PWM_CONST, W6
015B14  200024     MOV #0x2, W4
015B16  090011     REPEAT #0x11
015B18  D80304     DIV.SW W6, W4
015B1A  780200     MOV W0, W4
015B1C  428204     ADD W5, W4, W4
015B1E  888814     MOV W4, SV_PWM1_0
21219:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
015B20  81F504     MOV Amplitude1Tmp, W4
015B22  81F515     MOV 0x3EA2, W5
015B24  BE0304     MOV.D W4, W6
015B26  81FEE4     MOV TabRes1, W4
015B28  81FEF5     MOV 0x3FDE, W5
015B2A  B83884     MUL.UU W7, W4, W0
015B2C  B82986     MUL.UU W5, W6, W2
015B2E  780082     MOV W2, W1
015B30  400001     ADD W0, W1, W0
015B32  780306     MOV W6, W6
015B34  780204     MOV W4, W4
015B36  B83204     MUL.UU W6, W4, W4
015B38  400005     ADD W0, W5, W0
015B3A  780280     MOV W0, W5
015B3C  DD2B48     SL W5, #8, W6
015B3E  DE2248     LSR W4, #8, W4
015B40  730204     IOR W6, W4, W4
015B42  DEAAC8     ASR W5, #8, W5
015B44  780284     MOV W4, W5
015B46  8092D6     MOV MAX_PWM_CONST, W6
015B48  200024     MOV #0x2, W4
015B4A  090011     REPEAT #0x11
015B4C  D80304     DIV.SW W6, W4
015B4E  780200     MOV W0, W4
015B50  428204     ADD W5, W4, W4
015B52  888824     MOV W4, SV_PWM1_1
21220:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
015B54  81F504     MOV Amplitude1Tmp, W4
015B56  81F515     MOV 0x3EA2, W5
015B58  BE0304     MOV.D W4, W6
015B5A  81FF04     MOV TabRes2, W4
015B5C  81FF15     MOV 0x3FE2, W5
015B5E  B83884     MUL.UU W7, W4, W0
015B60  B82986     MUL.UU W5, W6, W2
015B62  780082     MOV W2, W1
015B64  400001     ADD W0, W1, W0
015B66  780306     MOV W6, W6
015B68  780204     MOV W4, W4
015B6A  B83204     MUL.UU W6, W4, W4
015B6C  400005     ADD W0, W5, W0
015B6E  780280     MOV W0, W5
015B70  DD2B48     SL W5, #8, W6
015B72  DE2248     LSR W4, #8, W4
015B74  730204     IOR W6, W4, W4
015B76  DEAAC8     ASR W5, #8, W5
015B78  780284     MOV W4, W5
015B7A  8092D6     MOV MAX_PWM_CONST, W6
015B7C  200024     MOV #0x2, W4
015B7E  090011     REPEAT #0x11
015B80  D80304     DIV.SW W6, W4
015B82  780200     MOV W0, W4
015B84  428204     ADD W5, W4, W4
015B86  888834     MOV W4, SV_PWM1_2
21221:                     }
21222:             
21223:                       break ;
015AEA  370050     BRA 0x15B8C
015B88  370001     BRA 0x15B8C
21224:             
21225:             
21226:                   }
21227:             
21228:                       }
21229:                    }
21230:             
21231:             if (TestingSin)
015B8C  8096A5     MOV Flgs6, W5
015B8E  201004     MOV #0x100, W4
015B90  628204     AND W5, W4, W4
015B92  520FE0     SUB W4, #0x0, [W15]
015B94  320116     BRA Z, 0x15DC2
21232:             {
21233:                 if ((ThetaIndex!=ThetaIndexPrev)&&(ThetaIndex>2)&&(ThetaIndex<380))
015B96  817D35     MOV ThetaIndex, W5
015B98  817D44     MOV ThetaIndexPrev, W4
015B9A  528F84     SUB W5, W4, [W15]
015B9C  320015     BRA Z, 0x15BC8
015B9E  817D34     MOV ThetaIndex, W4
015BA0  520FE2     SUB W4, #0x2, [W15]
015BA2  360012     BRA LEU, 0x15BC8
015BA4  817D35     MOV ThetaIndex, W5
015BA6  2017B4     MOV #0x17B, W4
015BA8  528F84     SUB W5, W4, [W15]
015BAA  3E000E     BRA GTU, 0x15BC8
21234:                 {
21235:                     
21236:                     if (ThetaIndex>ThetaIndexPrev)
015BAC  817D35     MOV ThetaIndex, W5
015BAE  817D44     MOV ThetaIndexPrev, W4
015BB0  528F84     SUB W5, W4, [W15]
015BB2  360003     BRA LEU, 0x15BBA
21237:                         ThetaIndexINC=1;
015BB4  8096A4     MOV Flgs6, W4
015BB6  A0B004     BSET W4, #11
015BB8  8896A4     MOV W4, Flgs6
21238:                     if (ThetaIndex<ThetaIndexPrev)
015BBA  817D35     MOV ThetaIndex, W5
015BBC  817D44     MOV ThetaIndexPrev, W4
015BBE  528F84     SUB W5, W4, [W15]
015BC0  310003     BRA C, 0x15BC8
21239:                         ThetaIndexINC=0;
015BC2  8096A4     MOV Flgs6, W4
015BC4  A1B004     BCLR W4, #11
015BC6  8896A4     MOV W4, Flgs6
21240:                 }
21241:                     ThetaIndexPrev=ThetaIndex;
015BC8  817D34     MOV ThetaIndex, W4
015BCA  897D44     MOV W4, ThetaIndexPrev
21242:                     
21243:                     
21244:             if ((ThetaIndex>=20)&&(ThetaIndex<44))
015BCC  817D34     MOV ThetaIndex, W4
015BCE  520FF3     SUB W4, #0x13, [W15]
015BD0  360007     BRA LEU, 0x15BE0
015BD2  817D35     MOV ThetaIndex, W5
015BD4  2002B4     MOV #0x2B, W4
015BD6  528F84     SUB W5, W4, [W15]
015BD8  3E0003     BRA GTU, 0x15BE0
21245:                 ThetaSector=1;
015BDA  22FB35     MOV #0x2FB3, W5
015BDC  B3C014     MOV.B #0x1, W4
015BDE  784A84     MOV.B W4, [W5]
21246:             if ((ThetaIndex>=84)&&(ThetaIndex<108))
015BE0  817D35     MOV ThetaIndex, W5
015BE2  200534     MOV #0x53, W4
015BE4  528F84     SUB W5, W4, [W15]
015BE6  360007     BRA LEU, 0x15BF6
015BE8  817D35     MOV ThetaIndex, W5
015BEA  2006B4     MOV #0x6B, W4
015BEC  528F84     SUB W5, W4, [W15]
015BEE  3E0003     BRA GTU, 0x15BF6
21247:                 ThetaSector=2;
015BF0  22FB35     MOV #0x2FB3, W5
015BF2  B3C024     MOV.B #0x2, W4
015BF4  784A84     MOV.B W4, [W5]
21248:             if ((ThetaIndex>=148)&&(ThetaIndex<172))
015BF6  817D35     MOV ThetaIndex, W5
015BF8  200934     MOV #0x93, W4
015BFA  528F84     SUB W5, W4, [W15]
015BFC  360007     BRA LEU, 0x15C0C
015BFE  817D35     MOV ThetaIndex, W5
015C00  200AB4     MOV #0xAB, W4
015C02  528F84     SUB W5, W4, [W15]
015C04  3E0003     BRA GTU, 0x15C0C
21249:                 ThetaSector=3;
015C06  22FB35     MOV #0x2FB3, W5
015C08  B3C034     MOV.B #0x3, W4
015C0A  784A84     MOV.B W4, [W5]
21250:             if ((ThetaIndex>=212)&&(ThetaIndex<236))
015C0C  817D35     MOV ThetaIndex, W5
015C0E  200D34     MOV #0xD3, W4
015C10  528F84     SUB W5, W4, [W15]
015C12  360007     BRA LEU, 0x15C22
015C14  817D35     MOV ThetaIndex, W5
015C16  200EB4     MOV #0xEB, W4
015C18  528F84     SUB W5, W4, [W15]
015C1A  3E0003     BRA GTU, 0x15C22
21251:                 ThetaSector=4;
015C1C  22FB35     MOV #0x2FB3, W5
015C1E  B3C044     MOV.B #0x4, W4
015C20  784A84     MOV.B W4, [W5]
21252:             if ((ThetaIndex>=276)&&(ThetaIndex<300))
015C22  817D35     MOV ThetaIndex, W5
015C24  201134     MOV #0x113, W4
015C26  528F84     SUB W5, W4, [W15]
015C28  360007     BRA LEU, 0x15C38
015C2A  817D35     MOV ThetaIndex, W5
015C2C  2012B4     MOV #0x12B, W4
015C2E  528F84     SUB W5, W4, [W15]
015C30  3E0003     BRA GTU, 0x15C38
21253:                 ThetaSector=5;
015C32  22FB35     MOV #0x2FB3, W5
015C34  B3C054     MOV.B #0x5, W4
015C36  784A84     MOV.B W4, [W5]
21254:             if ((ThetaIndex>=340)&&(ThetaIndex<364))
015C38  817D35     MOV ThetaIndex, W5
015C3A  201534     MOV #0x153, W4
015C3C  528F84     SUB W5, W4, [W15]
015C3E  360007     BRA LEU, 0x15C4E
015C40  817D35     MOV ThetaIndex, W5
015C42  2016B4     MOV #0x16B, W4
015C44  528F84     SUB W5, W4, [W15]
015C46  3E0003     BRA GTU, 0x15C4E
21255:                 ThetaSector=6;
015C48  22FB35     MOV #0x2FB3, W5
015C4A  B3C064     MOV.B #0x6, W4
015C4C  784A84     MOV.B W4, [W5]
21256:             
21257:             if (ThetaSectorPrev!=ThetaSector)
015C4E  22FB44     MOV #0x2FB4, W4
015C50  784294     MOV.B [W4], W5
015C52  22FB34     MOV #0x2FB3, W4
015C54  784214     MOV.B [W4], W4
015C56  52CF84     SUB.B W5, W4, [W15]
015C58  3200B0     BRA Z, 0x15DBA
21258:             {
21259:                 if ((ThetaSector==1)&&(StrtTestingSin))
015C5A  22FB34     MOV #0x2FB3, W4
015C5C  784214     MOV.B [W4], W4
015C5E  524FE1     SUB.B W4, #0x1, [W15]
015C60  3A0012     BRA NZ, 0x15C86
015C62  8096A5     MOV Flgs6, W5
015C64  202004     MOV #0x200, W4
015C66  628204     AND W5, W4, W4
015C68  520FE0     SUB W4, #0x0, [W15]
015C6A  32000D     BRA Z, 0x15C86
21260:                 {
21261:                     ThetaIDX=0;
015C6C  234E45     MOV #0x34E4, W5
015C6E  EB4200     CLR.B W4
015C70  784A84     MOV.B W4, [W5]
21262:                     ThetaMass[ThetaIDX]=1;
015C72  234E44     MOV #0x34E4, W4
015C74  784214     MOV.B [W4], W4
015C76  FB8204     ZE W4, W4
015C78  234DE5     MOV #0x34DE, W5
015C7A  428284     ADD W5, W4, W5
015C7C  B3C014     MOV.B #0x1, W4
015C7E  784A84     MOV.B W4, [W5]
21263:                     StrtTestingSin=0;
015C80  8096A4     MOV Flgs6, W4
015C82  A19004     BCLR W4, #9
015C84  8896A4     MOV W4, Flgs6
21264:                 }
21265:                 if (!StrtTestingSin)
015C86  8096A5     MOV Flgs6, W5
015C88  202004     MOV #0x200, W4
015C8A  628204     AND W5, W4, W4
015C8C  520FE0     SUB W4, #0x0, [W15]
015C8E  3A0095     BRA NZ, 0x15DBA
21266:                 {
21267:                 if (ThetaSector==2)
015C90  22FB34     MOV #0x2FB3, W4
015C92  784214     MOV.B [W4], W4
015C94  524FE2     SUB.B W4, #0x2, [W15]
015C96  3A0007     BRA NZ, 0x15CA6
21268:                     ThetaMass[ThetaIDX]=2;
015C98  234E44     MOV #0x34E4, W4
015C9A  784214     MOV.B [W4], W4
015C9C  FB8204     ZE W4, W4
015C9E  234DE5     MOV #0x34DE, W5
015CA0  428284     ADD W5, W4, W5
015CA2  B3C024     MOV.B #0x2, W4
015CA4  784A84     MOV.B W4, [W5]
21269:                 if (ThetaSector==3)
015CA6  22FB34     MOV #0x2FB3, W4
015CA8  784214     MOV.B [W4], W4
015CAA  524FE3     SUB.B W4, #0x3, [W15]
015CAC  3A0007     BRA NZ, 0x15CBC
21270:                     ThetaMass[ThetaIDX]=3;
015CAE  234E44     MOV #0x34E4, W4
015CB0  784214     MOV.B [W4], W4
015CB2  FB8204     ZE W4, W4
015CB4  234DE5     MOV #0x34DE, W5
015CB6  428284     ADD W5, W4, W5
015CB8  B3C034     MOV.B #0x3, W4
015CBA  784A84     MOV.B W4, [W5]
21271:                 if (ThetaSector==4)
015CBC  22FB34     MOV #0x2FB3, W4
015CBE  784214     MOV.B [W4], W4
015CC0  524FE4     SUB.B W4, #0x4, [W15]
015CC2  3A0007     BRA NZ, 0x15CD2
21272:                     ThetaMass[ThetaIDX]=4;
015CC4  234E44     MOV #0x34E4, W4
015CC6  784214     MOV.B [W4], W4
015CC8  FB8204     ZE W4, W4
015CCA  234DE5     MOV #0x34DE, W5
015CCC  428284     ADD W5, W4, W5
015CCE  B3C044     MOV.B #0x4, W4
015CD0  784A84     MOV.B W4, [W5]
21273:                 if (ThetaSector==5)
015CD2  22FB34     MOV #0x2FB3, W4
015CD4  784214     MOV.B [W4], W4
015CD6  524FE5     SUB.B W4, #0x5, [W15]
015CD8  3A0007     BRA NZ, 0x15CE8
21274:                     ThetaMass[ThetaIDX]=5;
015CDA  234E44     MOV #0x34E4, W4
015CDC  784214     MOV.B [W4], W4
015CDE  FB8204     ZE W4, W4
015CE0  234DE5     MOV #0x34DE, W5
015CE2  428284     ADD W5, W4, W5
015CE4  B3C054     MOV.B #0x5, W4
015CE6  784A84     MOV.B W4, [W5]
21275:                 if (ThetaSector==6)
015CE8  22FB34     MOV #0x2FB3, W4
015CEA  784214     MOV.B [W4], W4
015CEC  524FE6     SUB.B W4, #0x6, [W15]
015CEE  3A0007     BRA NZ, 0x15CFE
21276:                     ThetaMass[ThetaIDX]=6;
015CF0  234E44     MOV #0x34E4, W4
015CF2  784214     MOV.B [W4], W4
015CF4  FB8204     ZE W4, W4
015CF6  234DE5     MOV #0x34DE, W5
015CF8  428284     ADD W5, W4, W5
015CFA  B3C064     MOV.B #0x6, W4
015CFC  784A84     MOV.B W4, [W5]
21277:                 
21278:                 if (ThetaIDX==5)
015CFE  234E44     MOV #0x34E4, W4
015D00  784214     MOV.B [W4], W4
015D02  524FE5     SUB.B W4, #0x5, [W15]
015D04  3A0055     BRA NZ, 0x15DB0
21279:                 {
21280:                     if ((((ThetaMass[0]==1)&&(ThetaMass[1]==2)&&(ThetaMass[2]==3)&&(ThetaMass[3]==4)&&(ThetaMass[4]==5)&&(ThetaMass[5]==6))&&ThetaIndexINC)||
015D06  234DE4     MOV #0x34DE, W4
015D08  784214     MOV.B [W4], W4
015D0A  524FE1     SUB.B W4, #0x1, [W15]
015D0C  3A0019     BRA NZ, 0x15D40
015D0E  234DF4     MOV #0x34DF, W4
015D10  784214     MOV.B [W4], W4
015D12  524FE2     SUB.B W4, #0x2, [W15]
015D14  3A0015     BRA NZ, 0x15D40
015D16  234E04     MOV #0x34E0, W4
015D18  784214     MOV.B [W4], W4
015D1A  524FE3     SUB.B W4, #0x3, [W15]
015D1C  3A0011     BRA NZ, 0x15D40
015D1E  234E14     MOV #0x34E1, W4
015D20  784214     MOV.B [W4], W4
015D22  524FE4     SUB.B W4, #0x4, [W15]
015D24  3A000D     BRA NZ, 0x15D40
015D26  234E24     MOV #0x34E2, W4
015D28  784214     MOV.B [W4], W4
015D2A  524FE5     SUB.B W4, #0x5, [W15]
015D2C  3A0009     BRA NZ, 0x15D40
015D2E  234E34     MOV #0x34E3, W4
015D30  784214     MOV.B [W4], W4
015D32  524FE6     SUB.B W4, #0x6, [W15]
015D34  3A0005     BRA NZ, 0x15D40
015D36  8096A5     MOV Flgs6, W5
015D38  208004     MOV #0x800, W4
015D3A  628204     AND W5, W4, W4
015D3C  520FE0     SUB W4, #0x0, [W15]
015D3E  3A001D     BRA NZ, 0x15D7A
015D44  524FE1     SUB.B W4, #0x1, [W15]
015D46  3A001C     BRA NZ, 0x15D80
21281:                             (((ThetaMass[0]==1)&&(ThetaMass[1]==6)&&(ThetaMass[2]==5)&&(ThetaMass[3]==4)&&(ThetaMass[4]==3)&&(ThetaMass[5]==2))&&!ThetaIndexINC))
015D40  234DE4     MOV #0x34DE, W4
015D42  784214     MOV.B [W4], W4
015D48  234DF4     MOV #0x34DF, W4
015D4A  784214     MOV.B [W4], W4
015D4C  524FE6     SUB.B W4, #0x6, [W15]
015D4E  3A0018     BRA NZ, 0x15D80
015D50  234E04     MOV #0x34E0, W4
015D52  784214     MOV.B [W4], W4
015D54  524FE5     SUB.B W4, #0x5, [W15]
015D56  3A0014     BRA NZ, 0x15D80
015D58  234E14     MOV #0x34E1, W4
015D5A  784214     MOV.B [W4], W4
015D5C  524FE4     SUB.B W4, #0x4, [W15]
015D5E  3A0010     BRA NZ, 0x15D80
015D60  234E24     MOV #0x34E2, W4
015D62  784214     MOV.B [W4], W4
015D64  524FE3     SUB.B W4, #0x3, [W15]
015D66  3A000C     BRA NZ, 0x15D80
015D68  234E34     MOV #0x34E3, W4
015D6A  784214     MOV.B [W4], W4
015D6C  524FE2     SUB.B W4, #0x2, [W15]
015D6E  3A0008     BRA NZ, 0x15D80
015D70  8096A5     MOV Flgs6, W5
015D72  208004     MOV #0x800, W4
015D74  628204     AND W5, W4, W4
015D76  520FE0     SUB W4, #0x0, [W15]
015D78  3A0003     BRA NZ, 0x15D80
21282:                     {
21283:                         TestSIN_Ok=1;
015D7A  809654     MOV 0x12CA, W4
015D7C  A02004     BSET W4, #2
015D7E  889654     MOV W4, 0x12CA
21284:                     }
21285:               /*      else
21286:                     {
21287:                         TestSIN_Ok=0;
21288:                     }
21289:             */      
21290:                     if (TestSIN_OkCnt)
015D80  230354     MOV #0x3035, W4
015D82  784214     MOV.B [W4], W4
015D84  524FE0     SUB.B W4, #0x0, [W15]
015D86  320011     BRA Z, 0x15DAA
21291:                     {
21292:                         TestSIN_OkCnt--;
015D88  230354     MOV #0x3035, W4
015D8A  784214     MOV.B [W4], W4
015D8C  E94204     DEC.B W4, W4
015D8E  230355     MOV #0x3035, W5
015D90  784A84     MOV.B W4, [W5]
21293:                         if (TestSIN_OkCnt)
015D92  230354     MOV #0x3035, W4
015D94  784214     MOV.B [W4], W4
015D96  524FE0     SUB.B W4, #0x0, [W15]
015D98  320004     BRA Z, 0x15DA2
21294:                         {
21295:                             ThetaIDX=0;
015D9A  234E45     MOV #0x34E4, W5
015D9C  EB4200     CLR.B W4
015D9E  784A84     MOV.B W4, [W5]
015DA0  370007     BRA 0x15DB0
21296:                         }
21297:                         else
21298:                         TestingSin=0;
015DA2  8096A4     MOV Flgs6, W4
015DA4  A18004     BCLR W4, #8
015DA6  8896A4     MOV W4, Flgs6
015DA8  370003     BRA 0x15DB0
21299:                     }
21300:                     else
21301:                     TestingSin=0;
015DAA  8096A4     MOV Flgs6, W4
015DAC  A18004     BCLR W4, #8
015DAE  8896A4     MOV W4, Flgs6
21302:                     
21303:                 }
21304:                 ThetaIDX++;
015DB0  234E44     MOV #0x34E4, W4
015DB2  784214     MOV.B [W4], W4
015DB4  E84204     INC.B W4, W4
015DB6  234E45     MOV #0x34E4, W5
015DB8  784A84     MOV.B W4, [W5]
21305:                 }
21306:             }
21307:             ThetaSectorPrev=ThetaSector;
015DBA  22FB34     MOV #0x2FB3, W4
015DBC  784214     MOV.B [W4], W4
015DBE  22FB45     MOV #0x2FB4, W5
015DC0  784A84     MOV.B W4, [W5]
21308:                 
21309:             }
21310:             
21311:                     SetPWM1_SV();
015DC2  0708B4     RCALL SetPWM1_SV
015DC4  370001     BRA 0x15DC8
21312:             
21313:                     
21314:                 //TST_PIN=0;
21315:                     /*if (FillSinMass)
21316:                     {
21317:                     if (CntPhase<MassTMPSIZE)
21318:                     {
21319:             int a=PDC1/8,b=PDC2/8;
21320:             a=a-b;
21321:             MassTMPPhase[CntPhase]=a;//PDC1/6;  Sensor1_Prev_OP;//   BLUE  BLUE  BLUE  BLUE  BLUE  
21322:             MassTMPNeutral[CntPhase]=Phase1Period1;//ReadSensor1_F_V()*10;//Sensor1_Prev*10;//Sensor1_Prev_OP;//PDC1/6;
21323:             if ((MassTMPNeutral[CntPhase]==0)&&(Spd1Res>15))
21324:             {
21325:                 Nop();
21326:                 Nop();
21327:                 Nop();
21328:             }
21329:             CntPhase++;
21330:                     }
21331:                     }
21332:                     */
21333:             }
015DC8  FA8000     ULNK
015DCA  060000     RETURN
21334:                 
21335:             void SVPWM1_SetPWM(void)
21336:                 {
015DCC  FA0000     LNK #0x0
21337:             //    if (!Monocycle)
21338:               //      return;
21339:                     if (ChagerViaMotor)
015DCE  809604     MOV Flgs1, W4
015DD0  620262     AND W4, #0x2, W4
015DD2  520FE0     SUB W4, #0x0, [W15]
015DD4  320002     BRA Z, 0x15DDA
21340:                 {
21341:                     SetPWM_ChagerViaMotor();
015DD6  073A8B     RCALL SetPWM_ChagerViaMotor
21342:                     return;
015DD8  3708A7     BRA 0x16F28
21343:                 }
21344:             
21345:                     if (DS)
015DDA  8096B5     MOV 0x12D6, W5
015DDC  208004     MOV #0x800, W4
015DDE  628204     AND W5, W4, W4
015DE0  520FE0     SUB W4, #0x0, [W15]
015DE2  320012     BRA Z, 0x15E08
21346:                 {
21347:                     
21348:                 PWM1_A_H=0;
015DE4  A92E44     BCLR LATE, #1
21349:                 PWM1_A_L=0;
015DE6  A90E44     BCLR LATE, #0
21350:                 PWM1_B_H=0;
015DE8  A96E44     BCLR LATE, #3
21351:                 PWM1_B_L=0;
015DEA  A94E44     BCLR LATE, #2
21352:                 PWM1_C_H=0;
015DEC  A9AE44     BCLR LATE, #5
21353:                 PWM1_C_L=0;
015DEE  A98E44     BCLR LATE, #4
21354:             
21355:                 
21356:                 PEN1_A_H=0;
015DF0  A9EC23     BCLR 0xC23, #7
21357:                 PEN1_A_L=0;
015DF2  A9CC23     BCLR 0xC23, #6
21358:                 PEN1_B_H=0;
015DF4  A9EC43     BCLR 0xC43, #7
21359:                 PEN1_B_L=0;
015DF6  A9CC43     BCLR 0xC43, #6
21360:                 PEN1_C_H=0;
015DF8  A9EC63     BCLR 0xC63, #7
21361:                 PEN1_C_L=0;
015DFA  A9CC63     BCLR 0xC63, #6
21362:                 PhasePWM=PWM1Show=0;
015DFC  EB0200     CLR W4
015DFE  8892A4     MOV W4, PWM1Show
015E00  B82260     MUL.UU W4, #0, W4
015E02  89F524     MOV W4, PhasePWM
015E04  89F535     MOV W5, 0x3EA6
21363:                 return;
015E06  370890     BRA 0x16F28
21364:                 }
21365:             
21366:             
21367:                     
21368:                     
21369:                 if (BreakPressed)
015E08  809614     MOV 0x12C2, W4
015E0A  620261     AND W4, #0x1, W4
015E0C  520FE0     SUB W4, #0x0, [W15]
015E0E  3A088B     BRA NZ, 0x16F26
21370:                     return;
016F26  000000     NOP
21371:                 
21372:                 
21373:             
21374:                 
21375:             if (CURRENT_PROTECTION)
015E10  809755     MOV StatFlgs1, W5
015E12  220004     MOV #0x2000, W4
015E14  628204     AND W5, W4, W4
015E16  520FE0     SUB W4, #0x0, [W15]
015E18  320015     BRA Z, 0x15E44
21376:                       {
21377:                       if (Amplitude1>PI_Curr1Res)
015E1A  81F404     MOV PI_Curr1Res, W4
015E1C  81F415     MOV 0x3E82, W5
015E1E  BE0304     MOV.D W4, W6
015E20  809A44     MOV Amplitude1, W4
015E22  809A55     MOV 0x134A, W5
015E24  530F84     SUB W6, W4, [W15]
015E26  5B8F85     SUBB W7, W5, [W15]
015E28  310009     BRA C, 0x15E3C
21378:                     Amplitude1Tmp=Amplitude1-PI_Curr1Res;
015E2A  809A46     MOV Amplitude1, W6
015E2C  809A57     MOV 0x134A, W7
015E2E  81F404     MOV PI_Curr1Res, W4
015E30  81F415     MOV 0x3E82, W5
015E32  530204     SUB W6, W4, W4
015E34  5B8285     SUBB W7, W5, W5
015E36  89F504     MOV W4, Amplitude1Tmp
015E38  89F515     MOV W5, 0x3EA2
015E3A  370008     BRA 0x15E4C
21379:                       else
21380:                           Amplitude1Tmp=0;
015E3C  B82260     MUL.UU W4, #0, W4
015E3E  89F504     MOV W4, Amplitude1Tmp
015E40  89F515     MOV W5, 0x3EA2
015E42  370004     BRA 0x15E4C
21381:                       }
21382:             else
21383:             Amplitude1Tmp=Amplitude1;
015E44  809A44     MOV Amplitude1, W4
015E46  809A55     MOV 0x134A, W5
015E48  89F504     MOV W4, Amplitude1Tmp
015E4A  89F515     MOV W5, 0x3EA2
21384:             PhasePWM=Amplitude1Tmp;
015E4C  81F504     MOV Amplitude1Tmp, W4
015E4E  81F515     MOV 0x3EA2, W5
015E50  89F524     MOV W4, PhasePWM
015E52  89F535     MOV W5, 0x3EA6
21385:                       
21386:                       PWM1Show=Amplitude1Tmp;
015E54  81F504     MOV Amplitude1Tmp, W4
015E56  81F515     MOV 0x3EA2, W5
015E58  780204     MOV W4, W4
015E5A  8892A4     MOV W4, PWM1Show
21387:                       
21388:             
21389:                       if (TrapezoidaRAM1)
015E5C  809755     MOV StatFlgs1, W5
015E5E  210004     MOV #0x1000, W4
015E60  628204     AND W5, W4, W4
015E62  520FE0     SUB W4, #0x0, [W15]
015E64  32024F     BRA Z, 0x16304
21390:                       {
21391:                   switch (Sensor1_Prev_OP)
015E66  210FA4     MOV #0x10FA, W4
015E68  784214     MOV.B [W4], W4
015E6A  FB8204     ZE W4, W4
015E6C  B92361     MUL.SU W4, #1, W6
015E6E  EB8200     SETM W4
015E70  EB8280     SETM W5
015E72  420206     ADD W4, W6, W4
015E74  4A8287     ADDC W5, W7, W5
015E76  200056     MOV #0x5, W6
015E78  200007     MOV #0x0, W7
015E7A  520F86     SUB W4, W6, [W15]
015E7C  5A8F87     SUBB W5, W7, [W15]
015E7E  3E0850     BRA GTU, 0x16F20
015E80  010604     BRA W4
015E82  370005     BRA 0x15E8E
015E84  3700C2     BRA 0x1600A
015E86  370062     BRA 0x15F4C
015E88  37017E     BRA 0x16186
015E8A  3701DD     BRA 0x16246
015E8C  37011D     BRA 0x160C8
21392:                    {
21393:                    case 1 :
21394:                         PWM1_A_H=0;
015E8E  A92E44     BCLR LATE, #1
21395:                         PWM1_A_L=1;
015E90  A80E44     BSET LATE, #0
21396:                         PWM1_B_H=0;
015E92  A96E44     BCLR LATE, #3
21397:                         PWM1_B_L=0;
015E94  A94E44     BCLR LATE, #2
21398:                         PWM1_C_H=0;
015E96  A9AE44     BCLR LATE, #5
21399:                         PWM1_C_L=0;
015E98  A98E44     BCLR LATE, #4
21400:             
21401:                         PEN1_A_H=0;
015E9A  A9EC23     BCLR 0xC23, #7
21402:                         PEN1_A_L=0;
015E9C  A9CC23     BCLR 0xC23, #6
21403:                         PEN1_B_H=1;
015E9E  A8EC43     BSET 0xC43, #7
21404:                         if (StrongMode)
015EA0  8095F5     MOV 0x12BE, W5
015EA2  240004     MOV #0x4000, W4
015EA4  628204     AND W5, W4, W4
015EA6  520FE0     SUB W4, #0x0, [W15]
015EA8  320002     BRA Z, 0x15EAE
21405:                         PEN1_B_L=1;
015EAA  A8CC43     BSET 0xC43, #6
015EAC  370001     BRA 0x15EB0
21406:                         else
21407:                         PEN1_B_L=0;
015EAE  A9CC43     BCLR 0xC43, #6
21408:                         PEN1_C_H=0;//1;
015EB0  A9EC63     BCLR 0xC63, #7
21409:                         PEN1_C_L=0;
015EB2  A9CC63     BCLR 0xC63, #6
21410:             
21411:             
21412:             
21413:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-1])>>8) ;
015EB4  808794     MOV Theta1CntPWM, W4
015EB6  2017F5     MOV #0x17F, W5
015EB8  528204     SUB W5, W4, W4
015EBA  240D65     MOV #0x40D6, W5
015EBC  428204     ADD W5, W4, W4
015EBE  784214     MOV.B [W4], W4
015EC0  FB8304     ZE W4, W6
015EC2  200007     MOV #0x0, W7
015EC4  81F504     MOV Amplitude1Tmp, W4
015EC6  81F515     MOV 0x3EA2, W5
015EC8  B83884     MUL.UU W7, W4, W0
015ECA  B82986     MUL.UU W5, W6, W2
015ECC  780082     MOV W2, W1
015ECE  400001     ADD W0, W1, W0
015ED0  780306     MOV W6, W6
015ED2  780204     MOV W4, W4
015ED4  B83204     MUL.UU W6, W4, W4
015ED6  400005     ADD W0, W5, W0
015ED8  780280     MOV W0, W5
015EDA  DD2B48     SL W5, #8, W6
015EDC  DE2248     LSR W4, #8, W4
015EDE  730204     IOR W6, W4, W4
015EE0  DE2AC8     LSR W5, #8, W5
015EE2  780204     MOV W4, W4
015EE4  888814     MOV W4, SV_PWM1_0
21414:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-257])>>8) ;
015EE6  808794     MOV Theta1CntPWM, W4
015EE8  2007F5     MOV #0x7F, W5
015EEA  528204     SUB W5, W4, W4
015EEC  240D65     MOV #0x40D6, W5
015EEE  428204     ADD W5, W4, W4
015EF0  784214     MOV.B [W4], W4
015EF2  FB8304     ZE W4, W6
015EF4  200007     MOV #0x0, W7
015EF6  81F504     MOV Amplitude1Tmp, W4
015EF8  81F515     MOV 0x3EA2, W5
015EFA  B83884     MUL.UU W7, W4, W0
015EFC  B82986     MUL.UU W5, W6, W2
015EFE  780082     MOV W2, W1
015F00  400001     ADD W0, W1, W0
015F02  780306     MOV W6, W6
015F04  780204     MOV W4, W4
015F06  B83204     MUL.UU W6, W4, W4
015F08  400005     ADD W0, W5, W0
015F0A  780280     MOV W0, W5
015F0C  DD2B48     SL W5, #8, W6
015F0E  DE2248     LSR W4, #8, W4
015F10  730204     IOR W6, W4, W4
015F12  DE2AC8     LSR W5, #8, W5
015F14  780204     MOV W4, W4
015F16  888824     MOV W4, SV_PWM1_1
21415:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-129])>>8) ;
015F18  808794     MOV Theta1CntPWM, W4
015F1A  200FF5     MOV #0xFF, W5
015F1C  528204     SUB W5, W4, W4
015F1E  240D65     MOV #0x40D6, W5
015F20  428204     ADD W5, W4, W4
015F22  784214     MOV.B [W4], W4
015F24  FB8304     ZE W4, W6
015F26  200007     MOV #0x0, W7
015F28  81F504     MOV Amplitude1Tmp, W4
015F2A  81F515     MOV 0x3EA2, W5
015F2C  B83884     MUL.UU W7, W4, W0
015F2E  B82986     MUL.UU W5, W6, W2
015F30  780082     MOV W2, W1
015F32  400001     ADD W0, W1, W0
015F34  780306     MOV W6, W6
015F36  780204     MOV W4, W4
015F38  B83204     MUL.UU W6, W4, W4
015F3A  400005     ADD W0, W5, W0
015F3C  780280     MOV W0, W5
015F3E  DD2B48     SL W5, #8, W6
015F40  DE2248     LSR W4, #8, W4
015F42  730204     IOR W6, W4, W4
015F44  DE2AC8     LSR W5, #8, W5
015F46  780204     MOV W4, W4
015F48  888834     MOV W4, SV_PWM1_2
21416:                       break ;
015F4A  3707EB     BRA 0x16F22
21417:                    case 3 :
21418:                        PWM1_A_H=0;
015F4C  A92E44     BCLR LATE, #1
21419:                        PWM1_A_L=1;
015F4E  A80E44     BSET LATE, #0
21420:                         PWM1_B_H=0;
015F50  A96E44     BCLR LATE, #3
21421:                         PWM1_B_L=0;
015F52  A94E44     BCLR LATE, #2
21422:                         PWM1_C_H=0;
015F54  A9AE44     BCLR LATE, #5
21423:                         PWM1_C_L=0;
015F56  A98E44     BCLR LATE, #4
21424:             
21425:             
21426:                         PEN1_A_H=0;
015F58  A9EC23     BCLR 0xC23, #7
21427:                         PEN1_A_L=0;
015F5A  A9CC23     BCLR 0xC23, #6
21428:                         PEN1_B_H=0;//1;
015F5C  A9EC43     BCLR 0xC43, #7
21429:                         PEN1_B_L=0;
015F5E  A9CC43     BCLR 0xC43, #6
21430:                         PEN1_C_H=1;
015F60  A8EC63     BSET 0xC63, #7
21431:                         if (StrongMode)
015F62  8095F5     MOV 0x12BE, W5
015F64  240004     MOV #0x4000, W4
015F66  628204     AND W5, W4, W4
015F68  520FE0     SUB W4, #0x0, [W15]
015F6A  320002     BRA Z, 0x15F70
21432:                         PEN1_C_L=1;
015F6C  A8CC63     BSET 0xC63, #6
015F6E  370001     BRA 0x15F72
21433:                         else
21434:                         PEN1_C_L=0;
015F70  A9CC63     BCLR 0xC63, #6
21435:             
21436:             
21437:                         SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-65])>>8) ;
015F72  808794     MOV Theta1CntPWM, W4
015F74  2013F5     MOV #0x13F, W5
015F76  528204     SUB W5, W4, W4
015F78  240D65     MOV #0x40D6, W5
015F7A  428204     ADD W5, W4, W4
015F7C  784214     MOV.B [W4], W4
015F7E  FB8304     ZE W4, W6
015F80  200007     MOV #0x0, W7
015F82  81F504     MOV Amplitude1Tmp, W4
015F84  81F515     MOV 0x3EA2, W5
015F86  B83884     MUL.UU W7, W4, W0
015F88  B82986     MUL.UU W5, W6, W2
015F8A  780082     MOV W2, W1
015F8C  400001     ADD W0, W1, W0
015F8E  780306     MOV W6, W6
015F90  780204     MOV W4, W4
015F92  B83204     MUL.UU W6, W4, W4
015F94  400005     ADD W0, W5, W0
015F96  780280     MOV W0, W5
015F98  DD2B48     SL W5, #8, W6
015F9A  DE2248     LSR W4, #8, W4
015F9C  730204     IOR W6, W4, W4
015F9E  DE2AC8     LSR W5, #8, W5
015FA0  780204     MOV W4, W4
015FA2  888814     MOV W4, SV_PWM1_0
21438:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-321])>>8) ;
015FA4  808794     MOV Theta1CntPWM, W4
015FA6  2003F5     MOV #0x3F, W5
015FA8  528204     SUB W5, W4, W4
015FAA  240D65     MOV #0x40D6, W5
015FAC  428204     ADD W5, W4, W4
015FAE  784214     MOV.B [W4], W4
015FB0  FB8304     ZE W4, W6
015FB2  200007     MOV #0x0, W7
015FB4  81F504     MOV Amplitude1Tmp, W4
015FB6  81F515     MOV 0x3EA2, W5
015FB8  B83884     MUL.UU W7, W4, W0
015FBA  B82986     MUL.UU W5, W6, W2
015FBC  780082     MOV W2, W1
015FBE  400001     ADD W0, W1, W0
015FC0  780306     MOV W6, W6
015FC2  780204     MOV W4, W4
015FC4  B83204     MUL.UU W6, W4, W4
015FC6  400005     ADD W0, W5, W0
015FC8  780280     MOV W0, W5
015FCA  DD2B48     SL W5, #8, W6
015FCC  DE2248     LSR W4, #8, W4
015FCE  730204     IOR W6, W4, W4
015FD0  DE2AC8     LSR W5, #8, W5
015FD2  780204     MOV W4, W4
015FD4  888824     MOV W4, SV_PWM1_1
21439:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-193])>>8) ;
015FD6  808794     MOV Theta1CntPWM, W4
015FD8  200BF5     MOV #0xBF, W5
015FDA  528204     SUB W5, W4, W4
015FDC  240D65     MOV #0x40D6, W5
015FDE  428204     ADD W5, W4, W4
015FE0  784214     MOV.B [W4], W4
015FE2  FB8304     ZE W4, W6
015FE4  200007     MOV #0x0, W7
015FE6  81F504     MOV Amplitude1Tmp, W4
015FE8  81F515     MOV 0x3EA2, W5
015FEA  B83884     MUL.UU W7, W4, W0
015FEC  B82986     MUL.UU W5, W6, W2
015FEE  780082     MOV W2, W1
015FF0  400001     ADD W0, W1, W0
015FF2  780306     MOV W6, W6
015FF4  780204     MOV W4, W4
015FF6  B83204     MUL.UU W6, W4, W4
015FF8  400005     ADD W0, W5, W0
015FFA  780280     MOV W0, W5
015FFC  DD2B48     SL W5, #8, W6
015FFE  DE2248     LSR W4, #8, W4
016000  730204     IOR W6, W4, W4
016002  DE2AC8     LSR W5, #8, W5
016004  780204     MOV W4, W4
016006  888834     MOV W4, SV_PWM1_2
21440:                       break ;
016008  37078C     BRA 0x16F22
21441:                    case 2 :
21442:                         PWM1_A_H=0;
01600A  A92E44     BCLR LATE, #1
21443:                         PWM1_A_L=0;
01600C  A90E44     BCLR LATE, #0
21444:                         PWM1_B_H=0;
01600E  A96E44     BCLR LATE, #3
21445:                         PWM1_B_L=1;
016010  A84E44     BSET LATE, #2
21446:                         PWM1_C_H=0;
016012  A9AE44     BCLR LATE, #5
21447:                         PWM1_C_L=0;
016014  A98E44     BCLR LATE, #4
21448:             
21449:             
21450:                         PEN1_A_H=0;//1;
016016  A9EC23     BCLR 0xC23, #7
21451:                         PEN1_A_L=0;
016018  A9CC23     BCLR 0xC23, #6
21452:                         PEN1_B_H=0;
01601A  A9EC43     BCLR 0xC43, #7
21453:                         PEN1_B_L=0;
01601C  A9CC43     BCLR 0xC43, #6
21454:                         PEN1_C_H=1;
01601E  A8EC63     BSET 0xC63, #7
21455:                         if (StrongMode)
016020  8095F5     MOV 0x12BE, W5
016022  240004     MOV #0x4000, W4
016024  628204     AND W5, W4, W4
016026  520FE0     SUB W4, #0x0, [W15]
016028  320002     BRA Z, 0x1602E
21456:                         PEN1_C_L=1;
01602A  A8CC63     BSET 0xC63, #6
01602C  370001     BRA 0x16030
21457:                         else
21458:                         PEN1_C_L=0;
01602E  A9CC63     BCLR 0xC63, #6
21459:             
21460:              
21461:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-129])>>8) ;
016030  808794     MOV Theta1CntPWM, W4
016032  200FF5     MOV #0xFF, W5
016034  528204     SUB W5, W4, W4
016036  240D65     MOV #0x40D6, W5
016038  428204     ADD W5, W4, W4
01603A  784214     MOV.B [W4], W4
01603C  FB8304     ZE W4, W6
01603E  200007     MOV #0x0, W7
016040  81F504     MOV Amplitude1Tmp, W4
016042  81F515     MOV 0x3EA2, W5
016044  B83884     MUL.UU W7, W4, W0
016046  B82986     MUL.UU W5, W6, W2
016048  780082     MOV W2, W1
01604A  400001     ADD W0, W1, W0
01604C  780306     MOV W6, W6
01604E  780204     MOV W4, W4
016050  B83204     MUL.UU W6, W4, W4
016052  400005     ADD W0, W5, W0
016054  780280     MOV W0, W5
016056  DD2B48     SL W5, #8, W6
016058  DE2248     LSR W4, #8, W4
01605A  730204     IOR W6, W4, W4
01605C  DE2AC8     LSR W5, #8, W5
01605E  780204     MOV W4, W4
016060  888814     MOV W4, SV_PWM1_0
21462:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-1])>>8) ;
016062  808794     MOV Theta1CntPWM, W4
016064  2017F5     MOV #0x17F, W5
016066  528204     SUB W5, W4, W4
016068  240D65     MOV #0x40D6, W5
01606A  428204     ADD W5, W4, W4
01606C  784214     MOV.B [W4], W4
01606E  FB8304     ZE W4, W6
016070  200007     MOV #0x0, W7
016072  81F504     MOV Amplitude1Tmp, W4
016074  81F515     MOV 0x3EA2, W5
016076  B83884     MUL.UU W7, W4, W0
016078  B82986     MUL.UU W5, W6, W2
01607A  780082     MOV W2, W1
01607C  400001     ADD W0, W1, W0
01607E  780306     MOV W6, W6
016080  780204     MOV W4, W4
016082  B83204     MUL.UU W6, W4, W4
016084  400005     ADD W0, W5, W0
016086  780280     MOV W0, W5
016088  DD2B48     SL W5, #8, W6
01608A  DE2248     LSR W4, #8, W4
01608C  730204     IOR W6, W4, W4
01608E  DE2AC8     LSR W5, #8, W5
016090  780204     MOV W4, W4
016092  888824     MOV W4, SV_PWM1_1
21463:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-257])>>8) ;
016094  808794     MOV Theta1CntPWM, W4
016096  2007F5     MOV #0x7F, W5
016098  528204     SUB W5, W4, W4
01609A  240D65     MOV #0x40D6, W5
01609C  428204     ADD W5, W4, W4
01609E  784214     MOV.B [W4], W4
0160A0  FB8304     ZE W4, W6
0160A2  200007     MOV #0x0, W7
0160A4  81F504     MOV Amplitude1Tmp, W4
0160A6  81F515     MOV 0x3EA2, W5
0160A8  B83884     MUL.UU W7, W4, W0
0160AA  B82986     MUL.UU W5, W6, W2
0160AC  780082     MOV W2, W1
0160AE  400001     ADD W0, W1, W0
0160B0  780306     MOV W6, W6
0160B2  780204     MOV W4, W4
0160B4  B83204     MUL.UU W6, W4, W4
0160B6  400005     ADD W0, W5, W0
0160B8  780280     MOV W0, W5
0160BA  DD2B48     SL W5, #8, W6
0160BC  DE2248     LSR W4, #8, W4
0160BE  730204     IOR W6, W4, W4
0160C0  DE2AC8     LSR W5, #8, W5
0160C2  780204     MOV W4, W4
0160C4  888834     MOV W4, SV_PWM1_2
21464:                       break ;
0160C6  37072D     BRA 0x16F22
21465:                    case 6 :
21466:                         PWM1_A_H=0;
0160C8  A92E44     BCLR LATE, #1
21467:                         PWM1_A_L=0;
0160CA  A90E44     BCLR LATE, #0
21468:                         PWM1_B_H=0;
0160CC  A96E44     BCLR LATE, #3
21469:                         PWM1_B_L=1;
0160CE  A84E44     BSET LATE, #2
21470:                         PWM1_C_H=0;
0160D0  A9AE44     BCLR LATE, #5
21471:                         PWM1_C_L=0;
0160D2  A98E44     BCLR LATE, #4
21472:             
21473:             
21474:                         PEN1_A_H=1;
0160D4  A8EC23     BSET 0xC23, #7
21475:                         if (StrongMode)
0160D6  8095F5     MOV 0x12BE, W5
0160D8  240004     MOV #0x4000, W4
0160DA  628204     AND W5, W4, W4
0160DC  520FE0     SUB W4, #0x0, [W15]
0160DE  320002     BRA Z, 0x160E4
21476:                         PEN1_A_L=1;
0160E0  A8CC23     BSET 0xC23, #6
0160E2  370001     BRA 0x160E6
21477:                         else
21478:                         PEN1_A_L=0;
0160E4  A9CC23     BCLR 0xC23, #6
21479:                         PEN1_B_H=0;
0160E6  A9EC43     BCLR 0xC43, #7
21480:                         PEN1_B_L=0;
0160E8  A9CC43     BCLR 0xC43, #6
21481:                         PEN1_C_H=0;//1;
0160EA  A9EC63     BCLR 0xC63, #7
21482:                         PEN1_C_L=0;
0160EC  A9CC63     BCLR 0xC63, #6
21483:              
21484:             
21485:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-193])>>8) ;
0160EE  808794     MOV Theta1CntPWM, W4
0160F0  200BF5     MOV #0xBF, W5
0160F2  528204     SUB W5, W4, W4
0160F4  240D65     MOV #0x40D6, W5
0160F6  428204     ADD W5, W4, W4
0160F8  784214     MOV.B [W4], W4
0160FA  FB8304     ZE W4, W6
0160FC  200007     MOV #0x0, W7
0160FE  81F504     MOV Amplitude1Tmp, W4
016100  81F515     MOV 0x3EA2, W5
016102  B83884     MUL.UU W7, W4, W0
016104  B82986     MUL.UU W5, W6, W2
016106  780082     MOV W2, W1
016108  400001     ADD W0, W1, W0
01610A  780306     MOV W6, W6
01610C  780204     MOV W4, W4
01610E  B83204     MUL.UU W6, W4, W4
016110  400005     ADD W0, W5, W0
016112  780280     MOV W0, W5
016114  DD2B48     SL W5, #8, W6
016116  DE2248     LSR W4, #8, W4
016118  730204     IOR W6, W4, W4
01611A  DE2AC8     LSR W5, #8, W5
01611C  780204     MOV W4, W4
01611E  888814     MOV W4, SV_PWM1_0
21486:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-65])>>8) ;
016120  808794     MOV Theta1CntPWM, W4
016122  2013F5     MOV #0x13F, W5
016124  528204     SUB W5, W4, W4
016126  240D65     MOV #0x40D6, W5
016128  428204     ADD W5, W4, W4
01612A  784214     MOV.B [W4], W4
01612C  FB8304     ZE W4, W6
01612E  200007     MOV #0x0, W7
016130  81F504     MOV Amplitude1Tmp, W4
016132  81F515     MOV 0x3EA2, W5
016134  B83884     MUL.UU W7, W4, W0
016136  B82986     MUL.UU W5, W6, W2
016138  780082     MOV W2, W1
01613A  400001     ADD W0, W1, W0
01613C  780306     MOV W6, W6
01613E  780204     MOV W4, W4
016140  B83204     MUL.UU W6, W4, W4
016142  400005     ADD W0, W5, W0
016144  780280     MOV W0, W5
016146  DD2B48     SL W5, #8, W6
016148  DE2248     LSR W4, #8, W4
01614A  730204     IOR W6, W4, W4
01614C  DE2AC8     LSR W5, #8, W5
01614E  780204     MOV W4, W4
016150  888824     MOV W4, SV_PWM1_1
21487:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-321])>>8) ;
016152  808794     MOV Theta1CntPWM, W4
016154  2003F5     MOV #0x3F, W5
016156  528204     SUB W5, W4, W4
016158  240D65     MOV #0x40D6, W5
01615A  428204     ADD W5, W4, W4
01615C  784214     MOV.B [W4], W4
01615E  FB8304     ZE W4, W6
016160  200007     MOV #0x0, W7
016162  81F504     MOV Amplitude1Tmp, W4
016164  81F515     MOV 0x3EA2, W5
016166  B83884     MUL.UU W7, W4, W0
016168  B82986     MUL.UU W5, W6, W2
01616A  780082     MOV W2, W1
01616C  400001     ADD W0, W1, W0
01616E  780306     MOV W6, W6
016170  780204     MOV W4, W4
016172  B83204     MUL.UU W6, W4, W4
016174  400005     ADD W0, W5, W0
016176  780280     MOV W0, W5
016178  DD2B48     SL W5, #8, W6
01617A  DE2248     LSR W4, #8, W4
01617C  730204     IOR W6, W4, W4
01617E  DE2AC8     LSR W5, #8, W5
016180  780204     MOV W4, W4
016182  888834     MOV W4, SV_PWM1_2
21488:                       break ;
016184  3706CE     BRA 0x16F22
21489:                    case 4 :
21490:                         PWM1_A_H=0;
016186  A92E44     BCLR LATE, #1
21491:                         PWM1_A_L=0;
016188  A90E44     BCLR LATE, #0
21492:                         PWM1_B_H=0;
01618A  A96E44     BCLR LATE, #3
21493:                         PWM1_B_L=0;
01618C  A94E44     BCLR LATE, #2
21494:                         PWM1_C_H=0;
01618E  A9AE44     BCLR LATE, #5
21495:                         PWM1_C_L=1;
016190  A88E44     BSET LATE, #4
21496:             
21497:             
21498:                         if (StrongMode)
016192  8095F5     MOV 0x12BE, W5
016194  240004     MOV #0x4000, W4
016196  628204     AND W5, W4, W4
016198  520FE0     SUB W4, #0x0, [W15]
01619A  320002     BRA Z, 0x161A0
21499:                         PEN1_A_L=1;
01619C  A8CC23     BSET 0xC23, #6
01619E  370001     BRA 0x161A2
21500:                         else
21501:                         PEN1_A_L=0;
0161A0  A9CC23     BCLR 0xC23, #6
21502:                         PEN1_A_H=1;
0161A2  A8EC23     BSET 0xC23, #7
21503:                         PEN1_B_H=0;//1;
0161A4  A9EC43     BCLR 0xC43, #7
21504:                         PEN1_B_L=0;
0161A6  A9CC43     BCLR 0xC43, #6
21505:                         PEN1_C_H=0;
0161A8  A9EC63     BCLR 0xC63, #7
21506:                         PEN1_C_L=0;
0161AA  A9CC63     BCLR 0xC63, #6
21507:                
21508:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-257])>>8) ;
0161AC  808794     MOV Theta1CntPWM, W4
0161AE  2007F5     MOV #0x7F, W5
0161B0  528204     SUB W5, W4, W4
0161B2  240D65     MOV #0x40D6, W5
0161B4  428204     ADD W5, W4, W4
0161B6  784214     MOV.B [W4], W4
0161B8  FB8304     ZE W4, W6
0161BA  200007     MOV #0x0, W7
0161BC  81F504     MOV Amplitude1Tmp, W4
0161BE  81F515     MOV 0x3EA2, W5
0161C0  B83884     MUL.UU W7, W4, W0
0161C2  B82986     MUL.UU W5, W6, W2
0161C4  780082     MOV W2, W1
0161C6  400001     ADD W0, W1, W0
0161C8  780306     MOV W6, W6
0161CA  780204     MOV W4, W4
0161CC  B83204     MUL.UU W6, W4, W4
0161CE  400005     ADD W0, W5, W0
0161D0  780280     MOV W0, W5
0161D2  DD2B48     SL W5, #8, W6
0161D4  DE2248     LSR W4, #8, W4
0161D6  730204     IOR W6, W4, W4
0161D8  DE2AC8     LSR W5, #8, W5
0161DA  780204     MOV W4, W4
0161DC  888814     MOV W4, SV_PWM1_0
21509:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-129])>>8) ;
0161DE  808794     MOV Theta1CntPWM, W4
0161E0  200FF5     MOV #0xFF, W5
0161E2  528204     SUB W5, W4, W4
0161E4  240D65     MOV #0x40D6, W5
0161E6  428204     ADD W5, W4, W4
0161E8  784214     MOV.B [W4], W4
0161EA  FB8304     ZE W4, W6
0161EC  200007     MOV #0x0, W7
0161EE  81F504     MOV Amplitude1Tmp, W4
0161F0  81F515     MOV 0x3EA2, W5
0161F2  B83884     MUL.UU W7, W4, W0
0161F4  B82986     MUL.UU W5, W6, W2
0161F6  780082     MOV W2, W1
0161F8  400001     ADD W0, W1, W0
0161FA  780306     MOV W6, W6
0161FC  780204     MOV W4, W4
0161FE  B83204     MUL.UU W6, W4, W4
016200  400005     ADD W0, W5, W0
016202  780280     MOV W0, W5
016204  DD2B48     SL W5, #8, W6
016206  DE2248     LSR W4, #8, W4
016208  730204     IOR W6, W4, W4
01620A  DE2AC8     LSR W5, #8, W5
01620C  780204     MOV W4, W4
01620E  888824     MOV W4, SV_PWM1_1
21510:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-1])>>8) ;
016210  808794     MOV Theta1CntPWM, W4
016212  2017F5     MOV #0x17F, W5
016214  528204     SUB W5, W4, W4
016216  240D65     MOV #0x40D6, W5
016218  428204     ADD W5, W4, W4
01621A  784214     MOV.B [W4], W4
01621C  FB8304     ZE W4, W6
01621E  200007     MOV #0x0, W7
016220  81F504     MOV Amplitude1Tmp, W4
016222  81F515     MOV 0x3EA2, W5
016224  B83884     MUL.UU W7, W4, W0
016226  B82986     MUL.UU W5, W6, W2
016228  780082     MOV W2, W1
01622A  400001     ADD W0, W1, W0
01622C  780306     MOV W6, W6
01622E  780204     MOV W4, W4
016230  B83204     MUL.UU W6, W4, W4
016232  400005     ADD W0, W5, W0
016234  780280     MOV W0, W5
016236  DD2B48     SL W5, #8, W6
016238  DE2248     LSR W4, #8, W4
01623A  730204     IOR W6, W4, W4
01623C  DE2AC8     LSR W5, #8, W5
01623E  780204     MOV W4, W4
016240  888834     MOV W4, SV_PWM1_2
21511:                       break ;
016242  000000     NOP
016244  37066E     BRA 0x16F22
21512:                    case 5 :
21513:                         PWM1_A_H=0;
016246  A92E44     BCLR LATE, #1
21514:                         PWM1_A_L=0;
016248  A90E44     BCLR LATE, #0
21515:                         PWM1_B_H=0;
01624A  A96E44     BCLR LATE, #3
21516:                         PWM1_B_L=0;
01624C  A94E44     BCLR LATE, #2
21517:                         PWM1_C_H=0;
01624E  A9AE44     BCLR LATE, #5
21518:                         PWM1_C_L=1;
016250  A88E44     BSET LATE, #4
21519:             
21520:             
21521:                         PEN1_A_H=0;//1;
016252  A9EC23     BCLR 0xC23, #7
21522:                         PEN1_A_L=0;
016254  A9CC23     BCLR 0xC23, #6
21523:                         PEN1_B_H=1;
016256  A8EC43     BSET 0xC43, #7
21524:                         if (StrongMode)
016258  8095F5     MOV 0x12BE, W5
01625A  240004     MOV #0x4000, W4
01625C  628204     AND W5, W4, W4
01625E  520FE0     SUB W4, #0x0, [W15]
016260  320002     BRA Z, 0x16266
21525:                         PEN1_B_L=1;
016262  A8CC43     BSET 0xC43, #6
016264  370001     BRA 0x16268
21526:                         else
21527:                         PEN1_B_L=0;
016266  A9CC43     BCLR 0xC43, #6
21528:                         PEN1_C_H=0;
016268  A9EC63     BCLR 0xC63, #7
21529:                         PEN1_C_L=0;
01626A  A9CC63     BCLR 0xC63, #6
21530:                
21531:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-321])>>8) ;
01626C  808794     MOV Theta1CntPWM, W4
01626E  2003F5     MOV #0x3F, W5
016270  528204     SUB W5, W4, W4
016272  240D65     MOV #0x40D6, W5
016274  428204     ADD W5, W4, W4
016276  784214     MOV.B [W4], W4
016278  FB8304     ZE W4, W6
01627A  200007     MOV #0x0, W7
01627C  81F504     MOV Amplitude1Tmp, W4
01627E  81F515     MOV 0x3EA2, W5
016280  B83884     MUL.UU W7, W4, W0
016282  B82986     MUL.UU W5, W6, W2
016284  780082     MOV W2, W1
016286  400001     ADD W0, W1, W0
016288  780306     MOV W6, W6
01628A  780204     MOV W4, W4
01628C  B83204     MUL.UU W6, W4, W4
01628E  400005     ADD W0, W5, W0
016290  780280     MOV W0, W5
016292  DD2B48     SL W5, #8, W6
016294  DE2248     LSR W4, #8, W4
016296  730204     IOR W6, W4, W4
016298  DE2AC8     LSR W5, #8, W5
01629A  780204     MOV W4, W4
01629C  888814     MOV W4, SV_PWM1_0
21532:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-193])>>8) ;
01629E  808794     MOV Theta1CntPWM, W4
0162A0  200BF5     MOV #0xBF, W5
0162A2  528204     SUB W5, W4, W4
0162A4  240D65     MOV #0x40D6, W5
0162A6  428204     ADD W5, W4, W4
0162A8  784214     MOV.B [W4], W4
0162AA  FB8304     ZE W4, W6
0162AC  200007     MOV #0x0, W7
0162AE  81F504     MOV Amplitude1Tmp, W4
0162B0  81F515     MOV 0x3EA2, W5
0162B2  B83884     MUL.UU W7, W4, W0
0162B4  B82986     MUL.UU W5, W6, W2
0162B6  780082     MOV W2, W1
0162B8  400001     ADD W0, W1, W0
0162BA  780306     MOV W6, W6
0162BC  780204     MOV W4, W4
0162BE  B83204     MUL.UU W6, W4, W4
0162C0  400005     ADD W0, W5, W0
0162C2  780280     MOV W0, W5
0162C4  DD2B48     SL W5, #8, W6
0162C6  DE2248     LSR W4, #8, W4
0162C8  730204     IOR W6, W4, W4
0162CA  DE2AC8     LSR W5, #8, W5
0162CC  780204     MOV W4, W4
0162CE  888824     MOV W4, SV_PWM1_1
21533:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * (unsigned long int)tab_sinSQ[THETA_NUM-Theta1CntPWM-65])>>8) ;
0162D0  808794     MOV Theta1CntPWM, W4
0162D2  2013F5     MOV #0x13F, W5
0162D4  528204     SUB W5, W4, W4
0162D6  240D65     MOV #0x40D6, W5
0162D8  428204     ADD W5, W4, W4
0162DA  784214     MOV.B [W4], W4
0162DC  FB8304     ZE W4, W6
0162DE  200007     MOV #0x0, W7
0162E0  81F504     MOV Amplitude1Tmp, W4
0162E2  81F515     MOV 0x3EA2, W5
0162E4  B83884     MUL.UU W7, W4, W0
0162E6  B82986     MUL.UU W5, W6, W2
0162E8  780082     MOV W2, W1
0162EA  400001     ADD W0, W1, W0
0162EC  780306     MOV W6, W6
0162EE  780204     MOV W4, W4
0162F0  B83204     MUL.UU W6, W4, W4
0162F2  400005     ADD W0, W5, W0
0162F4  780280     MOV W0, W5
0162F6  DD2B48     SL W5, #8, W6
0162F8  DE2248     LSR W4, #8, W4
0162FA  730204     IOR W6, W4, W4
0162FC  DE2AC8     LSR W5, #8, W5
0162FE  780204     MOV W4, W4
016300  888834     MOV W4, SV_PWM1_2
21534:                       break ;
016302  37060F     BRA 0x16F22
016F20  000000     NOP
21535:             
21536:                   }
21537:                       }
21538:                       else
21539:                       {
21540:             
21541:                   switch (Sensor1_Prev_OP)
016304  210FA4     MOV #0x10FA, W4
016306  784214     MOV.B [W4], W4
016308  FB8204     ZE W4, W4
01630A  B92361     MUL.SU W4, #1, W6
01630C  EB8200     SETM W4
01630E  EB8280     SETM W5
016310  420206     ADD W4, W6, W4
016312  4A8287     ADDC W5, W7, W5
016314  200056     MOV #0x5, W6
016316  200007     MOV #0x0, W7
016318  520F86     SUB W4, W6, [W15]
01631A  5A8F87     SUBB W5, W7, [W15]
01631C  3E0602     BRA GTU, 0x16F22
01631E  010604     BRA W4
016320  370005     BRA 0x1632C
016322  370202     BRA 0x16728
016324  370102     BRA 0x1652A
016326  3703FE     BRA 0x16B24
016328  3704FC     BRA 0x16D22
01632A  3702FD     BRA 0x16926
21542:                    {
21543:                    case 1 :
21544:                        if (!SIN_MIDDLE)
01632C  809765     MOV StatFlgs2, W5
01632E  240004     MOV #0x4000, W4
016330  628204     AND W5, W4, W4
016332  520FE0     SUB W4, #0x0, [W15]
016334  3A001F     BRA NZ, 0x16374
21545:                        {
21546:                        TabRes0=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-1];
016336  808794     MOV Theta1CntPWM, W4
016338  2017F5     MOV #0x17F, W5
01633A  528204     SUB W5, W4, W4
01633C  2A9785     MOV #0xA978, W5
01633E  428204     ADD W5, W4, W4
016340  784214     MOV.B [W4], W4
016342  FB8204     ZE W4, W4
016344  200005     MOV #0x0, W5
016346  89FEC4     MOV W4, TabRes0
016348  89FED5     MOV W5, 0x3FDA
21547:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-257];
01634A  808794     MOV Theta1CntPWM, W4
01634C  2007F5     MOV #0x7F, W5
01634E  528204     SUB W5, W4, W4
016350  2A9785     MOV #0xA978, W5
016352  428204     ADD W5, W4, W4
016354  784214     MOV.B [W4], W4
016356  FB8204     ZE W4, W4
016358  200005     MOV #0x0, W5
01635A  89FEE4     MOV W4, TabRes1
01635C  89FEF5     MOV W5, 0x3FDE
21548:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-129];
01635E  808794     MOV Theta1CntPWM, W4
016360  200FF5     MOV #0xFF, W5
016362  528204     SUB W5, W4, W4
016364  2A9785     MOV #0xA978, W5
016366  428204     ADD W5, W4, W4
016368  784214     MOV.B [W4], W4
01636A  FB8204     ZE W4, W4
01636C  200005     MOV #0x0, W5
01636E  89FF04     MOV W4, TabRes2
016370  89FF15     MOV W5, 0x3FE2
016372  37001E     BRA 0x163B0
21549:                        }
21550:                         else 
21551:                         {
21552:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-1]);
016374  808794     MOV Theta1CntPWM, W4
016376  2017F5     MOV #0x17F, W5
016378  528204     SUB W5, W4, W4
01637A  2AAF85     MOV #0xAAF8, W5
01637C  428204     ADD W5, W4, W4
01637E  784214     MOV.B [W4], W4
016380  FB0204     SE W4, W4
016382  DEA2CF     ASR W4, #15, W5
016384  89FEC4     MOV W4, TabRes0
016386  89FED5     MOV W5, 0x3FDA
21553:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-257]);
016388  808794     MOV Theta1CntPWM, W4
01638A  2007F5     MOV #0x7F, W5
01638C  528204     SUB W5, W4, W4
01638E  2AAF85     MOV #0xAAF8, W5
016390  428204     ADD W5, W4, W4
016392  784214     MOV.B [W4], W4
016394  FB0204     SE W4, W4
016396  DEA2CF     ASR W4, #15, W5
016398  89FEE4     MOV W4, TabRes1
01639A  89FEF5     MOV W5, 0x3FDE
21554:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-129]);
01639C  808794     MOV Theta1CntPWM, W4
01639E  200FF5     MOV #0xFF, W5
0163A0  528204     SUB W5, W4, W4
0163A2  2AAF85     MOV #0xAAF8, W5
0163A4  428204     ADD W5, W4, W4
0163A6  784214     MOV.B [W4], W4
0163A8  FB0204     SE W4, W4
0163AA  DEA2CF     ASR W4, #15, W5
0163AC  89FF04     MOV W4, TabRes2
0163AE  89FF15     MOV W5, 0x3FE2
21555:                         }
21556:             
21557:                        if   (!StrongMode)
0163B0  8095F5     MOV 0x12BE, W5
0163B2  240004     MOV #0x4000, W4
0163B4  628204     AND W5, W4, W4
0163B6  520FE0     SUB W4, #0x0, [W15]
0163B8  3A002A     BRA NZ, 0x1640E
21558:                        {
21559:                        if (TabRes0==0)
0163BA  81FEC4     MOV TabRes0, W4
0163BC  81FED5     MOV 0x3FDA, W5
0163BE  520FE0     SUB W4, #0x0, [W15]
0163C0  5A8FE0     SUBB W5, #0x0, [W15]
0163C2  3A0005     BRA NZ, 0x163CE
21560:                        {
21561:                         PWM1_A_H=0;
0163C4  A92E44     BCLR LATE, #1
21562:                         PWM1_A_L=1;
0163C6  A80E44     BSET LATE, #0
21563:                         PEN1_A_H=0;
0163C8  A9EC23     BCLR 0xC23, #7
21564:                         PEN1_A_L=0;
0163CA  A9CC23     BCLR 0xC23, #6
0163CC  370004     BRA 0x163D6
21565:                        }
21566:                        else
21567:                        {
21568:                         PWM1_A_H=0;
0163CE  A92E44     BCLR LATE, #1
21569:                         PWM1_A_L=0;
0163D0  A90E44     BCLR LATE, #0
21570:                         PEN1_A_H=1;
0163D2  A8EC23     BSET 0xC23, #7
21571:                         PEN1_A_L=0;
0163D4  A9CC23     BCLR 0xC23, #6
21572:                        }
21573:             
21574:                        if (TabRes1==0)
0163D6  81FEE4     MOV TabRes1, W4
0163D8  81FEF5     MOV 0x3FDE, W5
0163DA  520FE0     SUB W4, #0x0, [W15]
0163DC  5A8FE0     SUBB W5, #0x0, [W15]
0163DE  3A0005     BRA NZ, 0x163EA
21575:                        {
21576:                         PWM1_B_H=0;
0163E0  A96E44     BCLR LATE, #3
21577:                         PWM1_B_L=1;
0163E2  A84E44     BSET LATE, #2
21578:                         PEN1_B_H=0;
0163E4  A9EC43     BCLR 0xC43, #7
21579:                         PEN1_B_L=0;
0163E6  A9CC43     BCLR 0xC43, #6
0163E8  370004     BRA 0x163F2
21580:                        }
21581:                        else
21582:                        {
21583:                         PWM1_B_H=0;
0163EA  A96E44     BCLR LATE, #3
21584:                         PWM1_B_L=0;
0163EC  A94E44     BCLR LATE, #2
21585:                         PEN1_B_H=1;
0163EE  A8EC43     BSET 0xC43, #7
21586:                         PEN1_B_L=0;
0163F0  A9CC43     BCLR 0xC43, #6
21587:                        }
21588:             
21589:             
21590:                        if (TabRes2==0)
0163F2  81FF04     MOV TabRes2, W4
0163F4  81FF15     MOV 0x3FE2, W5
0163F6  520FE0     SUB W4, #0x0, [W15]
0163F8  5A8FE0     SUBB W5, #0x0, [W15]
0163FA  3A0005     BRA NZ, 0x16406
21591:                        {
21592:                         PWM1_C_H=0;
0163FC  A9AE44     BCLR LATE, #5
21593:                         PWM1_C_L=1;
0163FE  A88E44     BSET LATE, #4
21594:                         PEN1_C_H=0;
016400  A9EC63     BCLR 0xC63, #7
21595:                         PEN1_C_L=0;
016402  A9CC63     BCLR 0xC63, #6
016404  370004     BRA 0x1640E
21596:                        }
21597:                        else
21598:                        {
21599:                         PWM1_C_H=0;
016406  A9AE44     BCLR LATE, #5
21600:                         PWM1_C_L=0;
016408  A98E44     BCLR LATE, #4
21601:                         PEN1_C_H=1;
01640A  A8EC63     BSET 0xC63, #7
21602:                         PEN1_C_L=0;
01640C  A9CC63     BCLR 0xC63, #6
21603:                        }
21604:             
21605:                 
21606:                        }
21607:             
21608:                        if (!SIN_MIDDLE)
01640E  809765     MOV StatFlgs2, W5
016410  240004     MOV #0x4000, W4
016412  628204     AND W5, W4, W4
016414  520FE0     SUB W4, #0x0, [W15]
016416  3A003A     BRA NZ, 0x1648C
21609:                        {
21610:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
016418  81F506     MOV Amplitude1Tmp, W6
01641A  81F517     MOV 0x3EA2, W7
01641C  81FEC4     MOV TabRes0, W4
01641E  81FED5     MOV 0x3FDA, W5
016420  B83884     MUL.UU W7, W4, W0
016422  B82986     MUL.UU W5, W6, W2
016424  780082     MOV W2, W1
016426  400001     ADD W0, W1, W0
016428  780306     MOV W6, W6
01642A  780204     MOV W4, W4
01642C  B83204     MUL.UU W6, W4, W4
01642E  400005     ADD W0, W5, W0
016430  780280     MOV W0, W5
016432  DD2B48     SL W5, #8, W6
016434  DE2248     LSR W4, #8, W4
016436  730204     IOR W6, W4, W4
016438  DE2AC8     LSR W5, #8, W5
01643A  780204     MOV W4, W4
01643C  888814     MOV W4, SV_PWM1_0
21611:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
01643E  81F506     MOV Amplitude1Tmp, W6
016440  81F517     MOV 0x3EA2, W7
016442  81FEE4     MOV TabRes1, W4
016444  81FEF5     MOV 0x3FDE, W5
016446  B83884     MUL.UU W7, W4, W0
016448  B82986     MUL.UU W5, W6, W2
01644A  780082     MOV W2, W1
01644C  400001     ADD W0, W1, W0
01644E  780306     MOV W6, W6
016450  780204     MOV W4, W4
016452  B83204     MUL.UU W6, W4, W4
016454  400005     ADD W0, W5, W0
016456  780280     MOV W0, W5
016458  DD2B48     SL W5, #8, W6
01645A  DE2248     LSR W4, #8, W4
01645C  730204     IOR W6, W4, W4
01645E  DE2AC8     LSR W5, #8, W5
016460  780204     MOV W4, W4
016462  888824     MOV W4, SV_PWM1_1
21612:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
016464  81F506     MOV Amplitude1Tmp, W6
016466  81F517     MOV 0x3EA2, W7
016468  81FF04     MOV TabRes2, W4
01646A  81FF15     MOV 0x3FE2, W5
01646C  B83884     MUL.UU W7, W4, W0
01646E  B82986     MUL.UU W5, W6, W2
016470  780082     MOV W2, W1
016472  400001     ADD W0, W1, W0
016474  780306     MOV W6, W6
016476  780204     MOV W4, W4
016478  B83204     MUL.UU W6, W4, W4
01647A  400005     ADD W0, W5, W0
01647C  780280     MOV W0, W5
01647E  DD2B48     SL W5, #8, W6
016480  DE2248     LSR W4, #8, W4
016482  730204     IOR W6, W4, W4
016484  DE2AC8     LSR W5, #8, W5
016486  780204     MOV W4, W4
016488  888834     MOV W4, SV_PWM1_2
21613:                        }
21614:                     else
21615:                     {
21616:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
01648C  81F504     MOV Amplitude1Tmp, W4
01648E  81F515     MOV 0x3EA2, W5
016490  BE0304     MOV.D W4, W6
016492  81FEC4     MOV TabRes0, W4
016494  81FED5     MOV 0x3FDA, W5
016496  B83884     MUL.UU W7, W4, W0
016498  B82986     MUL.UU W5, W6, W2
01649A  780082     MOV W2, W1
01649C  400001     ADD W0, W1, W0
01649E  780306     MOV W6, W6
0164A0  780204     MOV W4, W4
0164A2  B83204     MUL.UU W6, W4, W4
0164A4  400005     ADD W0, W5, W0
0164A6  780280     MOV W0, W5
0164A8  DD2B48     SL W5, #8, W6
0164AA  DE2248     LSR W4, #8, W4
0164AC  730204     IOR W6, W4, W4
0164AE  DEAAC8     ASR W5, #8, W5
0164B0  780284     MOV W4, W5
0164B2  8092D6     MOV MAX_PWM_CONST, W6
0164B4  200024     MOV #0x2, W4
0164B6  090011     REPEAT #0x11
0164B8  D80304     DIV.SW W6, W4
0164BA  780200     MOV W0, W4
0164BC  428204     ADD W5, W4, W4
0164BE  888814     MOV W4, SV_PWM1_0
21617:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
0164C0  81F504     MOV Amplitude1Tmp, W4
0164C2  81F515     MOV 0x3EA2, W5
0164C4  BE0304     MOV.D W4, W6
0164C6  81FEE4     MOV TabRes1, W4
0164C8  81FEF5     MOV 0x3FDE, W5
0164CA  B83884     MUL.UU W7, W4, W0
0164CC  B82986     MUL.UU W5, W6, W2
0164CE  780082     MOV W2, W1
0164D0  400001     ADD W0, W1, W0
0164D2  780306     MOV W6, W6
0164D4  780204     MOV W4, W4
0164D6  B83204     MUL.UU W6, W4, W4
0164D8  400005     ADD W0, W5, W0
0164DA  780280     MOV W0, W5
0164DC  DD2B48     SL W5, #8, W6
0164DE  DE2248     LSR W4, #8, W4
0164E0  730204     IOR W6, W4, W4
0164E2  DEAAC8     ASR W5, #8, W5
0164E4  780284     MOV W4, W5
0164E6  8092D6     MOV MAX_PWM_CONST, W6
0164E8  200024     MOV #0x2, W4
0164EA  090011     REPEAT #0x11
0164EC  D80304     DIV.SW W6, W4
0164EE  780200     MOV W0, W4
0164F0  428204     ADD W5, W4, W4
0164F2  888824     MOV W4, SV_PWM1_1
21618:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
0164F4  81F504     MOV Amplitude1Tmp, W4
0164F6  81F515     MOV 0x3EA2, W5
0164F8  BE0304     MOV.D W4, W6
0164FA  81FF04     MOV TabRes2, W4
0164FC  81FF15     MOV 0x3FE2, W5
0164FE  B83884     MUL.UU W7, W4, W0
016500  B82986     MUL.UU W5, W6, W2
016502  780082     MOV W2, W1
016504  400001     ADD W0, W1, W0
016506  780306     MOV W6, W6
016508  780204     MOV W4, W4
01650A  B83204     MUL.UU W6, W4, W4
01650C  400005     ADD W0, W5, W0
01650E  780280     MOV W0, W5
016510  DD2B48     SL W5, #8, W6
016512  DE2248     LSR W4, #8, W4
016514  730204     IOR W6, W4, W4
016516  DEAAC8     ASR W5, #8, W5
016518  780284     MOV W4, W5
01651A  8092D6     MOV MAX_PWM_CONST, W6
01651C  200024     MOV #0x2, W4
01651E  090011     REPEAT #0x11
016520  D80304     DIV.SW W6, W4
016522  780200     MOV W0, W4
016524  428204     ADD W5, W4, W4
016526  888834     MOV W4, SV_PWM1_2
21619:                     }
21620:             
21621:                       
21622:                       break ;
01648A  37054B     BRA 0x16F22
016528  3704FC     BRA 0x16F22
21623:                    case 3 :
21624:                        if (!SIN_MIDDLE)
01652A  809765     MOV StatFlgs2, W5
01652C  240004     MOV #0x4000, W4
01652E  628204     AND W5, W4, W4
016530  520FE0     SUB W4, #0x0, [W15]
016532  3A001F     BRA NZ, 0x16572
21625:                        {
21626:                        TabRes0=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-65];
016534  808794     MOV Theta1CntPWM, W4
016536  2013F5     MOV #0x13F, W5
016538  528204     SUB W5, W4, W4
01653A  2A9785     MOV #0xA978, W5
01653C  428204     ADD W5, W4, W4
01653E  784214     MOV.B [W4], W4
016540  FB8204     ZE W4, W4
016542  200005     MOV #0x0, W5
016544  89FEC4     MOV W4, TabRes0
016546  89FED5     MOV W5, 0x3FDA
21627:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-321];
016548  808794     MOV Theta1CntPWM, W4
01654A  2003F5     MOV #0x3F, W5
01654C  528204     SUB W5, W4, W4
01654E  2A9785     MOV #0xA978, W5
016550  428204     ADD W5, W4, W4
016552  784214     MOV.B [W4], W4
016554  FB8204     ZE W4, W4
016556  200005     MOV #0x0, W5
016558  89FEE4     MOV W4, TabRes1
01655A  89FEF5     MOV W5, 0x3FDE
21628:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-193];
01655C  808794     MOV Theta1CntPWM, W4
01655E  200BF5     MOV #0xBF, W5
016560  528204     SUB W5, W4, W4
016562  2A9785     MOV #0xA978, W5
016564  428204     ADD W5, W4, W4
016566  784214     MOV.B [W4], W4
016568  FB8204     ZE W4, W4
01656A  200005     MOV #0x0, W5
01656C  89FF04     MOV W4, TabRes2
01656E  89FF15     MOV W5, 0x3FE2
016570  37001E     BRA 0x165AE
21629:                        }
21630:                     else
21631:                     {
21632:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-65]);
016572  808794     MOV Theta1CntPWM, W4
016574  2013F5     MOV #0x13F, W5
016576  528204     SUB W5, W4, W4
016578  2AAF85     MOV #0xAAF8, W5
01657A  428204     ADD W5, W4, W4
01657C  784214     MOV.B [W4], W4
01657E  FB0204     SE W4, W4
016580  DEA2CF     ASR W4, #15, W5
016582  89FEC4     MOV W4, TabRes0
016584  89FED5     MOV W5, 0x3FDA
21633:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-321]);
016586  808794     MOV Theta1CntPWM, W4
016588  2003F5     MOV #0x3F, W5
01658A  528204     SUB W5, W4, W4
01658C  2AAF85     MOV #0xAAF8, W5
01658E  428204     ADD W5, W4, W4
016590  784214     MOV.B [W4], W4
016592  FB0204     SE W4, W4
016594  DEA2CF     ASR W4, #15, W5
016596  89FEE4     MOV W4, TabRes1
016598  89FEF5     MOV W5, 0x3FDE
21634:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-193]);
01659A  808794     MOV Theta1CntPWM, W4
01659C  200BF5     MOV #0xBF, W5
01659E  528204     SUB W5, W4, W4
0165A0  2AAF85     MOV #0xAAF8, W5
0165A2  428204     ADD W5, W4, W4
0165A4  784214     MOV.B [W4], W4
0165A6  FB0204     SE W4, W4
0165A8  DEA2CF     ASR W4, #15, W5
0165AA  89FF04     MOV W4, TabRes2
0165AC  89FF15     MOV W5, 0x3FE2
21635:                     }
21636:             
21637:                        if   (!StrongMode)
0165AE  8095F5     MOV 0x12BE, W5
0165B0  240004     MOV #0x4000, W4
0165B2  628204     AND W5, W4, W4
0165B4  520FE0     SUB W4, #0x0, [W15]
0165B6  3A002A     BRA NZ, 0x1660C
21638:                        {
21639:             
21640:                        if (TabRes0==0)
0165B8  81FEC4     MOV TabRes0, W4
0165BA  81FED5     MOV 0x3FDA, W5
0165BC  520FE0     SUB W4, #0x0, [W15]
0165BE  5A8FE0     SUBB W5, #0x0, [W15]
0165C0  3A0005     BRA NZ, 0x165CC
21641:                        {
21642:                         PWM1_A_H=0;
0165C2  A92E44     BCLR LATE, #1
21643:                         PWM1_A_L=1;
0165C4  A80E44     BSET LATE, #0
21644:                         PEN1_A_H=0;
0165C6  A9EC23     BCLR 0xC23, #7
21645:                         PEN1_A_L=0;
0165C8  A9CC23     BCLR 0xC23, #6
0165CA  370004     BRA 0x165D4
21646:                        }
21647:                        else
21648:                        {
21649:                         PWM1_A_H=0;
0165CC  A92E44     BCLR LATE, #1
21650:                         PWM1_A_L=0;
0165CE  A90E44     BCLR LATE, #0
21651:                         PEN1_A_H=1;
0165D0  A8EC23     BSET 0xC23, #7
21652:                         PEN1_A_L=0;
0165D2  A9CC23     BCLR 0xC23, #6
21653:                        }
21654:             
21655:                        if (TabRes1==0)
0165D4  81FEE4     MOV TabRes1, W4
0165D6  81FEF5     MOV 0x3FDE, W5
0165D8  520FE0     SUB W4, #0x0, [W15]
0165DA  5A8FE0     SUBB W5, #0x0, [W15]
0165DC  3A0005     BRA NZ, 0x165E8
21656:                        {
21657:                         PWM1_B_H=0;
0165DE  A96E44     BCLR LATE, #3
21658:                         PWM1_B_L=1;
0165E0  A84E44     BSET LATE, #2
21659:                         PEN1_B_H=0;
0165E2  A9EC43     BCLR 0xC43, #7
21660:                         PEN1_B_L=0;
0165E4  A9CC43     BCLR 0xC43, #6
0165E6  370004     BRA 0x165F0
21661:                        }
21662:                        else
21663:                        {
21664:                         PWM1_B_H=0;
0165E8  A96E44     BCLR LATE, #3
21665:                         PWM1_B_L=0;
0165EA  A94E44     BCLR LATE, #2
21666:                         PEN1_B_H=1;
0165EC  A8EC43     BSET 0xC43, #7
21667:                         PEN1_B_L=0;
0165EE  A9CC43     BCLR 0xC43, #6
21668:                        }
21669:             
21670:             
21671:                        if (TabRes2==0)
0165F0  81FF04     MOV TabRes2, W4
0165F2  81FF15     MOV 0x3FE2, W5
0165F4  520FE0     SUB W4, #0x0, [W15]
0165F6  5A8FE0     SUBB W5, #0x0, [W15]
0165F8  3A0005     BRA NZ, 0x16604
21672:                        {
21673:                         PWM1_C_H=0;
0165FA  A9AE44     BCLR LATE, #5
21674:                         PWM1_C_L=1;
0165FC  A88E44     BSET LATE, #4
21675:                         PEN1_C_H=0;
0165FE  A9EC63     BCLR 0xC63, #7
21676:                         PEN1_C_L=0;
016600  A9CC63     BCLR 0xC63, #6
016602  370004     BRA 0x1660C
21677:                        }
21678:                        else
21679:                        {
21680:                         PWM1_C_H=0;
016604  A9AE44     BCLR LATE, #5
21681:                         PWM1_C_L=0;
016606  A98E44     BCLR LATE, #4
21682:                         PEN1_C_H=1;
016608  A8EC63     BSET 0xC63, #7
21683:                         PEN1_C_L=0;
01660A  A9CC63     BCLR 0xC63, #6
21684:                        }
21685:             
21686:                        }
21687:             
21688:                        if (!SIN_MIDDLE)
01660C  809765     MOV StatFlgs2, W5
01660E  240004     MOV #0x4000, W4
016610  628204     AND W5, W4, W4
016612  520FE0     SUB W4, #0x0, [W15]
016614  3A003A     BRA NZ, 0x1668A
21689:                        {
21690:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
016616  81F506     MOV Amplitude1Tmp, W6
016618  81F517     MOV 0x3EA2, W7
01661A  81FEC4     MOV TabRes0, W4
01661C  81FED5     MOV 0x3FDA, W5
01661E  B83884     MUL.UU W7, W4, W0
016620  B82986     MUL.UU W5, W6, W2
016622  780082     MOV W2, W1
016624  400001     ADD W0, W1, W0
016626  780306     MOV W6, W6
016628  780204     MOV W4, W4
01662A  B83204     MUL.UU W6, W4, W4
01662C  400005     ADD W0, W5, W0
01662E  780280     MOV W0, W5
016630  DD2B48     SL W5, #8, W6
016632  DE2248     LSR W4, #8, W4
016634  730204     IOR W6, W4, W4
016636  DE2AC8     LSR W5, #8, W5
016638  780204     MOV W4, W4
01663A  888814     MOV W4, SV_PWM1_0
21691:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
01663C  81F506     MOV Amplitude1Tmp, W6
01663E  81F517     MOV 0x3EA2, W7
016640  81FEE4     MOV TabRes1, W4
016642  81FEF5     MOV 0x3FDE, W5
016644  B83884     MUL.UU W7, W4, W0
016646  B82986     MUL.UU W5, W6, W2
016648  780082     MOV W2, W1
01664A  400001     ADD W0, W1, W0
01664C  780306     MOV W6, W6
01664E  780204     MOV W4, W4
016650  B83204     MUL.UU W6, W4, W4
016652  400005     ADD W0, W5, W0
016654  780280     MOV W0, W5
016656  DD2B48     SL W5, #8, W6
016658  DE2248     LSR W4, #8, W4
01665A  730204     IOR W6, W4, W4
01665C  DE2AC8     LSR W5, #8, W5
01665E  780204     MOV W4, W4
016660  888824     MOV W4, SV_PWM1_1
21692:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
016662  81F506     MOV Amplitude1Tmp, W6
016664  81F517     MOV 0x3EA2, W7
016666  81FF04     MOV TabRes2, W4
016668  81FF15     MOV 0x3FE2, W5
01666A  B83884     MUL.UU W7, W4, W0
01666C  B82986     MUL.UU W5, W6, W2
01666E  780082     MOV W2, W1
016670  400001     ADD W0, W1, W0
016672  780306     MOV W6, W6
016674  780204     MOV W4, W4
016676  B83204     MUL.UU W6, W4, W4
016678  400005     ADD W0, W5, W0
01667A  780280     MOV W0, W5
01667C  DD2B48     SL W5, #8, W6
01667E  DE2248     LSR W4, #8, W4
016680  730204     IOR W6, W4, W4
016682  DE2AC8     LSR W5, #8, W5
016684  780204     MOV W4, W4
016686  888834     MOV W4, SV_PWM1_2
21693:                        }
21694:                     else
21695:                     {
21696:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
01668A  81F504     MOV Amplitude1Tmp, W4
01668C  81F515     MOV 0x3EA2, W5
01668E  BE0304     MOV.D W4, W6
016690  81FEC4     MOV TabRes0, W4
016692  81FED5     MOV 0x3FDA, W5
016694  B83884     MUL.UU W7, W4, W0
016696  B82986     MUL.UU W5, W6, W2
016698  780082     MOV W2, W1
01669A  400001     ADD W0, W1, W0
01669C  780306     MOV W6, W6
01669E  780204     MOV W4, W4
0166A0  B83204     MUL.UU W6, W4, W4
0166A2  400005     ADD W0, W5, W0
0166A4  780280     MOV W0, W5
0166A6  DD2B48     SL W5, #8, W6
0166A8  DE2248     LSR W4, #8, W4
0166AA  730204     IOR W6, W4, W4
0166AC  DEAAC8     ASR W5, #8, W5
0166AE  780284     MOV W4, W5
0166B0  8092D6     MOV MAX_PWM_CONST, W6
0166B2  200024     MOV #0x2, W4
0166B4  090011     REPEAT #0x11
0166B6  D80304     DIV.SW W6, W4
0166B8  780200     MOV W0, W4
0166BA  428204     ADD W5, W4, W4
0166BC  888814     MOV W4, SV_PWM1_0
21697:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
0166BE  81F504     MOV Amplitude1Tmp, W4
0166C0  81F515     MOV 0x3EA2, W5
0166C2  BE0304     MOV.D W4, W6
0166C4  81FEE4     MOV TabRes1, W4
0166C6  81FEF5     MOV 0x3FDE, W5
0166C8  B83884     MUL.UU W7, W4, W0
0166CA  B82986     MUL.UU W5, W6, W2
0166CC  780082     MOV W2, W1
0166CE  400001     ADD W0, W1, W0
0166D0  780306     MOV W6, W6
0166D2  780204     MOV W4, W4
0166D4  B83204     MUL.UU W6, W4, W4
0166D6  400005     ADD W0, W5, W0
0166D8  780280     MOV W0, W5
0166DA  DD2B48     SL W5, #8, W6
0166DC  DE2248     LSR W4, #8, W4
0166DE  730204     IOR W6, W4, W4
0166E0  DEAAC8     ASR W5, #8, W5
0166E2  780284     MOV W4, W5
0166E4  8092D6     MOV MAX_PWM_CONST, W6
0166E6  200024     MOV #0x2, W4
0166E8  090011     REPEAT #0x11
0166EA  D80304     DIV.SW W6, W4
0166EC  780200     MOV W0, W4
0166EE  428204     ADD W5, W4, W4
0166F0  888824     MOV W4, SV_PWM1_1
21698:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
0166F2  81F504     MOV Amplitude1Tmp, W4
0166F4  81F515     MOV 0x3EA2, W5
0166F6  BE0304     MOV.D W4, W6
0166F8  81FF04     MOV TabRes2, W4
0166FA  81FF15     MOV 0x3FE2, W5
0166FC  B83884     MUL.UU W7, W4, W0
0166FE  B82986     MUL.UU W5, W6, W2
016700  780082     MOV W2, W1
016702  400001     ADD W0, W1, W0
016704  780306     MOV W6, W6
016706  780204     MOV W4, W4
016708  B83204     MUL.UU W6, W4, W4
01670A  400005     ADD W0, W5, W0
01670C  780280     MOV W0, W5
01670E  DD2B48     SL W5, #8, W6
016710  DE2248     LSR W4, #8, W4
016712  730204     IOR W6, W4, W4
016714  DEAAC8     ASR W5, #8, W5
016716  780284     MOV W4, W5
016718  8092D6     MOV MAX_PWM_CONST, W6
01671A  200024     MOV #0x2, W4
01671C  090011     REPEAT #0x11
01671E  D80304     DIV.SW W6, W4
016720  780200     MOV W0, W4
016722  428204     ADD W5, W4, W4
016724  888834     MOV W4, SV_PWM1_2
21699:                     }
21700:             
21701:                       break ;
016688  37044C     BRA 0x16F22
016726  3703FD     BRA 0x16F22
21702:                    case 2 :
21703:                        if (!SIN_MIDDLE)
016728  809765     MOV StatFlgs2, W5
01672A  240004     MOV #0x4000, W4
01672C  628204     AND W5, W4, W4
01672E  520FE0     SUB W4, #0x0, [W15]
016730  3A001F     BRA NZ, 0x16770
21704:                        {
21705:                        TabRes0=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-129];
016732  808794     MOV Theta1CntPWM, W4
016734  200FF5     MOV #0xFF, W5
016736  528204     SUB W5, W4, W4
016738  2A9785     MOV #0xA978, W5
01673A  428204     ADD W5, W4, W4
01673C  784214     MOV.B [W4], W4
01673E  FB8204     ZE W4, W4
016740  200005     MOV #0x0, W5
016742  89FEC4     MOV W4, TabRes0
016744  89FED5     MOV W5, 0x3FDA
21706:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-1];
016746  808794     MOV Theta1CntPWM, W4
016748  2017F5     MOV #0x17F, W5
01674A  528204     SUB W5, W4, W4
01674C  2A9785     MOV #0xA978, W5
01674E  428204     ADD W5, W4, W4
016750  784214     MOV.B [W4], W4
016752  FB8204     ZE W4, W4
016754  200005     MOV #0x0, W5
016756  89FEE4     MOV W4, TabRes1
016758  89FEF5     MOV W5, 0x3FDE
21707:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-257];
01675A  808794     MOV Theta1CntPWM, W4
01675C  2007F5     MOV #0x7F, W5
01675E  528204     SUB W5, W4, W4
016760  2A9785     MOV #0xA978, W5
016762  428204     ADD W5, W4, W4
016764  784214     MOV.B [W4], W4
016766  FB8204     ZE W4, W4
016768  200005     MOV #0x0, W5
01676A  89FF04     MOV W4, TabRes2
01676C  89FF15     MOV W5, 0x3FE2
01676E  37001E     BRA 0x167AC
21708:                        }
21709:                         else
21710:                         {
21711:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-129]);
016770  808794     MOV Theta1CntPWM, W4
016772  200FF5     MOV #0xFF, W5
016774  528204     SUB W5, W4, W4
016776  2AAF85     MOV #0xAAF8, W5
016778  428204     ADD W5, W4, W4
01677A  784214     MOV.B [W4], W4
01677C  FB0204     SE W4, W4
01677E  DEA2CF     ASR W4, #15, W5
016780  89FEC4     MOV W4, TabRes0
016782  89FED5     MOV W5, 0x3FDA
21712:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-1]);
016784  808794     MOV Theta1CntPWM, W4
016786  2017F5     MOV #0x17F, W5
016788  528204     SUB W5, W4, W4
01678A  2AAF85     MOV #0xAAF8, W5
01678C  428204     ADD W5, W4, W4
01678E  784214     MOV.B [W4], W4
016790  FB0204     SE W4, W4
016792  DEA2CF     ASR W4, #15, W5
016794  89FEE4     MOV W4, TabRes1
016796  89FEF5     MOV W5, 0x3FDE
21713:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-257]);
016798  808794     MOV Theta1CntPWM, W4
01679A  2007F5     MOV #0x7F, W5
01679C  528204     SUB W5, W4, W4
01679E  2AAF85     MOV #0xAAF8, W5
0167A0  428204     ADD W5, W4, W4
0167A2  784214     MOV.B [W4], W4
0167A4  FB0204     SE W4, W4
0167A6  DEA2CF     ASR W4, #15, W5
0167A8  89FF04     MOV W4, TabRes2
0167AA  89FF15     MOV W5, 0x3FE2
21714:                         }
21715:             
21716:             
21717:                        if   (!StrongMode)
0167AC  8095F5     MOV 0x12BE, W5
0167AE  240004     MOV #0x4000, W4
0167B0  628204     AND W5, W4, W4
0167B2  520FE0     SUB W4, #0x0, [W15]
0167B4  3A002A     BRA NZ, 0x1680A
21718:                        {
21719:             
21720:                        if (TabRes0==0)
0167B6  81FEC4     MOV TabRes0, W4
0167B8  81FED5     MOV 0x3FDA, W5
0167BA  520FE0     SUB W4, #0x0, [W15]
0167BC  5A8FE0     SUBB W5, #0x0, [W15]
0167BE  3A0005     BRA NZ, 0x167CA
21721:                        {
21722:                         PWM1_A_H=0;
0167C0  A92E44     BCLR LATE, #1
21723:                         PWM1_A_L=1;
0167C2  A80E44     BSET LATE, #0
21724:                         PEN1_A_H=0;
0167C4  A9EC23     BCLR 0xC23, #7
21725:                         PEN1_A_L=0;
0167C6  A9CC23     BCLR 0xC23, #6
0167C8  370004     BRA 0x167D2
21726:                        }
21727:                        else
21728:                        {
21729:                         PWM1_A_H=0;
0167CA  A92E44     BCLR LATE, #1
21730:                         PWM1_A_L=0;
0167CC  A90E44     BCLR LATE, #0
21731:                         PEN1_A_H=1;
0167CE  A8EC23     BSET 0xC23, #7
21732:                         PEN1_A_L=0;
0167D0  A9CC23     BCLR 0xC23, #6
21733:                        }
21734:             
21735:                        if (TabRes1==0)
0167D2  81FEE4     MOV TabRes1, W4
0167D4  81FEF5     MOV 0x3FDE, W5
0167D6  520FE0     SUB W4, #0x0, [W15]
0167D8  5A8FE0     SUBB W5, #0x0, [W15]
0167DA  3A0005     BRA NZ, 0x167E6
21736:                        {
21737:                         PWM1_B_H=0;
0167DC  A96E44     BCLR LATE, #3
21738:                         PWM1_B_L=1;
0167DE  A84E44     BSET LATE, #2
21739:                         PEN1_B_H=0;
0167E0  A9EC43     BCLR 0xC43, #7
21740:                         PEN1_B_L=0;
0167E2  A9CC43     BCLR 0xC43, #6
0167E4  370004     BRA 0x167EE
21741:                        }
21742:                        else
21743:                        {
21744:                         PWM1_B_H=0;
0167E6  A96E44     BCLR LATE, #3
21745:                         PWM1_B_L=0;
0167E8  A94E44     BCLR LATE, #2
21746:                         PEN1_B_H=1;
0167EA  A8EC43     BSET 0xC43, #7
21747:                         PEN1_B_L=0;
0167EC  A9CC43     BCLR 0xC43, #6
21748:                        }
21749:             
21750:             
21751:                        if (TabRes2==0)
0167EE  81FF04     MOV TabRes2, W4
0167F0  81FF15     MOV 0x3FE2, W5
0167F2  520FE0     SUB W4, #0x0, [W15]
0167F4  5A8FE0     SUBB W5, #0x0, [W15]
0167F6  3A0005     BRA NZ, 0x16802
21752:                        {
21753:                         PWM1_C_H=0;
0167F8  A9AE44     BCLR LATE, #5
21754:                         PWM1_C_L=1;
0167FA  A88E44     BSET LATE, #4
21755:                         PEN1_C_H=0;
0167FC  A9EC63     BCLR 0xC63, #7
21756:                         PEN1_C_L=0;
0167FE  A9CC63     BCLR 0xC63, #6
016800  370004     BRA 0x1680A
21757:                        }
21758:                        else
21759:                        {
21760:                         PWM1_C_H=0;
016802  A9AE44     BCLR LATE, #5
21761:                         PWM1_C_L=0;
016804  A98E44     BCLR LATE, #4
21762:                         PEN1_C_H=1;
016806  A8EC63     BSET 0xC63, #7
21763:                         PEN1_C_L=0;
016808  A9CC63     BCLR 0xC63, #6
21764:                        }
21765:             
21766:                        }
21767:                        if (!SIN_MIDDLE)
01680A  809765     MOV StatFlgs2, W5
01680C  240004     MOV #0x4000, W4
01680E  628204     AND W5, W4, W4
016810  520FE0     SUB W4, #0x0, [W15]
016812  3A003A     BRA NZ, 0x16888
21768:                        {
21769:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
016814  81F506     MOV Amplitude1Tmp, W6
016816  81F517     MOV 0x3EA2, W7
016818  81FEC4     MOV TabRes0, W4
01681A  81FED5     MOV 0x3FDA, W5
01681C  B83884     MUL.UU W7, W4, W0
01681E  B82986     MUL.UU W5, W6, W2
016820  780082     MOV W2, W1
016822  400001     ADD W0, W1, W0
016824  780306     MOV W6, W6
016826  780204     MOV W4, W4
016828  B83204     MUL.UU W6, W4, W4
01682A  400005     ADD W0, W5, W0
01682C  780280     MOV W0, W5
01682E  DD2B48     SL W5, #8, W6
016830  DE2248     LSR W4, #8, W4
016832  730204     IOR W6, W4, W4
016834  DE2AC8     LSR W5, #8, W5
016836  780204     MOV W4, W4
016838  888814     MOV W4, SV_PWM1_0
21770:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
01683A  81F506     MOV Amplitude1Tmp, W6
01683C  81F517     MOV 0x3EA2, W7
01683E  81FEE4     MOV TabRes1, W4
016840  81FEF5     MOV 0x3FDE, W5
016842  B83884     MUL.UU W7, W4, W0
016844  B82986     MUL.UU W5, W6, W2
016846  780082     MOV W2, W1
016848  400001     ADD W0, W1, W0
01684A  780306     MOV W6, W6
01684C  780204     MOV W4, W4
01684E  B83204     MUL.UU W6, W4, W4
016850  400005     ADD W0, W5, W0
016852  780280     MOV W0, W5
016854  DD2B48     SL W5, #8, W6
016856  DE2248     LSR W4, #8, W4
016858  730204     IOR W6, W4, W4
01685A  DE2AC8     LSR W5, #8, W5
01685C  780204     MOV W4, W4
01685E  888824     MOV W4, SV_PWM1_1
21771:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
016860  81F506     MOV Amplitude1Tmp, W6
016862  81F517     MOV 0x3EA2, W7
016864  81FF04     MOV TabRes2, W4
016866  81FF15     MOV 0x3FE2, W5
016868  B83884     MUL.UU W7, W4, W0
01686A  B82986     MUL.UU W5, W6, W2
01686C  780082     MOV W2, W1
01686E  400001     ADD W0, W1, W0
016870  780306     MOV W6, W6
016872  780204     MOV W4, W4
016874  B83204     MUL.UU W6, W4, W4
016876  400005     ADD W0, W5, W0
016878  780280     MOV W0, W5
01687A  DD2B48     SL W5, #8, W6
01687C  DE2248     LSR W4, #8, W4
01687E  730204     IOR W6, W4, W4
016880  DE2AC8     LSR W5, #8, W5
016882  780204     MOV W4, W4
016884  888834     MOV W4, SV_PWM1_2
21772:                        }
21773:                         else
21774:                         {
21775:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
016888  81F504     MOV Amplitude1Tmp, W4
01688A  81F515     MOV 0x3EA2, W5
01688C  BE0304     MOV.D W4, W6
01688E  81FEC4     MOV TabRes0, W4
016890  81FED5     MOV 0x3FDA, W5
016892  B83884     MUL.UU W7, W4, W0
016894  B82986     MUL.UU W5, W6, W2
016896  780082     MOV W2, W1
016898  400001     ADD W0, W1, W0
01689A  780306     MOV W6, W6
01689C  780204     MOV W4, W4
01689E  B83204     MUL.UU W6, W4, W4
0168A0  400005     ADD W0, W5, W0
0168A2  780280     MOV W0, W5
0168A4  DD2B48     SL W5, #8, W6
0168A6  DE2248     LSR W4, #8, W4
0168A8  730204     IOR W6, W4, W4
0168AA  DEAAC8     ASR W5, #8, W5
0168AC  780284     MOV W4, W5
0168AE  8092D6     MOV MAX_PWM_CONST, W6
0168B0  200024     MOV #0x2, W4
0168B2  090011     REPEAT #0x11
0168B4  D80304     DIV.SW W6, W4
0168B6  780200     MOV W0, W4
0168B8  428204     ADD W5, W4, W4
0168BA  888814     MOV W4, SV_PWM1_0
21776:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
0168BC  81F504     MOV Amplitude1Tmp, W4
0168BE  81F515     MOV 0x3EA2, W5
0168C0  BE0304     MOV.D W4, W6
0168C2  81FEE4     MOV TabRes1, W4
0168C4  81FEF5     MOV 0x3FDE, W5
0168C6  B83884     MUL.UU W7, W4, W0
0168C8  B82986     MUL.UU W5, W6, W2
0168CA  780082     MOV W2, W1
0168CC  400001     ADD W0, W1, W0
0168CE  780306     MOV W6, W6
0168D0  780204     MOV W4, W4
0168D2  B83204     MUL.UU W6, W4, W4
0168D4  400005     ADD W0, W5, W0
0168D6  780280     MOV W0, W5
0168D8  DD2B48     SL W5, #8, W6
0168DA  DE2248     LSR W4, #8, W4
0168DC  730204     IOR W6, W4, W4
0168DE  DEAAC8     ASR W5, #8, W5
0168E0  780284     MOV W4, W5
0168E2  8092D6     MOV MAX_PWM_CONST, W6
0168E4  200024     MOV #0x2, W4
0168E6  090011     REPEAT #0x11
0168E8  D80304     DIV.SW W6, W4
0168EA  780200     MOV W0, W4
0168EC  428204     ADD W5, W4, W4
0168EE  888824     MOV W4, SV_PWM1_1
21777:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
0168F0  81F504     MOV Amplitude1Tmp, W4
0168F2  81F515     MOV 0x3EA2, W5
0168F4  BE0304     MOV.D W4, W6
0168F6  81FF04     MOV TabRes2, W4
0168F8  81FF15     MOV 0x3FE2, W5
0168FA  B83884     MUL.UU W7, W4, W0
0168FC  B82986     MUL.UU W5, W6, W2
0168FE  780082     MOV W2, W1
016900  400001     ADD W0, W1, W0
016902  780306     MOV W6, W6
016904  780204     MOV W4, W4
016906  B83204     MUL.UU W6, W4, W4
016908  400005     ADD W0, W5, W0
01690A  780280     MOV W0, W5
01690C  DD2B48     SL W5, #8, W6
01690E  DE2248     LSR W4, #8, W4
016910  730204     IOR W6, W4, W4
016912  DEAAC8     ASR W5, #8, W5
016914  780284     MOV W4, W5
016916  8092D6     MOV MAX_PWM_CONST, W6
016918  200024     MOV #0x2, W4
01691A  090011     REPEAT #0x11
01691C  D80304     DIV.SW W6, W4
01691E  780200     MOV W0, W4
016920  428204     ADD W5, W4, W4
016922  888834     MOV W4, SV_PWM1_2
21778:                         }
21779:             
21780:                       break ;
016886  37034D     BRA 0x16F22
016924  3702FE     BRA 0x16F22
21781:                    case 6 :
21782:                        if (!SIN_MIDDLE)
016926  809765     MOV StatFlgs2, W5
016928  240004     MOV #0x4000, W4
01692A  628204     AND W5, W4, W4
01692C  520FE0     SUB W4, #0x0, [W15]
01692E  3A001F     BRA NZ, 0x1696E
21783:                        {
21784:                        TabRes0=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-193];
016930  808794     MOV Theta1CntPWM, W4
016932  200BF5     MOV #0xBF, W5
016934  528204     SUB W5, W4, W4
016936  2A9785     MOV #0xA978, W5
016938  428204     ADD W5, W4, W4
01693A  784214     MOV.B [W4], W4
01693C  FB8204     ZE W4, W4
01693E  200005     MOV #0x0, W5
016940  89FEC4     MOV W4, TabRes0
016942  89FED5     MOV W5, 0x3FDA
21785:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-65];
016944  808794     MOV Theta1CntPWM, W4
016946  2013F5     MOV #0x13F, W5
016948  528204     SUB W5, W4, W4
01694A  2A9785     MOV #0xA978, W5
01694C  428204     ADD W5, W4, W4
01694E  784214     MOV.B [W4], W4
016950  FB8204     ZE W4, W4
016952  200005     MOV #0x0, W5
016954  89FEE4     MOV W4, TabRes1
016956  89FEF5     MOV W5, 0x3FDE
21786:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-321];
016958  808794     MOV Theta1CntPWM, W4
01695A  2003F5     MOV #0x3F, W5
01695C  528204     SUB W5, W4, W4
01695E  2A9785     MOV #0xA978, W5
016960  428204     ADD W5, W4, W4
016962  784214     MOV.B [W4], W4
016964  FB8204     ZE W4, W4
016966  200005     MOV #0x0, W5
016968  89FF04     MOV W4, TabRes2
01696A  89FF15     MOV W5, 0x3FE2
01696C  37001E     BRA 0x169AA
21787:                        }
21788:                         else
21789:                         {
21790:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-193]);
01696E  808794     MOV Theta1CntPWM, W4
016970  200BF5     MOV #0xBF, W5
016972  528204     SUB W5, W4, W4
016974  2AAF85     MOV #0xAAF8, W5
016976  428204     ADD W5, W4, W4
016978  784214     MOV.B [W4], W4
01697A  FB0204     SE W4, W4
01697C  DEA2CF     ASR W4, #15, W5
01697E  89FEC4     MOV W4, TabRes0
016980  89FED5     MOV W5, 0x3FDA
21791:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-65]);
016982  808794     MOV Theta1CntPWM, W4
016984  2013F5     MOV #0x13F, W5
016986  528204     SUB W5, W4, W4
016988  2AAF85     MOV #0xAAF8, W5
01698A  428204     ADD W5, W4, W4
01698C  784214     MOV.B [W4], W4
01698E  FB0204     SE W4, W4
016990  DEA2CF     ASR W4, #15, W5
016992  89FEE4     MOV W4, TabRes1
016994  89FEF5     MOV W5, 0x3FDE
21792:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-321]);
016996  808794     MOV Theta1CntPWM, W4
016998  2003F5     MOV #0x3F, W5
01699A  528204     SUB W5, W4, W4
01699C  2AAF85     MOV #0xAAF8, W5
01699E  428204     ADD W5, W4, W4
0169A0  784214     MOV.B [W4], W4
0169A2  FB0204     SE W4, W4
0169A4  DEA2CF     ASR W4, #15, W5
0169A6  89FF04     MOV W4, TabRes2
0169A8  89FF15     MOV W5, 0x3FE2
21793:                         }
21794:             
21795:             
21796:             
21797:                        if   (!StrongMode)
0169AA  8095F5     MOV 0x12BE, W5
0169AC  240004     MOV #0x4000, W4
0169AE  628204     AND W5, W4, W4
0169B0  520FE0     SUB W4, #0x0, [W15]
0169B2  3A002A     BRA NZ, 0x16A08
21798:                        {
21799:             
21800:             
21801:                        if (TabRes0==0)
0169B4  81FEC4     MOV TabRes0, W4
0169B6  81FED5     MOV 0x3FDA, W5
0169B8  520FE0     SUB W4, #0x0, [W15]
0169BA  5A8FE0     SUBB W5, #0x0, [W15]
0169BC  3A0005     BRA NZ, 0x169C8
21802:                        {
21803:                         PWM1_A_H=0;
0169BE  A92E44     BCLR LATE, #1
21804:                         PWM1_A_L=1;
0169C0  A80E44     BSET LATE, #0
21805:                         PEN1_A_H=0;
0169C2  A9EC23     BCLR 0xC23, #7
21806:                         PEN1_A_L=0;
0169C4  A9CC23     BCLR 0xC23, #6
0169C6  370004     BRA 0x169D0
21807:                        }
21808:                        else
21809:                        {
21810:                         PWM1_A_H=0;
0169C8  A92E44     BCLR LATE, #1
21811:                         PWM1_A_L=0;
0169CA  A90E44     BCLR LATE, #0
21812:                         PEN1_A_H=1;
0169CC  A8EC23     BSET 0xC23, #7
21813:                         PEN1_A_L=0;
0169CE  A9CC23     BCLR 0xC23, #6
21814:                        }
21815:             
21816:                        if (TabRes1==0)
0169D0  81FEE4     MOV TabRes1, W4
0169D2  81FEF5     MOV 0x3FDE, W5
0169D4  520FE0     SUB W4, #0x0, [W15]
0169D6  5A8FE0     SUBB W5, #0x0, [W15]
0169D8  3A0005     BRA NZ, 0x169E4
21817:                        {
21818:                         PWM1_B_H=0;
0169DA  A96E44     BCLR LATE, #3
21819:                         PWM1_B_L=1;
0169DC  A84E44     BSET LATE, #2
21820:                         PEN1_B_H=0;
0169DE  A9EC43     BCLR 0xC43, #7
21821:                         PEN1_B_L=0;
0169E0  A9CC43     BCLR 0xC43, #6
0169E2  370004     BRA 0x169EC
21822:                        }
21823:                        else
21824:                        {
21825:                         PWM1_B_H=0;
0169E4  A96E44     BCLR LATE, #3
21826:                         PWM1_B_L=0;
0169E6  A94E44     BCLR LATE, #2
21827:                         PEN1_B_H=1;
0169E8  A8EC43     BSET 0xC43, #7
21828:                         PEN1_B_L=0;
0169EA  A9CC43     BCLR 0xC43, #6
21829:                        }
21830:             
21831:             
21832:                        if (TabRes2==0)
0169EC  81FF04     MOV TabRes2, W4
0169EE  81FF15     MOV 0x3FE2, W5
0169F0  520FE0     SUB W4, #0x0, [W15]
0169F2  5A8FE0     SUBB W5, #0x0, [W15]
0169F4  3A0005     BRA NZ, 0x16A00
21833:                        {
21834:                         PWM1_C_H=0;
0169F6  A9AE44     BCLR LATE, #5
21835:                         PWM1_C_L=1;
0169F8  A88E44     BSET LATE, #4
21836:                         PEN1_C_H=0;
0169FA  A9EC63     BCLR 0xC63, #7
21837:                         PEN1_C_L=0;
0169FC  A9CC63     BCLR 0xC63, #6
0169FE  370004     BRA 0x16A08
21838:                        }
21839:                        else
21840:                        {
21841:                         PWM1_C_H=0;
016A00  A9AE44     BCLR LATE, #5
21842:                         PWM1_C_L=0;
016A02  A98E44     BCLR LATE, #4
21843:                         PEN1_C_H=1;
016A04  A8EC63     BSET 0xC63, #7
21844:                         PEN1_C_L=0;
016A06  A9CC63     BCLR 0xC63, #6
21845:                        }
21846:             
21847:                                 
21848:             
21849:                        }
21850:             
21851:             
21852:                        if (!SIN_MIDDLE)
016A08  809765     MOV StatFlgs2, W5
016A0A  240004     MOV #0x4000, W4
016A0C  628204     AND W5, W4, W4
016A0E  520FE0     SUB W4, #0x0, [W15]
016A10  3A003A     BRA NZ, 0x16A86
21853:                        {
21854:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
016A12  81F506     MOV Amplitude1Tmp, W6
016A14  81F517     MOV 0x3EA2, W7
016A16  81FEC4     MOV TabRes0, W4
016A18  81FED5     MOV 0x3FDA, W5
016A1A  B83884     MUL.UU W7, W4, W0
016A1C  B82986     MUL.UU W5, W6, W2
016A1E  780082     MOV W2, W1
016A20  400001     ADD W0, W1, W0
016A22  780306     MOV W6, W6
016A24  780204     MOV W4, W4
016A26  B83204     MUL.UU W6, W4, W4
016A28  400005     ADD W0, W5, W0
016A2A  780280     MOV W0, W5
016A2C  DD2B48     SL W5, #8, W6
016A2E  DE2248     LSR W4, #8, W4
016A30  730204     IOR W6, W4, W4
016A32  DE2AC8     LSR W5, #8, W5
016A34  780204     MOV W4, W4
016A36  888814     MOV W4, SV_PWM1_0
21855:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
016A38  81F506     MOV Amplitude1Tmp, W6
016A3A  81F517     MOV 0x3EA2, W7
016A3C  81FEE4     MOV TabRes1, W4
016A3E  81FEF5     MOV 0x3FDE, W5
016A40  B83884     MUL.UU W7, W4, W0
016A42  B82986     MUL.UU W5, W6, W2
016A44  780082     MOV W2, W1
016A46  400001     ADD W0, W1, W0
016A48  780306     MOV W6, W6
016A4A  780204     MOV W4, W4
016A4C  B83204     MUL.UU W6, W4, W4
016A4E  400005     ADD W0, W5, W0
016A50  780280     MOV W0, W5
016A52  DD2B48     SL W5, #8, W6
016A54  DE2248     LSR W4, #8, W4
016A56  730204     IOR W6, W4, W4
016A58  DE2AC8     LSR W5, #8, W5
016A5A  780204     MOV W4, W4
016A5C  888824     MOV W4, SV_PWM1_1
21856:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
016A5E  81F506     MOV Amplitude1Tmp, W6
016A60  81F517     MOV 0x3EA2, W7
016A62  81FF04     MOV TabRes2, W4
016A64  81FF15     MOV 0x3FE2, W5
016A66  B83884     MUL.UU W7, W4, W0
016A68  B82986     MUL.UU W5, W6, W2
016A6A  780082     MOV W2, W1
016A6C  400001     ADD W0, W1, W0
016A6E  780306     MOV W6, W6
016A70  780204     MOV W4, W4
016A72  B83204     MUL.UU W6, W4, W4
016A74  400005     ADD W0, W5, W0
016A76  780280     MOV W0, W5
016A78  DD2B48     SL W5, #8, W6
016A7A  DE2248     LSR W4, #8, W4
016A7C  730204     IOR W6, W4, W4
016A7E  DE2AC8     LSR W5, #8, W5
016A80  780204     MOV W4, W4
016A82  888834     MOV W4, SV_PWM1_2
21857:                        }
21858:                     else
21859:                     {
21860:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
016A86  81F504     MOV Amplitude1Tmp, W4
016A88  81F515     MOV 0x3EA2, W5
016A8A  BE0304     MOV.D W4, W6
016A8C  81FEC4     MOV TabRes0, W4
016A8E  81FED5     MOV 0x3FDA, W5
016A90  B83884     MUL.UU W7, W4, W0
016A92  B82986     MUL.UU W5, W6, W2
016A94  780082     MOV W2, W1
016A96  400001     ADD W0, W1, W0
016A98  780306     MOV W6, W6
016A9A  780204     MOV W4, W4
016A9C  B83204     MUL.UU W6, W4, W4
016A9E  400005     ADD W0, W5, W0
016AA0  780280     MOV W0, W5
016AA2  DD2B48     SL W5, #8, W6
016AA4  DE2248     LSR W4, #8, W4
016AA6  730204     IOR W6, W4, W4
016AA8  DEAAC8     ASR W5, #8, W5
016AAA  780284     MOV W4, W5
016AAC  8092D6     MOV MAX_PWM_CONST, W6
016AAE  200024     MOV #0x2, W4
016AB0  090011     REPEAT #0x11
016AB2  D80304     DIV.SW W6, W4
016AB4  780200     MOV W0, W4
016AB6  428204     ADD W5, W4, W4
016AB8  888814     MOV W4, SV_PWM1_0
21861:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
016ABA  81F504     MOV Amplitude1Tmp, W4
016ABC  81F515     MOV 0x3EA2, W5
016ABE  BE0304     MOV.D W4, W6
016AC0  81FEE4     MOV TabRes1, W4
016AC2  81FEF5     MOV 0x3FDE, W5
016AC4  B83884     MUL.UU W7, W4, W0
016AC6  B82986     MUL.UU W5, W6, W2
016AC8  780082     MOV W2, W1
016ACA  400001     ADD W0, W1, W0
016ACC  780306     MOV W6, W6
016ACE  780204     MOV W4, W4
016AD0  B83204     MUL.UU W6, W4, W4
016AD2  400005     ADD W0, W5, W0
016AD4  780280     MOV W0, W5
016AD6  DD2B48     SL W5, #8, W6
016AD8  DE2248     LSR W4, #8, W4
016ADA  730204     IOR W6, W4, W4
016ADC  DEAAC8     ASR W5, #8, W5
016ADE  780284     MOV W4, W5
016AE0  8092D6     MOV MAX_PWM_CONST, W6
016AE2  200024     MOV #0x2, W4
016AE4  090011     REPEAT #0x11
016AE6  D80304     DIV.SW W6, W4
016AE8  780200     MOV W0, W4
016AEA  428204     ADD W5, W4, W4
016AEC  888824     MOV W4, SV_PWM1_1
21862:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
016AEE  81F504     MOV Amplitude1Tmp, W4
016AF0  81F515     MOV 0x3EA2, W5
016AF2  BE0304     MOV.D W4, W6
016AF4  81FF04     MOV TabRes2, W4
016AF6  81FF15     MOV 0x3FE2, W5
016AF8  B83884     MUL.UU W7, W4, W0
016AFA  B82986     MUL.UU W5, W6, W2
016AFC  780082     MOV W2, W1
016AFE  400001     ADD W0, W1, W0
016B00  780306     MOV W6, W6
016B02  780204     MOV W4, W4
016B04  B83204     MUL.UU W6, W4, W4
016B06  400005     ADD W0, W5, W0
016B08  780280     MOV W0, W5
016B0A  DD2B48     SL W5, #8, W6
016B0C  DE2248     LSR W4, #8, W4
016B0E  730204     IOR W6, W4, W4
016B10  DEAAC8     ASR W5, #8, W5
016B12  780284     MOV W4, W5
016B14  8092D6     MOV MAX_PWM_CONST, W6
016B16  200024     MOV #0x2, W4
016B18  090011     REPEAT #0x11
016B1A  D80304     DIV.SW W6, W4
016B1C  780200     MOV W0, W4
016B1E  428204     ADD W5, W4, W4
016B20  888834     MOV W4, SV_PWM1_2
21863:                     }
21864:             
21865:                       break ;
016A84  37024E     BRA 0x16F22
016B22  3701FF     BRA 0x16F22
21866:                    case 4 :
21867:                        if (!SIN_MIDDLE)
016B24  809765     MOV StatFlgs2, W5
016B26  240004     MOV #0x4000, W4
016B28  628204     AND W5, W4, W4
016B2A  520FE0     SUB W4, #0x0, [W15]
016B2C  3A001F     BRA NZ, 0x16B6C
21868:                        {
21869:                        TabRes0=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-257];
016B2E  808794     MOV Theta1CntPWM, W4
016B30  2007F5     MOV #0x7F, W5
016B32  528204     SUB W5, W4, W4
016B34  2A9785     MOV #0xA978, W5
016B36  428204     ADD W5, W4, W4
016B38  784214     MOV.B [W4], W4
016B3A  FB8204     ZE W4, W4
016B3C  200005     MOV #0x0, W5
016B3E  89FEC4     MOV W4, TabRes0
016B40  89FED5     MOV W5, 0x3FDA
21870:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-129];
016B42  808794     MOV Theta1CntPWM, W4
016B44  200FF5     MOV #0xFF, W5
016B46  528204     SUB W5, W4, W4
016B48  2A9785     MOV #0xA978, W5
016B4A  428204     ADD W5, W4, W4
016B4C  784214     MOV.B [W4], W4
016B4E  FB8204     ZE W4, W4
016B50  200005     MOV #0x0, W5
016B52  89FEE4     MOV W4, TabRes1
016B54  89FEF5     MOV W5, 0x3FDE
21871:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-1];
016B56  808794     MOV Theta1CntPWM, W4
016B58  2017F5     MOV #0x17F, W5
016B5A  528204     SUB W5, W4, W4
016B5C  2A9785     MOV #0xA978, W5
016B5E  428204     ADD W5, W4, W4
016B60  784214     MOV.B [W4], W4
016B62  FB8204     ZE W4, W4
016B64  200005     MOV #0x0, W5
016B66  89FF04     MOV W4, TabRes2
016B68  89FF15     MOV W5, 0x3FE2
016B6A  37001E     BRA 0x16BA8
21872:                        }
21873:                     else
21874:                     {
21875:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-257]);
016B6C  808794     MOV Theta1CntPWM, W4
016B6E  2007F5     MOV #0x7F, W5
016B70  528204     SUB W5, W4, W4
016B72  2AAF85     MOV #0xAAF8, W5
016B74  428204     ADD W5, W4, W4
016B76  784214     MOV.B [W4], W4
016B78  FB0204     SE W4, W4
016B7A  DEA2CF     ASR W4, #15, W5
016B7C  89FEC4     MOV W4, TabRes0
016B7E  89FED5     MOV W5, 0x3FDA
21876:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-129]);
016B80  808794     MOV Theta1CntPWM, W4
016B82  200FF5     MOV #0xFF, W5
016B84  528204     SUB W5, W4, W4
016B86  2AAF85     MOV #0xAAF8, W5
016B88  428204     ADD W5, W4, W4
016B8A  784214     MOV.B [W4], W4
016B8C  FB0204     SE W4, W4
016B8E  DEA2CF     ASR W4, #15, W5
016B90  89FEE4     MOV W4, TabRes1
016B92  89FEF5     MOV W5, 0x3FDE
21877:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-1]);
016B94  808794     MOV Theta1CntPWM, W4
016B96  2017F5     MOV #0x17F, W5
016B98  528204     SUB W5, W4, W4
016B9A  2AAF85     MOV #0xAAF8, W5
016B9C  428204     ADD W5, W4, W4
016B9E  784214     MOV.B [W4], W4
016BA0  FB0204     SE W4, W4
016BA2  DEA2CF     ASR W4, #15, W5
016BA4  89FF04     MOV W4, TabRes2
016BA6  89FF15     MOV W5, 0x3FE2
21878:                     }
21879:             
21880:                        if   (!StrongMode)
016BA8  8095F5     MOV 0x12BE, W5
016BAA  240004     MOV #0x4000, W4
016BAC  628204     AND W5, W4, W4
016BAE  520FE0     SUB W4, #0x0, [W15]
016BB0  3A002A     BRA NZ, 0x16C06
21881:                        {
21882:             
21883:                        if (TabRes0==0)
016BB2  81FEC4     MOV TabRes0, W4
016BB4  81FED5     MOV 0x3FDA, W5
016BB6  520FE0     SUB W4, #0x0, [W15]
016BB8  5A8FE0     SUBB W5, #0x0, [W15]
016BBA  3A0005     BRA NZ, 0x16BC6
21884:                        {
21885:                         PWM1_A_H=0;
016BBC  A92E44     BCLR LATE, #1
21886:                         PWM1_A_L=1;
016BBE  A80E44     BSET LATE, #0
21887:                         PEN1_A_H=0;
016BC0  A9EC23     BCLR 0xC23, #7
21888:                         PEN1_A_L=0;
016BC2  A9CC23     BCLR 0xC23, #6
016BC4  370004     BRA 0x16BCE
21889:                        }
21890:                        else
21891:                        {
21892:                         PWM1_A_H=0;
016BC6  A92E44     BCLR LATE, #1
21893:                         PWM1_A_L=0;
016BC8  A90E44     BCLR LATE, #0
21894:                         PEN1_A_H=1;
016BCA  A8EC23     BSET 0xC23, #7
21895:                         PEN1_A_L=0;
016BCC  A9CC23     BCLR 0xC23, #6
21896:                        }
21897:             
21898:                        if (TabRes1==0)
016BCE  81FEE4     MOV TabRes1, W4
016BD0  81FEF5     MOV 0x3FDE, W5
016BD2  520FE0     SUB W4, #0x0, [W15]
016BD4  5A8FE0     SUBB W5, #0x0, [W15]
016BD6  3A0005     BRA NZ, 0x16BE2
21899:                        {
21900:                         PWM1_B_H=0;
016BD8  A96E44     BCLR LATE, #3
21901:                         PWM1_B_L=1;
016BDA  A84E44     BSET LATE, #2
21902:                         PEN1_B_H=0;
016BDC  A9EC43     BCLR 0xC43, #7
21903:                         PEN1_B_L=0;
016BDE  A9CC43     BCLR 0xC43, #6
016BE0  370004     BRA 0x16BEA
21904:                        }
21905:                        else
21906:                        {
21907:                         PWM1_B_H=0;
016BE2  A96E44     BCLR LATE, #3
21908:                         PWM1_B_L=0;
016BE4  A94E44     BCLR LATE, #2
21909:                         PEN1_B_H=1;
016BE6  A8EC43     BSET 0xC43, #7
21910:                         PEN1_B_L=0;
016BE8  A9CC43     BCLR 0xC43, #6
21911:                        }
21912:             
21913:             
21914:                        if (TabRes2==0)
016BEA  81FF04     MOV TabRes2, W4
016BEC  81FF15     MOV 0x3FE2, W5
016BEE  520FE0     SUB W4, #0x0, [W15]
016BF0  5A8FE0     SUBB W5, #0x0, [W15]
016BF2  3A0005     BRA NZ, 0x16BFE
21915:                        {
21916:                         PWM1_C_H=0;
016BF4  A9AE44     BCLR LATE, #5
21917:                         PWM1_C_L=1;
016BF6  A88E44     BSET LATE, #4
21918:                         PEN1_C_H=0;
016BF8  A9EC63     BCLR 0xC63, #7
21919:                         PEN1_C_L=0;
016BFA  A9CC63     BCLR 0xC63, #6
016BFC  370004     BRA 0x16C06
21920:                        }
21921:                        else
21922:                        {
21923:                         PWM1_C_H=0;
016BFE  A9AE44     BCLR LATE, #5
21924:                         PWM1_C_L=0;
016C00  A98E44     BCLR LATE, #4
21925:                         PEN1_C_H=1;
016C02  A8EC63     BSET 0xC63, #7
21926:                         PEN1_C_L=0;
016C04  A9CC63     BCLR 0xC63, #6
21927:                        }
21928:                          
21929:                        }
21930:             
21931:             
21932:                        if (!SIN_MIDDLE)
016C06  809765     MOV StatFlgs2, W5
016C08  240004     MOV #0x4000, W4
016C0A  628204     AND W5, W4, W4
016C0C  520FE0     SUB W4, #0x0, [W15]
016C0E  3A003A     BRA NZ, 0x16C84
21933:                        {
21934:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
016C10  81F506     MOV Amplitude1Tmp, W6
016C12  81F517     MOV 0x3EA2, W7
016C14  81FEC4     MOV TabRes0, W4
016C16  81FED5     MOV 0x3FDA, W5
016C18  B83884     MUL.UU W7, W4, W0
016C1A  B82986     MUL.UU W5, W6, W2
016C1C  780082     MOV W2, W1
016C1E  400001     ADD W0, W1, W0
016C20  780306     MOV W6, W6
016C22  780204     MOV W4, W4
016C24  B83204     MUL.UU W6, W4, W4
016C26  400005     ADD W0, W5, W0
016C28  780280     MOV W0, W5
016C2A  DD2B48     SL W5, #8, W6
016C2C  DE2248     LSR W4, #8, W4
016C2E  730204     IOR W6, W4, W4
016C30  DE2AC8     LSR W5, #8, W5
016C32  780204     MOV W4, W4
016C34  888814     MOV W4, SV_PWM1_0
21935:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
016C36  81F506     MOV Amplitude1Tmp, W6
016C38  81F517     MOV 0x3EA2, W7
016C3A  81FEE4     MOV TabRes1, W4
016C3C  81FEF5     MOV 0x3FDE, W5
016C3E  B83884     MUL.UU W7, W4, W0
016C40  B82986     MUL.UU W5, W6, W2
016C42  780082     MOV W2, W1
016C44  400001     ADD W0, W1, W0
016C46  780306     MOV W6, W6
016C48  780204     MOV W4, W4
016C4A  B83204     MUL.UU W6, W4, W4
016C4C  400005     ADD W0, W5, W0
016C4E  780280     MOV W0, W5
016C50  DD2B48     SL W5, #8, W6
016C52  DE2248     LSR W4, #8, W4
016C54  730204     IOR W6, W4, W4
016C56  DE2AC8     LSR W5, #8, W5
016C58  780204     MOV W4, W4
016C5A  888824     MOV W4, SV_PWM1_1
21936:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
016C5C  81F506     MOV Amplitude1Tmp, W6
016C5E  81F517     MOV 0x3EA2, W7
016C60  81FF04     MOV TabRes2, W4
016C62  81FF15     MOV 0x3FE2, W5
016C64  B83884     MUL.UU W7, W4, W0
016C66  B82986     MUL.UU W5, W6, W2
016C68  780082     MOV W2, W1
016C6A  400001     ADD W0, W1, W0
016C6C  780306     MOV W6, W6
016C6E  780204     MOV W4, W4
016C70  B83204     MUL.UU W6, W4, W4
016C72  400005     ADD W0, W5, W0
016C74  780280     MOV W0, W5
016C76  DD2B48     SL W5, #8, W6
016C78  DE2248     LSR W4, #8, W4
016C7A  730204     IOR W6, W4, W4
016C7C  DE2AC8     LSR W5, #8, W5
016C7E  780204     MOV W4, W4
016C80  888834     MOV W4, SV_PWM1_2
21937:                        }
21938:                 else
21939:                 {
21940:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
016C84  81F504     MOV Amplitude1Tmp, W4
016C86  81F515     MOV 0x3EA2, W5
016C88  BE0304     MOV.D W4, W6
016C8A  81FEC4     MOV TabRes0, W4
016C8C  81FED5     MOV 0x3FDA, W5
016C8E  B83884     MUL.UU W7, W4, W0
016C90  B82986     MUL.UU W5, W6, W2
016C92  780082     MOV W2, W1
016C94  400001     ADD W0, W1, W0
016C96  780306     MOV W6, W6
016C98  780204     MOV W4, W4
016C9A  B83204     MUL.UU W6, W4, W4
016C9C  400005     ADD W0, W5, W0
016C9E  780280     MOV W0, W5
016CA0  DD2B48     SL W5, #8, W6
016CA2  DE2248     LSR W4, #8, W4
016CA4  730204     IOR W6, W4, W4
016CA6  DEAAC8     ASR W5, #8, W5
016CA8  780284     MOV W4, W5
016CAA  8092D6     MOV MAX_PWM_CONST, W6
016CAC  200024     MOV #0x2, W4
016CAE  090011     REPEAT #0x11
016CB0  D80304     DIV.SW W6, W4
016CB2  780200     MOV W0, W4
016CB4  428204     ADD W5, W4, W4
016CB6  888814     MOV W4, SV_PWM1_0
21941:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
016CB8  81F504     MOV Amplitude1Tmp, W4
016CBA  81F515     MOV 0x3EA2, W5
016CBC  BE0304     MOV.D W4, W6
016CBE  81FEE4     MOV TabRes1, W4
016CC0  81FEF5     MOV 0x3FDE, W5
016CC2  B83884     MUL.UU W7, W4, W0
016CC4  B82986     MUL.UU W5, W6, W2
016CC6  780082     MOV W2, W1
016CC8  400001     ADD W0, W1, W0
016CCA  780306     MOV W6, W6
016CCC  780204     MOV W4, W4
016CCE  B83204     MUL.UU W6, W4, W4
016CD0  400005     ADD W0, W5, W0
016CD2  780280     MOV W0, W5
016CD4  DD2B48     SL W5, #8, W6
016CD6  DE2248     LSR W4, #8, W4
016CD8  730204     IOR W6, W4, W4
016CDA  DEAAC8     ASR W5, #8, W5
016CDC  780284     MOV W4, W5
016CDE  8092D6     MOV MAX_PWM_CONST, W6
016CE0  200024     MOV #0x2, W4
016CE2  090011     REPEAT #0x11
016CE4  D80304     DIV.SW W6, W4
016CE6  780200     MOV W0, W4
016CE8  428204     ADD W5, W4, W4
016CEA  888824     MOV W4, SV_PWM1_1
21942:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
016CEC  81F504     MOV Amplitude1Tmp, W4
016CEE  81F515     MOV 0x3EA2, W5
016CF0  BE0304     MOV.D W4, W6
016CF2  81FF04     MOV TabRes2, W4
016CF4  81FF15     MOV 0x3FE2, W5
016CF6  B83884     MUL.UU W7, W4, W0
016CF8  B82986     MUL.UU W5, W6, W2
016CFA  780082     MOV W2, W1
016CFC  400001     ADD W0, W1, W0
016CFE  780306     MOV W6, W6
016D00  780204     MOV W4, W4
016D02  B83204     MUL.UU W6, W4, W4
016D04  400005     ADD W0, W5, W0
016D06  780280     MOV W0, W5
016D08  DD2B48     SL W5, #8, W6
016D0A  DE2248     LSR W4, #8, W4
016D0C  730204     IOR W6, W4, W4
016D0E  DEAAC8     ASR W5, #8, W5
016D10  780284     MOV W4, W5
016D12  8092D6     MOV MAX_PWM_CONST, W6
016D14  200024     MOV #0x2, W4
016D16  090011     REPEAT #0x11
016D18  D80304     DIV.SW W6, W4
016D1A  780200     MOV W0, W4
016D1C  428204     ADD W5, W4, W4
016D1E  888834     MOV W4, SV_PWM1_2
21943:                 }
21944:             
21945:                       break ;
016C82  37014F     BRA 0x16F22
016D20  370100     BRA 0x16F22
21946:                    case 5 :
21947:                        if (!SIN_MIDDLE)
016D22  809765     MOV StatFlgs2, W5
016D24  240004     MOV #0x4000, W4
016D26  628204     AND W5, W4, W4
016D28  520FE0     SUB W4, #0x0, [W15]
016D2A  3A001F     BRA NZ, 0x16D6A
21948:                        {
21949:                        TabRes0=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-321];
016D2C  808794     MOV Theta1CntPWM, W4
016D2E  2003F5     MOV #0x3F, W5
016D30  528204     SUB W5, W4, W4
016D32  2A9785     MOV #0xA978, W5
016D34  428204     ADD W5, W4, W4
016D36  784214     MOV.B [W4], W4
016D38  FB8204     ZE W4, W4
016D3A  200005     MOV #0x0, W5
016D3C  89FEC4     MOV W4, TabRes0
016D3E  89FED5     MOV W5, 0x3FDA
21950:                        TabRes1=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-193];
016D40  808794     MOV Theta1CntPWM, W4
016D42  200BF5     MOV #0xBF, W5
016D44  528204     SUB W5, W4, W4
016D46  2A9785     MOV #0xA978, W5
016D48  428204     ADD W5, W4, W4
016D4A  784214     MOV.B [W4], W4
016D4C  FB8204     ZE W4, W4
016D4E  200005     MOV #0x0, W5
016D50  89FEE4     MOV W4, TabRes1
016D52  89FEF5     MOV W5, 0x3FDE
21951:                        TabRes2=(unsigned long int)tab_sin[THETA_NUM-Theta1CntPWM-65];
016D54  808794     MOV Theta1CntPWM, W4
016D56  2013F5     MOV #0x13F, W5
016D58  528204     SUB W5, W4, W4
016D5A  2A9785     MOV #0xA978, W5
016D5C  428204     ADD W5, W4, W4
016D5E  784214     MOV.B [W4], W4
016D60  FB8204     ZE W4, W4
016D62  200005     MOV #0x0, W5
016D64  89FF04     MOV W4, TabRes2
016D66  89FF15     MOV W5, 0x3FE2
016D68  37001E     BRA 0x16DA6
21952:                        }
21953:                     else
21954:                     {
21955:                        TabRes0=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-321]);
016D6A  808794     MOV Theta1CntPWM, W4
016D6C  2003F5     MOV #0x3F, W5
016D6E  528204     SUB W5, W4, W4
016D70  2AAF85     MOV #0xAAF8, W5
016D72  428204     ADD W5, W4, W4
016D74  784214     MOV.B [W4], W4
016D76  FB0204     SE W4, W4
016D78  DEA2CF     ASR W4, #15, W5
016D7A  89FEC4     MOV W4, TabRes0
016D7C  89FED5     MOV W5, 0x3FDA
21956:                        TabRes1=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-193]);
016D7E  808794     MOV Theta1CntPWM, W4
016D80  200BF5     MOV #0xBF, W5
016D82  528204     SUB W5, W4, W4
016D84  2AAF85     MOV #0xAAF8, W5
016D86  428204     ADD W5, W4, W4
016D88  784214     MOV.B [W4], W4
016D8A  FB0204     SE W4, W4
016D8C  DEA2CF     ASR W4, #15, W5
016D8E  89FEE4     MOV W4, TabRes1
016D90  89FEF5     MOV W5, 0x3FDE
21957:                        TabRes2=(long int)(tab_sin_M[THETA_NUM-Theta1CntPWM-65]);
016D92  808794     MOV Theta1CntPWM, W4
016D94  2013F5     MOV #0x13F, W5
016D96  528204     SUB W5, W4, W4
016D98  2AAF85     MOV #0xAAF8, W5
016D9A  428204     ADD W5, W4, W4
016D9C  784214     MOV.B [W4], W4
016D9E  FB0204     SE W4, W4
016DA0  DEA2CF     ASR W4, #15, W5
016DA2  89FF04     MOV W4, TabRes2
016DA4  89FF15     MOV W5, 0x3FE2
21958:                     }
21959:             
21960:             
21961:                        if   (!StrongMode)
016DA6  8095F5     MOV 0x12BE, W5
016DA8  240004     MOV #0x4000, W4
016DAA  628204     AND W5, W4, W4
016DAC  520FE0     SUB W4, #0x0, [W15]
016DAE  3A002A     BRA NZ, 0x16E04
21962:                        {
21963:             
21964:                        if (TabRes0==0)
016DB0  81FEC4     MOV TabRes0, W4
016DB2  81FED5     MOV 0x3FDA, W5
016DB4  520FE0     SUB W4, #0x0, [W15]
016DB6  5A8FE0     SUBB W5, #0x0, [W15]
016DB8  3A0005     BRA NZ, 0x16DC4
21965:                        {
21966:                         PWM1_A_H=0;
016DBA  A92E44     BCLR LATE, #1
21967:                         PWM1_A_L=1;
016DBC  A80E44     BSET LATE, #0
21968:                         PEN1_A_H=0;
016DBE  A9EC23     BCLR 0xC23, #7
21969:                         PEN1_A_L=0;
016DC0  A9CC23     BCLR 0xC23, #6
016DC2  370004     BRA 0x16DCC
21970:                        }
21971:                        else
21972:                        {
21973:                         PWM1_A_H=0;
016DC4  A92E44     BCLR LATE, #1
21974:                         PWM1_A_L=0;
016DC6  A90E44     BCLR LATE, #0
21975:                         PEN1_A_H=1;
016DC8  A8EC23     BSET 0xC23, #7
21976:                         PEN1_A_L=0;
016DCA  A9CC23     BCLR 0xC23, #6
21977:                        }
21978:             
21979:                        if (TabRes1==0)
016DCC  81FEE4     MOV TabRes1, W4
016DCE  81FEF5     MOV 0x3FDE, W5
016DD0  520FE0     SUB W4, #0x0, [W15]
016DD2  5A8FE0     SUBB W5, #0x0, [W15]
016DD4  3A0005     BRA NZ, 0x16DE0
21980:                        {
21981:                         PWM1_B_H=0;
016DD6  A96E44     BCLR LATE, #3
21982:                         PWM1_B_L=1;
016DD8  A84E44     BSET LATE, #2
21983:                         PEN1_B_H=0;
016DDA  A9EC43     BCLR 0xC43, #7
21984:                         PEN1_B_L=0;
016DDC  A9CC43     BCLR 0xC43, #6
016DDE  370004     BRA 0x16DE8
21985:                        }
21986:                        else
21987:                        {
21988:                         PWM1_B_H=0;
016DE0  A96E44     BCLR LATE, #3
21989:                         PWM1_B_L=0;
016DE2  A94E44     BCLR LATE, #2
21990:                         PEN1_B_H=1;
016DE4  A8EC43     BSET 0xC43, #7
21991:                         PEN1_B_L=0;
016DE6  A9CC43     BCLR 0xC43, #6
21992:                        }
21993:             
21994:             
21995:                        if (TabRes2==0)
016DE8  81FF04     MOV TabRes2, W4
016DEA  81FF15     MOV 0x3FE2, W5
016DEC  520FE0     SUB W4, #0x0, [W15]
016DEE  5A8FE0     SUBB W5, #0x0, [W15]
016DF0  3A0005     BRA NZ, 0x16DFC
21996:                        {
21997:                         PWM1_C_H=0;
016DF2  A9AE44     BCLR LATE, #5
21998:                         PWM1_C_L=1;
016DF4  A88E44     BSET LATE, #4
21999:                         PEN1_C_H=0;
016DF6  A9EC63     BCLR 0xC63, #7
22000:                         PEN1_C_L=0;
016DF8  A9CC63     BCLR 0xC63, #6
016DFA  370004     BRA 0x16E04
22001:                        }
22002:                        else
22003:                        {
22004:                         PWM1_C_H=0;
016DFC  A9AE44     BCLR LATE, #5
22005:                         PWM1_C_L=0;
016DFE  A98E44     BCLR LATE, #4
22006:                         PEN1_C_H=1;
016E00  A8EC63     BSET 0xC63, #7
22007:                         PEN1_C_L=0;
016E02  A9CC63     BCLR 0xC63, #6
22008:                        }
22009:                
22010:                        }
22011:             
22012:             
22013:                        if (!SIN_MIDDLE)
016E04  809765     MOV StatFlgs2, W5
016E06  240004     MOV #0x4000, W4
016E08  628204     AND W5, W4, W4
016E0A  520FE0     SUB W4, #0x0, [W15]
016E0C  3A003A     BRA NZ, 0x16E82
22014:                        {
22015:                       SV_PWM1_0 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes0)>>8) ;
016E0E  81F506     MOV Amplitude1Tmp, W6
016E10  81F517     MOV 0x3EA2, W7
016E12  81FEC4     MOV TabRes0, W4
016E14  81FED5     MOV 0x3FDA, W5
016E16  B83884     MUL.UU W7, W4, W0
016E18  B82986     MUL.UU W5, W6, W2
016E1A  780082     MOV W2, W1
016E1C  400001     ADD W0, W1, W0
016E1E  780306     MOV W6, W6
016E20  780204     MOV W4, W4
016E22  B83204     MUL.UU W6, W4, W4
016E24  400005     ADD W0, W5, W0
016E26  780280     MOV W0, W5
016E28  DD2B48     SL W5, #8, W6
016E2A  DE2248     LSR W4, #8, W4
016E2C  730204     IOR W6, W4, W4
016E2E  DE2AC8     LSR W5, #8, W5
016E30  780204     MOV W4, W4
016E32  888814     MOV W4, SV_PWM1_0
22016:                       SV_PWM1_1 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes1)>>8) ;
016E34  81F506     MOV Amplitude1Tmp, W6
016E36  81F517     MOV 0x3EA2, W7
016E38  81FEE4     MOV TabRes1, W4
016E3A  81FEF5     MOV 0x3FDE, W5
016E3C  B83884     MUL.UU W7, W4, W0
016E3E  B82986     MUL.UU W5, W6, W2
016E40  780082     MOV W2, W1
016E42  400001     ADD W0, W1, W0
016E44  780306     MOV W6, W6
016E46  780204     MOV W4, W4
016E48  B83204     MUL.UU W6, W4, W4
016E4A  400005     ADD W0, W5, W0
016E4C  780280     MOV W0, W5
016E4E  DD2B48     SL W5, #8, W6
016E50  DE2248     LSR W4, #8, W4
016E52  730204     IOR W6, W4, W4
016E54  DE2AC8     LSR W5, #8, W5
016E56  780204     MOV W4, W4
016E58  888824     MOV W4, SV_PWM1_1
22017:                       SV_PWM1_2 = (unsigned int)(((unsigned long int)Amplitude1Tmp * TabRes2)>>8) ;
016E5A  81F506     MOV Amplitude1Tmp, W6
016E5C  81F517     MOV 0x3EA2, W7
016E5E  81FF04     MOV TabRes2, W4
016E60  81FF15     MOV 0x3FE2, W5
016E62  B83884     MUL.UU W7, W4, W0
016E64  B82986     MUL.UU W5, W6, W2
016E66  780082     MOV W2, W1
016E68  400001     ADD W0, W1, W0
016E6A  780306     MOV W6, W6
016E6C  780204     MOV W4, W4
016E6E  B83204     MUL.UU W6, W4, W4
016E70  400005     ADD W0, W5, W0
016E72  780280     MOV W0, W5
016E74  DD2B48     SL W5, #8, W6
016E76  DE2248     LSR W4, #8, W4
016E78  730204     IOR W6, W4, W4
016E7A  DE2AC8     LSR W5, #8, W5
016E7C  780204     MOV W4, W4
016E7E  888834     MOV W4, SV_PWM1_2
22018:                        }
22019:                     else
22020:                     {
22021:                       SV_PWM1_0 = (unsigned int)((((long int)Amplitude1Tmp * TabRes0)>>8)+MAX_PWM_CONST/2) ;
016E82  81F504     MOV Amplitude1Tmp, W4
016E84  81F515     MOV 0x3EA2, W5
016E86  BE0304     MOV.D W4, W6
016E88  81FEC4     MOV TabRes0, W4
016E8A  81FED5     MOV 0x3FDA, W5
016E8C  B83884     MUL.UU W7, W4, W0
016E8E  B82986     MUL.UU W5, W6, W2
016E90  780082     MOV W2, W1
016E92  400001     ADD W0, W1, W0
016E94  780306     MOV W6, W6
016E96  780204     MOV W4, W4
016E98  B83204     MUL.UU W6, W4, W4
016E9A  400005     ADD W0, W5, W0
016E9C  780280     MOV W0, W5
016E9E  DD2B48     SL W5, #8, W6
016EA0  DE2248     LSR W4, #8, W4
016EA2  730204     IOR W6, W4, W4
016EA4  DEAAC8     ASR W5, #8, W5
016EA6  780284     MOV W4, W5
016EA8  8092D6     MOV MAX_PWM_CONST, W6
016EAA  200024     MOV #0x2, W4
016EAC  090011     REPEAT #0x11
016EAE  D80304     DIV.SW W6, W4
016EB0  780200     MOV W0, W4
016EB2  428204     ADD W5, W4, W4
016EB4  888814     MOV W4, SV_PWM1_0
22022:                       SV_PWM1_1 = (unsigned int)((((long int)Amplitude1Tmp * TabRes1)>>8)+MAX_PWM_CONST/2) ;
016EB6  81F504     MOV Amplitude1Tmp, W4
016EB8  81F515     MOV 0x3EA2, W5
016EBA  BE0304     MOV.D W4, W6
016EBC  81FEE4     MOV TabRes1, W4
016EBE  81FEF5     MOV 0x3FDE, W5
016EC0  B83884     MUL.UU W7, W4, W0
016EC2  B82986     MUL.UU W5, W6, W2
016EC4  780082     MOV W2, W1
016EC6  400001     ADD W0, W1, W0
016EC8  780306     MOV W6, W6
016ECA  780204     MOV W4, W4
016ECC  B83204     MUL.UU W6, W4, W4
016ECE  400005     ADD W0, W5, W0
016ED0  780280     MOV W0, W5
016ED2  DD2B48     SL W5, #8, W6
016ED4  DE2248     LSR W4, #8, W4
016ED6  730204     IOR W6, W4, W4
016ED8  DEAAC8     ASR W5, #8, W5
016EDA  780284     MOV W4, W5
016EDC  8092D6     MOV MAX_PWM_CONST, W6
016EDE  200024     MOV #0x2, W4
016EE0  090011     REPEAT #0x11
016EE2  D80304     DIV.SW W6, W4
016EE4  780200     MOV W0, W4
016EE6  428204     ADD W5, W4, W4
016EE8  888824     MOV W4, SV_PWM1_1
22023:                       SV_PWM1_2 = (unsigned int)((((long int)Amplitude1Tmp * TabRes2)>>8)+MAX_PWM_CONST/2) ;
016EEA  81F504     MOV Amplitude1Tmp, W4
016EEC  81F515     MOV 0x3EA2, W5
016EEE  BE0304     MOV.D W4, W6
016EF0  81FF04     MOV TabRes2, W4
016EF2  81FF15     MOV 0x3FE2, W5
016EF4  B83884     MUL.UU W7, W4, W0
016EF6  B82986     MUL.UU W5, W6, W2
016EF8  780082     MOV W2, W1
016EFA  400001     ADD W0, W1, W0
016EFC  780306     MOV W6, W6
016EFE  780204     MOV W4, W4
016F00  B83204     MUL.UU W6, W4, W4
016F02  400005     ADD W0, W5, W0
016F04  780280     MOV W0, W5
016F06  DD2B48     SL W5, #8, W6
016F08  DE2248     LSR W4, #8, W4
016F0A  730204     IOR W6, W4, W4
016F0C  DEAAC8     ASR W5, #8, W5
016F0E  780284     MOV W4, W5
016F10  8092D6     MOV MAX_PWM_CONST, W6
016F12  200024     MOV #0x2, W4
016F14  090011     REPEAT #0x11
016F16  D80304     DIV.SW W6, W4
016F18  780200     MOV W0, W4
016F1A  428204     ADD W5, W4, W4
016F1C  888834     MOV W4, SV_PWM1_2
22024:                     }
22025:             
22026:                       break ;
016E80  370050     BRA 0x16F22
016F1E  370001     BRA 0x16F22
22027:             
22028:             
22029:                   }
22030:             
22031:             
22032:                       }
22033:                    
22034:             
22035:             
22036:                     SetPWM1_SV();
016F22  070004     RCALL SetPWM1_SV
016F24  370001     BRA 0x16F28
22037:             
22038:             
22039:                 //TST_PIN=0;
22040:             
22041:             
22042:             
22043:             }
016F28  FA8000     ULNK
016F2A  060000     RETURN
22044:             
22045:             
22046:             void SetPWM1_SV(void)
22047:             {
016F2C  FA0002     LNK #0x2
22048:                 
22049:                 if (ChagerViaMotor)
016F2E  809604     MOV Flgs1, W4
016F30  620262     AND W4, #0x2, W4
016F32  520FE0     SUB W4, #0x0, [W15]
016F34  320002     BRA Z, 0x16F3A
22050:                 {
22051:                     SetPWM_ChagerViaMotor();
016F36  0731DB     RCALL SetPWM_ChagerViaMotor
22052:                     return;
016F38  37004E     BRA 0x16FD6
22053:                 }
22054:                 
22055:                 
22056:                 
22057:                 
22058:                 
22059:                 
22060:                 
22061:                 int PWM=SV_PWM1_0;
016F3A  808814     MOV SV_PWM1_0, W4
016F3C  780F04     MOV W4, [W14]
22062:             
22063:                 
22064:                 if (PWM<DEADTIME_GLUK)
016F3E  78021E     MOV [W14], W4
016F40  520FE0     SUB W4, #0x0, [W15]
016F42  3D000A     BRA GE, 0x16F58
22065:                 {
22066:                     DTR1=DEADTIME*2;     //DTRx Registers are ignored in this mode
016F44  200C84     MOV #0xC8, W4
016F46  886154     MOV W4, DTR1
22067:                     ALTDTR1=DEADTIME*2;
016F48  200C84     MOV #0xC8, W4
016F4A  886164     MOV W4, ALTDTR1
22068:                     PWM=PWM+DEADTIME+Khard;
016F4C  78029E     MOV [W14], W5
016F4E  808844     MOV Khard, W4
016F50  428204     ADD W5, W4, W4
016F52  B00644     ADD #0x64, W4
016F54  780F04     MOV W4, [W14]
016F56  370009     BRA 0x16F6A
22069:                 }    
22070:                 else
22071:                 {
22072:                     DTR1=DEADTIME;     //DTRx Registers are ignored in this mode
016F58  200644     MOV #0x64, W4
016F5A  886154     MOV W4, DTR1
22073:                     ALTDTR1=DEADTIME;
016F5C  200644     MOV #0x64, W4
016F5E  886164     MOV W4, ALTDTR1
22074:                     PWM=PWM+DEADTIME_2+Khard;
016F60  78029E     MOV [W14], W5
016F62  808844     MOV Khard, W4
016F64  428204     ADD W5, W4, W4
016F66  B00324     ADD #0x32, W4
016F68  780F04     MOV W4, [W14]
22075:             
22076:                 }
22077:                 
22078:                 
22079:                 PDC1 = PWM;//SV_PWM1_0+DEADTIME_2+Khard;
016F6A  78021E     MOV [W14], W4
016F6C  886134     MOV W4, PDC1
22080:             
22081:             
22082:             
22083:                 PWM=SV_PWM1_1;
016F6E  808824     MOV SV_PWM1_1, W4
016F70  780F04     MOV W4, [W14]
22084:             
22085:                 
22086:                 if (PWM<DEADTIME_GLUK)
016F72  78021E     MOV [W14], W4
016F74  520FE0     SUB W4, #0x0, [W15]
016F76  3D000A     BRA GE, 0x16F8C
22087:                 {
22088:                     DTR2=DEADTIME*2;     //DTRx Registers are ignored in this mode
016F78  200C84     MOV #0xC8, W4
016F7A  886254     MOV W4, DTR2
22089:                     ALTDTR2=DEADTIME*2;
016F7C  200C84     MOV #0xC8, W4
016F7E  886264     MOV W4, ALTDTR2
22090:                     PWM=PWM+DEADTIME+Khard;
016F80  78029E     MOV [W14], W5
016F82  808844     MOV Khard, W4
016F84  428204     ADD W5, W4, W4
016F86  B00644     ADD #0x64, W4
016F88  780F04     MOV W4, [W14]
016F8A  370009     BRA 0x16F9E
22091:                 }    
22092:                 else
22093:                 {
22094:                     DTR2=DEADTIME;     //DTRx Registers are ignored in this mode
016F8C  200644     MOV #0x64, W4
016F8E  886254     MOV W4, DTR2
22095:                     ALTDTR2=DEADTIME;
016F90  200644     MOV #0x64, W4
016F92  886264     MOV W4, ALTDTR2
22096:                     PWM=PWM+DEADTIME_2+Khard;
016F94  78029E     MOV [W14], W5
016F96  808844     MOV Khard, W4
016F98  428204     ADD W5, W4, W4
016F9A  B00324     ADD #0x32, W4
016F9C  780F04     MOV W4, [W14]
22097:             
22098:                 }
22099:                 
22100:                 
22101:                 PDC2 = PWM ;//SV_PWM1_1+DEADTIME_2+Khard;
016F9E  78021E     MOV [W14], W4
016FA0  886234     MOV W4, PDC2
22102:                 
22103:                 
22104:                 
22105:                 
22106:                 
22107:                 PWM=SV_PWM1_2;
016FA2  808834     MOV SV_PWM1_2, W4
016FA4  780F04     MOV W4, [W14]
22108:             
22109:                 
22110:                 if (PWM<DEADTIME_GLUK)
016FA6  78021E     MOV [W14], W4
016FA8  520FE0     SUB W4, #0x0, [W15]
016FAA  3D000A     BRA GE, 0x16FC0
22111:                 {
22112:                     DTR3=DEADTIME*2;     //DTRx Registers are ignored in this mode
016FAC  200C84     MOV #0xC8, W4
016FAE  886354     MOV W4, DTR3
22113:                     ALTDTR3=DEADTIME*2;
016FB0  200C84     MOV #0xC8, W4
016FB2  886364     MOV W4, ALTDTR3
22114:                     PWM=PWM+DEADTIME+Khard;
016FB4  78029E     MOV [W14], W5
016FB6  808844     MOV Khard, W4
016FB8  428204     ADD W5, W4, W4
016FBA  B00644     ADD #0x64, W4
016FBC  780F04     MOV W4, [W14]
016FBE  370009     BRA 0x16FD2
22115:                 }    
22116:                 else
22117:                 {
22118:                     DTR3=DEADTIME;     //DTRx Registers are ignored in this mode
016FC0  200644     MOV #0x64, W4
016FC2  886354     MOV W4, DTR3
22119:                     ALTDTR3=DEADTIME;
016FC4  200644     MOV #0x64, W4
016FC6  886364     MOV W4, ALTDTR3
22120:                     PWM=PWM+DEADTIME_2+Khard;
016FC8  78029E     MOV [W14], W5
016FCA  808844     MOV Khard, W4
016FCC  428204     ADD W5, W4, W4
016FCE  B00324     ADD #0x32, W4
016FD0  780F04     MOV W4, [W14]
22121:             
22122:                 }
22123:                 
22124:                 
22125:                 PDC3 = PWM;//SV_PWM1_2+DEADTIME_2+Khard;
016FD2  78021E     MOV [W14], W4
016FD4  886334     MOV W4, PDC3
22126:                 
22127:                 
22128:                 
22129:                 
22130:                 
22131:             
22132:             
22133:             
22134:             }
016FD6  FA8000     ULNK
016FD8  060000     RETURN
22135:             
22136:             
22137:             
22138:             
22139:             
22140:             unsigned char ReadSensor1_B_V(void)
22141:             {
016FDA  FA0002     LNK #0x2
22142:             unsigned char    Sens=0;
016FDC  EB4200     CLR.B W4
016FDE  784F04     MOV.B W4, [W14]
22143:                 if (Hall1_A)
016FE0  807294     MOV PORTF, W4
016FE2  620268     AND W4, #0x8, W4
016FE4  520FE0     SUB W4, #0x0, [W15]
016FE6  320001     BRA Z, 0x16FEA
22144:                 {
22145:                     Sens=Sens|1;
016FE8  A0041E     BSET.B [W14], #0
22146:                 }
22147:             
22148:                 if (Hall1_B)
016FEA  807294     MOV PORTF, W4
016FEC  620264     AND W4, #0x4, W4
016FEE  520FE0     SUB W4, #0x0, [W15]
016FF0  320001     BRA Z, 0x16FF4
22149:                 {
22150:                     Sens=Sens|2;
016FF2  A0141E     BSET.B [W14], #1
22151:                 }
22152:             
22153:                 if (Hall1_C)
016FF4  807295     MOV PORTF, W5
016FF6  200204     MOV #0x20, W4
016FF8  628204     AND W5, W4, W4
016FFA  520FE0     SUB W4, #0x0, [W15]
016FFC  320001     BRA Z, 0x17000
22154:                 {
22155:                     Sens=Sens|4;
016FFE  A0241E     BSET.B [W14], #2
22156:                 }
22157:                 if ((Sens==0)||(Sens==7))
017000  78421E     MOV.B [W14], W4
017002  524FE0     SUB.B W4, #0x0, [W15]
017004  320003     BRA Z, 0x1700C
017006  78421E     MOV.B [W14], W4
017008  524FE7     SUB.B W4, #0x7, [W15]
01700A  3A0003     BRA NZ, 0x17012
22158:                     HallErrCnt++;
01700C  81A6A4     MOV HallErrCnt, W4
01700E  E80204     INC W4, W4
017010  89A6A4     MOV W4, HallErrCnt
22159:             
22160:             
22161:             #if defined SEL_SENSOR_ORDER
22162:                 Sens=ChangeSensorOrder(Sens,SensOrder1);
017012  212494     MOV #0x1249, W4
017014  784214     MOV.B [W4], W4
017016  784084     MOV.B W4, W1
017018  78401E     MOV.B [W14], W0
01701A  07E850     RCALL ChangeSensorOrder
01701C  784200     MOV.B W0, W4
01701E  784F04     MOV.B W4, [W14]
22163:             #endif
22164:             
22165:             return Sens;
017020  78421E     MOV.B [W14], W4
22166:             }
017022  784004     MOV.B W4, W0
017024  FA8000     ULNK
017026  060000     RETURN
22167:             unsigned char ReadSensor1_F_V(void)
22168:             {
017028  FA0002     LNK #0x2
22169:             unsigned char    Sens=0;
01702A  EB4200     CLR.B W4
01702C  784F04     MOV.B W4, [W14]
22170:                 if (!Hall1_A)
01702E  807294     MOV PORTF, W4
017030  620268     AND W4, #0x8, W4
017032  520FE0     SUB W4, #0x0, [W15]
017034  3A0001     BRA NZ, 0x17038
22171:                 {
22172:                     Sens=Sens|1;
017036  A0041E     BSET.B [W14], #0
22173:                 }
22174:             
22175:                 if (!Hall1_B)
017038  807294     MOV PORTF, W4
01703A  620264     AND W4, #0x4, W4
01703C  520FE0     SUB W4, #0x0, [W15]
01703E  3A0001     BRA NZ, 0x17042
22176:                 {
22177:                     Sens=Sens|2;
017040  A0141E     BSET.B [W14], #1
22178:                 }
22179:             
22180:                 if (!Hall1_C)
017042  807295     MOV PORTF, W5
017044  200204     MOV #0x20, W4
017046  628204     AND W5, W4, W4
017048  520FE0     SUB W4, #0x0, [W15]
01704A  3A0001     BRA NZ, 0x1704E
22181:                 {
22182:                     Sens=Sens|4;
01704C  A0241E     BSET.B [W14], #2
22183:                 }
22184:                 if ((Sens==0)||(Sens==7))
01704E  78421E     MOV.B [W14], W4
017050  524FE0     SUB.B W4, #0x0, [W15]
017052  320003     BRA Z, 0x1705A
017054  78421E     MOV.B [W14], W4
017056  524FE7     SUB.B W4, #0x7, [W15]
017058  3A0003     BRA NZ, 0x17060
22185:                     HallErrCnt++;
01705A  81A6A4     MOV HallErrCnt, W4
01705C  E80204     INC W4, W4
01705E  89A6A4     MOV W4, HallErrCnt
22186:             
22187:             
22188:             #if defined SEL_SENSOR_ORDER
22189:                 Sens=ChangeSensorOrder(Sens,SensOrder1);
017060  212494     MOV #0x1249, W4
017062  784214     MOV.B [W4], W4
017064  784084     MOV.B W4, W1
017066  78401E     MOV.B [W14], W0
017068  07E829     RCALL ChangeSensorOrder
01706A  784200     MOV.B W0, W4
01706C  784F04     MOV.B W4, [W14]
22190:             #endif
22191:             
22192:             return Sens;
01706E  78421E     MOV.B [W14], W4
22193:             }
017070  784004     MOV.B W4, W0
017072  FA8000     ULNK
017074  060000     RETURN
22194:             
22195:             
22196:             
22197:             void SetHallDelay1_F_UP(void)
22198:             {
017076  FA0000     LNK #0x0
22199:                 if (HallDelay1_F<HallDelay1_FMustBe)
017078  2425A4     MOV #0x425A, W4
01707A  784294     MOV.B [W4], W5
01707C  2110E4     MOV #0x110E, W4
01707E  784214     MOV.B [W4], W4
017080  52CF84     SUB.B W5, W4, [W15]
017082  3D0004     BRA GE, 0x1708C
22200:                     HallDelay1_F_UP=1;
017084  809674     MOV 0x12CE, W4
017086  A06004     BSET W4, #6
017088  889674     MOV W4, 0x12CE
01708A  370003     BRA 0x17092
22201:                 else
22202:                     HallDelay1_F_UP=0;
01708C  809674     MOV 0x12CE, W4
01708E  A16004     BCLR W4, #6
017090  889674     MOV W4, 0x12CE
22203:             }
017092  FA8000     ULNK
017094  060000     RETURN
22204:             
22205:             void SetHallDelay1_B_UP(void)
22206:             {
017096  FA0000     LNK #0x0
22207:                 if (HallDelay1_B<HallDelay1_BMustBe)
017098  2425B4     MOV #0x425B, W4
01709A  784294     MOV.B [W4], W5
01709C  2110F4     MOV #0x110F, W4
01709E  784214     MOV.B [W4], W4
0170A0  52CF84     SUB.B W5, W4, [W15]
0170A2  3D0004     BRA GE, 0x170AC
22208:                     HallDelay1_B_UP=1;
0170A4  809674     MOV 0x12CE, W4
0170A6  A07004     BSET W4, #7
0170A8  889674     MOV W4, 0x12CE
0170AA  370003     BRA 0x170B2
22209:                 else
22210:                     HallDelay1_B_UP=0;
0170AC  809674     MOV 0x12CE, W4
0170AE  A17004     BCLR W4, #7
0170B0  889674     MOV W4, 0x12CE
22211:             }
0170B2  FA8000     ULNK
0170B4  060000     RETURN
22212:             
22213:             
22214:             
22215:             
22216:             
22217:             
22218:             
22219:             void RdSensors(void)
22220:             {
0170B6  FA0000     LNK #0x0
22221:                     IEC1bits.CNIE = 0;
0170B8  A96822     BCLR IEC1, #3
22222:                     if (!Vector)
0170BA  809684     MOV Flgs5, W4
0170BC  620270     AND W4, #0x10, W4
0170BE  520FE0     SUB W4, #0x0, [W15]
0170C0  3A000D     BRA NZ, 0x170DC
22223:                     {
22224:                     Sensor1=ReadSensor1_B();
0170C2  078EE7     RCALL ReadSensor1_B
0170C4  784200     MOV.B W0, W4
0170C6  212465     MOV #0x1246, W5
0170C8  784A84     MOV.B W4, [W5]
22225:                     Sensor1_Prev=Sensor1;
0170CA  212464     MOV #0x1246, W4
0170CC  784214     MOV.B [W4], W4
0170CE  212475     MOV #0x1247, W5
0170D0  784A84     MOV.B W4, [W5]
22226:                     Phases1();
0170D2  078E01     RCALL Phases1
22227:                     PrevForward1=0;
0170D4  8095E4     MOV Flgs, W4
0170D6  A19004     BCLR W4, #9
0170D8  8895E4     MOV W4, Flgs
0170DA  37002B     BRA 0x17132
22228:                     }
22229:                     else
22230:                     {
22231:                           IEC3bits.T8IE = 0;
0170DC  A96826     BCLR IEC3, #3
22232:                         if (!DirPWM1)
0170DE  809754     MOV StatFlgs1, W4
0170E0  620261     AND W4, #0x1, W4
0170E2  520FE0     SUB W4, #0x0, [W15]
0170E4  3A000F     BRA NZ, 0x17104
22233:                         {
22234:                     if (Forward1)
0170E6  8095E5     MOV Flgs, W5
0170E8  200404     MOV #0x40, W4
0170EA  628204     AND W5, W4, W4
0170EC  520FE0     SUB W4, #0x0, [W15]
0170EE  320005     BRA Z, 0x170FA
22235:                     Sensor1=ReadSensor1_F_V();
0170F0  07FF9B     RCALL ReadSensor1_F_V
0170F2  784200     MOV.B W0, W4
0170F4  212465     MOV #0x1246, W5
0170F6  784A84     MOV.B W4, [W5]
0170F8  370013     BRA 0x17120
22236:                     else
22237:                     Sensor1=ReadSensor1_B_V();
0170FA  07FF6F     RCALL ReadSensor1_B_V
0170FC  784200     MOV.B W0, W4
0170FE  212465     MOV #0x1246, W5
017100  784A84     MOV.B W4, [W5]
017102  37000E     BRA 0x17120
22238:                         }
22239:                         else
22240:                         {
22241:                     if (Forward1)
017104  8095E5     MOV Flgs, W5
017106  200404     MOV #0x40, W4
017108  628204     AND W5, W4, W4
01710A  520FE0     SUB W4, #0x0, [W15]
01710C  320005     BRA Z, 0x17118
22242:                     Sensor1=ReadSensor1_B_V();
01710E  07FF65     RCALL ReadSensor1_B_V
017110  784200     MOV.B W0, W4
017112  212465     MOV #0x1246, W5
017114  784A84     MOV.B W4, [W5]
017116  370004     BRA 0x17120
22243:                     else
22244:                     Sensor1=ReadSensor1_F_V();
017118  07FF87     RCALL ReadSensor1_F_V
01711A  784200     MOV.B W0, W4
01711C  212465     MOV #0x1246, W5
01711E  784A84     MOV.B W4, [W5]
22245:                         }
22246:             
22247:                     Sensor1_Prev=Sensor1;
017120  212464     MOV #0x1246, W4
017122  784214     MOV.B [W4], W4
017124  212475     MOV #0x1247, W5
017126  784A84     MOV.B W4, [W5]
22248:                     Sensor1_Prev_OP=Sensor1_Prev;
017128  212474     MOV #0x1247, W4
01712A  784214     MOV.B [W4], W4
01712C  210FA5     MOV #0x10FA, W5
01712E  784A84     MOV.B W4, [W5]
22249:                     IEC3bits.T8IE = 1;
017130  A86826     BSET IEC3, #3
22250:             
22251:             
22252:                     }
22253:                     
22254:                     IEC1bits.CNIE = 1;
017132  A86822     BSET IEC1, #3
22255:             }
017134  FA8000     ULNK
017136  060000     RETURN
22256:             
22257:             
22258:             
22259:             
22260:             void CalculateCalibrationHalls(void)
22261:             {
017138  FA0008     LNK #0x8
01713A  BE9F88     MOV.D W8, [W15++]
22262:             double Diff,Res;
22263:                 if (!HvCalibrationHalls)
01713C  809675     MOV 0x12CE, W5
01713E  280004     MOV #0x8000, W4
017140  628204     AND W5, W4, W4
017142  520FE0     SUB W4, #0x0, [W15]
017144  320268     BRA Z, 0x17616
22264:                     return;
017616  000000     NOP
22265:                 HvCalibrationHalls=0;
017146  809674     MOV 0x12CE, W4
017148  A1F004     BCLR W4, #15
01714A  889674     MOV W4, 0x12CE
22266:             
22267:             
22268:             NearSensors[1][0]=5;//1_L
01714C  237205     MOV #0x3720, W5
01714E  B3C054     MOV.B #0x5, W4
017150  784A84     MOV.B W4, [W5]
22269:             NearSensors[1][1]=3;//1_R
017152  237215     MOV #0x3721, W5
017154  B3C034     MOV.B #0x3, W4
017156  784A84     MOV.B W4, [W5]
22270:                 Diff=(double)Hall5ClrbRes-(double)Hall1ClrbRes;
017158  81FE64     MOV Hall5ClrbRes, W4
01715A  81FE75     MOV 0x3FCE, W5
01715C  BE0004     MOV.D W4, W0
01715E  02257C     CALL ___floatsisf
017160  000000     NOP
017162  BE0400     MOV.D W0, W8
017164  81FDE4     MOV Hall1ClrbRes, W4
017166  81FDF5     MOV 0x3FBE, W5
017168  BE0004     MOV.D W4, W0
01716A  02257C     CALL ___floatsisf
01716C  000000     NOP
01716E  BE0200     MOV.D W0, W4
017170  BE0104     MOV.D W4, W2
017172  BE0008     MOV.D W8, W0
017174  0222D0     CALL ___subsf3
017176  000000     NOP
017178  BE0200     MOV.D W0, W4
01717A  BE8F04     MOV.D W4, [W14]
22271:                 Res=Diff/(double)Hall1ClrbRes;
01717C  81FDE4     MOV Hall1ClrbRes, W4
01717E  81FDF5     MOV 0x3FBE, W5
017180  BE0004     MOV.D W4, W0
017182  02257C     CALL ___floatsisf
017184  000000     NOP
017186  BE0200     MOV.D W0, W4
017188  BE0104     MOV.D W4, W2
01718A  BE001E     MOV.D [W14], W0
01718C  02245A     CALL ___divsf3
01718E  000000     NOP
017190  BE0200     MOV.D W0, W4
017192  980724     MOV W4, [W14+4]
017194  980735     MOV W5, [W14+6]
22272:                 Res=Res*128;
017196  200002     MOV #0x0, W2
017198  243003     MOV #0x4300, W3
01719A  90002E     MOV [W14+4], W0
01719C  9000BE     MOV [W14+6], W1
01719E  022630     CALL ___mulsf3
0171A0  000000     NOP
0171A2  BE0200     MOV.D W0, W4
0171A4  980724     MOV W4, [W14+4]
0171A6  980735     MOV W5, [W14+6]
22273:             NearSensors[1][2]=(char)Res;
0171A8  90002E     MOV [W14+4], W0
0171AA  9000BE     MOV [W14+6], W1
0171AC  022504     CALL ___fixsfsi
0171AE  000000     NOP
0171B0  BE0200     MOV.D W0, W4
0171B2  784204     MOV.B W4, W4
0171B4  237225     MOV #0x3722, W5
0171B6  784A84     MOV.B W4, [W5]
22274:             
22275:                 Diff=(double)Hall3ClrbRes-(double)Hall1ClrbRes;
0171B8  81FE24     MOV Hall3ClrbRes, W4
0171BA  81FE35     MOV 0x3FC6, W5
0171BC  BE0004     MOV.D W4, W0
0171BE  02257C     CALL ___floatsisf
0171C0  000000     NOP
0171C2  BE0400     MOV.D W0, W8
0171C4  81FDE4     MOV Hall1ClrbRes, W4
0171C6  81FDF5     MOV 0x3FBE, W5
0171C8  BE0004     MOV.D W4, W0
0171CA  02257C     CALL ___floatsisf
0171CC  000000     NOP
0171CE  BE0200     MOV.D W0, W4
0171D0  BE0104     MOV.D W4, W2
0171D2  BE0008     MOV.D W8, W0
0171D4  0222D0     CALL ___subsf3
0171D6  000000     NOP
0171D8  BE0200     MOV.D W0, W4
0171DA  BE8F04     MOV.D W4, [W14]
22276:                 Res=Diff/(double)Hall1ClrbRes;
0171DC  81FDE4     MOV Hall1ClrbRes, W4
0171DE  81FDF5     MOV 0x3FBE, W5
0171E0  BE0004     MOV.D W4, W0
0171E2  02257C     CALL ___floatsisf
0171E4  000000     NOP
0171E6  BE0200     MOV.D W0, W4
0171E8  BE0104     MOV.D W4, W2
0171EA  BE001E     MOV.D [W14], W0
0171EC  02245A     CALL ___divsf3
0171EE  000000     NOP
0171F0  BE0200     MOV.D W0, W4
0171F2  980724     MOV W4, [W14+4]
0171F4  980735     MOV W5, [W14+6]
22277:                 Res=Res*128;
0171F6  200002     MOV #0x0, W2
0171F8  243003     MOV #0x4300, W3
0171FA  90002E     MOV [W14+4], W0
0171FC  9000BE     MOV [W14+6], W1
0171FE  022630     CALL ___mulsf3
017200  000000     NOP
017202  BE0200     MOV.D W0, W4
017204  980724     MOV W4, [W14+4]
017206  980735     MOV W5, [W14+6]
22278:             NearSensors[1][3]=(char)Res;
017208  90002E     MOV [W14+4], W0
01720A  9000BE     MOV [W14+6], W1
01720C  022504     CALL ___fixsfsi
01720E  000000     NOP
017210  BE0200     MOV.D W0, W4
017212  784204     MOV.B W4, W4
017214  237235     MOV #0x3723, W5
017216  784A84     MOV.B W4, [W5]
22279:             
22280:             
22281:             
22282:             NearSensors[2][0]=3;//2_L
017218  237245     MOV #0x3724, W5
01721A  B3C034     MOV.B #0x3, W4
01721C  784A84     MOV.B W4, [W5]
22283:             NearSensors[2][1]=6;//2_R
01721E  237255     MOV #0x3725, W5
017220  B3C064     MOV.B #0x6, W4
017222  784A84     MOV.B W4, [W5]
22284:                 Diff=(double)Hall3ClrbRes-(double)Hall2ClrbRes;
017224  81FE24     MOV Hall3ClrbRes, W4
017226  81FE35     MOV 0x3FC6, W5
017228  BE0004     MOV.D W4, W0
01722A  02257C     CALL ___floatsisf
01722C  000000     NOP
01722E  BE0400     MOV.D W0, W8
017230  81FE04     MOV Hall2ClrbRes, W4
017232  81FE15     MOV 0x3FC2, W5
017234  BE0004     MOV.D W4, W0
017236  02257C     CALL ___floatsisf
017238  000000     NOP
01723A  BE0200     MOV.D W0, W4
01723C  BE0104     MOV.D W4, W2
01723E  BE0008     MOV.D W8, W0
017240  0222D0     CALL ___subsf3
017242  000000     NOP
017244  BE0200     MOV.D W0, W4
017246  BE8F04     MOV.D W4, [W14]
22285:                 Res=Diff/(double)Hall2ClrbRes;
017248  81FE04     MOV Hall2ClrbRes, W4
01724A  81FE15     MOV 0x3FC2, W5
01724C  BE0004     MOV.D W4, W0
01724E  02257C     CALL ___floatsisf
017250  000000     NOP
017252  BE0200     MOV.D W0, W4
017254  BE0104     MOV.D W4, W2
017256  BE001E     MOV.D [W14], W0
017258  02245A     CALL ___divsf3
01725A  000000     NOP
01725C  BE0200     MOV.D W0, W4
01725E  980724     MOV W4, [W14+4]
017260  980735     MOV W5, [W14+6]
22286:                 Res=Res*128;
017262  200002     MOV #0x0, W2
017264  243003     MOV #0x4300, W3
017266  90002E     MOV [W14+4], W0
017268  9000BE     MOV [W14+6], W1
01726A  022630     CALL ___mulsf3
01726C  000000     NOP
01726E  BE0200     MOV.D W0, W4
017270  980724     MOV W4, [W14+4]
017272  980735     MOV W5, [W14+6]
22287:             NearSensors[2][2]=(char)Res;
017274  90002E     MOV [W14+4], W0
017276  9000BE     MOV [W14+6], W1
017278  022504     CALL ___fixsfsi
01727A  000000     NOP
01727C  BE0200     MOV.D W0, W4
01727E  784204     MOV.B W4, W4
017280  237265     MOV #0x3726, W5
017282  784A84     MOV.B W4, [W5]
22288:             
22289:                 Diff=(double)Hall6ClrbRes-(double)Hall2ClrbRes;
017284  81FE84     MOV Hall6ClrbRes, W4
017286  81FE95     MOV 0x3FD2, W5
017288  BE0004     MOV.D W4, W0
01728A  02257C     CALL ___floatsisf
01728C  000000     NOP
01728E  BE0400     MOV.D W0, W8
017290  81FE04     MOV Hall2ClrbRes, W4
017292  81FE15     MOV 0x3FC2, W5
017294  BE0004     MOV.D W4, W0
017296  02257C     CALL ___floatsisf
017298  000000     NOP
01729A  BE0200     MOV.D W0, W4
01729C  BE0104     MOV.D W4, W2
01729E  BE0008     MOV.D W8, W0
0172A0  0222D0     CALL ___subsf3
0172A2  000000     NOP
0172A4  BE0200     MOV.D W0, W4
0172A6  BE8F04     MOV.D W4, [W14]
22290:                 Res=Diff/(double)Hall2ClrbRes;
0172A8  81FE04     MOV Hall2ClrbRes, W4
0172AA  81FE15     MOV 0x3FC2, W5
0172AC  BE0004     MOV.D W4, W0
0172AE  02257C     CALL ___floatsisf
0172B0  000000     NOP
0172B2  BE0200     MOV.D W0, W4
0172B4  BE0104     MOV.D W4, W2
0172B6  BE001E     MOV.D [W14], W0
0172B8  02245A     CALL ___divsf3
0172BA  000000     NOP
0172BC  BE0200     MOV.D W0, W4
0172BE  980724     MOV W4, [W14+4]
0172C0  980735     MOV W5, [W14+6]
22291:                 Res=Res*128;
0172C2  200002     MOV #0x0, W2
0172C4  243003     MOV #0x4300, W3
0172C6  90002E     MOV [W14+4], W0
0172C8  9000BE     MOV [W14+6], W1
0172CA  022630     CALL ___mulsf3
0172CC  000000     NOP
0172CE  BE0200     MOV.D W0, W4
0172D0  980724     MOV W4, [W14+4]
0172D2  980735     MOV W5, [W14+6]
22292:             NearSensors[2][3]=(char)Res;
0172D4  90002E     MOV [W14+4], W0
0172D6  9000BE     MOV [W14+6], W1
0172D8  022504     CALL ___fixsfsi
0172DA  000000     NOP
0172DC  BE0200     MOV.D W0, W4
0172DE  784204     MOV.B W4, W4
0172E0  237275     MOV #0x3727, W5
0172E2  784A84     MOV.B W4, [W5]
22293:             
22294:             NearSensors[3][0]=1;//3_L
0172E4  237285     MOV #0x3728, W5
0172E6  B3C014     MOV.B #0x1, W4
0172E8  784A84     MOV.B W4, [W5]
22295:             NearSensors[3][1]=2;//3_R
0172EA  237295     MOV #0x3729, W5
0172EC  B3C024     MOV.B #0x2, W4
0172EE  784A84     MOV.B W4, [W5]
22296:                 Diff=(double)Hall1ClrbRes-(double)Hall3ClrbRes;
0172F0  81FDE4     MOV Hall1ClrbRes, W4
0172F2  81FDF5     MOV 0x3FBE, W5
0172F4  BE0004     MOV.D W4, W0
0172F6  02257C     CALL ___floatsisf
0172F8  000000     NOP
0172FA  BE0400     MOV.D W0, W8
0172FC  81FE24     MOV Hall3ClrbRes, W4
0172FE  81FE35     MOV 0x3FC6, W5
017300  BE0004     MOV.D W4, W0
017302  02257C     CALL ___floatsisf
017304  000000     NOP
017306  BE0200     MOV.D W0, W4
017308  BE0104     MOV.D W4, W2
01730A  BE0008     MOV.D W8, W0
01730C  0222D0     CALL ___subsf3
01730E  000000     NOP
017310  BE0200     MOV.D W0, W4
017312  BE8F04     MOV.D W4, [W14]
22297:                 Res=Diff/(double)Hall3ClrbRes;
017314  81FE24     MOV Hall3ClrbRes, W4
017316  81FE35     MOV 0x3FC6, W5
017318  BE0004     MOV.D W4, W0
01731A  02257C     CALL ___floatsisf
01731C  000000     NOP
01731E  BE0200     MOV.D W0, W4
017320  BE0104     MOV.D W4, W2
017322  BE001E     MOV.D [W14], W0
017324  02245A     CALL ___divsf3
017326  000000     NOP
017328  BE0200     MOV.D W0, W4
01732A  980724     MOV W4, [W14+4]
01732C  980735     MOV W5, [W14+6]
22298:                 Res=Res*128;
01732E  200002     MOV #0x0, W2
017330  243003     MOV #0x4300, W3
017332  90002E     MOV [W14+4], W0
017334  9000BE     MOV [W14+6], W1
017336  022630     CALL ___mulsf3
017338  000000     NOP
01733A  BE0200     MOV.D W0, W4
01733C  980724     MOV W4, [W14+4]
01733E  980735     MOV W5, [W14+6]
22299:             NearSensors[3][2]=(char)Res;
017340  90002E     MOV [W14+4], W0
017342  9000BE     MOV [W14+6], W1
017344  022504     CALL ___fixsfsi
017346  000000     NOP
017348  BE0200     MOV.D W0, W4
01734A  784204     MOV.B W4, W4
01734C  2372A5     MOV #0x372A, W5
01734E  784A84     MOV.B W4, [W5]
22300:             
22301:                 Diff=(double)Hall2ClrbRes-(double)Hall3ClrbRes;
017350  81FE04     MOV Hall2ClrbRes, W4
017352  81FE15     MOV 0x3FC2, W5
017354  BE0004     MOV.D W4, W0
017356  02257C     CALL ___floatsisf
017358  000000     NOP
01735A  BE0400     MOV.D W0, W8
01735C  81FE24     MOV Hall3ClrbRes, W4
01735E  81FE35     MOV 0x3FC6, W5
017360  BE0004     MOV.D W4, W0
017362  02257C     CALL ___floatsisf
017364  000000     NOP
017366  BE0200     MOV.D W0, W4
017368  BE0104     MOV.D W4, W2
01736A  BE0008     MOV.D W8, W0
01736C  0222D0     CALL ___subsf3
01736E  000000     NOP
017370  BE0200     MOV.D W0, W4
017372  BE8F04     MOV.D W4, [W14]
22302:                 Res=Diff/(double)Hall3ClrbRes;
017374  81FE24     MOV Hall3ClrbRes, W4
017376  81FE35     MOV 0x3FC6, W5
017378  BE0004     MOV.D W4, W0
01737A  02257C     CALL ___floatsisf
01737C  000000     NOP
01737E  BE0200     MOV.D W0, W4
017380  BE0104     MOV.D W4, W2
017382  BE001E     MOV.D [W14], W0
017384  02245A     CALL ___divsf3
017386  000000     NOP
017388  BE0200     MOV.D W0, W4
01738A  980724     MOV W4, [W14+4]
01738C  980735     MOV W5, [W14+6]
22303:                 Res=Res*128;
01738E  200002     MOV #0x0, W2
017390  243003     MOV #0x4300, W3
017392  90002E     MOV [W14+4], W0
017394  9000BE     MOV [W14+6], W1
017396  022630     CALL ___mulsf3
017398  000000     NOP
01739A  BE0200     MOV.D W0, W4
01739C  980724     MOV W4, [W14+4]
01739E  980735     MOV W5, [W14+6]
22304:             NearSensors[3][3]=(char)Res;
0173A0  90002E     MOV [W14+4], W0
0173A2  9000BE     MOV [W14+6], W1
0173A4  022504     CALL ___fixsfsi
0173A6  000000     NOP
0173A8  BE0200     MOV.D W0, W4
0173AA  784204     MOV.B W4, W4
0173AC  2372B5     MOV #0x372B, W5
0173AE  784A84     MOV.B W4, [W5]
22305:             
22306:             NearSensors[4][0]=6;//4_L
0173B0  2372C5     MOV #0x372C, W5
0173B2  B3C064     MOV.B #0x6, W4
0173B4  784A84     MOV.B W4, [W5]
22307:             NearSensors[4][1]=5;//4_R
0173B6  2372D5     MOV #0x372D, W5
0173B8  B3C054     MOV.B #0x5, W4
0173BA  784A84     MOV.B W4, [W5]
22308:                 Diff=(double)Hall6ClrbRes-(double)Hall4ClrbRes;
0173BC  81FE84     MOV Hall6ClrbRes, W4
0173BE  81FE95     MOV 0x3FD2, W5
0173C0  BE0004     MOV.D W4, W0
0173C2  02257C     CALL ___floatsisf
0173C4  000000     NOP
0173C6  BE0400     MOV.D W0, W8
0173C8  81FE44     MOV Hall4ClrbRes, W4
0173CA  81FE55     MOV 0x3FCA, W5
0173CC  BE0004     MOV.D W4, W0
0173CE  02257C     CALL ___floatsisf
0173D0  000000     NOP
0173D2  BE0200     MOV.D W0, W4
0173D4  BE0104     MOV.D W4, W2
0173D6  BE0008     MOV.D W8, W0
0173D8  0222D0     CALL ___subsf3
0173DA  000000     NOP
0173DC  BE0200     MOV.D W0, W4
0173DE  BE8F04     MOV.D W4, [W14]
22309:                 Res=Diff/(double)Hall4ClrbRes;
0173E0  81FE44     MOV Hall4ClrbRes, W4
0173E2  81FE55     MOV 0x3FCA, W5
0173E4  BE0004     MOV.D W4, W0
0173E6  02257C     CALL ___floatsisf
0173E8  000000     NOP
0173EA  BE0200     MOV.D W0, W4
0173EC  BE0104     MOV.D W4, W2
0173EE  BE001E     MOV.D [W14], W0
0173F0  02245A     CALL ___divsf3
0173F2  000000     NOP
0173F4  BE0200     MOV.D W0, W4
0173F6  980724     MOV W4, [W14+4]
0173F8  980735     MOV W5, [W14+6]
22310:                 Res=Res*128;
0173FA  200002     MOV #0x0, W2
0173FC  243003     MOV #0x4300, W3
0173FE  90002E     MOV [W14+4], W0
017400  9000BE     MOV [W14+6], W1
017402  022630     CALL ___mulsf3
017404  000000     NOP
017406  BE0200     MOV.D W0, W4
017408  980724     MOV W4, [W14+4]
01740A  980735     MOV W5, [W14+6]
22311:             NearSensors[4][2]=(char)Res;
01740C  90002E     MOV [W14+4], W0
01740E  9000BE     MOV [W14+6], W1
017410  022504     CALL ___fixsfsi
017412  000000     NOP
017414  BE0200     MOV.D W0, W4
017416  784204     MOV.B W4, W4
017418  2372E5     MOV #0x372E, W5
01741A  784A84     MOV.B W4, [W5]
22312:             
22313:                 Diff=(double)Hall5ClrbRes-(double)Hall4ClrbRes;
01741C  81FE64     MOV Hall5ClrbRes, W4
01741E  81FE75     MOV 0x3FCE, W5
017420  BE0004     MOV.D W4, W0
017422  02257C     CALL ___floatsisf
017424  000000     NOP
017426  BE0400     MOV.D W0, W8
017428  81FE44     MOV Hall4ClrbRes, W4
01742A  81FE55     MOV 0x3FCA, W5
01742C  BE0004     MOV.D W4, W0
01742E  02257C     CALL ___floatsisf
017430  000000     NOP
017432  BE0200     MOV.D W0, W4
017434  BE0104     MOV.D W4, W2
017436  BE0008     MOV.D W8, W0
017438  0222D0     CALL ___subsf3
01743A  000000     NOP
01743C  BE0200     MOV.D W0, W4
01743E  BE8F04     MOV.D W4, [W14]
22314:                 Res=Diff/(double)Hall4ClrbRes;
017440  81FE44     MOV Hall4ClrbRes, W4
017442  81FE55     MOV 0x3FCA, W5
017444  BE0004     MOV.D W4, W0
017446  02257C     CALL ___floatsisf
017448  000000     NOP
01744A  BE0200     MOV.D W0, W4
01744C  BE0104     MOV.D W4, W2
01744E  BE001E     MOV.D [W14], W0
017450  02245A     CALL ___divsf3
017452  000000     NOP
017454  BE0200     MOV.D W0, W4
017456  980724     MOV W4, [W14+4]
017458  980735     MOV W5, [W14+6]
22315:                 Res=Res*128;
01745A  200002     MOV #0x0, W2
01745C  243003     MOV #0x4300, W3
01745E  90002E     MOV [W14+4], W0
017460  9000BE     MOV [W14+6], W1
017462  022630     CALL ___mulsf3
017464  000000     NOP
017466  BE0200     MOV.D W0, W4
017468  980724     MOV W4, [W14+4]
01746A  980735     MOV W5, [W14+6]
22316:             NearSensors[4][3]=(char)Res;
01746C  90002E     MOV [W14+4], W0
01746E  9000BE     MOV [W14+6], W1
017470  022504     CALL ___fixsfsi
017472  000000     NOP
017474  BE0200     MOV.D W0, W4
017476  784204     MOV.B W4, W4
017478  2372F5     MOV #0x372F, W5
01747A  784A84     MOV.B W4, [W5]
22317:             
22318:             
22319:             
22320:             NearSensors[5][0]=4;//5_L
01747C  237305     MOV #0x3730, W5
01747E  B3C044     MOV.B #0x4, W4
017480  784A84     MOV.B W4, [W5]
22321:             NearSensors[5][1]=1;//5_R
017482  237315     MOV #0x3731, W5
017484  B3C014     MOV.B #0x1, W4
017486  784A84     MOV.B W4, [W5]
22322:                 Diff=(double)Hall4ClrbRes-(double)Hall5ClrbRes;
017488  81FE44     MOV Hall4ClrbRes, W4
01748A  81FE55     MOV 0x3FCA, W5
01748C  BE0004     MOV.D W4, W0
01748E  02257C     CALL ___floatsisf
017490  000000     NOP
017492  BE0400     MOV.D W0, W8
017494  81FE64     MOV Hall5ClrbRes, W4
017496  81FE75     MOV 0x3FCE, W5
017498  BE0004     MOV.D W4, W0
01749A  02257C     CALL ___floatsisf
01749C  000000     NOP
01749E  BE0200     MOV.D W0, W4
0174A0  BE0104     MOV.D W4, W2
0174A2  BE0008     MOV.D W8, W0
0174A4  0222D0     CALL ___subsf3
0174A6  000000     NOP
0174A8  BE0200     MOV.D W0, W4
0174AA  BE8F04     MOV.D W4, [W14]
22323:                 Res=Diff/(double)Hall5ClrbRes;
0174AC  81FE64     MOV Hall5ClrbRes, W4
0174AE  81FE75     MOV 0x3FCE, W5
0174B0  BE0004     MOV.D W4, W0
0174B2  02257C     CALL ___floatsisf
0174B4  000000     NOP
0174B6  BE0200     MOV.D W0, W4
0174B8  BE0104     MOV.D W4, W2
0174BA  BE001E     MOV.D [W14], W0
0174BC  02245A     CALL ___divsf3
0174BE  000000     NOP
0174C0  BE0200     MOV.D W0, W4
0174C2  980724     MOV W4, [W14+4]
0174C4  980735     MOV W5, [W14+6]
22324:                 Res=Res*128;
0174C6  200002     MOV #0x0, W2
0174C8  243003     MOV #0x4300, W3
0174CA  90002E     MOV [W14+4], W0
0174CC  9000BE     MOV [W14+6], W1
0174CE  022630     CALL ___mulsf3
0174D0  000000     NOP
0174D2  BE0200     MOV.D W0, W4
0174D4  980724     MOV W4, [W14+4]
0174D6  980735     MOV W5, [W14+6]
22325:             NearSensors[5][2]=(char)Res;
0174D8  90002E     MOV [W14+4], W0
0174DA  9000BE     MOV [W14+6], W1
0174DC  022504     CALL ___fixsfsi
0174DE  000000     NOP
0174E0  BE0200     MOV.D W0, W4
0174E2  784204     MOV.B W4, W4
0174E4  237325     MOV #0x3732, W5
0174E6  784A84     MOV.B W4, [W5]
22326:             
22327:                 Diff=(double)Hall1ClrbRes-(double)Hall5ClrbRes;
0174E8  81FDE4     MOV Hall1ClrbRes, W4
0174EA  81FDF5     MOV 0x3FBE, W5
0174EC  BE0004     MOV.D W4, W0
0174EE  02257C     CALL ___floatsisf
0174F0  000000     NOP
0174F2  BE0400     MOV.D W0, W8
0174F4  81FE64     MOV Hall5ClrbRes, W4
0174F6  81FE75     MOV 0x3FCE, W5
0174F8  BE0004     MOV.D W4, W0
0174FA  02257C     CALL ___floatsisf
0174FC  000000     NOP
0174FE  BE0200     MOV.D W0, W4
017500  BE0104     MOV.D W4, W2
017502  BE0008     MOV.D W8, W0
017504  0222D0     CALL ___subsf3
017506  000000     NOP
017508  BE0200     MOV.D W0, W4
01750A  BE8F04     MOV.D W4, [W14]
22328:                 Res=Diff/(double)Hall5ClrbRes;
01750C  81FE64     MOV Hall5ClrbRes, W4
01750E  81FE75     MOV 0x3FCE, W5
017510  BE0004     MOV.D W4, W0
017512  02257C     CALL ___floatsisf
017514  000000     NOP
017516  BE0200     MOV.D W0, W4
017518  BE0104     MOV.D W4, W2
01751A  BE001E     MOV.D [W14], W0
01751C  02245A     CALL ___divsf3
01751E  000000     NOP
017520  BE0200     MOV.D W0, W4
017522  980724     MOV W4, [W14+4]
017524  980735     MOV W5, [W14+6]
22329:                 Res=Res*128;
017526  200002     MOV #0x0, W2
017528  243003     MOV #0x4300, W3
01752A  90002E     MOV [W14+4], W0
01752C  9000BE     MOV [W14+6], W1
01752E  022630     CALL ___mulsf3
017530  000000     NOP
017532  BE0200     MOV.D W0, W4
017534  980724     MOV W4, [W14+4]
017536  980735     MOV W5, [W14+6]
22330:             NearSensors[5][3]=(char)Res;
017538  90002E     MOV [W14+4], W0
01753A  9000BE     MOV [W14+6], W1
01753C  022504     CALL ___fixsfsi
01753E  000000     NOP
017540  BE0200     MOV.D W0, W4
017542  784204     MOV.B W4, W4
017544  237335     MOV #0x3733, W5
017546  784A84     MOV.B W4, [W5]
22331:             
22332:             
22333:             
22334:             NearSensors[6][0]=2;//6_L
017548  237345     MOV #0x3734, W5
01754A  B3C024     MOV.B #0x2, W4
01754C  784A84     MOV.B W4, [W5]
22335:             NearSensors[6][1]=4;//6_R
01754E  237355     MOV #0x3735, W5
017550  B3C044     MOV.B #0x4, W4
017552  784A84     MOV.B W4, [W5]
22336:                 Diff=(double)Hall2ClrbRes-(double)Hall6ClrbRes;
017554  81FE04     MOV Hall2ClrbRes, W4
017556  81FE15     MOV 0x3FC2, W5
017558  BE0004     MOV.D W4, W0
01755A  02257C     CALL ___floatsisf
01755C  000000     NOP
01755E  BE0400     MOV.D W0, W8
017560  81FE84     MOV Hall6ClrbRes, W4
017562  81FE95     MOV 0x3FD2, W5
017564  BE0004     MOV.D W4, W0
017566  02257C     CALL ___floatsisf
017568  000000     NOP
01756A  BE0200     MOV.D W0, W4
01756C  BE0104     MOV.D W4, W2
01756E  BE0008     MOV.D W8, W0
017570  0222D0     CALL ___subsf3
017572  000000     NOP
017574  BE0200     MOV.D W0, W4
017576  BE8F04     MOV.D W4, [W14]
22337:                 Res=Diff/(double)Hall6ClrbRes;
017578  81FE84     MOV Hall6ClrbRes, W4
01757A  81FE95     MOV 0x3FD2, W5
01757C  BE0004     MOV.D W4, W0
01757E  02257C     CALL ___floatsisf
017580  000000     NOP
017582  BE0200     MOV.D W0, W4
017584  BE0104     MOV.D W4, W2
017586  BE001E     MOV.D [W14], W0
017588  02245A     CALL ___divsf3
01758A  000000     NOP
01758C  BE0200     MOV.D W0, W4
01758E  980724     MOV W4, [W14+4]
017590  980735     MOV W5, [W14+6]
22338:                 Res=Res*128;
017592  200002     MOV #0x0, W2
017594  243003     MOV #0x4300, W3
017596  90002E     MOV [W14+4], W0
017598  9000BE     MOV [W14+6], W1
01759A  022630     CALL ___mulsf3
01759C  000000     NOP
01759E  BE0200     MOV.D W0, W4
0175A0  980724     MOV W4, [W14+4]
0175A2  980735     MOV W5, [W14+6]
22339:             NearSensors[6][2]=(char)Res;
0175A4  90002E     MOV [W14+4], W0
0175A6  9000BE     MOV [W14+6], W1
0175A8  022504     CALL ___fixsfsi
0175AA  000000     NOP
0175AC  BE0200     MOV.D W0, W4
0175AE  784204     MOV.B W4, W4
0175B0  237365     MOV #0x3736, W5
0175B2  784A84     MOV.B W4, [W5]
22340:             
22341:                 Diff=(double)Hall4ClrbRes-(double)Hall6ClrbRes;
0175B4  81FE44     MOV Hall4ClrbRes, W4
0175B6  81FE55     MOV 0x3FCA, W5
0175B8  BE0004     MOV.D W4, W0
0175BA  02257C     CALL ___floatsisf
0175BC  000000     NOP
0175BE  BE0400     MOV.D W0, W8
0175C0  81FE84     MOV Hall6ClrbRes, W4
0175C2  81FE95     MOV 0x3FD2, W5
0175C4  BE0004     MOV.D W4, W0
0175C6  02257C     CALL ___floatsisf
0175C8  000000     NOP
0175CA  BE0200     MOV.D W0, W4
0175CC  BE0104     MOV.D W4, W2
0175CE  BE0008     MOV.D W8, W0
0175D0  0222D0     CALL ___subsf3
0175D2  000000     NOP
0175D4  BE0200     MOV.D W0, W4
0175D6  BE8F04     MOV.D W4, [W14]
22342:                 Res=Diff/(double)Hall6ClrbRes;
0175D8  81FE84     MOV Hall6ClrbRes, W4
0175DA  81FE95     MOV 0x3FD2, W5
0175DC  BE0004     MOV.D W4, W0
0175DE  02257C     CALL ___floatsisf
0175E0  000000     NOP
0175E2  BE0200     MOV.D W0, W4
0175E4  BE0104     MOV.D W4, W2
0175E6  BE001E     MOV.D [W14], W0
0175E8  02245A     CALL ___divsf3
0175EA  000000     NOP
0175EC  BE0200     MOV.D W0, W4
0175EE  980724     MOV W4, [W14+4]
0175F0  980735     MOV W5, [W14+6]
22343:                 Res=Res*128;
0175F2  200002     MOV #0x0, W2
0175F4  243003     MOV #0x4300, W3
0175F6  90002E     MOV [W14+4], W0
0175F8  9000BE     MOV [W14+6], W1
0175FA  022630     CALL ___mulsf3
0175FC  000000     NOP
0175FE  BE0200     MOV.D W0, W4
017600  980724     MOV W4, [W14+4]
017602  980735     MOV W5, [W14+6]
22344:             NearSensors[6][3]=(char)Res;
017604  90002E     MOV [W14+4], W0
017606  9000BE     MOV [W14+6], W1
017608  022504     CALL ___fixsfsi
01760A  000000     NOP
01760C  BE0200     MOV.D W0, W4
01760E  784204     MOV.B W4, W4
017610  237375     MOV #0x3737, W5
017612  784A84     MOV.B W4, [W5]
017614  370001     BRA 0x17618
22345:             
22346:             
22347:             }
017618  BE044F     MOV.D [--W15], W8
01761A  FA8000     ULNK
01761C  060000     RETURN
22348:             
22349:             
22350:             
22351:             
22352:             void Sound(void)
22353:             {
01761E  FA0000     LNK #0x0
22354:                 if (StartingMoveCnt)
017620  8183E4     MOV StartingMoveCnt, W4
017622  520FE0     SUB W4, #0x0, [W15]
017624  3A0183     BRA NZ, 0x1792C
22355:                     return;
01792C  000000     NOP
22356:                 
22357:                 switch (SoundNum)
017626  2124B4     MOV #0x124B, W4
017628  784214     MOV.B [W4], W4
01762A  FB8204     ZE W4, W4
01762C  B92361     MUL.SU W4, #1, W6
01762E  EB8200     SETM W4
017630  EB8280     SETM W5
017632  420206     ADD W4, W6, W4
017634  4A8287     ADDC W5, W7, W5
017636  200146     MOV #0x14, W6
017638  200007     MOV #0x0, W7
01763A  520F86     SUB W4, W6, [W15]
01763C  5A8F87     SUBB W5, W7, [W15]
01763E  3E016D     BRA GTU, 0x1791A
017640  010604     BRA W4
017642  370014     BRA 0x1766C
017644  370023     BRA 0x1768C
017646  370032     BRA 0x176AC
017648  370041     BRA 0x176CC
01764A  370053     BRA 0x176F2
01764C  370065     BRA 0x17718
01764E  370074     BRA 0x17738
017650  370083     BRA 0x17758
017652  370092     BRA 0x17778
017654  3700A1     BRA 0x17798
017656  3700B0     BRA 0x177B8
017658  3700BF     BRA 0x177D8
01765A  3700CE     BRA 0x177F8
01765C  3700DD     BRA 0x17818
01765E  3700ED     BRA 0x1783A
017660  3700FC     BRA 0x1785A
017662  37010B     BRA 0x1787A
017664  37011A     BRA 0x1789A
017666  370129     BRA 0x178BA
017668  370138     BRA 0x178DA
01766A  370147     BRA 0x178FA
22358:                 {
22359:                     case 1:
22360:                         BuzzerOnTimeConst=100;   //1 Normal
01766C  200644     MOV #0x64, W4
01766E  8893A4     MOV W4, BuzzerOnTimeConst
22361:                         BuzzerOffTimeConst=500;
017670  201F44     MOV #0x1F4, W4
017672  8893B4     MOV W4, BuzzerOffTimeConst
22362:                         BuzzerOnTime=150;
017674  200964     MOV #0x96, W4
017676  8893C4     MOV W4, BuzzerOnTime
22363:                         BuzzerOffTime=500;
017678  201F44     MOV #0x1F4, W4
01767A  8893D4     MOV W4, BuzzerOffTime
22364:                         Sounds=1;
01767C  2124A5     MOV #0x124A, W5
01767E  B3C014     MOV.B #0x1, W4
017680  784A84     MOV.B W4, [W5]
22365:                     {
22366:                     BuzzerOnEvent=10;
017682  2308F5     MOV #0x308F, W5
017684  B3C0A4     MOV.B #0xA, W4
017686  784A84     MOV.B W4, [W5]
22367:                     BuzzerMacroOn//Buzzer=1;
017688  0722C4     RCALL BzFuncOn
22368:                     }
22369:                         break;
01768A  37014C     BRA 0x17924
22370:                     case 2:
22371:                         BuzzerOnTimeConst=500;  //2 Long
01768C  201F44     MOV #0x1F4, W4
01768E  8893A4     MOV W4, BuzzerOnTimeConst
22372:                         BuzzerOffTimeConst=100;
017690  200644     MOV #0x64, W4
017692  8893B4     MOV W4, BuzzerOffTimeConst
22373:                         BuzzerOnTime=500;
017694  201F44     MOV #0x1F4, W4
017696  8893C4     MOV W4, BuzzerOnTime
22374:                         BuzzerOffTime=100;
017698  200644     MOV #0x64, W4
01769A  8893D4     MOV W4, BuzzerOffTime
22375:                         Sounds=2;
01769C  2124A5     MOV #0x124A, W5
01769E  B3C024     MOV.B #0x2, W4
0176A0  784A84     MOV.B W4, [W5]
22376:                     {
22377:                     BuzzerOnEvent=11;
0176A2  2308F5     MOV #0x308F, W5
0176A4  B3C0B4     MOV.B #0xB, W4
0176A6  784A84     MOV.B W4, [W5]
22378:                     BuzzerMacroOn//Buzzer=1;
0176A8  0722B4     RCALL BzFuncOn
22379:                     }
22380:                         break;
0176AA  37013C     BRA 0x17924
22381:                     case 3:
22382:                         BuzzerOnTimeConst=40;   //Revers
0176AC  200284     MOV #0x28, W4
0176AE  8893A4     MOV W4, BuzzerOnTimeConst
22383:                         BuzzerOffTimeConst=250;
0176B0  200FA4     MOV #0xFA, W4
0176B2  8893B4     MOV W4, BuzzerOffTimeConst
22384:                         BuzzerOnTime=40;
0176B4  200284     MOV #0x28, W4
0176B6  8893C4     MOV W4, BuzzerOnTime
22385:                         BuzzerOffTime=250;
0176B8  200FA4     MOV #0xFA, W4
0176BA  8893D4     MOV W4, BuzzerOffTime
22386:                         Sounds=254;
0176BC  2124A5     MOV #0x124A, W5
0176BE  B3CFE4     MOV.B #0xFE, W4
0176C0  784A84     MOV.B W4, [W5]
22387:                     {
22388:                     BuzzerOnEvent=12;
0176C2  2308F5     MOV #0x308F, W5
0176C4  B3C0C4     MOV.B #0xC, W4
0176C6  784A84     MOV.B W4, [W5]
22389:                     BuzzerMacroOn//Buzzer=1;
0176C8  0722A4     RCALL BzFuncOn
22390:                     }
22391:                         break;
0176CA  37012C     BRA 0x17924
22392:                     case 4:
22393:                         BuzzerOnTimeConst=100;      //   UBtLim1   <   UBT   <   UBtLim2    START   OFF
0176CC  200644     MOV #0x64, W4
0176CE  8893A4     MOV W4, BuzzerOnTimeConst
22394:                         BuzzerOffTimeConst=1000;
0176D0  203E84     MOV #0x3E8, W4
0176D2  8893B4     MOV W4, BuzzerOffTimeConst
22395:                         BuzzerOnTime=100;
0176D4  200644     MOV #0x64, W4
0176D6  8893C4     MOV W4, BuzzerOnTime
22396:                         BuzzerOffTime=1000;
0176D8  203E84     MOV #0x3E8, W4
0176DA  8893D4     MOV W4, BuzzerOffTime
22397:                         Sounds=1;
0176DC  2124A5     MOV #0x124A, W5
0176DE  B3C014     MOV.B #0x1, W4
0176E0  784A84     MOV.B W4, [W5]
22398:                         BuzzerMacroOff
0176E2  A98E54     BCLR LATF, #4
0176E4  809775     MOV StatFlgs3, W5
0176E6  202004     MOV #0x200, W4
0176E8  628204     AND W5, W4, W4
0176EA  520FE0     SUB W4, #0x0, [W15]
0176EC  3A0118     BRA NZ, 0x1791E
0176EE  A84E35     BSET 0xE35, #2
22399:                         break;
0176F0  370119     BRA 0x17924
01791E  000000     NOP
017920  370001     BRA 0x17924
22400:                     case 5:
22401:                         BuzzerOnTimeConst=100;      //   UBT   <   UBtLim1
0176F2  200644     MOV #0x64, W4
0176F4  8893A4     MOV W4, BuzzerOnTimeConst
22402:                         BuzzerOffTimeConst=100;
0176F6  200644     MOV #0x64, W4
0176F8  8893B4     MOV W4, BuzzerOffTimeConst
22403:                         BuzzerOnTime=100;
0176FA  200644     MOV #0x64, W4
0176FC  8893C4     MOV W4, BuzzerOnTime
22404:                         BuzzerOffTime=100;
0176FE  200644     MOV #0x64, W4
017700  8893D4     MOV W4, BuzzerOffTime
22405:                         Sounds=1;
017702  2124A5     MOV #0x124A, W5
017704  B3C014     MOV.B #0x1, W4
017706  784A84     MOV.B W4, [W5]
22406:                         BuzzerMacroOff
017708  A98E54     BCLR LATF, #4
01770A  809775     MOV StatFlgs3, W5
01770C  202004     MOV #0x200, W4
01770E  628204     AND W5, W4, W4
017710  520FE0     SUB W4, #0x0, [W15]
017712  3A0107     BRA NZ, 0x17922
017714  A84E35     BSET 0xE35, #2
22407:                         break;
017716  370106     BRA 0x17924
017922  000000     NOP
22408:                     case 6:
22409:                         BuzzerOnTimeConst=50;      //   Timer
017718  200324     MOV #0x32, W4
01771A  8893A4     MOV W4, BuzzerOnTimeConst
22410:                         BuzzerOffTimeConst=300;
01771C  2012C4     MOV #0x12C, W4
01771E  8893B4     MOV W4, BuzzerOffTimeConst
22411:                         BuzzerOnTime=50;
017720  200324     MOV #0x32, W4
017722  8893C4     MOV W4, BuzzerOnTime
22412:                         BuzzerOffTime=300;
017724  2012C4     MOV #0x12C, W4
017726  8893D4     MOV W4, BuzzerOffTime
22413:                         Sounds=2;
017728  2124A5     MOV #0x124A, W5
01772A  B3C024     MOV.B #0x2, W4
01772C  784A84     MOV.B W4, [W5]
22414:                     {
22415:                     BuzzerOnEvent=13;
01772E  2308F5     MOV #0x308F, W5
017730  B3C0D4     MOV.B #0xD, W4
017732  784A84     MOV.B W4, [W5]
22416:                     BuzzerMacroOn//Buzzer=1;
017734  07226E     RCALL BzFuncOn
22417:                     }
22418:                         break;
017736  3700F6     BRA 0x17924
22419:                     case 7:
22420:                         BuzzerOnTimeConst=100;   //2 Normal
017738  200644     MOV #0x64, W4
01773A  8893A4     MOV W4, BuzzerOnTimeConst
22421:                         BuzzerOffTimeConst=500;
01773C  201F44     MOV #0x1F4, W4
01773E  8893B4     MOV W4, BuzzerOffTimeConst
22422:                         BuzzerOnTime=500;
017740  201F44     MOV #0x1F4, W4
017742  8893C4     MOV W4, BuzzerOnTime
22423:                         BuzzerOffTime=500;
017744  201F44     MOV #0x1F4, W4
017746  8893D4     MOV W4, BuzzerOffTime
22424:                         Sounds=2;
017748  2124A5     MOV #0x124A, W5
01774A  B3C024     MOV.B #0x2, W4
01774C  784A84     MOV.B W4, [W5]
22425:                     {
22426:                     BuzzerOnEvent=14;
01774E  2308F5     MOV #0x308F, W5
017750  B3C0E4     MOV.B #0xE, W4
017752  784A84     MOV.B W4, [W5]
22427:                     BuzzerMacroOn//Buzzer=1;
017754  07225E     RCALL BzFuncOn
22428:                     }
22429:                         break;
017756  3700E6     BRA 0x17924
22430:                     case 8:
22431:                         BuzzerOnTimeConst=40;   //Many Short
017758  200284     MOV #0x28, W4
01775A  8893A4     MOV W4, BuzzerOnTimeConst
22432:                         BuzzerOffTimeConst=100;
01775C  200644     MOV #0x64, W4
01775E  8893B4     MOV W4, BuzzerOffTimeConst
22433:                         BuzzerOnTime=40;
017760  200284     MOV #0x28, W4
017762  8893C4     MOV W4, BuzzerOnTime
22434:                         BuzzerOffTime=100;
017764  200644     MOV #0x64, W4
017766  8893D4     MOV W4, BuzzerOffTime
22435:                         Sounds=254;
017768  2124A5     MOV #0x124A, W5
01776A  B3CFE4     MOV.B #0xFE, W4
01776C  784A84     MOV.B W4, [W5]
22436:                     {
22437:                     BuzzerOnEvent=15;
01776E  2308F5     MOV #0x308F, W5
017770  B3C0F4     MOV.B #0xF, W4
017772  784A84     MOV.B W4, [W5]
22438:                     BuzzerMacroOn//Buzzer=1;
017774  07224E     RCALL BzFuncOn
22439:                     }
22440:                         break;
017776  3700D6     BRA 0x17924
22441:                     case 9:
22442:                         BuzzerOnTimeConst=750;      //   1 very long
017778  202EE4     MOV #0x2EE, W4
01777A  8893A4     MOV W4, BuzzerOnTimeConst
22443:                         BuzzerOffTimeConst=100;
01777C  200644     MOV #0x64, W4
01777E  8893B4     MOV W4, BuzzerOffTimeConst
22444:                         BuzzerOnTime=750;
017780  202EE4     MOV #0x2EE, W4
017782  8893C4     MOV W4, BuzzerOnTime
22445:                         BuzzerOffTime=100;
017784  200644     MOV #0x64, W4
017786  8893D4     MOV W4, BuzzerOffTime
22446:                         Sounds=1;
017788  2124A5     MOV #0x124A, W5
01778A  B3C014     MOV.B #0x1, W4
01778C  784A84     MOV.B W4, [W5]
22447:                     {
22448:                     BuzzerOnEvent=16;
01778E  2308F5     MOV #0x308F, W5
017790  B3C104     MOV.B #0x10, W4
017792  784A84     MOV.B W4, [W5]
22449:                     BuzzerMacroOn//Buzzer=1;
017794  07223E     RCALL BzFuncOn
22450:                     }
22451:                         break;
017796  3700C6     BRA 0x17924
22452:                     case 10:
22453:                         BuzzerOnTimeConst=50;      //   5 short
017798  200324     MOV #0x32, W4
01779A  8893A4     MOV W4, BuzzerOnTimeConst
22454:                         BuzzerOffTimeConst=50;
01779C  200324     MOV #0x32, W4
01779E  8893B4     MOV W4, BuzzerOffTimeConst
22455:                         BuzzerOnTime=50;
0177A0  200324     MOV #0x32, W4
0177A2  8893C4     MOV W4, BuzzerOnTime
22456:                         BuzzerOffTime=50;
0177A4  200324     MOV #0x32, W4
0177A6  8893D4     MOV W4, BuzzerOffTime
22457:                         Sounds=5;
0177A8  2124A5     MOV #0x124A, W5
0177AA  B3C054     MOV.B #0x5, W4
0177AC  784A84     MOV.B W4, [W5]
22458:                     {
22459:                     BuzzerOnEvent=17;
0177AE  2308F5     MOV #0x308F, W5
0177B0  B3C114     MOV.B #0x11, W4
0177B2  784A84     MOV.B W4, [W5]
22460:                     BuzzerMacroOn//Buzzer=1;
0177B4  07222E     RCALL BzFuncOn
22461:                     }
22462:                         break;
0177B6  3700B6     BRA 0x17924
22463:                     case 11:
22464:                         BuzzerOnTimeConst=50;      //   2 short
0177B8  200324     MOV #0x32, W4
0177BA  8893A4     MOV W4, BuzzerOnTimeConst
22465:                         BuzzerOffTimeConst=50;
0177BC  200324     MOV #0x32, W4
0177BE  8893B4     MOV W4, BuzzerOffTimeConst
22466:                         BuzzerOnTime=50;
0177C0  200324     MOV #0x32, W4
0177C2  8893C4     MOV W4, BuzzerOnTime
22467:                         BuzzerOffTime=50;
0177C4  200324     MOV #0x32, W4
0177C6  8893D4     MOV W4, BuzzerOffTime
22468:                         Sounds=2;
0177C8  2124A5     MOV #0x124A, W5
0177CA  B3C024     MOV.B #0x2, W4
0177CC  784A84     MOV.B W4, [W5]
22469:                     {
22470:                     BuzzerOnEvent=18;
0177CE  2308F5     MOV #0x308F, W5
0177D0  B3C124     MOV.B #0x12, W4
0177D2  784A84     MOV.B W4, [W5]
22471:                     BuzzerMacroOn//Buzzer=1;
0177D4  07221E     RCALL BzFuncOn
22472:                     }
22473:                         break;
0177D6  3700A6     BRA 0x17924
22474:                     case 12:
22475:                         BuzzerOnTimeConst=100;   //1 Short
0177D8  200644     MOV #0x64, W4
0177DA  8893A4     MOV W4, BuzzerOnTimeConst
22476:                         BuzzerOffTimeConst=100;
0177DC  200644     MOV #0x64, W4
0177DE  8893B4     MOV W4, BuzzerOffTimeConst
22477:                         BuzzerOnTime=50;
0177E0  200324     MOV #0x32, W4
0177E2  8893C4     MOV W4, BuzzerOnTime
22478:                         BuzzerOffTime=100;
0177E4  200644     MOV #0x64, W4
0177E6  8893D4     MOV W4, BuzzerOffTime
22479:                         Sounds=1;
0177E8  2124A5     MOV #0x124A, W5
0177EA  B3C014     MOV.B #0x1, W4
0177EC  784A84     MOV.B W4, [W5]
22480:                     {
22481:                     BuzzerOnEvent=19;
0177EE  2308F5     MOV #0x308F, W5
0177F0  B3C134     MOV.B #0x13, W4
0177F2  784A84     MOV.B W4, [W5]
22482:                     BuzzerMacroOn//Buzzer=1;
0177F4  07220E     RCALL BzFuncOn
22483:                     }
22484:                         break;
0177F6  370096     BRA 0x17924
22485:                     case 13:
22486:                         BuzzerOnTimeConst=40;   //Many Short with long pause
0177F8  200284     MOV #0x28, W4
0177FA  8893A4     MOV W4, BuzzerOnTimeConst
22487:                         BuzzerOffTimeConst=300;
0177FC  2012C4     MOV #0x12C, W4
0177FE  8893B4     MOV W4, BuzzerOffTimeConst
22488:                         BuzzerOnTime=40;
017800  200284     MOV #0x28, W4
017802  8893C4     MOV W4, BuzzerOnTime
22489:                         BuzzerOffTime=300;
017804  2012C4     MOV #0x12C, W4
017806  8893D4     MOV W4, BuzzerOffTime
22490:                         Sounds=254;
017808  2124A5     MOV #0x124A, W5
01780A  B3CFE4     MOV.B #0xFE, W4
01780C  784A84     MOV.B W4, [W5]
22491:                     {
22492:                     BuzzerOnEvent=20;
01780E  2308F5     MOV #0x308F, W5
017810  B3C144     MOV.B #0x14, W4
017812  784A84     MOV.B W4, [W5]
22493:                     BuzzerMacroOn//Buzzer=1;
017814  0721FE     RCALL BzFuncOn
22494:                     }
22495:                         break;
017816  370086     BRA 0x17924
22496:             
22497:                     case 14:
22498:                         BuzzerOnTimeConst=BzOnCntSeriaConstAlm;   //Alarm 
017818  8180C4     MOV BzOnCntSeriaConstAlm, W4
01781A  8893A4     MOV W4, BuzzerOnTimeConst
22499:                         BuzzerOffTimeConst=BeepPauseConstAlm;
01781C  818574     MOV BeepPauseConstAlm, W4
01781E  8893B4     MOV W4, BuzzerOffTimeConst
22500:                         BuzzerOnTime=BzOnCntSeriaConstAlm;
017820  8180C4     MOV BzOnCntSeriaConstAlm, W4
017822  8893C4     MOV W4, BuzzerOnTime
22501:                         BuzzerOffTime=BeepPauseConstAlm;
017824  818574     MOV BeepPauseConstAlm, W4
017826  8893D4     MOV W4, BuzzerOffTime
22502:                         Sounds=CntSingleBeepAlm;
017828  230AA4     MOV #0x30AA, W4
01782A  784214     MOV.B [W4], W4
01782C  2124A5     MOV #0x124A, W5
01782E  784A84     MOV.B W4, [W5]
22503:                     {
22504:                     BuzzerOnEvent=21;
017830  2308F5     MOV #0x308F, W5
017832  B3C154     MOV.B #0x15, W4
017834  784A84     MOV.B W4, [W5]
22505:                     BuzzerMacroOn//Buzzer=1;
017836  0721ED     RCALL BzFuncOn
22506:                     }
22507:                         break;
017838  370075     BRA 0x17924
22508:                     case 15:
22509:                         BuzzerOnTimeConst=100;   //1 Normal
01783A  200644     MOV #0x64, W4
01783C  8893A4     MOV W4, BuzzerOnTimeConst
22510:                         BuzzerOffTimeConst=100;
01783E  200644     MOV #0x64, W4
017840  8893B4     MOV W4, BuzzerOffTimeConst
22511:                         BuzzerOnTime=100;
017842  200644     MOV #0x64, W4
017844  8893C4     MOV W4, BuzzerOnTime
22512:                         BuzzerOffTime=100;
017846  200644     MOV #0x64, W4
017848  8893D4     MOV W4, BuzzerOffTime
22513:                         Sounds=1;
01784A  2124A5     MOV #0x124A, W5
01784C  B3C014     MOV.B #0x1, W4
01784E  784A84     MOV.B W4, [W5]
22514:                     {
22515:                     BuzzerOnEvent=22;
017850  2308F5     MOV #0x308F, W5
017852  B3C164     MOV.B #0x16, W4
017854  784A84     MOV.B W4, [W5]
22516:                     BuzzerMacroOn//Buzzer=1;
017856  0721DD     RCALL BzFuncOn
22517:                     }
22518:                         break;
017858  370065     BRA 0x17924
22519:                     case 16:
22520:                         BuzzerOnTimeConst=100;   //2 Normal
01785A  200644     MOV #0x64, W4
01785C  8893A4     MOV W4, BuzzerOnTimeConst
22521:                         BuzzerOffTimeConst=100;
01785E  200644     MOV #0x64, W4
017860  8893B4     MOV W4, BuzzerOffTimeConst
22522:                         BuzzerOnTime=100;
017862  200644     MOV #0x64, W4
017864  8893C4     MOV W4, BuzzerOnTime
22523:                         BuzzerOffTime=100;
017866  200644     MOV #0x64, W4
017868  8893D4     MOV W4, BuzzerOffTime
22524:                         Sounds=2;
01786A  2124A5     MOV #0x124A, W5
01786C  B3C024     MOV.B #0x2, W4
01786E  784A84     MOV.B W4, [W5]
22525:                     {
22526:                     BuzzerOnEvent=23;
017870  2308F5     MOV #0x308F, W5
017872  B3C174     MOV.B #0x17, W4
017874  784A84     MOV.B W4, [W5]
22527:                     BuzzerMacroOn//Buzzer=1;
017876  0721CD     RCALL BzFuncOn
22528:                     }
22529:                         break;
017878  370055     BRA 0x17924
22530:                     case 17:
22531:                         BuzzerOnTimeConst=100;   //3 Normal
01787A  200644     MOV #0x64, W4
01787C  8893A4     MOV W4, BuzzerOnTimeConst
22532:                         BuzzerOffTimeConst=100;
01787E  200644     MOV #0x64, W4
017880  8893B4     MOV W4, BuzzerOffTimeConst
22533:                         BuzzerOnTime=100;
017882  200644     MOV #0x64, W4
017884  8893C4     MOV W4, BuzzerOnTime
22534:                         BuzzerOffTime=100;
017886  200644     MOV #0x64, W4
017888  8893D4     MOV W4, BuzzerOffTime
22535:                         Sounds=3;
01788A  2124A5     MOV #0x124A, W5
01788C  B3C034     MOV.B #0x3, W4
01788E  784A84     MOV.B W4, [W5]
22536:                     {
22537:                     BuzzerOnEvent=24;
017890  2308F5     MOV #0x308F, W5
017892  B3C184     MOV.B #0x18, W4
017894  784A84     MOV.B W4, [W5]
22538:                     BuzzerMacroOn//Buzzer=1;
017896  0721BD     RCALL BzFuncOn
22539:                     }
22540:                         break;
017898  370045     BRA 0x17924
22541:                     case 18:
22542:                         BuzzerOnTimeConst=30;   //1 Short LongPause
01789A  2001E4     MOV #0x1E, W4
01789C  8893A4     MOV W4, BuzzerOnTimeConst
22543:                         BuzzerOffTimeConst=30;
01789E  2001E4     MOV #0x1E, W4
0178A0  8893B4     MOV W4, BuzzerOffTimeConst
22544:                         BuzzerOnTime=30;
0178A2  2001E4     MOV #0x1E, W4
0178A4  8893C4     MOV W4, BuzzerOnTime
22545:                         BuzzerOffTime=30;
0178A6  2001E4     MOV #0x1E, W4
0178A8  8893D4     MOV W4, BuzzerOffTime
22546:                         Sounds=10;
0178AA  2124A5     MOV #0x124A, W5
0178AC  B3C0A4     MOV.B #0xA, W4
0178AE  784A84     MOV.B W4, [W5]
22547:                     {
22548:                     BuzzerOnEvent=25;
0178B0  2308F5     MOV #0x308F, W5
0178B2  B3C194     MOV.B #0x19, W4
0178B4  784A84     MOV.B W4, [W5]
22549:                     BuzzerMacroOn//Buzzer=1;
0178B6  0721AD     RCALL BzFuncOn
22550:                     }
22551:                         break;
0178B8  370035     BRA 0x17924
22552:                     case 19:
22553:                         BuzzerOnTimeConst=30;   //5 short
0178BA  2001E4     MOV #0x1E, W4
0178BC  8893A4     MOV W4, BuzzerOnTimeConst
22554:                         BuzzerOffTimeConst=30;
0178BE  2001E4     MOV #0x1E, W4
0178C0  8893B4     MOV W4, BuzzerOffTimeConst
22555:                         BuzzerOnTime=30;
0178C2  2001E4     MOV #0x1E, W4
0178C4  8893C4     MOV W4, BuzzerOnTime
22556:                         BuzzerOffTime=30;
0178C6  2001E4     MOV #0x1E, W4
0178C8  8893D4     MOV W4, BuzzerOffTime
22557:                         Sounds=5;
0178CA  2124A5     MOV #0x124A, W5
0178CC  B3C054     MOV.B #0x5, W4
0178CE  784A84     MOV.B W4, [W5]
22558:                     {
22559:                     BuzzerOnEvent=26;
0178D0  2308F5     MOV #0x308F, W5
0178D2  B3C1A4     MOV.B #0x1A, W4
0178D4  784A84     MOV.B W4, [W5]
22560:                     BuzzerMacroOn//Buzzer=1;
0178D6  07219D     RCALL BzFuncOn
22561:                     }
22562:                         break;
0178D8  370025     BRA 0x17924
22563:                     case 20:
22564:                         BuzzerOnTimeConst=30;   //2 short
0178DA  2001E4     MOV #0x1E, W4
0178DC  8893A4     MOV W4, BuzzerOnTimeConst
22565:                         BuzzerOffTimeConst=30;
0178DE  2001E4     MOV #0x1E, W4
0178E0  8893B4     MOV W4, BuzzerOffTimeConst
22566:                         BuzzerOnTime=30;
0178E2  2001E4     MOV #0x1E, W4
0178E4  8893C4     MOV W4, BuzzerOnTime
22567:                         BuzzerOffTime=30;
0178E6  2001E4     MOV #0x1E, W4
0178E8  8893D4     MOV W4, BuzzerOffTime
22568:                         Sounds=2;
0178EA  2124A5     MOV #0x124A, W5
0178EC  B3C024     MOV.B #0x2, W4
0178EE  784A84     MOV.B W4, [W5]
22569:                                 {
22570:                     BuzzerOnEvent=27;
0178F0  2308F5     MOV #0x308F, W5
0178F2  B3C1B4     MOV.B #0x1B, W4
0178F4  784A84     MOV.B W4, [W5]
22571:                     BuzzerMacroOn//Buzzer=1;
0178F6  07218D     RCALL BzFuncOn
22572:                     }
22573:             
22574:                         break;
0178F8  370015     BRA 0x17924
22575:                         
22576:                     case 21:
22577:                         BuzzerOnTimeConst=50;      //   10 short
0178FA  200324     MOV #0x32, W4
0178FC  8893A4     MOV W4, BuzzerOnTimeConst
22578:                         BuzzerOffTimeConst=50;
0178FE  200324     MOV #0x32, W4
017900  8893B4     MOV W4, BuzzerOffTimeConst
22579:                         BuzzerOnTime=50;
017902  200324     MOV #0x32, W4
017904  8893C4     MOV W4, BuzzerOnTime
22580:                         BuzzerOffTime=50;
017906  200324     MOV #0x32, W4
017908  8893D4     MOV W4, BuzzerOffTime
22581:                         Sounds=10;
01790A  2124A5     MOV #0x124A, W5
01790C  B3C0A4     MOV.B #0xA, W4
01790E  784A84     MOV.B W4, [W5]
22582:                                 {
22583:                     BuzzerOnEvent=28;
017910  2308F5     MOV #0x308F, W5
017912  B3C1C4     MOV.B #0x1C, W4
017914  784A84     MOV.B W4, [W5]
22584:                     BuzzerMacroOn//Buzzer=1;
017916  07217D     RCALL BzFuncOn
22585:                     }
22586:             
22587:                         break;
017918  370005     BRA 0x17924
22588:             
22589:                         
22590:                         
22591:                         
22592:                     default:
22593:                         break;
01791A  000000     NOP
01791C  370003     BRA 0x17924
22594:                 }
22595:                 SoundNum=0;
017924  2124B5     MOV #0x124B, W5
017926  EB4200     CLR.B W4
017928  784A84     MOV.B W4, [W5]
01792A  370001     BRA 0x1792E
22596:             
22597:             }
01792E  FA8000     ULNK
017930  060000     RETURN
22598:             
22599:             
22600:             
22601:             
22602:             void InitPWM(void)
22603:             {
017932  FA0000     LNK #0x0
22604:               
22605:             
22606:             // Set PWM Period on Primary Time Base
22607:             PTPER = MAX_PWM+DEADTIME+Khard;
017934  8212F4     MOV MAX_PWM, W4
017936  780284     MOV W4, W5
017938  808844     MOV Khard, W4
01793A  428204     ADD W5, W4, W4
01793C  B00644     ADD #0x64, W4
01793E  886024     MOV W4, PTPER
22608:             // Set Phase Shift
22609:             PHASE1 = 0;
017940  EB0200     CLR W4
017942  886144     MOV W4, PHASE1
22610:             PHASE2 = 0;
017944  EB0200     CLR W4
017946  886244     MOV W4, PHASE2
22611:             PHASE3 = 0;
017948  EB0200     CLR W4
01794A  886344     MOV W4, PHASE3
22612:             
22613:             
22614:             // Set Duty Cycles
22615:             /////////PDC1 = 0;
22616:             /////////PDC2 = 0;
22617:             /////////PDC3 = 0;
22618:             
22619:             // Set Dead Time Values
22620:             DTR1 = DTR2 = DTR3= DEADTIME;
01794C  200644     MOV #0x64, W4
01794E  886354     MOV W4, DTR3
017950  806354     MOV DTR3, W4
017952  886254     MOV W4, DTR2
017954  806254     MOV DTR2, W4
017956  886154     MOV W4, DTR1
22621:             ALTDTR1 = ALTDTR2 = ALTDTR3   =DEADTIME;
017958  200644     MOV #0x64, W4
01795A  886364     MOV W4, ALTDTR3
01795C  806364     MOV ALTDTR3, W4
01795E  886264     MOV W4, ALTDTR2
017960  806264     MOV ALTDTR2, W4
017962  886164     MOV W4, ALTDTR1
22622:             // Set PWM Mode to Complementary
22623:             IOCON1 = IOCON2 = IOCON3 = 0x0000;
017964  EB0200     CLR W4
017966  886314     MOV W4, IOCON3
017968  806314     MOV IOCON3, W4
01796A  886214     MOV W4, IOCON2
01796C  806214     MOV IOCON2, W4
01796E  886114     MOV W4, IOCON1
22624:             // Set Primary Time Base, Edge-Aligned Mode and Independent Duty Cycles
22625:             PWMCON1 = PWMCON2 = PWMCON3 =  0x0000;
017970  EB0200     CLR W4
017972  886304     MOV W4, PWMCON3
017974  806304     MOV PWMCON3, W4
017976  886204     MOV W4, PWMCON2
017978  806204     MOV PWMCON2, W4
01797A  886104     MOV W4, PWMCON1
22626:             // Configure Faults
22627:             FCLCON1 = FCLCON2 = FCLCON3 = 0x0003;
01797C  200034     MOV #0x3, W4
01797E  886324     MOV W4, FCLCON3
017980  806324     MOV FCLCON3, W4
017982  886224     MOV W4, FCLCON2
017984  806224     MOV FCLCON2, W4
017986  886124     MOV W4, FCLCON1
22628:             // 1:1 Prescaler
22629:             
22630:             
22631:             
22632:             
22633:             
22634:             
22635:             FCLCON1bits.FLTSRC=0b01001;
017988  806125     MOV FCLCON1, W5
01798A  2FF074     MOV #0xFF07, W4
01798C  628284     AND W5, W4, W5
01798E  200484     MOV #0x48, W4
017990  728204     IOR W5, W4, W4
017992  886124     MOV W4, FCLCON1
22636:             FCLCON2bits.FLTSRC=0b01001;
017994  806225     MOV FCLCON2, W5
017996  2FF074     MOV #0xFF07, W4
017998  628284     AND W5, W4, W5
01799A  200484     MOV #0x48, W4
01799C  728204     IOR W5, W4, W4
01799E  886224     MOV W4, FCLCON2
22637:             FCLCON3bits.FLTSRC=0b01001;
0179A0  806325     MOV FCLCON3, W5
0179A2  2FF074     MOV #0xFF07, W4
0179A4  628284     AND W5, W4, W5
0179A6  200484     MOV #0x48, W4
0179A8  728204     IOR W5, W4, W4
0179AA  886324     MOV W4, FCLCON3
22638:             FCLCON1bits.FLTMOD=1;
0179AC  806124     MOV FCLCON1, W4
0179AE  A00004     BSET W4, #0
0179B0  A11004     BCLR W4, #1
0179B2  886124     MOV W4, FCLCON1
22639:             FCLCON2bits.FLTMOD=1;
0179B4  806224     MOV FCLCON2, W4
0179B6  A00004     BSET W4, #0
0179B8  A11004     BCLR W4, #1
0179BA  886224     MOV W4, FCLCON2
22640:             FCLCON3bits.FLTMOD=1;
0179BC  806324     MOV FCLCON3, W4
0179BE  A00004     BSET W4, #0
0179C0  A11004     BCLR W4, #1
0179C2  886324     MOV W4, FCLCON3
22641:             #if defined REV2
22642:             FCLCON1bits.FLTPOL=1;
0179C4  A84C24     BSET FCLCON1, #2
22643:             FCLCON2bits.FLTPOL=1;
0179C6  A84C44     BSET FCLCON2, #2
22644:             FCLCON3bits.FLTPOL=1;
0179C8  A84C64     BSET FCLCON3, #2
22645:             #else
22646:             FCLCON1bits.FLTPOL=0;
22647:             FCLCON2bits.FLTPOL=0;
22648:             FCLCON3bits.FLTPOL=0;
22649:             #endif
22650:             IOCON1bits.FLTDAT=0b00;
0179CA  806114     MOV IOCON1, W4
0179CC  A14004     BCLR W4, #4
0179CE  A15004     BCLR W4, #5
0179D0  886114     MOV W4, IOCON1
22651:             IOCON2bits.FLTDAT=0b00;
0179D2  806214     MOV IOCON2, W4
0179D4  A14004     BCLR W4, #4
0179D6  A15004     BCLR W4, #5
0179D8  886214     MOV W4, IOCON2
22652:             IOCON3bits.FLTDAT=0b00;
0179DA  806314     MOV IOCON3, W4
0179DC  A14004     BCLR W4, #4
0179DE  A15004     BCLR W4, #5
0179E0  886314     MOV W4, IOCON3
22653:             
22654:             SEVTCMP=200;
0179E2  200C84     MOV #0xC8, W4
0179E4  886034     MOV W4, SEVTCMP
22655:             //PTCONbits.SEIEN=1;
22656:             
22657:             PTCON2 = 0x0000;
0179E6  EB0200     CLR W4
0179E8  886014     MOV W4, PTCON2
22658:             /* Enable PWM Module */
22659:             PTCON = 0x8000;
0179EA  280004     MOV #0x8000, W4
0179EC  886004     MOV W4, PTCON
22660:             
22661:             
22662:             
22663:             
22664:             }
0179EE  FA8000     ULNK
0179F0  060000     RETURN
22665:             
22666:             
22667:             
22668:             
22669:             
22670:             
22671:             
22672:             void SndPhDeb200(void)
22673:             {
0179F2  FA0002     LNK #0x2
22674:                 int i;
22675:             
22676:                 if (HC05_BUSY)
0179F4  809635     MOV 0x12C6, W5
0179F6  204004     MOV #0x400, W4
0179F8  628204     AND W5, W4, W4
0179FA  520FE0     SUB W4, #0x0, [W15]
0179FC  3A0045     BRA NZ, 0x17A88
22677:                     return;
017A88  000000     NOP
017A8A  370005     BRA 0x17A96
22678:             
22679:                 if (!Hv_HC05)
0179FE  8096D5     MOV 0x12DA, W5
017A00  200404     MOV #0x40, W4
017A02  628204     AND W5, W4, W4
017A04  520FE0     SUB W4, #0x0, [W15]
017A06  320042     BRA Z, 0x17A8C
22680:                 return;
017A8C  000000     NOP
017A8E  370003     BRA 0x17A96
22681:                 if (!SendingMass)
017A08  8095E5     MOV Flgs, W5
017A0A  200804     MOV #0x80, W4
017A0C  628204     AND W5, W4, W4
017A0E  520FE0     SUB W4, #0x0, [W15]
017A10  32003F     BRA Z, 0x17A90
22682:                 return;
017A90  000000     NOP
017A92  370001     BRA 0x17A96
22683:                 if (OnTransmittHC05)
017A12  809615     MOV 0x12C2, W5
017A14  202004     MOV #0x200, W4
017A16  628204     AND W5, W4, W4
017A18  520FE0     SUB W4, #0x0, [W15]
017A1A  3A003C     BRA NZ, 0x17A94
22684:                     return;
017A94  000000     NOP
22685:                 HC05_BUSY=1;
017A1C  809634     MOV 0x12C6, W4
017A1E  A0A004     BSET W4, #10
017A20  889634     MOV W4, 0x12C6
22686:             
22687:                 HC05TrmMass[0]=0xff;
017A22  230CE5     MOV #0x30CE, W5
017A24  EBC200     SETM.B W4
017A26  784A84     MOV.B W4, [W5]
22688:                 HC05TrmMass[1]=0xff;
017A28  230CF5     MOV #0x30CF, W5
017A2A  EBC200     SETM.B W4
017A2C  784A84     MOV.B W4, [W5]
22689:                 HC05TrmMass[2]=201;
017A2E  230D05     MOV #0x30D0, W5
017A30  B3CC94     MOV.B #0xC9, W4
017A32  784A84     MOV.B W4, [W5]
22690:                 HC05TrmMass[3]=8;//COMMAND
017A34  230D15     MOV #0x30D1, W5
017A36  B3C084     MOV.B #0x8, W4
017A38  784A84     MOV.B W4, [W5]
22691:             
22692:             
22693:                 for (i=4;i<204;i++)
017A3A  200044     MOV #0x4, W4
017A3C  780F04     MOV W4, [W14]
017A3E  37000B     BRA 0x17A56
017A54  E80F1E     INC [W14], [W14]
017A56  200CB4     MOV #0xCB, W4
017A58  78029E     MOV [W14], W5
017A5A  528F84     SUB W5, W4, [W15]
017A5C  34FFF1     BRA LE, 0x17A40
22694:                 HC05TrmMass[i]=MassTMPPhase[i-4];
017A40  78029E     MOV [W14], W5
017A42  528264     SUB W5, #0x4, W4
017A44  420284     ADD W4, W4, W5
017A46  218404     MOV #0x1840, W4
017A48  428204     ADD W5, W4, W4
017A4A  780214     MOV [W4], W4
017A4C  784204     MOV.B W4, W4
017A4E  230CE5     MOV #0x30CE, W5
017A50  42829E     ADD W5, [W14], W5
017A52  784A84     MOV.B W4, [W5]
22695:             
22696:                 HC05TrmMass[i]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
017A5E  230D04     MOV #0x30D0, W4
017A60  784214     MOV.B [W4], W4
017A62  FB8204     ZE W4, W4
017A64  E80204     INC W4, W4
017A66  230D01     MOV #0x30D0, W1
017A68  780004     MOV W4, W0
017A6A  079045     RCALL CalcCheckSumm
017A6C  784200     MOV.B W0, W4
017A6E  230CE5     MOV #0x30CE, W5
017A70  42829E     ADD W5, [W14], W5
017A72  784A84     MOV.B W4, [W5]
22697:             
22698:                 MustTrmHC05=1;
017A74  809634     MOV 0x12C6, W4
017A76  A09004     BSET W4, #9
017A78  889634     MOV W4, 0x12C6
22699:                 //TrmHC05(HC05TrmMass);
22700:                 SendingMass=0;
017A7A  8095E4     MOV Flgs, W4
017A7C  A17004     BCLR W4, #7
017A7E  8895E4     MOV W4, Flgs
22701:                 SendingMass400=1;
017A80  8095F4     MOV 0x12BE, W4
017A82  A08004     BSET W4, #8
017A84  8895F4     MOV W4, 0x12BE
017A86  370007     BRA 0x17A96
22702:             }
017A96  FA8000     ULNK
017A98  060000     RETURN
22703:             
22704:             void SndPhDeb400(void)
22705:             {
017A9A  FA0002     LNK #0x2
22706:                 int i;
22707:             
22708:                 if (HC05_BUSY)
017A9C  809635     MOV 0x12C6, W5
017A9E  204004     MOV #0x400, W4
017AA0  628204     AND W5, W4, W4
017AA2  520FE0     SUB W4, #0x0, [W15]
017AA4  3A0042     BRA NZ, 0x17B2A
22709:                     return;
017B2A  000000     NOP
017B2C  370005     BRA 0x17B38
22710:             
22711:                 if (!Hv_HC05)
017AA6  8096D5     MOV 0x12DA, W5
017AA8  200404     MOV #0x40, W4
017AAA  628204     AND W5, W4, W4
017AAC  520FE0     SUB W4, #0x0, [W15]
017AAE  32003F     BRA Z, 0x17B2E
22712:                 return;
017B2E  000000     NOP
017B30  370003     BRA 0x17B38
22713:                 if (!SendingMass400)
017AB0  8095F5     MOV 0x12BE, W5
017AB2  201004     MOV #0x100, W4
017AB4  628204     AND W5, W4, W4
017AB6  520FE0     SUB W4, #0x0, [W15]
017AB8  32003C     BRA Z, 0x17B32
22714:                 return;
017B32  000000     NOP
017B34  370001     BRA 0x17B38
22715:                 if (OnTransmittHC05)
017ABA  809615     MOV 0x12C2, W5
017ABC  202004     MOV #0x200, W4
017ABE  628204     AND W5, W4, W4
017AC0  520FE0     SUB W4, #0x0, [W15]
017AC2  3A0039     BRA NZ, 0x17B36
22716:                     return;
017B36  000000     NOP
22717:                 HC05_BUSY=1;
017AC4  809634     MOV 0x12C6, W4
017AC6  A0A004     BSET W4, #10
017AC8  889634     MOV W4, 0x12C6
22718:             
22719:                 HC05TrmMass[0]=0xff;
017ACA  230CE5     MOV #0x30CE, W5
017ACC  EBC200     SETM.B W4
017ACE  784A84     MOV.B W4, [W5]
22720:                 HC05TrmMass[1]=0xff;
017AD0  230CF5     MOV #0x30CF, W5
017AD2  EBC200     SETM.B W4
017AD4  784A84     MOV.B W4, [W5]
22721:                 HC05TrmMass[2]=201;
017AD6  230D05     MOV #0x30D0, W5
017AD8  B3CC94     MOV.B #0xC9, W4
017ADA  784A84     MOV.B W4, [W5]
22722:                 HC05TrmMass[3]=8;//COMMAND
017ADC  230D15     MOV #0x30D1, W5
017ADE  B3C084     MOV.B #0x8, W4
017AE0  784A84     MOV.B W4, [W5]
22723:             
22724:             
22725:                 for (i=4;i<204;i++)
017AE2  200044     MOV #0x4, W4
017AE4  780F04     MOV W4, [W14]
017AE6  37000B     BRA 0x17AFE
017AFC  E80F1E     INC [W14], [W14]
017AFE  200CB4     MOV #0xCB, W4
017B00  78029E     MOV [W14], W5
017B02  528F84     SUB W5, W4, [W15]
017B04  34FFF1     BRA LE, 0x17AE8
22726:                 HC05TrmMass[i]=MassTMPPhase[i-4+200];
017AE8  200C45     MOV #0xC4, W5
017AEA  42821E     ADD W5, [W14], W4
017AEC  420284     ADD W4, W4, W5
017AEE  218404     MOV #0x1840, W4
017AF0  428204     ADD W5, W4, W4
017AF2  780214     MOV [W4], W4
017AF4  784204     MOV.B W4, W4
017AF6  230CE5     MOV #0x30CE, W5
017AF8  42829E     ADD W5, [W14], W5
017AFA  784A84     MOV.B W4, [W5]
22727:             
22728:                 HC05TrmMass[i]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
017B06  230D04     MOV #0x30D0, W4
017B08  784214     MOV.B [W4], W4
017B0A  FB8204     ZE W4, W4
017B0C  E80204     INC W4, W4
017B0E  230D01     MOV #0x30D0, W1
017B10  780004     MOV W4, W0
017B12  078FF1     RCALL CalcCheckSumm
017B14  784200     MOV.B W0, W4
017B16  230CE5     MOV #0x30CE, W5
017B18  42829E     ADD W5, [W14], W5
017B1A  784A84     MOV.B W4, [W5]
22729:             
22730:                 MustTrmHC05=1;
017B1C  809634     MOV 0x12C6, W4
017B1E  A09004     BSET W4, #9
017B20  889634     MOV W4, 0x12C6
22731:                 //TrmHC05(HC05TrmMass);
22732:                 SendingMass400=0;
017B22  8095F4     MOV 0x12BE, W4
017B24  A18004     BCLR W4, #8
017B26  8895F4     MOV W4, 0x12BE
017B28  370007     BRA 0x17B38
22733:             
22734:             
22735:                 
22736:             }
017B38  FA8000     ULNK
017B3A  060000     RETURN
22737:             
22738:             
22739:             
22740:             
22741:             
22742:             
22743:             void SndNeutralDeb200(void)
22744:             {
017B3C  FA0002     LNK #0x2
22745:                 int i;
22746:             
22747:                 if (HC05_BUSY)
017B3E  809635     MOV 0x12C6, W5
017B40  204004     MOV #0x400, W4
017B42  628204     AND W5, W4, W4
017B44  520FE0     SUB W4, #0x0, [W15]
017B46  3A0045     BRA NZ, 0x17BD2
22748:                     return;
017BD2  000000     NOP
017BD4  370005     BRA 0x17BE0
22749:             
22750:                 if (!Hv_HC05)
017B48  8096D5     MOV 0x12DA, W5
017B4A  200404     MOV #0x40, W4
017B4C  628204     AND W5, W4, W4
017B4E  520FE0     SUB W4, #0x0, [W15]
017B50  320042     BRA Z, 0x17BD6
22751:                 return;
017BD6  000000     NOP
017BD8  370003     BRA 0x17BE0
22752:                 if (!SendingNeutral)
017B52  8095F5     MOV 0x12BE, W5
017B54  280004     MOV #0x8000, W4
017B56  628204     AND W5, W4, W4
017B58  520FE0     SUB W4, #0x0, [W15]
017B5A  32003F     BRA Z, 0x17BDA
22753:                 return;
017BDA  000000     NOP
017BDC  370001     BRA 0x17BE0
22754:                 if (OnTransmittHC05)
017B5C  809615     MOV 0x12C2, W5
017B5E  202004     MOV #0x200, W4
017B60  628204     AND W5, W4, W4
017B62  520FE0     SUB W4, #0x0, [W15]
017B64  3A003C     BRA NZ, 0x17BDE
22755:                     return;
017BDE  000000     NOP
22756:                 HC05_BUSY=1;
017B66  809634     MOV 0x12C6, W4
017B68  A0A004     BSET W4, #10
017B6A  889634     MOV W4, 0x12C6
22757:             
22758:                 HC05TrmMass[0]=0xff;
017B6C  230CE5     MOV #0x30CE, W5
017B6E  EBC200     SETM.B W4
017B70  784A84     MOV.B W4, [W5]
22759:                 HC05TrmMass[1]=0xff;
017B72  230CF5     MOV #0x30CF, W5
017B74  EBC200     SETM.B W4
017B76  784A84     MOV.B W4, [W5]
22760:                 HC05TrmMass[2]=201;
017B78  230D05     MOV #0x30D0, W5
017B7A  B3CC94     MOV.B #0xC9, W4
017B7C  784A84     MOV.B W4, [W5]
22761:                 HC05TrmMass[3]=9;//COMMAND
017B7E  230D15     MOV #0x30D1, W5
017B80  B3C094     MOV.B #0x9, W4
017B82  784A84     MOV.B W4, [W5]
22762:             
22763:             
22764:                 for (i=4;i<204;i++)
017B84  200044     MOV #0x4, W4
017B86  780F04     MOV W4, [W14]
017B88  37000B     BRA 0x17BA0
017B9E  E80F1E     INC [W14], [W14]
017BA0  200CB4     MOV #0xCB, W4
017BA2  78029E     MOV [W14], W5
017BA4  528F84     SUB W5, W4, [W15]
017BA6  34FFF1     BRA LE, 0x17B8A
22765:                 HC05TrmMass[i]=MassTMPNeutral[i-4];
017B8A  78029E     MOV [W14], W5
017B8C  528264     SUB W5, #0x4, W4
017B8E  420284     ADD W4, W4, W5
017B90  220104     MOV #0x2010, W4
017B92  428204     ADD W5, W4, W4
017B94  780214     MOV [W4], W4
017B96  784204     MOV.B W4, W4
017B98  230CE5     MOV #0x30CE, W5
017B9A  42829E     ADD W5, [W14], W5
017B9C  784A84     MOV.B W4, [W5]
22766:             
22767:                 HC05TrmMass[i]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
017BA8  230D04     MOV #0x30D0, W4
017BAA  784214     MOV.B [W4], W4
017BAC  FB8204     ZE W4, W4
017BAE  E80204     INC W4, W4
017BB0  230D01     MOV #0x30D0, W1
017BB2  780004     MOV W4, W0
017BB4  078FA0     RCALL CalcCheckSumm
017BB6  784200     MOV.B W0, W4
017BB8  230CE5     MOV #0x30CE, W5
017BBA  42829E     ADD W5, [W14], W5
017BBC  784A84     MOV.B W4, [W5]
22768:             
22769:                 MustTrmHC05=1;
017BBE  809634     MOV 0x12C6, W4
017BC0  A09004     BSET W4, #9
017BC2  889634     MOV W4, 0x12C6
22770:                 //TrmHC05(HC05TrmMass);
22771:                 SendingNeutral=0;
017BC4  8095F4     MOV 0x12BE, W4
017BC6  A1F004     BCLR W4, #15
017BC8  8895F4     MOV W4, 0x12BE
22772:                 SendingNeutral400=1;
017BCA  809604     MOV Flgs1, W4
017BCC  A00004     BSET W4, #0
017BCE  889604     MOV W4, Flgs1
017BD0  370007     BRA 0x17BE0
22773:             }
017BE0  FA8000     ULNK
017BE2  060000     RETURN
22774:             
22775:             void SndNeutralDeb400(void)
22776:             {
017BE4  FA0002     LNK #0x2
22777:                 int i;
22778:             
22779:                 if (HC05_BUSY)
017BE6  809635     MOV 0x12C6, W5
017BE8  204004     MOV #0x400, W4
017BEA  628204     AND W5, W4, W4
017BEC  520FE0     SUB W4, #0x0, [W15]
017BEE  3A0041     BRA NZ, 0x17C72
22780:                     return;
017C72  000000     NOP
017C74  370005     BRA 0x17C80
22781:             
22782:                 if (!Hv_HC05)
017BF0  8096D5     MOV 0x12DA, W5
017BF2  200404     MOV #0x40, W4
017BF4  628204     AND W5, W4, W4
017BF6  520FE0     SUB W4, #0x0, [W15]
017BF8  32003E     BRA Z, 0x17C76
22783:                 return;
017C76  000000     NOP
017C78  370003     BRA 0x17C80
22784:                 if (!SendingNeutral400)
017BFA  809604     MOV Flgs1, W4
017BFC  620261     AND W4, #0x1, W4
017BFE  520FE0     SUB W4, #0x0, [W15]
017C00  32003C     BRA Z, 0x17C7A
22785:                 return;
017C7A  000000     NOP
017C7C  370001     BRA 0x17C80
22786:                 if (OnTransmittHC05)
017C02  809615     MOV 0x12C2, W5
017C04  202004     MOV #0x200, W4
017C06  628204     AND W5, W4, W4
017C08  520FE0     SUB W4, #0x0, [W15]
017C0A  3A0039     BRA NZ, 0x17C7E
22787:                     return;
017C7E  000000     NOP
22788:                 HC05_BUSY=1;
017C0C  809634     MOV 0x12C6, W4
017C0E  A0A004     BSET W4, #10
017C10  889634     MOV W4, 0x12C6
22789:             
22790:                 HC05TrmMass[0]=0xff;
017C12  230CE5     MOV #0x30CE, W5
017C14  EBC200     SETM.B W4
017C16  784A84     MOV.B W4, [W5]
22791:                 HC05TrmMass[1]=0xff;
017C18  230CF5     MOV #0x30CF, W5
017C1A  EBC200     SETM.B W4
017C1C  784A84     MOV.B W4, [W5]
22792:                 HC05TrmMass[2]=201;
017C1E  230D05     MOV #0x30D0, W5
017C20  B3CC94     MOV.B #0xC9, W4
017C22  784A84     MOV.B W4, [W5]
22793:                 HC05TrmMass[3]=9;//COMMAND
017C24  230D15     MOV #0x30D1, W5
017C26  B3C094     MOV.B #0x9, W4
017C28  784A84     MOV.B W4, [W5]
22794:             
22795:             
22796:                 for (i=4;i<204;i++)
017C2A  200044     MOV #0x4, W4
017C2C  780F04     MOV W4, [W14]
017C2E  37000B     BRA 0x17C46
017C44  E80F1E     INC [W14], [W14]
017C46  200CB4     MOV #0xCB, W4
017C48  78029E     MOV [W14], W5
017C4A  528F84     SUB W5, W4, [W15]
017C4C  34FFF1     BRA LE, 0x17C30
22797:                 HC05TrmMass[i]=MassTMPNeutral[i-4+200];
017C30  200C45     MOV #0xC4, W5
017C32  42821E     ADD W5, [W14], W4
017C34  420284     ADD W4, W4, W5
017C36  220104     MOV #0x2010, W4
017C38  428204     ADD W5, W4, W4
017C3A  780214     MOV [W4], W4
017C3C  784204     MOV.B W4, W4
017C3E  230CE5     MOV #0x30CE, W5
017C40  42829E     ADD W5, [W14], W5
017C42  784A84     MOV.B W4, [W5]
22798:             
22799:                 HC05TrmMass[i]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
017C4E  230D04     MOV #0x30D0, W4
017C50  784214     MOV.B [W4], W4
017C52  FB8204     ZE W4, W4
017C54  E80204     INC W4, W4
017C56  230D01     MOV #0x30D0, W1
017C58  780004     MOV W4, W0
017C5A  078F4D     RCALL CalcCheckSumm
017C5C  784200     MOV.B W0, W4
017C5E  230CE5     MOV #0x30CE, W5
017C60  42829E     ADD W5, [W14], W5
017C62  784A84     MOV.B W4, [W5]
22800:             
22801:                 MustTrmHC05=1;
017C64  809634     MOV 0x12C6, W4
017C66  A09004     BSET W4, #9
017C68  889634     MOV W4, 0x12C6
22802:                 //TrmHC05(HC05TrmMass);
22803:                 SendingNeutral400=0;
017C6A  809604     MOV Flgs1, W4
017C6C  A10004     BCLR W4, #0
017C6E  889604     MOV W4, Flgs1
017C70  370007     BRA 0x17C80
22804:                 
22805:             
22806:             
22807:             }
017C80  FA8000     ULNK
017C82  060000     RETURN
22808:             
22809:             
22810:             
22811:             
22812:             
22813:             
22814:             void TestBreak(void)
22815:             {
017C84  FA0000     LNK #0x0
22816:                 if (StrongModeBreakOff&&StrongModeMem&&StrongMode&&!SIN_MIDDLE&&!Monocycle)
017C86  809775     MOV StatFlgs3, W5
017C88  240004     MOV #0x4000, W4
017C8A  628204     AND W5, W4, W4
017C8C  520FE0     SUB W4, #0x0, [W15]
017C8E  32001A     BRA Z, 0x17CC4
017C90  809764     MOV StatFlgs2, W4
017C92  620264     AND W4, #0x4, W4
017C94  520FE0     SUB W4, #0x0, [W15]
017C96  320016     BRA Z, 0x17CC4
017C98  8095F5     MOV 0x12BE, W5
017C9A  240004     MOV #0x4000, W4
017C9C  628204     AND W5, W4, W4
017C9E  520FE0     SUB W4, #0x0, [W15]
017CA0  320011     BRA Z, 0x17CC4
017CA2  809765     MOV StatFlgs2, W5
017CA4  240004     MOV #0x4000, W4
017CA6  628204     AND W5, W4, W4
017CA8  520FE0     SUB W4, #0x0, [W15]
017CAA  3A000C     BRA NZ, 0x17CC4
017CAC  809745     MOV StatFlgs, W5
017CAE  280004     MOV #0x8000, W4
017CB0  628204     AND W5, W4, W4
017CB2  520FE0     SUB W4, #0x0, [W15]
017CB4  3A0007     BRA NZ, 0x17CC4
22817:                 {
22818:                     HvBreak=0;
017CB6  8096A4     MOV Flgs6, W4
017CB8  A12004     BCLR W4, #2
017CBA  8896A4     MOV W4, Flgs6
22819:                     BreakPressed=0;
017CBC  809614     MOV 0x12C2, W4
017CBE  A10004     BCLR W4, #0
017CC0  889614     MOV W4, 0x12C2
22820:                     return;
017CC2  3700AB     BRA 0x17E1A
22821:                 }
22822:             
22823:                     if (Break)
017CC4  072FE2     RCALL BreakFunc
017CC6  784200     MOV.B W0, W4
017CC8  524FE0     SUB.B W4, #0x0, [W15]
017CCA  32001B     BRA Z, 0x17D02
22824:                     {
22825:                         HvBreakCntOff=BreakCntConst;
017CCC  242964     MOV #0x4296, W4
017CCE  784214     MOV.B [W4], W4
017CD0  243065     MOV #0x4306, W5
017CD2  784A84     MOV.B W4, [W5]
22826:                         if (HvBreakCntOn)
017CD4  243074     MOV #0x4307, W4
017CD6  784214     MOV.B [W4], W4
017CD8  524FE0     SUB.B W4, #0x0, [W15]
017CDA  320006     BRA Z, 0x17CE8
22827:                         {
22828:                         HvBreakCntOn--;
017CDC  243074     MOV #0x4307, W4
017CDE  784214     MOV.B [W4], W4
017CE0  E94204     DEC.B W4, W4
017CE2  243075     MOV #0x4307, W5
017CE4  784A84     MOV.B W4, [W5]
017CE6  370027     BRA 0x17D36
22829:                         }
22830:                         else
22831:                             if (!BreakInvBtn)
017CE8  809755     MOV StatFlgs1, W5
017CEA  200404     MOV #0x40, W4
017CEC  628204     AND W5, W4, W4
017CEE  520FE0     SUB W4, #0x0, [W15]
017CF0  3A0004     BRA NZ, 0x17CFA
22832:                             HvBreak=1;
017CF2  8096A4     MOV Flgs6, W4
017CF4  A02004     BSET W4, #2
017CF6  8896A4     MOV W4, Flgs6
017CF8  37001E     BRA 0x17D36
22833:                             else
22834:                             HvBreak=0;
017CFA  8096A4     MOV Flgs6, W4
017CFC  A12004     BCLR W4, #2
017CFE  8896A4     MOV W4, Flgs6
017D00  37001A     BRA 0x17D36
22835:                     }
22836:                     else
22837:                     {
22838:                         HvBreakCntOn=BreakCntConst;
017D02  242964     MOV #0x4296, W4
017D04  784214     MOV.B [W4], W4
017D06  243075     MOV #0x4307, W5
017D08  784A84     MOV.B W4, [W5]
22839:                         if (HvBreakCntOff)
017D0A  243064     MOV #0x4306, W4
017D0C  784214     MOV.B [W4], W4
017D0E  524FE0     SUB.B W4, #0x0, [W15]
017D10  320006     BRA Z, 0x17D1E
22840:                         {
22841:                         HvBreakCntOff--;
017D12  243064     MOV #0x4306, W4
017D14  784214     MOV.B [W4], W4
017D16  E94204     DEC.B W4, W4
017D18  243065     MOV #0x4306, W5
017D1A  784A84     MOV.B W4, [W5]
017D1C  37000C     BRA 0x17D36
22842:                         }
22843:                         else
22844:                             if (!BreakInvBtn)
017D1E  809755     MOV StatFlgs1, W5
017D20  200404     MOV #0x40, W4
017D22  628204     AND W5, W4, W4
017D24  520FE0     SUB W4, #0x0, [W15]
017D26  3A0004     BRA NZ, 0x17D30
22845:                             HvBreak=0;
017D28  8096A4     MOV Flgs6, W4
017D2A  A12004     BCLR W4, #2
017D2C  8896A4     MOV W4, Flgs6
017D2E  370003     BRA 0x17D36
22846:                             else
22847:                             HvBreak=1;
017D30  8096A4     MOV Flgs6, W4
017D32  A02004     BSET W4, #2
017D34  8896A4     MOV W4, Flgs6
22848:             
22849:                     }
22850:             
22851:             
22852:             
22853:                     if (!BreakInvBtn)
017D36  809755     MOV StatFlgs1, W5
017D38  200404     MOV #0x40, W4
017D3A  628204     AND W5, W4, W4
017D3C  520FE0     SUB W4, #0x0, [W15]
017D3E  3A0037     BRA NZ, 0x17DAE
22854:                 {
22855:                     if (Break)
017D40  072FA4     RCALL BreakFunc
017D42  784200     MOV.B W0, W4
017D44  524FE0     SUB.B W4, #0x0, [W15]
017D46  320018     BRA Z, 0x17D78
22856:                     {
22857:                         BreakCntOff=BreakCntConst;
017D48  242964     MOV #0x4296, W4
017D4A  784214     MOV.B [W4], W4
017D4C  243055     MOV #0x4305, W5
017D4E  784A84     MOV.B W4, [W5]
22858:                         if (BreakCntOn)
017D50  243044     MOV #0x4304, W4
017D52  784214     MOV.B [W4], W4
017D54  524FE0     SUB.B W4, #0x0, [W15]
017D56  320061     BRA Z, 0x17E1A
22859:                         {
22860:                         BreakCntOn--;
017D58  243044     MOV #0x4304, W4
017D5A  784214     MOV.B [W4], W4
017D5C  E94204     DEC.B W4, W4
017D5E  243045     MOV #0x4304, W5
017D60  784A84     MOV.B W4, [W5]
22861:                         if (!BreakCntOn)
017D62  243044     MOV #0x4304, W4
017D64  784214     MOV.B [W4], W4
017D66  524FE0     SUB.B W4, #0x0, [W15]
017D68  3A0058     BRA NZ, 0x17E1A
22862:                             {
22863:                             BreakPressed=1;
017D6A  809614     MOV 0x12C2, W4
017D6C  A00004     BSET W4, #0
017D6E  889614     MOV W4, 0x12C2
22864:                             BreakPressedMonocycle=1;
017D70  809694     MOV 0x12D2, W4
017D72  A0B004     BSET W4, #11
017D74  889694     MOV W4, 0x12D2
017D76  370051     BRA 0x17E1A
22865:                             }
22866:                         }
22867:                     }
22868:                     else
22869:                     {
22870:                         BreakCntOn=BreakCntConst;
017D78  242964     MOV #0x4296, W4
017D7A  784214     MOV.B [W4], W4
017D7C  243045     MOV #0x4304, W5
017D7E  784A84     MOV.B W4, [W5]
22871:                         if (BreakCntOff)
017D80  243054     MOV #0x4305, W4
017D82  784214     MOV.B [W4], W4
017D84  524FE0     SUB.B W4, #0x0, [W15]
017D86  320049     BRA Z, 0x17E1A
22872:                         {
22873:                         BreakCntOff--;
017D88  243054     MOV #0x4305, W4
017D8A  784214     MOV.B [W4], W4
017D8C  E94204     DEC.B W4, W4
017D8E  243055     MOV #0x4305, W5
017D90  784A84     MOV.B W4, [W5]
22874:                         if (!BreakCntOff)
017D92  243054     MOV #0x4305, W4
017D94  784214     MOV.B [W4], W4
017D96  524FE0     SUB.B W4, #0x0, [W15]
017D98  3A0040     BRA NZ, 0x17E1A
22875:                              {
22876:                              BreakPressed=0;
017D9A  809614     MOV 0x12C2, W4
017D9C  A10004     BCLR W4, #0
017D9E  889614     MOV W4, 0x12C2
22877:                              BreakPressedUp=1;
017DA0  809694     MOV 0x12D2, W4
017DA2  A00004     BSET W4, #0
017DA4  889694     MOV W4, 0x12D2
22878:                              BreakPressedMonocycle=0;
017DA6  809694     MOV 0x12D2, W4
017DA8  A1B004     BCLR W4, #11
017DAA  889694     MOV W4, 0x12D2
017DAC  370036     BRA 0x17E1A
22879:                              }
22880:                         }
22881:             
22882:             
22883:                     }
22884:             
22885:                     }
22886:                     else
22887:                 {
22888:                     if (!Break)
017DAE  072F6D     RCALL BreakFunc
017DB0  784200     MOV.B W0, W4
017DB2  524FE0     SUB.B W4, #0x0, [W15]
017DB4  3A0018     BRA NZ, 0x17DE6
22889:                     {
22890:                         BreakCntOff=BreakCntConst;
017DB6  242964     MOV #0x4296, W4
017DB8  784214     MOV.B [W4], W4
017DBA  243055     MOV #0x4305, W5
017DBC  784A84     MOV.B W4, [W5]
22891:                         if (BreakCntOn)
017DBE  243044     MOV #0x4304, W4
017DC0  784214     MOV.B [W4], W4
017DC2  524FE0     SUB.B W4, #0x0, [W15]
017DC4  32002A     BRA Z, 0x17E1A
22892:                         {
22893:                         BreakCntOn--;
017DC6  243044     MOV #0x4304, W4
017DC8  784214     MOV.B [W4], W4
017DCA  E94204     DEC.B W4, W4
017DCC  243045     MOV #0x4304, W5
017DCE  784A84     MOV.B W4, [W5]
22894:                         if (!BreakCntOn)
017DD0  243044     MOV #0x4304, W4
017DD2  784214     MOV.B [W4], W4
017DD4  524FE0     SUB.B W4, #0x0, [W15]
017DD6  3A0021     BRA NZ, 0x17E1A
22895:                             {
22896:                             BreakPressed=1;
017DD8  809614     MOV 0x12C2, W4
017DDA  A00004     BSET W4, #0
017DDC  889614     MOV W4, 0x12C2
22897:                             BreakPressedMonocycle=1;
017DDE  809694     MOV 0x12D2, W4
017DE0  A0B004     BSET W4, #11
017DE2  889694     MOV W4, 0x12D2
017DE4  37001A     BRA 0x17E1A
22898:                             }
22899:                         }
22900:                     }
22901:                     else
22902:                     {
22903:                         BreakCntOn=BreakCntConst;
017DE6  242964     MOV #0x4296, W4
017DE8  784214     MOV.B [W4], W4
017DEA  243045     MOV #0x4304, W5
017DEC  784A84     MOV.B W4, [W5]
22904:                         if (BreakCntOff)
017DEE  243054     MOV #0x4305, W4
017DF0  784214     MOV.B [W4], W4
017DF2  524FE0     SUB.B W4, #0x0, [W15]
017DF4  320012     BRA Z, 0x17E1A
22905:                         {
22906:                         BreakCntOff--;
017DF6  243054     MOV #0x4305, W4
017DF8  784214     MOV.B [W4], W4
017DFA  E94204     DEC.B W4, W4
017DFC  243055     MOV #0x4305, W5
017DFE  784A84     MOV.B W4, [W5]
22907:                         if (!BreakCntOff)
017E00  243054     MOV #0x4305, W4
017E02  784214     MOV.B [W4], W4
017E04  524FE0     SUB.B W4, #0x0, [W15]
017E06  3A0009     BRA NZ, 0x17E1A
22908:                              {
22909:                              BreakPressed=0;
017E08  809614     MOV 0x12C2, W4
017E0A  A10004     BCLR W4, #0
017E0C  889614     MOV W4, 0x12C2
22910:                              BreakPressedUp=1;
017E0E  809694     MOV 0x12D2, W4
017E10  A00004     BSET W4, #0
017E12  889694     MOV W4, 0x12D2
22911:                              BreakPressedMonocycle=0;
017E14  809694     MOV 0x12D2, W4
017E16  A1B004     BCLR W4, #11
017E18  889694     MOV W4, 0x12D2
22912:                              }
22913:                         }
22914:                     }
22915:             
22916:                     }
22917:             
22918:             
22919:             
22920:             }
017E1A  FA8000     ULNK
017E1C  060000     RETURN
22921:             
22922:             
22923:             
22924:             void StateMachinePID(void)
22925:             {
017E1E  FA0000     LNK #0x0
22926:                 if ((State==1)&&(PID_On))
017E20  2428C4     MOV #0x428C, W4
017E22  784214     MOV.B [W4], W4
017E24  524FE1     SUB.B W4, #0x1, [W15]
017E26  3A0008     BRA NZ, 0x17E38
017E28  809655     MOV 0x12CA, W5
017E2A  202004     MOV #0x200, W4
017E2C  628204     AND W5, W4, W4
017E2E  520FE0     SUB W4, #0x0, [W15]
017E30  320003     BRA Z, 0x17E38
22927:                 {
22928:                     State=2;
017E32  2428C5     MOV #0x428C, W5
017E34  B3C024     MOV.B #0x2, W4
017E36  784A84     MOV.B W4, [W5]
22929:                 }
22930:             
22931:                 if ((State==2)&&(!PID_On))
017E38  2428C4     MOV #0x428C, W4
017E3A  784214     MOV.B [W4], W4
017E3C  524FE2     SUB.B W4, #0x2, [W15]
017E3E  3A002B     BRA NZ, 0x17E96
017E40  809655     MOV 0x12CA, W5
017E42  202004     MOV #0x200, W4
017E44  628204     AND W5, W4, W4
017E46  520FE0     SUB W4, #0x0, [W15]
017E48  3A0026     BRA NZ, 0x17E96
22932:                 {
22933:                     State=1;
017E4A  2428C5     MOV #0x428C, W5
017E4C  B3C014     MOV.B #0x1, W4
017E4E  784A84     MOV.B W4, [W5]
22934:                     if (!Wheeling&&BtPID_Activated)
017E50  809665     MOV Flgs4, W5
017E52  208004     MOV #0x800, W4
017E54  628204     AND W5, W4, W4
017E56  520FE0     SUB W4, #0x0, [W15]
017E58  3A001B     BRA NZ, 0x17E90
017E5A  809685     MOV Flgs5, W5
017E5C  210004     MOV #0x1000, W4
017E5E  628204     AND W5, W4, W4
017E60  520FE0     SUB W4, #0x0, [W15]
017E62  320016     BRA Z, 0x17E90
22935:                     {
22936:                     SoundNum=10;
017E64  2124B5     MOV #0x124B, W5
017E66  B3C0A4     MOV.B #0xA, W4
017E68  784A84     MOV.B W4, [W5]
22937:                     BtPID_Activated=0;
017E6A  809684     MOV Flgs5, W4
017E6C  A1C004     BCLR W4, #12
017E6E  889684     MOV W4, Flgs5
22938:                     if (StrongModePID)
017E70  809745     MOV StatFlgs, W5
017E72  220004     MOV #0x2000, W4
017E74  628204     AND W5, W4, W4
017E76  520FE0     SUB W4, #0x0, [W15]
017E78  32000B     BRA Z, 0x17E90
22939:                     StrongMode=PrevStrongMode;
017E7A  809694     MOV 0x12D2, W4
017E7C  DE224A     LSR W4, #10, W4
017E7E  624261     AND.B W4, #0x1, W4
017E80  FB8204     ZE W4, W4
017E82  620261     AND W4, #0x1, W4
017E84  DD224E     SL W4, #14, W4
017E86  8095F6     MOV 0x12BE, W6
017E88  2BFFF5     MOV #0xBFFF, W5
017E8A  630285     AND W6, W5, W5
017E8C  728204     IOR W5, W4, W4
017E8E  8895F4     MOV W4, 0x12BE
22940:             
22941:                     
22942:                     }
22943:                     SpeedControlPID=0;
017E90  8095F4     MOV 0x12BE, W4
017E92  A1C004     BCLR W4, #12
017E94  8895F4     MOV W4, 0x12BE
22944:                 }
22945:             
22946:             }
017E96  FA8000     ULNK
017E98  060000     RETURN
22947:             
22948:             float GetTemperaturePTC_KTY81_210(unsigned int ResTemp)
22949:             {
017E9A  FA0012     LNK #0x12
017E9C  980F00     MOV W0, [W14+16]
22950:             int k=0,sz=sizeof(Tenzo1);
017E9E  EB0200     CLR W4
017EA0  780F04     MOV W4, [W14]
017EA2  200304     MOV #0x30, W4
017EA4  980714     MOV W4, [W14+2]
22951:             float T,T1,temp;
22952:             
22953:             sz=sz>>1;
017EA6  90021E     MOV [W14+2], W4
017EA8  D18204     ASR W4, W4
017EAA  980714     MOV W4, [W14+2]
22954:             
22955:                 while (ResTemp>Tenzo1[k])
017EAC  370001     BRA 0x17EB0
017EB0  78021E     MOV [W14], W4
017EB2  420284     ADD W4, W4, W5
017EB4  2ACB84     MOV #0xACB8, W4
017EB6  428204     ADD W5, W4, W4
017EB8  780294     MOV [W4], W5
017EBA  900A0E     MOV [W14+16], W4
017EBC  528F84     SUB W5, W4, [W15]
017EBE  39FFF7     BRA NC, 0x17EAE
22956:                     k++;
017EAE  E80F1E     INC [W14], [W14]
22957:             
22958:             if (k>=sz)
017EC0  90021E     MOV [W14+2], W4
017EC2  78029E     MOV [W14], W5
017EC4  528F84     SUB W5, W4, [W15]
017EC6  350003     BRA LT, 0x17ECE
22959:                 return (float)150;
017EC8  200004     MOV #0x0, W4
017ECA  243165     MOV #0x4316, W5
017ECC  37005B     BRA 0x17F84
22960:             
22961:                     if (k==0)
017ECE  78021E     MOV [W14], W4
017ED0  520FE0     SUB W4, #0x0, [W15]
017ED2  3A0003     BRA NZ, 0x17EDA
22962:                 return (float)-55;
017ED4  200004     MOV #0x0, W4
017ED6  2C25C5     MOV #0xC25C, W5
017ED8  370055     BRA 0x17F84
22963:             
22964:             T=Tenzo1[k]-Tenzo1[k-1];
017EDA  78021E     MOV [W14], W4
017EDC  420284     ADD W4, W4, W5
017EDE  2ACB84     MOV #0xACB8, W4
017EE0  428204     ADD W5, W4, W4
017EE2  780294     MOV [W4], W5
017EE4  E9021E     DEC [W14], W4
017EE6  420304     ADD W4, W4, W6
017EE8  2ACB84     MOV #0xACB8, W4
017EEA  430204     ADD W6, W4, W4
017EEC  780214     MOV [W4], W4
017EEE  528204     SUB W5, W4, W4
017EF0  200005     MOV #0x0, W5
017EF2  BE0004     MOV.D W4, W0
017EF4  022582     CALL ___floatunsisf
017EF6  000000     NOP
017EF8  BE0200     MOV.D W0, W4
017EFA  980724     MOV W4, [W14+4]
017EFC  980735     MOV W5, [W14+6]
22965:             T1=ResTemp-Tenzo1[k-1];
017EFE  E9021E     DEC [W14], W4
017F00  420284     ADD W4, W4, W5
017F02  2ACB84     MOV #0xACB8, W4
017F04  428204     ADD W5, W4, W4
017F06  780214     MOV [W4], W4
017F08  900A8E     MOV [W14+16], W5
017F0A  528204     SUB W5, W4, W4
017F0C  200005     MOV #0x0, W5
017F0E  BE0004     MOV.D W4, W0
017F10  022582     CALL ___floatunsisf
017F12  000000     NOP
017F14  BE0200     MOV.D W0, W4
017F16  980744     MOV W4, [W14+8]
017F18  980755     MOV W5, [W14+10]
22966:             
22967:             temp=TempTenzo1[k]-TempTenzo1[k-1];
017F1A  78021E     MOV [W14], W4
017F1C  420284     ADD W4, W4, W5
017F1E  2ACE84     MOV #0xACE8, W4
017F20  428204     ADD W5, W4, W4
017F22  780294     MOV [W4], W5
017F24  E9021E     DEC [W14], W4
017F26  420304     ADD W4, W4, W6
017F28  2ACE84     MOV #0xACE8, W4
017F2A  430204     ADD W6, W4, W4
017F2C  780214     MOV [W4], W4
017F2E  528204     SUB W5, W4, W4
017F30  DEA2CF     ASR W4, #15, W5
017F32  BE0004     MOV.D W4, W0
017F34  02257C     CALL ___floatsisf
017F36  000000     NOP
017F38  BE0200     MOV.D W0, W4
017F3A  980764     MOV W4, [W14+12]
017F3C  980775     MOV W5, [W14+14]
22968:             
22969:             
22970:             T1=(T1*temp)/T;
017F3E  90016E     MOV [W14+12], W2
017F40  9001FE     MOV [W14+14], W3
017F42  90004E     MOV [W14+8], W0
017F44  9000DE     MOV [W14+10], W1
017F46  022630     CALL ___mulsf3
017F48  000000     NOP
017F4A  BE0200     MOV.D W0, W4
017F4C  90012E     MOV [W14+4], W2
017F4E  9001BE     MOV [W14+6], W3
017F50  BE0004     MOV.D W4, W0
017F52  02245A     CALL ___divsf3
017F54  000000     NOP
017F56  BE0200     MOV.D W0, W4
017F58  980744     MOV W4, [W14+8]
017F5A  980755     MOV W5, [W14+10]
22971:             
22972:             T=TempTenzo1[k-1]+T1;
017F5C  E9021E     DEC [W14], W4
017F5E  420284     ADD W4, W4, W5
017F60  2ACE84     MOV #0xACE8, W4
017F62  428204     ADD W5, W4, W4
017F64  780214     MOV [W4], W4
017F66  DEA2CF     ASR W4, #15, W5
017F68  BE0004     MOV.D W4, W0
017F6A  02257C     CALL ___floatsisf
017F6C  000000     NOP
017F6E  BE0200     MOV.D W0, W4
017F70  90014E     MOV [W14+8], W2
017F72  9001DE     MOV [W14+10], W3
017F74  BE0004     MOV.D W4, W0
017F76  0222D2     CALL ___addsf3
017F78  000000     NOP
017F7A  BE0200     MOV.D W0, W4
017F7C  980724     MOV W4, [W14+4]
017F7E  980735     MOV W5, [W14+6]
22973:             
22974:             
22975:             
22976:                 return T;
017F80  90022E     MOV [W14+4], W4
017F82  9002BE     MOV [W14+6], W5
22977:             }
017F84  BE0004     MOV.D W4, W0
017F86  FA8000     ULNK
017F88  060000     RETURN
22978:             
22979:             
22980:             
22981:             float GetTemperature_NTCALUG03A103H(unsigned int ResTemp)
22982:             {
017F8A  FA0012     LNK #0x12
017F8C  980F00     MOV W0, [W14+16]
22983:             int k=0,sz=sizeof(Tenzo2);
017F8E  EB0200     CLR W4
017F90  780F04     MOV W4, [W14]
017F92  200444     MOV #0x44, W4
017F94  980714     MOV W4, [W14+2]
22984:             float T,T1,temp;
22985:             
22986:             sz=sz>>1;
017F96  90021E     MOV [W14+2], W4
017F98  D18204     ASR W4, W4
017F9A  980714     MOV W4, [W14+2]
22987:             
22988:                 while (ResTemp<Tenzo2[k])
017F9C  370001     BRA 0x17FA0
017FA0  78021E     MOV [W14], W4
017FA2  420284     ADD W4, W4, W5
017FA4  2AD184     MOV #0xAD18, W4
017FA6  428204     ADD W5, W4, W4
017FA8  780294     MOV [W4], W5
017FAA  900A0E     MOV [W14+16], W4
017FAC  528F84     SUB W5, W4, [W15]
017FAE  3EFFF7     BRA GTU, 0x17F9E
22989:                     k++;
017F9E  E80F1E     INC [W14], [W14]
22990:             
22991:             if (k>=sz)
017FB0  90021E     MOV [W14+2], W4
017FB2  78029E     MOV [W14], W5
017FB4  528F84     SUB W5, W4, [W15]
017FB6  350003     BRA LT, 0x17FBE
22992:                 return (float)125;
017FB8  200004     MOV #0x0, W4
017FBA  242FA5     MOV #0x42FA, W5
017FBC  37005B     BRA 0x18074
22993:             
22994:                     if (k==0)
017FBE  78021E     MOV [W14], W4
017FC0  520FE0     SUB W4, #0x0, [W15]
017FC2  3A0003     BRA NZ, 0x17FCA
22995:                 return (float)-40;
017FC4  200004     MOV #0x0, W4
017FC6  2C2205     MOV #0xC220, W5
017FC8  370055     BRA 0x18074
22996:             
22997:             T=Tenzo2[k-1]-Tenzo2[k];
017FCA  E9021E     DEC [W14], W4
017FCC  420284     ADD W4, W4, W5
017FCE  2AD184     MOV #0xAD18, W4
017FD0  428204     ADD W5, W4, W4
017FD2  780294     MOV [W4], W5
017FD4  78021E     MOV [W14], W4
017FD6  420304     ADD W4, W4, W6
017FD8  2AD184     MOV #0xAD18, W4
017FDA  430204     ADD W6, W4, W4
017FDC  780214     MOV [W4], W4
017FDE  528204     SUB W5, W4, W4
017FE0  200005     MOV #0x0, W5
017FE2  BE0004     MOV.D W4, W0
017FE4  022582     CALL ___floatunsisf
017FE6  000000     NOP
017FE8  BE0200     MOV.D W0, W4
017FEA  980724     MOV W4, [W14+4]
017FEC  980735     MOV W5, [W14+6]
22998:             T1=Tenzo2[k-1]-ResTemp;
017FEE  E9021E     DEC [W14], W4
017FF0  420284     ADD W4, W4, W5
017FF2  2AD184     MOV #0xAD18, W4
017FF4  428204     ADD W5, W4, W4
017FF6  780294     MOV [W4], W5
017FF8  900A0E     MOV [W14+16], W4
017FFA  528204     SUB W5, W4, W4
017FFC  200005     MOV #0x0, W5
017FFE  BE0004     MOV.D W4, W0
018000  022582     CALL ___floatunsisf
018002  000000     NOP
018004  BE0200     MOV.D W0, W4
018006  980744     MOV W4, [W14+8]
018008  980755     MOV W5, [W14+10]
22999:             
23000:             temp=TempTenzo2[k]-TempTenzo2[k-1];
01800A  78021E     MOV [W14], W4
01800C  420284     ADD W4, W4, W5
01800E  2AD5C4     MOV #0xAD5C, W4
018010  428204     ADD W5, W4, W4
018012  780294     MOV [W4], W5
018014  E9021E     DEC [W14], W4
018016  420304     ADD W4, W4, W6
018018  2AD5C4     MOV #0xAD5C, W4
01801A  430204     ADD W6, W4, W4
01801C  780214     MOV [W4], W4
01801E  528204     SUB W5, W4, W4
018020  DEA2CF     ASR W4, #15, W5
018022  BE0004     MOV.D W4, W0
018024  02257C     CALL ___floatsisf
018026  000000     NOP
018028  BE0200     MOV.D W0, W4
01802A  980764     MOV W4, [W14+12]
01802C  980775     MOV W5, [W14+14]
23001:             
23002:             
23003:             T1=(T1*temp)/T;
01802E  90016E     MOV [W14+12], W2
018030  9001FE     MOV [W14+14], W3
018032  90004E     MOV [W14+8], W0
018034  9000DE     MOV [W14+10], W1
018036  022630     CALL ___mulsf3
018038  000000     NOP
01803A  BE0200     MOV.D W0, W4
01803C  90012E     MOV [W14+4], W2
01803E  9001BE     MOV [W14+6], W3
018040  BE0004     MOV.D W4, W0
018042  02245A     CALL ___divsf3
018044  000000     NOP
018046  BE0200     MOV.D W0, W4
018048  980744     MOV W4, [W14+8]
01804A  980755     MOV W5, [W14+10]
23004:             
23005:             T=TempTenzo2[k-1]+T1;
01804C  E9021E     DEC [W14], W4
01804E  420284     ADD W4, W4, W5
018050  2AD5C4     MOV #0xAD5C, W4
018052  428204     ADD W5, W4, W4
018054  780214     MOV [W4], W4
018056  DEA2CF     ASR W4, #15, W5
018058  BE0004     MOV.D W4, W0
01805A  02257C     CALL ___floatsisf
01805C  000000     NOP
01805E  BE0200     MOV.D W0, W4
018060  90014E     MOV [W14+8], W2
018062  9001DE     MOV [W14+10], W3
018064  BE0004     MOV.D W4, W0
018066  0222D2     CALL ___addsf3
018068  000000     NOP
01806A  BE0200     MOV.D W0, W4
01806C  980724     MOV W4, [W14+4]
01806E  980735     MOV W5, [W14+6]
23006:             
23007:             
23008:             
23009:                 return T;
018070  90022E     MOV [W14+4], W4
018072  9002BE     MOV [W14+6], W5
23010:             }
018074  BE0004     MOV.D W4, W0
018076  FA8000     ULNK
018078  060000     RETURN
23011:             
23012:             
23013:             float GetTemperature_MF58_B_5K(unsigned int ResTemp)
23014:             {
01807A  FA0012     LNK #0x12
01807C  980F00     MOV W0, [W14+16]
23015:             int k=0,sz=sizeof(Tenzo7);
01807E  EB0200     CLR W4
018080  780F04     MOV W4, [W14]
018082  2003A4     MOV #0x3A, W4
018084  980714     MOV W4, [W14+2]
23016:             float T,T1,temp;
23017:             
23018:             sz=sz>>1;
018086  90021E     MOV [W14+2], W4
018088  D18204     ASR W4, W4
01808A  980714     MOV W4, [W14+2]
23019:             
23020:                 while (ResTemp<Tenzo7[k])
01808C  370001     BRA 0x18090
018090  78021E     MOV [W14], W4
018092  420284     ADD W4, W4, W5
018094  2ADA04     MOV #0xADA0, W4
018096  428204     ADD W5, W4, W4
018098  780294     MOV [W4], W5
01809A  900A0E     MOV [W14+16], W4
01809C  528F84     SUB W5, W4, [W15]
01809E  3EFFF7     BRA GTU, 0x1808E
23021:                     k++;
01808E  E80F1E     INC [W14], [W14]
23022:             
23023:             if (k>=sz)
0180A0  90021E     MOV [W14+2], W4
0180A2  78029E     MOV [W14], W5
0180A4  528F84     SUB W5, W4, [W15]
0180A6  350003     BRA LT, 0x180AE
23024:                 return (float)125;
0180A8  200004     MOV #0x0, W4
0180AA  242FA5     MOV #0x42FA, W5
0180AC  37005B     BRA 0x18164
23025:             
23026:                     if (k==0)
0180AE  78021E     MOV [W14], W4
0180B0  520FE0     SUB W4, #0x0, [W15]
0180B2  3A0003     BRA NZ, 0x180BA
23027:                 return (float)-40;
0180B4  200004     MOV #0x0, W4
0180B6  2C2205     MOV #0xC220, W5
0180B8  370055     BRA 0x18164
23028:             
23029:             T=Tenzo7[k-1]-Tenzo7[k];
0180BA  E9021E     DEC [W14], W4
0180BC  420284     ADD W4, W4, W5
0180BE  2ADA04     MOV #0xADA0, W4
0180C0  428204     ADD W5, W4, W4
0180C2  780294     MOV [W4], W5
0180C4  78021E     MOV [W14], W4
0180C6  420304     ADD W4, W4, W6
0180C8  2ADA04     MOV #0xADA0, W4
0180CA  430204     ADD W6, W4, W4
0180CC  780214     MOV [W4], W4
0180CE  528204     SUB W5, W4, W4
0180D0  200005     MOV #0x0, W5
0180D2  BE0004     MOV.D W4, W0
0180D4  022582     CALL ___floatunsisf
0180D6  000000     NOP
0180D8  BE0200     MOV.D W0, W4
0180DA  980724     MOV W4, [W14+4]
0180DC  980735     MOV W5, [W14+6]
23030:             T1=Tenzo7[k-1]-ResTemp;
0180DE  E9021E     DEC [W14], W4
0180E0  420284     ADD W4, W4, W5
0180E2  2ADA04     MOV #0xADA0, W4
0180E4  428204     ADD W5, W4, W4
0180E6  780294     MOV [W4], W5
0180E8  900A0E     MOV [W14+16], W4
0180EA  528204     SUB W5, W4, W4
0180EC  200005     MOV #0x0, W5
0180EE  BE0004     MOV.D W4, W0
0180F0  022582     CALL ___floatunsisf
0180F2  000000     NOP
0180F4  BE0200     MOV.D W0, W4
0180F6  980744     MOV W4, [W14+8]
0180F8  980755     MOV W5, [W14+10]
23031:             
23032:             temp=TempTenzo7[k]-TempTenzo7[k-1];
0180FA  78021E     MOV [W14], W4
0180FC  420284     ADD W4, W4, W5
0180FE  2ADDA4     MOV #0xADDA, W4
018100  428204     ADD W5, W4, W4
018102  780294     MOV [W4], W5
018104  E9021E     DEC [W14], W4
018106  420304     ADD W4, W4, W6
018108  2ADDA4     MOV #0xADDA, W4
01810A  430204     ADD W6, W4, W4
01810C  780214     MOV [W4], W4
01810E  528204     SUB W5, W4, W4
018110  DEA2CF     ASR W4, #15, W5
018112  BE0004     MOV.D W4, W0
018114  02257C     CALL ___floatsisf
018116  000000     NOP
018118  BE0200     MOV.D W0, W4
01811A  980764     MOV W4, [W14+12]
01811C  980775     MOV W5, [W14+14]
23033:             
23034:             
23035:             T1=(T1*temp)/T;
01811E  90016E     MOV [W14+12], W2
018120  9001FE     MOV [W14+14], W3
018122  90004E     MOV [W14+8], W0
018124  9000DE     MOV [W14+10], W1
018126  022630     CALL ___mulsf3
018128  000000     NOP
01812A  BE0200     MOV.D W0, W4
01812C  90012E     MOV [W14+4], W2
01812E  9001BE     MOV [W14+6], W3
018130  BE0004     MOV.D W4, W0
018132  02245A     CALL ___divsf3
018134  000000     NOP
018136  BE0200     MOV.D W0, W4
018138  980744     MOV W4, [W14+8]
01813A  980755     MOV W5, [W14+10]
23036:             
23037:             T=TempTenzo7[k-1]+T1;
01813C  E9021E     DEC [W14], W4
01813E  420284     ADD W4, W4, W5
018140  2ADDA4     MOV #0xADDA, W4
018142  428204     ADD W5, W4, W4
018144  780214     MOV [W4], W4
018146  DEA2CF     ASR W4, #15, W5
018148  BE0004     MOV.D W4, W0
01814A  02257C     CALL ___floatsisf
01814C  000000     NOP
01814E  BE0200     MOV.D W0, W4
018150  90014E     MOV [W14+8], W2
018152  9001DE     MOV [W14+10], W3
018154  BE0004     MOV.D W4, W0
018156  0222D2     CALL ___addsf3
018158  000000     NOP
01815A  BE0200     MOV.D W0, W4
01815C  980724     MOV W4, [W14+4]
01815E  980735     MOV W5, [W14+6]
23038:             
23039:             
23040:             
23041:                 return T;
018160  90022E     MOV [W14+4], W4
018162  9002BE     MOV [W14+6], W5
23042:             }
018164  BE0004     MOV.D W4, W0
018166  FA8000     ULNK
018168  060000     RETURN
23043:             
23044:             float GetTemperature_MF58_G_10K(unsigned int ResTemp)
23045:             {
01816A  FA0012     LNK #0x12
01816C  980F00     MOV W0, [W14+16]
23046:             int k=0,sz=sizeof(Tenzo8);
01816E  EB0200     CLR W4
018170  780F04     MOV W4, [W14]
018172  2003A4     MOV #0x3A, W4
018174  980714     MOV W4, [W14+2]
23047:             float T,T1,temp;
23048:             
23049:             sz=sz>>1;
018176  90021E     MOV [W14+2], W4
018178  D18204     ASR W4, W4
01817A  980714     MOV W4, [W14+2]
23050:             
23051:                 while (ResTemp<Tenzo8[k])
01817C  370001     BRA 0x18180
018180  78021E     MOV [W14], W4
018182  420284     ADD W4, W4, W5
018184  2AE144     MOV #0xAE14, W4
018186  428204     ADD W5, W4, W4
018188  780294     MOV [W4], W5
01818A  900A0E     MOV [W14+16], W4
01818C  528F84     SUB W5, W4, [W15]
01818E  3EFFF7     BRA GTU, 0x1817E
23052:                     k++;
01817E  E80F1E     INC [W14], [W14]
23053:             
23054:             if (k>=sz)
018190  90021E     MOV [W14+2], W4
018192  78029E     MOV [W14], W5
018194  528F84     SUB W5, W4, [W15]
018196  350003     BRA LT, 0x1819E
23055:                 return (float)125;
018198  200004     MOV #0x0, W4
01819A  242FA5     MOV #0x42FA, W5
01819C  37005B     BRA 0x18254
23056:             
23057:                     if (k==0)
01819E  78021E     MOV [W14], W4
0181A0  520FE0     SUB W4, #0x0, [W15]
0181A2  3A0003     BRA NZ, 0x181AA
23058:                 return (float)-40;
0181A4  200004     MOV #0x0, W4
0181A6  2C2205     MOV #0xC220, W5
0181A8  370055     BRA 0x18254
23059:             
23060:             T=Tenzo8[k-1]-Tenzo8[k];
0181AA  E9021E     DEC [W14], W4
0181AC  420284     ADD W4, W4, W5
0181AE  2AE144     MOV #0xAE14, W4
0181B0  428204     ADD W5, W4, W4
0181B2  780294     MOV [W4], W5
0181B4  78021E     MOV [W14], W4
0181B6  420304     ADD W4, W4, W6
0181B8  2AE144     MOV #0xAE14, W4
0181BA  430204     ADD W6, W4, W4
0181BC  780214     MOV [W4], W4
0181BE  528204     SUB W5, W4, W4
0181C0  200005     MOV #0x0, W5
0181C2  BE0004     MOV.D W4, W0
0181C4  022582     CALL ___floatunsisf
0181C6  000000     NOP
0181C8  BE0200     MOV.D W0, W4
0181CA  980724     MOV W4, [W14+4]
0181CC  980735     MOV W5, [W14+6]
23061:             T1=Tenzo8[k-1]-ResTemp;
0181CE  E9021E     DEC [W14], W4
0181D0  420284     ADD W4, W4, W5
0181D2  2AE144     MOV #0xAE14, W4
0181D4  428204     ADD W5, W4, W4
0181D6  780294     MOV [W4], W5
0181D8  900A0E     MOV [W14+16], W4
0181DA  528204     SUB W5, W4, W4
0181DC  200005     MOV #0x0, W5
0181DE  BE0004     MOV.D W4, W0
0181E0  022582     CALL ___floatunsisf
0181E2  000000     NOP
0181E4  BE0200     MOV.D W0, W4
0181E6  980744     MOV W4, [W14+8]
0181E8  980755     MOV W5, [W14+10]
23062:             
23063:             temp=TempTenzo8[k]-TempTenzo8[k-1];
0181EA  78021E     MOV [W14], W4
0181EC  420284     ADD W4, W4, W5
0181EE  2AF9A4     MOV #0xAF9A, W4
0181F0  428204     ADD W5, W4, W4
0181F2  780294     MOV [W4], W5
0181F4  E9021E     DEC [W14], W4
0181F6  420304     ADD W4, W4, W6
0181F8  2AF9A4     MOV #0xAF9A, W4
0181FA  430204     ADD W6, W4, W4
0181FC  780214     MOV [W4], W4
0181FE  528204     SUB W5, W4, W4
018200  DEA2CF     ASR W4, #15, W5
018202  BE0004     MOV.D W4, W0
018204  02257C     CALL ___floatsisf
018206  000000     NOP
018208  BE0200     MOV.D W0, W4
01820A  980764     MOV W4, [W14+12]
01820C  980775     MOV W5, [W14+14]
23064:             
23065:             
23066:             T1=(T1*temp)/T;
01820E  90016E     MOV [W14+12], W2
018210  9001FE     MOV [W14+14], W3
018212  90004E     MOV [W14+8], W0
018214  9000DE     MOV [W14+10], W1
018216  022630     CALL ___mulsf3
018218  000000     NOP
01821A  BE0200     MOV.D W0, W4
01821C  90012E     MOV [W14+4], W2
01821E  9001BE     MOV [W14+6], W3
018220  BE0004     MOV.D W4, W0
018222  02245A     CALL ___divsf3
018224  000000     NOP
018226  BE0200     MOV.D W0, W4
018228  980744     MOV W4, [W14+8]
01822A  980755     MOV W5, [W14+10]
23067:             
23068:             T=TempTenzo8[k-1]+T1;
01822C  E9021E     DEC [W14], W4
01822E  420284     ADD W4, W4, W5
018230  2AF9A4     MOV #0xAF9A, W4
018232  428204     ADD W5, W4, W4
018234  780214     MOV [W4], W4
018236  DEA2CF     ASR W4, #15, W5
018238  BE0004     MOV.D W4, W0
01823A  02257C     CALL ___floatsisf
01823C  000000     NOP
01823E  BE0200     MOV.D W0, W4
018240  90014E     MOV [W14+8], W2
018242  9001DE     MOV [W14+10], W3
018244  BE0004     MOV.D W4, W0
018246  0222D2     CALL ___addsf3
018248  000000     NOP
01824A  BE0200     MOV.D W0, W4
01824C  980724     MOV W4, [W14+4]
01824E  980735     MOV W5, [W14+6]
23069:             
23070:             
23071:             
23072:                 return T;
018250  90022E     MOV [W14+4], W4
018252  9002BE     MOV [W14+6], W5
23073:             }
018254  BE0004     MOV.D W4, W0
018256  FA8000     ULNK
018258  060000     RETURN
23074:             
23075:             float GetTemperature_NCP18XH103F03RB(unsigned int ResTemp)
23076:             {
01825A  FA0012     LNK #0x12
01825C  980F00     MOV W0, [W14+16]
23077:             int k=0,sz=sizeof(Tenzo9);
01825E  EB0200     CLR W4
018260  780F04     MOV W4, [W14]
018262  2014C4     MOV #0x14C, W4
018264  980714     MOV W4, [W14+2]
23078:             float T,T1,temp;
23079:             
23080:             sz=sz>>1;
018266  90021E     MOV [W14+2], W4
018268  D18204     ASR W4, W4
01826A  980714     MOV W4, [W14+2]
23081:             
23082:                 while (ResTemp<Tenzo9[k])
01826C  370001     BRA 0x18270
018270  78021E     MOV [W14], W4
018272  420284     ADD W4, W4, W5
018274  2AE4E4     MOV #0xAE4E, W4
018276  428204     ADD W5, W4, W4
018278  780294     MOV [W4], W5
01827A  900A0E     MOV [W14+16], W4
01827C  528F84     SUB W5, W4, [W15]
01827E  3EFFF7     BRA GTU, 0x1826E
23083:                     k++;
01826E  E80F1E     INC [W14], [W14]
23084:             
23085:             if (k>=sz)
018280  90021E     MOV [W14+2], W4
018282  78029E     MOV [W14], W5
018284  528F84     SUB W5, W4, [W15]
018286  350003     BRA LT, 0x1828E
23086:                 return (float)125;
018288  200004     MOV #0x0, W4
01828A  242FA5     MOV #0x42FA, W5
01828C  37005B     BRA 0x18344
23087:             
23088:                     if (k==0)
01828E  78021E     MOV [W14], W4
018290  520FE0     SUB W4, #0x0, [W15]
018292  3A0003     BRA NZ, 0x1829A
23089:                 return (float)-40;
018294  200004     MOV #0x0, W4
018296  2C2205     MOV #0xC220, W5
018298  370055     BRA 0x18344
23090:             
23091:             T=Tenzo9[k-1]-Tenzo9[k];
01829A  E9021E     DEC [W14], W4
01829C  420284     ADD W4, W4, W5
01829E  2AE4E4     MOV #0xAE4E, W4
0182A0  428204     ADD W5, W4, W4
0182A2  780294     MOV [W4], W5
0182A4  78021E     MOV [W14], W4
0182A6  420304     ADD W4, W4, W6
0182A8  2AE4E4     MOV #0xAE4E, W4
0182AA  430204     ADD W6, W4, W4
0182AC  780214     MOV [W4], W4
0182AE  528204     SUB W5, W4, W4
0182B0  200005     MOV #0x0, W5
0182B2  BE0004     MOV.D W4, W0
0182B4  022582     CALL ___floatunsisf
0182B6  000000     NOP
0182B8  BE0200     MOV.D W0, W4
0182BA  980724     MOV W4, [W14+4]
0182BC  980735     MOV W5, [W14+6]
23092:             T1=Tenzo9[k-1]-ResTemp;
0182BE  E9021E     DEC [W14], W4
0182C0  420284     ADD W4, W4, W5
0182C2  2AE4E4     MOV #0xAE4E, W4
0182C4  428204     ADD W5, W4, W4
0182C6  780294     MOV [W4], W5
0182C8  900A0E     MOV [W14+16], W4
0182CA  528204     SUB W5, W4, W4
0182CC  200005     MOV #0x0, W5
0182CE  BE0004     MOV.D W4, W0
0182D0  022582     CALL ___floatunsisf
0182D2  000000     NOP
0182D4  BE0200     MOV.D W0, W4
0182D6  980744     MOV W4, [W14+8]
0182D8  980755     MOV W5, [W14+10]
23093:             
23094:             temp=TempTenzo9[k]-TempTenzo9[k-1];
0182DA  78021E     MOV [W14], W4
0182DC  420284     ADD W4, W4, W5
0182DE  2AFD44     MOV #0xAFD4, W4
0182E0  428204     ADD W5, W4, W4
0182E2  780294     MOV [W4], W5
0182E4  E9021E     DEC [W14], W4
0182E6  420304     ADD W4, W4, W6
0182E8  2AFD44     MOV #0xAFD4, W4
0182EA  430204     ADD W6, W4, W4
0182EC  780214     MOV [W4], W4
0182EE  528204     SUB W5, W4, W4
0182F0  DEA2CF     ASR W4, #15, W5
0182F2  BE0004     MOV.D W4, W0
0182F4  02257C     CALL ___floatsisf
0182F6  000000     NOP
0182F8  BE0200     MOV.D W0, W4
0182FA  980764     MOV W4, [W14+12]
0182FC  980775     MOV W5, [W14+14]
23095:             
23096:             
23097:             T1=(T1*temp)/T;
0182FE  90016E     MOV [W14+12], W2
018300  9001FE     MOV [W14+14], W3
018302  90004E     MOV [W14+8], W0
018304  9000DE     MOV [W14+10], W1
018306  022630     CALL ___mulsf3
018308  000000     NOP
01830A  BE0200     MOV.D W0, W4
01830C  90012E     MOV [W14+4], W2
01830E  9001BE     MOV [W14+6], W3
018310  BE0004     MOV.D W4, W0
018312  02245A     CALL ___divsf3
018314  000000     NOP
018316  BE0200     MOV.D W0, W4
018318  980744     MOV W4, [W14+8]
01831A  980755     MOV W5, [W14+10]
23098:             
23099:             T=TempTenzo9[k-1]+T1;
01831C  E9021E     DEC [W14], W4
01831E  420284     ADD W4, W4, W5
018320  2AFD44     MOV #0xAFD4, W4
018322  428204     ADD W5, W4, W4
018324  780214     MOV [W4], W4
018326  DEA2CF     ASR W4, #15, W5
018328  BE0004     MOV.D W4, W0
01832A  02257C     CALL ___floatsisf
01832C  000000     NOP
01832E  BE0200     MOV.D W0, W4
018330  90014E     MOV [W14+8], W2
018332  9001DE     MOV [W14+10], W3
018334  BE0004     MOV.D W4, W0
018336  0222D2     CALL ___addsf3
018338  000000     NOP
01833A  BE0200     MOV.D W0, W4
01833C  980724     MOV W4, [W14+4]
01833E  980735     MOV W5, [W14+6]
23100:             
23101:             
23102:             
23103:                 return T;
018340  90022E     MOV [W14+4], W4
018342  9002BE     MOV [W14+6], W5
23104:             }
018344  BE0004     MOV.D W4, W0
018346  FA8000     ULNK
018348  060000     RETURN
23105:             
23106:             
23107:             
23108:             
23109:             float GetTemperaturePTC_KTY83_110(unsigned int ResTemp)
23110:             {
01834A  FA0012     LNK #0x12
01834C  980F00     MOV W0, [W14+16]
23111:             int k=0,sz=sizeof(Tenzo3);
01834E  EB0200     CLR W4
018350  780F04     MOV W4, [W14]
018352  200364     MOV #0x36, W4
018354  980714     MOV W4, [W14+2]
23112:             float T,T1,temp;
23113:             
23114:             sz=sz>>1;
018356  90021E     MOV [W14+2], W4
018358  D18204     ASR W4, W4
01835A  980714     MOV W4, [W14+2]
23115:             
23116:                 while (ResTemp>Tenzo3[k])
01835C  370001     BRA 0x18360
018360  78021E     MOV [W14], W4
018362  420284     ADD W4, W4, W5
018364  2B1204     MOV #0xB120, W4
018366  428204     ADD W5, W4, W4
018368  780294     MOV [W4], W5
01836A  900A0E     MOV [W14+16], W4
01836C  528F84     SUB W5, W4, [W15]
01836E  39FFF7     BRA NC, 0x1835E
23117:                     k++;
01835E  E80F1E     INC [W14], [W14]
23118:             
23119:             if (k>=sz)
018370  90021E     MOV [W14+2], W4
018372  78029E     MOV [W14], W5
018374  528F84     SUB W5, W4, [W15]
018376  350003     BRA LT, 0x1837E
23120:                 return (float)150;
018378  200004     MOV #0x0, W4
01837A  243165     MOV #0x4316, W5
01837C  37005B     BRA 0x18434
23121:             
23122:                     if (k==0)
01837E  78021E     MOV [W14], W4
018380  520FE0     SUB W4, #0x0, [W15]
018382  3A0003     BRA NZ, 0x1838A
23123:                 return (float)-55;
018384  200004     MOV #0x0, W4
018386  2C25C5     MOV #0xC25C, W5
018388  370055     BRA 0x18434
23124:             
23125:             T=Tenzo3[k]-Tenzo3[k-1];
01838A  78021E     MOV [W14], W4
01838C  420284     ADD W4, W4, W5
01838E  2B1204     MOV #0xB120, W4
018390  428204     ADD W5, W4, W4
018392  780294     MOV [W4], W5
018394  E9021E     DEC [W14], W4
018396  420304     ADD W4, W4, W6
018398  2B1204     MOV #0xB120, W4
01839A  430204     ADD W6, W4, W4
01839C  780214     MOV [W4], W4
01839E  528204     SUB W5, W4, W4
0183A0  200005     MOV #0x0, W5
0183A2  BE0004     MOV.D W4, W0
0183A4  022582     CALL ___floatunsisf
0183A6  000000     NOP
0183A8  BE0200     MOV.D W0, W4
0183AA  980724     MOV W4, [W14+4]
0183AC  980735     MOV W5, [W14+6]
23126:             T1=ResTemp-Tenzo3[k-1];
0183AE  E9021E     DEC [W14], W4
0183B0  420284     ADD W4, W4, W5
0183B2  2B1204     MOV #0xB120, W4
0183B4  428204     ADD W5, W4, W4
0183B6  780214     MOV [W4], W4
0183B8  900A8E     MOV [W14+16], W5
0183BA  528204     SUB W5, W4, W4
0183BC  200005     MOV #0x0, W5
0183BE  BE0004     MOV.D W4, W0
0183C0  022582     CALL ___floatunsisf
0183C2  000000     NOP
0183C4  BE0200     MOV.D W0, W4
0183C6  980744     MOV W4, [W14+8]
0183C8  980755     MOV W5, [W14+10]
23127:             
23128:             temp=TempTenzo3[k]-TempTenzo3[k-1];
0183CA  78021E     MOV [W14], W4
0183CC  420284     ADD W4, W4, W5
0183CE  2B18C4     MOV #0xB18C, W4
0183D0  428204     ADD W5, W4, W4
0183D2  780294     MOV [W4], W5
0183D4  E9021E     DEC [W14], W4
0183D6  420304     ADD W4, W4, W6
0183D8  2B18C4     MOV #0xB18C, W4
0183DA  430204     ADD W6, W4, W4
0183DC  780214     MOV [W4], W4
0183DE  528204     SUB W5, W4, W4
0183E0  DEA2CF     ASR W4, #15, W5
0183E2  BE0004     MOV.D W4, W0
0183E4  02257C     CALL ___floatsisf
0183E6  000000     NOP
0183E8  BE0200     MOV.D W0, W4
0183EA  980764     MOV W4, [W14+12]
0183EC  980775     MOV W5, [W14+14]
23129:             
23130:             
23131:             T1=(T1*temp)/T;
0183EE  90016E     MOV [W14+12], W2
0183F0  9001FE     MOV [W14+14], W3
0183F2  90004E     MOV [W14+8], W0
0183F4  9000DE     MOV [W14+10], W1
0183F6  022630     CALL ___mulsf3
0183F8  000000     NOP
0183FA  BE0200     MOV.D W0, W4
0183FC  90012E     MOV [W14+4], W2
0183FE  9001BE     MOV [W14+6], W3
018400  BE0004     MOV.D W4, W0
018402  02245A     CALL ___divsf3
018404  000000     NOP
018406  BE0200     MOV.D W0, W4
018408  980744     MOV W4, [W14+8]
01840A  980755     MOV W5, [W14+10]
23132:             
23133:             T=TempTenzo3[k-1]+T1;
01840C  E9021E     DEC [W14], W4
01840E  420284     ADD W4, W4, W5
018410  2B18C4     MOV #0xB18C, W4
018412  428204     ADD W5, W4, W4
018414  780214     MOV [W4], W4
018416  DEA2CF     ASR W4, #15, W5
018418  BE0004     MOV.D W4, W0
01841A  02257C     CALL ___floatsisf
01841C  000000     NOP
01841E  BE0200     MOV.D W0, W4
018420  90014E     MOV [W14+8], W2
018422  9001DE     MOV [W14+10], W3
018424  BE0004     MOV.D W4, W0
018426  0222D2     CALL ___addsf3
018428  000000     NOP
01842A  BE0200     MOV.D W0, W4
01842C  980724     MOV W4, [W14+4]
01842E  980735     MOV W5, [W14+6]
23134:             
23135:             
23136:             
23137:                 return T;
018430  90022E     MOV [W14+4], W4
018432  9002BE     MOV [W14+6], W5
23138:             }
018434  BE0004     MOV.D W4, W0
018436  FA8000     ULNK
018438  060000     RETURN
23139:             
23140:             
23141:             
23142:             float GetTemperaturePTC_KTY83_122(unsigned int ResTemp)
23143:             {
01843A  FA0012     LNK #0x12
01843C  980F00     MOV W0, [W14+16]
23144:             int k=0,sz=sizeof(Tenzo5);
01843E  EB0200     CLR W4
018440  780F04     MOV W4, [W14]
018442  200364     MOV #0x36, W4
018444  980714     MOV W4, [W14+2]
23145:             float T,T1,temp;
23146:             
23147:             sz=sz>>1;
018446  90021E     MOV [W14+2], W4
018448  D18204     ASR W4, W4
01844A  980714     MOV W4, [W14+2]
23148:             
23149:                 while (ResTemp>Tenzo5[k])
01844C  370001     BRA 0x18450
018450  78021E     MOV [W14], W4
018452  420284     ADD W4, W4, W5
018454  2B1564     MOV #0xB156, W4
018456  428204     ADD W5, W4, W4
018458  780294     MOV [W4], W5
01845A  900A0E     MOV [W14+16], W4
01845C  528F84     SUB W5, W4, [W15]
01845E  39FFF7     BRA NC, 0x1844E
23150:                     k++;
01844E  E80F1E     INC [W14], [W14]
23151:             
23152:             if (k>=sz)
018460  90021E     MOV [W14+2], W4
018462  78029E     MOV [W14], W5
018464  528F84     SUB W5, W4, [W15]
018466  350003     BRA LT, 0x1846E
23153:                 return (float)150;
018468  200004     MOV #0x0, W4
01846A  243165     MOV #0x4316, W5
01846C  37005B     BRA 0x18524
23154:             
23155:                     if (k==0)
01846E  78021E     MOV [W14], W4
018470  520FE0     SUB W4, #0x0, [W15]
018472  3A0003     BRA NZ, 0x1847A
23156:                 return (float)-55;
018474  200004     MOV #0x0, W4
018476  2C25C5     MOV #0xC25C, W5
018478  370055     BRA 0x18524
23157:             
23158:             T=Tenzo5[k]-Tenzo5[k-1];
01847A  78021E     MOV [W14], W4
01847C  420284     ADD W4, W4, W5
01847E  2B1564     MOV #0xB156, W4
018480  428204     ADD W5, W4, W4
018482  780294     MOV [W4], W5
018484  E9021E     DEC [W14], W4
018486  420304     ADD W4, W4, W6
018488  2B1564     MOV #0xB156, W4
01848A  430204     ADD W6, W4, W4
01848C  780214     MOV [W4], W4
01848E  528204     SUB W5, W4, W4
018490  200005     MOV #0x0, W5
018492  BE0004     MOV.D W4, W0
018494  022582     CALL ___floatunsisf
018496  000000     NOP
018498  BE0200     MOV.D W0, W4
01849A  980724     MOV W4, [W14+4]
01849C  980735     MOV W5, [W14+6]
23159:             T1=ResTemp-Tenzo5[k-1];
01849E  E9021E     DEC [W14], W4
0184A0  420284     ADD W4, W4, W5
0184A2  2B1564     MOV #0xB156, W4
0184A4  428204     ADD W5, W4, W4
0184A6  780214     MOV [W4], W4
0184A8  900A8E     MOV [W14+16], W5
0184AA  528204     SUB W5, W4, W4
0184AC  200005     MOV #0x0, W5
0184AE  BE0004     MOV.D W4, W0
0184B0  022582     CALL ___floatunsisf
0184B2  000000     NOP
0184B4  BE0200     MOV.D W0, W4
0184B6  980744     MOV W4, [W14+8]
0184B8  980755     MOV W5, [W14+10]
23160:             
23161:             temp=TempTenzo3[k]-TempTenzo3[k-1];// TempTenzo3 and TempTenzo5 are the same
0184BA  78021E     MOV [W14], W4
0184BC  420284     ADD W4, W4, W5
0184BE  2B18C4     MOV #0xB18C, W4
0184C0  428204     ADD W5, W4, W4
0184C2  780294     MOV [W4], W5
0184C4  E9021E     DEC [W14], W4
0184C6  420304     ADD W4, W4, W6
0184C8  2B18C4     MOV #0xB18C, W4
0184CA  430204     ADD W6, W4, W4
0184CC  780214     MOV [W4], W4
0184CE  528204     SUB W5, W4, W4
0184D0  DEA2CF     ASR W4, #15, W5
0184D2  BE0004     MOV.D W4, W0
0184D4  02257C     CALL ___floatsisf
0184D6  000000     NOP
0184D8  BE0200     MOV.D W0, W4
0184DA  980764     MOV W4, [W14+12]
0184DC  980775     MOV W5, [W14+14]
23162:             
23163:             
23164:             T1=(T1*temp)/T;
0184DE  90016E     MOV [W14+12], W2
0184E0  9001FE     MOV [W14+14], W3
0184E2  90004E     MOV [W14+8], W0
0184E4  9000DE     MOV [W14+10], W1
0184E6  022630     CALL ___mulsf3
0184E8  000000     NOP
0184EA  BE0200     MOV.D W0, W4
0184EC  90012E     MOV [W14+4], W2
0184EE  9001BE     MOV [W14+6], W3
0184F0  BE0004     MOV.D W4, W0
0184F2  02245A     CALL ___divsf3
0184F4  000000     NOP
0184F6  BE0200     MOV.D W0, W4
0184F8  980744     MOV W4, [W14+8]
0184FA  980755     MOV W5, [W14+10]
23165:             
23166:             T=TempTenzo3[k-1]+T1;
0184FC  E9021E     DEC [W14], W4
0184FE  420284     ADD W4, W4, W5
018500  2B18C4     MOV #0xB18C, W4
018502  428204     ADD W5, W4, W4
018504  780214     MOV [W4], W4
018506  DEA2CF     ASR W4, #15, W5
018508  BE0004     MOV.D W4, W0
01850A  02257C     CALL ___floatsisf
01850C  000000     NOP
01850E  BE0200     MOV.D W0, W4
018510  90014E     MOV [W14+8], W2
018512  9001DE     MOV [W14+10], W3
018514  BE0004     MOV.D W4, W0
018516  0222D2     CALL ___addsf3
018518  000000     NOP
01851A  BE0200     MOV.D W0, W4
01851C  980724     MOV W4, [W14+4]
01851E  980735     MOV W5, [W14+6]
23167:             
23168:             
23169:             
23170:                 return T;
018520  90022E     MOV [W14+4], W4
018522  9002BE     MOV [W14+6], W5
23171:             }
018524  BE0004     MOV.D W4, W0
018526  FA8000     ULNK
018528  060000     RETURN
23172:             
23173:             
23174:             float GetTemperaturePTC_KTY81_210_FETs(unsigned int ResTemp)
23175:             {
01852A  FA0012     LNK #0x12
01852C  980F00     MOV W0, [W14+16]
23176:             int k=0,sz=sizeof(Tenzo6);
01852E  EB0200     CLR W4
018530  780F04     MOV W4, [W14]
018532  200304     MOV #0x30, W4
018534  980714     MOV W4, [W14+2]
23177:             float T,T1,temp;
23178:             
23179:             sz=sz>>1;
018536  90021E     MOV [W14+2], W4
018538  D18204     ASR W4, W4
01853A  980714     MOV W4, [W14+2]
23180:             
23181:                 while (ResTemp>Tenzo6[k])
01853C  370001     BRA 0x18540
018540  78021E     MOV [W14], W4
018542  420284     ADD W4, W4, W5
018544  2B2524     MOV #0xB252, W4
018546  428204     ADD W5, W4, W4
018548  780294     MOV [W4], W5
01854A  900A0E     MOV [W14+16], W4
01854C  528F84     SUB W5, W4, [W15]
01854E  39FFF7     BRA NC, 0x1853E
23182:                     k++;
01853E  E80F1E     INC [W14], [W14]
23183:             
23184:             if (k>=sz)
018550  90021E     MOV [W14+2], W4
018552  78029E     MOV [W14], W5
018554  528F84     SUB W5, W4, [W15]
018556  350003     BRA LT, 0x1855E
23185:                 return (float)150;
018558  200004     MOV #0x0, W4
01855A  243165     MOV #0x4316, W5
01855C  37005B     BRA 0x18614
23186:             
23187:                     if (k==0)
01855E  78021E     MOV [W14], W4
018560  520FE0     SUB W4, #0x0, [W15]
018562  3A0003     BRA NZ, 0x1856A
23188:                 return (float)-55;
018564  200004     MOV #0x0, W4
018566  2C25C5     MOV #0xC25C, W5
018568  370055     BRA 0x18614
23189:             
23190:             T=Tenzo6[k]-Tenzo6[k-1];
01856A  78021E     MOV [W14], W4
01856C  420284     ADD W4, W4, W5
01856E  2B2524     MOV #0xB252, W4
018570  428204     ADD W5, W4, W4
018572  780294     MOV [W4], W5
018574  E9021E     DEC [W14], W4
018576  420304     ADD W4, W4, W6
018578  2B2524     MOV #0xB252, W4
01857A  430204     ADD W6, W4, W4
01857C  780214     MOV [W4], W4
01857E  528204     SUB W5, W4, W4
018580  200005     MOV #0x0, W5
018582  BE0004     MOV.D W4, W0
018584  022582     CALL ___floatunsisf
018586  000000     NOP
018588  BE0200     MOV.D W0, W4
01858A  980724     MOV W4, [W14+4]
01858C  980735     MOV W5, [W14+6]
23191:             T1=ResTemp-Tenzo6[k-1];
01858E  E9021E     DEC [W14], W4
018590  420284     ADD W4, W4, W5
018592  2B2524     MOV #0xB252, W4
018594  428204     ADD W5, W4, W4
018596  780214     MOV [W4], W4
018598  900A8E     MOV [W14+16], W5
01859A  528204     SUB W5, W4, W4
01859C  200005     MOV #0x0, W5
01859E  BE0004     MOV.D W4, W0
0185A0  022582     CALL ___floatunsisf
0185A2  000000     NOP
0185A4  BE0200     MOV.D W0, W4
0185A6  980744     MOV W4, [W14+8]
0185A8  980755     MOV W5, [W14+10]
23192:             
23193:             temp=TempTenzo6[k]-TempTenzo6[k-1];
0185AA  78021E     MOV [W14], W4
0185AC  420284     ADD W4, W4, W5
0185AE  2B2824     MOV #0xB282, W4
0185B0  428204     ADD W5, W4, W4
0185B2  780294     MOV [W4], W5
0185B4  E9021E     DEC [W14], W4
0185B6  420304     ADD W4, W4, W6
0185B8  2B2824     MOV #0xB282, W4
0185BA  430204     ADD W6, W4, W4
0185BC  780214     MOV [W4], W4
0185BE  528204     SUB W5, W4, W4
0185C0  DEA2CF     ASR W4, #15, W5
0185C2  BE0004     MOV.D W4, W0
0185C4  02257C     CALL ___floatsisf
0185C6  000000     NOP
0185C8  BE0200     MOV.D W0, W4
0185CA  980764     MOV W4, [W14+12]
0185CC  980775     MOV W5, [W14+14]
23194:             
23195:             
23196:             T1=(T1*temp)/T;
0185CE  90016E     MOV [W14+12], W2
0185D0  9001FE     MOV [W14+14], W3
0185D2  90004E     MOV [W14+8], W0
0185D4  9000DE     MOV [W14+10], W1
0185D6  022630     CALL ___mulsf3
0185D8  000000     NOP
0185DA  BE0200     MOV.D W0, W4
0185DC  90012E     MOV [W14+4], W2
0185DE  9001BE     MOV [W14+6], W3
0185E0  BE0004     MOV.D W4, W0
0185E2  02245A     CALL ___divsf3
0185E4  000000     NOP
0185E6  BE0200     MOV.D W0, W4
0185E8  980744     MOV W4, [W14+8]
0185EA  980755     MOV W5, [W14+10]
23197:             
23198:             T=TempTenzo6[k-1]+T1;
0185EC  E9021E     DEC [W14], W4
0185EE  420284     ADD W4, W4, W5
0185F0  2B2824     MOV #0xB282, W4
0185F2  428204     ADD W5, W4, W4
0185F4  780214     MOV [W4], W4
0185F6  DEA2CF     ASR W4, #15, W5
0185F8  BE0004     MOV.D W4, W0
0185FA  02257C     CALL ___floatsisf
0185FC  000000     NOP
0185FE  BE0200     MOV.D W0, W4
018600  90014E     MOV [W14+8], W2
018602  9001DE     MOV [W14+10], W3
018604  BE0004     MOV.D W4, W0
018606  0222D2     CALL ___addsf3
018608  000000     NOP
01860A  BE0200     MOV.D W0, W4
01860C  980724     MOV W4, [W14+4]
01860E  980735     MOV W5, [W14+6]
23199:             
23200:             
23201:             
23202:                 return T;
018610  90022E     MOV [W14+4], W4
018612  9002BE     MOV [W14+6], W5
23203:             }
018614  BE0004     MOV.D W4, W0
018616  FA8000     ULNK
018618  060000     RETURN
23204:             
23205:             
23206:             
23207:             float GetTemperaturePTC_KTY84_130(unsigned int ResTemp)
23208:             {
01861A  FA0012     LNK #0x12
01861C  980F00     MOV W0, [W14+16]
23209:             int k=0,sz=sizeof(Tenzo4);
01861E  EB0200     CLR W4
018620  780F04     MOV W4, [W14]
018622  200484     MOV #0x48, W4
018624  980714     MOV W4, [W14+2]
23210:             float T,T1,temp;
23211:             
23212:             sz=sz>>1;
018626  90021E     MOV [W14+2], W4
018628  D18204     ASR W4, W4
01862A  980714     MOV W4, [W14+2]
23213:             
23214:                 while (ResTemp>Tenzo4[k])
01862C  370001     BRA 0x18630
018630  78021E     MOV [W14], W4
018632  420284     ADD W4, W4, W5
018634  2B1C24     MOV #0xB1C2, W4
018636  428204     ADD W5, W4, W4
018638  780294     MOV [W4], W5
01863A  900A0E     MOV [W14+16], W4
01863C  528F84     SUB W5, W4, [W15]
01863E  39FFF7     BRA NC, 0x1862E
23215:                     k++;
01862E  E80F1E     INC [W14], [W14]
23216:             
23217:             if (k>=sz)
018640  90021E     MOV [W14+2], W4
018642  78029E     MOV [W14], W5
018644  528F84     SUB W5, W4, [W15]
018646  350003     BRA LT, 0x1864E
23218:                 return (float)150;
018648  200004     MOV #0x0, W4
01864A  243165     MOV #0x4316, W5
01864C  37005B     BRA 0x18704
23219:             
23220:                     if (k==0)
01864E  78021E     MOV [W14], W4
018650  520FE0     SUB W4, #0x0, [W15]
018652  3A0003     BRA NZ, 0x1865A
23221:                 return (float)-55;
018654  200004     MOV #0x0, W4
018656  2C25C5     MOV #0xC25C, W5
018658  370055     BRA 0x18704
23222:             
23223:             T=Tenzo4[k]-Tenzo4[k-1];
01865A  78021E     MOV [W14], W4
01865C  420284     ADD W4, W4, W5
01865E  2B1C24     MOV #0xB1C2, W4
018660  428204     ADD W5, W4, W4
018662  780294     MOV [W4], W5
018664  E9021E     DEC [W14], W4
018666  420304     ADD W4, W4, W6
018668  2B1C24     MOV #0xB1C2, W4
01866A  430204     ADD W6, W4, W4
01866C  780214     MOV [W4], W4
01866E  528204     SUB W5, W4, W4
018670  200005     MOV #0x0, W5
018672  BE0004     MOV.D W4, W0
018674  022582     CALL ___floatunsisf
018676  000000     NOP
018678  BE0200     MOV.D W0, W4
01867A  980724     MOV W4, [W14+4]
01867C  980735     MOV W5, [W14+6]
23224:             T1=ResTemp-Tenzo4[k-1];
01867E  E9021E     DEC [W14], W4
018680  420284     ADD W4, W4, W5
018682  2B1C24     MOV #0xB1C2, W4
018684  428204     ADD W5, W4, W4
018686  780214     MOV [W4], W4
018688  900A8E     MOV [W14+16], W5
01868A  528204     SUB W5, W4, W4
01868C  200005     MOV #0x0, W5
01868E  BE0004     MOV.D W4, W0
018690  022582     CALL ___floatunsisf
018692  000000     NOP
018694  BE0200     MOV.D W0, W4
018696  980744     MOV W4, [W14+8]
018698  980755     MOV W5, [W14+10]
23225:             
23226:             temp=TempTenzo4[k]-TempTenzo4[k-1];
01869A  78021E     MOV [W14], W4
01869C  420284     ADD W4, W4, W5
01869E  2B20A4     MOV #0xB20A, W4
0186A0  428204     ADD W5, W4, W4
0186A2  780294     MOV [W4], W5
0186A4  E9021E     DEC [W14], W4
0186A6  420304     ADD W4, W4, W6
0186A8  2B20A4     MOV #0xB20A, W4
0186AA  430204     ADD W6, W4, W4
0186AC  780214     MOV [W4], W4
0186AE  528204     SUB W5, W4, W4
0186B0  DEA2CF     ASR W4, #15, W5
0186B2  BE0004     MOV.D W4, W0
0186B4  02257C     CALL ___floatsisf
0186B6  000000     NOP
0186B8  BE0200     MOV.D W0, W4
0186BA  980764     MOV W4, [W14+12]
0186BC  980775     MOV W5, [W14+14]
23227:             
23228:             
23229:             T1=(T1*temp)/T;
0186BE  90016E     MOV [W14+12], W2
0186C0  9001FE     MOV [W14+14], W3
0186C2  90004E     MOV [W14+8], W0
0186C4  9000DE     MOV [W14+10], W1
0186C6  022630     CALL ___mulsf3
0186C8  000000     NOP
0186CA  BE0200     MOV.D W0, W4
0186CC  90012E     MOV [W14+4], W2
0186CE  9001BE     MOV [W14+6], W3
0186D0  BE0004     MOV.D W4, W0
0186D2  02245A     CALL ___divsf3
0186D4  000000     NOP
0186D6  BE0200     MOV.D W0, W4
0186D8  980744     MOV W4, [W14+8]
0186DA  980755     MOV W5, [W14+10]
23230:             
23231:             T=TempTenzo4[k-1]+T1;
0186DC  E9021E     DEC [W14], W4
0186DE  420284     ADD W4, W4, W5
0186E0  2B20A4     MOV #0xB20A, W4
0186E2  428204     ADD W5, W4, W4
0186E4  780214     MOV [W4], W4
0186E6  DEA2CF     ASR W4, #15, W5
0186E8  BE0004     MOV.D W4, W0
0186EA  02257C     CALL ___floatsisf
0186EC  000000     NOP
0186EE  BE0200     MOV.D W0, W4
0186F0  90014E     MOV [W14+8], W2
0186F2  9001DE     MOV [W14+10], W3
0186F4  BE0004     MOV.D W4, W0
0186F6  0222D2     CALL ___addsf3
0186F8  000000     NOP
0186FA  BE0200     MOV.D W0, W4
0186FC  980724     MOV W4, [W14+4]
0186FE  980735     MOV W5, [W14+6]
23232:             
23233:             
23234:             
23235:                 return T;
018700  90022E     MOV [W14+4], W4
018702  9002BE     MOV [W14+6], W5
23236:             }
018704  BE0004     MOV.D W4, W0
018706  FA8000     ULNK
018708  060000     RETURN
23237:             
23238:             
23239:             
23240:             
23241:             
23242:             void SensorlessMotorStartInit(void)
23243:             {
01870A  FA0000     LNK #0x0
23244:                 StateSensorlessMotorStart=1;
01870C  231CD5     MOV #0x31CD, W5
01870E  B3C014     MOV.B #0x1, W4
018710  784A84     MOV.B W4, [W5]
23245:                 if (ManualStart)
018712  809745     MOV StatFlgs, W5
018714  202004     MOV #0x200, W4
018716  628204     AND W5, W4, W4
018718  520FE0     SUB W4, #0x0, [W15]
01871A  320003     BRA Z, 0x18722
23246:                 StateSensorlessMotorStart=7;
01871C  231CD5     MOV #0x31CD, W5
01871E  B3C074     MOV.B #0x7, W4
018720  784A84     MOV.B W4, [W5]
23247:                 
23248:               //  CurrLimit=SensorLessCurrLimit;
23249:               //  ChangeCVR();
23250:                 
23251:               //  CurrUst=SensorlessCurrUst;
23252:                 Alignment=1;    
018722  8096A4     MOV Flgs6, W4
018724  A0A004     BSET W4, #10
018726  8896A4     MOV W4, Flgs6
23253:                 SensorlessNotBEMF=1;
018728  809654     MOV 0x12CA, W4
01872A  A04004     BSET W4, #4
01872C  889654     MOV W4, 0x12CA
23254:                 SensorlessStartNoHalls=1;
01872E  8096B4     MOV 0x12D6, W4
018730  A0E004     BSET W4, #14
018732  8896B4     MOV W4, 0x12D6
23255:             
23256:                 SenosrlessPWM1=0;    
018734  EB0200     CLR W4
018736  8892E4     MOV W4, SenosrlessPWM1
23257:                 SensorLessTimerConst=SensorLessTimerConstConst;
018738  820134     MOV SensorLessTimerConstConst, W4
01873A  8A18A4     MOV W4, SensorLessTimerConst
23258:                 if (!(StartingMoveCnt&&CriticalError))
01873C  8183E4     MOV StartingMoveCnt, W4
01873E  520FE0     SUB W4, #0x0, [W15]
018740  320004     BRA Z, 0x1874A
018742  214074     MOV #0x1407, W4
018744  784214     MOV.B [W4], W4
018746  524FE0     SUB.B W4, #0x0, [W15]
018748  3A0009     BRA NZ, 0x1875C
23259:                         {
23260:                           if (DS)
01874A  8096B5     MOV 0x12D6, W5
01874C  208004     MOV #0x800, W4
01874E  628204     AND W5, W4, W4
018750  520FE0     SUB W4, #0x0, [W15]
018752  320004     BRA Z, 0x1875C
23261:                           {
23262:                             DS=0;
018754  8096B4     MOV 0x12D6, W4
018756  A1B004     BCLR W4, #11
018758  8896B4     MOV W4, 0x12D6
23263:                             RdSensors();
01875A  07F4AD     RCALL RdSensors
23264:                           }
23265:                     }
23266:             
23267:                 CntBEMF=0;    
01875C  210FD5     MOV #0x10FD, W5
01875E  EB4200     CLR.B W4
018760  784A84     MOV.B W4, [W5]
23268:                 CanZeroCrossing=1;
018762  809644     MOV Flgs3, W4
018764  A0F004     BSET W4, #15
018766  889644     MOV W4, Flgs3
23269:             }
018768  FA8000     ULNK
01876A  060000     RETURN
23270:             
23271:             
23272:             
23273:             void SensorlessMotorStart(void)
23274:             {
01876C  FA0000     LNK #0x0
23275:                 if (!Sensorless)
01876E  809755     MOV StatFlgs1, W5
018770  200204     MOV #0x20, W4
018772  628204     AND W5, W4, W4
018774  520FE0     SUB W4, #0x0, [W15]
018776  3200CE     BRA Z, 0x18914
23276:                     return;
018914  000000     NOP
018916  37000B     BRA 0x1892E
23277:                 
23278:                 StrongMode=0;
018778  8095F4     MOV 0x12BE, W4
01877A  A1E004     BCLR W4, #14
01877C  8895F4     MOV W4, 0x12BE
23279:                 
23280:                   //      if (ManualStart)
23281:                     //    CurrUst=SensorlessCurrUst;
23282:                 
23283:                 
23284:                 switch (StateSensorlessMotorStart)
01877E  231CD4     MOV #0x31CD, W4
018780  784214     MOV.B [W4], W4
018782  FB8204     ZE W4, W4
018784  B92361     MUL.SU W4, #1, W6
018786  EB8200     SETM W4
018788  EB8280     SETM W5
01878A  420206     ADD W4, W6, W4
01878C  4A8287     ADDC W5, W7, W5
01878E  200076     MOV #0x7, W6
018790  200007     MOV #0x0, W7
018792  520F86     SUB W4, W6, [W15]
018794  5A8F87     SUBB W5, W7, [W15]
018796  3E00CB     BRA GTU, 0x1892E
018798  010604     BRA W4
01879A  370007     BRA 0x187AA
01879C  370014     BRA 0x187C6
01879E  370025     BRA 0x187EA
0187A0  37003E     BRA 0x1881E
0187A2  370041     BRA 0x18826
0187A4  370068     BRA 0x18876
0187A6  370073     BRA 0x1888E
0187A8  3700AA     BRA 0x188FE
23285:                 {
23286:                     case 1:
23287:                         if (SenosrlessPWM1<SenosrlessPWM1_1Const)
0187AA  8092E5     MOV SenosrlessPWM1, W5
0187AC  8092F4     MOV SenosrlessPWM1_1Const, W4
0187AE  528F84     SUB W5, W4, [W15]
0187B0  3D0004     BRA GE, 0x187BA
23288:                         SenosrlessPWM1=SenosrlessPWM1+10;
0187B2  8092E4     MOV SenosrlessPWM1, W4
0187B4  42026A     ADD W4, #0xA, W4
0187B6  8892E4     MOV W4, SenosrlessPWM1
23289:                         else
23290:                         {
23291:                             StateSensorlessMotorStart=2;
0187BA  231CD5     MOV #0x31CD, W5
0187BC  B3C024     MOV.B #0x2, W4
0187BE  784A84     MOV.B W4, [W5]
23292:                             SensorlessCntAlign=SensorlessCntAlignConst;
0187C0  817E94     MOV SensorlessCntAlignConst, W4
0187C2  897E84     MOV W4, SensorlessCntAlign
23293:                         }
23294:                         break;
0187B8  3700BA     BRA 0x1892E
0187C4  3700B4     BRA 0x1892E
23295:                     case 2:
23296:                         if (SensorlessCntAlign)
0187C6  817E84     MOV SensorlessCntAlign, W4
0187C8  520FE0     SUB W4, #0x0, [W15]
0187CA  3200A6     BRA Z, 0x18918
23297:                         {
23298:                         SensorlessCntAlign--;
0187CC  817E84     MOV SensorlessCntAlign, W4
0187CE  E90204     DEC W4, W4
0187D0  897E84     MOV W4, SensorlessCntAlign
23299:                         if (SensorlessCntAlign==0)
0187D2  817E84     MOV SensorlessCntAlign, W4
0187D4  520FE0     SUB W4, #0x0, [W15]
0187D6  3A00A2     BRA NZ, 0x1891C
23300:                         {
23301:                             StateSensorlessMotorStart=3;
0187D8  231CD5     MOV #0x31CD, W5
0187DA  B3C034     MOV.B #0x3, W4
0187DC  784A84     MOV.B W4, [W5]
23302:                             SensorlessSpdChngCnt=SensorlessSpdChngCntConst;
0187DE  808764     MOV SensorlessSpdChngCntConst, W4
0187E0  888754     MOV W4, SensorlessSpdChngCnt
23303:                             Alignment=0;
0187E2  8096A4     MOV Flgs6, W4
0187E4  A1A004     BCLR W4, #10
0187E6  8896A4     MOV W4, Flgs6
23304:                         }
23305:                         }
23306:                         break;
0187E8  3700A2     BRA 0x1892E
018918  000000     NOP
01891A  370009     BRA 0x1892E
01891C  000000     NOP
01891E  370007     BRA 0x1892E
23307:                     case 3:
23308:                         if (SensorlessSpdChngCnt)
0187EA  808754     MOV SensorlessSpdChngCnt, W4
0187EC  520FE0     SUB W4, #0x0, [W15]
0187EE  320014     BRA Z, 0x18818
23309:                         {
23310:                             SensorlessSpdChngCnt--;
0187F0  808754     MOV SensorlessSpdChngCnt, W4
0187F2  E90204     DEC W4, W4
0187F4  888754     MOV W4, SensorlessSpdChngCnt
23311:                             if (!SensorlessSpdChngCnt)
0187F6  808754     MOV SensorlessSpdChngCnt, W4
0187F8  520FE0     SUB W4, #0x0, [W15]
0187FA  3A0092     BRA NZ, 0x18920
23312:                             {
23313:                                 SensorlessSpdChngCnt=SensorlessSpdChngCntConst;
0187FC  808764     MOV SensorlessSpdChngCntConst, W4
0187FE  888754     MOV W4, SensorlessSpdChngCnt
23314:                                 if (SensorLessTimerConst>SensorLessTimerConst2)
018800  8218A5     MOV SensorLessTimerConst, W5
018802  820144     MOV SensorLessTimerConst2, W4
018804  528F84     SUB W5, W4, [W15]
018806  360004     BRA LEU, 0x18810
23315:                                 SensorLessTimerConst--;
018808  8218A4     MOV SensorLessTimerConst, W4
01880A  E90204     DEC W4, W4
01880C  8A18A4     MOV W4, SensorLessTimerConst
23316:                                 else
23317:                                 {
23318:                             StateSensorlessMotorStart=4;                        
018810  231CD5     MOV #0x31CD, W5
018812  B3C044     MOV.B #0x4, W4
018814  784A84     MOV.B W4, [W5]
23319:                                 }
23320:                             }
23321:                         }
23322:                         else
23323:                         SensorlessSpdChngCnt=SensorlessSpdChngCntConst;
018818  808764     MOV SensorlessSpdChngCntConst, W4
01881A  888754     MOV W4, SensorlessSpdChngCnt
23324:                         
23325:                         break;
01880E  37008F     BRA 0x1892E
018816  37008B     BRA 0x1892E
01881C  370088     BRA 0x1892E
018920  000000     NOP
018922  370005     BRA 0x1892E
23326:                     case 4:
23327:                         /*if (SenosrlessPWM1<SenosrlessPWM1_2Const)
23328:                         SenosrlessPWM1=SenosrlessPWM1+1;
23329:                         else
23330:                         {
23331:                             StateSensorlessMotorStart=5;
23332:                             SensorlessSpdChngCnt=SensorlessSpdChngCntConst;
23333:                         }*/
23334:                            StateSensorlessMotorStart=5;
01881E  231CD5     MOV #0x31CD, W5
018820  B3C054     MOV.B #0x5, W4
018822  784A84     MOV.B W4, [W5]
23335:                         break;
018824  370084     BRA 0x1892E
23336:                     case 5:
23337:                          if (SenosrlessPWM1<SenosrlessPWM1_2Const)
018826  8092E5     MOV SenosrlessPWM1, W5
018828  809304     MOV SenosrlessPWM1_2Const, W4
01882A  528F84     SUB W5, W4, [W15]
01882C  3D0003     BRA GE, 0x18834
23338:                         SenosrlessPWM1=SenosrlessPWM1+1;
01882E  8092E4     MOV SenosrlessPWM1, W4
018830  E80204     INC W4, W4
018832  8892E4     MOV W4, SenosrlessPWM1
23339:                         if (SensorlessSpdChngCnt)
018834  808754     MOV SensorlessSpdChngCnt, W4
018836  520FE0     SUB W4, #0x0, [W15]
018838  320019     BRA Z, 0x1886C
23340:                         {
23341:                             SensorlessSpdChngCnt--;
01883A  808754     MOV SensorlessSpdChngCnt, W4
01883C  E90204     DEC W4, W4
01883E  888754     MOV W4, SensorlessSpdChngCnt
23342:                             if (!SensorlessSpdChngCnt)
018840  808754     MOV SensorlessSpdChngCnt, W4
018842  520FE0     SUB W4, #0x0, [W15]
018844  3A0015     BRA NZ, 0x18870
23343:                             {
23344:                                 SensorlessSpdChngCnt=SensorlessSpdChngCntConst;
018846  808764     MOV SensorlessSpdChngCntConst, W4
018848  888754     MOV W4, SensorlessSpdChngCnt
23345:                                 if (SensorLessTimerConst>SensorLessTimerConstMin)
01884A  817EC4     MOV SensorLessTimerConstMin, W4
01884C  780284     MOV W4, W5
01884E  8218A4     MOV SensorLessTimerConst, W4
018850  528F84     SUB W5, W4, [W15]
018852  310004     BRA C, 0x1885C
23346:                                 SensorLessTimerConst--;
018854  8218A4     MOV SensorLessTimerConst, W4
018856  E90204     DEC W4, W4
018858  8A18A4     MOV W4, SensorLessTimerConst
01885A  37000A     BRA 0x18870
23347:                                 else
23348:                                 {
23349:                                     SenosrlessPWM1=0;
01885C  EB0200     CLR W4
01885E  8892E4     MOV W4, SenosrlessPWM1
23350:                             StateSensorlessMotorStart=6;
018860  231CD5     MOV #0x31CD, W5
018862  B3C064     MOV.B #0x6, W4
018864  784A84     MOV.B W4, [W5]
23351:                             SensorlessSpdChngCnt=250;
018866  200FA4     MOV #0xFA, W4
018868  888754     MOV W4, SensorlessSpdChngCnt
01886A  370002     BRA 0x18870
23352:                                 }
23353:                             }
23354:                         }
23355:                         else
23356:                                 SensorlessSpdChngCnt=SensorlessSpdChngCntConst;
01886C  808764     MOV SensorlessSpdChngCntConst, W4
01886E  888754     MOV W4, SensorlessSpdChngCnt
23357:                         PWM1=SenosrlessPWM1_2Const;
018870  809304     MOV SenosrlessPWM1_2Const, W4
018872  889284     MOV W4, PWM1
23358:                         break;
018874  37005C     BRA 0x1892E
23359:                     case 6:
23360:             
23361:                         if (PWM1Prev<PWM1)
018876  8092B5     MOV PWM1Prev, W5
018878  809284     MOV PWM1, W4
01887A  528F84     SUB W5, W4, [W15]
01887C  3D0004     BRA GE, 0x18886
23362:                             PWM1=PWM1Prev+10;
01887E  8092B4     MOV PWM1Prev, W4
018880  42026A     ADD W4, #0xA, W4
018882  889284     MOV W4, PWM1
23363:                         else
23364:                             StateSensorlessMotorStart=7;
018886  231CD5     MOV #0x31CD, W5
018888  B3C074     MOV.B #0x7, W4
01888A  784A84     MOV.B W4, [W5]
23365:                         break;
018884  370054     BRA 0x1892E
01888C  370050     BRA 0x1892E
23366:                     case 7:
23367:                         if (Spd1Res<(SensorllessSpdThreshold+1))
01888E  2140B4     MOV #0x140B, W4
018890  784214     MOV.B [W4], W4
018892  FB8204     ZE W4, W4
018894  E80284     INC W4, W5
018896  817F14     MOV Spd1Res, W4
018898  528F84     SUB W5, W4, [W15]
01889A  34001B     BRA LE, 0x188D2
23368:                         {
23369:                              SensorlessSpdChngCnt=250;
01889C  200FA4     MOV #0xFA, W4
01889E  888754     MOV W4, SensorlessSpdChngCnt
23370:                              if (Spd1Res<1)
0188A0  817F14     MOV Spd1Res, W4
0188A2  520FE0     SUB W4, #0x0, [W15]
0188A4  3C000D     BRA GT, 0x188C0
23371:                              {
23372:                                  if (!ManualStart)
0188A6  809745     MOV StatFlgs, W5
0188A8  202004     MOV #0x200, W4
0188AA  628204     AND W5, W4, W4
0188AC  520FE0     SUB W4, #0x0, [W15]
0188AE  3A0008     BRA NZ, 0x188C0
23373:                                  {
23374:                                  SensorlessNotBEMF=1;
0188B0  809654     MOV 0x12CA, W4
0188B2  A04004     BSET W4, #4
0188B4  889654     MOV W4, 0x12CA
23375:                                  SenosrlessPWM1=0;
0188B6  EB0200     CLR W4
0188B8  8892E4     MOV W4, SenosrlessPWM1
23376:                                  StateSensorlessMotorStart=0;
0188BA  231CD5     MOV #0x31CD, W5
0188BC  EB4200     CLR.B W4
0188BE  784A84     MOV.B W4, [W5]
23377:                                  }
23378:                              }
23379:                              if (ManualStart)
0188C0  809745     MOV StatFlgs, W5
0188C2  202004     MOV #0x200, W4
0188C4  628204     AND W5, W4, W4
0188C6  520FE0     SUB W4, #0x0, [W15]
0188C8  32002D     BRA Z, 0x18924
23380:                              DS=1;
0188CA  8096B4     MOV 0x12D6, W4
0188CC  A0B004     BSET W4, #11
0188CE  8896B4     MOV W4, 0x12D6
23381:                         }
23382:                         else
23383:                         {
23384:                             SensorlessSpdChngCnt--;
0188D2  808754     MOV SensorlessSpdChngCnt, W4
0188D4  E90204     DEC W4, W4
0188D6  888754     MOV W4, SensorlessSpdChngCnt
23385:                             if (!SensorlessSpdChngCnt)
0188D8  808754     MOV SensorlessSpdChngCnt, W4
0188DA  520FE0     SUB W4, #0x0, [W15]
0188DC  3A0025     BRA NZ, 0x18928
23386:                             {
23387:             
23388:                           if (DS)
0188DE  8096B5     MOV 0x12D6, W5
0188E0  208004     MOV #0x800, W4
0188E2  628204     AND W5, W4, W4
0188E4  520FE0     SUB W4, #0x0, [W15]
0188E6  320004     BRA Z, 0x188F0
23389:                           {
23390:                             DS=0;
0188E8  8096B4     MOV 0x12D6, W4
0188EA  A1B004     BCLR W4, #11
0188EC  8896B4     MOV W4, 0x12D6
23391:                             RdSensors();
0188EE  07F3E3     RCALL RdSensors
23392:                           }
23393:             
23394:                                 StateSensorlessMotorStart=8;
0188F0  231CD5     MOV #0x31CD, W5
0188F2  B3C084     MOV.B #0x8, W4
0188F4  784A84     MOV.B W4, [W5]
23395:                                 SoundNum=11;
0188F6  2124B5     MOV #0x124B, W5
0188F8  B3C0B4     MOV.B #0xB, W4
0188FA  784A84     MOV.B W4, [W5]
23396:                 //                CurrLimit=CurrLimitWork;
23397:                   //              CurrUst=CurrUstWork;
23398:                     //            ChangeCVR();
23399:                             }
23400:                         }
23401:                             
23402:             
23403:                         
23404:                         break;
0188D0  37002E     BRA 0x1892E
0188FC  370018     BRA 0x1892E
018924  000000     NOP
018926  370003     BRA 0x1892E
018928  000000     NOP
01892A  370001     BRA 0x1892E
23405:                     case 8:
23406:                         
23407:                         if (Spd1Res<(SensorllessSpdThreshold-2))    
0188FE  2140B4     MOV #0x140B, W4
018900  784214     MOV.B [W4], W4
018902  FB8204     ZE W4, W4
018904  E98284     DEC2 W4, W5
018906  817F14     MOV Spd1Res, W4
018908  528F84     SUB W5, W4, [W15]
01890A  340010     BRA LE, 0x1892C
23408:                         {
23409:                       //          CurrLimit=SensorLessCurrLimit;
23410:                         //        ChangeCVR();
23411:                           //      CurrUst=SensorlessCurrUst;
23412:                                 StateSensorlessMotorStart=7;
01890C  231CD5     MOV #0x31CD, W5
01890E  B3C074     MOV.B #0x7, W4
018910  784A84     MOV.B W4, [W5]
23413:                         }
23414:                             
23415:                         break;
018912  37000D     BRA 0x1892E
01892C  000000     NOP
23416:                 }
23417:             }
01892E  FA8000     ULNK
018930  060000     RETURN
23418:             
23419:             void SensorlessMotorStopStarting(void)
23420:             {
018932  FA0000     LNK #0x0
23421:                             SenosrlessPWM1=0;
018934  EB0200     CLR W4
018936  8892E4     MOV W4, SenosrlessPWM1
23422:                             StateSensorlessMotorStart=0;
018938  231CD5     MOV #0x31CD, W5
01893A  EB4200     CLR.B W4
01893C  784A84     MOV.B W4, [W5]
23423:                             SensorlessNotBEMF=1;
01893E  809654     MOV 0x12CA, W4
018940  A04004     BSET W4, #4
018942  889654     MOV W4, 0x12CA
23424:             }
018944  FA8000     ULNK
018946  060000     RETURN
23425:             
23426:             
23427:             
23428:             void OptionsToMassProfile(void)
23429:             {
018948  FA0004     LNK #0x4
23430:                 unsigned int Prf=Profile-1,Tmp;
01894A  237E24     MOV #0x37E2, W4
01894C  784214     MOV.B [W4], W4
01894E  FB8204     ZE W4, W4
018950  E90204     DEC W4, W4
018952  780F04     MOV W4, [W14]
23431:             
23432:                 
23433:                 
23434:                 
23435:                 if ((But1Func==4)||(But1Func==5))
018954  2401C4     MOV #0x401C, W4
018956  784214     MOV.B [W4], W4
018958  524FE4     SUB.B W4, #0x4, [W15]
01895A  320004     BRA Z, 0x18964
01895C  2401C4     MOV #0x401C, W4
01895E  784214     MOV.B [W4], W4
018960  524FE5     SUB.B W4, #0x5, [W15]
018962  3A000C     BRA NZ, 0x1897C
23436:                 {
23437:                     ProfileMass[13+0]=But1Func;
018964  2401C4     MOV #0x401C, W4
018966  784214     MOV.B [W4], W4
018968  22DC65     MOV #0x2DC6, W5
01896A  784A84     MOV.B W4, [W5]
23438:                     ProfileMass[13+SIZE_OF_PROFILE]=But1Func;
01896C  2401C4     MOV #0x401C, W4
01896E  784214     MOV.B [W4], W4
018970  22E0C5     MOV #0x2E0C, W5
018972  784A84     MOV.B W4, [W5]
23439:                     ProfileMass[13+(SIZE_OF_PROFILE*2)]=But1Func;
018974  2401C4     MOV #0x401C, W4
018976  784214     MOV.B [W4], W4
018978  22E525     MOV #0x2E52, W5
01897A  784A84     MOV.B W4, [W5]
23440:                 }
23441:                 if ((But2Func==4)||(But2Func==5))
01897C  2401D4     MOV #0x401D, W4
01897E  784214     MOV.B [W4], W4
018980  524FE4     SUB.B W4, #0x4, [W15]
018982  320004     BRA Z, 0x1898C
018984  2401D4     MOV #0x401D, W4
018986  784214     MOV.B [W4], W4
018988  524FE5     SUB.B W4, #0x5, [W15]
01898A  3A000C     BRA NZ, 0x189A4
23442:                 {
23443:                     ProfileMass[14+0]=But2Func;
01898C  2401D4     MOV #0x401D, W4
01898E  784214     MOV.B [W4], W4
018990  22DC75     MOV #0x2DC7, W5
018992  784A84     MOV.B W4, [W5]
23444:                     ProfileMass[14+SIZE_OF_PROFILE]=But2Func;
018994  2401D4     MOV #0x401D, W4
018996  784214     MOV.B [W4], W4
018998  22E0D5     MOV #0x2E0D, W5
01899A  784A84     MOV.B W4, [W5]
23445:                     ProfileMass[14+(SIZE_OF_PROFILE*2)]=But2Func;
01899C  2401D4     MOV #0x401D, W4
01899E  784214     MOV.B [W4], W4
0189A0  22E535     MOV #0x2E53, W5
0189A2  784A84     MOV.B W4, [W5]
23446:                 }
23447:                 if ((But3Func==4)||(But3Func==5))
0189A4  2401E4     MOV #0x401E, W4
0189A6  784214     MOV.B [W4], W4
0189A8  524FE4     SUB.B W4, #0x4, [W15]
0189AA  320004     BRA Z, 0x189B4
0189AC  2401E4     MOV #0x401E, W4
0189AE  784214     MOV.B [W4], W4
0189B0  524FE5     SUB.B W4, #0x5, [W15]
0189B2  3A000C     BRA NZ, 0x189CC
23448:                 {
23449:                     ProfileMass[15+0]=But3Func;
0189B4  2401E4     MOV #0x401E, W4
0189B6  784214     MOV.B [W4], W4
0189B8  22DC85     MOV #0x2DC8, W5
0189BA  784A84     MOV.B W4, [W5]
23450:                     ProfileMass[15+SIZE_OF_PROFILE]=But3Func;
0189BC  2401E4     MOV #0x401E, W4
0189BE  784214     MOV.B [W4], W4
0189C0  22E0E5     MOV #0x2E0E, W5
0189C2  784A84     MOV.B W4, [W5]
23451:                     ProfileMass[15+(SIZE_OF_PROFILE*2)]=But3Func;
0189C4  2401E4     MOV #0x401E, W4
0189C6  784214     MOV.B [W4], W4
0189C8  22E545     MOV #0x2E54, W5
0189CA  784A84     MOV.B W4, [W5]
23452:                 }
23453:                 if ((But4Func==4)||(But4Func==5))
0189CC  2401F4     MOV #0x401F, W4
0189CE  784214     MOV.B [W4], W4
0189D0  524FE4     SUB.B W4, #0x4, [W15]
0189D2  320004     BRA Z, 0x189DC
0189D4  2401F4     MOV #0x401F, W4
0189D6  784214     MOV.B [W4], W4
0189D8  524FE5     SUB.B W4, #0x5, [W15]
0189DA  3A000C     BRA NZ, 0x189F4
23454:                 {
23455:                     ProfileMass[16+0]=But4Func;
0189DC  2401F4     MOV #0x401F, W4
0189DE  784214     MOV.B [W4], W4
0189E0  22DC95     MOV #0x2DC9, W5
0189E2  784A84     MOV.B W4, [W5]
23456:                     ProfileMass[16+SIZE_OF_PROFILE]=But4Func;
0189E4  2401F4     MOV #0x401F, W4
0189E6  784214     MOV.B [W4], W4
0189E8  22E0F5     MOV #0x2E0F, W5
0189EA  784A84     MOV.B W4, [W5]
23457:                     ProfileMass[16+(SIZE_OF_PROFILE*2)]=But4Func;
0189EC  2401F4     MOV #0x401F, W4
0189EE  784214     MOV.B [W4], W4
0189F0  22E555     MOV #0x2E55, W5
0189F2  784A84     MOV.B W4, [W5]
23458:                 }
23459:                 
23460:                 
23461:                 
23462:                 if (Prf==0)
0189F4  78021E     MOV [W14], W4
0189F6  520FE0     SUB W4, #0x0, [W15]
0189F8  3A0288     BRA NZ, 0x18F0A
23463:                 {
23464:                     
23465:                         if (CW_CCW_AnyProfile)
0189FA  809774     MOV StatFlgs3, W4
0189FC  620261     AND W4, #0x1, W4
0189FE  520FE0     SUB W4, #0x0, [W15]
018A00  32000C     BRA Z, 0x18A1A
23466:                         {
23467:                     ProfileMass[1+Prf]=HallDelayMem1_F;
018A02  E8029E     INC [W14], W5
018A04  214564     MOV #0x1456, W4
018A06  784214     MOV.B [W4], W4
018A08  22DB96     MOV #0x2DB9, W6
018A0A  430285     ADD W6, W5, W5
018A0C  784A84     MOV.B W4, [W5]
23468:                     ProfileMass[2+Prf]=HallDelayMem1_B;
018A0E  E8829E     INC2 [W14], W5
018A10  214574     MOV #0x1457, W4
018A12  784214     MOV.B [W4], W4
018A14  22DB96     MOV #0x2DB9, W6
018A16  430285     ADD W6, W5, W5
018A18  784A84     MOV.B W4, [W5]
23469:                         }
23470:                         
23471:                         
23472:                         
23473:                         
23474:                         
23475:                         
23476:                         
23477:                     
23478:                     ProfileMass[3+Prf]=0;
018A1A  78029E     MOV [W14], W5
018A1C  428263     ADD W5, #0x3, W4
018A1E  22DB95     MOV #0x2DB9, W5
018A20  428284     ADD W5, W4, W5
018A22  EB4200     CLR.B W4
018A24  784A84     MOV.B W4, [W5]
23479:                     ProfileMass[4+Prf]=0;
018A26  78031E     MOV [W14], W6
018A28  430264     ADD W6, #0x4, W4
018A2A  22DB95     MOV #0x2DB9, W5
018A2C  428284     ADD W5, W4, W5
018A2E  EB4200     CLR.B W4
018A30  784A84     MOV.B W4, [W5]
23480:                     ProfileMass[38+Prf]=0;
018A32  200265     MOV #0x26, W5
018A34  42821E     ADD W5, [W14], W4
018A36  22DB95     MOV #0x2DB9, W5
018A38  428284     ADD W5, W4, W5
018A3A  EB4200     CLR.B W4
018A3C  784A84     MOV.B W4, [W5]
23481:                     
23482:                     if (StrongModeMem)
018A3E  809764     MOV StatFlgs2, W4
018A40  620264     AND W4, #0x4, W4
018A42  520FE0     SUB W4, #0x0, [W15]
018A44  32000B     BRA Z, 0x18A5C
23483:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|1;
018A46  78031E     MOV [W14], W6
018A48  4302E3     ADD W6, #0x3, W5
018A4A  78031E     MOV [W14], W6
018A4C  430263     ADD W6, #0x3, W4
018A4E  22DB96     MOV #0x2DB9, W6
018A50  430204     ADD W6, W4, W4
018A52  784214     MOV.B [W4], W4
018A54  A00404     BSET.B W4, #0
018A56  22DB96     MOV #0x2DB9, W6
018A58  430285     ADD W6, W5, W5
018A5A  784A84     MOV.B W4, [W5]
23484:                     if (VectorMem)
018A5C  809755     MOV StatFlgs1, W5
018A5E  204004     MOV #0x400, W4
018A60  628204     AND W5, W4, W4
018A62  520FE0     SUB W4, #0x0, [W15]
018A64  32000B     BRA Z, 0x18A7C
23485:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|2;
018A66  78021E     MOV [W14], W4
018A68  4202E3     ADD W4, #0x3, W5
018A6A  78031E     MOV [W14], W6
018A6C  430263     ADD W6, #0x3, W4
018A6E  22DB96     MOV #0x2DB9, W6
018A70  430204     ADD W6, W4, W4
018A72  784214     MOV.B [W4], W4
018A74  A01404     BSET.B W4, #1
018A76  22DB96     MOV #0x2DB9, W6
018A78  430285     ADD W6, W5, W5
018A7A  784A84     MOV.B W4, [W5]
23486:                     if (TrapezoidaRAM1)
018A7C  809755     MOV StatFlgs1, W5
018A7E  210004     MOV #0x1000, W4
018A80  628204     AND W5, W4, W4
018A82  520FE0     SUB W4, #0x0, [W15]
018A84  32000B     BRA Z, 0x18A9C
23487:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|4;
018A86  78021E     MOV [W14], W4
018A88  4202E3     ADD W4, #0x3, W5
018A8A  78031E     MOV [W14], W6
018A8C  430263     ADD W6, #0x3, W4
018A8E  22DB96     MOV #0x2DB9, W6
018A90  430204     ADD W6, W4, W4
018A92  784214     MOV.B [W4], W4
018A94  A02404     BSET.B W4, #2
018A96  22DB96     MOV #0x2DB9, W6
018A98  430285     ADD W6, W5, W5
018A9A  784A84     MOV.B W4, [W5]
23488:                     if (PWM32Bits)
018A9C  809755     MOV StatFlgs1, W5
018A9E  280004     MOV #0x8000, W4
018AA0  628204     AND W5, W4, W4
018AA2  520FE0     SUB W4, #0x0, [W15]
018AA4  32000B     BRA Z, 0x18ABC
23489:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x8;
018AA6  78021E     MOV [W14], W4
018AA8  4202E3     ADD W4, #0x3, W5
018AAA  78031E     MOV [W14], W6
018AAC  430263     ADD W6, #0x3, W4
018AAE  22DB96     MOV #0x2DB9, W6
018AB0  430204     ADD W6, W4, W4
018AB2  784214     MOV.B [W4], W4
018AB4  A03404     BSET.B W4, #3
018AB6  22DB96     MOV #0x2DB9, W6
018AB8  430285     ADD W6, W5, W5
018ABA  784A84     MOV.B W4, [W5]
23490:                     if (SpeedControl)
018ABC  809754     MOV StatFlgs1, W4
018ABE  620262     AND W4, #0x2, W4
018AC0  520FE0     SUB W4, #0x0, [W15]
018AC2  32000B     BRA Z, 0x18ADA
23491:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x10;
018AC4  78021E     MOV [W14], W4
018AC6  4202E3     ADD W4, #0x3, W5
018AC8  78031E     MOV [W14], W6
018ACA  430263     ADD W6, #0x3, W4
018ACC  22DB96     MOV #0x2DB9, W6
018ACE  430204     ADD W6, W4, W4
018AD0  784214     MOV.B [W4], W4
018AD2  A04404     BSET.B W4, #4
018AD4  22DB96     MOV #0x2DB9, W6
018AD6  430285     ADD W6, W5, W5
018AD8  784A84     MOV.B W4, [W5]
23492:                     if (AutoPID)
018ADA  809745     MOV StatFlgs, W5
018ADC  200404     MOV #0x40, W4
018ADE  628204     AND W5, W4, W4
018AE0  520FE0     SUB W4, #0x0, [W15]
018AE2  32000C     BRA Z, 0x18AFC
23493:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x20;
018AE4  78021E     MOV [W14], W4
018AE6  420363     ADD W4, #0x3, W6
018AE8  78029E     MOV [W14], W5
018AEA  428263     ADD W5, #0x3, W4
018AEC  22DB95     MOV #0x2DB9, W5
018AEE  428204     ADD W5, W4, W4
018AF0  784294     MOV.B [W4], W5
018AF2  B3C204     MOV.B #0x20, W4
018AF4  72C204     IOR.B W5, W4, W4
018AF6  22DB95     MOV #0x2DB9, W5
018AF8  428286     ADD W5, W6, W5
018AFA  784A84     MOV.B W4, [W5]
23494:                     if (MixedMode)
018AFC  809745     MOV StatFlgs, W5
018AFE  208004     MOV #0x800, W4
018B00  628204     AND W5, W4, W4
018B02  520FE0     SUB W4, #0x0, [W15]
018B04  32000C     BRA Z, 0x18B1E
23495:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x40;
018B06  78021E     MOV [W14], W4
018B08  420363     ADD W4, #0x3, W6
018B0A  78029E     MOV [W14], W5
018B0C  428263     ADD W5, #0x3, W4
018B0E  22DB95     MOV #0x2DB9, W5
018B10  428204     ADD W5, W4, W4
018B12  784294     MOV.B [W4], W5
018B14  B3C404     MOV.B #0x40, W4
018B16  72C204     IOR.B W5, W4, W4
018B18  22DB95     MOV #0x2DB9, W5
018B1A  428286     ADD W5, W6, W5
018B1C  784A84     MOV.B W4, [W5]
23496:                     if (StrongModePID)
018B1E  809745     MOV StatFlgs, W5
018B20  220004     MOV #0x2000, W4
018B22  628204     AND W5, W4, W4
018B24  520FE0     SUB W4, #0x0, [W15]
018B26  32000C     BRA Z, 0x18B40
23497:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x80;
018B28  78021E     MOV [W14], W4
018B2A  420363     ADD W4, #0x3, W6
018B2C  78029E     MOV [W14], W5
018B2E  428263     ADD W5, #0x3, W4
018B30  22DB95     MOV #0x2DB9, W5
018B32  428204     ADD W5, W4, W4
018B34  784294     MOV.B [W4], W5
018B36  B3C804     MOV.B #0x80, W4
018B38  72C204     IOR.B W5, W4, W4
018B3A  22DB95     MOV #0x2DB9, W5
018B3C  428286     ADD W5, W6, W5
018B3E  784A84     MOV.B W4, [W5]
23498:                     if (SlowStart)
018B40  809765     MOV StatFlgs2, W5
018B42  201004     MOV #0x100, W4
018B44  628204     AND W5, W4, W4
018B46  520FE0     SUB W4, #0x0, [W15]
018B48  32000B     BRA Z, 0x18B60
23499:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x01;
018B4A  78031E     MOV [W14], W6
018B4C  4302E4     ADD W6, #0x4, W5
018B4E  78031E     MOV [W14], W6
018B50  430264     ADD W6, #0x4, W4
018B52  22DB96     MOV #0x2DB9, W6
018B54  430204     ADD W6, W4, W4
018B56  784214     MOV.B [W4], W4
018B58  A00404     BSET.B W4, #0
018B5A  22DB96     MOV #0x2DB9, W6
018B5C  430285     ADD W6, W5, W5
018B5E  784A84     MOV.B W4, [W5]
23500:                     if (MixedModeSlowSpeedOff)
018B60  809765     MOV StatFlgs2, W5
018B62  204004     MOV #0x400, W4
018B64  628204     AND W5, W4, W4
018B66  520FE0     SUB W4, #0x0, [W15]
018B68  32000B     BRA Z, 0x18B80
23501:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x02;
018B6A  78021E     MOV [W14], W4
018B6C  4202E4     ADD W4, #0x4, W5
018B6E  78031E     MOV [W14], W6
018B70  430264     ADD W6, #0x4, W4
018B72  22DB96     MOV #0x2DB9, W6
018B74  430204     ADD W6, W4, W4
018B76  784214     MOV.B [W4], W4
018B78  A01404     BSET.B W4, #1
018B7A  22DB96     MOV #0x2DB9, W6
018B7C  430285     ADD W6, W5, W5
018B7E  784A84     MOV.B W4, [W5]
23502:                     if (MixedMode2)
018B80  809765     MOV StatFlgs2, W5
018B82  208004     MOV #0x800, W4
018B84  628204     AND W5, W4, W4
018B86  520FE0     SUB W4, #0x0, [W15]
018B88  32000B     BRA Z, 0x18BA0
23503:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x04;
018B8A  78021E     MOV [W14], W4
018B8C  4202E4     ADD W4, #0x4, W5
018B8E  78031E     MOV [W14], W6
018B90  430264     ADD W6, #0x4, W4
018B92  22DB96     MOV #0x2DB9, W6
018B94  430204     ADD W6, W4, W4
018B96  784214     MOV.B [W4], W4
018B98  A02404     BSET.B W4, #2
018B9A  22DB96     MOV #0x2DB9, W6
018B9C  430285     ADD W6, W5, W5
018B9E  784A84     MOV.B W4, [W5]
23504:                     if (PWM_Mode)
018BA0  809765     MOV StatFlgs2, W5
018BA2  210004     MOV #0x1000, W4
018BA4  628204     AND W5, W4, W4
018BA6  520FE0     SUB W4, #0x0, [W15]
018BA8  32000B     BRA Z, 0x18BC0
23505:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x08;
018BAA  78021E     MOV [W14], W4
018BAC  4202E4     ADD W4, #0x4, W5
018BAE  78031E     MOV [W14], W6
018BB0  430264     ADD W6, #0x4, W4
018BB2  22DB96     MOV #0x2DB9, W6
018BB4  430204     ADD W6, W4, W4
018BB6  784214     MOV.B [W4], W4
018BB8  A03404     BSET.B W4, #3
018BBA  22DB96     MOV #0x2DB9, W6
018BBC  430285     ADD W6, W5, W5
018BBE  784A84     MOV.B W4, [W5]
23506:                     if (PWM_Mode_ZeroThrottle)
018BC0  809765     MOV StatFlgs2, W5
018BC2  220004     MOV #0x2000, W4
018BC4  628204     AND W5, W4, W4
018BC6  520FE0     SUB W4, #0x0, [W15]
018BC8  32000B     BRA Z, 0x18BE0
23507:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x10;
018BCA  78021E     MOV [W14], W4
018BCC  4202E4     ADD W4, #0x4, W5
018BCE  78031E     MOV [W14], W6
018BD0  430264     ADD W6, #0x4, W4
018BD2  22DB96     MOV #0x2DB9, W6
018BD4  430204     ADD W6, W4, W4
018BD6  784214     MOV.B [W4], W4
018BD8  A04404     BSET.B W4, #4
018BDA  22DB96     MOV #0x2DB9, W6
018BDC  430285     ADD W6, W5, W5
018BDE  784A84     MOV.B W4, [W5]
23508:                     if (SIN_MIDDLE)
018BE0  809765     MOV StatFlgs2, W5
018BE2  240004     MOV #0x4000, W4
018BE4  628204     AND W5, W4, W4
018BE6  520FE0     SUB W4, #0x0, [W15]
018BE8  32000C     BRA Z, 0x18C02
23509:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x20;
018BEA  78021E     MOV [W14], W4
018BEC  420364     ADD W4, #0x4, W6
018BEE  78029E     MOV [W14], W5
018BF0  428264     ADD W5, #0x4, W4
018BF2  22DB95     MOV #0x2DB9, W5
018BF4  428204     ADD W5, W4, W4
018BF6  784294     MOV.B [W4], W5
018BF8  B3C204     MOV.B #0x20, W4
018BFA  72C204     IOR.B W5, W4, W4
018BFC  22DB95     MOV #0x2DB9, W5
018BFE  428286     ADD W5, W6, W5
018C00  784A84     MOV.B W4, [W5]
23510:                     if (LightOn)
018C02  809775     MOV StatFlgs3, W5
018C04  202004     MOV #0x200, W4
018C06  628204     AND W5, W4, W4
018C08  520FE0     SUB W4, #0x0, [W15]
018C0A  32000C     BRA Z, 0x18C24
23511:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x40;
018C0C  78021E     MOV [W14], W4
018C0E  420364     ADD W4, #0x4, W6
018C10  78029E     MOV [W14], W5
018C12  428264     ADD W5, #0x4, W4
018C14  22DB95     MOV #0x2DB9, W5
018C16  428204     ADD W5, W4, W4
018C18  784294     MOV.B [W4], W5
018C1A  B3C404     MOV.B #0x40, W4
018C1C  72C204     IOR.B W5, W4, W4
018C1E  22DB95     MOV #0x2DB9, W5
018C20  428286     ADD W5, W6, W5
018C22  784A84     MOV.B W4, [W5]
23512:                     if (CurrentControlOnly)
018C24  809775     MOV StatFlgs3, W5
018C26  204004     MOV #0x400, W4
018C28  628204     AND W5, W4, W4
018C2A  520FE0     SUB W4, #0x0, [W15]
018C2C  32000C     BRA Z, 0x18C46
23513:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x80;
018C2E  78021E     MOV [W14], W4
018C30  420364     ADD W4, #0x4, W6
018C32  78029E     MOV [W14], W5
018C34  428264     ADD W5, #0x4, W4
018C36  22DB95     MOV #0x2DB9, W5
018C38  428204     ADD W5, W4, W4
018C3A  784294     MOV.B [W4], W5
018C3C  B3C804     MOV.B #0x80, W4
018C3E  72C204     IOR.B W5, W4, W4
018C40  22DB95     MOV #0x2DB9, W5
018C42  428286     ADD W5, W6, W5
018C44  784A84     MOV.B W4, [W5]
23514:                     
23515:                     
23516:                     
23517:                     
23518:                     ProfileMass[5+Prf]=CurrUstWork;
018C46  78031E     MOV [W14], W6
018C48  4302E5     ADD W6, #0x5, W5
018C4A  81F4E4     MOV CurrUstWork, W4
018C4C  784204     MOV.B W4, W4
018C4E  22DB96     MOV #0x2DB9, W6
018C50  430285     ADD W6, W5, W5
018C52  784A84     MOV.B W4, [W5]
23519:                     ProfileMass[6+Prf]=CurrUstWork>>8;
018C54  78021E     MOV [W14], W4
018C56  4202E6     ADD W4, #0x6, W5
018C58  81F4E4     MOV CurrUstWork, W4
018C5A  DEA248     ASR W4, #8, W4
018C5C  784204     MOV.B W4, W4
018C5E  22DB96     MOV #0x2DB9, W6
018C60  430285     ADD W6, W5, W5
018C62  784A84     MOV.B W4, [W5]
23520:                     ProfileMass[7+Prf]=CurrLimitWork;
018C64  78031E     MOV [W14], W6
018C66  4302E7     ADD W6, #0x7, W5
018C68  80C1A4     MOV CurrLimitWork, W4
018C6A  784204     MOV.B W4, W4
018C6C  22DB96     MOV #0x2DB9, W6
018C6E  430285     ADD W6, W5, W5
018C70  784A84     MOV.B W4, [W5]
23521:                     ProfileMass[8+Prf]=CurrLimitWork>>8;
018C72  78021E     MOV [W14], W4
018C74  4202E8     ADD W4, #0x8, W5
018C76  80C1A4     MOV CurrLimitWork, W4
018C78  DE2248     LSR W4, #8, W4
018C7A  784204     MOV.B W4, W4
018C7C  22DB96     MOV #0x2DB9, W6
018C7E  430285     ADD W6, W5, W5
018C80  784A84     MOV.B W4, [W5]
23522:                     ProfileMass[9+Prf]=PhasePERMASS;
018C82  78031E     MOV [W14], W6
018C84  4302E9     ADD W6, #0x9, W5
018C86  2183A4     MOV #0x183A, W4
018C88  784214     MOV.B [W4], W4
018C8A  22DB96     MOV #0x2DB9, W6
018C8C  430285     ADD W6, W5, W5
018C8E  784A84     MOV.B W4, [W5]
23523:                     ProfileMass[10+Prf]=PhasePERMASS_SHFT;
018C90  78021E     MOV [W14], W4
018C92  4202EA     ADD W4, #0xA, W5
018C94  2183B4     MOV #0x183B, W4
018C96  784214     MOV.B [W4], W4
018C98  22DB96     MOV #0x2DB9, W6
018C9A  430285     ADD W6, W5, W5
018C9C  784A84     MOV.B W4, [W5]
23524:                     ProfileMass[11+Prf]=MAX_PWM_MEM;
018C9E  78031E     MOV [W14], W6
018CA0  4302EB     ADD W6, #0xB, W5
018CA2  809984     MOV MAX_PWM_MEM, W4
018CA4  784204     MOV.B W4, W4
018CA6  22DB96     MOV #0x2DB9, W6
018CA8  430285     ADD W6, W5, W5
018CAA  784A84     MOV.B W4, [W5]
23525:                     ProfileMass[12+Prf]=MaxSpd;
018CAC  78021E     MOV [W14], W4
018CAE  4202EC     ADD W4, #0xC, W5
018CB0  230C54     MOV #0x30C5, W4
018CB2  784214     MOV.B [W4], W4
018CB4  22DB96     MOV #0x2DB9, W6
018CB6  430285     ADD W6, W5, W5
018CB8  784A84     MOV.B W4, [W5]
23526:                     ProfileMass[13+Prf]=But1Func;
018CBA  78031E     MOV [W14], W6
018CBC  4302ED     ADD W6, #0xD, W5
018CBE  2401C4     MOV #0x401C, W4
018CC0  784214     MOV.B [W4], W4
018CC2  22DB96     MOV #0x2DB9, W6
018CC4  430285     ADD W6, W5, W5
018CC6  784A84     MOV.B W4, [W5]
23527:                     ProfileMass[14+Prf]=But2Func;
018CC8  78021E     MOV [W14], W4
018CCA  4202EE     ADD W4, #0xE, W5
018CCC  2401D4     MOV #0x401D, W4
018CCE  784214     MOV.B [W4], W4
018CD0  22DB96     MOV #0x2DB9, W6
018CD2  430285     ADD W6, W5, W5
018CD4  784A84     MOV.B W4, [W5]
23528:                     ProfileMass[15+Prf]=But3Func;
018CD6  78031E     MOV [W14], W6
018CD8  4302EF     ADD W6, #0xF, W5
018CDA  2401E4     MOV #0x401E, W4
018CDC  784214     MOV.B [W4], W4
018CDE  22DB96     MOV #0x2DB9, W6
018CE0  430285     ADD W6, W5, W5
018CE2  784A84     MOV.B W4, [W5]
23529:                     ProfileMass[16+Prf]=But4Func;
018CE4  78021E     MOV [W14], W4
018CE6  4202F0     ADD W4, #0x10, W5
018CE8  2401F4     MOV #0x401F, W4
018CEA  784214     MOV.B [W4], W4
018CEC  22DB96     MOV #0x2DB9, W6
018CEE  430285     ADD W6, W5, W5
018CF0  784A84     MOV.B W4, [W5]
23530:                     ProfileMass[17+Prf]=ThrottleTmpChngMem;
018CF2  78031E     MOV [W14], W6
018CF4  4302F1     ADD W6, #0x11, W5
018CF6  2329A4     MOV #0x329A, W4
018CF8  784214     MOV.B [W4], W4
018CFA  22DB96     MOV #0x2DB9, W6
018CFC  430285     ADD W6, W5, W5
018CFE  784A84     MOV.B W4, [W5]
23531:                     ProfileMass[18+Prf]=SlowStrtSpd;
018D00  78021E     MOV [W14], W4
018D02  4202F2     ADD W4, #0x12, W5
018D04  240D04     MOV #0x40D0, W4
018D06  784214     MOV.B [W4], W4
018D08  22DB96     MOV #0x2DB9, W6
018D0A  430285     ADD W6, W5, W5
018D0C  784A84     MOV.B W4, [W5]
23532:                     
23533:                     Tmp=(int)(Ki_PWM_Mode*10000);
018D0E  8182A4     MOV Ki_PWM_Mode, W4
018D10  8182B5     MOV 0x3056, W5
018D12  240002     MOV #0x4000, W2
018D14  2461C3     MOV #0x461C, W3
018D16  BE0004     MOV.D W4, W0
018D18  022630     CALL ___mulsf3
018D1A  000000     NOP
018D1C  BE0200     MOV.D W0, W4
018D1E  BE0004     MOV.D W4, W0
018D20  022504     CALL ___fixsfsi
018D22  000000     NOP
018D24  BE0200     MOV.D W0, W4
018D26  780204     MOV W4, W4
018D28  980714     MOV W4, [W14+2]
23534:                     ProfileMass[19+Prf]=Tmp;
018D2A  78031E     MOV [W14], W6
018D2C  4302F3     ADD W6, #0x13, W5
018D2E  90021E     MOV [W14+2], W4
018D30  784204     MOV.B W4, W4
018D32  22DB96     MOV #0x2DB9, W6
018D34  430285     ADD W6, W5, W5
018D36  784A84     MOV.B W4, [W5]
23535:                     ProfileMass[20+Prf]=Tmp>>8;
018D38  78021E     MOV [W14], W4
018D3A  4202F4     ADD W4, #0x14, W5
018D3C  90021E     MOV [W14+2], W4
018D3E  DE2248     LSR W4, #8, W4
018D40  784204     MOV.B W4, W4
018D42  22DB96     MOV #0x2DB9, W6
018D44  430285     ADD W6, W5, W5
018D46  784A84     MOV.B W4, [W5]
23536:             
23537:                     Tmp=(int)(Kp_PWM_Mode*100);
018D48  81B764     MOV Kp_PWM_Mode, W4
018D4A  81B775     MOV 0x36EE, W5
018D4C  200002     MOV #0x0, W2
018D4E  242C83     MOV #0x42C8, W3
018D50  BE0004     MOV.D W4, W0
018D52  022630     CALL ___mulsf3
018D54  000000     NOP
018D56  BE0200     MOV.D W0, W4
018D58  BE0004     MOV.D W4, W0
018D5A  022504     CALL ___fixsfsi
018D5C  000000     NOP
018D5E  BE0200     MOV.D W0, W4
018D60  780204     MOV W4, W4
018D62  980714     MOV W4, [W14+2]
23538:                     ProfileMass[21+Prf]=Tmp;
018D64  78031E     MOV [W14], W6
018D66  4302F5     ADD W6, #0x15, W5
018D68  90021E     MOV [W14+2], W4
018D6A  784204     MOV.B W4, W4
018D6C  22DB96     MOV #0x2DB9, W6
018D6E  430285     ADD W6, W5, W5
018D70  784A84     MOV.B W4, [W5]
23539:                     ProfileMass[22+Prf]=Tmp>>8;
018D72  78021E     MOV [W14], W4
018D74  4202F6     ADD W4, #0x16, W5
018D76  90021E     MOV [W14+2], W4
018D78  DE2248     LSR W4, #8, W4
018D7A  784204     MOV.B W4, W4
018D7C  22DB96     MOV #0x2DB9, W6
018D7E  430285     ADD W6, W5, W5
018D80  784A84     MOV.B W4, [W5]
23540:             
23541:                     Tmp=CurrPhaseLimitWork;
018D82  81F4D4     MOV CurrPhaseLimitWork, W4
018D84  980714     MOV W4, [W14+2]
23542:                     ProfileMass[23+Prf]=Tmp;
018D86  78031E     MOV [W14], W6
018D88  4302F7     ADD W6, #0x17, W5
018D8A  90021E     MOV [W14+2], W4
018D8C  784204     MOV.B W4, W4
018D8E  22DB96     MOV #0x2DB9, W6
018D90  430285     ADD W6, W5, W5
018D92  784A84     MOV.B W4, [W5]
23543:                     ProfileMass[24+Prf]=Tmp>>8;
018D94  78021E     MOV [W14], W4
018D96  4202F8     ADD W4, #0x18, W5
018D98  90021E     MOV [W14+2], W4
018D9A  DE2248     LSR W4, #8, W4
018D9C  784204     MOV.B W4, W4
018D9E  22DB96     MOV #0x2DB9, W6
018DA0  430285     ADD W6, W5, W5
018DA2  784A84     MOV.B W4, [W5]
23544:                     
23545:                     
23546:                     
23547:                     
23548:                         if (CW_CCW_AnyProfile)
018DA4  809774     MOV StatFlgs3, W4
018DA6  620261     AND W4, #0x1, W4
018DA8  520FE0     SUB W4, #0x0, [W15]
018DAA  320015     BRA Z, 0x18DD6
23549:                         {
23550:                         ProfileMass[25+Prf]=HallDelay1MaxSPD_F;
018DAC  78031E     MOV [W14], W6
018DAE  4302F9     ADD W6, #0x19, W5
018DB0  237E34     MOV #0x37E3, W4
018DB2  784214     MOV.B [W4], W4
018DB4  22DB96     MOV #0x2DB9, W6
018DB6  430285     ADD W6, W5, W5
018DB8  784A84     MOV.B W4, [W5]
23551:                         ProfileMass[26+Prf]=HallDelay1MaxSPD_B;
018DBA  78021E     MOV [W14], W4
018DBC  4202FA     ADD W4, #0x1A, W5
018DBE  237E44     MOV #0x37E4, W4
018DC0  784214     MOV.B [W4], W4
018DC2  22DB96     MOV #0x2DB9, W6
018DC4  430285     ADD W6, W5, W5
018DC6  784A84     MOV.B W4, [W5]
23552:                         ProfileMass[27+Prf]=HallDelayMaxSPD;
018DC8  78031E     MOV [W14], W6
018DCA  4302FB     ADD W6, #0x1B, W5
018DCC  237E54     MOV #0x37E5, W4
018DCE  784214     MOV.B [W4], W4
018DD0  22DB96     MOV #0x2DB9, W6
018DD2  430285     ADD W6, W5, W5
018DD4  784A84     MOV.B W4, [W5]
23553:                         }
23554:                     
23555:                     
23556:                     
23557:                     Tmp=(int)KpWheelingMem;
018DD6  809D44     MOV KpWheelingMem, W4
018DD8  809D55     MOV 0x13AA, W5
018DDA  BE0004     MOV.D W4, W0
018DDC  022504     CALL ___fixsfsi
018DDE  000000     NOP
018DE0  BE0200     MOV.D W0, W4
018DE2  780204     MOV W4, W4
018DE4  980714     MOV W4, [W14+2]
23558:                     ProfileMass[28+Prf]=Tmp;
018DE6  78021E     MOV [W14], W4
018DE8  4202FC     ADD W4, #0x1C, W5
018DEA  90021E     MOV [W14+2], W4
018DEC  784204     MOV.B W4, W4
018DEE  22DB96     MOV #0x2DB9, W6
018DF0  430285     ADD W6, W5, W5
018DF2  784A84     MOV.B W4, [W5]
23559:                     ProfileMass[29+Prf]=Tmp>>8;
018DF4  78031E     MOV [W14], W6
018DF6  4302FD     ADD W6, #0x1D, W5
018DF8  90021E     MOV [W14+2], W4
018DFA  DE2248     LSR W4, #8, W4
018DFC  784204     MOV.B W4, W4
018DFE  22DB96     MOV #0x2DB9, W6
018E00  430285     ADD W6, W5, W5
018E02  784A84     MOV.B W4, [W5]
23560:                     
23561:                     Tmp=(int)(KiWheelingMem*1000);
018E04  809B64     MOV KiWheelingMem, W4
018E06  809B75     MOV 0x136E, W5
018E08  200002     MOV #0x0, W2
018E0A  2447A3     MOV #0x447A, W3
018E0C  BE0004     MOV.D W4, W0
018E0E  022630     CALL ___mulsf3
018E10  000000     NOP
018E12  BE0200     MOV.D W0, W4
018E14  BE0004     MOV.D W4, W0
018E16  022504     CALL ___fixsfsi
018E18  000000     NOP
018E1A  BE0200     MOV.D W0, W4
018E1C  780204     MOV W4, W4
018E1E  980714     MOV W4, [W14+2]
23562:                     ProfileMass[30+Prf]=Tmp;
018E20  78021E     MOV [W14], W4
018E22  4202FE     ADD W4, #0x1E, W5
018E24  90021E     MOV [W14+2], W4
018E26  784204     MOV.B W4, W4
018E28  22DB96     MOV #0x2DB9, W6
018E2A  430285     ADD W6, W5, W5
018E2C  784A84     MOV.B W4, [W5]
23563:                     ProfileMass[31+Prf]=Tmp>>8;
018E2E  78031E     MOV [W14], W6
018E30  4302FF     ADD W6, #0x1F, W5
018E32  90021E     MOV [W14+2], W4
018E34  DE2248     LSR W4, #8, W4
018E36  784204     MOV.B W4, W4
018E38  22DB96     MOV #0x2DB9, W6
018E3A  430285     ADD W6, W5, W5
018E3C  784A84     MOV.B W4, [W5]
23564:                           
23565:                     Tmp=(int)(KdNoMan/10);
018E3E  809C24     MOV KdNoMan, W4
018E40  809C35     MOV 0x1386, W5
018E42  200002     MOV #0x0, W2
018E44  241203     MOV #0x4120, W3
018E46  BE0004     MOV.D W4, W0
018E48  02245A     CALL ___divsf3
018E4A  000000     NOP
018E4C  BE0200     MOV.D W0, W4
018E4E  BE0004     MOV.D W4, W0
018E50  022504     CALL ___fixsfsi
018E52  000000     NOP
018E54  BE0200     MOV.D W0, W4
018E56  780204     MOV W4, W4
018E58  980714     MOV W4, [W14+2]
23566:                     ProfileMass[32+Prf]=Tmp;
018E5A  200204     MOV #0x20, W4
018E5C  42029E     ADD W4, [W14], W5
018E5E  90021E     MOV [W14+2], W4
018E60  784204     MOV.B W4, W4
018E62  22DB96     MOV #0x2DB9, W6
018E64  430285     ADD W6, W5, W5
018E66  784A84     MOV.B W4, [W5]
23567:                     ProfileMass[33+Prf]=Tmp>>8;
018E68  200216     MOV #0x21, W6
018E6A  43029E     ADD W6, [W14], W5
018E6C  90021E     MOV [W14+2], W4
018E6E  DE2248     LSR W4, #8, W4
018E70  784204     MOV.B W4, W4
018E72  22DB96     MOV #0x2DB9, W6
018E74  430285     ADD W6, W5, W5
018E76  784A84     MOV.B W4, [W5]
23568:                     ProfileMass[34+Prf]=CurrentMaxCurrentOnly;
018E78  200224     MOV #0x22, W4
018E7A  42029E     ADD W4, [W14], W5
018E7C  212F24     MOV #0x12F2, W4
018E7E  784214     MOV.B [W4], W4
018E80  22DB96     MOV #0x2DB9, W6
018E82  430285     ADD W6, W5, W5
018E84  784A84     MOV.B W4, [W5]
23569:                     
23570:                     Tmp=(int)(Ki_PWM_ModeOff*10000);
018E86  8182C4     MOV Ki_PWM_ModeOff, W4
018E88  8182D5     MOV 0x305A, W5
018E8A  240002     MOV #0x4000, W2
018E8C  2461C3     MOV #0x461C, W3
018E8E  BE0004     MOV.D W4, W0
018E90  022630     CALL ___mulsf3
018E92  000000     NOP
018E94  BE0200     MOV.D W0, W4
018E96  BE0004     MOV.D W4, W0
018E98  022504     CALL ___fixsfsi
018E9A  000000     NOP
018E9C  BE0200     MOV.D W0, W4
018E9E  780204     MOV W4, W4
018EA0  980714     MOV W4, [W14+2]
23571:                     ProfileMass[35+Prf]=Tmp;
018EA2  200236     MOV #0x23, W6
018EA4  43029E     ADD W6, [W14], W5
018EA6  90021E     MOV [W14+2], W4
018EA8  784204     MOV.B W4, W4
018EAA  22DB96     MOV #0x2DB9, W6
018EAC  430285     ADD W6, W5, W5
018EAE  784A84     MOV.B W4, [W5]
23572:                     ProfileMass[36+Prf]=Tmp>>8;
018EB0  200244     MOV #0x24, W4
018EB2  42029E     ADD W4, [W14], W5
018EB4  90021E     MOV [W14+2], W4
018EB6  DE2248     LSR W4, #8, W4
018EB8  784204     MOV.B W4, W4
018EBA  22DB96     MOV #0x2DB9, W6
018EBC  430285     ADD W6, W5, W5
018EBE  784A84     MOV.B W4, [W5]
23573:             
23574:                     ProfileMass[37+Prf]=StrongModeSpdFilterOffMem;
018EC0  200256     MOV #0x25, W6
018EC2  43029E     ADD W6, [W14], W5
018EC4  22ADE4     MOV #0x2ADE, W4
018EC6  784214     MOV.B [W4], W4
018EC8  22DB96     MOV #0x2DB9, W6
018ECA  430285     ADD W6, W5, W5
018ECC  784A84     MOV.B W4, [W5]
23575:             
23576:             //---------------------------------------------------------        
23577:                     
23578:                     if (KeyLightStop)
018ECE  809784     MOV StatFlgs4, W4
018ED0  620261     AND W4, #0x1, W4
018ED2  520FE0     SUB W4, #0x0, [W15]
018ED4  32000B     BRA Z, 0x18EEC
23579:                         ProfileMass[38+Prf]=ProfileMass[38+Prf]|0x01;
018ED6  200264     MOV #0x26, W4
018ED8  42029E     ADD W4, [W14], W5
018EDA  200266     MOV #0x26, W6
018EDC  43021E     ADD W6, [W14], W4
018EDE  22DB96     MOV #0x2DB9, W6
018EE0  430204     ADD W6, W4, W4
018EE2  784214     MOV.B [W4], W4
018EE4  A00404     BSET.B W4, #0
018EE6  22DB96     MOV #0x2DB9, W6
018EE8  430285     ADD W6, W5, W5
018EEA  784A84     MOV.B W4, [W5]
23580:                     if (KeyLightStopGabarit)
018EEC  809784     MOV StatFlgs4, W4
018EEE  620262     AND W4, #0x2, W4
018EF0  520FE0     SUB W4, #0x0, [W15]
018EF2  32000B     BRA Z, 0x18F0A
23581:                         ProfileMass[38+Prf]=ProfileMass[38+Prf]|0x02;
018EF4  200264     MOV #0x26, W4
018EF6  42029E     ADD W4, [W14], W5
018EF8  200266     MOV #0x26, W6
018EFA  43021E     ADD W6, [W14], W4
018EFC  22DB96     MOV #0x2DB9, W6
018EFE  430204     ADD W6, W4, W4
018F00  784214     MOV.B [W4], W4
018F02  A01404     BSET.B W4, #1
018F04  22DB96     MOV #0x2DB9, W6
018F06  430285     ADD W6, W5, W5
018F08  784A84     MOV.B W4, [W5]
23582:             //---------------------------------------------------------        
23583:                     
23584:             
23585:                 }
23586:             
23587:                 if (Prf==1)
018F0A  78021E     MOV [W14], W4
018F0C  520FE1     SUB W4, #0x1, [W15]
018F0E  3A028C     BRA NZ, 0x19428
23588:                 {
23589:                     Prf=Prf*SIZE_OF_PROFILE;
018F10  78029E     MOV [W14], W5
018F12  200464     MOV #0x46, W4
018F14  B82A84     MUL.UU W5, W4, W4
018F16  780F04     MOV W4, [W14]
23590:                         if (CW_CCW_AnyProfile)
018F18  809774     MOV StatFlgs3, W4
018F1A  620261     AND W4, #0x1, W4
018F1C  520FE0     SUB W4, #0x0, [W15]
018F1E  32000C     BRA Z, 0x18F38
23591:                         {
23592:                     ProfileMass[1+Prf]=HallDelayMem1_F;
018F20  E8029E     INC [W14], W5
018F22  214564     MOV #0x1456, W4
018F24  784214     MOV.B [W4], W4
018F26  22DB96     MOV #0x2DB9, W6
018F28  430285     ADD W6, W5, W5
018F2A  784A84     MOV.B W4, [W5]
23593:                     ProfileMass[2+Prf]=HallDelayMem1_B;
018F2C  E8829E     INC2 [W14], W5
018F2E  214574     MOV #0x1457, W4
018F30  784214     MOV.B [W4], W4
018F32  22DB96     MOV #0x2DB9, W6
018F34  430285     ADD W6, W5, W5
018F36  784A84     MOV.B W4, [W5]
23594:                         }
23595:             
23596:                     
23597:                     ProfileMass[3+Prf]=0;
018F38  78029E     MOV [W14], W5
018F3A  428263     ADD W5, #0x3, W4
018F3C  22DB95     MOV #0x2DB9, W5
018F3E  428284     ADD W5, W4, W5
018F40  EB4200     CLR.B W4
018F42  784A84     MOV.B W4, [W5]
23598:                     ProfileMass[4+Prf]=0;
018F44  78031E     MOV [W14], W6
018F46  430264     ADD W6, #0x4, W4
018F48  22DB95     MOV #0x2DB9, W5
018F4A  428284     ADD W5, W4, W5
018F4C  EB4200     CLR.B W4
018F4E  784A84     MOV.B W4, [W5]
23599:                     ProfileMass[38+Prf]=0;
018F50  200265     MOV #0x26, W5
018F52  42821E     ADD W5, [W14], W4
018F54  22DB95     MOV #0x2DB9, W5
018F56  428284     ADD W5, W4, W5
018F58  EB4200     CLR.B W4
018F5A  784A84     MOV.B W4, [W5]
23600:             
23601:                     if (StrongModeMem)
018F5C  809764     MOV StatFlgs2, W4
018F5E  620264     AND W4, #0x4, W4
018F60  520FE0     SUB W4, #0x0, [W15]
018F62  32000B     BRA Z, 0x18F7A
23602:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|1;
018F64  78031E     MOV [W14], W6
018F66  4302E3     ADD W6, #0x3, W5
018F68  78031E     MOV [W14], W6
018F6A  430263     ADD W6, #0x3, W4
018F6C  22DB96     MOV #0x2DB9, W6
018F6E  430204     ADD W6, W4, W4
018F70  784214     MOV.B [W4], W4
018F72  A00404     BSET.B W4, #0
018F74  22DB96     MOV #0x2DB9, W6
018F76  430285     ADD W6, W5, W5
018F78  784A84     MOV.B W4, [W5]
23603:                     if (VectorMem)
018F7A  809755     MOV StatFlgs1, W5
018F7C  204004     MOV #0x400, W4
018F7E  628204     AND W5, W4, W4
018F80  520FE0     SUB W4, #0x0, [W15]
018F82  32000B     BRA Z, 0x18F9A
23604:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|2;
018F84  78021E     MOV [W14], W4
018F86  4202E3     ADD W4, #0x3, W5
018F88  78031E     MOV [W14], W6
018F8A  430263     ADD W6, #0x3, W4
018F8C  22DB96     MOV #0x2DB9, W6
018F8E  430204     ADD W6, W4, W4
018F90  784214     MOV.B [W4], W4
018F92  A01404     BSET.B W4, #1
018F94  22DB96     MOV #0x2DB9, W6
018F96  430285     ADD W6, W5, W5
018F98  784A84     MOV.B W4, [W5]
23605:                     if (TrapezoidaRAM1)
018F9A  809755     MOV StatFlgs1, W5
018F9C  210004     MOV #0x1000, W4
018F9E  628204     AND W5, W4, W4
018FA0  520FE0     SUB W4, #0x0, [W15]
018FA2  32000B     BRA Z, 0x18FBA
23606:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|4;
018FA4  78021E     MOV [W14], W4
018FA6  4202E3     ADD W4, #0x3, W5
018FA8  78031E     MOV [W14], W6
018FAA  430263     ADD W6, #0x3, W4
018FAC  22DB96     MOV #0x2DB9, W6
018FAE  430204     ADD W6, W4, W4
018FB0  784214     MOV.B [W4], W4
018FB2  A02404     BSET.B W4, #2
018FB4  22DB96     MOV #0x2DB9, W6
018FB6  430285     ADD W6, W5, W5
018FB8  784A84     MOV.B W4, [W5]
23607:                     if (PWM32Bits)
018FBA  809755     MOV StatFlgs1, W5
018FBC  280004     MOV #0x8000, W4
018FBE  628204     AND W5, W4, W4
018FC0  520FE0     SUB W4, #0x0, [W15]
018FC2  32000B     BRA Z, 0x18FDA
23608:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x8;
018FC4  78021E     MOV [W14], W4
018FC6  4202E3     ADD W4, #0x3, W5
018FC8  78031E     MOV [W14], W6
018FCA  430263     ADD W6, #0x3, W4
018FCC  22DB96     MOV #0x2DB9, W6
018FCE  430204     ADD W6, W4, W4
018FD0  784214     MOV.B [W4], W4
018FD2  A03404     BSET.B W4, #3
018FD4  22DB96     MOV #0x2DB9, W6
018FD6  430285     ADD W6, W5, W5
018FD8  784A84     MOV.B W4, [W5]
23609:                     if (SpeedControl)
018FDA  809754     MOV StatFlgs1, W4
018FDC  620262     AND W4, #0x2, W4
018FDE  520FE0     SUB W4, #0x0, [W15]
018FE0  32000B     BRA Z, 0x18FF8
23610:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x10;
018FE2  78021E     MOV [W14], W4
018FE4  4202E3     ADD W4, #0x3, W5
018FE6  78031E     MOV [W14], W6
018FE8  430263     ADD W6, #0x3, W4
018FEA  22DB96     MOV #0x2DB9, W6
018FEC  430204     ADD W6, W4, W4
018FEE  784214     MOV.B [W4], W4
018FF0  A04404     BSET.B W4, #4
018FF2  22DB96     MOV #0x2DB9, W6
018FF4  430285     ADD W6, W5, W5
018FF6  784A84     MOV.B W4, [W5]
23611:                     if (AutoPID)
018FF8  809745     MOV StatFlgs, W5
018FFA  200404     MOV #0x40, W4
018FFC  628204     AND W5, W4, W4
018FFE  520FE0     SUB W4, #0x0, [W15]
019000  32000C     BRA Z, 0x1901A
23612:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x20;
019002  78021E     MOV [W14], W4
019004  420363     ADD W4, #0x3, W6
019006  78029E     MOV [W14], W5
019008  428263     ADD W5, #0x3, W4
01900A  22DB95     MOV #0x2DB9, W5
01900C  428204     ADD W5, W4, W4
01900E  784294     MOV.B [W4], W5
019010  B3C204     MOV.B #0x20, W4
019012  72C204     IOR.B W5, W4, W4
019014  22DB95     MOV #0x2DB9, W5
019016  428286     ADD W5, W6, W5
019018  784A84     MOV.B W4, [W5]
23613:                     if (MixedMode)
01901A  809745     MOV StatFlgs, W5
01901C  208004     MOV #0x800, W4
01901E  628204     AND W5, W4, W4
019020  520FE0     SUB W4, #0x0, [W15]
019022  32000C     BRA Z, 0x1903C
23614:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x40;
019024  78021E     MOV [W14], W4
019026  420363     ADD W4, #0x3, W6
019028  78029E     MOV [W14], W5
01902A  428263     ADD W5, #0x3, W4
01902C  22DB95     MOV #0x2DB9, W5
01902E  428204     ADD W5, W4, W4
019030  784294     MOV.B [W4], W5
019032  B3C404     MOV.B #0x40, W4
019034  72C204     IOR.B W5, W4, W4
019036  22DB95     MOV #0x2DB9, W5
019038  428286     ADD W5, W6, W5
01903A  784A84     MOV.B W4, [W5]
23615:                     if (StrongModePID)
01903C  809745     MOV StatFlgs, W5
01903E  220004     MOV #0x2000, W4
019040  628204     AND W5, W4, W4
019042  520FE0     SUB W4, #0x0, [W15]
019044  32000C     BRA Z, 0x1905E
23616:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x80;
019046  78021E     MOV [W14], W4
019048  420363     ADD W4, #0x3, W6
01904A  78029E     MOV [W14], W5
01904C  428263     ADD W5, #0x3, W4
01904E  22DB95     MOV #0x2DB9, W5
019050  428204     ADD W5, W4, W4
019052  784294     MOV.B [W4], W5
019054  B3C804     MOV.B #0x80, W4
019056  72C204     IOR.B W5, W4, W4
019058  22DB95     MOV #0x2DB9, W5
01905A  428286     ADD W5, W6, W5
01905C  784A84     MOV.B W4, [W5]
23617:                     if (SlowStart)
01905E  809765     MOV StatFlgs2, W5
019060  201004     MOV #0x100, W4
019062  628204     AND W5, W4, W4
019064  520FE0     SUB W4, #0x0, [W15]
019066  32000B     BRA Z, 0x1907E
23618:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x01;
019068  78031E     MOV [W14], W6
01906A  4302E4     ADD W6, #0x4, W5
01906C  78031E     MOV [W14], W6
01906E  430264     ADD W6, #0x4, W4
019070  22DB96     MOV #0x2DB9, W6
019072  430204     ADD W6, W4, W4
019074  784214     MOV.B [W4], W4
019076  A00404     BSET.B W4, #0
019078  22DB96     MOV #0x2DB9, W6
01907A  430285     ADD W6, W5, W5
01907C  784A84     MOV.B W4, [W5]
23619:                     if (MixedModeSlowSpeedOff)
01907E  809765     MOV StatFlgs2, W5
019080  204004     MOV #0x400, W4
019082  628204     AND W5, W4, W4
019084  520FE0     SUB W4, #0x0, [W15]
019086  32000B     BRA Z, 0x1909E
23620:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x02;
019088  78021E     MOV [W14], W4
01908A  4202E4     ADD W4, #0x4, W5
01908C  78031E     MOV [W14], W6
01908E  430264     ADD W6, #0x4, W4
019090  22DB96     MOV #0x2DB9, W6
019092  430204     ADD W6, W4, W4
019094  784214     MOV.B [W4], W4
019096  A01404     BSET.B W4, #1
019098  22DB96     MOV #0x2DB9, W6
01909A  430285     ADD W6, W5, W5
01909C  784A84     MOV.B W4, [W5]
23621:                     if (MixedMode2)
01909E  809765     MOV StatFlgs2, W5
0190A0  208004     MOV #0x800, W4
0190A2  628204     AND W5, W4, W4
0190A4  520FE0     SUB W4, #0x0, [W15]
0190A6  32000B     BRA Z, 0x190BE
23622:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x04;
0190A8  78021E     MOV [W14], W4
0190AA  4202E4     ADD W4, #0x4, W5
0190AC  78031E     MOV [W14], W6
0190AE  430264     ADD W6, #0x4, W4
0190B0  22DB96     MOV #0x2DB9, W6
0190B2  430204     ADD W6, W4, W4
0190B4  784214     MOV.B [W4], W4
0190B6  A02404     BSET.B W4, #2
0190B8  22DB96     MOV #0x2DB9, W6
0190BA  430285     ADD W6, W5, W5
0190BC  784A84     MOV.B W4, [W5]
23623:                     if (PWM_Mode)
0190BE  809765     MOV StatFlgs2, W5
0190C0  210004     MOV #0x1000, W4
0190C2  628204     AND W5, W4, W4
0190C4  520FE0     SUB W4, #0x0, [W15]
0190C6  32000B     BRA Z, 0x190DE
23624:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x08;
0190C8  78021E     MOV [W14], W4
0190CA  4202E4     ADD W4, #0x4, W5
0190CC  78031E     MOV [W14], W6
0190CE  430264     ADD W6, #0x4, W4
0190D0  22DB96     MOV #0x2DB9, W6
0190D2  430204     ADD W6, W4, W4
0190D4  784214     MOV.B [W4], W4
0190D6  A03404     BSET.B W4, #3
0190D8  22DB96     MOV #0x2DB9, W6
0190DA  430285     ADD W6, W5, W5
0190DC  784A84     MOV.B W4, [W5]
23625:                     if (PWM_Mode_ZeroThrottle)
0190DE  809765     MOV StatFlgs2, W5
0190E0  220004     MOV #0x2000, W4
0190E2  628204     AND W5, W4, W4
0190E4  520FE0     SUB W4, #0x0, [W15]
0190E6  32000B     BRA Z, 0x190FE
23626:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x10;
0190E8  78021E     MOV [W14], W4
0190EA  4202E4     ADD W4, #0x4, W5
0190EC  78031E     MOV [W14], W6
0190EE  430264     ADD W6, #0x4, W4
0190F0  22DB96     MOV #0x2DB9, W6
0190F2  430204     ADD W6, W4, W4
0190F4  784214     MOV.B [W4], W4
0190F6  A04404     BSET.B W4, #4
0190F8  22DB96     MOV #0x2DB9, W6
0190FA  430285     ADD W6, W5, W5
0190FC  784A84     MOV.B W4, [W5]
23627:                     if (SIN_MIDDLE)
0190FE  809765     MOV StatFlgs2, W5
019100  240004     MOV #0x4000, W4
019102  628204     AND W5, W4, W4
019104  520FE0     SUB W4, #0x0, [W15]
019106  32000C     BRA Z, 0x19120
23628:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x20;
019108  78021E     MOV [W14], W4
01910A  420364     ADD W4, #0x4, W6
01910C  78029E     MOV [W14], W5
01910E  428264     ADD W5, #0x4, W4
019110  22DB95     MOV #0x2DB9, W5
019112  428204     ADD W5, W4, W4
019114  784294     MOV.B [W4], W5
019116  B3C204     MOV.B #0x20, W4
019118  72C204     IOR.B W5, W4, W4
01911A  22DB95     MOV #0x2DB9, W5
01911C  428286     ADD W5, W6, W5
01911E  784A84     MOV.B W4, [W5]
23629:                     if (LightOn)
019120  809775     MOV StatFlgs3, W5
019122  202004     MOV #0x200, W4
019124  628204     AND W5, W4, W4
019126  520FE0     SUB W4, #0x0, [W15]
019128  32000C     BRA Z, 0x19142
23630:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x40;
01912A  78021E     MOV [W14], W4
01912C  420364     ADD W4, #0x4, W6
01912E  78029E     MOV [W14], W5
019130  428264     ADD W5, #0x4, W4
019132  22DB95     MOV #0x2DB9, W5
019134  428204     ADD W5, W4, W4
019136  784294     MOV.B [W4], W5
019138  B3C404     MOV.B #0x40, W4
01913A  72C204     IOR.B W5, W4, W4
01913C  22DB95     MOV #0x2DB9, W5
01913E  428286     ADD W5, W6, W5
019140  784A84     MOV.B W4, [W5]
23631:                     if (CurrentControlOnly)
019142  809775     MOV StatFlgs3, W5
019144  204004     MOV #0x400, W4
019146  628204     AND W5, W4, W4
019148  520FE0     SUB W4, #0x0, [W15]
01914A  32000C     BRA Z, 0x19164
23632:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x80;
01914C  78021E     MOV [W14], W4
01914E  420364     ADD W4, #0x4, W6
019150  78029E     MOV [W14], W5
019152  428264     ADD W5, #0x4, W4
019154  22DB95     MOV #0x2DB9, W5
019156  428204     ADD W5, W4, W4
019158  784294     MOV.B [W4], W5
01915A  B3C804     MOV.B #0x80, W4
01915C  72C204     IOR.B W5, W4, W4
01915E  22DB95     MOV #0x2DB9, W5
019160  428286     ADD W5, W6, W5
019162  784A84     MOV.B W4, [W5]
23633:             
23634:                     
23635:                     
23636:                     ProfileMass[5+Prf]=CurrUstWork;
019164  78031E     MOV [W14], W6
019166  4302E5     ADD W6, #0x5, W5
019168  81F4E4     MOV CurrUstWork, W4
01916A  784204     MOV.B W4, W4
01916C  22DB96     MOV #0x2DB9, W6
01916E  430285     ADD W6, W5, W5
019170  784A84     MOV.B W4, [W5]
23637:                     ProfileMass[6+Prf]=CurrUstWork>>8;
019172  78021E     MOV [W14], W4
019174  4202E6     ADD W4, #0x6, W5
019176  81F4E4     MOV CurrUstWork, W4
019178  DEA248     ASR W4, #8, W4
01917A  784204     MOV.B W4, W4
01917C  22DB96     MOV #0x2DB9, W6
01917E  430285     ADD W6, W5, W5
019180  784A84     MOV.B W4, [W5]
23638:                     ProfileMass[7+Prf]=CurrLimitWork;
019182  78031E     MOV [W14], W6
019184  4302E7     ADD W6, #0x7, W5
019186  80C1A4     MOV CurrLimitWork, W4
019188  784204     MOV.B W4, W4
01918A  22DB96     MOV #0x2DB9, W6
01918C  430285     ADD W6, W5, W5
01918E  784A84     MOV.B W4, [W5]
23639:                     ProfileMass[8+Prf]=CurrLimitWork>>8;
019190  78021E     MOV [W14], W4
019192  4202E8     ADD W4, #0x8, W5
019194  80C1A4     MOV CurrLimitWork, W4
019196  DE2248     LSR W4, #8, W4
019198  784204     MOV.B W4, W4
01919A  22DB96     MOV #0x2DB9, W6
01919C  430285     ADD W6, W5, W5
01919E  784A84     MOV.B W4, [W5]
23640:                     ProfileMass[9+Prf]=PhasePERMASS;
0191A0  78031E     MOV [W14], W6
0191A2  4302E9     ADD W6, #0x9, W5
0191A4  2183A4     MOV #0x183A, W4
0191A6  784214     MOV.B [W4], W4
0191A8  22DB96     MOV #0x2DB9, W6
0191AA  430285     ADD W6, W5, W5
0191AC  784A84     MOV.B W4, [W5]
23641:                     ProfileMass[10+Prf]=PhasePERMASS_SHFT;
0191AE  78021E     MOV [W14], W4
0191B0  4202EA     ADD W4, #0xA, W5
0191B2  2183B4     MOV #0x183B, W4
0191B4  784214     MOV.B [W4], W4
0191B6  22DB96     MOV #0x2DB9, W6
0191B8  430285     ADD W6, W5, W5
0191BA  784A84     MOV.B W4, [W5]
23642:                     ProfileMass[11+Prf]=MAX_PWM_MEM;
0191BC  78031E     MOV [W14], W6
0191BE  4302EB     ADD W6, #0xB, W5
0191C0  809984     MOV MAX_PWM_MEM, W4
0191C2  784204     MOV.B W4, W4
0191C4  22DB96     MOV #0x2DB9, W6
0191C6  430285     ADD W6, W5, W5
0191C8  784A84     MOV.B W4, [W5]
23643:                     ProfileMass[12+Prf]=MaxSpd;
0191CA  78021E     MOV [W14], W4
0191CC  4202EC     ADD W4, #0xC, W5
0191CE  230C54     MOV #0x30C5, W4
0191D0  784214     MOV.B [W4], W4
0191D2  22DB96     MOV #0x2DB9, W6
0191D4  430285     ADD W6, W5, W5
0191D6  784A84     MOV.B W4, [W5]
23644:                     ProfileMass[13+Prf]=But1Func;
0191D8  78031E     MOV [W14], W6
0191DA  4302ED     ADD W6, #0xD, W5
0191DC  2401C4     MOV #0x401C, W4
0191DE  784214     MOV.B [W4], W4
0191E0  22DB96     MOV #0x2DB9, W6
0191E2  430285     ADD W6, W5, W5
0191E4  784A84     MOV.B W4, [W5]
23645:                     ProfileMass[14+Prf]=But2Func;
0191E6  78021E     MOV [W14], W4
0191E8  4202EE     ADD W4, #0xE, W5
0191EA  2401D4     MOV #0x401D, W4
0191EC  784214     MOV.B [W4], W4
0191EE  22DB96     MOV #0x2DB9, W6
0191F0  430285     ADD W6, W5, W5
0191F2  784A84     MOV.B W4, [W5]
23646:                     ProfileMass[15+Prf]=But3Func;
0191F4  78031E     MOV [W14], W6
0191F6  4302EF     ADD W6, #0xF, W5
0191F8  2401E4     MOV #0x401E, W4
0191FA  784214     MOV.B [W4], W4
0191FC  22DB96     MOV #0x2DB9, W6
0191FE  430285     ADD W6, W5, W5
019200  784A84     MOV.B W4, [W5]
23647:                     ProfileMass[16+Prf]=But4Func;
019202  78021E     MOV [W14], W4
019204  4202F0     ADD W4, #0x10, W5
019206  2401F4     MOV #0x401F, W4
019208  784214     MOV.B [W4], W4
01920A  22DB96     MOV #0x2DB9, W6
01920C  430285     ADD W6, W5, W5
01920E  784A84     MOV.B W4, [W5]
23648:                     ProfileMass[17+Prf]=ThrottleTmpChngMem;
019210  78031E     MOV [W14], W6
019212  4302F1     ADD W6, #0x11, W5
019214  2329A4     MOV #0x329A, W4
019216  784214     MOV.B [W4], W4
019218  22DB96     MOV #0x2DB9, W6
01921A  430285     ADD W6, W5, W5
01921C  784A84     MOV.B W4, [W5]
23649:                     ProfileMass[18+Prf]=SlowStrtSpd;
01921E  78021E     MOV [W14], W4
019220  4202F2     ADD W4, #0x12, W5
019222  240D04     MOV #0x40D0, W4
019224  784214     MOV.B [W4], W4
019226  22DB96     MOV #0x2DB9, W6
019228  430285     ADD W6, W5, W5
01922A  784A84     MOV.B W4, [W5]
23650:                     Tmp=(int)(Ki_PWM_Mode*10000);
01922C  8182A4     MOV Ki_PWM_Mode, W4
01922E  8182B5     MOV 0x3056, W5
019230  240002     MOV #0x4000, W2
019232  2461C3     MOV #0x461C, W3
019234  BE0004     MOV.D W4, W0
019236  022630     CALL ___mulsf3
019238  000000     NOP
01923A  BE0200     MOV.D W0, W4
01923C  BE0004     MOV.D W4, W0
01923E  022504     CALL ___fixsfsi
019240  000000     NOP
019242  BE0200     MOV.D W0, W4
019244  780204     MOV W4, W4
019246  980714     MOV W4, [W14+2]
23651:                     ProfileMass[19+Prf]=Tmp;
019248  78031E     MOV [W14], W6
01924A  4302F3     ADD W6, #0x13, W5
01924C  90021E     MOV [W14+2], W4
01924E  784204     MOV.B W4, W4
019250  22DB96     MOV #0x2DB9, W6
019252  430285     ADD W6, W5, W5
019254  784A84     MOV.B W4, [W5]
23652:                     ProfileMass[20+Prf]=Tmp>>8;
019256  78021E     MOV [W14], W4
019258  4202F4     ADD W4, #0x14, W5
01925A  90021E     MOV [W14+2], W4
01925C  DE2248     LSR W4, #8, W4
01925E  784204     MOV.B W4, W4
019260  22DB96     MOV #0x2DB9, W6
019262  430285     ADD W6, W5, W5
019264  784A84     MOV.B W4, [W5]
23653:             
23654:                     Tmp=(int)(Kp_PWM_Mode*100);
019266  81B764     MOV Kp_PWM_Mode, W4
019268  81B775     MOV 0x36EE, W5
01926A  200002     MOV #0x0, W2
01926C  242C83     MOV #0x42C8, W3
01926E  BE0004     MOV.D W4, W0
019270  022630     CALL ___mulsf3
019272  000000     NOP
019274  BE0200     MOV.D W0, W4
019276  BE0004     MOV.D W4, W0
019278  022504     CALL ___fixsfsi
01927A  000000     NOP
01927C  BE0200     MOV.D W0, W4
01927E  780204     MOV W4, W4
019280  980714     MOV W4, [W14+2]
23655:                     ProfileMass[21+Prf]=Tmp;
019282  78031E     MOV [W14], W6
019284  4302F5     ADD W6, #0x15, W5
019286  90021E     MOV [W14+2], W4
019288  784204     MOV.B W4, W4
01928A  22DB96     MOV #0x2DB9, W6
01928C  430285     ADD W6, W5, W5
01928E  784A84     MOV.B W4, [W5]
23656:                     ProfileMass[22+Prf]=Tmp>>8;
019290  78021E     MOV [W14], W4
019292  4202F6     ADD W4, #0x16, W5
019294  90021E     MOV [W14+2], W4
019296  DE2248     LSR W4, #8, W4
019298  784204     MOV.B W4, W4
01929A  22DB96     MOV #0x2DB9, W6
01929C  430285     ADD W6, W5, W5
01929E  784A84     MOV.B W4, [W5]
23657:                     Tmp=CurrPhaseLimitWork;
0192A0  81F4D4     MOV CurrPhaseLimitWork, W4
0192A2  980714     MOV W4, [W14+2]
23658:                     ProfileMass[23+Prf]=Tmp;
0192A4  78031E     MOV [W14], W6
0192A6  4302F7     ADD W6, #0x17, W5
0192A8  90021E     MOV [W14+2], W4
0192AA  784204     MOV.B W4, W4
0192AC  22DB96     MOV #0x2DB9, W6
0192AE  430285     ADD W6, W5, W5
0192B0  784A84     MOV.B W4, [W5]
23659:                     ProfileMass[24+Prf]=Tmp>>8;
0192B2  78021E     MOV [W14], W4
0192B4  4202F8     ADD W4, #0x18, W5
0192B6  90021E     MOV [W14+2], W4
0192B8  DE2248     LSR W4, #8, W4
0192BA  784204     MOV.B W4, W4
0192BC  22DB96     MOV #0x2DB9, W6
0192BE  430285     ADD W6, W5, W5
0192C0  784A84     MOV.B W4, [W5]
23660:             
23661:                     if (CW_CCW_AnyProfile)
0192C2  809774     MOV StatFlgs3, W4
0192C4  620261     AND W4, #0x1, W4
0192C6  520FE0     SUB W4, #0x0, [W15]
0192C8  320015     BRA Z, 0x192F4
23662:                         {
23663:                         ProfileMass[25+Prf]=HallDelay1MaxSPD_F;
0192CA  78031E     MOV [W14], W6
0192CC  4302F9     ADD W6, #0x19, W5
0192CE  237E34     MOV #0x37E3, W4
0192D0  784214     MOV.B [W4], W4
0192D2  22DB96     MOV #0x2DB9, W6
0192D4  430285     ADD W6, W5, W5
0192D6  784A84     MOV.B W4, [W5]
23664:                         ProfileMass[26+Prf]=HallDelay1MaxSPD_B;
0192D8  78021E     MOV [W14], W4
0192DA  4202FA     ADD W4, #0x1A, W5
0192DC  237E44     MOV #0x37E4, W4
0192DE  784214     MOV.B [W4], W4
0192E0  22DB96     MOV #0x2DB9, W6
0192E2  430285     ADD W6, W5, W5
0192E4  784A84     MOV.B W4, [W5]
23665:                         ProfileMass[27+Prf]=HallDelayMaxSPD;
0192E6  78031E     MOV [W14], W6
0192E8  4302FB     ADD W6, #0x1B, W5
0192EA  237E54     MOV #0x37E5, W4
0192EC  784214     MOV.B [W4], W4
0192EE  22DB96     MOV #0x2DB9, W6
0192F0  430285     ADD W6, W5, W5
0192F2  784A84     MOV.B W4, [W5]
23666:                         }
23667:                     Tmp=(int)KpWheelingMem;
0192F4  809D44     MOV KpWheelingMem, W4
0192F6  809D55     MOV 0x13AA, W5
0192F8  BE0004     MOV.D W4, W0
0192FA  022504     CALL ___fixsfsi
0192FC  000000     NOP
0192FE  BE0200     MOV.D W0, W4
019300  780204     MOV W4, W4
019302  980714     MOV W4, [W14+2]
23668:                     ProfileMass[28+Prf]=Tmp;
019304  78021E     MOV [W14], W4
019306  4202FC     ADD W4, #0x1C, W5
019308  90021E     MOV [W14+2], W4
01930A  784204     MOV.B W4, W4
01930C  22DB96     MOV #0x2DB9, W6
01930E  430285     ADD W6, W5, W5
019310  784A84     MOV.B W4, [W5]
23669:                     ProfileMass[29+Prf]=Tmp>>8;
019312  78031E     MOV [W14], W6
019314  4302FD     ADD W6, #0x1D, W5
019316  90021E     MOV [W14+2], W4
019318  DE2248     LSR W4, #8, W4
01931A  784204     MOV.B W4, W4
01931C  22DB96     MOV #0x2DB9, W6
01931E  430285     ADD W6, W5, W5
019320  784A84     MOV.B W4, [W5]
23670:             
23671:                     Tmp=(int)(KiWheelingMem*1000);
019322  809B64     MOV KiWheelingMem, W4
019324  809B75     MOV 0x136E, W5
019326  200002     MOV #0x0, W2
019328  2447A3     MOV #0x447A, W3
01932A  BE0004     MOV.D W4, W0
01932C  022630     CALL ___mulsf3
01932E  000000     NOP
019330  BE0200     MOV.D W0, W4
019332  BE0004     MOV.D W4, W0
019334  022504     CALL ___fixsfsi
019336  000000     NOP
019338  BE0200     MOV.D W0, W4
01933A  780204     MOV W4, W4
01933C  980714     MOV W4, [W14+2]
23672:                     ProfileMass[30+Prf]=Tmp;
01933E  78021E     MOV [W14], W4
019340  4202FE     ADD W4, #0x1E, W5
019342  90021E     MOV [W14+2], W4
019344  784204     MOV.B W4, W4
019346  22DB96     MOV #0x2DB9, W6
019348  430285     ADD W6, W5, W5
01934A  784A84     MOV.B W4, [W5]
23673:                     ProfileMass[31+Prf]=Tmp>>8;
01934C  78031E     MOV [W14], W6
01934E  4302FF     ADD W6, #0x1F, W5
019350  90021E     MOV [W14+2], W4
019352  DE2248     LSR W4, #8, W4
019354  784204     MOV.B W4, W4
019356  22DB96     MOV #0x2DB9, W6
019358  430285     ADD W6, W5, W5
01935A  784A84     MOV.B W4, [W5]
23674:                           
23675:                     Tmp=(int)(KdNoMan/10);
01935C  809C24     MOV KdNoMan, W4
01935E  809C35     MOV 0x1386, W5
019360  200002     MOV #0x0, W2
019362  241203     MOV #0x4120, W3
019364  BE0004     MOV.D W4, W0
019366  02245A     CALL ___divsf3
019368  000000     NOP
01936A  BE0200     MOV.D W0, W4
01936C  BE0004     MOV.D W4, W0
01936E  022504     CALL ___fixsfsi
019370  000000     NOP
019372  BE0200     MOV.D W0, W4
019374  780204     MOV W4, W4
019376  980714     MOV W4, [W14+2]
23676:                     ProfileMass[32+Prf]=Tmp;
019378  200204     MOV #0x20, W4
01937A  42029E     ADD W4, [W14], W5
01937C  90021E     MOV [W14+2], W4
01937E  784204     MOV.B W4, W4
019380  22DB96     MOV #0x2DB9, W6
019382  430285     ADD W6, W5, W5
019384  784A84     MOV.B W4, [W5]
23677:                     ProfileMass[33+Prf]=Tmp>>8;
019386  200216     MOV #0x21, W6
019388  43029E     ADD W6, [W14], W5
01938A  90021E     MOV [W14+2], W4
01938C  DE2248     LSR W4, #8, W4
01938E  784204     MOV.B W4, W4
019390  22DB96     MOV #0x2DB9, W6
019392  430285     ADD W6, W5, W5
019394  784A84     MOV.B W4, [W5]
23678:                     ProfileMass[34+Prf]=CurrentMaxCurrentOnly;
019396  200224     MOV #0x22, W4
019398  42029E     ADD W4, [W14], W5
01939A  212F24     MOV #0x12F2, W4
01939C  784214     MOV.B [W4], W4
01939E  22DB96     MOV #0x2DB9, W6
0193A0  430285     ADD W6, W5, W5
0193A2  784A84     MOV.B W4, [W5]
23679:                     
23680:                     Tmp=(int)(Ki_PWM_ModeOff*10000);
0193A4  8182C4     MOV Ki_PWM_ModeOff, W4
0193A6  8182D5     MOV 0x305A, W5
0193A8  240002     MOV #0x4000, W2
0193AA  2461C3     MOV #0x461C, W3
0193AC  BE0004     MOV.D W4, W0
0193AE  022630     CALL ___mulsf3
0193B0  000000     NOP
0193B2  BE0200     MOV.D W0, W4
0193B4  BE0004     MOV.D W4, W0
0193B6  022504     CALL ___fixsfsi
0193B8  000000     NOP
0193BA  BE0200     MOV.D W0, W4
0193BC  780204     MOV W4, W4
0193BE  980714     MOV W4, [W14+2]
23681:                     ProfileMass[35+Prf]=Tmp;
0193C0  200236     MOV #0x23, W6
0193C2  43029E     ADD W6, [W14], W5
0193C4  90021E     MOV [W14+2], W4
0193C6  784204     MOV.B W4, W4
0193C8  22DB96     MOV #0x2DB9, W6
0193CA  430285     ADD W6, W5, W5
0193CC  784A84     MOV.B W4, [W5]
23682:                     ProfileMass[36+Prf]=Tmp>>8;
0193CE  200244     MOV #0x24, W4
0193D0  42029E     ADD W4, [W14], W5
0193D2  90021E     MOV [W14+2], W4
0193D4  DE2248     LSR W4, #8, W4
0193D6  784204     MOV.B W4, W4
0193D8  22DB96     MOV #0x2DB9, W6
0193DA  430285     ADD W6, W5, W5
0193DC  784A84     MOV.B W4, [W5]
23683:             
23684:                     ProfileMass[37+Prf]=StrongModeSpdFilterOffMem;
0193DE  200256     MOV #0x25, W6
0193E0  43029E     ADD W6, [W14], W5
0193E2  22ADE4     MOV #0x2ADE, W4
0193E4  784214     MOV.B [W4], W4
0193E6  22DB96     MOV #0x2DB9, W6
0193E8  430285     ADD W6, W5, W5
0193EA  784A84     MOV.B W4, [W5]
23685:             //---------------------------------------------------------        
23686:                     
23687:                     if (KeyLightStop)
0193EC  809784     MOV StatFlgs4, W4
0193EE  620261     AND W4, #0x1, W4
0193F0  520FE0     SUB W4, #0x0, [W15]
0193F2  32000B     BRA Z, 0x1940A
23688:                         ProfileMass[38+Prf]=ProfileMass[38+Prf]|0x01;
0193F4  200264     MOV #0x26, W4
0193F6  42029E     ADD W4, [W14], W5
0193F8  200266     MOV #0x26, W6
0193FA  43021E     ADD W6, [W14], W4
0193FC  22DB96     MOV #0x2DB9, W6
0193FE  430204     ADD W6, W4, W4
019400  784214     MOV.B [W4], W4
019402  A00404     BSET.B W4, #0
019404  22DB96     MOV #0x2DB9, W6
019406  430285     ADD W6, W5, W5
019408  784A84     MOV.B W4, [W5]
23689:                     if (KeyLightStopGabarit)
01940A  809784     MOV StatFlgs4, W4
01940C  620262     AND W4, #0x2, W4
01940E  520FE0     SUB W4, #0x0, [W15]
019410  32000B     BRA Z, 0x19428
23690:                         ProfileMass[38+Prf]=ProfileMass[38+Prf]|0x02;
019412  200264     MOV #0x26, W4
019414  42029E     ADD W4, [W14], W5
019416  200266     MOV #0x26, W6
019418  43021E     ADD W6, [W14], W4
01941A  22DB96     MOV #0x2DB9, W6
01941C  430204     ADD W6, W4, W4
01941E  784214     MOV.B [W4], W4
019420  A01404     BSET.B W4, #1
019422  22DB96     MOV #0x2DB9, W6
019424  430285     ADD W6, W5, W5
019426  784A84     MOV.B W4, [W5]
23691:             
23692:             //---------------------------------------------------------        
23693:             
23694:                 }
23695:                 if (Prf==2)
019428  78021E     MOV [W14], W4
01942A  520FE2     SUB W4, #0x2, [W15]
01942C  3A028C     BRA NZ, 0x19946
23696:                 {
23697:                     Prf=Prf*SIZE_OF_PROFILE;
01942E  78029E     MOV [W14], W5
019430  200464     MOV #0x46, W4
019432  B82A84     MUL.UU W5, W4, W4
019434  780F04     MOV W4, [W14]
23698:                     
23699:                         if (CW_CCW_AnyProfile)
019436  809774     MOV StatFlgs3, W4
019438  620261     AND W4, #0x1, W4
01943A  520FE0     SUB W4, #0x0, [W15]
01943C  32000C     BRA Z, 0x19456
23700:                         {
23701:                     ProfileMass[1+Prf]=HallDelayMem1_F;
01943E  E8029E     INC [W14], W5
019440  214564     MOV #0x1456, W4
019442  784214     MOV.B [W4], W4
019444  22DB96     MOV #0x2DB9, W6
019446  430285     ADD W6, W5, W5
019448  784A84     MOV.B W4, [W5]
23702:                     ProfileMass[2+Prf]=HallDelayMem1_B;
01944A  E8829E     INC2 [W14], W5
01944C  214574     MOV #0x1457, W4
01944E  784214     MOV.B [W4], W4
019450  22DB96     MOV #0x2DB9, W6
019452  430285     ADD W6, W5, W5
019454  784A84     MOV.B W4, [W5]
23703:                         }        
23704:                     ProfileMass[3+Prf]=0;
019456  78029E     MOV [W14], W5
019458  428263     ADD W5, #0x3, W4
01945A  22DB95     MOV #0x2DB9, W5
01945C  428284     ADD W5, W4, W5
01945E  EB4200     CLR.B W4
019460  784A84     MOV.B W4, [W5]
23705:                     ProfileMass[4+Prf]=0;
019462  78031E     MOV [W14], W6
019464  430264     ADD W6, #0x4, W4
019466  22DB95     MOV #0x2DB9, W5
019468  428284     ADD W5, W4, W5
01946A  EB4200     CLR.B W4
01946C  784A84     MOV.B W4, [W5]
23706:                     ProfileMass[38+Prf]=0;
01946E  200265     MOV #0x26, W5
019470  42821E     ADD W5, [W14], W4
019472  22DB95     MOV #0x2DB9, W5
019474  428284     ADD W5, W4, W5
019476  EB4200     CLR.B W4
019478  784A84     MOV.B W4, [W5]
23707:             
23708:                     if (StrongModeMem)
01947A  809764     MOV StatFlgs2, W4
01947C  620264     AND W4, #0x4, W4
01947E  520FE0     SUB W4, #0x0, [W15]
019480  32000B     BRA Z, 0x19498
23709:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|1;
019482  78031E     MOV [W14], W6
019484  4302E3     ADD W6, #0x3, W5
019486  78031E     MOV [W14], W6
019488  430263     ADD W6, #0x3, W4
01948A  22DB96     MOV #0x2DB9, W6
01948C  430204     ADD W6, W4, W4
01948E  784214     MOV.B [W4], W4
019490  A00404     BSET.B W4, #0
019492  22DB96     MOV #0x2DB9, W6
019494  430285     ADD W6, W5, W5
019496  784A84     MOV.B W4, [W5]
23710:                     if (VectorMem)
019498  809755     MOV StatFlgs1, W5
01949A  204004     MOV #0x400, W4
01949C  628204     AND W5, W4, W4
01949E  520FE0     SUB W4, #0x0, [W15]
0194A0  32000B     BRA Z, 0x194B8
23711:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|2;
0194A2  78021E     MOV [W14], W4
0194A4  4202E3     ADD W4, #0x3, W5
0194A6  78031E     MOV [W14], W6
0194A8  430263     ADD W6, #0x3, W4
0194AA  22DB96     MOV #0x2DB9, W6
0194AC  430204     ADD W6, W4, W4
0194AE  784214     MOV.B [W4], W4
0194B0  A01404     BSET.B W4, #1
0194B2  22DB96     MOV #0x2DB9, W6
0194B4  430285     ADD W6, W5, W5
0194B6  784A84     MOV.B W4, [W5]
23712:                     if (TrapezoidaRAM1)
0194B8  809755     MOV StatFlgs1, W5
0194BA  210004     MOV #0x1000, W4
0194BC  628204     AND W5, W4, W4
0194BE  520FE0     SUB W4, #0x0, [W15]
0194C0  32000B     BRA Z, 0x194D8
23713:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|4;
0194C2  78021E     MOV [W14], W4
0194C4  4202E3     ADD W4, #0x3, W5
0194C6  78031E     MOV [W14], W6
0194C8  430263     ADD W6, #0x3, W4
0194CA  22DB96     MOV #0x2DB9, W6
0194CC  430204     ADD W6, W4, W4
0194CE  784214     MOV.B [W4], W4
0194D0  A02404     BSET.B W4, #2
0194D2  22DB96     MOV #0x2DB9, W6
0194D4  430285     ADD W6, W5, W5
0194D6  784A84     MOV.B W4, [W5]
23714:                     if (PWM32Bits)
0194D8  809755     MOV StatFlgs1, W5
0194DA  280004     MOV #0x8000, W4
0194DC  628204     AND W5, W4, W4
0194DE  520FE0     SUB W4, #0x0, [W15]
0194E0  32000B     BRA Z, 0x194F8
23715:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x8;
0194E2  78021E     MOV [W14], W4
0194E4  4202E3     ADD W4, #0x3, W5
0194E6  78031E     MOV [W14], W6
0194E8  430263     ADD W6, #0x3, W4
0194EA  22DB96     MOV #0x2DB9, W6
0194EC  430204     ADD W6, W4, W4
0194EE  784214     MOV.B [W4], W4
0194F0  A03404     BSET.B W4, #3
0194F2  22DB96     MOV #0x2DB9, W6
0194F4  430285     ADD W6, W5, W5
0194F6  784A84     MOV.B W4, [W5]
23716:                     if (SpeedControl)
0194F8  809754     MOV StatFlgs1, W4
0194FA  620262     AND W4, #0x2, W4
0194FC  520FE0     SUB W4, #0x0, [W15]
0194FE  32000B     BRA Z, 0x19516
23717:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x10;
019500  78021E     MOV [W14], W4
019502  4202E3     ADD W4, #0x3, W5
019504  78031E     MOV [W14], W6
019506  430263     ADD W6, #0x3, W4
019508  22DB96     MOV #0x2DB9, W6
01950A  430204     ADD W6, W4, W4
01950C  784214     MOV.B [W4], W4
01950E  A04404     BSET.B W4, #4
019510  22DB96     MOV #0x2DB9, W6
019512  430285     ADD W6, W5, W5
019514  784A84     MOV.B W4, [W5]
23718:                     if (AutoPID)
019516  809745     MOV StatFlgs, W5
019518  200404     MOV #0x40, W4
01951A  628204     AND W5, W4, W4
01951C  520FE0     SUB W4, #0x0, [W15]
01951E  32000C     BRA Z, 0x19538
23719:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x20;
019520  78021E     MOV [W14], W4
019522  420363     ADD W4, #0x3, W6
019524  78029E     MOV [W14], W5
019526  428263     ADD W5, #0x3, W4
019528  22DB95     MOV #0x2DB9, W5
01952A  428204     ADD W5, W4, W4
01952C  784294     MOV.B [W4], W5
01952E  B3C204     MOV.B #0x20, W4
019530  72C204     IOR.B W5, W4, W4
019532  22DB95     MOV #0x2DB9, W5
019534  428286     ADD W5, W6, W5
019536  784A84     MOV.B W4, [W5]
23720:                     if (MixedMode)
019538  809745     MOV StatFlgs, W5
01953A  208004     MOV #0x800, W4
01953C  628204     AND W5, W4, W4
01953E  520FE0     SUB W4, #0x0, [W15]
019540  32000C     BRA Z, 0x1955A
23721:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x40;
019542  78021E     MOV [W14], W4
019544  420363     ADD W4, #0x3, W6
019546  78029E     MOV [W14], W5
019548  428263     ADD W5, #0x3, W4
01954A  22DB95     MOV #0x2DB9, W5
01954C  428204     ADD W5, W4, W4
01954E  784294     MOV.B [W4], W5
019550  B3C404     MOV.B #0x40, W4
019552  72C204     IOR.B W5, W4, W4
019554  22DB95     MOV #0x2DB9, W5
019556  428286     ADD W5, W6, W5
019558  784A84     MOV.B W4, [W5]
23722:                     if (StrongModePID)
01955A  809745     MOV StatFlgs, W5
01955C  220004     MOV #0x2000, W4
01955E  628204     AND W5, W4, W4
019560  520FE0     SUB W4, #0x0, [W15]
019562  32000C     BRA Z, 0x1957C
23723:                         ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x80;
019564  78021E     MOV [W14], W4
019566  420363     ADD W4, #0x3, W6
019568  78029E     MOV [W14], W5
01956A  428263     ADD W5, #0x3, W4
01956C  22DB95     MOV #0x2DB9, W5
01956E  428204     ADD W5, W4, W4
019570  784294     MOV.B [W4], W5
019572  B3C804     MOV.B #0x80, W4
019574  72C204     IOR.B W5, W4, W4
019576  22DB95     MOV #0x2DB9, W5
019578  428286     ADD W5, W6, W5
01957A  784A84     MOV.B W4, [W5]
23724:                     if (SlowStart)
01957C  809765     MOV StatFlgs2, W5
01957E  201004     MOV #0x100, W4
019580  628204     AND W5, W4, W4
019582  520FE0     SUB W4, #0x0, [W15]
019584  32000B     BRA Z, 0x1959C
23725:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x01;
019586  78031E     MOV [W14], W6
019588  4302E4     ADD W6, #0x4, W5
01958A  78031E     MOV [W14], W6
01958C  430264     ADD W6, #0x4, W4
01958E  22DB96     MOV #0x2DB9, W6
019590  430204     ADD W6, W4, W4
019592  784214     MOV.B [W4], W4
019594  A00404     BSET.B W4, #0
019596  22DB96     MOV #0x2DB9, W6
019598  430285     ADD W6, W5, W5
01959A  784A84     MOV.B W4, [W5]
23726:                     if (MixedModeSlowSpeedOff)
01959C  809765     MOV StatFlgs2, W5
01959E  204004     MOV #0x400, W4
0195A0  628204     AND W5, W4, W4
0195A2  520FE0     SUB W4, #0x0, [W15]
0195A4  32000B     BRA Z, 0x195BC
23727:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x02;
0195A6  78021E     MOV [W14], W4
0195A8  4202E4     ADD W4, #0x4, W5
0195AA  78031E     MOV [W14], W6
0195AC  430264     ADD W6, #0x4, W4
0195AE  22DB96     MOV #0x2DB9, W6
0195B0  430204     ADD W6, W4, W4
0195B2  784214     MOV.B [W4], W4
0195B4  A01404     BSET.B W4, #1
0195B6  22DB96     MOV #0x2DB9, W6
0195B8  430285     ADD W6, W5, W5
0195BA  784A84     MOV.B W4, [W5]
23728:                     if (MixedMode2)
0195BC  809765     MOV StatFlgs2, W5
0195BE  208004     MOV #0x800, W4
0195C0  628204     AND W5, W4, W4
0195C2  520FE0     SUB W4, #0x0, [W15]
0195C4  32000B     BRA Z, 0x195DC
23729:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x04;
0195C6  78021E     MOV [W14], W4
0195C8  4202E4     ADD W4, #0x4, W5
0195CA  78031E     MOV [W14], W6
0195CC  430264     ADD W6, #0x4, W4
0195CE  22DB96     MOV #0x2DB9, W6
0195D0  430204     ADD W6, W4, W4
0195D2  784214     MOV.B [W4], W4
0195D4  A02404     BSET.B W4, #2
0195D6  22DB96     MOV #0x2DB9, W6
0195D8  430285     ADD W6, W5, W5
0195DA  784A84     MOV.B W4, [W5]
23730:                     if (PWM_Mode)
0195DC  809765     MOV StatFlgs2, W5
0195DE  210004     MOV #0x1000, W4
0195E0  628204     AND W5, W4, W4
0195E2  520FE0     SUB W4, #0x0, [W15]
0195E4  32000B     BRA Z, 0x195FC
23731:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x08;
0195E6  78021E     MOV [W14], W4
0195E8  4202E4     ADD W4, #0x4, W5
0195EA  78031E     MOV [W14], W6
0195EC  430264     ADD W6, #0x4, W4
0195EE  22DB96     MOV #0x2DB9, W6
0195F0  430204     ADD W6, W4, W4
0195F2  784214     MOV.B [W4], W4
0195F4  A03404     BSET.B W4, #3
0195F6  22DB96     MOV #0x2DB9, W6
0195F8  430285     ADD W6, W5, W5
0195FA  784A84     MOV.B W4, [W5]
23732:                     if (PWM_Mode_ZeroThrottle)
0195FC  809765     MOV StatFlgs2, W5
0195FE  220004     MOV #0x2000, W4
019600  628204     AND W5, W4, W4
019602  520FE0     SUB W4, #0x0, [W15]
019604  32000B     BRA Z, 0x1961C
23733:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x10;
019606  78021E     MOV [W14], W4
019608  4202E4     ADD W4, #0x4, W5
01960A  78031E     MOV [W14], W6
01960C  430264     ADD W6, #0x4, W4
01960E  22DB96     MOV #0x2DB9, W6
019610  430204     ADD W6, W4, W4
019612  784214     MOV.B [W4], W4
019614  A04404     BSET.B W4, #4
019616  22DB96     MOV #0x2DB9, W6
019618  430285     ADD W6, W5, W5
01961A  784A84     MOV.B W4, [W5]
23734:                     if (SIN_MIDDLE)
01961C  809765     MOV StatFlgs2, W5
01961E  240004     MOV #0x4000, W4
019620  628204     AND W5, W4, W4
019622  520FE0     SUB W4, #0x0, [W15]
019624  32000C     BRA Z, 0x1963E
23735:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x20;
019626  78021E     MOV [W14], W4
019628  420364     ADD W4, #0x4, W6
01962A  78029E     MOV [W14], W5
01962C  428264     ADD W5, #0x4, W4
01962E  22DB95     MOV #0x2DB9, W5
019630  428204     ADD W5, W4, W4
019632  784294     MOV.B [W4], W5
019634  B3C204     MOV.B #0x20, W4
019636  72C204     IOR.B W5, W4, W4
019638  22DB95     MOV #0x2DB9, W5
01963A  428286     ADD W5, W6, W5
01963C  784A84     MOV.B W4, [W5]
23736:                     if (LightOn)
01963E  809775     MOV StatFlgs3, W5
019640  202004     MOV #0x200, W4
019642  628204     AND W5, W4, W4
019644  520FE0     SUB W4, #0x0, [W15]
019646  32000C     BRA Z, 0x19660
23737:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x40;
019648  78021E     MOV [W14], W4
01964A  420364     ADD W4, #0x4, W6
01964C  78029E     MOV [W14], W5
01964E  428264     ADD W5, #0x4, W4
019650  22DB95     MOV #0x2DB9, W5
019652  428204     ADD W5, W4, W4
019654  784294     MOV.B [W4], W5
019656  B3C404     MOV.B #0x40, W4
019658  72C204     IOR.B W5, W4, W4
01965A  22DB95     MOV #0x2DB9, W5
01965C  428286     ADD W5, W6, W5
01965E  784A84     MOV.B W4, [W5]
23738:                     if (CurrentControlOnly)
019660  809775     MOV StatFlgs3, W5
019662  204004     MOV #0x400, W4
019664  628204     AND W5, W4, W4
019666  520FE0     SUB W4, #0x0, [W15]
019668  32000C     BRA Z, 0x19682
23739:                         ProfileMass[4+Prf]=ProfileMass[4+Prf]|0x80;
01966A  78021E     MOV [W14], W4
01966C  420364     ADD W4, #0x4, W6
01966E  78029E     MOV [W14], W5
019670  428264     ADD W5, #0x4, W4
019672  22DB95     MOV #0x2DB9, W5
019674  428204     ADD W5, W4, W4
019676  784294     MOV.B [W4], W5
019678  B3C804     MOV.B #0x80, W4
01967A  72C204     IOR.B W5, W4, W4
01967C  22DB95     MOV #0x2DB9, W5
01967E  428286     ADD W5, W6, W5
019680  784A84     MOV.B W4, [W5]
23740:             
23741:                     
23742:                     ProfileMass[5+Prf]=CurrUstWork;
019682  78031E     MOV [W14], W6
019684  4302E5     ADD W6, #0x5, W5
019686  81F4E4     MOV CurrUstWork, W4
019688  784204     MOV.B W4, W4
01968A  22DB96     MOV #0x2DB9, W6
01968C  430285     ADD W6, W5, W5
01968E  784A84     MOV.B W4, [W5]
23743:                     ProfileMass[6+Prf]=CurrUstWork>>8;
019690  78021E     MOV [W14], W4
019692  4202E6     ADD W4, #0x6, W5
019694  81F4E4     MOV CurrUstWork, W4
019696  DEA248     ASR W4, #8, W4
019698  784204     MOV.B W4, W4
01969A  22DB96     MOV #0x2DB9, W6
01969C  430285     ADD W6, W5, W5
01969E  784A84     MOV.B W4, [W5]
23744:                     ProfileMass[7+Prf]=CurrLimitWork;
0196A0  78031E     MOV [W14], W6
0196A2  4302E7     ADD W6, #0x7, W5
0196A4  80C1A4     MOV CurrLimitWork, W4
0196A6  784204     MOV.B W4, W4
0196A8  22DB96     MOV #0x2DB9, W6
0196AA  430285     ADD W6, W5, W5
0196AC  784A84     MOV.B W4, [W5]
23745:                     ProfileMass[8+Prf]=CurrLimitWork>>8;
0196AE  78021E     MOV [W14], W4
0196B0  4202E8     ADD W4, #0x8, W5
0196B2  80C1A4     MOV CurrLimitWork, W4
0196B4  DE2248     LSR W4, #8, W4
0196B6  784204     MOV.B W4, W4
0196B8  22DB96     MOV #0x2DB9, W6
0196BA  430285     ADD W6, W5, W5
0196BC  784A84     MOV.B W4, [W5]
23746:                     ProfileMass[9+Prf]=PhasePERMASS;
0196BE  78031E     MOV [W14], W6
0196C0  4302E9     ADD W6, #0x9, W5
0196C2  2183A4     MOV #0x183A, W4
0196C4  784214     MOV.B [W4], W4
0196C6  22DB96     MOV #0x2DB9, W6
0196C8  430285     ADD W6, W5, W5
0196CA  784A84     MOV.B W4, [W5]
23747:                     ProfileMass[10+Prf]=PhasePERMASS_SHFT;
0196CC  78021E     MOV [W14], W4
0196CE  4202EA     ADD W4, #0xA, W5
0196D0  2183B4     MOV #0x183B, W4
0196D2  784214     MOV.B [W4], W4
0196D4  22DB96     MOV #0x2DB9, W6
0196D6  430285     ADD W6, W5, W5
0196D8  784A84     MOV.B W4, [W5]
23748:                     ProfileMass[11+Prf]=MAX_PWM_MEM;
0196DA  78031E     MOV [W14], W6
0196DC  4302EB     ADD W6, #0xB, W5
0196DE  809984     MOV MAX_PWM_MEM, W4
0196E0  784204     MOV.B W4, W4
0196E2  22DB96     MOV #0x2DB9, W6
0196E4  430285     ADD W6, W5, W5
0196E6  784A84     MOV.B W4, [W5]
23749:                     ProfileMass[12+Prf]=MaxSpd;
0196E8  78021E     MOV [W14], W4
0196EA  4202EC     ADD W4, #0xC, W5
0196EC  230C54     MOV #0x30C5, W4
0196EE  784214     MOV.B [W4], W4
0196F0  22DB96     MOV #0x2DB9, W6
0196F2  430285     ADD W6, W5, W5
0196F4  784A84     MOV.B W4, [W5]
23750:                     ProfileMass[13+Prf]=But1Func;
0196F6  78031E     MOV [W14], W6
0196F8  4302ED     ADD W6, #0xD, W5
0196FA  2401C4     MOV #0x401C, W4
0196FC  784214     MOV.B [W4], W4
0196FE  22DB96     MOV #0x2DB9, W6
019700  430285     ADD W6, W5, W5
019702  784A84     MOV.B W4, [W5]
23751:                     ProfileMass[14+Prf]=But2Func;
019704  78021E     MOV [W14], W4
019706  4202EE     ADD W4, #0xE, W5
019708  2401D4     MOV #0x401D, W4
01970A  784214     MOV.B [W4], W4
01970C  22DB96     MOV #0x2DB9, W6
01970E  430285     ADD W6, W5, W5
019710  784A84     MOV.B W4, [W5]
23752:                     ProfileMass[15+Prf]=But3Func;
019712  78031E     MOV [W14], W6
019714  4302EF     ADD W6, #0xF, W5
019716  2401E4     MOV #0x401E, W4
019718  784214     MOV.B [W4], W4
01971A  22DB96     MOV #0x2DB9, W6
01971C  430285     ADD W6, W5, W5
01971E  784A84     MOV.B W4, [W5]
23753:                     ProfileMass[16+Prf]=But4Func;
019720  78021E     MOV [W14], W4
019722  4202F0     ADD W4, #0x10, W5
019724  2401F4     MOV #0x401F, W4
019726  784214     MOV.B [W4], W4
019728  22DB96     MOV #0x2DB9, W6
01972A  430285     ADD W6, W5, W5
01972C  784A84     MOV.B W4, [W5]
23754:                     ProfileMass[17+Prf]=ThrottleTmpChngMem;
01972E  78031E     MOV [W14], W6
019730  4302F1     ADD W6, #0x11, W5
019732  2329A4     MOV #0x329A, W4
019734  784214     MOV.B [W4], W4
019736  22DB96     MOV #0x2DB9, W6
019738  430285     ADD W6, W5, W5
01973A  784A84     MOV.B W4, [W5]
23755:                     ProfileMass[18+Prf]=SlowStrtSpd;
01973C  78021E     MOV [W14], W4
01973E  4202F2     ADD W4, #0x12, W5
019740  240D04     MOV #0x40D0, W4
019742  784214     MOV.B [W4], W4
019744  22DB96     MOV #0x2DB9, W6
019746  430285     ADD W6, W5, W5
019748  784A84     MOV.B W4, [W5]
23756:                     Tmp=(int)(Ki_PWM_Mode*10000);
01974A  8182A4     MOV Ki_PWM_Mode, W4
01974C  8182B5     MOV 0x3056, W5
01974E  240002     MOV #0x4000, W2
019750  2461C3     MOV #0x461C, W3
019752  BE0004     MOV.D W4, W0
019754  022630     CALL ___mulsf3
019756  000000     NOP
019758  BE0200     MOV.D W0, W4
01975A  BE0004     MOV.D W4, W0
01975C  022504     CALL ___fixsfsi
01975E  000000     NOP
019760  BE0200     MOV.D W0, W4
019762  780204     MOV W4, W4
019764  980714     MOV W4, [W14+2]
23757:                     ProfileMass[19+Prf]=Tmp;
019766  78031E     MOV [W14], W6
019768  4302F3     ADD W6, #0x13, W5
01976A  90021E     MOV [W14+2], W4
01976C  784204     MOV.B W4, W4
01976E  22DB96     MOV #0x2DB9, W6
019770  430285     ADD W6, W5, W5
019772  784A84     MOV.B W4, [W5]
23758:                     ProfileMass[20+Prf]=Tmp>>8;
019774  78021E     MOV [W14], W4
019776  4202F4     ADD W4, #0x14, W5
019778  90021E     MOV [W14+2], W4
01977A  DE2248     LSR W4, #8, W4
01977C  784204     MOV.B W4, W4
01977E  22DB96     MOV #0x2DB9, W6
019780  430285     ADD W6, W5, W5
019782  784A84     MOV.B W4, [W5]
23759:             
23760:                     Tmp=(int)(Kp_PWM_Mode*100);
019784  81B764     MOV Kp_PWM_Mode, W4
019786  81B775     MOV 0x36EE, W5
019788  200002     MOV #0x0, W2
01978A  242C83     MOV #0x42C8, W3
01978C  BE0004     MOV.D W4, W0
01978E  022630     CALL ___mulsf3
019790  000000     NOP
019792  BE0200     MOV.D W0, W4
019794  BE0004     MOV.D W4, W0
019796  022504     CALL ___fixsfsi
019798  000000     NOP
01979A  BE0200     MOV.D W0, W4
01979C  780204     MOV W4, W4
01979E  980714     MOV W4, [W14+2]
23761:                     ProfileMass[21+Prf]=Tmp;
0197A0  78031E     MOV [W14], W6
0197A2  4302F5     ADD W6, #0x15, W5
0197A4  90021E     MOV [W14+2], W4
0197A6  784204     MOV.B W4, W4
0197A8  22DB96     MOV #0x2DB9, W6
0197AA  430285     ADD W6, W5, W5
0197AC  784A84     MOV.B W4, [W5]
23762:                     ProfileMass[22+Prf]=Tmp>>8;
0197AE  78021E     MOV [W14], W4
0197B0  4202F6     ADD W4, #0x16, W5
0197B2  90021E     MOV [W14+2], W4
0197B4  DE2248     LSR W4, #8, W4
0197B6  784204     MOV.B W4, W4
0197B8  22DB96     MOV #0x2DB9, W6
0197BA  430285     ADD W6, W5, W5
0197BC  784A84     MOV.B W4, [W5]
23763:                     Tmp=CurrPhaseLimitWork;
0197BE  81F4D4     MOV CurrPhaseLimitWork, W4
0197C0  980714     MOV W4, [W14+2]
23764:                     ProfileMass[23+Prf]=Tmp;
0197C2  78031E     MOV [W14], W6
0197C4  4302F7     ADD W6, #0x17, W5
0197C6  90021E     MOV [W14+2], W4
0197C8  784204     MOV.B W4, W4
0197CA  22DB96     MOV #0x2DB9, W6
0197CC  430285     ADD W6, W5, W5
0197CE  784A84     MOV.B W4, [W5]
23765:                     ProfileMass[24+Prf]=Tmp>>8;
0197D0  78021E     MOV [W14], W4
0197D2  4202F8     ADD W4, #0x18, W5
0197D4  90021E     MOV [W14+2], W4
0197D6  DE2248     LSR W4, #8, W4
0197D8  784204     MOV.B W4, W4
0197DA  22DB96     MOV #0x2DB9, W6
0197DC  430285     ADD W6, W5, W5
0197DE  784A84     MOV.B W4, [W5]
23766:             
23767:                     if (CW_CCW_AnyProfile)
0197E0  809774     MOV StatFlgs3, W4
0197E2  620261     AND W4, #0x1, W4
0197E4  520FE0     SUB W4, #0x0, [W15]
0197E6  320015     BRA Z, 0x19812
23768:                         {
23769:                         ProfileMass[25+Prf]=HallDelay1MaxSPD_F;
0197E8  78031E     MOV [W14], W6
0197EA  4302F9     ADD W6, #0x19, W5
0197EC  237E34     MOV #0x37E3, W4
0197EE  784214     MOV.B [W4], W4
0197F0  22DB96     MOV #0x2DB9, W6
0197F2  430285     ADD W6, W5, W5
0197F4  784A84     MOV.B W4, [W5]
23770:                         ProfileMass[26+Prf]=HallDelay1MaxSPD_B;
0197F6  78021E     MOV [W14], W4
0197F8  4202FA     ADD W4, #0x1A, W5
0197FA  237E44     MOV #0x37E4, W4
0197FC  784214     MOV.B [W4], W4
0197FE  22DB96     MOV #0x2DB9, W6
019800  430285     ADD W6, W5, W5
019802  784A84     MOV.B W4, [W5]
23771:                         ProfileMass[27+Prf]=HallDelayMaxSPD;
019804  78031E     MOV [W14], W6
019806  4302FB     ADD W6, #0x1B, W5
019808  237E54     MOV #0x37E5, W4
01980A  784214     MOV.B [W4], W4
01980C  22DB96     MOV #0x2DB9, W6
01980E  430285     ADD W6, W5, W5
019810  784A84     MOV.B W4, [W5]
23772:                         }
23773:                     
23774:                     
23775:                     Tmp=(int)KpWheelingMem;
019812  809D44     MOV KpWheelingMem, W4
019814  809D55     MOV 0x13AA, W5
019816  BE0004     MOV.D W4, W0
019818  022504     CALL ___fixsfsi
01981A  000000     NOP
01981C  BE0200     MOV.D W0, W4
01981E  780204     MOV W4, W4
019820  980714     MOV W4, [W14+2]
23776:                     ProfileMass[28+Prf]=Tmp;
019822  78021E     MOV [W14], W4
019824  4202FC     ADD W4, #0x1C, W5
019826  90021E     MOV [W14+2], W4
019828  784204     MOV.B W4, W4
01982A  22DB96     MOV #0x2DB9, W6
01982C  430285     ADD W6, W5, W5
01982E  784A84     MOV.B W4, [W5]
23777:                     ProfileMass[29+Prf]=Tmp>>8;
019830  78031E     MOV [W14], W6
019832  4302FD     ADD W6, #0x1D, W5
019834  90021E     MOV [W14+2], W4
019836  DE2248     LSR W4, #8, W4
019838  784204     MOV.B W4, W4
01983A  22DB96     MOV #0x2DB9, W6
01983C  430285     ADD W6, W5, W5
01983E  784A84     MOV.B W4, [W5]
23778:                     
23779:                     
23780:                     Tmp=(int)(KiWheelingMem*1000);
019840  809B64     MOV KiWheelingMem, W4
019842  809B75     MOV 0x136E, W5
019844  200002     MOV #0x0, W2
019846  2447A3     MOV #0x447A, W3
019848  BE0004     MOV.D W4, W0
01984A  022630     CALL ___mulsf3
01984C  000000     NOP
01984E  BE0200     MOV.D W0, W4
019850  BE0004     MOV.D W4, W0
019852  022504     CALL ___fixsfsi
019854  000000     NOP
019856  BE0200     MOV.D W0, W4
019858  780204     MOV W4, W4
01985A  980714     MOV W4, [W14+2]
23781:                     ProfileMass[30+Prf]=Tmp;
01985C  78021E     MOV [W14], W4
01985E  4202FE     ADD W4, #0x1E, W5
019860  90021E     MOV [W14+2], W4
019862  784204     MOV.B W4, W4
019864  22DB96     MOV #0x2DB9, W6
019866  430285     ADD W6, W5, W5
019868  784A84     MOV.B W4, [W5]
23782:                     ProfileMass[31+Prf]=Tmp>>8;
01986A  78031E     MOV [W14], W6
01986C  4302FF     ADD W6, #0x1F, W5
01986E  90021E     MOV [W14+2], W4
019870  DE2248     LSR W4, #8, W4
019872  784204     MOV.B W4, W4
019874  22DB96     MOV #0x2DB9, W6
019876  430285     ADD W6, W5, W5
019878  784A84     MOV.B W4, [W5]
23783:                           
23784:                     Tmp=(int)(KdNoMan/10);
01987A  809C24     MOV KdNoMan, W4
01987C  809C35     MOV 0x1386, W5
01987E  200002     MOV #0x0, W2
019880  241203     MOV #0x4120, W3
019882  BE0004     MOV.D W4, W0
019884  02245A     CALL ___divsf3
019886  000000     NOP
019888  BE0200     MOV.D W0, W4
01988A  BE0004     MOV.D W4, W0
01988C  022504     CALL ___fixsfsi
01988E  000000     NOP
019890  BE0200     MOV.D W0, W4
019892  780204     MOV W4, W4
019894  980714     MOV W4, [W14+2]
23785:                     ProfileMass[32+Prf]=Tmp;
019896  200204     MOV #0x20, W4
019898  42029E     ADD W4, [W14], W5
01989A  90021E     MOV [W14+2], W4
01989C  784204     MOV.B W4, W4
01989E  22DB96     MOV #0x2DB9, W6
0198A0  430285     ADD W6, W5, W5
0198A2  784A84     MOV.B W4, [W5]
23786:                     ProfileMass[33+Prf]=Tmp>>8;
0198A4  200216     MOV #0x21, W6
0198A6  43029E     ADD W6, [W14], W5
0198A8  90021E     MOV [W14+2], W4
0198AA  DE2248     LSR W4, #8, W4
0198AC  784204     MOV.B W4, W4
0198AE  22DB96     MOV #0x2DB9, W6
0198B0  430285     ADD W6, W5, W5
0198B2  784A84     MOV.B W4, [W5]
23787:                     ProfileMass[34+Prf]=CurrentMaxCurrentOnly;
0198B4  200224     MOV #0x22, W4
0198B6  42029E     ADD W4, [W14], W5
0198B8  212F24     MOV #0x12F2, W4
0198BA  784214     MOV.B [W4], W4
0198BC  22DB96     MOV #0x2DB9, W6
0198BE  430285     ADD W6, W5, W5
0198C0  784A84     MOV.B W4, [W5]
23788:             
23789:                     Tmp=(int)(Ki_PWM_ModeOff*10000);
0198C2  8182C4     MOV Ki_PWM_ModeOff, W4
0198C4  8182D5     MOV 0x305A, W5
0198C6  240002     MOV #0x4000, W2
0198C8  2461C3     MOV #0x461C, W3
0198CA  BE0004     MOV.D W4, W0
0198CC  022630     CALL ___mulsf3
0198CE  000000     NOP
0198D0  BE0200     MOV.D W0, W4
0198D2  BE0004     MOV.D W4, W0
0198D4  022504     CALL ___fixsfsi
0198D6  000000     NOP
0198D8  BE0200     MOV.D W0, W4
0198DA  780204     MOV W4, W4
0198DC  980714     MOV W4, [W14+2]
23790:                     ProfileMass[35+Prf]=Tmp;
0198DE  200236     MOV #0x23, W6
0198E0  43029E     ADD W6, [W14], W5
0198E2  90021E     MOV [W14+2], W4
0198E4  784204     MOV.B W4, W4
0198E6  22DB96     MOV #0x2DB9, W6
0198E8  430285     ADD W6, W5, W5
0198EA  784A84     MOV.B W4, [W5]
23791:                     ProfileMass[36+Prf]=Tmp>>8;
0198EC  200244     MOV #0x24, W4
0198EE  42029E     ADD W4, [W14], W5
0198F0  90021E     MOV [W14+2], W4
0198F2  DE2248     LSR W4, #8, W4
0198F4  784204     MOV.B W4, W4
0198F6  22DB96     MOV #0x2DB9, W6
0198F8  430285     ADD W6, W5, W5
0198FA  784A84     MOV.B W4, [W5]
23792:             
23793:                     ProfileMass[37+Prf]=StrongModeSpdFilterOffMem;
0198FC  200256     MOV #0x25, W6
0198FE  43029E     ADD W6, [W14], W5
019900  22ADE4     MOV #0x2ADE, W4
019902  784214     MOV.B [W4], W4
019904  22DB96     MOV #0x2DB9, W6
019906  430285     ADD W6, W5, W5
019908  784A84     MOV.B W4, [W5]
23794:                     
23795:             //---------------------------------------------------------        
23796:                     
23797:                     if (KeyLightStop)
01990A  809784     MOV StatFlgs4, W4
01990C  620261     AND W4, #0x1, W4
01990E  520FE0     SUB W4, #0x0, [W15]
019910  32000B     BRA Z, 0x19928
23798:                         ProfileMass[38+Prf]=ProfileMass[38+Prf]|0x01;
019912  200264     MOV #0x26, W4
019914  42029E     ADD W4, [W14], W5
019916  200266     MOV #0x26, W6
019918  43021E     ADD W6, [W14], W4
01991A  22DB96     MOV #0x2DB9, W6
01991C  430204     ADD W6, W4, W4
01991E  784214     MOV.B [W4], W4
019920  A00404     BSET.B W4, #0
019922  22DB96     MOV #0x2DB9, W6
019924  430285     ADD W6, W5, W5
019926  784A84     MOV.B W4, [W5]
23799:                     if (KeyLightStopGabarit)
019928  809784     MOV StatFlgs4, W4
01992A  620262     AND W4, #0x2, W4
01992C  520FE0     SUB W4, #0x0, [W15]
01992E  32000B     BRA Z, 0x19946
23800:                         ProfileMass[38+Prf]=ProfileMass[38+Prf]|0x02;
019930  200264     MOV #0x26, W4
019932  42029E     ADD W4, [W14], W5
019934  200266     MOV #0x26, W6
019936  43021E     ADD W6, [W14], W4
019938  22DB96     MOV #0x2DB9, W6
01993A  430204     ADD W6, W4, W4
01993C  784214     MOV.B [W4], W4
01993E  A01404     BSET.B W4, #1
019940  22DB96     MOV #0x2DB9, W6
019942  430285     ADD W6, W5, W5
019944  784A84     MOV.B W4, [W5]
23801:             
23802:             //---------------------------------------------------------        
23803:                     
23804:                     
23805:                 }
23806:             
23807:             }
019946  FA8000     ULNK
019948  060000     RETURN
23808:             
23809:             void MassToOptionsProfile(void)
23810:             {
01994A  FA0006     LNK #0x6
01994C  BE9F88     MOV.D W8, [W15++]
23811:                 unsigned int Prf=Profile-1;
01994E  237E24     MOV #0x37E2, W4
019950  784214     MOV.B [W4], W4
019952  FB8204     ZE W4, W4
019954  E90204     DEC W4, W4
019956  780F04     MOV W4, [W14]
23812:                 unsigned int Tm;
23813:                 unsigned char SpdCntrTmp=SpeedControl;
019958  809754     MOV StatFlgs1, W4
01995A  D10204     LSR W4, W4
01995C  624261     AND.B W4, #0x1, W4
01995E  984724     MOV.B W4, [W14+2]
23814:             
23815:             
23816:                 
23817:                 
23818:                 if (Prf==0)
019960  78021E     MOV [W14], W4
019962  520FE0     SUB W4, #0x0, [W15]
019964  3A0344     BRA NZ, 0x19FEE
23819:                 {
23820:                     if (CW_CCW_AnyProfile)
019966  809774     MOV StatFlgs3, W4
019968  620261     AND W4, #0x1, W4
01996A  520FE0     SUB W4, #0x0, [W15]
01996C  32000C     BRA Z, 0x19986
23821:                     {
23822:                     HallDelayMem1_F=ProfileMass[1+Prf];
01996E  E8021E     INC [W14], W4
019970  22DB95     MOV #0x2DB9, W5
019972  428204     ADD W5, W4, W4
019974  784214     MOV.B [W4], W4
019976  214565     MOV #0x1456, W5
019978  784A84     MOV.B W4, [W5]
23823:                     HallDelayMem1_B=ProfileMass[2+Prf];
01997A  E8821E     INC2 [W14], W4
01997C  22DB95     MOV #0x2DB9, W5
01997E  428204     ADD W5, W4, W4
019980  784214     MOV.B [W4], W4
019982  214575     MOV #0x1457, W5
019984  784A84     MOV.B W4, [W5]
23824:                     }
23825:                     
23826:                     
23827:                     
23828:                     
23829:                     
23830:                     
23831:                     
23832:                     
23833:                     
23834:                     
23835:                     //3  AND  4  STATUS
23836:                      StrongModeMem=0;
019986  809764     MOV StatFlgs2, W4
019988  A12004     BCLR W4, #2
01998A  889764     MOV W4, StatFlgs2
23837:                     if (ProfileMass[3+Prf]&0x01)
01998C  78029E     MOV [W14], W5
01998E  428263     ADD W5, #0x3, W4
019990  22DB95     MOV #0x2DB9, W5
019992  428204     ADD W5, W4, W4
019994  784214     MOV.B [W4], W4
019996  FB8204     ZE W4, W4
019998  620261     AND W4, #0x1, W4
01999A  784204     MOV.B W4, W4
01999C  524FE0     SUB.B W4, #0x0, [W15]
01999E  320003     BRA Z, 0x199A6
23838:                       StrongModeMem=1;
0199A0  809764     MOV StatFlgs2, W4
0199A2  A02004     BSET W4, #2
0199A4  889764     MOV W4, StatFlgs2
23839:             
23840:                     if (ProfileMass[3+Prf]&0x02)
0199A6  78029E     MOV [W14], W5
0199A8  428263     ADD W5, #0x3, W4
0199AA  22DB95     MOV #0x2DB9, W5
0199AC  428204     ADD W5, W4, W4
0199AE  784214     MOV.B [W4], W4
0199B0  FB8204     ZE W4, W4
0199B2  620262     AND W4, #0x2, W4
0199B4  520FE0     SUB W4, #0x0, [W15]
0199B6  320004     BRA Z, 0x199C0
23841:                       VectorMem=1;
0199B8  809754     MOV StatFlgs1, W4
0199BA  A0A004     BSET W4, #10
0199BC  889754     MOV W4, StatFlgs1
0199BE  370003     BRA 0x199C6
23842:                     else
23843:                       VectorMem=0;
0199C0  809754     MOV StatFlgs1, W4
0199C2  A1A004     BCLR W4, #10
0199C4  889754     MOV W4, StatFlgs1
23844:                     if (ProfileMass[3+Prf]&0x04)
0199C6  78029E     MOV [W14], W5
0199C8  428263     ADD W5, #0x3, W4
0199CA  22DB95     MOV #0x2DB9, W5
0199CC  428204     ADD W5, W4, W4
0199CE  784214     MOV.B [W4], W4
0199D0  FB8204     ZE W4, W4
0199D2  620264     AND W4, #0x4, W4
0199D4  520FE0     SUB W4, #0x0, [W15]
0199D6  320004     BRA Z, 0x199E0
23845:                       TrapezoidaRAM1=1;
0199D8  809754     MOV StatFlgs1, W4
0199DA  A0C004     BSET W4, #12
0199DC  889754     MOV W4, StatFlgs1
0199DE  370003     BRA 0x199E6
23846:                     else
23847:                       TrapezoidaRAM1=0;
0199E0  809754     MOV StatFlgs1, W4
0199E2  A1C004     BCLR W4, #12
0199E4  889754     MOV W4, StatFlgs1
23848:                     if (ProfileMass[3+Prf]&0x08)
0199E6  78029E     MOV [W14], W5
0199E8  428263     ADD W5, #0x3, W4
0199EA  22DB95     MOV #0x2DB9, W5
0199EC  428204     ADD W5, W4, W4
0199EE  784214     MOV.B [W4], W4
0199F0  FB8204     ZE W4, W4
0199F2  620268     AND W4, #0x8, W4
0199F4  520FE0     SUB W4, #0x0, [W15]
0199F6  320004     BRA Z, 0x19A00
23849:                       PWM32Bits=1;
0199F8  809754     MOV StatFlgs1, W4
0199FA  A0F004     BSET W4, #15
0199FC  889754     MOV W4, StatFlgs1
0199FE  370003     BRA 0x19A06
23850:                     else
23851:                       PWM32Bits=0;
019A00  809754     MOV StatFlgs1, W4
019A02  A1F004     BCLR W4, #15
019A04  889754     MOV W4, StatFlgs1
23852:                     if (ProfileMass[3+Prf]&0x10)
019A06  78029E     MOV [W14], W5
019A08  428263     ADD W5, #0x3, W4
019A0A  22DB95     MOV #0x2DB9, W5
019A0C  428204     ADD W5, W4, W4
019A0E  784214     MOV.B [W4], W4
019A10  FB8204     ZE W4, W4
019A12  620270     AND W4, #0x10, W4
019A14  520FE0     SUB W4, #0x0, [W15]
019A16  320009     BRA Z, 0x19A2A
23853:                     {
23854:                         if (!Sensorless)
019A18  809755     MOV StatFlgs1, W5
019A1A  200204     MOV #0x20, W4
019A1C  628204     AND W5, W4, W4
019A1E  520FE0     SUB W4, #0x0, [W15]
019A20  3A0007     BRA NZ, 0x19A30
23855:                         SpeedControl=1;
019A22  809754     MOV StatFlgs1, W4
019A24  A01004     BSET W4, #1
019A26  889754     MOV W4, StatFlgs1
019A28  370003     BRA 0x19A30
23856:                     }
23857:                     else
23858:                       SpeedControl=0;
019A2A  809754     MOV StatFlgs1, W4
019A2C  A11004     BCLR W4, #1
019A2E  889754     MOV W4, StatFlgs1
23859:                     if (ProfileMass[3+Prf]&0x20)
019A30  78029E     MOV [W14], W5
019A32  428263     ADD W5, #0x3, W4
019A34  22DB95     MOV #0x2DB9, W5
019A36  428204     ADD W5, W4, W4
019A38  784214     MOV.B [W4], W4
019A3A  FB8284     ZE W4, W5
019A3C  200204     MOV #0x20, W4
019A3E  628204     AND W5, W4, W4
019A40  520FE0     SUB W4, #0x0, [W15]
019A42  320004     BRA Z, 0x19A4C
23860:                      AutoPID=1;
019A44  809744     MOV StatFlgs, W4
019A46  A06004     BSET W4, #6
019A48  889744     MOV W4, StatFlgs
019A4A  370003     BRA 0x19A52
23861:                     else
23862:                      AutoPID=0;
019A4C  809744     MOV StatFlgs, W4
019A4E  A16004     BCLR W4, #6
019A50  889744     MOV W4, StatFlgs
23863:                      
23864:                     if (ProfileMass[3+Prf]&0x40)
019A52  78029E     MOV [W14], W5
019A54  428263     ADD W5, #0x3, W4
019A56  22DB95     MOV #0x2DB9, W5
019A58  428204     ADD W5, W4, W4
019A5A  784214     MOV.B [W4], W4
019A5C  FB8284     ZE W4, W5
019A5E  200404     MOV #0x40, W4
019A60  628204     AND W5, W4, W4
019A62  520FE0     SUB W4, #0x0, [W15]
019A64  320004     BRA Z, 0x19A6E
23865:                         MixedMode=1;
019A66  809744     MOV StatFlgs, W4
019A68  A0B004     BSET W4, #11
019A6A  889744     MOV W4, StatFlgs
019A6C  370003     BRA 0x19A74
23866:                     else
23867:                         MixedMode=0;
019A6E  809744     MOV StatFlgs, W4
019A70  A1B004     BCLR W4, #11
019A72  889744     MOV W4, StatFlgs
23868:                     if (ProfileMass[3+Prf]&0x80)
019A74  78029E     MOV [W14], W5
019A76  428263     ADD W5, #0x3, W4
019A78  22DB95     MOV #0x2DB9, W5
019A7A  428204     ADD W5, W4, W4
019A7C  784214     MOV.B [W4], W4
019A7E  524FE0     SUB.B W4, #0x0, [W15]
019A80  3D0004     BRA GE, 0x19A8A
23869:                         StrongModePID=1;
019A82  809744     MOV StatFlgs, W4
019A84  A0D004     BSET W4, #13
019A86  889744     MOV W4, StatFlgs
019A88  370003     BRA 0x19A90
23870:                     else
23871:                         StrongModePID=0;
019A8A  809744     MOV StatFlgs, W4
019A8C  A1D004     BCLR W4, #13
019A8E  889744     MOV W4, StatFlgs
23872:                     if (ProfileMass[4+Prf]&0x01)
019A90  78029E     MOV [W14], W5
019A92  428264     ADD W5, #0x4, W4
019A94  22DB95     MOV #0x2DB9, W5
019A96  428204     ADD W5, W4, W4
019A98  784214     MOV.B [W4], W4
019A9A  FB8204     ZE W4, W4
019A9C  620261     AND W4, #0x1, W4
019A9E  784204     MOV.B W4, W4
019AA0  524FE0     SUB.B W4, #0x0, [W15]
019AA2  320004     BRA Z, 0x19AAC
23873:                         SlowStart=1;
019AA4  809764     MOV StatFlgs2, W4
019AA6  A08004     BSET W4, #8
019AA8  889764     MOV W4, StatFlgs2
019AAA  370003     BRA 0x19AB2
23874:                     else
23875:                         SlowStart=0;
019AAC  809764     MOV StatFlgs2, W4
019AAE  A18004     BCLR W4, #8
019AB0  889764     MOV W4, StatFlgs2
23876:                     if (ProfileMass[4+Prf]&0x02)
019AB2  78029E     MOV [W14], W5
019AB4  428264     ADD W5, #0x4, W4
019AB6  22DB95     MOV #0x2DB9, W5
019AB8  428204     ADD W5, W4, W4
019ABA  784214     MOV.B [W4], W4
019ABC  FB8204     ZE W4, W4
019ABE  620262     AND W4, #0x2, W4
019AC0  520FE0     SUB W4, #0x0, [W15]
019AC2  320004     BRA Z, 0x19ACC
23877:                         MixedModeSlowSpeedOff=1;
019AC4  809764     MOV StatFlgs2, W4
019AC6  A0A004     BSET W4, #10
019AC8  889764     MOV W4, StatFlgs2
019ACA  370003     BRA 0x19AD2
23878:                     else
23879:                         MixedModeSlowSpeedOff=0;
019ACC  809764     MOV StatFlgs2, W4
019ACE  A1A004     BCLR W4, #10
019AD0  889764     MOV W4, StatFlgs2
23880:                     if (ProfileMass[4+Prf]&0x04)
019AD2  78029E     MOV [W14], W5
019AD4  428264     ADD W5, #0x4, W4
019AD6  22DB95     MOV #0x2DB9, W5
019AD8  428204     ADD W5, W4, W4
019ADA  784214     MOV.B [W4], W4
019ADC  FB8204     ZE W4, W4
019ADE  620264     AND W4, #0x4, W4
019AE0  520FE0     SUB W4, #0x0, [W15]
019AE2  320004     BRA Z, 0x19AEC
23881:                         MixedMode2=1;
019AE4  809764     MOV StatFlgs2, W4
019AE6  A0B004     BSET W4, #11
019AE8  889764     MOV W4, StatFlgs2
019AEA  370003     BRA 0x19AF2
23882:                     else
23883:                         MixedMode2=0;
019AEC  809764     MOV StatFlgs2, W4
019AEE  A1B004     BCLR W4, #11
019AF0  889764     MOV W4, StatFlgs2
23884:                     if (ProfileMass[4+Prf]&0x08)
019AF2  78029E     MOV [W14], W5
019AF4  428264     ADD W5, #0x4, W4
019AF6  22DB95     MOV #0x2DB9, W5
019AF8  428204     ADD W5, W4, W4
019AFA  784214     MOV.B [W4], W4
019AFC  FB8204     ZE W4, W4
019AFE  620268     AND W4, #0x8, W4
019B00  520FE0     SUB W4, #0x0, [W15]
019B02  320004     BRA Z, 0x19B0C
23885:                         PWM_Mode=1;
019B04  809764     MOV StatFlgs2, W4
019B06  A0C004     BSET W4, #12
019B08  889764     MOV W4, StatFlgs2
019B0A  370003     BRA 0x19B12
23886:                     else
23887:                         PWM_Mode=0;
019B0C  809764     MOV StatFlgs2, W4
019B0E  A1C004     BCLR W4, #12
019B10  889764     MOV W4, StatFlgs2
23888:                     if (ProfileMass[4+Prf]&0x10)
019B12  78029E     MOV [W14], W5
019B14  428264     ADD W5, #0x4, W4
019B16  22DB95     MOV #0x2DB9, W5
019B18  428204     ADD W5, W4, W4
019B1A  784214     MOV.B [W4], W4
019B1C  FB8204     ZE W4, W4
019B1E  620270     AND W4, #0x10, W4
019B20  520FE0     SUB W4, #0x0, [W15]
019B22  320004     BRA Z, 0x19B2C
23889:                         PWM_Mode_ZeroThrottle=1;
019B24  809764     MOV StatFlgs2, W4
019B26  A0D004     BSET W4, #13
019B28  889764     MOV W4, StatFlgs2
019B2A  370003     BRA 0x19B32
23890:                     else
23891:                         PWM_Mode_ZeroThrottle=0;
019B2C  809764     MOV StatFlgs2, W4
019B2E  A1D004     BCLR W4, #13
019B30  889764     MOV W4, StatFlgs2
23892:                     if (ProfileMass[4+Prf]&0x20)
019B32  78029E     MOV [W14], W5
019B34  428264     ADD W5, #0x4, W4
019B36  22DB95     MOV #0x2DB9, W5
019B38  428204     ADD W5, W4, W4
019B3A  784214     MOV.B [W4], W4
019B3C  FB8284     ZE W4, W5
019B3E  200204     MOV #0x20, W4
019B40  628204     AND W5, W4, W4
019B42  520FE0     SUB W4, #0x0, [W15]
019B44  320004     BRA Z, 0x19B4E
23893:                         SIN_MIDDLE=1;
019B46  809764     MOV StatFlgs2, W4
019B48  A0E004     BSET W4, #14
019B4A  889764     MOV W4, StatFlgs2
019B4C  370003     BRA 0x19B54
23894:                     else
23895:                         SIN_MIDDLE=0;
019B4E  809764     MOV StatFlgs2, W4
019B50  A1E004     BCLR W4, #14
019B52  889764     MOV W4, StatFlgs2
23896:                     if (ProfileMass[4+Prf]&0x40)
019B54  78029E     MOV [W14], W5
019B56  428264     ADD W5, #0x4, W4
019B58  22DB95     MOV #0x2DB9, W5
019B5A  428204     ADD W5, W4, W4
019B5C  784214     MOV.B [W4], W4
019B5E  FB8284     ZE W4, W5
019B60  200404     MOV #0x40, W4
019B62  628204     AND W5, W4, W4
019B64  520FE0     SUB W4, #0x0, [W15]
019B66  320004     BRA Z, 0x19B70
23897:                         LightOn=1;
019B68  809774     MOV StatFlgs3, W4
019B6A  A09004     BSET W4, #9
019B6C  889774     MOV W4, StatFlgs3
019B6E  370003     BRA 0x19B76
23898:                     else
23899:                         LightOn=0;
019B70  809774     MOV StatFlgs3, W4
019B72  A19004     BCLR W4, #9
019B74  889774     MOV W4, StatFlgs3
23900:                     if (ProfileMass[4+Prf]&0x80)
019B76  78029E     MOV [W14], W5
019B78  428264     ADD W5, #0x4, W4
019B7A  22DB95     MOV #0x2DB9, W5
019B7C  428204     ADD W5, W4, W4
019B7E  784214     MOV.B [W4], W4
019B80  524FE0     SUB.B W4, #0x0, [W15]
019B82  3D0004     BRA GE, 0x19B8C
23901:                         CurrentControlOnly=1;
019B84  809774     MOV StatFlgs3, W4
019B86  A0A004     BSET W4, #10
019B88  889774     MOV W4, StatFlgs3
019B8A  370003     BRA 0x19B92
23902:                     else
23903:                         CurrentControlOnly=0;
019B8C  809774     MOV StatFlgs3, W4
019B8E  A1A004     BCLR W4, #10
019B90  889774     MOV W4, StatFlgs3
23904:                         
23905:             
23906:                      
23907:                     
23908:                     Tm=ProfileMass[6+Prf];
019B92  78029E     MOV [W14], W5
019B94  428266     ADD W5, #0x6, W4
019B96  22DB95     MOV #0x2DB9, W5
019B98  428204     ADD W5, W4, W4
019B9A  784214     MOV.B [W4], W4
019B9C  FB8204     ZE W4, W4
019B9E  980724     MOV W4, [W14+4]
23909:                     Tm=Tm<<8;
019BA0  90022E     MOV [W14+4], W4
019BA2  DD2248     SL W4, #8, W4
019BA4  980724     MOV W4, [W14+4]
23910:                     Tm=Tm+ProfileMass[5+Prf];
019BA6  78029E     MOV [W14], W5
019BA8  428265     ADD W5, #0x5, W4
019BAA  22DB95     MOV #0x2DB9, W5
019BAC  428204     ADD W5, W4, W4
019BAE  784214     MOV.B [W4], W4
019BB0  FB8204     ZE W4, W4
019BB2  9002AE     MOV [W14+4], W5
019BB4  428204     ADD W5, W4, W4
019BB6  980724     MOV W4, [W14+4]
23911:                     CurrUstWork=Tm;
019BB8  90022E     MOV [W14+4], W4
019BBA  89F4E4     MOV W4, CurrUstWork
23912:                     
23913:                     Tm=ProfileMass[8+Prf];
019BBC  78029E     MOV [W14], W5
019BBE  428268     ADD W5, #0x8, W4
019BC0  22DB95     MOV #0x2DB9, W5
019BC2  428204     ADD W5, W4, W4
019BC4  784214     MOV.B [W4], W4
019BC6  FB8204     ZE W4, W4
019BC8  980724     MOV W4, [W14+4]
23914:                     Tm=Tm<<8;
019BCA  90022E     MOV [W14+4], W4
019BCC  DD2248     SL W4, #8, W4
019BCE  980724     MOV W4, [W14+4]
23915:                     Tm=Tm+ProfileMass[7+Prf];
019BD0  78029E     MOV [W14], W5
019BD2  428267     ADD W5, #0x7, W4
019BD4  22DB95     MOV #0x2DB9, W5
019BD6  428204     ADD W5, W4, W4
019BD8  784214     MOV.B [W4], W4
019BDA  FB8204     ZE W4, W4
019BDC  9002AE     MOV [W14+4], W5
019BDE  428204     ADD W5, W4, W4
019BE0  980724     MOV W4, [W14+4]
23916:                     CurrLimitWork=Tm;
019BE2  90022E     MOV [W14+4], W4
019BE4  88C1A4     MOV W4, CurrLimitWork
23917:                     
23918:                     PhasePERMASS=ProfileMass[9+Prf];
019BE6  78029E     MOV [W14], W5
019BE8  428269     ADD W5, #0x9, W4
019BEA  22DB95     MOV #0x2DB9, W5
019BEC  428204     ADD W5, W4, W4
019BEE  784214     MOV.B [W4], W4
019BF0  2183A5     MOV #0x183A, W5
019BF2  784A84     MOV.B W4, [W5]
23919:                     PhasePERMASS_SHFT=ProfileMass[10+Prf];
019BF4  78029E     MOV [W14], W5
019BF6  42826A     ADD W5, #0xA, W4
019BF8  22DB95     MOV #0x2DB9, W5
019BFA  428204     ADD W5, W4, W4
019BFC  784214     MOV.B [W4], W4
019BFE  2183B5     MOV #0x183B, W5
019C00  784A84     MOV.B W4, [W5]
23920:             
23921:                     MAX_PWM_MEM=ProfileMass[11+Prf];
019C02  78029E     MOV [W14], W5
019C04  42826B     ADD W5, #0xB, W4
019C06  22DB95     MOV #0x2DB9, W5
019C08  428204     ADD W5, W4, W4
019C0A  784214     MOV.B [W4], W4
019C0C  FB8204     ZE W4, W4
019C0E  889984     MOV W4, MAX_PWM_MEM
23922:                     MaxSpd=ProfileMass[12+Prf];
019C10  78029E     MOV [W14], W5
019C12  42826C     ADD W5, #0xC, W4
019C14  22DB95     MOV #0x2DB9, W5
019C16  428204     ADD W5, W4, W4
019C18  784214     MOV.B [W4], W4
019C1A  230C55     MOV #0x30C5, W5
019C1C  784A84     MOV.B W4, [W5]
23923:                     
23924:                     But1Func=ProfileMass[13+Prf];
019C1E  78029E     MOV [W14], W5
019C20  42826D     ADD W5, #0xD, W4
019C22  22DB95     MOV #0x2DB9, W5
019C24  428204     ADD W5, W4, W4
019C26  784214     MOV.B [W4], W4
019C28  2401C5     MOV #0x401C, W5
019C2A  784A84     MOV.B W4, [W5]
23925:                     But2Func=ProfileMass[14+Prf];
019C2C  78029E     MOV [W14], W5
019C2E  42826E     ADD W5, #0xE, W4
019C30  22DB95     MOV #0x2DB9, W5
019C32  428204     ADD W5, W4, W4
019C34  784214     MOV.B [W4], W4
019C36  2401D5     MOV #0x401D, W5
019C38  784A84     MOV.B W4, [W5]
23926:                     But3Func=ProfileMass[15+Prf];
019C3A  78029E     MOV [W14], W5
019C3C  42826F     ADD W5, #0xF, W4
019C3E  22DB95     MOV #0x2DB9, W5
019C40  428204     ADD W5, W4, W4
019C42  784214     MOV.B [W4], W4
019C44  2401E5     MOV #0x401E, W5
019C46  784A84     MOV.B W4, [W5]
23927:                     But4Func=ProfileMass[16+Prf];
019C48  78029E     MOV [W14], W5
019C4A  428270     ADD W5, #0x10, W4
019C4C  22DB95     MOV #0x2DB9, W5
019C4E  428204     ADD W5, W4, W4
019C50  784214     MOV.B [W4], W4
019C52  2401F5     MOV #0x401F, W5
019C54  784A84     MOV.B W4, [W5]
23928:                     ThrottleTmpChngMem=ProfileMass[17+Prf];
019C56  78029E     MOV [W14], W5
019C58  428271     ADD W5, #0x11, W4
019C5A  22DB95     MOV #0x2DB9, W5
019C5C  428204     ADD W5, W4, W4
019C5E  784214     MOV.B [W4], W4
019C60  2329A5     MOV #0x329A, W5
019C62  784A84     MOV.B W4, [W5]
23929:                     SlowStrtSpd=ProfileMass[18+Prf];
019C64  78029E     MOV [W14], W5
019C66  428272     ADD W5, #0x12, W4
019C68  22DB95     MOV #0x2DB9, W5
019C6A  428204     ADD W5, W4, W4
019C6C  784214     MOV.B [W4], W4
019C6E  240D05     MOV #0x40D0, W5
019C70  784A84     MOV.B W4, [W5]
23930:             
23931:                     Tm=ProfileMass[20+Prf];
019C72  78029E     MOV [W14], W5
019C74  428274     ADD W5, #0x14, W4
019C76  22DB95     MOV #0x2DB9, W5
019C78  428204     ADD W5, W4, W4
019C7A  784214     MOV.B [W4], W4
019C7C  FB8204     ZE W4, W4
019C7E  980724     MOV W4, [W14+4]
23932:                     Tm=Tm<<8;
019C80  90022E     MOV [W14+4], W4
019C82  DD2248     SL W4, #8, W4
019C84  980724     MOV W4, [W14+4]
23933:                     Tm=Tm+ProfileMass[19+Prf];
019C86  78029E     MOV [W14], W5
019C88  428273     ADD W5, #0x13, W4
019C8A  22DB95     MOV #0x2DB9, W5
019C8C  428204     ADD W5, W4, W4
019C8E  784214     MOV.B [W4], W4
019C90  FB8204     ZE W4, W4
019C92  9002AE     MOV [W14+4], W5
019C94  428204     ADD W5, W4, W4
019C96  980724     MOV W4, [W14+4]
23934:                     Ki_PWM_Mode=Tm;
019C98  90022E     MOV [W14+4], W4
019C9A  200005     MOV #0x0, W5
019C9C  BE0004     MOV.D W4, W0
019C9E  022582     CALL ___floatunsisf
019CA0  000000     NOP
019CA2  BE0200     MOV.D W0, W4
019CA4  8982A4     MOV W4, Ki_PWM_Mode
019CA6  8982B5     MOV W5, 0x3056
23935:                     Ki_PWM_Mode=Ki_PWM_Mode/10000;
019CA8  8182A4     MOV Ki_PWM_Mode, W4
019CAA  8182B5     MOV 0x3056, W5
019CAC  240002     MOV #0x4000, W2
019CAE  2461C3     MOV #0x461C, W3
019CB0  BE0004     MOV.D W4, W0
019CB2  02245A     CALL ___divsf3
019CB4  000000     NOP
019CB6  BE0200     MOV.D W0, W4
019CB8  8982A4     MOV W4, Ki_PWM_Mode
019CBA  8982B5     MOV W5, 0x3056
23936:             
23937:             
23938:                     Tm=ProfileMass[22+Prf];
019CBC  78029E     MOV [W14], W5
019CBE  428276     ADD W5, #0x16, W4
019CC0  22DB95     MOV #0x2DB9, W5
019CC2  428204     ADD W5, W4, W4
019CC4  784214     MOV.B [W4], W4
019CC6  FB8204     ZE W4, W4
019CC8  980724     MOV W4, [W14+4]
23939:                     Tm=Tm<<8;
019CCA  90022E     MOV [W14+4], W4
019CCC  DD2248     SL W4, #8, W4
019CCE  980724     MOV W4, [W14+4]
23940:                     Tm=Tm+ProfileMass[21+Prf];
019CD0  78029E     MOV [W14], W5
019CD2  428275     ADD W5, #0x15, W4
019CD4  22DB95     MOV #0x2DB9, W5
019CD6  428204     ADD W5, W4, W4
019CD8  784214     MOV.B [W4], W4
019CDA  FB8204     ZE W4, W4
019CDC  9002AE     MOV [W14+4], W5
019CDE  428204     ADD W5, W4, W4
019CE0  980724     MOV W4, [W14+4]
23941:                     Kp_PWM_Mode=Tm;
019CE2  90022E     MOV [W14+4], W4
019CE4  200005     MOV #0x0, W5
019CE6  BE0004     MOV.D W4, W0
019CE8  022582     CALL ___floatunsisf
019CEA  000000     NOP
019CEC  BE0200     MOV.D W0, W4
019CEE  89B764     MOV W4, Kp_PWM_Mode
019CF0  89B775     MOV W5, 0x36EE
23942:                     Kp_PWM_Mode=Kp_PWM_Mode/100;
019CF2  81B764     MOV Kp_PWM_Mode, W4
019CF4  81B775     MOV 0x36EE, W5
019CF6  200002     MOV #0x0, W2
019CF8  242C83     MOV #0x42C8, W3
019CFA  BE0004     MOV.D W4, W0
019CFC  02245A     CALL ___divsf3
019CFE  000000     NOP
019D00  BE0200     MOV.D W0, W4
019D02  89B764     MOV W4, Kp_PWM_Mode
019D04  89B775     MOV W5, 0x36EE
23943:             
23944:                     Tm=ProfileMass[24+Prf];
019D06  78029E     MOV [W14], W5
019D08  428278     ADD W5, #0x18, W4
019D0A  22DB95     MOV #0x2DB9, W5
019D0C  428204     ADD W5, W4, W4
019D0E  784214     MOV.B [W4], W4
019D10  FB8204     ZE W4, W4
019D12  980724     MOV W4, [W14+4]
23945:                     Tm=Tm<<8;
019D14  90022E     MOV [W14+4], W4
019D16  DD2248     SL W4, #8, W4
019D18  980724     MOV W4, [W14+4]
23946:                     Tm=Tm+ProfileMass[23+Prf];
019D1A  78029E     MOV [W14], W5
019D1C  428277     ADD W5, #0x17, W4
019D1E  22DB95     MOV #0x2DB9, W5
019D20  428204     ADD W5, W4, W4
019D22  784214     MOV.B [W4], W4
019D24  FB8204     ZE W4, W4
019D26  9002AE     MOV [W14+4], W5
019D28  428204     ADD W5, W4, W4
019D2A  980724     MOV W4, [W14+4]
23947:                     CurrPhaseLimitWork=Tm;
019D2C  90022E     MOV [W14+4], W4
019D2E  89F4D4     MOV W4, CurrPhaseLimitWork
23948:             
23949:                         if (CW_CCW_AnyProfile)
019D30  809774     MOV StatFlgs3, W4
019D32  620261     AND W4, #0x1, W4
019D34  520FE0     SUB W4, #0x0, [W15]
019D36  320015     BRA Z, 0x19D62
23950:                         {
23951:                         HallDelay1MaxSPD_F=ProfileMass[25+Prf];
019D38  78029E     MOV [W14], W5
019D3A  428279     ADD W5, #0x19, W4
019D3C  22DB95     MOV #0x2DB9, W5
019D3E  428204     ADD W5, W4, W4
019D40  784214     MOV.B [W4], W4
019D42  237E35     MOV #0x37E3, W5
019D44  784A84     MOV.B W4, [W5]
23952:                         HallDelay1MaxSPD_B=ProfileMass[26+Prf];
019D46  78029E     MOV [W14], W5
019D48  42827A     ADD W5, #0x1A, W4
019D4A  22DB95     MOV #0x2DB9, W5
019D4C  428204     ADD W5, W4, W4
019D4E  784214     MOV.B [W4], W4
019D50  237E45     MOV #0x37E4, W5
019D52  784A84     MOV.B W4, [W5]
23953:                         HallDelayMaxSPD=ProfileMass[27+Prf];
019D54  78029E     MOV [W14], W5
019D56  42827B     ADD W5, #0x1B, W4
019D58  22DB95     MOV #0x2DB9, W5
019D5A  428204     ADD W5, W4, W4
019D5C  784214     MOV.B [W4], W4
019D5E  237E55     MOV #0x37E5, W5
019D60  784A84     MOV.B W4, [W5]
23954:                         }
23955:             
23956:                     Tm=ProfileMass[29+Prf];
019D62  78029E     MOV [W14], W5
019D64  42827D     ADD W5, #0x1D, W4
019D66  22DB95     MOV #0x2DB9, W5
019D68  428204     ADD W5, W4, W4
019D6A  784214     MOV.B [W4], W4
019D6C  FB8204     ZE W4, W4
019D6E  980724     MOV W4, [W14+4]
23957:                     Tm=Tm<<8;
019D70  90022E     MOV [W14+4], W4
019D72  DD2248     SL W4, #8, W4
019D74  980724     MOV W4, [W14+4]
23958:                     Tm=Tm+ProfileMass[28+Prf];
019D76  78029E     MOV [W14], W5
019D78  42827C     ADD W5, #0x1C, W4
019D7A  22DB95     MOV #0x2DB9, W5
019D7C  428204     ADD W5, W4, W4
019D7E  784214     MOV.B [W4], W4
019D80  FB8204     ZE W4, W4
019D82  9002AE     MOV [W14+4], W5
019D84  428204     ADD W5, W4, W4
019D86  980724     MOV W4, [W14+4]
23959:                     KpWheelingMem=Tm;
019D88  90022E     MOV [W14+4], W4
019D8A  200005     MOV #0x0, W5
019D8C  BE0004     MOV.D W4, W0
019D8E  022582     CALL ___floatunsisf
019D90  000000     NOP
019D92  BE0200     MOV.D W0, W4
019D94  889D44     MOV W4, KpWheelingMem
019D96  889D55     MOV W5, 0x13AA
23960:                     
23961:                     
23962:                     Tm=ProfileMass[31+Prf];
019D98  78029E     MOV [W14], W5
019D9A  42827F     ADD W5, #0x1F, W4
019D9C  22DB95     MOV #0x2DB9, W5
019D9E  428204     ADD W5, W4, W4
019DA0  784214     MOV.B [W4], W4
019DA2  FB8204     ZE W4, W4
019DA4  980724     MOV W4, [W14+4]
23963:                     Tm=Tm<<8;
019DA6  90022E     MOV [W14+4], W4
019DA8  DD2248     SL W4, #8, W4
019DAA  980724     MOV W4, [W14+4]
23964:                     Tm=Tm+ProfileMass[30+Prf];
019DAC  78029E     MOV [W14], W5
019DAE  42827E     ADD W5, #0x1E, W4
019DB0  22DB95     MOV #0x2DB9, W5
019DB2  428204     ADD W5, W4, W4
019DB4  784214     MOV.B [W4], W4
019DB6  FB8204     ZE W4, W4
019DB8  9002AE     MOV [W14+4], W5
019DBA  428204     ADD W5, W4, W4
019DBC  980724     MOV W4, [W14+4]
23965:                     KiWheelingMem=(float)((int)Tm);
019DBE  90022E     MOV [W14+4], W4
019DC0  DEA2CF     ASR W4, #15, W5
019DC2  BE0004     MOV.D W4, W0
019DC4  02257C     CALL ___floatsisf
019DC6  000000     NOP
019DC8  BE0200     MOV.D W0, W4
019DCA  889B64     MOV W4, KiWheelingMem
019DCC  889B75     MOV W5, 0x136E
23966:                     
23967:             
23968:                     Tm=ProfileMass[33+Prf];
019DCE  200215     MOV #0x21, W5
019DD0  42821E     ADD W5, [W14], W4
019DD2  22DB95     MOV #0x2DB9, W5
019DD4  428204     ADD W5, W4, W4
019DD6  784214     MOV.B [W4], W4
019DD8  FB8204     ZE W4, W4
019DDA  980724     MOV W4, [W14+4]
23969:                     Tm=Tm<<8;
019DDC  90022E     MOV [W14+4], W4
019DDE  DD2248     SL W4, #8, W4
019DE0  980724     MOV W4, [W14+4]
23970:                     Tm=Tm+ProfileMass[32+Prf];
019DE2  200205     MOV #0x20, W5
019DE4  42821E     ADD W5, [W14], W4
019DE6  22DB95     MOV #0x2DB9, W5
019DE8  428204     ADD W5, W4, W4
019DEA  784214     MOV.B [W4], W4
019DEC  FB8204     ZE W4, W4
019DEE  9002AE     MOV [W14+4], W5
019DF0  428204     ADD W5, W4, W4
019DF2  980724     MOV W4, [W14+4]
23971:                     KdNoMan=(float)((int)Tm);
019DF4  90022E     MOV [W14+4], W4
019DF6  DEA2CF     ASR W4, #15, W5
019DF8  BE0004     MOV.D W4, W0
019DFA  02257C     CALL ___floatsisf
019DFC  000000     NOP
019DFE  BE0200     MOV.D W0, W4
019E00  889C24     MOV W4, KdNoMan
019E02  889C35     MOV W5, 0x1386
23972:                     CurrentMaxCurrentOnly=ProfileMass[34+Prf];
019E04  200225     MOV #0x22, W5
019E06  42821E     ADD W5, [W14], W4
019E08  22DB95     MOV #0x2DB9, W5
019E0A  428204     ADD W5, W4, W4
019E0C  784214     MOV.B [W4], W4
019E0E  212F25     MOV #0x12F2, W5
019E10  784A84     MOV.B W4, [W5]
23973:                     CurrentMaxCurrentOnlyWork=((float)CurrentMaxCurrentOnly*1000/**Crr1Corr*/)/CurrPerDigit;
019E12  212F24     MOV #0x12F2, W4
019E14  784214     MOV.B [W4], W4
019E16  FB8204     ZE W4, W4
019E18  200005     MOV #0x0, W5
019E1A  BE0004     MOV.D W4, W0
019E1C  022582     CALL ___floatunsisf
019E1E  000000     NOP
019E20  BE0200     MOV.D W0, W4
019E22  200002     MOV #0x0, W2
019E24  2447A3     MOV #0x447A, W3
019E26  BE0004     MOV.D W4, W0
019E28  022630     CALL ___mulsf3
019E2A  000000     NOP
019E2C  BE0200     MOV.D W0, W4
019E2E  BE0304     MOV.D W4, W6
019E30  8213C4     MOV CurrPerDigit, W4
019E32  8213D5     MOV 0x427A, W5
019E34  BE0104     MOV.D W4, W2
019E36  BE0006     MOV.D W6, W0
019E38  02245A     CALL ___divsf3
019E3A  000000     NOP
019E3C  BE0200     MOV.D W0, W4
019E3E  898604     MOV W4, CurrentMaxCurrentOnlyWork
019E40  898615     MOV W5, 0x30C2
23974:             
23975:                     
23976:                     Tm=ProfileMass[36+Prf];
019E42  200245     MOV #0x24, W5
019E44  42821E     ADD W5, [W14], W4
019E46  22DB95     MOV #0x2DB9, W5
019E48  428204     ADD W5, W4, W4
019E4A  784214     MOV.B [W4], W4
019E4C  FB8204     ZE W4, W4
019E4E  980724     MOV W4, [W14+4]
23977:                     Tm=Tm<<8;
019E50  90022E     MOV [W14+4], W4
019E52  DD2248     SL W4, #8, W4
019E54  980724     MOV W4, [W14+4]
23978:                     Tm=Tm+ProfileMass[35+Prf];
019E56  200235     MOV #0x23, W5
019E58  42821E     ADD W5, [W14], W4
019E5A  22DB95     MOV #0x2DB9, W5
019E5C  428204     ADD W5, W4, W4
019E5E  784214     MOV.B [W4], W4
019E60  FB8204     ZE W4, W4
019E62  9002AE     MOV [W14+4], W5
019E64  428204     ADD W5, W4, W4
019E66  980724     MOV W4, [W14+4]
23979:                     Ki_PWM_ModeOff=Tm;
019E68  90022E     MOV [W14+4], W4
019E6A  200005     MOV #0x0, W5
019E6C  BE0004     MOV.D W4, W0
019E6E  022582     CALL ___floatunsisf
019E70  000000     NOP
019E72  BE0200     MOV.D W0, W4
019E74  8982C4     MOV W4, Ki_PWM_ModeOff
019E76  8982D5     MOV W5, 0x305A
23980:                     Ki_PWM_ModeOff=Ki_PWM_ModeOff/10000;
019E78  8182C4     MOV Ki_PWM_ModeOff, W4
019E7A  8182D5     MOV 0x305A, W5
019E7C  240002     MOV #0x4000, W2
019E7E  2461C3     MOV #0x461C, W3
019E80  BE0004     MOV.D W4, W0
019E82  02245A     CALL ___divsf3
019E84  000000     NOP
019E86  BE0200     MOV.D W0, W4
019E88  8982C4     MOV W4, Ki_PWM_ModeOff
019E8A  8982D5     MOV W5, 0x305A
23981:             
23982:                     StrongModeSpdFilterOffMem=ProfileMass[37+Prf];
019E8C  200255     MOV #0x25, W5
019E8E  42821E     ADD W5, [W14], W4
019E90  22DB95     MOV #0x2DB9, W5
019E92  428204     ADD W5, W4, W4
019E94  784214     MOV.B [W4], W4
019E96  22ADE5     MOV #0x2ADE, W5
019E98  784A84     MOV.B W4, [W5]
23983:                     StrongModeSpdFilterOff=((float)StrongModeSpdFilterOffMem)/ImpToKmH1_t;
019E9A  22ADE4     MOV #0x2ADE, W4
019E9C  784214     MOV.B [W4], W4
019E9E  FB8204     ZE W4, W4
019EA0  200005     MOV #0x0, W5
019EA2  BE0004     MOV.D W4, W0
019EA4  022582     CALL ___floatunsisf
019EA6  000000     NOP
019EA8  BE0300     MOV.D W0, W6
019EAA  817E24     MOV ImpToKmH1_t, W4
019EAC  817E35     MOV 0x2FC6, W5
019EAE  BE0104     MOV.D W4, W2
019EB0  BE0006     MOV.D W6, W0
019EB2  02245A     CALL ___divsf3
019EB4  000000     NOP
019EB6  BE0200     MOV.D W0, W4
019EB8  8956D4     MOV W4, StrongModeSpdFilterOff
019EBA  8956E5     MOV W5, 0x2ADC
23984:                     
23985:             //---------------------------------------------------------        
23986:                         if (ProfileMass[38+Prf]&0x01)
019EBC  200265     MOV #0x26, W5
019EBE  42821E     ADD W5, [W14], W4
019EC0  22DB95     MOV #0x2DB9, W5
019EC2  428204     ADD W5, W4, W4
019EC4  784214     MOV.B [W4], W4
019EC6  FB8204     ZE W4, W4
019EC8  620261     AND W4, #0x1, W4
019ECA  784204     MOV.B W4, W4
019ECC  524FE0     SUB.B W4, #0x0, [W15]
019ECE  320004     BRA Z, 0x19ED8
23987:                             KeyLightStop=1;
019ED0  809784     MOV StatFlgs4, W4
019ED2  A00004     BSET W4, #0
019ED4  889784     MOV W4, StatFlgs4
019ED6  370003     BRA 0x19EDE
23988:                         else
23989:                             KeyLightStop=0;
019ED8  809784     MOV StatFlgs4, W4
019EDA  A10004     BCLR W4, #0
019EDC  889784     MOV W4, StatFlgs4
23990:                         if (ProfileMass[38+Prf]&0x02)
019EDE  200265     MOV #0x26, W5
019EE0  42821E     ADD W5, [W14], W4
019EE2  22DB95     MOV #0x2DB9, W5
019EE4  428204     ADD W5, W4, W4
019EE6  784214     MOV.B [W4], W4
019EE8  FB8204     ZE W4, W4
019EEA  620262     AND W4, #0x2, W4
019EEC  520FE0     SUB W4, #0x0, [W15]
019EEE  320004     BRA Z, 0x19EF8
23991:                             KeyLightStopGabarit=1;
019EF0  809784     MOV StatFlgs4, W4
019EF2  A01004     BSET W4, #1
019EF4  889784     MOV W4, StatFlgs4
019EF6  370003     BRA 0x19EFE
23992:                         else
23993:                             KeyLightStopGabarit=0;
019EF8  809784     MOV StatFlgs4, W4
019EFA  A11004     BCLR W4, #1
019EFC  889784     MOV W4, StatFlgs4
23994:             //---------------------------------------------------------        
23995:                   
23996:                     
23997:                     
23998:                     
23999:                     
24000:                     if ((But1Func==4)||(But1Func==5))
019EFE  2401C4     MOV #0x401C, W4
019F00  784214     MOV.B [W4], W4
019F02  524FE4     SUB.B W4, #0x4, [W15]
019F04  320004     BRA Z, 0x19F0E
019F06  2401C4     MOV #0x401C, W4
019F08  784214     MOV.B [W4], W4
019F0A  524FE5     SUB.B W4, #0x5, [W15]
019F0C  3A0016     BRA NZ, 0x19F3A
24001:                     {
24002:                         if ((ProfileMass[13+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[13+(SIZE_OF_PROFILE*2)]!=5))
019F0E  22E524     MOV #0x2E52, W4
019F10  784214     MOV.B [W4], W4
019F12  524FE4     SUB.B W4, #0x4, [W15]
019F14  320007     BRA Z, 0x19F24
019F16  22E524     MOV #0x2E52, W4
019F18  784214     MOV.B [W4], W4
019F1A  524FE5     SUB.B W4, #0x5, [W15]
019F1C  320003     BRA Z, 0x19F24
24003:                         But1Func=0;
019F1E  2401C5     MOV #0x401C, W5
019F20  EB4200     CLR.B W4
019F22  784A84     MOV.B W4, [W5]
24004:                         if ((ProfileMass[13+SIZE_OF_PROFILE]!=4)&&(ProfileMass[13+SIZE_OF_PROFILE]!=5))
019F24  22E0C4     MOV #0x2E0C, W4
019F26  784214     MOV.B [W4], W4
019F28  524FE4     SUB.B W4, #0x4, [W15]
019F2A  320007     BRA Z, 0x19F3A
019F2C  22E0C4     MOV #0x2E0C, W4
019F2E  784214     MOV.B [W4], W4
019F30  524FE5     SUB.B W4, #0x5, [W15]
019F32  320003     BRA Z, 0x19F3A
24005:                         But1Func=0;
019F34  2401C5     MOV #0x401C, W5
019F36  EB4200     CLR.B W4
019F38  784A84     MOV.B W4, [W5]
24006:                     }
24007:                     if ((But2Func==4)||(But2Func==5))
019F3A  2401D4     MOV #0x401D, W4
019F3C  784214     MOV.B [W4], W4
019F3E  524FE4     SUB.B W4, #0x4, [W15]
019F40  320004     BRA Z, 0x19F4A
019F42  2401D4     MOV #0x401D, W4
019F44  784214     MOV.B [W4], W4
019F46  524FE5     SUB.B W4, #0x5, [W15]
019F48  3A0016     BRA NZ, 0x19F76
24008:                     {
24009:                         if ((ProfileMass[14+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[14+(SIZE_OF_PROFILE*2)]!=5))
019F4A  22E534     MOV #0x2E53, W4
019F4C  784214     MOV.B [W4], W4
019F4E  524FE4     SUB.B W4, #0x4, [W15]
019F50  320007     BRA Z, 0x19F60
019F52  22E534     MOV #0x2E53, W4
019F54  784214     MOV.B [W4], W4
019F56  524FE5     SUB.B W4, #0x5, [W15]
019F58  320003     BRA Z, 0x19F60
24010:                         But2Func=0;
019F5A  2401D5     MOV #0x401D, W5
019F5C  EB4200     CLR.B W4
019F5E  784A84     MOV.B W4, [W5]
24011:                         if ((ProfileMass[14+SIZE_OF_PROFILE]!=4)&&(ProfileMass[14+SIZE_OF_PROFILE]!=5))
019F60  22E0D4     MOV #0x2E0D, W4
019F62  784214     MOV.B [W4], W4
019F64  524FE4     SUB.B W4, #0x4, [W15]
019F66  320007     BRA Z, 0x19F76
019F68  22E0D4     MOV #0x2E0D, W4
019F6A  784214     MOV.B [W4], W4
019F6C  524FE5     SUB.B W4, #0x5, [W15]
019F6E  320003     BRA Z, 0x19F76
24012:                         But2Func=0;
019F70  2401D5     MOV #0x401D, W5
019F72  EB4200     CLR.B W4
019F74  784A84     MOV.B W4, [W5]
24013:                     }
24014:                     if ((But3Func==4)||(But3Func==5))
019F76  2401E4     MOV #0x401E, W4
019F78  784214     MOV.B [W4], W4
019F7A  524FE4     SUB.B W4, #0x4, [W15]
019F7C  320004     BRA Z, 0x19F86
019F7E  2401E4     MOV #0x401E, W4
019F80  784214     MOV.B [W4], W4
019F82  524FE5     SUB.B W4, #0x5, [W15]
019F84  3A0016     BRA NZ, 0x19FB2
24015:                     {
24016:                         if ((ProfileMass[15+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[15+(SIZE_OF_PROFILE*2)]!=5))
019F86  22E544     MOV #0x2E54, W4
019F88  784214     MOV.B [W4], W4
019F8A  524FE4     SUB.B W4, #0x4, [W15]
019F8C  320007     BRA Z, 0x19F9C
019F8E  22E544     MOV #0x2E54, W4
019F90  784214     MOV.B [W4], W4
019F92  524FE5     SUB.B W4, #0x5, [W15]
019F94  320003     BRA Z, 0x19F9C
24017:                         But3Func=0;
019F96  2401E5     MOV #0x401E, W5
019F98  EB4200     CLR.B W4
019F9A  784A84     MOV.B W4, [W5]
24018:                         if ((ProfileMass[15+SIZE_OF_PROFILE]!=4)&&(ProfileMass[15+SIZE_OF_PROFILE]!=5))
019F9C  22E0E4     MOV #0x2E0E, W4
019F9E  784214     MOV.B [W4], W4
019FA0  524FE4     SUB.B W4, #0x4, [W15]
019FA2  320007     BRA Z, 0x19FB2
019FA4  22E0E4     MOV #0x2E0E, W4
019FA6  784214     MOV.B [W4], W4
019FA8  524FE5     SUB.B W4, #0x5, [W15]
019FAA  320003     BRA Z, 0x19FB2
24019:                         But3Func=0;
019FAC  2401E5     MOV #0x401E, W5
019FAE  EB4200     CLR.B W4
019FB0  784A84     MOV.B W4, [W5]
24020:                     }
24021:                     if ((But4Func==4)||(But4Func==5))
019FB2  2401F4     MOV #0x401F, W4
019FB4  784214     MOV.B [W4], W4
019FB6  524FE4     SUB.B W4, #0x4, [W15]
019FB8  320004     BRA Z, 0x19FC2
019FBA  2401F4     MOV #0x401F, W4
019FBC  784214     MOV.B [W4], W4
019FBE  524FE5     SUB.B W4, #0x5, [W15]
019FC0  3A0016     BRA NZ, 0x19FEE
24022:                     {
24023:                         if ((ProfileMass[16+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[16+(SIZE_OF_PROFILE*2)]!=5))
019FC2  22E554     MOV #0x2E55, W4
019FC4  784214     MOV.B [W4], W4
019FC6  524FE4     SUB.B W4, #0x4, [W15]
019FC8  320007     BRA Z, 0x19FD8
019FCA  22E554     MOV #0x2E55, W4
019FCC  784214     MOV.B [W4], W4
019FCE  524FE5     SUB.B W4, #0x5, [W15]
019FD0  320003     BRA Z, 0x19FD8
24024:                         But4Func=0;
019FD2  2401F5     MOV #0x401F, W5
019FD4  EB4200     CLR.B W4
019FD6  784A84     MOV.B W4, [W5]
24025:                         if ((ProfileMass[16+SIZE_OF_PROFILE]!=4)&&(ProfileMass[16+SIZE_OF_PROFILE]!=5))
019FD8  22E0F4     MOV #0x2E0F, W4
019FDA  784214     MOV.B [W4], W4
019FDC  524FE4     SUB.B W4, #0x4, [W15]
019FDE  320007     BRA Z, 0x19FEE
019FE0  22E0F4     MOV #0x2E0F, W4
019FE2  784214     MOV.B [W4], W4
019FE4  524FE5     SUB.B W4, #0x5, [W15]
019FE6  320003     BRA Z, 0x19FEE
24026:                         But4Func=0;
019FE8  2401F5     MOV #0x401F, W5
019FEA  EB4200     CLR.B W4
019FEC  784A84     MOV.B W4, [W5]
24027:                     }
24028:             
24029:                      
24030:                 }    
24031:                 
24032:                if (Prf==1)
019FEE  78021E     MOV [W14], W4
019FF0  520FE1     SUB W4, #0x1, [W15]
019FF2  3A0348     BRA NZ, 0x1A684
24033:                 {
24034:                     Prf=Prf*SIZE_OF_PROFILE;
019FF4  78029E     MOV [W14], W5
019FF6  200464     MOV #0x46, W4
019FF8  B82A84     MUL.UU W5, W4, W4
019FFA  780F04     MOV W4, [W14]
24035:             
24036:                         if (CW_CCW_AnyProfile)
019FFC  809774     MOV StatFlgs3, W4
019FFE  620261     AND W4, #0x1, W4
01A000  520FE0     SUB W4, #0x0, [W15]
01A002  32000C     BRA Z, 0x1A01C
24037:                     {
24038:                     HallDelayMem1_F=ProfileMass[1+Prf];
01A004  E8021E     INC [W14], W4
01A006  22DB95     MOV #0x2DB9, W5
01A008  428204     ADD W5, W4, W4
01A00A  784214     MOV.B [W4], W4
01A00C  214565     MOV #0x1456, W5
01A00E  784A84     MOV.B W4, [W5]
24039:                     HallDelayMem1_B=ProfileMass[2+Prf];
01A010  E8821E     INC2 [W14], W4
01A012  22DB95     MOV #0x2DB9, W5
01A014  428204     ADD W5, W4, W4
01A016  784214     MOV.B [W4], W4
01A018  214575     MOV #0x1457, W5
01A01A  784A84     MOV.B W4, [W5]
24040:                     }
24041:                     
24042:                     
24043:                     
24044:                     //3  AND  4  STATUS
24045:                      StrongModeMem=0;
01A01C  809764     MOV StatFlgs2, W4
01A01E  A12004     BCLR W4, #2
01A020  889764     MOV W4, StatFlgs2
24046:                     if (ProfileMass[3+Prf]&0x01)
01A022  78029E     MOV [W14], W5
01A024  428263     ADD W5, #0x3, W4
01A026  22DB95     MOV #0x2DB9, W5
01A028  428204     ADD W5, W4, W4
01A02A  784214     MOV.B [W4], W4
01A02C  FB8204     ZE W4, W4
01A02E  620261     AND W4, #0x1, W4
01A030  784204     MOV.B W4, W4
01A032  524FE0     SUB.B W4, #0x0, [W15]
01A034  320003     BRA Z, 0x1A03C
24047:                       StrongModeMem=1;
01A036  809764     MOV StatFlgs2, W4
01A038  A02004     BSET W4, #2
01A03A  889764     MOV W4, StatFlgs2
24048:                     if (ProfileMass[3+Prf]&0x02)
01A03C  78029E     MOV [W14], W5
01A03E  428263     ADD W5, #0x3, W4
01A040  22DB95     MOV #0x2DB9, W5
01A042  428204     ADD W5, W4, W4
01A044  784214     MOV.B [W4], W4
01A046  FB8204     ZE W4, W4
01A048  620262     AND W4, #0x2, W4
01A04A  520FE0     SUB W4, #0x0, [W15]
01A04C  320004     BRA Z, 0x1A056
24049:                       VectorMem=1;
01A04E  809754     MOV StatFlgs1, W4
01A050  A0A004     BSET W4, #10
01A052  889754     MOV W4, StatFlgs1
01A054  370003     BRA 0x1A05C
24050:                     else
24051:                       VectorMem=0;
01A056  809754     MOV StatFlgs1, W4
01A058  A1A004     BCLR W4, #10
01A05A  889754     MOV W4, StatFlgs1
24052:                     if (ProfileMass[3+Prf]&0x04)
01A05C  78029E     MOV [W14], W5
01A05E  428263     ADD W5, #0x3, W4
01A060  22DB95     MOV #0x2DB9, W5
01A062  428204     ADD W5, W4, W4
01A064  784214     MOV.B [W4], W4
01A066  FB8204     ZE W4, W4
01A068  620264     AND W4, #0x4, W4
01A06A  520FE0     SUB W4, #0x0, [W15]
01A06C  320004     BRA Z, 0x1A076
24053:                       TrapezoidaRAM1=1;
01A06E  809754     MOV StatFlgs1, W4
01A070  A0C004     BSET W4, #12
01A072  889754     MOV W4, StatFlgs1
01A074  370003     BRA 0x1A07C
24054:                     else
24055:                       TrapezoidaRAM1=0;
01A076  809754     MOV StatFlgs1, W4
01A078  A1C004     BCLR W4, #12
01A07A  889754     MOV W4, StatFlgs1
24056:                     if (ProfileMass[3+Prf]&0x08)
01A07C  78029E     MOV [W14], W5
01A07E  428263     ADD W5, #0x3, W4
01A080  22DB95     MOV #0x2DB9, W5
01A082  428204     ADD W5, W4, W4
01A084  784214     MOV.B [W4], W4
01A086  FB8204     ZE W4, W4
01A088  620268     AND W4, #0x8, W4
01A08A  520FE0     SUB W4, #0x0, [W15]
01A08C  320004     BRA Z, 0x1A096
24057:                       PWM32Bits=1;
01A08E  809754     MOV StatFlgs1, W4
01A090  A0F004     BSET W4, #15
01A092  889754     MOV W4, StatFlgs1
01A094  370003     BRA 0x1A09C
24058:                     else
24059:                       PWM32Bits=0;
01A096  809754     MOV StatFlgs1, W4
01A098  A1F004     BCLR W4, #15
01A09A  889754     MOV W4, StatFlgs1
24060:                     if (ProfileMass[3+Prf]&0x10)
01A09C  78029E     MOV [W14], W5
01A09E  428263     ADD W5, #0x3, W4
01A0A0  22DB95     MOV #0x2DB9, W5
01A0A2  428204     ADD W5, W4, W4
01A0A4  784214     MOV.B [W4], W4
01A0A6  FB8204     ZE W4, W4
01A0A8  620270     AND W4, #0x10, W4
01A0AA  520FE0     SUB W4, #0x0, [W15]
01A0AC  320009     BRA Z, 0x1A0C0
24061:                     {
24062:                         if (!Sensorless)
01A0AE  809755     MOV StatFlgs1, W5
01A0B0  200204     MOV #0x20, W4
01A0B2  628204     AND W5, W4, W4
01A0B4  520FE0     SUB W4, #0x0, [W15]
01A0B6  3A0007     BRA NZ, 0x1A0C6
24063:                         SpeedControl=1;
01A0B8  809754     MOV StatFlgs1, W4
01A0BA  A01004     BSET W4, #1
01A0BC  889754     MOV W4, StatFlgs1
01A0BE  370003     BRA 0x1A0C6
24064:                     }
24065:                     else
24066:                       SpeedControl=0;
01A0C0  809754     MOV StatFlgs1, W4
01A0C2  A11004     BCLR W4, #1
01A0C4  889754     MOV W4, StatFlgs1
24067:                     if (ProfileMass[3+Prf]&0x20)
01A0C6  78029E     MOV [W14], W5
01A0C8  428263     ADD W5, #0x3, W4
01A0CA  22DB95     MOV #0x2DB9, W5
01A0CC  428204     ADD W5, W4, W4
01A0CE  784214     MOV.B [W4], W4
01A0D0  FB8284     ZE W4, W5
01A0D2  200204     MOV #0x20, W4
01A0D4  628204     AND W5, W4, W4
01A0D6  520FE0     SUB W4, #0x0, [W15]
01A0D8  320004     BRA Z, 0x1A0E2
24068:                      AutoPID=1;
01A0DA  809744     MOV StatFlgs, W4
01A0DC  A06004     BSET W4, #6
01A0DE  889744     MOV W4, StatFlgs
01A0E0  370003     BRA 0x1A0E8
24069:                     else
24070:                      AutoPID=0;
01A0E2  809744     MOV StatFlgs, W4
01A0E4  A16004     BCLR W4, #6
01A0E6  889744     MOV W4, StatFlgs
24071:             
24072:                     if (ProfileMass[3+Prf]&0x40)
01A0E8  78029E     MOV [W14], W5
01A0EA  428263     ADD W5, #0x3, W4
01A0EC  22DB95     MOV #0x2DB9, W5
01A0EE  428204     ADD W5, W4, W4
01A0F0  784214     MOV.B [W4], W4
01A0F2  FB8284     ZE W4, W5
01A0F4  200404     MOV #0x40, W4
01A0F6  628204     AND W5, W4, W4
01A0F8  520FE0     SUB W4, #0x0, [W15]
01A0FA  320004     BRA Z, 0x1A104
24073:                         MixedMode=1;
01A0FC  809744     MOV StatFlgs, W4
01A0FE  A0B004     BSET W4, #11
01A100  889744     MOV W4, StatFlgs
01A102  370003     BRA 0x1A10A
24074:                     else
24075:                         MixedMode=0;
01A104  809744     MOV StatFlgs, W4
01A106  A1B004     BCLR W4, #11
01A108  889744     MOV W4, StatFlgs
24076:                     if (ProfileMass[3+Prf]&0x80)
01A10A  78029E     MOV [W14], W5
01A10C  428263     ADD W5, #0x3, W4
01A10E  22DB95     MOV #0x2DB9, W5
01A110  428204     ADD W5, W4, W4
01A112  784214     MOV.B [W4], W4
01A114  524FE0     SUB.B W4, #0x0, [W15]
01A116  3D0004     BRA GE, 0x1A120
24077:                         StrongModePID=1;
01A118  809744     MOV StatFlgs, W4
01A11A  A0D004     BSET W4, #13
01A11C  889744     MOV W4, StatFlgs
01A11E  370003     BRA 0x1A126
24078:                     else
24079:                         StrongModePID=0;
01A120  809744     MOV StatFlgs, W4
01A122  A1D004     BCLR W4, #13
01A124  889744     MOV W4, StatFlgs
24080:                     if (ProfileMass[4+Prf]&0x01)
01A126  78029E     MOV [W14], W5
01A128  428264     ADD W5, #0x4, W4
01A12A  22DB95     MOV #0x2DB9, W5
01A12C  428204     ADD W5, W4, W4
01A12E  784214     MOV.B [W4], W4
01A130  FB8204     ZE W4, W4
01A132  620261     AND W4, #0x1, W4
01A134  784204     MOV.B W4, W4
01A136  524FE0     SUB.B W4, #0x0, [W15]
01A138  320004     BRA Z, 0x1A142
24081:                         SlowStart=1;
01A13A  809764     MOV StatFlgs2, W4
01A13C  A08004     BSET W4, #8
01A13E  889764     MOV W4, StatFlgs2
01A140  370003     BRA 0x1A148
24082:                     else
24083:                         SlowStart=0;
01A142  809764     MOV StatFlgs2, W4
01A144  A18004     BCLR W4, #8
01A146  889764     MOV W4, StatFlgs2
24084:                     if (ProfileMass[4+Prf]&0x02)
01A148  78029E     MOV [W14], W5
01A14A  428264     ADD W5, #0x4, W4
01A14C  22DB95     MOV #0x2DB9, W5
01A14E  428204     ADD W5, W4, W4
01A150  784214     MOV.B [W4], W4
01A152  FB8204     ZE W4, W4
01A154  620262     AND W4, #0x2, W4
01A156  520FE0     SUB W4, #0x0, [W15]
01A158  320004     BRA Z, 0x1A162
24085:                         MixedModeSlowSpeedOff=1;
01A15A  809764     MOV StatFlgs2, W4
01A15C  A0A004     BSET W4, #10
01A15E  889764     MOV W4, StatFlgs2
01A160  370003     BRA 0x1A168
24086:                     else
24087:                         MixedModeSlowSpeedOff=0;
01A162  809764     MOV StatFlgs2, W4
01A164  A1A004     BCLR W4, #10
01A166  889764     MOV W4, StatFlgs2
24088:                     if (ProfileMass[4+Prf]&0x04)
01A168  78029E     MOV [W14], W5
01A16A  428264     ADD W5, #0x4, W4
01A16C  22DB95     MOV #0x2DB9, W5
01A16E  428204     ADD W5, W4, W4
01A170  784214     MOV.B [W4], W4
01A172  FB8204     ZE W4, W4
01A174  620264     AND W4, #0x4, W4
01A176  520FE0     SUB W4, #0x0, [W15]
01A178  320004     BRA Z, 0x1A182
24089:                         MixedMode2=1;
01A17A  809764     MOV StatFlgs2, W4
01A17C  A0B004     BSET W4, #11
01A17E  889764     MOV W4, StatFlgs2
01A180  370003     BRA 0x1A188
24090:                     else
24091:                         MixedMode2=0;
01A182  809764     MOV StatFlgs2, W4
01A184  A1B004     BCLR W4, #11
01A186  889764     MOV W4, StatFlgs2
24092:                     if (ProfileMass[4+Prf]&0x08)
01A188  78029E     MOV [W14], W5
01A18A  428264     ADD W5, #0x4, W4
01A18C  22DB95     MOV #0x2DB9, W5
01A18E  428204     ADD W5, W4, W4
01A190  784214     MOV.B [W4], W4
01A192  FB8204     ZE W4, W4
01A194  620268     AND W4, #0x8, W4
01A196  520FE0     SUB W4, #0x0, [W15]
01A198  320004     BRA Z, 0x1A1A2
24093:                         PWM_Mode=1;
01A19A  809764     MOV StatFlgs2, W4
01A19C  A0C004     BSET W4, #12
01A19E  889764     MOV W4, StatFlgs2
01A1A0  370003     BRA 0x1A1A8
24094:                     else
24095:                         PWM_Mode=0;
01A1A2  809764     MOV StatFlgs2, W4
01A1A4  A1C004     BCLR W4, #12
01A1A6  889764     MOV W4, StatFlgs2
24096:                     if (ProfileMass[4+Prf]&0x10)
01A1A8  78029E     MOV [W14], W5
01A1AA  428264     ADD W5, #0x4, W4
01A1AC  22DB95     MOV #0x2DB9, W5
01A1AE  428204     ADD W5, W4, W4
01A1B0  784214     MOV.B [W4], W4
01A1B2  FB8204     ZE W4, W4
01A1B4  620270     AND W4, #0x10, W4
01A1B6  520FE0     SUB W4, #0x0, [W15]
01A1B8  320004     BRA Z, 0x1A1C2
24097:                         PWM_Mode_ZeroThrottle=1;
01A1BA  809764     MOV StatFlgs2, W4
01A1BC  A0D004     BSET W4, #13
01A1BE  889764     MOV W4, StatFlgs2
01A1C0  370003     BRA 0x1A1C8
24098:                     else
24099:                         PWM_Mode_ZeroThrottle=0;
01A1C2  809764     MOV StatFlgs2, W4
01A1C4  A1D004     BCLR W4, #13
01A1C6  889764     MOV W4, StatFlgs2
24100:                     if (ProfileMass[4+Prf]&0x20)
01A1C8  78029E     MOV [W14], W5
01A1CA  428264     ADD W5, #0x4, W4
01A1CC  22DB95     MOV #0x2DB9, W5
01A1CE  428204     ADD W5, W4, W4
01A1D0  784214     MOV.B [W4], W4
01A1D2  FB8284     ZE W4, W5
01A1D4  200204     MOV #0x20, W4
01A1D6  628204     AND W5, W4, W4
01A1D8  520FE0     SUB W4, #0x0, [W15]
01A1DA  320004     BRA Z, 0x1A1E4
24101:                         SIN_MIDDLE=1;
01A1DC  809764     MOV StatFlgs2, W4
01A1DE  A0E004     BSET W4, #14
01A1E0  889764     MOV W4, StatFlgs2
01A1E2  370003     BRA 0x1A1EA
24102:                     else
24103:                         SIN_MIDDLE=0;
01A1E4  809764     MOV StatFlgs2, W4
01A1E6  A1E004     BCLR W4, #14
01A1E8  889764     MOV W4, StatFlgs2
24104:                     if (ProfileMass[4+Prf]&0x40)
01A1EA  78029E     MOV [W14], W5
01A1EC  428264     ADD W5, #0x4, W4
01A1EE  22DB95     MOV #0x2DB9, W5
01A1F0  428204     ADD W5, W4, W4
01A1F2  784214     MOV.B [W4], W4
01A1F4  FB8284     ZE W4, W5
01A1F6  200404     MOV #0x40, W4
01A1F8  628204     AND W5, W4, W4
01A1FA  520FE0     SUB W4, #0x0, [W15]
01A1FC  320004     BRA Z, 0x1A206
24105:                         LightOn=1;
01A1FE  809774     MOV StatFlgs3, W4
01A200  A09004     BSET W4, #9
01A202  889774     MOV W4, StatFlgs3
01A204  370003     BRA 0x1A20C
24106:                     else
24107:                         LightOn=0;
01A206  809774     MOV StatFlgs3, W4
01A208  A19004     BCLR W4, #9
01A20A  889774     MOV W4, StatFlgs3
24108:                     if (ProfileMass[4+Prf]&0x80)
01A20C  78029E     MOV [W14], W5
01A20E  428264     ADD W5, #0x4, W4
01A210  22DB95     MOV #0x2DB9, W5
01A212  428204     ADD W5, W4, W4
01A214  784214     MOV.B [W4], W4
01A216  524FE0     SUB.B W4, #0x0, [W15]
01A218  3D0004     BRA GE, 0x1A222
24109:                         CurrentControlOnly=1;
01A21A  809774     MOV StatFlgs3, W4
01A21C  A0A004     BSET W4, #10
01A21E  889774     MOV W4, StatFlgs3
01A220  370003     BRA 0x1A228
24110:                     else
24111:                         CurrentControlOnly=0;
01A222  809774     MOV StatFlgs3, W4
01A224  A1A004     BCLR W4, #10
01A226  889774     MOV W4, StatFlgs3
24112:             
24113:             
24114:                      
24115:             
24116:                     Tm=ProfileMass[6+Prf];
01A228  78029E     MOV [W14], W5
01A22A  428266     ADD W5, #0x6, W4
01A22C  22DB95     MOV #0x2DB9, W5
01A22E  428204     ADD W5, W4, W4
01A230  784214     MOV.B [W4], W4
01A232  FB8204     ZE W4, W4
01A234  980724     MOV W4, [W14+4]
24117:                     Tm=Tm<<8;
01A236  90022E     MOV [W14+4], W4
01A238  DD2248     SL W4, #8, W4
01A23A  980724     MOV W4, [W14+4]
24118:                     Tm=Tm+ProfileMass[5+Prf];
01A23C  78029E     MOV [W14], W5
01A23E  428265     ADD W5, #0x5, W4
01A240  22DB95     MOV #0x2DB9, W5
01A242  428204     ADD W5, W4, W4
01A244  784214     MOV.B [W4], W4
01A246  FB8204     ZE W4, W4
01A248  9002AE     MOV [W14+4], W5
01A24A  428204     ADD W5, W4, W4
01A24C  980724     MOV W4, [W14+4]
24119:                     CurrUstWork=Tm;
01A24E  90022E     MOV [W14+4], W4
01A250  89F4E4     MOV W4, CurrUstWork
24120:                     
24121:                     Tm=ProfileMass[8+Prf];
01A252  78029E     MOV [W14], W5
01A254  428268     ADD W5, #0x8, W4
01A256  22DB95     MOV #0x2DB9, W5
01A258  428204     ADD W5, W4, W4
01A25A  784214     MOV.B [W4], W4
01A25C  FB8204     ZE W4, W4
01A25E  980724     MOV W4, [W14+4]
24122:                     Tm=Tm<<8;
01A260  90022E     MOV [W14+4], W4
01A262  DD2248     SL W4, #8, W4
01A264  980724     MOV W4, [W14+4]
24123:                     Tm=Tm+ProfileMass[7+Prf];
01A266  78029E     MOV [W14], W5
01A268  428267     ADD W5, #0x7, W4
01A26A  22DB95     MOV #0x2DB9, W5
01A26C  428204     ADD W5, W4, W4
01A26E  784214     MOV.B [W4], W4
01A270  FB8204     ZE W4, W4
01A272  9002AE     MOV [W14+4], W5
01A274  428204     ADD W5, W4, W4
01A276  980724     MOV W4, [W14+4]
24124:                     CurrLimitWork=Tm;
01A278  90022E     MOV [W14+4], W4
01A27A  88C1A4     MOV W4, CurrLimitWork
24125:                     
24126:                     PhasePERMASS=ProfileMass[9+Prf];
01A27C  78029E     MOV [W14], W5
01A27E  428269     ADD W5, #0x9, W4
01A280  22DB95     MOV #0x2DB9, W5
01A282  428204     ADD W5, W4, W4
01A284  784214     MOV.B [W4], W4
01A286  2183A5     MOV #0x183A, W5
01A288  784A84     MOV.B W4, [W5]
24127:                     PhasePERMASS_SHFT=ProfileMass[10+Prf];
01A28A  78029E     MOV [W14], W5
01A28C  42826A     ADD W5, #0xA, W4
01A28E  22DB95     MOV #0x2DB9, W5
01A290  428204     ADD W5, W4, W4
01A292  784214     MOV.B [W4], W4
01A294  2183B5     MOV #0x183B, W5
01A296  784A84     MOV.B W4, [W5]
24128:             
24129:                     MAX_PWM_MEM=ProfileMass[11+Prf];
01A298  78029E     MOV [W14], W5
01A29A  42826B     ADD W5, #0xB, W4
01A29C  22DB95     MOV #0x2DB9, W5
01A29E  428204     ADD W5, W4, W4
01A2A0  784214     MOV.B [W4], W4
01A2A2  FB8204     ZE W4, W4
01A2A4  889984     MOV W4, MAX_PWM_MEM
24130:                     MaxSpd=ProfileMass[12+Prf];
01A2A6  78029E     MOV [W14], W5
01A2A8  42826C     ADD W5, #0xC, W4
01A2AA  22DB95     MOV #0x2DB9, W5
01A2AC  428204     ADD W5, W4, W4
01A2AE  784214     MOV.B [W4], W4
01A2B0  230C55     MOV #0x30C5, W5
01A2B2  784A84     MOV.B W4, [W5]
24131:             
24132:                     But1Func=ProfileMass[13+Prf];
01A2B4  78029E     MOV [W14], W5
01A2B6  42826D     ADD W5, #0xD, W4
01A2B8  22DB95     MOV #0x2DB9, W5
01A2BA  428204     ADD W5, W4, W4
01A2BC  784214     MOV.B [W4], W4
01A2BE  2401C5     MOV #0x401C, W5
01A2C0  784A84     MOV.B W4, [W5]
24133:                     But2Func=ProfileMass[14+Prf];
01A2C2  78029E     MOV [W14], W5
01A2C4  42826E     ADD W5, #0xE, W4
01A2C6  22DB95     MOV #0x2DB9, W5
01A2C8  428204     ADD W5, W4, W4
01A2CA  784214     MOV.B [W4], W4
01A2CC  2401D5     MOV #0x401D, W5
01A2CE  784A84     MOV.B W4, [W5]
24134:                     But3Func=ProfileMass[15+Prf];
01A2D0  78029E     MOV [W14], W5
01A2D2  42826F     ADD W5, #0xF, W4
01A2D4  22DB95     MOV #0x2DB9, W5
01A2D6  428204     ADD W5, W4, W4
01A2D8  784214     MOV.B [W4], W4
01A2DA  2401E5     MOV #0x401E, W5
01A2DC  784A84     MOV.B W4, [W5]
24135:                     But4Func=ProfileMass[16+Prf];
01A2DE  78029E     MOV [W14], W5
01A2E0  428270     ADD W5, #0x10, W4
01A2E2  22DB95     MOV #0x2DB9, W5
01A2E4  428204     ADD W5, W4, W4
01A2E6  784214     MOV.B [W4], W4
01A2E8  2401F5     MOV #0x401F, W5
01A2EA  784A84     MOV.B W4, [W5]
24136:                     ThrottleTmpChngMem=ProfileMass[17+Prf];
01A2EC  78029E     MOV [W14], W5
01A2EE  428271     ADD W5, #0x11, W4
01A2F0  22DB95     MOV #0x2DB9, W5
01A2F2  428204     ADD W5, W4, W4
01A2F4  784214     MOV.B [W4], W4
01A2F6  2329A5     MOV #0x329A, W5
01A2F8  784A84     MOV.B W4, [W5]
24137:                     SlowStrtSpd=ProfileMass[18+Prf];
01A2FA  78029E     MOV [W14], W5
01A2FC  428272     ADD W5, #0x12, W4
01A2FE  22DB95     MOV #0x2DB9, W5
01A300  428204     ADD W5, W4, W4
01A302  784214     MOV.B [W4], W4
01A304  240D05     MOV #0x40D0, W5
01A306  784A84     MOV.B W4, [W5]
24138:             
24139:                     Tm=ProfileMass[20+Prf];
01A308  78029E     MOV [W14], W5
01A30A  428274     ADD W5, #0x14, W4
01A30C  22DB95     MOV #0x2DB9, W5
01A30E  428204     ADD W5, W4, W4
01A310  784214     MOV.B [W4], W4
01A312  FB8204     ZE W4, W4
01A314  980724     MOV W4, [W14+4]
24140:                     Tm=Tm<<8;
01A316  90022E     MOV [W14+4], W4
01A318  DD2248     SL W4, #8, W4
01A31A  980724     MOV W4, [W14+4]
24141:                     Tm=Tm+ProfileMass[19+Prf];
01A31C  78029E     MOV [W14], W5
01A31E  428273     ADD W5, #0x13, W4
01A320  22DB95     MOV #0x2DB9, W5
01A322  428204     ADD W5, W4, W4
01A324  784214     MOV.B [W4], W4
01A326  FB8204     ZE W4, W4
01A328  9002AE     MOV [W14+4], W5
01A32A  428204     ADD W5, W4, W4
01A32C  980724     MOV W4, [W14+4]
24142:                     Ki_PWM_Mode=Tm;
01A32E  90022E     MOV [W14+4], W4
01A330  200005     MOV #0x0, W5
01A332  BE0004     MOV.D W4, W0
01A334  022582     CALL ___floatunsisf
01A336  000000     NOP
01A338  BE0200     MOV.D W0, W4
01A33A  8982A4     MOV W4, Ki_PWM_Mode
01A33C  8982B5     MOV W5, 0x3056
24143:                     Ki_PWM_Mode=Ki_PWM_Mode/10000;
01A33E  8182A4     MOV Ki_PWM_Mode, W4
01A340  8182B5     MOV 0x3056, W5
01A342  240002     MOV #0x4000, W2
01A344  2461C3     MOV #0x461C, W3
01A346  BE0004     MOV.D W4, W0
01A348  02245A     CALL ___divsf3
01A34A  000000     NOP
01A34C  BE0200     MOV.D W0, W4
01A34E  8982A4     MOV W4, Ki_PWM_Mode
01A350  8982B5     MOV W5, 0x3056
24144:             
24145:                     Tm=ProfileMass[22+Prf];
01A352  78029E     MOV [W14], W5
01A354  428276     ADD W5, #0x16, W4
01A356  22DB95     MOV #0x2DB9, W5
01A358  428204     ADD W5, W4, W4
01A35A  784214     MOV.B [W4], W4
01A35C  FB8204     ZE W4, W4
01A35E  980724     MOV W4, [W14+4]
24146:                     Tm=Tm<<8;
01A360  90022E     MOV [W14+4], W4
01A362  DD2248     SL W4, #8, W4
01A364  980724     MOV W4, [W14+4]
24147:                     Tm=Tm+ProfileMass[21+Prf];
01A366  78029E     MOV [W14], W5
01A368  428275     ADD W5, #0x15, W4
01A36A  22DB95     MOV #0x2DB9, W5
01A36C  428204     ADD W5, W4, W4
01A36E  784214     MOV.B [W4], W4
01A370  FB8204     ZE W4, W4
01A372  9002AE     MOV [W14+4], W5
01A374  428204     ADD W5, W4, W4
01A376  980724     MOV W4, [W14+4]
24148:                     Kp_PWM_Mode=Tm;
01A378  90022E     MOV [W14+4], W4
01A37A  200005     MOV #0x0, W5
01A37C  BE0004     MOV.D W4, W0
01A37E  022582     CALL ___floatunsisf
01A380  000000     NOP
01A382  BE0200     MOV.D W0, W4
01A384  89B764     MOV W4, Kp_PWM_Mode
01A386  89B775     MOV W5, 0x36EE
24149:                     Kp_PWM_Mode=Kp_PWM_Mode/100;
01A388  81B764     MOV Kp_PWM_Mode, W4
01A38A  81B775     MOV 0x36EE, W5
01A38C  200002     MOV #0x0, W2
01A38E  242C83     MOV #0x42C8, W3
01A390  BE0004     MOV.D W4, W0
01A392  02245A     CALL ___divsf3
01A394  000000     NOP
01A396  BE0200     MOV.D W0, W4
01A398  89B764     MOV W4, Kp_PWM_Mode
01A39A  89B775     MOV W5, 0x36EE
24150:                     
24151:                     Tm=ProfileMass[24+Prf];
01A39C  78029E     MOV [W14], W5
01A39E  428278     ADD W5, #0x18, W4
01A3A0  22DB95     MOV #0x2DB9, W5
01A3A2  428204     ADD W5, W4, W4
01A3A4  784214     MOV.B [W4], W4
01A3A6  FB8204     ZE W4, W4
01A3A8  980724     MOV W4, [W14+4]
24152:                     Tm=Tm<<8;
01A3AA  90022E     MOV [W14+4], W4
01A3AC  DD2248     SL W4, #8, W4
01A3AE  980724     MOV W4, [W14+4]
24153:                     Tm=Tm+ProfileMass[23+Prf];
01A3B0  78029E     MOV [W14], W5
01A3B2  428277     ADD W5, #0x17, W4
01A3B4  22DB95     MOV #0x2DB9, W5
01A3B6  428204     ADD W5, W4, W4
01A3B8  784214     MOV.B [W4], W4
01A3BA  FB8204     ZE W4, W4
01A3BC  9002AE     MOV [W14+4], W5
01A3BE  428204     ADD W5, W4, W4
01A3C0  980724     MOV W4, [W14+4]
24154:                     CurrPhaseLimitWork=Tm;
01A3C2  90022E     MOV [W14+4], W4
01A3C4  89F4D4     MOV W4, CurrPhaseLimitWork
24155:             
24156:                         if (CW_CCW_AnyProfile)
01A3C6  809774     MOV StatFlgs3, W4
01A3C8  620261     AND W4, #0x1, W4
01A3CA  520FE0     SUB W4, #0x0, [W15]
01A3CC  320015     BRA Z, 0x1A3F8
24157:                         {
24158:                         HallDelay1MaxSPD_F=ProfileMass[25+Prf];
01A3CE  78029E     MOV [W14], W5
01A3D0  428279     ADD W5, #0x19, W4
01A3D2  22DB95     MOV #0x2DB9, W5
01A3D4  428204     ADD W5, W4, W4
01A3D6  784214     MOV.B [W4], W4
01A3D8  237E35     MOV #0x37E3, W5
01A3DA  784A84     MOV.B W4, [W5]
24159:                         HallDelay1MaxSPD_B=ProfileMass[26+Prf];
01A3DC  78029E     MOV [W14], W5
01A3DE  42827A     ADD W5, #0x1A, W4
01A3E0  22DB95     MOV #0x2DB9, W5
01A3E2  428204     ADD W5, W4, W4
01A3E4  784214     MOV.B [W4], W4
01A3E6  237E45     MOV #0x37E4, W5
01A3E8  784A84     MOV.B W4, [W5]
24160:                         HallDelayMaxSPD=ProfileMass[27+Prf];
01A3EA  78029E     MOV [W14], W5
01A3EC  42827B     ADD W5, #0x1B, W4
01A3EE  22DB95     MOV #0x2DB9, W5
01A3F0  428204     ADD W5, W4, W4
01A3F2  784214     MOV.B [W4], W4
01A3F4  237E55     MOV #0x37E5, W5
01A3F6  784A84     MOV.B W4, [W5]
24161:                         }
24162:             
24163:                     Tm=ProfileMass[29+Prf];
01A3F8  78029E     MOV [W14], W5
01A3FA  42827D     ADD W5, #0x1D, W4
01A3FC  22DB95     MOV #0x2DB9, W5
01A3FE  428204     ADD W5, W4, W4
01A400  784214     MOV.B [W4], W4
01A402  FB8204     ZE W4, W4
01A404  980724     MOV W4, [W14+4]
24164:                     Tm=Tm<<8;
01A406  90022E     MOV [W14+4], W4
01A408  DD2248     SL W4, #8, W4
01A40A  980724     MOV W4, [W14+4]
24165:                     Tm=Tm+ProfileMass[28+Prf];
01A40C  78029E     MOV [W14], W5
01A40E  42827C     ADD W5, #0x1C, W4
01A410  22DB95     MOV #0x2DB9, W5
01A412  428204     ADD W5, W4, W4
01A414  784214     MOV.B [W4], W4
01A416  FB8204     ZE W4, W4
01A418  9002AE     MOV [W14+4], W5
01A41A  428204     ADD W5, W4, W4
01A41C  980724     MOV W4, [W14+4]
24166:                     KpWheelingMem=Tm;
01A41E  90022E     MOV [W14+4], W4
01A420  200005     MOV #0x0, W5
01A422  BE0004     MOV.D W4, W0
01A424  022582     CALL ___floatunsisf
01A426  000000     NOP
01A428  BE0200     MOV.D W0, W4
01A42A  889D44     MOV W4, KpWheelingMem
01A42C  889D55     MOV W5, 0x13AA
24167:                     
24168:                     Tm=ProfileMass[31+Prf];
01A42E  78029E     MOV [W14], W5
01A430  42827F     ADD W5, #0x1F, W4
01A432  22DB95     MOV #0x2DB9, W5
01A434  428204     ADD W5, W4, W4
01A436  784214     MOV.B [W4], W4
01A438  FB8204     ZE W4, W4
01A43A  980724     MOV W4, [W14+4]
24169:                     Tm=Tm<<8;
01A43C  90022E     MOV [W14+4], W4
01A43E  DD2248     SL W4, #8, W4
01A440  980724     MOV W4, [W14+4]
24170:                     Tm=Tm+ProfileMass[30+Prf];
01A442  78029E     MOV [W14], W5
01A444  42827E     ADD W5, #0x1E, W4
01A446  22DB95     MOV #0x2DB9, W5
01A448  428204     ADD W5, W4, W4
01A44A  784214     MOV.B [W4], W4
01A44C  FB8204     ZE W4, W4
01A44E  9002AE     MOV [W14+4], W5
01A450  428204     ADD W5, W4, W4
01A452  980724     MOV W4, [W14+4]
24171:                     KiWheelingMem=(float)((int)Tm);
01A454  90022E     MOV [W14+4], W4
01A456  DEA2CF     ASR W4, #15, W5
01A458  BE0004     MOV.D W4, W0
01A45A  02257C     CALL ___floatsisf
01A45C  000000     NOP
01A45E  BE0200     MOV.D W0, W4
01A460  889B64     MOV W4, KiWheelingMem
01A462  889B75     MOV W5, 0x136E
24172:                     
24173:                     Tm=ProfileMass[33+Prf];
01A464  200215     MOV #0x21, W5
01A466  42821E     ADD W5, [W14], W4
01A468  22DB95     MOV #0x2DB9, W5
01A46A  428204     ADD W5, W4, W4
01A46C  784214     MOV.B [W4], W4
01A46E  FB8204     ZE W4, W4
01A470  980724     MOV W4, [W14+4]
24174:                     Tm=Tm<<8;
01A472  90022E     MOV [W14+4], W4
01A474  DD2248     SL W4, #8, W4
01A476  980724     MOV W4, [W14+4]
24175:                     Tm=Tm+ProfileMass[32+Prf];
01A478  200205     MOV #0x20, W5
01A47A  42821E     ADD W5, [W14], W4
01A47C  22DB95     MOV #0x2DB9, W5
01A47E  428204     ADD W5, W4, W4
01A480  784214     MOV.B [W4], W4
01A482  FB8204     ZE W4, W4
01A484  9002AE     MOV [W14+4], W5
01A486  428204     ADD W5, W4, W4
01A488  980724     MOV W4, [W14+4]
24176:                     KdNoMan=(float)((int)Tm);
01A48A  90022E     MOV [W14+4], W4
01A48C  DEA2CF     ASR W4, #15, W5
01A48E  BE0004     MOV.D W4, W0
01A490  02257C     CALL ___floatsisf
01A492  000000     NOP
01A494  BE0200     MOV.D W0, W4
01A496  889C24     MOV W4, KdNoMan
01A498  889C35     MOV W5, 0x1386
24177:                     CurrentMaxCurrentOnly=ProfileMass[34+Prf];
01A49A  200225     MOV #0x22, W5
01A49C  42821E     ADD W5, [W14], W4
01A49E  22DB95     MOV #0x2DB9, W5
01A4A0  428204     ADD W5, W4, W4
01A4A2  784214     MOV.B [W4], W4
01A4A4  212F25     MOV #0x12F2, W5
01A4A6  784A84     MOV.B W4, [W5]
24178:                     CurrentMaxCurrentOnlyWork=((float)CurrentMaxCurrentOnly*1000/**Crr1Corr*/)/CurrPerDigit;
01A4A8  212F24     MOV #0x12F2, W4
01A4AA  784214     MOV.B [W4], W4
01A4AC  FB8204     ZE W4, W4
01A4AE  200005     MOV #0x0, W5
01A4B0  BE0004     MOV.D W4, W0
01A4B2  022582     CALL ___floatunsisf
01A4B4  000000     NOP
01A4B6  BE0200     MOV.D W0, W4
01A4B8  200002     MOV #0x0, W2
01A4BA  2447A3     MOV #0x447A, W3
01A4BC  BE0004     MOV.D W4, W0
01A4BE  022630     CALL ___mulsf3
01A4C0  000000     NOP
01A4C2  BE0200     MOV.D W0, W4
01A4C4  BE0304     MOV.D W4, W6
01A4C6  8213C4     MOV CurrPerDigit, W4
01A4C8  8213D5     MOV 0x427A, W5
01A4CA  BE0104     MOV.D W4, W2
01A4CC  BE0006     MOV.D W6, W0
01A4CE  02245A     CALL ___divsf3
01A4D0  000000     NOP
01A4D2  BE0200     MOV.D W0, W4
01A4D4  898604     MOV W4, CurrentMaxCurrentOnlyWork
01A4D6  898615     MOV W5, 0x30C2
24179:             
24180:                     Tm=ProfileMass[36+Prf];
01A4D8  200245     MOV #0x24, W5
01A4DA  42821E     ADD W5, [W14], W4
01A4DC  22DB95     MOV #0x2DB9, W5
01A4DE  428204     ADD W5, W4, W4
01A4E0  784214     MOV.B [W4], W4
01A4E2  FB8204     ZE W4, W4
01A4E4  980724     MOV W4, [W14+4]
24181:                     Tm=Tm<<8;
01A4E6  90022E     MOV [W14+4], W4
01A4E8  DD2248     SL W4, #8, W4
01A4EA  980724     MOV W4, [W14+4]
24182:                     Tm=Tm+ProfileMass[35+Prf];
01A4EC  200235     MOV #0x23, W5
01A4EE  42821E     ADD W5, [W14], W4
01A4F0  22DB95     MOV #0x2DB9, W5
01A4F2  428204     ADD W5, W4, W4
01A4F4  784214     MOV.B [W4], W4
01A4F6  FB8204     ZE W4, W4
01A4F8  9002AE     MOV [W14+4], W5
01A4FA  428204     ADD W5, W4, W4
01A4FC  980724     MOV W4, [W14+4]
24183:                     Ki_PWM_ModeOff=Tm;
01A4FE  90022E     MOV [W14+4], W4
01A500  200005     MOV #0x0, W5
01A502  BE0004     MOV.D W4, W0
01A504  022582     CALL ___floatunsisf
01A506  000000     NOP
01A508  BE0200     MOV.D W0, W4
01A50A  8982C4     MOV W4, Ki_PWM_ModeOff
01A50C  8982D5     MOV W5, 0x305A
24184:                     Ki_PWM_ModeOff=Ki_PWM_ModeOff/10000;
01A50E  8182C4     MOV Ki_PWM_ModeOff, W4
01A510  8182D5     MOV 0x305A, W5
01A512  240002     MOV #0x4000, W2
01A514  2461C3     MOV #0x461C, W3
01A516  BE0004     MOV.D W4, W0
01A518  02245A     CALL ___divsf3
01A51A  000000     NOP
01A51C  BE0200     MOV.D W0, W4
01A51E  8982C4     MOV W4, Ki_PWM_ModeOff
01A520  8982D5     MOV W5, 0x305A
24185:                     
24186:                     StrongModeSpdFilterOffMem=ProfileMass[37+Prf];
01A522  200255     MOV #0x25, W5
01A524  42821E     ADD W5, [W14], W4
01A526  22DB95     MOV #0x2DB9, W5
01A528  428204     ADD W5, W4, W4
01A52A  784214     MOV.B [W4], W4
01A52C  22ADE5     MOV #0x2ADE, W5
01A52E  784A84     MOV.B W4, [W5]
24187:                     StrongModeSpdFilterOff=((float)StrongModeSpdFilterOffMem)/ImpToKmH1_t;
01A530  22ADE4     MOV #0x2ADE, W4
01A532  784214     MOV.B [W4], W4
01A534  FB8204     ZE W4, W4
01A536  200005     MOV #0x0, W5
01A538  BE0004     MOV.D W4, W0
01A53A  022582     CALL ___floatunsisf
01A53C  000000     NOP
01A53E  BE0300     MOV.D W0, W6
01A540  817E24     MOV ImpToKmH1_t, W4
01A542  817E35     MOV 0x2FC6, W5
01A544  BE0104     MOV.D W4, W2
01A546  BE0006     MOV.D W6, W0
01A548  02245A     CALL ___divsf3
01A54A  000000     NOP
01A54C  BE0200     MOV.D W0, W4
01A54E  8956D4     MOV W4, StrongModeSpdFilterOff
01A550  8956E5     MOV W5, 0x2ADC
24188:             
24189:             //---------------------------------------------------------        
24190:                         if (ProfileMass[38+Prf]&0x01)
01A552  200265     MOV #0x26, W5
01A554  42821E     ADD W5, [W14], W4
01A556  22DB95     MOV #0x2DB9, W5
01A558  428204     ADD W5, W4, W4
01A55A  784214     MOV.B [W4], W4
01A55C  FB8204     ZE W4, W4
01A55E  620261     AND W4, #0x1, W4
01A560  784204     MOV.B W4, W4
01A562  524FE0     SUB.B W4, #0x0, [W15]
01A564  320004     BRA Z, 0x1A56E
24191:                             KeyLightStop=1;
01A566  809784     MOV StatFlgs4, W4
01A568  A00004     BSET W4, #0
01A56A  889784     MOV W4, StatFlgs4
01A56C  370003     BRA 0x1A574
24192:                         else
24193:                             KeyLightStop=0;
01A56E  809784     MOV StatFlgs4, W4
01A570  A10004     BCLR W4, #0
01A572  889784     MOV W4, StatFlgs4
24194:                         if (ProfileMass[38+Prf]&0x02)
01A574  200265     MOV #0x26, W5
01A576  42821E     ADD W5, [W14], W4
01A578  22DB95     MOV #0x2DB9, W5
01A57A  428204     ADD W5, W4, W4
01A57C  784214     MOV.B [W4], W4
01A57E  FB8204     ZE W4, W4
01A580  620262     AND W4, #0x2, W4
01A582  520FE0     SUB W4, #0x0, [W15]
01A584  320004     BRA Z, 0x1A58E
24195:                             KeyLightStopGabarit=1;
01A586  809784     MOV StatFlgs4, W4
01A588  A01004     BSET W4, #1
01A58A  889784     MOV W4, StatFlgs4
01A58C  370003     BRA 0x1A594
24196:                         else
24197:                             KeyLightStopGabarit=0;
01A58E  809784     MOV StatFlgs4, W4
01A590  A11004     BCLR W4, #1
01A592  889784     MOV W4, StatFlgs4
24198:             //---------------------------------------------------------        
24199:                   
24200:                     
24201:                     
24202:                     
24203:                     if ((But1Func==4)||(But1Func==5))
01A594  2401C4     MOV #0x401C, W4
01A596  784214     MOV.B [W4], W4
01A598  524FE4     SUB.B W4, #0x4, [W15]
01A59A  320004     BRA Z, 0x1A5A4
01A59C  2401C4     MOV #0x401C, W4
01A59E  784214     MOV.B [W4], W4
01A5A0  524FE5     SUB.B W4, #0x5, [W15]
01A5A2  3A0016     BRA NZ, 0x1A5D0
24204:                     {
24205:                         if ((ProfileMass[13+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[13+(SIZE_OF_PROFILE*2)]!=5))
01A5A4  22E524     MOV #0x2E52, W4
01A5A6  784214     MOV.B [W4], W4
01A5A8  524FE4     SUB.B W4, #0x4, [W15]
01A5AA  320007     BRA Z, 0x1A5BA
01A5AC  22E524     MOV #0x2E52, W4
01A5AE  784214     MOV.B [W4], W4
01A5B0  524FE5     SUB.B W4, #0x5, [W15]
01A5B2  320003     BRA Z, 0x1A5BA
24206:                         But1Func=0;
01A5B4  2401C5     MOV #0x401C, W5
01A5B6  EB4200     CLR.B W4
01A5B8  784A84     MOV.B W4, [W5]
24207:                         if ((ProfileMass[13]!=4)&&(ProfileMass[13]!=5))
01A5BA  22DC64     MOV #0x2DC6, W4
01A5BC  784214     MOV.B [W4], W4
01A5BE  524FE4     SUB.B W4, #0x4, [W15]
01A5C0  320007     BRA Z, 0x1A5D0
01A5C2  22DC64     MOV #0x2DC6, W4
01A5C4  784214     MOV.B [W4], W4
01A5C6  524FE5     SUB.B W4, #0x5, [W15]
01A5C8  320003     BRA Z, 0x1A5D0
24208:                         But1Func=0;
01A5CA  2401C5     MOV #0x401C, W5
01A5CC  EB4200     CLR.B W4
01A5CE  784A84     MOV.B W4, [W5]
24209:                     }
24210:                     if ((But2Func==4)||(But2Func==5))
01A5D0  2401D4     MOV #0x401D, W4
01A5D2  784214     MOV.B [W4], W4
01A5D4  524FE4     SUB.B W4, #0x4, [W15]
01A5D6  320004     BRA Z, 0x1A5E0
01A5D8  2401D4     MOV #0x401D, W4
01A5DA  784214     MOV.B [W4], W4
01A5DC  524FE5     SUB.B W4, #0x5, [W15]
01A5DE  3A0016     BRA NZ, 0x1A60C
24211:                     {
24212:                         if ((ProfileMass[14+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[14+(SIZE_OF_PROFILE*2)]!=5))
01A5E0  22E534     MOV #0x2E53, W4
01A5E2  784214     MOV.B [W4], W4
01A5E4  524FE4     SUB.B W4, #0x4, [W15]
01A5E6  320007     BRA Z, 0x1A5F6
01A5E8  22E534     MOV #0x2E53, W4
01A5EA  784214     MOV.B [W4], W4
01A5EC  524FE5     SUB.B W4, #0x5, [W15]
01A5EE  320003     BRA Z, 0x1A5F6
24213:                         But2Func=0;
01A5F0  2401D5     MOV #0x401D, W5
01A5F2  EB4200     CLR.B W4
01A5F4  784A84     MOV.B W4, [W5]
24214:                         if ((ProfileMass[14]!=4)&&(ProfileMass[14]!=5))
01A5F6  22DC74     MOV #0x2DC7, W4
01A5F8  784214     MOV.B [W4], W4
01A5FA  524FE4     SUB.B W4, #0x4, [W15]
01A5FC  320007     BRA Z, 0x1A60C
01A5FE  22DC74     MOV #0x2DC7, W4
01A600  784214     MOV.B [W4], W4
01A602  524FE5     SUB.B W4, #0x5, [W15]
01A604  320003     BRA Z, 0x1A60C
24215:                         But2Func=0;
01A606  2401D5     MOV #0x401D, W5
01A608  EB4200     CLR.B W4
01A60A  784A84     MOV.B W4, [W5]
24216:                     }
24217:                     if ((But3Func==4)||(But3Func==5))
01A60C  2401E4     MOV #0x401E, W4
01A60E  784214     MOV.B [W4], W4
01A610  524FE4     SUB.B W4, #0x4, [W15]
01A612  320004     BRA Z, 0x1A61C
01A614  2401E4     MOV #0x401E, W4
01A616  784214     MOV.B [W4], W4
01A618  524FE5     SUB.B W4, #0x5, [W15]
01A61A  3A0016     BRA NZ, 0x1A648
24218:                     {
24219:                         if ((ProfileMass[15+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[15+(SIZE_OF_PROFILE*2)]!=5))
01A61C  22E544     MOV #0x2E54, W4
01A61E  784214     MOV.B [W4], W4
01A620  524FE4     SUB.B W4, #0x4, [W15]
01A622  320007     BRA Z, 0x1A632
01A624  22E544     MOV #0x2E54, W4
01A626  784214     MOV.B [W4], W4
01A628  524FE5     SUB.B W4, #0x5, [W15]
01A62A  320003     BRA Z, 0x1A632
24220:                         But3Func=0;
01A62C  2401E5     MOV #0x401E, W5
01A62E  EB4200     CLR.B W4
01A630  784A84     MOV.B W4, [W5]
24221:                         if ((ProfileMass[15]!=4)&&(ProfileMass[15]!=5))
01A632  22DC84     MOV #0x2DC8, W4
01A634  784214     MOV.B [W4], W4
01A636  524FE4     SUB.B W4, #0x4, [W15]
01A638  320007     BRA Z, 0x1A648
01A63A  22DC84     MOV #0x2DC8, W4
01A63C  784214     MOV.B [W4], W4
01A63E  524FE5     SUB.B W4, #0x5, [W15]
01A640  320003     BRA Z, 0x1A648
24222:                         But3Func=0;
01A642  2401E5     MOV #0x401E, W5
01A644  EB4200     CLR.B W4
01A646  784A84     MOV.B W4, [W5]
24223:                     }
24224:                     if ((But4Func==4)||(But4Func==5))
01A648  2401F4     MOV #0x401F, W4
01A64A  784214     MOV.B [W4], W4
01A64C  524FE4     SUB.B W4, #0x4, [W15]
01A64E  320004     BRA Z, 0x1A658
01A650  2401F4     MOV #0x401F, W4
01A652  784214     MOV.B [W4], W4
01A654  524FE5     SUB.B W4, #0x5, [W15]
01A656  3A0016     BRA NZ, 0x1A684
24225:                     {
24226:                         if ((ProfileMass[16+(SIZE_OF_PROFILE*2)]!=4)&&(ProfileMass[16+(SIZE_OF_PROFILE*2)]!=5))
01A658  22E554     MOV #0x2E55, W4
01A65A  784214     MOV.B [W4], W4
01A65C  524FE4     SUB.B W4, #0x4, [W15]
01A65E  320007     BRA Z, 0x1A66E
01A660  22E554     MOV #0x2E55, W4
01A662  784214     MOV.B [W4], W4
01A664  524FE5     SUB.B W4, #0x5, [W15]
01A666  320003     BRA Z, 0x1A66E
24227:                         But4Func=0;
01A668  2401F5     MOV #0x401F, W5
01A66A  EB4200     CLR.B W4
01A66C  784A84     MOV.B W4, [W5]
24228:                         if ((ProfileMass[16]!=4)&&(ProfileMass[16]!=5))
01A66E  22DC94     MOV #0x2DC9, W4
01A670  784214     MOV.B [W4], W4
01A672  524FE4     SUB.B W4, #0x4, [W15]
01A674  320007     BRA Z, 0x1A684
01A676  22DC94     MOV #0x2DC9, W4
01A678  784214     MOV.B [W4], W4
01A67A  524FE5     SUB.B W4, #0x5, [W15]
01A67C  320003     BRA Z, 0x1A684
24229:                         But4Func=0;
01A67E  2401F5     MOV #0x401F, W5
01A680  EB4200     CLR.B W4
01A682  784A84     MOV.B W4, [W5]
24230:                     }
24231:                      
24232:             
24233:                     
24234:                 }        
24235:                 
24236:                if (Prf==2)
01A684  78021E     MOV [W14], W4
01A686  520FE2     SUB W4, #0x2, [W15]
01A688  3A0348     BRA NZ, 0x1AD1A
24237:                 {
24238:             
24239:                     Prf=Prf*SIZE_OF_PROFILE;
01A68A  78029E     MOV [W14], W5
01A68C  200464     MOV #0x46, W4
01A68E  B82A84     MUL.UU W5, W4, W4
01A690  780F04     MOV W4, [W14]
24240:                    
24241:                     if (CW_CCW_AnyProfile)
01A692  809774     MOV StatFlgs3, W4
01A694  620261     AND W4, #0x1, W4
01A696  520FE0     SUB W4, #0x0, [W15]
01A698  32000C     BRA Z, 0x1A6B2
24242:                     {
24243:                     HallDelayMem1_F=ProfileMass[1+Prf];
01A69A  E8021E     INC [W14], W4
01A69C  22DB95     MOV #0x2DB9, W5
01A69E  428204     ADD W5, W4, W4
01A6A0  784214     MOV.B [W4], W4
01A6A2  214565     MOV #0x1456, W5
01A6A4  784A84     MOV.B W4, [W5]
24244:                     HallDelayMem1_B=ProfileMass[2+Prf];
01A6A6  E8821E     INC2 [W14], W4
01A6A8  22DB95     MOV #0x2DB9, W5
01A6AA  428204     ADD W5, W4, W4
01A6AC  784214     MOV.B [W4], W4
01A6AE  214575     MOV #0x1457, W5
01A6B0  784A84     MOV.B W4, [W5]
24245:                     }
24246:                     
24247:                     
24248:                     //3  AND  4  STATUS
24249:                      StrongModeMem=0;
01A6B2  809764     MOV StatFlgs2, W4
01A6B4  A12004     BCLR W4, #2
01A6B6  889764     MOV W4, StatFlgs2
24250:                     if (ProfileMass[3+Prf]&0x01)
01A6B8  78029E     MOV [W14], W5
01A6BA  428263     ADD W5, #0x3, W4
01A6BC  22DB95     MOV #0x2DB9, W5
01A6BE  428204     ADD W5, W4, W4
01A6C0  784214     MOV.B [W4], W4
01A6C2  FB8204     ZE W4, W4
01A6C4  620261     AND W4, #0x1, W4
01A6C6  784204     MOV.B W4, W4
01A6C8  524FE0     SUB.B W4, #0x0, [W15]
01A6CA  320003     BRA Z, 0x1A6D2
24251:                       StrongModeMem=1;
01A6CC  809764     MOV StatFlgs2, W4
01A6CE  A02004     BSET W4, #2
01A6D0  889764     MOV W4, StatFlgs2
24252:                     if (ProfileMass[3+Prf]&0x02)
01A6D2  78029E     MOV [W14], W5
01A6D4  428263     ADD W5, #0x3, W4
01A6D6  22DB95     MOV #0x2DB9, W5
01A6D8  428204     ADD W5, W4, W4
01A6DA  784214     MOV.B [W4], W4
01A6DC  FB8204     ZE W4, W4
01A6DE  620262     AND W4, #0x2, W4
01A6E0  520FE0     SUB W4, #0x0, [W15]
01A6E2  320004     BRA Z, 0x1A6EC
24253:                       VectorMem=1;
01A6E4  809754     MOV StatFlgs1, W4
01A6E6  A0A004     BSET W4, #10
01A6E8  889754     MOV W4, StatFlgs1
01A6EA  370003     BRA 0x1A6F2
24254:                     else
24255:                       VectorMem=0;
01A6EC  809754     MOV StatFlgs1, W4
01A6EE  A1A004     BCLR W4, #10
01A6F0  889754     MOV W4, StatFlgs1
24256:                     if (ProfileMass[3+Prf]&0x04)
01A6F2  78029E     MOV [W14], W5
01A6F4  428263     ADD W5, #0x3, W4
01A6F6  22DB95     MOV #0x2DB9, W5
01A6F8  428204     ADD W5, W4, W4
01A6FA  784214     MOV.B [W4], W4
01A6FC  FB8204     ZE W4, W4
01A6FE  620264     AND W4, #0x4, W4
01A700  520FE0     SUB W4, #0x0, [W15]
01A702  320004     BRA Z, 0x1A70C
24257:                       TrapezoidaRAM1=1;
01A704  809754     MOV StatFlgs1, W4
01A706  A0C004     BSET W4, #12
01A708  889754     MOV W4, StatFlgs1
01A70A  370003     BRA 0x1A712
24258:                     else
24259:                       TrapezoidaRAM1=0;
01A70C  809754     MOV StatFlgs1, W4
01A70E  A1C004     BCLR W4, #12
01A710  889754     MOV W4, StatFlgs1
24260:                     if (ProfileMass[3+Prf]&0x08)
01A712  78029E     MOV [W14], W5
01A714  428263     ADD W5, #0x3, W4
01A716  22DB95     MOV #0x2DB9, W5
01A718  428204     ADD W5, W4, W4
01A71A  784214     MOV.B [W4], W4
01A71C  FB8204     ZE W4, W4
01A71E  620268     AND W4, #0x8, W4
01A720  520FE0     SUB W4, #0x0, [W15]
01A722  320004     BRA Z, 0x1A72C
24261:                       PWM32Bits=1;
01A724  809754     MOV StatFlgs1, W4
01A726  A0F004     BSET W4, #15
01A728  889754     MOV W4, StatFlgs1
01A72A  370003     BRA 0x1A732
24262:                     else
24263:                       PWM32Bits=0;
01A72C  809754     MOV StatFlgs1, W4
01A72E  A1F004     BCLR W4, #15
01A730  889754     MOV W4, StatFlgs1
24264:                     if (ProfileMass[3+Prf]&0x10)
01A732  78029E     MOV [W14], W5
01A734  428263     ADD W5, #0x3, W4
01A736  22DB95     MOV #0x2DB9, W5
01A738  428204     ADD W5, W4, W4
01A73A  784214     MOV.B [W4], W4
01A73C  FB8204     ZE W4, W4
01A73E  620270     AND W4, #0x10, W4
01A740  520FE0     SUB W4, #0x0, [W15]
01A742  320009     BRA Z, 0x1A756
24265:                     {
24266:                         if (!Sensorless)
01A744  809755     MOV StatFlgs1, W5
01A746  200204     MOV #0x20, W4
01A748  628204     AND W5, W4, W4
01A74A  520FE0     SUB W4, #0x0, [W15]
01A74C  3A0007     BRA NZ, 0x1A75C
24267:                         SpeedControl=1;
01A74E  809754     MOV StatFlgs1, W4
01A750  A01004     BSET W4, #1
01A752  889754     MOV W4, StatFlgs1
01A754  370003     BRA 0x1A75C
24268:                     }
24269:                     else
24270:                       SpeedControl=0;
01A756  809754     MOV StatFlgs1, W4
01A758  A11004     BCLR W4, #1
01A75A  889754     MOV W4, StatFlgs1
24271:                     if (ProfileMass[3+Prf]&0x20)
01A75C  78029E     MOV [W14], W5
01A75E  428263     ADD W5, #0x3, W4
01A760  22DB95     MOV #0x2DB9, W5
01A762  428204     ADD W5, W4, W4
01A764  784214     MOV.B [W4], W4
01A766  FB8284     ZE W4, W5
01A768  200204     MOV #0x20, W4
01A76A  628204     AND W5, W4, W4
01A76C  520FE0     SUB W4, #0x0, [W15]
01A76E  320004     BRA Z, 0x1A778
24272:                      AutoPID=1;
01A770  809744     MOV StatFlgs, W4
01A772  A06004     BSET W4, #6
01A774  889744     MOV W4, StatFlgs
01A776  370003     BRA 0x1A77E
24273:                     else
24274:                      AutoPID=0;
01A778  809744     MOV StatFlgs, W4
01A77A  A16004     BCLR W4, #6
01A77C  889744     MOV W4, StatFlgs
24275:             
24276:                     if (ProfileMass[3+Prf]&0x40)
01A77E  78029E     MOV [W14], W5
01A780  428263     ADD W5, #0x3, W4
01A782  22DB95     MOV #0x2DB9, W5
01A784  428204     ADD W5, W4, W4
01A786  784214     MOV.B [W4], W4
01A788  FB8284     ZE W4, W5
01A78A  200404     MOV #0x40, W4
01A78C  628204     AND W5, W4, W4
01A78E  520FE0     SUB W4, #0x0, [W15]
01A790  320004     BRA Z, 0x1A79A
24277:                         MixedMode=1;
01A792  809744     MOV StatFlgs, W4
01A794  A0B004     BSET W4, #11
01A796  889744     MOV W4, StatFlgs
01A798  370003     BRA 0x1A7A0
24278:                     else
24279:                         MixedMode=0;
01A79A  809744     MOV StatFlgs, W4
01A79C  A1B004     BCLR W4, #11
01A79E  889744     MOV W4, StatFlgs
24280:                     if (ProfileMass[3+Prf]&0x80)
01A7A0  78029E     MOV [W14], W5
01A7A2  428263     ADD W5, #0x3, W4
01A7A4  22DB95     MOV #0x2DB9, W5
01A7A6  428204     ADD W5, W4, W4
01A7A8  784214     MOV.B [W4], W4
01A7AA  524FE0     SUB.B W4, #0x0, [W15]
01A7AC  3D0004     BRA GE, 0x1A7B6
24281:                         StrongModePID=1;
01A7AE  809744     MOV StatFlgs, W4
01A7B0  A0D004     BSET W4, #13
01A7B2  889744     MOV W4, StatFlgs
01A7B4  370003     BRA 0x1A7BC
24282:                     else
24283:                         StrongModePID=0;
01A7B6  809744     MOV StatFlgs, W4
01A7B8  A1D004     BCLR W4, #13
01A7BA  889744     MOV W4, StatFlgs
24284:                     if (ProfileMass[4+Prf]&0x01)
01A7BC  78029E     MOV [W14], W5
01A7BE  428264     ADD W5, #0x4, W4
01A7C0  22DB95     MOV #0x2DB9, W5
01A7C2  428204     ADD W5, W4, W4
01A7C4  784214     MOV.B [W4], W4
01A7C6  FB8204     ZE W4, W4
01A7C8  620261     AND W4, #0x1, W4
01A7CA  784204     MOV.B W4, W4
01A7CC  524FE0     SUB.B W4, #0x0, [W15]
01A7CE  320004     BRA Z, 0x1A7D8
24285:                         SlowStart=1;
01A7D0  809764     MOV StatFlgs2, W4
01A7D2  A08004     BSET W4, #8
01A7D4  889764     MOV W4, StatFlgs2
01A7D6  370003     BRA 0x1A7DE
24286:                     else
24287:                         SlowStart=0;
01A7D8  809764     MOV StatFlgs2, W4
01A7DA  A18004     BCLR W4, #8
01A7DC  889764     MOV W4, StatFlgs2
24288:                     if (ProfileMass[4+Prf]&0x02)
01A7DE  78029E     MOV [W14], W5
01A7E0  428264     ADD W5, #0x4, W4
01A7E2  22DB95     MOV #0x2DB9, W5
01A7E4  428204     ADD W5, W4, W4
01A7E6  784214     MOV.B [W4], W4
01A7E8  FB8204     ZE W4, W4
01A7EA  620262     AND W4, #0x2, W4
01A7EC  520FE0     SUB W4, #0x0, [W15]
01A7EE  320004     BRA Z, 0x1A7F8
24289:                         MixedModeSlowSpeedOff=1;
01A7F0  809764     MOV StatFlgs2, W4
01A7F2  A0A004     BSET W4, #10
01A7F4  889764     MOV W4, StatFlgs2
01A7F6  370003     BRA 0x1A7FE
24290:                     else
24291:                         MixedModeSlowSpeedOff=0;
01A7F8  809764     MOV StatFlgs2, W4
01A7FA  A1A004     BCLR W4, #10
01A7FC  889764     MOV W4, StatFlgs2
24292:                     if (ProfileMass[4+Prf]&0x04)
01A7FE  78029E     MOV [W14], W5
01A800  428264     ADD W5, #0x4, W4
01A802  22DB95     MOV #0x2DB9, W5
01A804  428204     ADD W5, W4, W4
01A806  784214     MOV.B [W4], W4
01A808  FB8204     ZE W4, W4
01A80A  620264     AND W4, #0x4, W4
01A80C  520FE0     SUB W4, #0x0, [W15]
01A80E  320004     BRA Z, 0x1A818
24293:                         MixedMode2=1;
01A810  809764     MOV StatFlgs2, W4
01A812  A0B004     BSET W4, #11
01A814  889764     MOV W4, StatFlgs2
01A816  370003     BRA 0x1A81E
24294:                     else
24295:                         MixedMode2=0;
01A818  809764     MOV StatFlgs2, W4
01A81A  A1B004     BCLR W4, #11
01A81C  889764     MOV W4, StatFlgs2
24296:                     if (ProfileMass[4+Prf]&0x08)
01A81E  78029E     MOV [W14], W5
01A820  428264     ADD W5, #0x4, W4
01A822  22DB95     MOV #0x2DB9, W5
01A824  428204     ADD W5, W4, W4
01A826  784214     MOV.B [W4], W4
01A828  FB8204     ZE W4, W4
01A82A  620268     AND W4, #0x8, W4
01A82C  520FE0     SUB W4, #0x0, [W15]
01A82E  320004     BRA Z, 0x1A838
24297:                         PWM_Mode=1;
01A830  809764     MOV StatFlgs2, W4
01A832  A0C004     BSET W4, #12
01A834  889764     MOV W4, StatFlgs2
01A836  370003     BRA 0x1A83E
24298:                     else
24299:                         PWM_Mode=0;
01A838  809764     MOV StatFlgs2, W4
01A83A  A1C004     BCLR W4, #12
01A83C  889764     MOV W4, StatFlgs2
24300:                     if (ProfileMass[4+Prf]&0x10)
01A83E  78029E     MOV [W14], W5
01A840  428264     ADD W5, #0x4, W4
01A842  22DB95     MOV #0x2DB9, W5
01A844  428204     ADD W5, W4, W4
01A846  784214     MOV.B [W4], W4
01A848  FB8204     ZE W4, W4
01A84A  620270     AND W4, #0x10, W4
01A84C  520FE0     SUB W4, #0x0, [W15]
01A84E  320004     BRA Z, 0x1A858
24301:                         PWM_Mode_ZeroThrottle=1;
01A850  809764     MOV StatFlgs2, W4
01A852  A0D004     BSET W4, #13
01A854  889764     MOV W4, StatFlgs2
01A856  370003     BRA 0x1A85E
24302:                     else
24303:                         PWM_Mode_ZeroThrottle=0;
01A858  809764     MOV StatFlgs2, W4
01A85A  A1D004     BCLR W4, #13
01A85C  889764     MOV W4, StatFlgs2
24304:                     if (ProfileMass[4+Prf]&0x20)
01A85E  78029E     MOV [W14], W5
01A860  428264     ADD W5, #0x4, W4
01A862  22DB95     MOV #0x2DB9, W5
01A864  428204     ADD W5, W4, W4
01A866  784214     MOV.B [W4], W4
01A868  FB8284     ZE W4, W5
01A86A  200204     MOV #0x20, W4
01A86C  628204     AND W5, W4, W4
01A86E  520FE0     SUB W4, #0x0, [W15]
01A870  320004     BRA Z, 0x1A87A
24305:                         SIN_MIDDLE=1;
01A872  809764     MOV StatFlgs2, W4
01A874  A0E004     BSET W4, #14
01A876  889764     MOV W4, StatFlgs2
01A878  370003     BRA 0x1A880
24306:                     else
24307:                         SIN_MIDDLE=0;
01A87A  809764     MOV StatFlgs2, W4
01A87C  A1E004     BCLR W4, #14
01A87E  889764     MOV W4, StatFlgs2
24308:                     if (ProfileMass[4+Prf]&0x40)
01A880  78029E     MOV [W14], W5
01A882  428264     ADD W5, #0x4, W4
01A884  22DB95     MOV #0x2DB9, W5
01A886  428204     ADD W5, W4, W4
01A888  784214     MOV.B [W4], W4
01A88A  FB8284     ZE W4, W5
01A88C  200404     MOV #0x40, W4
01A88E  628204     AND W5, W4, W4
01A890  520FE0     SUB W4, #0x0, [W15]
01A892  320004     BRA Z, 0x1A89C
24309:                         LightOn=1;
01A894  809774     MOV StatFlgs3, W4
01A896  A09004     BSET W4, #9
01A898  889774     MOV W4, StatFlgs3
01A89A  370003     BRA 0x1A8A2
24310:                     else
24311:                         LightOn=0;
01A89C  809774     MOV StatFlgs3, W4
01A89E  A19004     BCLR W4, #9
01A8A0  889774     MOV W4, StatFlgs3
24312:                     if (ProfileMass[4+Prf]&0x80)
01A8A2  78029E     MOV [W14], W5
01A8A4  428264     ADD W5, #0x4, W4
01A8A6  22DB95     MOV #0x2DB9, W5
01A8A8  428204     ADD W5, W4, W4
01A8AA  784214     MOV.B [W4], W4
01A8AC  524FE0     SUB.B W4, #0x0, [W15]
01A8AE  3D0004     BRA GE, 0x1A8B8
24313:                         CurrentControlOnly=1;
01A8B0  809774     MOV StatFlgs3, W4
01A8B2  A0A004     BSET W4, #10
01A8B4  889774     MOV W4, StatFlgs3
01A8B6  370003     BRA 0x1A8BE
24314:                     else
24315:                         CurrentControlOnly=0;
01A8B8  809774     MOV StatFlgs3, W4
01A8BA  A1A004     BCLR W4, #10
01A8BC  889774     MOV W4, StatFlgs3
24316:             
24317:             
24318:                      
24319:             
24320:                     Tm=ProfileMass[6+Prf];
01A8BE  78029E     MOV [W14], W5
01A8C0  428266     ADD W5, #0x6, W4
01A8C2  22DB95     MOV #0x2DB9, W5
01A8C4  428204     ADD W5, W4, W4
01A8C6  784214     MOV.B [W4], W4
01A8C8  FB8204     ZE W4, W4
01A8CA  980724     MOV W4, [W14+4]
24321:                     Tm=Tm<<8;
01A8CC  90022E     MOV [W14+4], W4
01A8CE  DD2248     SL W4, #8, W4
01A8D0  980724     MOV W4, [W14+4]
24322:                     Tm=Tm+ProfileMass[5+Prf];
01A8D2  78029E     MOV [W14], W5
01A8D4  428265     ADD W5, #0x5, W4
01A8D6  22DB95     MOV #0x2DB9, W5
01A8D8  428204     ADD W5, W4, W4
01A8DA  784214     MOV.B [W4], W4
01A8DC  FB8204     ZE W4, W4
01A8DE  9002AE     MOV [W14+4], W5
01A8E0  428204     ADD W5, W4, W4
01A8E2  980724     MOV W4, [W14+4]
24323:                     CurrUstWork=Tm;
01A8E4  90022E     MOV [W14+4], W4
01A8E6  89F4E4     MOV W4, CurrUstWork
24324:                     
24325:                     Tm=ProfileMass[8+Prf];
01A8E8  78029E     MOV [W14], W5
01A8EA  428268     ADD W5, #0x8, W4
01A8EC  22DB95     MOV #0x2DB9, W5
01A8EE  428204     ADD W5, W4, W4
01A8F0  784214     MOV.B [W4], W4
01A8F2  FB8204     ZE W4, W4
01A8F4  980724     MOV W4, [W14+4]
24326:                     Tm=Tm<<8;
01A8F6  90022E     MOV [W14+4], W4
01A8F8  DD2248     SL W4, #8, W4
01A8FA  980724     MOV W4, [W14+4]
24327:                     Tm=Tm+ProfileMass[7+Prf];
01A8FC  78029E     MOV [W14], W5
01A8FE  428267     ADD W5, #0x7, W4
01A900  22DB95     MOV #0x2DB9, W5
01A902  428204     ADD W5, W4, W4
01A904  784214     MOV.B [W4], W4
01A906  FB8204     ZE W4, W4
01A908  9002AE     MOV [W14+4], W5
01A90A  428204     ADD W5, W4, W4
01A90C  980724     MOV W4, [W14+4]
24328:                     CurrLimitWork=Tm;
01A90E  90022E     MOV [W14+4], W4
01A910  88C1A4     MOV W4, CurrLimitWork
24329:             
24330:                     PhasePERMASS=ProfileMass[9+Prf];
01A912  78029E     MOV [W14], W5
01A914  428269     ADD W5, #0x9, W4
01A916  22DB95     MOV #0x2DB9, W5
01A918  428204     ADD W5, W4, W4
01A91A  784214     MOV.B [W4], W4
01A91C  2183A5     MOV #0x183A, W5
01A91E  784A84     MOV.B W4, [W5]
24331:                     PhasePERMASS_SHFT=ProfileMass[10+Prf];
01A920  78029E     MOV [W14], W5
01A922  42826A     ADD W5, #0xA, W4
01A924  22DB95     MOV #0x2DB9, W5
01A926  428204     ADD W5, W4, W4
01A928  784214     MOV.B [W4], W4
01A92A  2183B5     MOV #0x183B, W5
01A92C  784A84     MOV.B W4, [W5]
24332:             
24333:                     MAX_PWM_MEM=ProfileMass[11+Prf];
01A92E  78029E     MOV [W14], W5
01A930  42826B     ADD W5, #0xB, W4
01A932  22DB95     MOV #0x2DB9, W5
01A934  428204     ADD W5, W4, W4
01A936  784214     MOV.B [W4], W4
01A938  FB8204     ZE W4, W4
01A93A  889984     MOV W4, MAX_PWM_MEM
24334:                     MaxSpd=ProfileMass[12+Prf];
01A93C  78029E     MOV [W14], W5
01A93E  42826C     ADD W5, #0xC, W4
01A940  22DB95     MOV #0x2DB9, W5
01A942  428204     ADD W5, W4, W4
01A944  784214     MOV.B [W4], W4
01A946  230C55     MOV #0x30C5, W5
01A948  784A84     MOV.B W4, [W5]
24335:             
24336:                     But1Func=ProfileMass[13+Prf];
01A94A  78029E     MOV [W14], W5
01A94C  42826D     ADD W5, #0xD, W4
01A94E  22DB95     MOV #0x2DB9, W5
01A950  428204     ADD W5, W4, W4
01A952  784214     MOV.B [W4], W4
01A954  2401C5     MOV #0x401C, W5
01A956  784A84     MOV.B W4, [W5]
24337:                     But2Func=ProfileMass[14+Prf];
01A958  78029E     MOV [W14], W5
01A95A  42826E     ADD W5, #0xE, W4
01A95C  22DB95     MOV #0x2DB9, W5
01A95E  428204     ADD W5, W4, W4
01A960  784214     MOV.B [W4], W4
01A962  2401D5     MOV #0x401D, W5
01A964  784A84     MOV.B W4, [W5]
24338:                     But3Func=ProfileMass[15+Prf];
01A966  78029E     MOV [W14], W5
01A968  42826F     ADD W5, #0xF, W4
01A96A  22DB95     MOV #0x2DB9, W5
01A96C  428204     ADD W5, W4, W4
01A96E  784214     MOV.B [W4], W4
01A970  2401E5     MOV #0x401E, W5
01A972  784A84     MOV.B W4, [W5]
24339:                     But4Func=ProfileMass[16+Prf];
01A974  78029E     MOV [W14], W5
01A976  428270     ADD W5, #0x10, W4
01A978  22DB95     MOV #0x2DB9, W5
01A97A  428204     ADD W5, W4, W4
01A97C  784214     MOV.B [W4], W4
01A97E  2401F5     MOV #0x401F, W5
01A980  784A84     MOV.B W4, [W5]
24340:                     ThrottleTmpChngMem=ProfileMass[17+Prf];
01A982  78029E     MOV [W14], W5
01A984  428271     ADD W5, #0x11, W4
01A986  22DB95     MOV #0x2DB9, W5
01A988  428204     ADD W5, W4, W4
01A98A  784214     MOV.B [W4], W4
01A98C  2329A5     MOV #0x329A, W5
01A98E  784A84     MOV.B W4, [W5]
24341:                     SlowStrtSpd=ProfileMass[18+Prf];
01A990  78029E     MOV [W14], W5
01A992  428272     ADD W5, #0x12, W4
01A994  22DB95     MOV #0x2DB9, W5
01A996  428204     ADD W5, W4, W4
01A998  784214     MOV.B [W4], W4
01A99A  240D05     MOV #0x40D0, W5
01A99C  784A84     MOV.B W4, [W5]
24342:                      
24343:                     Tm=ProfileMass[20+Prf];
01A99E  78029E     MOV [W14], W5
01A9A0  428274     ADD W5, #0x14, W4
01A9A2  22DB95     MOV #0x2DB9, W5
01A9A4  428204     ADD W5, W4, W4
01A9A6  784214     MOV.B [W4], W4
01A9A8  FB8204     ZE W4, W4
01A9AA  980724     MOV W4, [W14+4]
24344:                     Tm=Tm<<8;
01A9AC  90022E     MOV [W14+4], W4
01A9AE  DD2248     SL W4, #8, W4
01A9B0  980724     MOV W4, [W14+4]
24345:                     Tm=Tm+ProfileMass[19+Prf];
01A9B2  78029E     MOV [W14], W5
01A9B4  428273     ADD W5, #0x13, W4
01A9B6  22DB95     MOV #0x2DB9, W5
01A9B8  428204     ADD W5, W4, W4
01A9BA  784214     MOV.B [W4], W4
01A9BC  FB8204     ZE W4, W4
01A9BE  9002AE     MOV [W14+4], W5
01A9C0  428204     ADD W5, W4, W4
01A9C2  980724     MOV W4, [W14+4]
24346:                     Ki_PWM_Mode=Tm;
01A9C4  90022E     MOV [W14+4], W4
01A9C6  200005     MOV #0x0, W5
01A9C8  BE0004     MOV.D W4, W0
01A9CA  022582     CALL ___floatunsisf
01A9CC  000000     NOP
01A9CE  BE0200     MOV.D W0, W4
01A9D0  8982A4     MOV W4, Ki_PWM_Mode
01A9D2  8982B5     MOV W5, 0x3056
24347:                     Ki_PWM_Mode=Ki_PWM_Mode/10000;
01A9D4  8182A4     MOV Ki_PWM_Mode, W4
01A9D6  8182B5     MOV 0x3056, W5
01A9D8  240002     MOV #0x4000, W2
01A9DA  2461C3     MOV #0x461C, W3
01A9DC  BE0004     MOV.D W4, W0
01A9DE  02245A     CALL ___divsf3
01A9E0  000000     NOP
01A9E2  BE0200     MOV.D W0, W4
01A9E4  8982A4     MOV W4, Ki_PWM_Mode
01A9E6  8982B5     MOV W5, 0x3056
24348:             
24349:                     Tm=ProfileMass[22+Prf];
01A9E8  78029E     MOV [W14], W5
01A9EA  428276     ADD W5, #0x16, W4
01A9EC  22DB95     MOV #0x2DB9, W5
01A9EE  428204     ADD W5, W4, W4
01A9F0  784214     MOV.B [W4], W4
01A9F2  FB8204     ZE W4, W4
01A9F4  980724     MOV W4, [W14+4]
24350:                     Tm=Tm<<8;
01A9F6  90022E     MOV [W14+4], W4
01A9F8  DD2248     SL W4, #8, W4
01A9FA  980724     MOV W4, [W14+4]
24351:                     Tm=Tm+ProfileMass[21+Prf];
01A9FC  78029E     MOV [W14], W5
01A9FE  428275     ADD W5, #0x15, W4
01AA00  22DB95     MOV #0x2DB9, W5
01AA02  428204     ADD W5, W4, W4
01AA04  784214     MOV.B [W4], W4
01AA06  FB8204     ZE W4, W4
01AA08  9002AE     MOV [W14+4], W5
01AA0A  428204     ADD W5, W4, W4
01AA0C  980724     MOV W4, [W14+4]
24352:                     Kp_PWM_Mode=Tm;
01AA0E  90022E     MOV [W14+4], W4
01AA10  200005     MOV #0x0, W5
01AA12  BE0004     MOV.D W4, W0
01AA14  022582     CALL ___floatunsisf
01AA16  000000     NOP
01AA18  BE0200     MOV.D W0, W4
01AA1A  89B764     MOV W4, Kp_PWM_Mode
01AA1C  89B775     MOV W5, 0x36EE
24353:                     Kp_PWM_Mode=Kp_PWM_Mode/100;
01AA1E  81B764     MOV Kp_PWM_Mode, W4
01AA20  81B775     MOV 0x36EE, W5
01AA22  200002     MOV #0x0, W2
01AA24  242C83     MOV #0x42C8, W3
01AA26  BE0004     MOV.D W4, W0
01AA28  02245A     CALL ___divsf3
01AA2A  000000     NOP
01AA2C  BE0200     MOV.D W0, W4
01AA2E  89B764     MOV W4, Kp_PWM_Mode
01AA30  89B775     MOV W5, 0x36EE
24354:             
24355:                     Tm=ProfileMass[24+Prf];
01AA32  78029E     MOV [W14], W5
01AA34  428278     ADD W5, #0x18, W4
01AA36  22DB95     MOV #0x2DB9, W5
01AA38  428204     ADD W5, W4, W4
01AA3A  784214     MOV.B [W4], W4
01AA3C  FB8204     ZE W4, W4
01AA3E  980724     MOV W4, [W14+4]
24356:                     Tm=Tm<<8;
01AA40  90022E     MOV [W14+4], W4
01AA42  DD2248     SL W4, #8, W4
01AA44  980724     MOV W4, [W14+4]
24357:                     Tm=Tm+ProfileMass[23+Prf];
01AA46  78029E     MOV [W14], W5
01AA48  428277     ADD W5, #0x17, W4
01AA4A  22DB95     MOV #0x2DB9, W5
01AA4C  428204     ADD W5, W4, W4
01AA4E  784214     MOV.B [W4], W4
01AA50  FB8204     ZE W4, W4
01AA52  9002AE     MOV [W14+4], W5
01AA54  428204     ADD W5, W4, W4
01AA56  980724     MOV W4, [W14+4]
24358:                     CurrPhaseLimitWork=Tm;
01AA58  90022E     MOV [W14+4], W4
01AA5A  89F4D4     MOV W4, CurrPhaseLimitWork
24359:             
24360:                         if (CW_CCW_AnyProfile)
01AA5C  809774     MOV StatFlgs3, W4
01AA5E  620261     AND W4, #0x1, W4
01AA60  520FE0     SUB W4, #0x0, [W15]
01AA62  320015     BRA Z, 0x1AA8E
24361:                         {
24362:                         HallDelay1MaxSPD_F=ProfileMass[25+Prf];
01AA64  78029E     MOV [W14], W5
01AA66  428279     ADD W5, #0x19, W4
01AA68  22DB95     MOV #0x2DB9, W5
01AA6A  428204     ADD W5, W4, W4
01AA6C  784214     MOV.B [W4], W4
01AA6E  237E35     MOV #0x37E3, W5
01AA70  784A84     MOV.B W4, [W5]
24363:                         HallDelay1MaxSPD_B=ProfileMass[26+Prf];
01AA72  78029E     MOV [W14], W5
01AA74  42827A     ADD W5, #0x1A, W4
01AA76  22DB95     MOV #0x2DB9, W5
01AA78  428204     ADD W5, W4, W4
01AA7A  784214     MOV.B [W4], W4
01AA7C  237E45     MOV #0x37E4, W5
01AA7E  784A84     MOV.B W4, [W5]
24364:                         HallDelayMaxSPD=ProfileMass[27+Prf];
01AA80  78029E     MOV [W14], W5
01AA82  42827B     ADD W5, #0x1B, W4
01AA84  22DB95     MOV #0x2DB9, W5
01AA86  428204     ADD W5, W4, W4
01AA88  784214     MOV.B [W4], W4
01AA8A  237E55     MOV #0x37E5, W5
01AA8C  784A84     MOV.B W4, [W5]
24365:                         }
24366:             
24367:                     Tm=ProfileMass[29+Prf];
01AA8E  78029E     MOV [W14], W5
01AA90  42827D     ADD W5, #0x1D, W4
01AA92  22DB95     MOV #0x2DB9, W5
01AA94  428204     ADD W5, W4, W4
01AA96  784214     MOV.B [W4], W4
01AA98  FB8204     ZE W4, W4
01AA9A  980724     MOV W4, [W14+4]
24368:                     Tm=Tm<<8;
01AA9C  90022E     MOV [W14+4], W4
01AA9E  DD2248     SL W4, #8, W4
01AAA0  980724     MOV W4, [W14+4]
24369:                     Tm=Tm+ProfileMass[28+Prf];
01AAA2  78029E     MOV [W14], W5
01AAA4  42827C     ADD W5, #0x1C, W4
01AAA6  22DB95     MOV #0x2DB9, W5
01AAA8  428204     ADD W5, W4, W4
01AAAA  784214     MOV.B [W4], W4
01AAAC  FB8204     ZE W4, W4
01AAAE  9002AE     MOV [W14+4], W5
01AAB0  428204     ADD W5, W4, W4
01AAB2  980724     MOV W4, [W14+4]
24370:                     KpWheelingMem=Tm;
01AAB4  90022E     MOV [W14+4], W4
01AAB6  200005     MOV #0x0, W5
01AAB8  BE0004     MOV.D W4, W0
01AABA  022582     CALL ___floatunsisf
01AABC  000000     NOP
01AABE  BE0200     MOV.D W0, W4
01AAC0  889D44     MOV W4, KpWheelingMem
01AAC2  889D55     MOV W5, 0x13AA
24371:                     
24372:                     Tm=ProfileMass[31+Prf];
01AAC4  78029E     MOV [W14], W5
01AAC6  42827F     ADD W5, #0x1F, W4
01AAC8  22DB95     MOV #0x2DB9, W5
01AACA  428204     ADD W5, W4, W4
01AACC  784214     MOV.B [W4], W4
01AACE  FB8204     ZE W4, W4
01AAD0  980724     MOV W4, [W14+4]
24373:                     Tm=Tm<<8;
01AAD2  90022E     MOV [W14+4], W4
01AAD4  DD2248     SL W4, #8, W4
01AAD6  980724     MOV W4, [W14+4]
24374:                     Tm=Tm+ProfileMass[30+Prf];
01AAD8  78029E     MOV [W14], W5
01AADA  42827E     ADD W5, #0x1E, W4
01AADC  22DB95     MOV #0x2DB9, W5
01AADE  428204     ADD W5, W4, W4
01AAE0  784214     MOV.B [W4], W4
01AAE2  FB8204     ZE W4, W4
01AAE4  9002AE     MOV [W14+4], W5
01AAE6  428204     ADD W5, W4, W4
01AAE8  980724     MOV W4, [W14+4]
24375:                     KiWheelingMem=(float)((int)Tm);
01AAEA  90022E     MOV [W14+4], W4
01AAEC  DEA2CF     ASR W4, #15, W5
01AAEE  BE0004     MOV.D W4, W0
01AAF0  02257C     CALL ___floatsisf
01AAF2  000000     NOP
01AAF4  BE0200     MOV.D W0, W4
01AAF6  889B64     MOV W4, KiWheelingMem
01AAF8  889B75     MOV W5, 0x136E
24376:                     
24377:                     Tm=ProfileMass[33+Prf];
01AAFA  200215     MOV #0x21, W5
01AAFC  42821E     ADD W5, [W14], W4
01AAFE  22DB95     MOV #0x2DB9, W5
01AB00  428204     ADD W5, W4, W4
01AB02  784214     MOV.B [W4], W4
01AB04  FB8204     ZE W4, W4
01AB06  980724     MOV W4, [W14+4]
24378:                     Tm=Tm<<8;
01AB08  90022E     MOV [W14+4], W4
01AB0A  DD2248     SL W4, #8, W4
01AB0C  980724     MOV W4, [W14+4]
24379:                     Tm=Tm+ProfileMass[32+Prf];
01AB0E  200205     MOV #0x20, W5
01AB10  42821E     ADD W5, [W14], W4
01AB12  22DB95     MOV #0x2DB9, W5
01AB14  428204     ADD W5, W4, W4
01AB16  784214     MOV.B [W4], W4
01AB18  FB8204     ZE W4, W4
01AB1A  9002AE     MOV [W14+4], W5
01AB1C  428204     ADD W5, W4, W4
01AB1E  980724     MOV W4, [W14+4]
24380:                     KdNoMan=(float)((int)Tm);        
01AB20  90022E     MOV [W14+4], W4
01AB22  DEA2CF     ASR W4, #15, W5
01AB24  BE0004     MOV.D W4, W0
01AB26  02257C     CALL ___floatsisf
01AB28  000000     NOP
01AB2A  BE0200     MOV.D W0, W4
01AB2C  889C24     MOV W4, KdNoMan
01AB2E  889C35     MOV W5, 0x1386
24381:                     CurrentMaxCurrentOnly=ProfileMass[34+Prf];
01AB30  200225     MOV #0x22, W5
01AB32  42821E     ADD W5, [W14], W4
01AB34  22DB95     MOV #0x2DB9, W5
01AB36  428204     ADD W5, W4, W4
01AB38  784214     MOV.B [W4], W4
01AB3A  212F25     MOV #0x12F2, W5
01AB3C  784A84     MOV.B W4, [W5]
24382:                     CurrentMaxCurrentOnlyWork=((float)CurrentMaxCurrentOnly*1000/**Crr1Corr*/)/CurrPerDigit;
01AB3E  212F24     MOV #0x12F2, W4
01AB40  784214     MOV.B [W4], W4
01AB42  FB8204     ZE W4, W4
01AB44  200005     MOV #0x0, W5
01AB46  BE0004     MOV.D W4, W0
01AB48  022582     CALL ___floatunsisf
01AB4A  000000     NOP
01AB4C  BE0200     MOV.D W0, W4
01AB4E  200002     MOV #0x0, W2
01AB50  2447A3     MOV #0x447A, W3
01AB52  BE0004     MOV.D W4, W0
01AB54  022630     CALL ___mulsf3
01AB56  000000     NOP
01AB58  BE0200     MOV.D W0, W4
01AB5A  BE0304     MOV.D W4, W6
01AB5C  8213C4     MOV CurrPerDigit, W4
01AB5E  8213D5     MOV 0x427A, W5
01AB60  BE0104     MOV.D W4, W2
01AB62  BE0006     MOV.D W6, W0
01AB64  02245A     CALL ___divsf3
01AB66  000000     NOP
01AB68  BE0200     MOV.D W0, W4
01AB6A  898604     MOV W4, CurrentMaxCurrentOnlyWork
01AB6C  898615     MOV W5, 0x30C2
24383:             
24384:                     Tm=ProfileMass[36+Prf];
01AB6E  200245     MOV #0x24, W5
01AB70  42821E     ADD W5, [W14], W4
01AB72  22DB95     MOV #0x2DB9, W5
01AB74  428204     ADD W5, W4, W4
01AB76  784214     MOV.B [W4], W4
01AB78  FB8204     ZE W4, W4
01AB7A  980724     MOV W4, [W14+4]
24385:                     Tm=Tm<<8;
01AB7C  90022E     MOV [W14+4], W4
01AB7E  DD2248     SL W4, #8, W4
01AB80  980724     MOV W4, [W14+4]
24386:                     Tm=Tm+ProfileMass[35+Prf];
01AB82  200235     MOV #0x23, W5
01AB84  42821E     ADD W5, [W14], W4
01AB86  22DB95     MOV #0x2DB9, W5
01AB88  428204     ADD W5, W4, W4
01AB8A  784214     MOV.B [W4], W4
01AB8C  FB8204     ZE W4, W4
01AB8E  9002AE     MOV [W14+4], W5
01AB90  428204     ADD W5, W4, W4
01AB92  980724     MOV W4, [W14+4]
24387:                     Ki_PWM_ModeOff=Tm;
01AB94  90022E     MOV [W14+4], W4
01AB96  200005     MOV #0x0, W5
01AB98  BE0004     MOV.D W4, W0
01AB9A  022582     CALL ___floatunsisf
01AB9C  000000     NOP
01AB9E  BE0200     MOV.D W0, W4
01ABA0  8982C4     MOV W4, Ki_PWM_ModeOff
01ABA2  8982D5     MOV W5, 0x305A
24388:                     Ki_PWM_ModeOff=Ki_PWM_ModeOff/10000;
01ABA4  8182C4     MOV Ki_PWM_ModeOff, W4
01ABA6  8182D5     MOV 0x305A, W5
01ABA8  240002     MOV #0x4000, W2
01ABAA  2461C3     MOV #0x461C, W3
01ABAC  BE0004     MOV.D W4, W0
01ABAE  02245A     CALL ___divsf3
01ABB0  000000     NOP
01ABB2  BE0200     MOV.D W0, W4
01ABB4  8982C4     MOV W4, Ki_PWM_ModeOff
01ABB6  8982D5     MOV W5, 0x305A
24389:             
24390:                     StrongModeSpdFilterOffMem=ProfileMass[37+Prf];
01ABB8  200255     MOV #0x25, W5
01ABBA  42821E     ADD W5, [W14], W4
01ABBC  22DB95     MOV #0x2DB9, W5
01ABBE  428204     ADD W5, W4, W4
01ABC0  784214     MOV.B [W4], W4
01ABC2  22ADE5     MOV #0x2ADE, W5
01ABC4  784A84     MOV.B W4, [W5]
24391:                     StrongModeSpdFilterOff=((float)StrongModeSpdFilterOffMem)/ImpToKmH1_t;
01ABC6  22ADE4     MOV #0x2ADE, W4
01ABC8  784214     MOV.B [W4], W4
01ABCA  FB8204     ZE W4, W4
01ABCC  200005     MOV #0x0, W5
01ABCE  BE0004     MOV.D W4, W0
01ABD0  022582     CALL ___floatunsisf
01ABD2  000000     NOP
01ABD4  BE0300     MOV.D W0, W6
01ABD6  817E24     MOV ImpToKmH1_t, W4
01ABD8  817E35     MOV 0x2FC6, W5
01ABDA  BE0104     MOV.D W4, W2
01ABDC  BE0006     MOV.D W6, W0
01ABDE  02245A     CALL ___divsf3
01ABE0  000000     NOP
01ABE2  BE0200     MOV.D W0, W4
01ABE4  8956D4     MOV W4, StrongModeSpdFilterOff
01ABE6  8956E5     MOV W5, 0x2ADC
24392:             
24393:             //---------------------------------------------------------        
24394:                         if (ProfileMass[38+Prf]&0x01)
01ABE8  200265     MOV #0x26, W5
01ABEA  42821E     ADD W5, [W14], W4
01ABEC  22DB95     MOV #0x2DB9, W5
01ABEE  428204     ADD W5, W4, W4
01ABF0  784214     MOV.B [W4], W4
01ABF2  FB8204     ZE W4, W4
01ABF4  620261     AND W4, #0x1, W4
01ABF6  784204     MOV.B W4, W4
01ABF8  524FE0     SUB.B W4, #0x0, [W15]
01ABFA  320004     BRA Z, 0x1AC04
24395:                             KeyLightStop=1;
01ABFC  809784     MOV StatFlgs4, W4
01ABFE  A00004     BSET W4, #0
01AC00  889784     MOV W4, StatFlgs4
01AC02  370003     BRA 0x1AC0A
24396:                         else
24397:                             KeyLightStop=0;
01AC04  809784     MOV StatFlgs4, W4
01AC06  A10004     BCLR W4, #0
01AC08  889784     MOV W4, StatFlgs4
24398:                         if (ProfileMass[38+Prf]&0x02)
01AC0A  200265     MOV #0x26, W5
01AC0C  42821E     ADD W5, [W14], W4
01AC0E  22DB95     MOV #0x2DB9, W5
01AC10  428204     ADD W5, W4, W4
01AC12  784214     MOV.B [W4], W4
01AC14  FB8204     ZE W4, W4
01AC16  620262     AND W4, #0x2, W4
01AC18  520FE0     SUB W4, #0x0, [W15]
01AC1A  320004     BRA Z, 0x1AC24
24399:                             KeyLightStopGabarit=1;
01AC1C  809784     MOV StatFlgs4, W4
01AC1E  A01004     BSET W4, #1
01AC20  889784     MOV W4, StatFlgs4
01AC22  370003     BRA 0x1AC2A
24400:                         else
24401:                             KeyLightStopGabarit=0;
01AC24  809784     MOV StatFlgs4, W4
01AC26  A11004     BCLR W4, #1
01AC28  889784     MOV W4, StatFlgs4
24402:             //---------------------------------------------------------        
24403:                   
24404:                     
24405:                     if ((But1Func==4)||(But1Func==5))
01AC2A  2401C4     MOV #0x401C, W4
01AC2C  784214     MOV.B [W4], W4
01AC2E  524FE4     SUB.B W4, #0x4, [W15]
01AC30  320004     BRA Z, 0x1AC3A
01AC32  2401C4     MOV #0x401C, W4
01AC34  784214     MOV.B [W4], W4
01AC36  524FE5     SUB.B W4, #0x5, [W15]
01AC38  3A0016     BRA NZ, 0x1AC66
24406:                     {
24407:                         if ((ProfileMass[13]!=4)&&(ProfileMass[13]!=5))
01AC3A  22DC64     MOV #0x2DC6, W4
01AC3C  784214     MOV.B [W4], W4
01AC3E  524FE4     SUB.B W4, #0x4, [W15]
01AC40  320007     BRA Z, 0x1AC50
01AC42  22DC64     MOV #0x2DC6, W4
01AC44  784214     MOV.B [W4], W4
01AC46  524FE5     SUB.B W4, #0x5, [W15]
01AC48  320003     BRA Z, 0x1AC50
24408:                         But1Func=0;
01AC4A  2401C5     MOV #0x401C, W5
01AC4C  EB4200     CLR.B W4
01AC4E  784A84     MOV.B W4, [W5]
24409:                         if ((ProfileMass[13+SIZE_OF_PROFILE]!=4)&&(ProfileMass[13+SIZE_OF_PROFILE]!=5))
01AC50  22E0C4     MOV #0x2E0C, W4
01AC52  784214     MOV.B [W4], W4
01AC54  524FE4     SUB.B W4, #0x4, [W15]
01AC56  320007     BRA Z, 0x1AC66
01AC58  22E0C4     MOV #0x2E0C, W4
01AC5A  784214     MOV.B [W4], W4
01AC5C  524FE5     SUB.B W4, #0x5, [W15]
01AC5E  320003     BRA Z, 0x1AC66
24410:                         But1Func=0;
01AC60  2401C5     MOV #0x401C, W5
01AC62  EB4200     CLR.B W4
01AC64  784A84     MOV.B W4, [W5]
24411:                     }
24412:                     if ((But2Func==4)||(But2Func==5))
01AC66  2401D4     MOV #0x401D, W4
01AC68  784214     MOV.B [W4], W4
01AC6A  524FE4     SUB.B W4, #0x4, [W15]
01AC6C  320004     BRA Z, 0x1AC76
01AC6E  2401D4     MOV #0x401D, W4
01AC70  784214     MOV.B [W4], W4
01AC72  524FE5     SUB.B W4, #0x5, [W15]
01AC74  3A0016     BRA NZ, 0x1ACA2
24413:                     {
24414:                         if ((ProfileMass[14]!=4)&&(ProfileMass[14]!=5))
01AC76  22DC74     MOV #0x2DC7, W4
01AC78  784214     MOV.B [W4], W4
01AC7A  524FE4     SUB.B W4, #0x4, [W15]
01AC7C  320007     BRA Z, 0x1AC8C
01AC7E  22DC74     MOV #0x2DC7, W4
01AC80  784214     MOV.B [W4], W4
01AC82  524FE5     SUB.B W4, #0x5, [W15]
01AC84  320003     BRA Z, 0x1AC8C
24415:                         But2Func=0;
01AC86  2401D5     MOV #0x401D, W5
01AC88  EB4200     CLR.B W4
01AC8A  784A84     MOV.B W4, [W5]
24416:                         if ((ProfileMass[14+SIZE_OF_PROFILE]!=4)&&(ProfileMass[14+SIZE_OF_PROFILE]!=5))
01AC8C  22E0D4     MOV #0x2E0D, W4
01AC8E  784214     MOV.B [W4], W4
01AC90  524FE4     SUB.B W4, #0x4, [W15]
01AC92  320007     BRA Z, 0x1ACA2
01AC94  22E0D4     MOV #0x2E0D, W4
01AC96  784214     MOV.B [W4], W4
01AC98  524FE5     SUB.B W4, #0x5, [W15]
01AC9A  320003     BRA Z, 0x1ACA2
24417:                         But2Func=0;
01AC9C  2401D5     MOV #0x401D, W5
01AC9E  EB4200     CLR.B W4
01ACA0  784A84     MOV.B W4, [W5]
24418:                     }
24419:                     if ((But3Func==4)||(But3Func==5))
01ACA2  2401E4     MOV #0x401E, W4
01ACA4  784214     MOV.B [W4], W4
01ACA6  524FE4     SUB.B W4, #0x4, [W15]
01ACA8  320004     BRA Z, 0x1ACB2
01ACAA  2401E4     MOV #0x401E, W4
01ACAC  784214     MOV.B [W4], W4
01ACAE  524FE5     SUB.B W4, #0x5, [W15]
01ACB0  3A0016     BRA NZ, 0x1ACDE
24420:                     {
24421:                         if ((ProfileMass[15]!=4)&&(ProfileMass[15]!=5))
01ACB2  22DC84     MOV #0x2DC8, W4
01ACB4  784214     MOV.B [W4], W4
01ACB6  524FE4     SUB.B W4, #0x4, [W15]
01ACB8  320007     BRA Z, 0x1ACC8
01ACBA  22DC84     MOV #0x2DC8, W4
01ACBC  784214     MOV.B [W4], W4
01ACBE  524FE5     SUB.B W4, #0x5, [W15]
01ACC0  320003     BRA Z, 0x1ACC8
24422:                         But3Func=0;
01ACC2  2401E5     MOV #0x401E, W5
01ACC4  EB4200     CLR.B W4
01ACC6  784A84     MOV.B W4, [W5]
24423:                         if ((ProfileMass[15+SIZE_OF_PROFILE]!=4)&&(ProfileMass[15+SIZE_OF_PROFILE]!=5))
01ACC8  22E0E4     MOV #0x2E0E, W4
01ACCA  784214     MOV.B [W4], W4
01ACCC  524FE4     SUB.B W4, #0x4, [W15]
01ACCE  320007     BRA Z, 0x1ACDE
01ACD0  22E0E4     MOV #0x2E0E, W4
01ACD2  784214     MOV.B [W4], W4
01ACD4  524FE5     SUB.B W4, #0x5, [W15]
01ACD6  320003     BRA Z, 0x1ACDE
24424:                         But3Func=0;
01ACD8  2401E5     MOV #0x401E, W5
01ACDA  EB4200     CLR.B W4
01ACDC  784A84     MOV.B W4, [W5]
24425:                     }
24426:                     if ((But4Func==4)||(But4Func==5))
01ACDE  2401F4     MOV #0x401F, W4
01ACE0  784214     MOV.B [W4], W4
01ACE2  524FE4     SUB.B W4, #0x4, [W15]
01ACE4  320004     BRA Z, 0x1ACEE
01ACE6  2401F4     MOV #0x401F, W4
01ACE8  784214     MOV.B [W4], W4
01ACEA  524FE5     SUB.B W4, #0x5, [W15]
01ACEC  3A0016     BRA NZ, 0x1AD1A
24427:                     {
24428:                         if ((ProfileMass[16]!=4)&&(ProfileMass[16]!=5))
01ACEE  22DC94     MOV #0x2DC9, W4
01ACF0  784214     MOV.B [W4], W4
01ACF2  524FE4     SUB.B W4, #0x4, [W15]
01ACF4  320007     BRA Z, 0x1AD04
01ACF6  22DC94     MOV #0x2DC9, W4
01ACF8  784214     MOV.B [W4], W4
01ACFA  524FE5     SUB.B W4, #0x5, [W15]
01ACFC  320003     BRA Z, 0x1AD04
24429:                         But4Func=0;
01ACFE  2401F5     MOV #0x401F, W5
01AD00  EB4200     CLR.B W4
01AD02  784A84     MOV.B W4, [W5]
24430:                         if ((ProfileMass[16+SIZE_OF_PROFILE]!=4)&&(ProfileMass[16+SIZE_OF_PROFILE]!=5))
01AD04  22E0F4     MOV #0x2E0F, W4
01AD06  784214     MOV.B [W4], W4
01AD08  524FE4     SUB.B W4, #0x4, [W15]
01AD0A  320007     BRA Z, 0x1AD1A
01AD0C  22E0F4     MOV #0x2E0F, W4
01AD0E  784214     MOV.B [W4], W4
01AD10  524FE5     SUB.B W4, #0x5, [W15]
01AD12  320003     BRA Z, 0x1AD1A
24431:                         But4Func=0;
01AD14  2401F5     MOV #0x401F, W5
01AD16  EB4200     CLR.B W4
01AD18  784A84     MOV.B W4, [W5]
24432:                     }
24433:             
24434:                     
24435:                     
24436:                     
24437:                 }        
24438:             
24439:                     KpMustBe=KpWheelingMem;
01AD1A  809D44     MOV KpWheelingMem, W4
01AD1C  809D55     MOV 0x13AA, W5
01AD1E  889BC4     MOV W4, KpMustBe
01AD20  889BD5     MOV W5, 0x137A
24440:                     KiWheelingMem=KiWheelingMem/1000;
01AD22  809B64     MOV KiWheelingMem, W4
01AD24  809B75     MOV 0x136E, W5
01AD26  200002     MOV #0x0, W2
01AD28  2447A3     MOV #0x447A, W3
01AD2A  BE0004     MOV.D W4, W0
01AD2C  02245A     CALL ___divsf3
01AD2E  000000     NOP
01AD30  BE0200     MOV.D W0, W4
01AD32  889B64     MOV W4, KiWheelingMem
01AD34  889B75     MOV W5, 0x136E
24441:                     KiMustBe=KiWheelingMem;
01AD36  809B64     MOV KiWheelingMem, W4
01AD38  809B75     MOV 0x136E, W5
01AD3A  889B24     MOV W4, KiMustBe
01AD3C  889B35     MOV W5, 0x1366
24442:                     ESumm=0;
01AD3E  B82260     MUL.UU W4, #0, W4
01AD40  889B84     MOV W4, ESumm
01AD42  889B95     MOV W5, 0x1372
24443:             
24444:             
24445:                     KdNoMan=KdNoMan*10;
01AD44  809C24     MOV KdNoMan, W4
01AD46  809C35     MOV 0x1386, W5
01AD48  200002     MOV #0x0, W2
01AD4A  241203     MOV #0x4120, W3
01AD4C  BE0004     MOV.D W4, W0
01AD4E  022630     CALL ___mulsf3
01AD50  000000     NOP
01AD52  BE0200     MOV.D W0, W4
01AD54  889C24     MOV W4, KdNoMan
01AD56  889C35     MOV W5, 0x1386
24446:                     
24447:                     if (KiMustBe==65535)
01AD58  809B24     MOV KiMustBe, W4
01AD5A  809B35     MOV 0x1366, W5
01AD5C  2FF002     MOV #0xFF00, W2
01AD5E  2477F3     MOV #0x477F, W3
01AD60  BE0004     MOV.D W4, W0
01AD62  0224FC     CALL ___lesf2
01AD64  000000     NOP
01AD66  780200     MOV W0, W4
01AD68  520FE0     SUB W4, #0x0, [W15]
01AD6A  3A0006     BRA NZ, 0x1AD78
24448:                     {
24449:                         KiWheelingMem=0;
01AD6C  B82260     MUL.UU W4, #0, W4
01AD6E  889B64     MOV W4, KiWheelingMem
01AD70  889B75     MOV W5, 0x136E
24450:                         KiMustBe=0;
01AD72  B82260     MUL.UU W4, #0, W4
01AD74  889B24     MOV W4, KiMustBe
01AD76  889B35     MOV W5, 0x1366
24451:                     }
24452:                         
24453:                     if (KpMustBe==65535)
01AD78  809BC4     MOV KpMustBe, W4
01AD7A  809BD5     MOV 0x137A, W5
01AD7C  2FF002     MOV #0xFF00, W2
01AD7E  2477F3     MOV #0x477F, W3
01AD80  BE0004     MOV.D W4, W0
01AD82  0224FC     CALL ___lesf2
01AD84  000000     NOP
01AD86  780200     MOV W0, W4
01AD88  520FE0     SUB W4, #0x0, [W15]
01AD8A  3A0006     BRA NZ, 0x1AD98
24454:                     {
24455:                         KpWheelingMem=0;
01AD8C  B82260     MUL.UU W4, #0, W4
01AD8E  889D44     MOV W4, KpWheelingMem
01AD90  889D55     MOV W5, 0x13AA
24456:                         KpMustBe=0;
01AD92  B82260     MUL.UU W4, #0, W4
01AD94  889BC4     MOV W4, KpMustBe
01AD96  889BD5     MOV W5, 0x137A
24457:                     }
24458:                     
24459:                 
24460:                     if (StrongModeMem)
01AD98  809764     MOV StatFlgs2, W4
01AD9A  620264     AND W4, #0x4, W4
01AD9C  520FE0     SUB W4, #0x0, [W15]
01AD9E  320007     BRA Z, 0x1ADAE
24461:                     {
24462:                         PrevStrongMode=1;
01ADA0  809694     MOV 0x12D2, W4
01ADA2  A0A004     BSET W4, #10
01ADA4  889694     MOV W4, 0x12D2
24463:                         StrongMode=1;
01ADA6  8095F4     MOV 0x12BE, W4
01ADA8  A0E004     BSET W4, #14
01ADAA  8895F4     MOV W4, 0x12BE
01ADAC  370006     BRA 0x1ADBA
24464:                     }
24465:                     else
24466:                     {
24467:                         StrongMode=0;
01ADAE  8095F4     MOV 0x12BE, W4
01ADB0  A1E004     BCLR W4, #14
01ADB2  8895F4     MOV W4, 0x12BE
24468:                         PrevStrongMode=0;
01ADB4  809694     MOV 0x12D2, W4
01ADB6  A1A004     BCLR W4, #10
01ADB8  889694     MOV W4, 0x12D2
24469:                     }
24470:             
24471:             
24472:                 
24473:                 if ((VectorMem)&&(!Sensorless))
01ADBA  809755     MOV StatFlgs1, W5
01ADBC  204004     MOV #0x400, W4
01ADBE  628204     AND W5, W4, W4
01ADC0  520FE0     SUB W4, #0x0, [W15]
01ADC2  320009     BRA Z, 0x1ADD6
01ADC4  809755     MOV StatFlgs1, W5
01ADC6  200204     MOV #0x20, W4
01ADC8  628204     AND W5, W4, W4
01ADCA  520FE0     SUB W4, #0x0, [W15]
01ADCC  3A0004     BRA NZ, 0x1ADD6
24474:                     Vector=1;
01ADCE  809684     MOV Flgs5, W4
01ADD0  A04004     BSET W4, #4
01ADD2  889684     MOV W4, Flgs5
01ADD4  370003     BRA 0x1ADDC
24475:                 else
24476:                     Vector=0;
01ADD6  809684     MOV Flgs5, W4
01ADD8  A14004     BCLR W4, #4
01ADDA  889684     MOV W4, Flgs5
24477:             
24478:             //    if (!Sensorless)
24479:                     CurrUst=CurrUstWork;
01ADDC  81F4E4     MOV CurrUstWork, W4
01ADDE  89F494     MOV W4, CurrUst
24480:               //  else
24481:             //        CurrUst=SensorlessCurrUst;
24482:             
24483:             
24484:                 if ((!Sensorless)&&(!CurrDecrease))
01ADE0  809755     MOV StatFlgs1, W5
01ADE2  200204     MOV #0x20, W4
01ADE4  628204     AND W5, W4, W4
01ADE6  520FE0     SUB W4, #0x0, [W15]
01ADE8  3A0007     BRA NZ, 0x1ADF8
01ADEA  8096A4     MOV Flgs6, W4
01ADEC  620270     AND W4, #0x10, W4
01ADEE  520FE0     SUB W4, #0x0, [W15]
01ADF0  3A0003     BRA NZ, 0x1ADF8
24485:                     CurrLimit=CurrLimitWork;
01ADF2  80C1A4     MOV CurrLimitWork, W4
01ADF4  88C194     MOV W4, CurrLimit
01ADF6  370007     BRA 0x1AE06
24486:                 else
24487:                     if (Sensorless)
01ADF8  809755     MOV StatFlgs1, W5
01ADFA  200204     MOV #0x20, W4
01ADFC  628204     AND W5, W4, W4
01ADFE  520FE0     SUB W4, #0x0, [W15]
01AE00  320002     BRA Z, 0x1AE06
24488:                 CurrLimit=SensorLessCurrLimit;
01AE02  80C1B4     MOV SensorLessCurrLimit, W4
01AE04  88C194     MOV W4, CurrLimit
24489:                 ChangeCVR();
01AE06  07A5F1     RCALL ChangeCVR
24490:             
24491:                 MAX_PWM_MustBe=MAX_PWM_MEM;
01AE08  809984     MOV MAX_PWM_MEM, W4
01AE0A  8899B4     MOV W4, MAX_PWM_MustBe
24492:                 if (MAX_PWM_MEM>100)
01AE0C  809985     MOV MAX_PWM_MEM, W5
01AE0E  200644     MOV #0x64, W4
01AE10  528F84     SUB W5, W4, [W15]
01AE12  360002     BRA LEU, 0x1AE18
24493:                     MAX_PWM_MEM=100;
01AE14  200644     MOV #0x64, W4
01AE16  889984     MOV W4, MAX_PWM_MEM
24494:                 
24495:                 MaxSpdCoeff=(int)((((float)MAX_PWM)*ImpToKmH1_t)/((float)MaxSpd/ImpToKmH1_t));
01AE18  8212F4     MOV MAX_PWM, W4
01AE1A  DEA2CF     ASR W4, #15, W5
01AE1C  BE0004     MOV.D W4, W0
01AE1E  02257C     CALL ___floatsisf
01AE20  000000     NOP
01AE22  BE0300     MOV.D W0, W6
01AE24  817E24     MOV ImpToKmH1_t, W4
01AE26  817E35     MOV 0x2FC6, W5
01AE28  BE0104     MOV.D W4, W2
01AE2A  BE0006     MOV.D W6, W0
01AE2C  022630     CALL ___mulsf3
01AE2E  000000     NOP
01AE30  BE0200     MOV.D W0, W4
01AE32  BE0404     MOV.D W4, W8
01AE34  230C54     MOV #0x30C5, W4
01AE36  784214     MOV.B [W4], W4
01AE38  FB8204     ZE W4, W4
01AE3A  200005     MOV #0x0, W5
01AE3C  BE0004     MOV.D W4, W0
01AE3E  022582     CALL ___floatunsisf
01AE40  000000     NOP
01AE42  BE0300     MOV.D W0, W6
01AE44  817E24     MOV ImpToKmH1_t, W4
01AE46  817E35     MOV 0x2FC6, W5
01AE48  BE0104     MOV.D W4, W2
01AE4A  BE0006     MOV.D W6, W0
01AE4C  02245A     CALL ___divsf3
01AE4E  000000     NOP
01AE50  BE0200     MOV.D W0, W4
01AE52  BE0104     MOV.D W4, W2
01AE54  BE0008     MOV.D W8, W0
01AE56  02245A     CALL ___divsf3
01AE58  000000     NOP
01AE5A  BE0200     MOV.D W0, W4
01AE5C  BE0004     MOV.D W4, W0
01AE5E  022504     CALL ___fixsfsi
01AE60  000000     NOP
01AE62  BE0200     MOV.D W0, W4
01AE64  780204     MOV W4, W4
01AE66  888774     MOV W4, MaxSpdCoeff
24496:                     MAX_PWM_MustBe=MAX_PWM_MEM;
01AE68  809984     MOV MAX_PWM_MEM, W4
01AE6A  8899B4     MOV W4, MAX_PWM_MustBe
24497:             /*                                       if (1)//(PWM32Bits)
24498:                                                    {
24499:                                                     MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
24500:                                                     
24501:                                                    }
24502:                                                     else
24503:                                                     {
24504:                                                     MAX_PWM_CONST=MAX_PWM_CONST_EBIKE;
24505:                                                     
24506:                                                     }*/
24507:             
24508:             #if defined ISOLATED
24509:                     Sensorless=0;
24510:             #endif        
24511:                     
24512:                     if (Sensorless)
01AE6C  809755     MOV StatFlgs1, W5
01AE6E  200204     MOV #0x20, W4
01AE70  628204     AND W5, W4, W4
01AE72  520FE0     SUB W4, #0x0, [W15]
01AE74  320003     BRA Z, 0x1AE7C
24513:                 SensorlessInit();
01AE76  0285F4     CALL SensorlessInit
01AE78  000000     NOP
01AE7A  370007     BRA 0x1AE8A
24514:                     else
24515:                     {
24516:                         if (Vector)
01AE7C  809684     MOV Flgs5, W4
01AE7E  620270     AND W4, #0x10, W4
01AE80  520FE0     SUB W4, #0x0, [W15]
01AE82  320002     BRA Z, 0x1AE88
24517:                     VectorInit();
01AE84  07CA49     RCALL VectorInit
01AE86  370001     BRA 0x1AE8A
24518:                 else
24519:                     TrapeziumInit();
01AE88  07CAFE     RCALL TrapeziumInit
24520:                     }
24521:                     
24522:                 if (SpdCntrTmp!=SpeedControl)
01AE8A  809754     MOV StatFlgs1, W4
01AE8C  D10204     LSR W4, W4
01AE8E  624261     AND.B W4, #0x1, W4
01AE90  784284     MOV.B W4, W5
01AE92  90422E     MOV.B [W14+2], W4
01AE94  52CF84     SUB.B W5, W4, [W15]
01AE96  32000A     BRA Z, 0x1AEAC
24523:                 {
24524:                     if (!SpeedControl)
01AE98  809754     MOV StatFlgs1, W4
01AE9A  620262     AND W4, #0x2, W4
01AE9C  520FE0     SUB W4, #0x0, [W15]
01AE9E  3A0003     BRA NZ, 0x1AEA6
24525:                     PID_On=0;
01AEA0  809654     MOV 0x12CA, W4
01AEA2  A19004     BCLR W4, #9
01AEA4  889654     MOV W4, 0x12CA
24526:                 ECurr1Summ=0;
01AEA6  B82260     MUL.UU W4, #0, W4
01AEA8  89F564     MOV W4, ECurr1Summ
01AEAA  89F575     MOV W5, 0x3EAE
24527:                 }
24528:                     
24529:             }
01AEAC  BE044F     MOV.D [--W15], W8
01AEAE  FA8000     ULNK
01AEB0  060000     RETURN
24530:             
24531:             
24532:             void DefaultProfileOptions(void)
24533:             {
01AEB2  FA0002     LNK #0x2
24534:                 unsigned int Prf=0;
01AEB4  EB0200     CLR W4
01AEB6  780F04     MOV W4, [W14]
24535:             
24536:             
24537:                 
24538:                     
24539:                     ProfileMass[1+Prf]=0;//HallDelayMem1_F;
01AEB8  E8021E     INC [W14], W4
01AEBA  22DB95     MOV #0x2DB9, W5
01AEBC  428284     ADD W5, W4, W5
01AEBE  EB4200     CLR.B W4
01AEC0  784A84     MOV.B W4, [W5]
24540:                     ProfileMass[2+Prf]=0;//HallDelayMem1_B;
01AEC2  E8821E     INC2 [W14], W4
01AEC4  22DB95     MOV #0x2DB9, W5
01AEC6  428284     ADD W5, W4, W5
01AEC8  EB4200     CLR.B W4
01AECA  784A84     MOV.B W4, [W5]
24541:                     
24542:                     
24543:                     ProfileMass[3+Prf]=0;
01AECC  78029E     MOV [W14], W5
01AECE  428263     ADD W5, #0x3, W4
01AED0  22DB95     MOV #0x2DB9, W5
01AED2  428284     ADD W5, W4, W5
01AED4  EB4200     CLR.B W4
01AED6  784A84     MOV.B W4, [W5]
24544:                     ProfileMass[4+Prf]=0;
01AED8  78031E     MOV [W14], W6
01AEDA  430264     ADD W6, #0x4, W4
01AEDC  22DB95     MOV #0x2DB9, W5
01AEDE  428284     ADD W5, W4, W5
01AEE0  EB4200     CLR.B W4
01AEE2  784A84     MOV.B W4, [W5]
24545:                     ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x8;
01AEE4  78021E     MOV [W14], W4
01AEE6  4202E3     ADD W4, #0x3, W5
01AEE8  78031E     MOV [W14], W6
01AEEA  430263     ADD W6, #0x3, W4
01AEEC  22DB96     MOV #0x2DB9, W6
01AEEE  430204     ADD W6, W4, W4
01AEF0  784214     MOV.B [W4], W4
01AEF2  A03404     BSET.B W4, #3
01AEF4  22DB96     MOV #0x2DB9, W6
01AEF6  430285     ADD W6, W5, W5
01AEF8  784A84     MOV.B W4, [W5]
24546:                     
24547:                     ProfileMass[5+Prf]=62;//CurrUstWork;
01AEFA  78029E     MOV [W14], W5
01AEFC  428265     ADD W5, #0x5, W4
01AEFE  22DB95     MOV #0x2DB9, W5
01AF00  428284     ADD W5, W4, W5
01AF02  B3C3E4     MOV.B #0x3E, W4
01AF04  784A84     MOV.B W4, [W5]
24548:                     ProfileMass[6+Prf]=0;
01AF06  78031E     MOV [W14], W6
01AF08  430266     ADD W6, #0x6, W4
01AF0A  22DB95     MOV #0x2DB9, W5
01AF0C  428284     ADD W5, W4, W5
01AF0E  EB4200     CLR.B W4
01AF10  784A84     MOV.B W4, [W5]
24549:                     ProfileMass[7+Prf]=1;//CurrLimitWork;
01AF12  78029E     MOV [W14], W5
01AF14  428267     ADD W5, #0x7, W4
01AF16  22DB95     MOV #0x2DB9, W5
01AF18  428284     ADD W5, W4, W5
01AF1A  B3C014     MOV.B #0x1, W4
01AF1C  784A84     MOV.B W4, [W5]
24550:                     ProfileMass[8+Prf]=0;
01AF1E  78031E     MOV [W14], W6
01AF20  430268     ADD W6, #0x8, W4
01AF22  22DB95     MOV #0x2DB9, W5
01AF24  428284     ADD W5, W4, W5
01AF26  EB4200     CLR.B W4
01AF28  784A84     MOV.B W4, [W5]
24551:                     ProfileMass[9+Prf]=1;//PhasePERMASS;
01AF2A  78029E     MOV [W14], W5
01AF2C  428269     ADD W5, #0x9, W4
01AF2E  22DB95     MOV #0x2DB9, W5
01AF30  428284     ADD W5, W4, W5
01AF32  B3C014     MOV.B #0x1, W4
01AF34  784A84     MOV.B W4, [W5]
24552:                     ProfileMass[10+Prf]=0;//PhasePERMASS_SHFT;
01AF36  78031E     MOV [W14], W6
01AF38  43026A     ADD W6, #0xA, W4
01AF3A  22DB95     MOV #0x2DB9, W5
01AF3C  428284     ADD W5, W4, W5
01AF3E  EB4200     CLR.B W4
01AF40  784A84     MOV.B W4, [W5]
24553:                     ProfileMass[11+Prf]=50;
01AF42  78029E     MOV [W14], W5
01AF44  42826B     ADD W5, #0xB, W4
01AF46  22DB95     MOV #0x2DB9, W5
01AF48  428284     ADD W5, W4, W5
01AF4A  B3C324     MOV.B #0x32, W4
01AF4C  784A84     MOV.B W4, [W5]
24554:                     ProfileMass[12+Prf]=30;
01AF4E  78031E     MOV [W14], W6
01AF50  43026C     ADD W6, #0xC, W4
01AF52  22DB95     MOV #0x2DB9, W5
01AF54  428284     ADD W5, W4, W5
01AF56  B3C1E4     MOV.B #0x1E, W4
01AF58  784A84     MOV.B W4, [W5]
24555:                             
24556:                     ProfileMass[13+Prf]=0;
01AF5A  78029E     MOV [W14], W5
01AF5C  42826D     ADD W5, #0xD, W4
01AF5E  22DB95     MOV #0x2DB9, W5
01AF60  428284     ADD W5, W4, W5
01AF62  EB4200     CLR.B W4
01AF64  784A84     MOV.B W4, [W5]
24557:                     ProfileMass[14+Prf]=0;
01AF66  78031E     MOV [W14], W6
01AF68  43026E     ADD W6, #0xE, W4
01AF6A  22DB95     MOV #0x2DB9, W5
01AF6C  428284     ADD W5, W4, W5
01AF6E  EB4200     CLR.B W4
01AF70  784A84     MOV.B W4, [W5]
24558:                     ProfileMass[15+Prf]=0;
01AF72  78029E     MOV [W14], W5
01AF74  42826F     ADD W5, #0xF, W4
01AF76  22DB95     MOV #0x2DB9, W5
01AF78  428284     ADD W5, W4, W5
01AF7A  EB4200     CLR.B W4
01AF7C  784A84     MOV.B W4, [W5]
24559:                     ProfileMass[16+Prf]=0;
01AF7E  78031E     MOV [W14], W6
01AF80  430270     ADD W6, #0x10, W4
01AF82  22DB95     MOV #0x2DB9, W5
01AF84  428284     ADD W5, W4, W5
01AF86  EB4200     CLR.B W4
01AF88  784A84     MOV.B W4, [W5]
24560:             
24561:                 Prf=SIZE_OF_PROFILE;
01AF8A  200464     MOV #0x46, W4
01AF8C  780F04     MOV W4, [W14]
24562:                 
24563:                       
24564:                     ProfileMass[1+Prf]=0;//HallDelayMem1_F;
01AF8E  E8021E     INC [W14], W4
01AF90  22DB95     MOV #0x2DB9, W5
01AF92  428284     ADD W5, W4, W5
01AF94  EB4200     CLR.B W4
01AF96  784A84     MOV.B W4, [W5]
24565:                     ProfileMass[2+Prf]=0;//HallDelayMem1_B;
01AF98  E8821E     INC2 [W14], W4
01AF9A  22DB95     MOV #0x2DB9, W5
01AF9C  428284     ADD W5, W4, W5
01AF9E  EB4200     CLR.B W4
01AFA0  784A84     MOV.B W4, [W5]
24566:                     
24567:                     
24568:                     ProfileMass[3+Prf]=0;
01AFA2  78029E     MOV [W14], W5
01AFA4  428263     ADD W5, #0x3, W4
01AFA6  22DB95     MOV #0x2DB9, W5
01AFA8  428284     ADD W5, W4, W5
01AFAA  EB4200     CLR.B W4
01AFAC  784A84     MOV.B W4, [W5]
24569:                     ProfileMass[4+Prf]=0;
01AFAE  78031E     MOV [W14], W6
01AFB0  430264     ADD W6, #0x4, W4
01AFB2  22DB95     MOV #0x2DB9, W5
01AFB4  428284     ADD W5, W4, W5
01AFB6  EB4200     CLR.B W4
01AFB8  784A84     MOV.B W4, [W5]
24570:                     ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x8;
01AFBA  78021E     MOV [W14], W4
01AFBC  4202E3     ADD W4, #0x3, W5
01AFBE  78031E     MOV [W14], W6
01AFC0  430263     ADD W6, #0x3, W4
01AFC2  22DB96     MOV #0x2DB9, W6
01AFC4  430204     ADD W6, W4, W4
01AFC6  784214     MOV.B [W4], W4
01AFC8  A03404     BSET.B W4, #3
01AFCA  22DB96     MOV #0x2DB9, W6
01AFCC  430285     ADD W6, W5, W5
01AFCE  784A84     MOV.B W4, [W5]
24571:                     
24572:                     ProfileMass[5+Prf]=62;//CurrUstWork;
01AFD0  78029E     MOV [W14], W5
01AFD2  428265     ADD W5, #0x5, W4
01AFD4  22DB95     MOV #0x2DB9, W5
01AFD6  428284     ADD W5, W4, W5
01AFD8  B3C3E4     MOV.B #0x3E, W4
01AFDA  784A84     MOV.B W4, [W5]
24573:                     ProfileMass[6+Prf]=0;
01AFDC  78031E     MOV [W14], W6
01AFDE  430266     ADD W6, #0x6, W4
01AFE0  22DB95     MOV #0x2DB9, W5
01AFE2  428284     ADD W5, W4, W5
01AFE4  EB4200     CLR.B W4
01AFE6  784A84     MOV.B W4, [W5]
24574:                     ProfileMass[7+Prf]=1;//CurrLimitWork;
01AFE8  78029E     MOV [W14], W5
01AFEA  428267     ADD W5, #0x7, W4
01AFEC  22DB95     MOV #0x2DB9, W5
01AFEE  428284     ADD W5, W4, W5
01AFF0  B3C014     MOV.B #0x1, W4
01AFF2  784A84     MOV.B W4, [W5]
24575:                     ProfileMass[8+Prf]=0;
01AFF4  78031E     MOV [W14], W6
01AFF6  430268     ADD W6, #0x8, W4
01AFF8  22DB95     MOV #0x2DB9, W5
01AFFA  428284     ADD W5, W4, W5
01AFFC  EB4200     CLR.B W4
01AFFE  784A84     MOV.B W4, [W5]
24576:                     ProfileMass[9+Prf]=1;//PhasePERMASS;
01B000  78029E     MOV [W14], W5
01B002  428269     ADD W5, #0x9, W4
01B004  22DB95     MOV #0x2DB9, W5
01B006  428284     ADD W5, W4, W5
01B008  B3C014     MOV.B #0x1, W4
01B00A  784A84     MOV.B W4, [W5]
24577:                     ProfileMass[10+Prf]=0;//PhasePERMASS_SHFT;
01B00C  78031E     MOV [W14], W6
01B00E  43026A     ADD W6, #0xA, W4
01B010  22DB95     MOV #0x2DB9, W5
01B012  428284     ADD W5, W4, W5
01B014  EB4200     CLR.B W4
01B016  784A84     MOV.B W4, [W5]
24578:             
24579:                     ProfileMass[11+Prf]=75;
01B018  78029E     MOV [W14], W5
01B01A  42826B     ADD W5, #0xB, W4
01B01C  22DB95     MOV #0x2DB9, W5
01B01E  428284     ADD W5, W4, W5
01B020  B3C4B4     MOV.B #0x4B, W4
01B022  784A84     MOV.B W4, [W5]
24580:                     ProfileMass[12+Prf]=45;
01B024  78031E     MOV [W14], W6
01B026  43026C     ADD W6, #0xC, W4
01B028  22DB95     MOV #0x2DB9, W5
01B02A  428284     ADD W5, W4, W5
01B02C  B3C2D4     MOV.B #0x2D, W4
01B02E  784A84     MOV.B W4, [W5]
24581:             
24582:                     ProfileMass[13+Prf]=0;
01B030  78029E     MOV [W14], W5
01B032  42826D     ADD W5, #0xD, W4
01B034  22DB95     MOV #0x2DB9, W5
01B036  428284     ADD W5, W4, W5
01B038  EB4200     CLR.B W4
01B03A  784A84     MOV.B W4, [W5]
24583:                     ProfileMass[14+Prf]=0;
01B03C  78031E     MOV [W14], W6
01B03E  43026E     ADD W6, #0xE, W4
01B040  22DB95     MOV #0x2DB9, W5
01B042  428284     ADD W5, W4, W5
01B044  EB4200     CLR.B W4
01B046  784A84     MOV.B W4, [W5]
24584:                     ProfileMass[15+Prf]=0;
01B048  78029E     MOV [W14], W5
01B04A  42826F     ADD W5, #0xF, W4
01B04C  22DB95     MOV #0x2DB9, W5
01B04E  428284     ADD W5, W4, W5
01B050  EB4200     CLR.B W4
01B052  784A84     MOV.B W4, [W5]
24585:                     ProfileMass[16+Prf]=0;
01B054  78031E     MOV [W14], W6
01B056  430270     ADD W6, #0x10, W4
01B058  22DB95     MOV #0x2DB9, W5
01B05A  428284     ADD W5, W4, W5
01B05C  EB4200     CLR.B W4
01B05E  784A84     MOV.B W4, [W5]
24586:             
24587:             
24588:             
24589:                 Prf=SIZE_OF_PROFILE*2;
01B060  2008C4     MOV #0x8C, W4
01B062  780F04     MOV W4, [W14]
24590:             
24591:                      
24592:                     ProfileMass[1+Prf]=0;//HallDelayMem1_F;
01B064  E8021E     INC [W14], W4
01B066  22DB95     MOV #0x2DB9, W5
01B068  428284     ADD W5, W4, W5
01B06A  EB4200     CLR.B W4
01B06C  784A84     MOV.B W4, [W5]
24593:                     ProfileMass[2+Prf]=0;//HallDelayMem1_B;
01B06E  E8821E     INC2 [W14], W4
01B070  22DB95     MOV #0x2DB9, W5
01B072  428284     ADD W5, W4, W5
01B074  EB4200     CLR.B W4
01B076  784A84     MOV.B W4, [W5]
24594:                     
24595:                     
24596:                     ProfileMass[3+Prf]=0;
01B078  78029E     MOV [W14], W5
01B07A  428263     ADD W5, #0x3, W4
01B07C  22DB95     MOV #0x2DB9, W5
01B07E  428284     ADD W5, W4, W5
01B080  EB4200     CLR.B W4
01B082  784A84     MOV.B W4, [W5]
24597:                     ProfileMass[4+Prf]=0;
01B084  78031E     MOV [W14], W6
01B086  430264     ADD W6, #0x4, W4
01B088  22DB95     MOV #0x2DB9, W5
01B08A  428284     ADD W5, W4, W5
01B08C  EB4200     CLR.B W4
01B08E  784A84     MOV.B W4, [W5]
24598:                     ProfileMass[3+Prf]=ProfileMass[3+Prf]|0x8;
01B090  78021E     MOV [W14], W4
01B092  4202E3     ADD W4, #0x3, W5
01B094  78031E     MOV [W14], W6
01B096  430263     ADD W6, #0x3, W4
01B098  22DB96     MOV #0x2DB9, W6
01B09A  430204     ADD W6, W4, W4
01B09C  784214     MOV.B [W4], W4
01B09E  A03404     BSET.B W4, #3
01B0A0  22DB96     MOV #0x2DB9, W6
01B0A2  430285     ADD W6, W5, W5
01B0A4  784A84     MOV.B W4, [W5]
24599:                     
24600:                     ProfileMass[5+Prf]=62;//CurrUstWork;
01B0A6  78029E     MOV [W14], W5
01B0A8  428265     ADD W5, #0x5, W4
01B0AA  22DB95     MOV #0x2DB9, W5
01B0AC  428284     ADD W5, W4, W5
01B0AE  B3C3E4     MOV.B #0x3E, W4
01B0B0  784A84     MOV.B W4, [W5]
24601:                     ProfileMass[6+Prf]=0;
01B0B2  78031E     MOV [W14], W6
01B0B4  430266     ADD W6, #0x6, W4
01B0B6  22DB95     MOV #0x2DB9, W5
01B0B8  428284     ADD W5, W4, W5
01B0BA  EB4200     CLR.B W4
01B0BC  784A84     MOV.B W4, [W5]
24602:                     ProfileMass[7+Prf]=1;//CurrLimitWork;
01B0BE  78029E     MOV [W14], W5
01B0C0  428267     ADD W5, #0x7, W4
01B0C2  22DB95     MOV #0x2DB9, W5
01B0C4  428284     ADD W5, W4, W5
01B0C6  B3C014     MOV.B #0x1, W4
01B0C8  784A84     MOV.B W4, [W5]
24603:                     ProfileMass[8+Prf]=0;
01B0CA  78031E     MOV [W14], W6
01B0CC  430268     ADD W6, #0x8, W4
01B0CE  22DB95     MOV #0x2DB9, W5
01B0D0  428284     ADD W5, W4, W5
01B0D2  EB4200     CLR.B W4
01B0D4  784A84     MOV.B W4, [W5]
24604:                     ProfileMass[9+Prf]=1;//PhasePERMASS;
01B0D6  78029E     MOV [W14], W5
01B0D8  428269     ADD W5, #0x9, W4
01B0DA  22DB95     MOV #0x2DB9, W5
01B0DC  428284     ADD W5, W4, W5
01B0DE  B3C014     MOV.B #0x1, W4
01B0E0  784A84     MOV.B W4, [W5]
24605:                     ProfileMass[10+Prf]=0;//PhasePERMASS_SHFT;
01B0E2  78031E     MOV [W14], W6
01B0E4  43026A     ADD W6, #0xA, W4
01B0E6  22DB95     MOV #0x2DB9, W5
01B0E8  428284     ADD W5, W4, W5
01B0EA  EB4200     CLR.B W4
01B0EC  784A84     MOV.B W4, [W5]
24606:             
24607:                     ProfileMass[11+Prf]=100;
01B0EE  78029E     MOV [W14], W5
01B0F0  42826B     ADD W5, #0xB, W4
01B0F2  22DB95     MOV #0x2DB9, W5
01B0F4  428284     ADD W5, W4, W5
01B0F6  B3C644     MOV.B #0x64, W4
01B0F8  784A84     MOV.B W4, [W5]
24608:                     ProfileMass[12+Prf]=60;
01B0FA  78031E     MOV [W14], W6
01B0FC  43026C     ADD W6, #0xC, W4
01B0FE  22DB95     MOV #0x2DB9, W5
01B100  428284     ADD W5, W4, W5
01B102  B3C3C4     MOV.B #0x3C, W4
01B104  784A84     MOV.B W4, [W5]
24609:             
24610:             
24611:                     ProfileMass[13+Prf]=0;
01B106  78029E     MOV [W14], W5
01B108  42826D     ADD W5, #0xD, W4
01B10A  22DB95     MOV #0x2DB9, W5
01B10C  428284     ADD W5, W4, W5
01B10E  EB4200     CLR.B W4
01B110  784A84     MOV.B W4, [W5]
24612:                     ProfileMass[14+Prf]=0;
01B112  78031E     MOV [W14], W6
01B114  43026E     ADD W6, #0xE, W4
01B116  22DB95     MOV #0x2DB9, W5
01B118  428284     ADD W5, W4, W5
01B11A  EB4200     CLR.B W4
01B11C  784A84     MOV.B W4, [W5]
24613:                     ProfileMass[15+Prf]=0;
01B11E  78029E     MOV [W14], W5
01B120  42826F     ADD W5, #0xF, W4
01B122  22DB95     MOV #0x2DB9, W5
01B124  428284     ADD W5, W4, W5
01B126  EB4200     CLR.B W4
01B128  784A84     MOV.B W4, [W5]
24614:                     ProfileMass[16+Prf]=0;
01B12A  78031E     MOV [W14], W6
01B12C  430270     ADD W6, #0x10, W4
01B12E  22DB95     MOV #0x2DB9, W5
01B130  428284     ADD W5, W4, W5
01B132  EB4200     CLR.B W4
01B134  784A84     MOV.B W4, [W5]
24615:                     
24616:             
24617:                 
24618:             
24619:             
24620:             }
01B136  FA8000     ULNK
01B138  060000     RETURN
24621:             
24622:             
24623:             void ChangeProfile(void)
24624:             {
01B13A  FA0002     LNK #0x2
24625:             unsigned char ProfileTMP=Profile;
01B13C  237E24     MOV #0x37E2, W4
01B13E  784F14     MOV.B [W4], [W14]
24626:             
24627:             
24628:                 if (HvBt4)
01B140  809605     MOV Flgs1, W5
01B142  202004     MOV #0x200, W4
01B144  628204     AND W5, W4, W4
01B146  520FE0     SUB W4, #0x0, [W15]
01B148  320018     BRA Z, 0x1B17A
24629:                 {
24630:                     HvBt4=0;
01B14A  809604     MOV Flgs1, W4
01B14C  A19004     BCLR W4, #9
01B14E  889604     MOV W4, Flgs1
24631:                     switch (_3psnSwitchBt4)
01B150  214064     MOV #0x1406, W4
01B152  784214     MOV.B [W4], W4
01B154  FB8204     ZE W4, W4
01B156  520FE2     SUB W4, #0x2, [W15]
01B158  320008     BRA Z, 0x1B16A
01B15A  520FE3     SUB W4, #0x3, [W15]
01B15C  32000A     BRA Z, 0x1B172
01B15E  520FE1     SUB W4, #0x1, [W15]
01B160  3A000C     BRA NZ, 0x1B17A
24632:                     {
24633:                         case 1: 
24634:                             Profile=1;
01B162  237E25     MOV #0x37E2, W5
01B164  B3C014     MOV.B #0x1, W4
01B166  784A84     MOV.B W4, [W5]
24635:                             break;
01B168  370008     BRA 0x1B17A
24636:                         case 2: 
24637:                             Profile=2;
01B16A  237E25     MOV #0x37E2, W5
01B16C  B3C024     MOV.B #0x2, W4
01B16E  784A84     MOV.B W4, [W5]
24638:                             break;
01B170  370004     BRA 0x1B17A
24639:                         case 3: 
24640:                             Profile=3;
01B172  237E25     MOV #0x37E2, W5
01B174  B3C034     MOV.B #0x3, W4
01B176  784A84     MOV.B W4, [W5]
24641:                             break;
01B178  000000     NOP
24642:                     }
24643:                 }
24644:                 if (HvBt3)
01B17A  809684     MOV Flgs5, W4
01B17C  620262     AND W4, #0x2, W4
01B17E  520FE0     SUB W4, #0x0, [W15]
01B180  320018     BRA Z, 0x1B1B2
24645:                 {
24646:                     HvBt3=0;
01B182  809684     MOV Flgs5, W4
01B184  A11004     BCLR W4, #1
01B186  889684     MOV W4, Flgs5
24647:                     switch (_3psnSwitchBt3)
01B188  214054     MOV #0x1405, W4
01B18A  784214     MOV.B [W4], W4
01B18C  FB8204     ZE W4, W4
01B18E  520FE2     SUB W4, #0x2, [W15]
01B190  320008     BRA Z, 0x1B1A2
01B192  520FE3     SUB W4, #0x3, [W15]
01B194  32000A     BRA Z, 0x1B1AA
01B196  520FE1     SUB W4, #0x1, [W15]
01B198  3A000C     BRA NZ, 0x1B1B2
24648:                     {
24649:                         case 1: 
24650:                             Profile=1;
01B19A  237E25     MOV #0x37E2, W5
01B19C  B3C014     MOV.B #0x1, W4
01B19E  784A84     MOV.B W4, [W5]
24651:                             break;
01B1A0  370008     BRA 0x1B1B2
24652:                         case 2: 
24653:                             Profile=2;
01B1A2  237E25     MOV #0x37E2, W5
01B1A4  B3C024     MOV.B #0x2, W4
01B1A6  784A84     MOV.B W4, [W5]
24654:                             break;
01B1A8  370004     BRA 0x1B1B2
24655:                         case 3: 
24656:                             Profile=3;
01B1AA  237E25     MOV #0x37E2, W5
01B1AC  B3C034     MOV.B #0x3, W4
01B1AE  784A84     MOV.B W4, [W5]
24657:                             break;
01B1B0  000000     NOP
24658:                     }
24659:                 }
24660:                     
24661:                 if ((Bt3Up&&!But4Pressed)||(Bt4Up&&!But3Pressed))
01B1B2  809684     MOV Flgs5, W4
01B1B4  620261     AND W4, #0x1, W4
01B1B6  520FE0     SUB W4, #0x0, [W15]
01B1B8  320005     BRA Z, 0x1B1C4
01B1BA  809605     MOV Flgs1, W5
01B1BC  200804     MOV #0x80, W4
01B1BE  628204     AND W5, W4, W4
01B1C0  520FE0     SUB W4, #0x0, [W15]
01B1C2  32000A     BRA Z, 0x1B1D8
01B1C4  809605     MOV Flgs1, W5
01B1C6  240004     MOV #0x4000, W4
01B1C8  628204     AND W5, W4, W4
01B1CA  520FE0     SUB W4, #0x0, [W15]
01B1CC  320020     BRA Z, 0x1B20E
01B1CE  809625     MOV Flgs2, W5
01B1D0  202004     MOV #0x200, W4
01B1D2  628204     AND W5, W4, W4
01B1D4  520FE0     SUB W4, #0x0, [W15]
01B1D6  3A001B     BRA NZ, 0x1B20E
24662:                 {
24663:                     Bt3Up=0;
01B1D8  809684     MOV Flgs5, W4
01B1DA  A10004     BCLR W4, #0
01B1DC  889684     MOV W4, Flgs5
24664:                     Bt4Up=0;
01B1DE  809604     MOV Flgs1, W4
01B1E0  A1E004     BCLR W4, #14
01B1E2  889604     MOV W4, Flgs1
24665:                     switch (_3psnSwitchBtNotPressed)
01B1E4  214044     MOV #0x1404, W4
01B1E6  784214     MOV.B [W4], W4
01B1E8  FB8204     ZE W4, W4
01B1EA  520FE2     SUB W4, #0x2, [W15]
01B1EC  320008     BRA Z, 0x1B1FE
01B1EE  520FE3     SUB W4, #0x3, [W15]
01B1F0  32000A     BRA Z, 0x1B206
01B1F2  520FE1     SUB W4, #0x1, [W15]
01B1F4  3A000C     BRA NZ, 0x1B20E
24666:                     {
24667:                         case 1: 
24668:                             Profile=1;
01B1F6  237E25     MOV #0x37E2, W5
01B1F8  B3C014     MOV.B #0x1, W4
01B1FA  784A84     MOV.B W4, [W5]
24669:                             break;
01B1FC  370008     BRA 0x1B20E
24670:                         case 2: 
24671:                             Profile=2;
01B1FE  237E25     MOV #0x37E2, W5
01B200  B3C024     MOV.B #0x2, W4
01B202  784A84     MOV.B W4, [W5]
24672:                             break;
01B204  370004     BRA 0x1B20E
24673:                         case 3: 
24674:                             Profile=3;
01B206  237E25     MOV #0x37E2, W5
01B208  B3C034     MOV.B #0x3, W4
01B20A  784A84     MOV.B W4, [W5]
24675:                             break;
01B20C  000000     NOP
24676:                     }
24677:                 }
24678:                 
24679:                 
24680:                         if (ProfileTMP!=Profile)
01B20E  237E24     MOV #0x37E2, W4
01B210  784214     MOV.B [W4], W4
01B212  78429E     MOV.B [W14], W5
01B214  52CF84     SUB.B W5, W4, [W15]
01B216  320021     BRA Z, 0x1B25A
24681:                         {
24682:                             MassToOptionsProfile();
01B218  07F398     RCALL MassToOptionsProfile
24683:                             OptionsToMass();
01B21A  0792E9     RCALL OptionsToMass
24684:                             MustTrmFlashMass=1;
01B21C  8095F4     MOV 0x12BE, W4
01B21E  A02004     BSET W4, #2
01B220  8895F4     MOV W4, 0x12BE
24685:                             switch (Profile)
01B222  237E24     MOV #0x37E2, W4
01B224  784214     MOV.B [W4], W4
01B226  FB8204     ZE W4, W4
01B228  520FE2     SUB W4, #0x2, [W15]
01B22A  320008     BRA Z, 0x1B23C
01B22C  520FE3     SUB W4, #0x3, [W15]
01B22E  32000A     BRA Z, 0x1B244
01B230  520FE1     SUB W4, #0x1, [W15]
01B232  3A000C     BRA NZ, 0x1B24C
24686:                             {
24687:                                 case 1:
24688:                                     SoundNum=15;
01B234  2124B5     MOV #0x124B, W5
01B236  B3C0F4     MOV.B #0xF, W4
01B238  784A84     MOV.B W4, [W5]
24689:                                     break;
01B23A  370008     BRA 0x1B24C
24690:                                 case 2:
24691:                                     SoundNum=16;
01B23C  2124B5     MOV #0x124B, W5
01B23E  B3C104     MOV.B #0x10, W4
01B240  784A84     MOV.B W4, [W5]
24692:                                     break;
01B242  370004     BRA 0x1B24C
24693:                                 case 3:
24694:                                     SoundNum=17;
01B244  2124B5     MOV #0x124B, W5
01B246  B3C114     MOV.B #0x11, W4
01B248  784A84     MOV.B W4, [W5]
24695:                                     break;
01B24A  000000     NOP
24696:                             }
24697:                             if (!SpeedControl)
01B24C  809754     MOV StatFlgs1, W4
01B24E  620262     AND W4, #0x2, W4
01B250  520FE0     SUB W4, #0x0, [W15]
01B252  3A0003     BRA NZ, 0x1B25A
24698:                             PID_On=0;
01B254  809654     MOV 0x12CA, W4
01B256  A19004     BCLR W4, #9
01B258  889654     MOV W4, 0x12CA
24699:                 
24700:                         }
24701:             
24702:                 if (AntiPolice)
01B25A  809765     MOV StatFlgs2, W5
01B25C  202004     MOV #0x200, W4
01B25E  628204     AND W5, W4, W4
01B260  520FE0     SUB W4, #0x0, [W15]
01B262  32000B     BRA Z, 0x1B27A
24703:                 {
24704:                     if (SpeedControl)
01B264  809754     MOV StatFlgs1, W4
01B266  620262     AND W4, #0x2, W4
01B268  520FE0     SUB W4, #0x0, [W15]
01B26A  320004     BRA Z, 0x1B274
24705:                         SpeedControlTmp=1;
01B26C  8096A4     MOV Flgs6, W4
01B26E  A00004     BSET W4, #0
01B270  8896A4     MOV W4, Flgs6
01B272  370003     BRA 0x1B27A
24706:                     else
24707:                         SpeedControlTmp=0;
01B274  8096A4     MOV Flgs6, W4
01B276  A10004     BCLR W4, #0
01B278  8896A4     MOV W4, Flgs6
24708:             //        SpeedControl=1;
24709:             //    MaxSpdCoeff=(int)((((float)MAX_PWM)*ImpToKmH1_t)/((float)SlowStrtSpd/ImpToKmH1_t));
24710:                 }
24711:               
24712:             }
01B27A  FA8000     ULNK
01B27C  060000     RETURN
24713:             
24714:             
24715:             void SetStartingProfile3PsnBtn(void)
24716:             {
01B27E  FA0002     LNK #0x2
24717:              unsigned char ProfileTMP=Profile;
01B280  237E24     MOV #0x37E2, W4
01B282  784F14     MOV.B [W4], [W14]
24718:             
24719:                 if (!ThreePositionSwitch)
01B284  809744     MOV StatFlgs, W4
01B286  620270     AND W4, #0x10, W4
01B288  520FE0     SUB W4, #0x0, [W15]
01B28A  320063     BRA Z, 0x1B352
24720:                     return;
01B352  000000     NOP
01B354  370001     BRA 0x1B358
24721:                 if (!Starting)
01B28C  8095E5     MOV Flgs, W5
01B28E  280004     MOV #0x8000, W4
01B290  628204     AND W5, W4, W4
01B292  520FE0     SUB W4, #0x0, [W15]
01B294  320060     BRA Z, 0x1B356
24722:                     return;
01B356  000000     NOP
24723:                 
24724:                 if (But3Pressed)
01B296  809625     MOV Flgs2, W5
01B298  202004     MOV #0x200, W4
01B29A  628204     AND W5, W4, W4
01B29C  520FE0     SUB W4, #0x0, [W15]
01B29E  320015     BRA Z, 0x1B2CA
24725:                 {
24726:                     switch (_3psnSwitchBt3)
01B2A0  214054     MOV #0x1405, W4
01B2A2  784214     MOV.B [W4], W4
01B2A4  FB8204     ZE W4, W4
01B2A6  520FE2     SUB W4, #0x2, [W15]
01B2A8  320008     BRA Z, 0x1B2BA
01B2AA  520FE3     SUB W4, #0x3, [W15]
01B2AC  32000A     BRA Z, 0x1B2C2
01B2AE  520FE1     SUB W4, #0x1, [W15]
01B2B0  3A000C     BRA NZ, 0x1B2CA
24727:                     {
24728:                         case 1: 
24729:                             Profile=1;
01B2B2  237E25     MOV #0x37E2, W5
01B2B4  B3C014     MOV.B #0x1, W4
01B2B6  784A84     MOV.B W4, [W5]
24730:                             break;
01B2B8  370008     BRA 0x1B2CA
24731:                         case 2: 
24732:                             Profile=2;
01B2BA  237E25     MOV #0x37E2, W5
01B2BC  B3C024     MOV.B #0x2, W4
01B2BE  784A84     MOV.B W4, [W5]
24733:                             break;
01B2C0  370004     BRA 0x1B2CA
24734:                         case 3: 
24735:                             Profile=3;
01B2C2  237E25     MOV #0x37E2, W5
01B2C4  B3C034     MOV.B #0x3, W4
01B2C6  784A84     MOV.B W4, [W5]
24736:                             break;
01B2C8  000000     NOP
24737:                     }
24738:                 }
24739:                 if (But4Pressed)
01B2CA  809605     MOV Flgs1, W5
01B2CC  200804     MOV #0x80, W4
01B2CE  628204     AND W5, W4, W4
01B2D0  520FE0     SUB W4, #0x0, [W15]
01B2D2  320034     BRA Z, 0x1B33C
24740:                 {
24741:                     switch (_3psnSwitchBt4)
01B2D4  214064     MOV #0x1406, W4
01B2D6  784214     MOV.B [W4], W4
01B2D8  FB8204     ZE W4, W4
01B2DA  520FE2     SUB W4, #0x2, [W15]
01B2DC  320008     BRA Z, 0x1B2EE
01B2DE  520FE3     SUB W4, #0x3, [W15]
01B2E0  32000A     BRA Z, 0x1B2F6
01B2E2  520FE1     SUB W4, #0x1, [W15]
01B2E4  3A000C     BRA NZ, 0x1B2FE
24742:                     {
24743:                         case 1: 
24744:                             Profile=1;
01B2E6  237E25     MOV #0x37E2, W5
01B2E8  B3C014     MOV.B #0x1, W4
01B2EA  784A84     MOV.B W4, [W5]
24745:                             break;
01B2EC  370008     BRA 0x1B2FE
24746:                         case 2: 
24747:                             Profile=2;
01B2EE  237E25     MOV #0x37E2, W5
01B2F0  B3C024     MOV.B #0x2, W4
01B2F2  784A84     MOV.B W4, [W5]
24748:                             break;
01B2F4  370004     BRA 0x1B2FE
24749:                         case 3: 
24750:                             Profile=3;
01B2F6  237E25     MOV #0x37E2, W5
01B2F8  B3C034     MOV.B #0x3, W4
01B2FA  784A84     MOV.B W4, [W5]
24751:                             break;
01B2FC  000000     NOP
24752:                     }
24753:                 if (!But3Pressed&&!But4Pressed)
01B2FE  809625     MOV Flgs2, W5
01B300  202004     MOV #0x200, W4
01B302  628204     AND W5, W4, W4
01B304  520FE0     SUB W4, #0x0, [W15]
01B306  3A001A     BRA NZ, 0x1B33C
01B308  809605     MOV Flgs1, W5
01B30A  200804     MOV #0x80, W4
01B30C  628204     AND W5, W4, W4
01B30E  520FE0     SUB W4, #0x0, [W15]
01B310  3A0015     BRA NZ, 0x1B33C
24754:                 {
24755:                     switch (_3psnSwitchBtNotPressed)
01B312  214044     MOV #0x1404, W4
01B314  784214     MOV.B [W4], W4
01B316  FB8204     ZE W4, W4
01B318  520FE2     SUB W4, #0x2, [W15]
01B31A  320008     BRA Z, 0x1B32C
01B31C  520FE3     SUB W4, #0x3, [W15]
01B31E  32000A     BRA Z, 0x1B334
01B320  520FE1     SUB W4, #0x1, [W15]
01B322  3A000C     BRA NZ, 0x1B33C
24756:                     {
24757:                         case 1: 
24758:                             Profile=1;
01B324  237E25     MOV #0x37E2, W5
01B326  B3C014     MOV.B #0x1, W4
01B328  784A84     MOV.B W4, [W5]
24759:                             break;
01B32A  370008     BRA 0x1B33C
24760:                         case 2: 
24761:                             Profile=2;
01B32C  237E25     MOV #0x37E2, W5
01B32E  B3C024     MOV.B #0x2, W4
01B330  784A84     MOV.B W4, [W5]
24762:                             break;
01B332  370004     BRA 0x1B33C
24763:                         case 3: 
24764:                             Profile=3;
01B334  237E25     MOV #0x37E2, W5
01B336  B3C034     MOV.B #0x3, W4
01B338  784A84     MOV.B W4, [W5]
24765:                             break;
01B33A  000000     NOP
24766:                     }
24767:                 }
24768:             
24769:             
24770:                 }
24771:                 
24772:                         if (ProfileTMP!=Profile)
01B33C  237E24     MOV #0x37E2, W4
01B33E  784214     MOV.B [W4], W4
01B340  78429E     MOV.B [W14], W5
01B342  52CF84     SUB.B W5, W4, [W15]
01B344  320009     BRA Z, 0x1B358
24773:                         {
24774:                             MassToOptionsProfile();
01B346  07F301     RCALL MassToOptionsProfile
24775:                             OptionsToMass();
01B348  079252     RCALL OptionsToMass
24776:                             MustTrmFlashMass=1;
01B34A  8095F4     MOV 0x12BE, W4
01B34C  A02004     BSET W4, #2
01B34E  8895F4     MOV W4, 0x12BE
01B350  370003     BRA 0x1B358
24777:                         }
24778:                 
24779:                 
24780:             }
01B358  FA8000     ULNK
01B35A  060000     RETURN
24781:             
24782:             
24783:                             //Spd1UST
24784:             
24785:             void AutoPIDStateMachine(void)
24786:             {
01B35C  FA0004     LNK #0x4
01B35E  781F88     MOV W8, [W15++]
24787:                 float AutoPID_On_SpeedFl=((float)AutoPID_On_Speed)/10;
01B360  240BB4     MOV #0x40BB, W4
01B362  784214     MOV.B [W4], W4
01B364  FB8204     ZE W4, W4
01B366  200005     MOV #0x0, W5
01B368  BE0004     MOV.D W4, W0
01B36A  022582     CALL ___floatunsisf
01B36C  000000     NOP
01B36E  BE0200     MOV.D W0, W4
01B370  200002     MOV #0x0, W2
01B372  241203     MOV #0x4120, W3
01B374  BE0004     MOV.D W4, W0
01B376  02245A     CALL ___divsf3
01B378  000000     NOP
01B37A  BE0200     MOV.D W0, W4
01B37C  BE8F04     MOV.D W4, [W14]
24788:                 
24789:                   if (!AutoPID) 
01B37E  809745     MOV StatFlgs, W5
01B380  200404     MOV #0x40, W4
01B382  628204     AND W5, W4, W4
01B384  520FE0     SUB W4, #0x0, [W15]
01B386  3A0004     BRA NZ, 0x1B390
24790:                   {
24791:                       AutoPIDState=0;
01B388  240BC5     MOV #0x40BC, W5
01B38A  EB4200     CLR.B W4
01B38C  784A84     MOV.B W4, [W5]
24792:                       return;
01B38E  370123     BRA 0x1B5D6
24793:                   }
24794:                 switch (AutoPIDState)
01B390  240BC4     MOV #0x40BC, W4
01B392  784214     MOV.B [W4], W4
01B394  FB8204     ZE W4, W4
01B396  DEA2CF     ASR W4, #15, W5
01B398  200076     MOV #0x7, W6
01B39A  200007     MOV #0x0, W7
01B39C  520F86     SUB W4, W6, [W15]
01B39E  5A8F87     SUBB W5, W7, [W15]
01B3A0  3E011A     BRA GTU, 0x1B5D6
01B3A2  010604     BRA W4
01B3A4  370007     BRA 0x1B3B4
01B3A6  370012     BRA 0x1B3CC
01B3A8  37004F     BRA 0x1B448
01B3AA  37009B     BRA 0x1B4E2
01B3AC  370114     BRA 0x1B5D6
01B3AE  370113     BRA 0x1B5D6
01B3B0  370112     BRA 0x1B5D6
01B3B2  3700F3     BRA 0x1B59A
24795:                 {
24796:                     case 0:
24797:                         PWM1TempSumm=0;
01B3B4  B82260     MUL.UU W4, #0, W4
01B3B6  8A05F4     MOV W4, PWM1TempSumm
01B3B8  8A0605     MOV W5, 0x40C0
24798:                         PWM1TempSummfl=0;
01B3BA  B82260     MUL.UU W4, #0, W4
01B3BC  8A18C4     MOV W4, PWM1TempSummfl
01B3BE  8A18D5     MOV W5, 0x431A
24799:                         PWM1TempSummCnt=256;
01B3C0  201004     MOV #0x100, W4
01B3C2  8A0624     MOV W4, PWM1TempSummCnt
24800:                         AutoPIDState=1;
01B3C4  240BC5     MOV #0x40BC, W5
01B3C6  B3C014     MOV.B #0x1, W4
01B3C8  784A84     MOV.B W4, [W5]
24801:                         break;
01B3CA  370105     BRA 0x1B5D6
24802:                     case 1:
24803:                         if (!SpeedControl)
01B3CC  809754     MOV StatFlgs1, W4
01B3CE  620262     AND W4, #0x2, W4
01B3D0  520FE0     SUB W4, #0x0, [W15]
01B3D2  3A0009     BRA NZ, 0x1B3E6
24804:                         PWM1TempSumm=PWM1TempSumm+PWM1Temp;
01B3D4  8205F6     MOV PWM1TempSumm, W6
01B3D6  820607     MOV 0x40C0, W7
01B3D8  821854     MOV PWM1Temp, W4
01B3DA  821865     MOV 0x430C, W5
01B3DC  420206     ADD W4, W6, W4
01B3DE  4A8287     ADDC W5, W7, W5
01B3E0  8A05F4     MOV W4, PWM1TempSumm
01B3E2  8A0605     MOV W5, 0x40C0
01B3E4  37000B     BRA 0x1B3FC
24805:                         else
24806:                             PWM1TempSummfl=PWM1TempSummfl+Spd1UST;
01B3E6  8218C6     MOV PWM1TempSummfl, W6
01B3E8  8218D7     MOV 0x431A, W7
01B3EA  817F74     MOV Spd1UST, W4
01B3EC  817F85     MOV 0x2FF0, W5
01B3EE  BE0104     MOV.D W4, W2
01B3F0  BE0006     MOV.D W6, W0
01B3F2  0222D2     CALL ___addsf3
01B3F4  000000     NOP
01B3F6  BE0200     MOV.D W0, W4
01B3F8  8A18C4     MOV W4, PWM1TempSummfl
01B3FA  8A18D5     MOV W5, 0x431A
24807:                         PWM1TempSummCnt--;
01B3FC  820624     MOV PWM1TempSummCnt, W4
01B3FE  E90204     DEC W4, W4
01B400  8A0624     MOV W4, PWM1TempSummCnt
24808:                         if (!PWM1TempSummCnt)
01B402  820624     MOV PWM1TempSummCnt, W4
01B404  520FE0     SUB W4, #0x0, [W15]
01B406  3A00E2     BRA NZ, 0x1B5CC
24809:                         {
24810:                         PWM1TempSumm=PWM1TempSumm>>8;    
01B408  8205F4     MOV PWM1TempSumm, W4
01B40A  820605     MOV 0x40C0, W5
01B40C  DD2B48     SL W5, #8, W6
01B40E  DE2248     LSR W4, #8, W4
01B410  730204     IOR W6, W4, W4
01B412  DEAAC8     ASR W5, #8, W5
01B414  8A05F4     MOV W4, PWM1TempSumm
01B416  8A0605     MOV W5, 0x40C0
24811:                         PWM1TempSummfl=PWM1TempSummfl/256;
01B418  8218C4     MOV PWM1TempSummfl, W4
01B41A  8218D5     MOV 0x431A, W5
01B41C  200002     MOV #0x0, W2
01B41E  243803     MOV #0x4380, W3
01B420  BE0004     MOV.D W4, W0
01B422  02245A     CALL ___divsf3
01B424  000000     NOP
01B426  BE0200     MOV.D W0, W4
01B428  8A18C4     MOV W4, PWM1TempSummfl
01B42A  8A18D5     MOV W5, 0x431A
24812:                         if (!SpeedControl)
01B42C  809754     MOV StatFlgs1, W4
01B42E  620262     AND W4, #0x2, W4
01B430  520FE0     SUB W4, #0x0, [W15]
01B432  3A0004     BRA NZ, 0x1B43C
24813:                         AutoPIDState=2;
01B434  240BC5     MOV #0x40BC, W5
01B436  B3C024     MOV.B #0x2, W4
01B438  784A84     MOV.B W4, [W5]
01B43A  370003     BRA 0x1B442
24814:                         else
24815:                         AutoPIDState=3;
01B43C  240BC5     MOV #0x40BC, W5
01B43E  B3C034     MOV.B #0x3, W4
01B440  784A84     MOV.B W4, [W5]
24816:                         AutoPID_On_Cnt=AutoPID_On_CntConst;
01B442  8218B4     MOV AutoPID_On_CntConst, W4
01B444  8A0614     MOV W4, AutoPID_On_Cnt
24817:                         }
24818:                         break;
01B446  3700C7     BRA 0x1B5D6
01B5CC  000000     NOP
01B5CE  370003     BRA 0x1B5D6
24819:                     case 2:
24820:                         if (PWM1TempSumm<AutoPID_On_PWM)
01B448  240BA4     MOV #0x40BA, W4
01B44A  784214     MOV.B [W4], W4
01B44C  FB8304     ZE W4, W6
01B44E  200007     MOV #0x0, W7
01B450  8205F4     MOV PWM1TempSumm, W4
01B452  820605     MOV 0x40C0, W5
01B454  530F84     SUB W6, W4, [W15]
01B456  5B8F85     SUBB W7, W5, [W15]
01B458  340004     BRA LE, 0x1B462
24821:                         {
24822:                         AutoPIDState=0;    
01B45A  240BC5     MOV #0x40BC, W5
01B45C  EB4200     CLR.B W4
01B45E  784A84     MOV.B W4, [W5]
24823:                         return;
01B460  3700BA     BRA 0x1B5D6
24824:                         }
24825:                         if ((PWM1Temp>(PWM1TempSumm-AutoPID_On_PWM))&&(PWM1Temp<(PWM1TempSumm+AutoPID_On_PWM)))
01B462  8205F6     MOV PWM1TempSumm, W6
01B464  820607     MOV 0x40C0, W7
01B466  240BA4     MOV #0x40BA, W4
01B468  784214     MOV.B [W4], W4
01B46A  FB8204     ZE W4, W4
01B46C  200005     MOV #0x0, W5
01B46E  530304     SUB W6, W4, W6
01B470  5B8385     SUBB W7, W5, W7
01B472  821854     MOV PWM1Temp, W4
01B474  821865     MOV 0x430C, W5
01B476  530F84     SUB W6, W4, [W15]
01B478  5B8F85     SUBB W7, W5, [W15]
01B47A  3D002F     BRA GE, 0x1B4DA
01B47C  240BA4     MOV #0x40BA, W4
01B47E  784214     MOV.B [W4], W4
01B480  FB8304     ZE W4, W6
01B482  200007     MOV #0x0, W7
01B484  8205F4     MOV PWM1TempSumm, W4
01B486  820605     MOV 0x40C0, W5
01B488  420306     ADD W4, W6, W6
01B48A  4A8387     ADDC W5, W7, W7
01B48C  821854     MOV PWM1Temp, W4
01B48E  821865     MOV 0x430C, W5
01B490  530F84     SUB W6, W4, [W15]
01B492  5B8F85     SUBB W7, W5, [W15]
01B494  340022     BRA LE, 0x1B4DA
24826:                         {
24827:                             AutoPID_On_Cnt--;
01B496  820614     MOV AutoPID_On_Cnt, W4
01B498  E90204     DEC W4, W4
01B49A  8A0614     MOV W4, AutoPID_On_Cnt
24828:                             if (!AutoPID_On_Cnt)
01B49C  820614     MOV AutoPID_On_Cnt, W4
01B49E  520FE0     SUB W4, #0x0, [W15]
01B4A0  3A001A     BRA NZ, 0x1B4D6
01B4D6  000000     NOP
24829:                             {
24830:                                 if (!PID_On)
01B4A2  809655     MOV 0x12CA, W5
01B4A4  202004     MOV #0x200, W4
01B4A6  628204     AND W5, W4, W4
01B4A8  520FE0     SUB W4, #0x0, [W15]
01B4AA  3A0015     BRA NZ, 0x1B4D6
24831:                                 {
24832:                                     if (!Wheeling)
01B4AC  809665     MOV Flgs4, W5
01B4AE  208004     MOV #0x800, W4
01B4B0  628204     AND W5, W4, W4
01B4B2  520FE0     SUB W4, #0x0, [W15]
01B4B4  3A0010     BRA NZ, 0x1B4D6
24833:                                     {
24834:                                         if (!SpeedControl)
01B4B6  809754     MOV StatFlgs1, W4
01B4B8  620262     AND W4, #0x2, W4
01B4BA  520FE0     SUB W4, #0x0, [W15]
01B4BC  3A000C     BRA NZ, 0x1B4D6
24835:                                         {
24836:                                         SoundNum=1;
01B4BE  2124B5     MOV #0x124B, W5
01B4C0  B3C014     MOV.B #0x1, W4
01B4C2  784A84     MOV.B W4, [W5]
24837:                                         StrtPID_On=1;
01B4C4  809604     MOV Flgs1, W4
01B4C6  A0C004     BSET W4, #12
01B4C8  889604     MOV W4, Flgs1
24838:                                         AutoPIDState=7;
01B4CA  240BC5     MOV #0x40BC, W5
01B4CC  B3C074     MOV.B #0x7, W4
01B4CE  784A84     MOV.B W4, [W5]
24839:                                         BtPID_Activated=1;
01B4D0  809684     MOV Flgs5, W4
01B4D2  A0C004     BSET W4, #12
01B4D4  889684     MOV W4, Flgs5
24840:                                         /*if (StrongModePID)
24841:                                         {
24842:                                         PrevStrongMode=StrongMode;
24843:                                         StrongMode=1;
24844:                                         }*/
24845:             
24846:                                         }
24847:                                     }
24848:                                 }
24849:                             }
24850:                         }
24851:                         else
24852:                         AutoPIDState=0;
01B4DA  240BC5     MOV #0x40BC, W5
01B4DC  EB4200     CLR.B W4
01B4DE  784A84     MOV.B W4, [W5]
24853:                         break;
01B4D8  37007E     BRA 0x1B5D6
01B4E0  37007A     BRA 0x1B5D6
24854:                     case 3:
24855:                         if (PWM1TempSummfl<AutoPID_On_SpeedFl)
01B4E2  8218C4     MOV PWM1TempSummfl, W4
01B4E4  8218D5     MOV 0x431A, W5
01B4E6  B3C018     MOV.B #0x1, W8
01B4E8  BE011E     MOV.D [W14], W2
01B4EA  BE0004     MOV.D W4, W0
01B4EC  0224FC     CALL ___lesf2
01B4EE  000000     NOP
01B4F0  780200     MOV W0, W4
01B4F2  520FE0     SUB W4, #0x0, [W15]
01B4F4  350001     BRA LT, 0x1B4F8
01B4F6  EB4400     CLR.B W8
01B4F8  544FE0     SUB.B W8, #0x0, [W15]
01B4FA  320004     BRA Z, 0x1B504
24856:                         {
24857:                         AutoPIDState=0;    
01B4FC  240BC5     MOV #0x40BC, W5
01B4FE  EB4200     CLR.B W4
01B500  784A84     MOV.B W4, [W5]
24858:                         return;
01B502  370069     BRA 0x1B5D6
24859:                         }
24860:                         if ((Spd1UST>(PWM1TempSummfl-AutoPID_On_SpeedFl))&&(Spd1UST<(PWM1TempSummfl+AutoPID_On_SpeedFl)))
01B504  8218C4     MOV PWM1TempSummfl, W4
01B506  8218D5     MOV 0x431A, W5
01B508  BE011E     MOV.D [W14], W2
01B50A  BE0004     MOV.D W4, W0
01B50C  0222D0     CALL ___subsf3
01B50E  000000     NOP
01B510  BE0200     MOV.D W0, W4
01B512  BE0304     MOV.D W4, W6
01B514  817F74     MOV Spd1UST, W4
01B516  817F85     MOV 0x2FF0, W5
01B518  B3C018     MOV.B #0x1, W8
01B51A  BE0104     MOV.D W4, W2
01B51C  BE0006     MOV.D W6, W0
01B51E  0224FC     CALL ___lesf2
01B520  000000     NOP
01B522  780200     MOV W0, W4
01B524  520FE0     SUB W4, #0x0, [W15]
01B526  350001     BRA LT, 0x1B52A
01B528  EB4400     CLR.B W8
01B52A  544FE0     SUB.B W8, #0x0, [W15]
01B52C  320032     BRA Z, 0x1B592
01B52E  8218C4     MOV PWM1TempSummfl, W4
01B530  8218D5     MOV 0x431A, W5
01B532  BE011E     MOV.D [W14], W2
01B534  BE0004     MOV.D W4, W0
01B536  0222D2     CALL ___addsf3
01B538  000000     NOP
01B53A  BE0200     MOV.D W0, W4
01B53C  BE0304     MOV.D W4, W6
01B53E  817F74     MOV Spd1UST, W4
01B540  817F85     MOV 0x2FF0, W5
01B542  B3C018     MOV.B #0x1, W8
01B544  BE0104     MOV.D W4, W2
01B546  BE0006     MOV.D W6, W0
01B548  022500     CALL ___gtsf2
01B54A  000000     NOP
01B54C  780200     MOV W0, W4
01B54E  520FE0     SUB W4, #0x0, [W15]
01B550  3C0001     BRA GT, 0x1B554
01B552  EB4400     CLR.B W8
01B554  544FE0     SUB.B W8, #0x0, [W15]
01B556  32001D     BRA Z, 0x1B592
24861:                         {
24862:                             AutoPID_On_Cnt--;
01B558  820614     MOV AutoPID_On_Cnt, W4
01B55A  E90204     DEC W4, W4
01B55C  8A0614     MOV W4, AutoPID_On_Cnt
24863:                             if (!AutoPID_On_Cnt)
01B55E  820614     MOV AutoPID_On_Cnt, W4
01B560  520FE0     SUB W4, #0x0, [W15]
01B562  3A0015     BRA NZ, 0x1B58E
01B58E  000000     NOP
24864:                             {
24865:                                if (SpeedControl)
01B564  809754     MOV StatFlgs1, W4
01B566  620262     AND W4, #0x2, W4
01B568  520FE0     SUB W4, #0x0, [W15]
01B56A  320011     BRA Z, 0x1B58E
24866:                                {
24867:                                SpeedControlPID=1;
01B56C  8095F4     MOV 0x12BE, W4
01B56E  A0C004     BSET W4, #12
01B570  8895F4     MOV W4, 0x12BE
24868:                                Spd1UST=Spd1Res;
01B572  817F14     MOV Spd1Res, W4
01B574  DEA2CF     ASR W4, #15, W5
01B576  BE0004     MOV.D W4, W0
01B578  02257C     CALL ___floatsisf
01B57A  000000     NOP
01B57C  BE0200     MOV.D W0, W4
01B57E  897F74     MOV W4, Spd1UST
01B580  897F85     MOV W5, 0x2FF0
24869:                                SoundNum=1;
01B582  2124B5     MOV #0x124B, W5
01B584  B3C014     MOV.B #0x1, W4
01B586  784A84     MOV.B W4, [W5]
24870:                                AutoPIDState=7;
01B588  240BC5     MOV #0x40BC, W5
01B58A  B3C074     MOV.B #0x7, W4
01B58C  784A84     MOV.B W4, [W5]
24871:                                 /*if (StrongModePID)
24872:                                     {
24873:                                     PrevStrongMode=StrongMode;
24874:                                     StrongMode=1;
24875:                                     }*/
24876:             
24877:                                }
24878:                             }
24879:                         }
24880:                         else
24881:                         AutoPIDState=0;
01B592  240BC5     MOV #0x40BC, W5
01B594  EB4200     CLR.B W4
01B596  784A84     MOV.B W4, [W5]
24882:                         break;
01B590  370022     BRA 0x1B5D6
01B598  37001E     BRA 0x1B5D6
24883:                     case 7:
24884:                         if ((!PID_On)&&(!SpeedControl))
01B59A  809655     MOV 0x12CA, W5
01B59C  202004     MOV #0x200, W4
01B59E  628204     AND W5, W4, W4
01B5A0  520FE0     SUB W4, #0x0, [W15]
01B5A2  3A0007     BRA NZ, 0x1B5B2
01B5A4  809754     MOV StatFlgs1, W4
01B5A6  620262     AND W4, #0x2, W4
01B5A8  520FE0     SUB W4, #0x0, [W15]
01B5AA  3A0003     BRA NZ, 0x1B5B2
24885:                             AutoPIDState=0;
01B5AC  240BC5     MOV #0x40BC, W5
01B5AE  EB4200     CLR.B W4
01B5B0  784A84     MOV.B W4, [W5]
24886:              
24887:                         if ((!SpeedControlPID)&&(SpeedControl))
01B5B2  8095F5     MOV 0x12BE, W5
01B5B4  210004     MOV #0x1000, W4
01B5B6  628204     AND W5, W4, W4
01B5B8  520FE0     SUB W4, #0x0, [W15]
01B5BA  3A000A     BRA NZ, 0x1B5D0
01B5BC  809754     MOV StatFlgs1, W4
01B5BE  620262     AND W4, #0x2, W4
01B5C0  520FE0     SUB W4, #0x0, [W15]
01B5C2  320008     BRA Z, 0x1B5D4
24888:                             AutoPIDState=0;
01B5C4  240BC5     MOV #0x40BC, W5
01B5C6  EB4200     CLR.B W4
01B5C8  784A84     MOV.B W4, [W5]
24889:                         
24890:                         break;
01B5CA  370005     BRA 0x1B5D6
01B5D0  000000     NOP
01B5D2  370001     BRA 0x1B5D6
01B5D4  000000     NOP
24891:                 }
24892:             }
01B5D6  78044F     MOV [--W15], W8
01B5D8  FA8000     ULNK
01B5DA  060000     RETURN
24893:             
24894:             void CopyProfiles(void)
24895:             {
01B5DC  FA0002     LNK #0x2
24896:             int i;    
24897:                 for (i=0;i<SIZE_OF_PROFILE;i++)
01B5DE  EB0200     CLR W4
01B5E0  780F04     MOV W4, [W14]
01B5E2  370011     BRA 0x1B606
01B604  E80F1E     INC [W14], [W14]
01B606  200454     MOV #0x45, W4
01B608  78029E     MOV [W14], W5
01B60A  528F84     SUB W5, W4, [W15]
01B60C  34FFEB     BRA LE, 0x1B5E4
24898:                 {
24899:                 ProfileMass[i+SIZE_OF_PROFILE]=ProfileMass[i];
01B5E4  200464     MOV #0x46, W4
01B5E6  42029E     ADD W4, [W14], W5
01B5E8  22DB94     MOV #0x2DB9, W4
01B5EA  42021E     ADD W4, [W14], W4
01B5EC  784214     MOV.B [W4], W4
01B5EE  22DB96     MOV #0x2DB9, W6
01B5F0  430285     ADD W6, W5, W5
01B5F2  784A84     MOV.B W4, [W5]
24900:                 ProfileMass[i+(SIZE_OF_PROFILE*2)]=ProfileMass[i];
01B5F4  2008C4     MOV #0x8C, W4
01B5F6  42029E     ADD W4, [W14], W5
01B5F8  22DB94     MOV #0x2DB9, W4
01B5FA  42021E     ADD W4, [W14], W4
01B5FC  784214     MOV.B [W4], W4
01B5FE  22DB96     MOV #0x2DB9, W6
01B600  430285     ADD W6, W5, W5
01B602  784A84     MOV.B W4, [W5]
24901:                 }
24902:             SoundNum=1;
01B60E  2124B5     MOV #0x124B, W5
01B610  B3C014     MOV.B #0x1, W4
01B612  784A84     MOV.B W4, [W5]
24903:             }
01B614  FA8000     ULNK
01B616  060000     RETURN
24904:             
24905:             
24906:             
24907:             void SendFlashMassToPC(void)
24908:             {
01B618  FA0004     LNK #0x4
24909:                 unsigned int CntBt=4;
01B61A  200044     MOV #0x4, W4
01B61C  780F04     MOV W4, [W14]
24910:                 int i;
24911:             
24912:                 if (HC05_BUSY)
01B61E  809635     MOV 0x12C6, W5
01B620  204004     MOV #0x400, W4
01B622  628204     AND W5, W4, W4
01B624  520FE0     SUB W4, #0x0, [W15]
01B626  3A004A     BRA NZ, 0x1B6BC
24913:                     return;
01B6BC  000000     NOP
01B6BE  370007     BRA 0x1B6CE
24914:                 if (MustTrmHC05)
01B628  809635     MOV 0x12C6, W5
01B62A  202004     MOV #0x200, W4
01B62C  628204     AND W5, W4, W4
01B62E  520FE0     SUB W4, #0x0, [W15]
01B630  3A0047     BRA NZ, 0x1B6C0
24915:                     return;
01B6C0  000000     NOP
01B6C2  370005     BRA 0x1B6CE
24916:                 if (!Hv_HC05)
01B632  8096D5     MOV 0x12DA, W5
01B634  200404     MOV #0x40, W4
01B636  628204     AND W5, W4, W4
01B638  520FE0     SUB W4, #0x0, [W15]
01B63A  320044     BRA Z, 0x1B6C4
24917:                 return;
01B6C4  000000     NOP
01B6C6  370003     BRA 0x1B6CE
24918:                 if (!MustTrmFlashMassForSaveOptPC)
01B63C  809694     MOV 0x12D2, W4
01B63E  620262     AND W4, #0x2, W4
01B640  520FE0     SUB W4, #0x0, [W15]
01B642  320042     BRA Z, 0x1B6C8
24919:                 return;
01B6C8  000000     NOP
01B6CA  370001     BRA 0x1B6CE
24920:                 if (OnTransmittHC05)
01B644  809615     MOV 0x12C2, W5
01B646  202004     MOV #0x200, W4
01B648  628204     AND W5, W4, W4
01B64A  520FE0     SUB W4, #0x0, [W15]
01B64C  3A003F     BRA NZ, 0x1B6CC
24921:                     return;
01B6CC  000000     NOP
24922:                 HC05_BUSY=1;
01B64E  809634     MOV 0x12C6, W4
01B650  A0A004     BSET W4, #10
01B652  889634     MOV W4, 0x12C6
24923:             
24924:                 MustTrmFlashMassForSaveOptPC=0;
01B654  809694     MOV 0x12D2, W4
01B656  A11004     BCLR W4, #1
01B658  889694     MOV W4, 0x12D2
24925:             
24926:             
24927:             
24928:             
24929:             
24930:                 HC05TrmMass[0]=0xff;
01B65A  230CE5     MOV #0x30CE, W5
01B65C  EBC200     SETM.B W4
01B65E  784A84     MOV.B W4, [W5]
24931:                 HC05TrmMass[1]=0xff;
01B660  230CF5     MOV #0x30CF, W5
01B662  EBC200     SETM.B W4
01B664  784A84     MOV.B W4, [W5]
24932:             
24933:             
24934:                 HC05TrmMass[3]=10;//COMMAND
01B666  230D15     MOV #0x30D1, W5
01B668  B3C0A4     MOV.B #0xA, W4
01B66A  784A84     MOV.B W4, [W5]
24935:             
24936:                 for (i=0;i<sizeof(FlashMass);i++)
01B66C  EB0200     CLR W4
01B66E  980714     MOV W4, [W14+2]
01B670  37000B     BRA 0x1B688
01B682  90021E     MOV [W14+2], W4
01B684  E80204     INC W4, W4
01B686  980714     MOV W4, [W14+2]
01B688  90029E     MOV [W14+2], W5
01B68A  200F24     MOV #0xF2, W4
01B68C  528F84     SUB W5, W4, [W15]
01B68E  36FFF1     BRA LEU, 0x1B672
24937:                 HC05TrmMass[CntBt++]=FlashMass[i];
01B672  22AE05     MOV #0x2AE0, W5
01B674  90021E     MOV [W14+2], W4
01B676  428204     ADD W5, W4, W4
01B678  784214     MOV.B [W4], W4
01B67A  230CE5     MOV #0x30CE, W5
01B67C  42829E     ADD W5, [W14], W5
01B67E  784A84     MOV.B W4, [W5]
01B680  E80F1E     INC [W14], [W14]
24938:             
24939:             
24940:                 HC05TrmMass[2]=CntBt-3;
01B690  78021E     MOV [W14], W4
01B692  784204     MOV.B W4, W4
01B694  524263     SUB.B W4, #0x3, W4
01B696  230D05     MOV #0x30D0, W5
01B698  784A84     MOV.B W4, [W5]
24941:             
24942:             
24943:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01B69A  230D04     MOV #0x30D0, W4
01B69C  784214     MOV.B [W4], W4
01B69E  FB8204     ZE W4, W4
01B6A0  E80204     INC W4, W4
01B6A2  230D01     MOV #0x30D0, W1
01B6A4  780004     MOV W4, W0
01B6A6  029AF6     CALL CalcCheckSumm
01B6A8  000000     NOP
01B6AA  784200     MOV.B W0, W4
01B6AC  230CE5     MOV #0x30CE, W5
01B6AE  42829E     ADD W5, [W14], W5
01B6B0  784A84     MOV.B W4, [W5]
01B6B2  E80F1E     INC [W14], [W14]
24944:             
24945:                 MustTrmHC05=1;
01B6B4  809634     MOV 0x12C6, W4
01B6B6  A09004     BSET W4, #9
01B6B8  889634     MOV W4, 0x12C6
01B6BA  370009     BRA 0x1B6CE
24946:             
24947:             }
01B6CE  FA8000     ULNK
01B6D0  060000     RETURN
24948:             
24949:             
24950:             
24951:             
24952:             void SendFlashMass2ToPC(void)
24953:             {
01B6D2  FA0004     LNK #0x4
24954:                 unsigned int CntBt=4;
01B6D4  200044     MOV #0x4, W4
01B6D6  780F04     MOV W4, [W14]
24955:                 int i;
24956:             
24957:                 if (HC05_BUSY)
01B6D8  809635     MOV 0x12C6, W5
01B6DA  204004     MOV #0x400, W4
01B6DC  628204     AND W5, W4, W4
01B6DE  520FE0     SUB W4, #0x0, [W15]
01B6E0  3A004B     BRA NZ, 0x1B778
24958:                     return;
01B778  000000     NOP
01B77A  370007     BRA 0x1B78A
24959:                 if (MustTrmHC05)
01B6E2  809635     MOV 0x12C6, W5
01B6E4  202004     MOV #0x200, W4
01B6E6  628204     AND W5, W4, W4
01B6E8  520FE0     SUB W4, #0x0, [W15]
01B6EA  3A0048     BRA NZ, 0x1B77C
24960:                     return;
01B77C  000000     NOP
01B77E  370005     BRA 0x1B78A
24961:                 if (!Hv_HC05)
01B6EC  8096D5     MOV 0x12DA, W5
01B6EE  200404     MOV #0x40, W4
01B6F0  628204     AND W5, W4, W4
01B6F2  520FE0     SUB W4, #0x0, [W15]
01B6F4  320045     BRA Z, 0x1B780
24962:                 return;
01B780  000000     NOP
01B782  370003     BRA 0x1B78A
24963:                 if (!MustTrmFlashMass2ForSaveOptPC)
01B6F6  8096C5     MOV Flgs7, W5
01B6F8  208004     MOV #0x800, W4
01B6FA  628204     AND W5, W4, W4
01B6FC  520FE0     SUB W4, #0x0, [W15]
01B6FE  320042     BRA Z, 0x1B784
24964:                 return;
01B784  000000     NOP
01B786  370001     BRA 0x1B78A
24965:                 if (OnTransmittHC05)
01B700  809615     MOV 0x12C2, W5
01B702  202004     MOV #0x200, W4
01B704  628204     AND W5, W4, W4
01B706  520FE0     SUB W4, #0x0, [W15]
01B708  3A003F     BRA NZ, 0x1B788
24966:                     return;
01B788  000000     NOP
24967:                 HC05_BUSY=1;
01B70A  809634     MOV 0x12C6, W4
01B70C  A0A004     BSET W4, #10
01B70E  889634     MOV W4, 0x12C6
24968:             
24969:                 MustTrmFlashMass2ForSaveOptPC=0;
01B710  8096C4     MOV Flgs7, W4
01B712  A1B004     BCLR W4, #11
01B714  8896C4     MOV W4, Flgs7
24970:             
24971:             
24972:             
24973:             
24974:             
24975:                 HC05TrmMass[0]=0xff;
01B716  230CE5     MOV #0x30CE, W5
01B718  EBC200     SETM.B W4
01B71A  784A84     MOV.B W4, [W5]
24976:                 HC05TrmMass[1]=0xff;
01B71C  230CF5     MOV #0x30CF, W5
01B71E  EBC200     SETM.B W4
01B720  784A84     MOV.B W4, [W5]
24977:             
24978:             
24979:                 HC05TrmMass[3]=17;//COMMAND
01B722  230D15     MOV #0x30D1, W5
01B724  B3C114     MOV.B #0x11, W4
01B726  784A84     MOV.B W4, [W5]
24980:             
24981:                 for (i=0;i<sizeof(FlashMass2);i++)
01B728  EB0200     CLR W4
01B72A  980714     MOV W4, [W14+2]
01B72C  37000B     BRA 0x1B744
01B73E  90021E     MOV [W14+2], W4
01B740  E80204     INC W4, W4
01B742  980714     MOV W4, [W14+2]
01B744  90029E     MOV [W14+2], W5
01B746  200F24     MOV #0xF2, W4
01B748  528F84     SUB W5, W4, [W15]
01B74A  36FFF1     BRA LEU, 0x1B72E
24982:                 HC05TrmMass[CntBt++]=FlashMass2[i];
01B72E  22CC65     MOV #0x2CC6, W5
01B730  90021E     MOV [W14+2], W4
01B732  428204     ADD W5, W4, W4
01B734  784214     MOV.B [W4], W4
01B736  230CE5     MOV #0x30CE, W5
01B738  42829E     ADD W5, [W14], W5
01B73A  784A84     MOV.B W4, [W5]
01B73C  E80F1E     INC [W14], [W14]
24983:             
24984:             
24985:                 HC05TrmMass[2]=CntBt-3;
01B74C  78021E     MOV [W14], W4
01B74E  784204     MOV.B W4, W4
01B750  524263     SUB.B W4, #0x3, W4
01B752  230D05     MOV #0x30D0, W5
01B754  784A84     MOV.B W4, [W5]
24986:             
24987:             
24988:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01B756  230D04     MOV #0x30D0, W4
01B758  784214     MOV.B [W4], W4
01B75A  FB8204     ZE W4, W4
01B75C  E80204     INC W4, W4
01B75E  230D01     MOV #0x30D0, W1
01B760  780004     MOV W4, W0
01B762  029AF6     CALL CalcCheckSumm
01B764  000000     NOP
01B766  784200     MOV.B W0, W4
01B768  230CE5     MOV #0x30CE, W5
01B76A  42829E     ADD W5, [W14], W5
01B76C  784A84     MOV.B W4, [W5]
01B76E  E80F1E     INC [W14], [W14]
24989:             
24990:                 MustTrmHC05=1;
01B770  809634     MOV 0x12C6, W4
01B772  A09004     BSET W4, #9
01B774  889634     MOV W4, 0x12C6
01B776  370009     BRA 0x1B78A
24991:             
24992:             }
01B78A  FA8000     ULNK
01B78C  060000     RETURN
24993:             
24994:             
24995:             
24996:             void SendProfileMassToPC(void)
24997:             {
01B78E  FA0004     LNK #0x4
24998:                 unsigned int CntBt=4;
01B790  200044     MOV #0x4, W4
01B792  780F04     MOV W4, [W14]
24999:                 int i;
25000:             
25001:                 if (HC05_BUSY)
01B794  809635     MOV 0x12C6, W5
01B796  204004     MOV #0x400, W4
01B798  628204     AND W5, W4, W4
01B79A  520FE0     SUB W4, #0x0, [W15]
01B79C  3A004A     BRA NZ, 0x1B832
25002:                     return;
01B832  000000     NOP
01B834  370007     BRA 0x1B844
25003:             
25004:                 if (MustTrmHC05)
01B79E  809635     MOV 0x12C6, W5
01B7A0  202004     MOV #0x200, W4
01B7A2  628204     AND W5, W4, W4
01B7A4  520FE0     SUB W4, #0x0, [W15]
01B7A6  3A0047     BRA NZ, 0x1B836
25005:                     return;
01B836  000000     NOP
01B838  370005     BRA 0x1B844
25006:                 if (!Hv_HC05)
01B7A8  8096D5     MOV 0x12DA, W5
01B7AA  200404     MOV #0x40, W4
01B7AC  628204     AND W5, W4, W4
01B7AE  520FE0     SUB W4, #0x0, [W15]
01B7B0  320044     BRA Z, 0x1B83A
25007:                 return;
01B83A  000000     NOP
01B83C  370003     BRA 0x1B844
25008:                 if (!MustTrmProfileMass)
01B7B2  809694     MOV 0x12D2, W4
01B7B4  620264     AND W4, #0x4, W4
01B7B6  520FE0     SUB W4, #0x0, [W15]
01B7B8  320042     BRA Z, 0x1B83E
25009:                 return;
01B83E  000000     NOP
01B840  370001     BRA 0x1B844
25010:                 if (OnTransmittHC05)
01B7BA  809615     MOV 0x12C2, W5
01B7BC  202004     MOV #0x200, W4
01B7BE  628204     AND W5, W4, W4
01B7C0  520FE0     SUB W4, #0x0, [W15]
01B7C2  3A003F     BRA NZ, 0x1B842
25011:                     return;
01B842  000000     NOP
25012:                 HC05_BUSY=1;
01B7C4  809634     MOV 0x12C6, W4
01B7C6  A0A004     BSET W4, #10
01B7C8  889634     MOV W4, 0x12C6
25013:             
25014:                 MustTrmProfileMass=0;
01B7CA  809694     MOV 0x12D2, W4
01B7CC  A12004     BCLR W4, #2
01B7CE  889694     MOV W4, 0x12D2
25015:             
25016:             
25017:             
25018:             
25019:             
25020:                 HC05TrmMass[0]=0xff;
01B7D0  230CE5     MOV #0x30CE, W5
01B7D2  EBC200     SETM.B W4
01B7D4  784A84     MOV.B W4, [W5]
25021:                 HC05TrmMass[1]=0xff;
01B7D6  230CF5     MOV #0x30CF, W5
01B7D8  EBC200     SETM.B W4
01B7DA  784A84     MOV.B W4, [W5]
25022:             
25023:             
25024:                 HC05TrmMass[3]=11;//COMMAND
01B7DC  230D15     MOV #0x30D1, W5
01B7DE  B3C0B4     MOV.B #0xB, W4
01B7E0  784A84     MOV.B W4, [W5]
25025:             
25026:                 for (i=0;i<sizeof(ProfileMass);i++)
01B7E2  EB0200     CLR W4
01B7E4  980714     MOV W4, [W14+2]
01B7E6  37000B     BRA 0x1B7FE
01B7F8  90021E     MOV [W14+2], W4
01B7FA  E80204     INC W4, W4
01B7FC  980714     MOV W4, [W14+2]
01B7FE  90029E     MOV [W14+2], W5
01B800  200EF4     MOV #0xEF, W4
01B802  528F84     SUB W5, W4, [W15]
01B804  36FFF1     BRA LEU, 0x1B7E8
25027:                 HC05TrmMass[CntBt++]=ProfileMass[i];
01B7E8  22DB95     MOV #0x2DB9, W5
01B7EA  90021E     MOV [W14+2], W4
01B7EC  428204     ADD W5, W4, W4
01B7EE  784214     MOV.B [W4], W4
01B7F0  230CE5     MOV #0x30CE, W5
01B7F2  42829E     ADD W5, [W14], W5
01B7F4  784A84     MOV.B W4, [W5]
01B7F6  E80F1E     INC [W14], [W14]
25028:             
25029:             
25030:                 HC05TrmMass[2]=CntBt-3;
01B806  78021E     MOV [W14], W4
01B808  784204     MOV.B W4, W4
01B80A  524263     SUB.B W4, #0x3, W4
01B80C  230D05     MOV #0x30D0, W5
01B80E  784A84     MOV.B W4, [W5]
25031:             
25032:             
25033:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01B810  230D04     MOV #0x30D0, W4
01B812  784214     MOV.B [W4], W4
01B814  FB8204     ZE W4, W4
01B816  E80204     INC W4, W4
01B818  230D01     MOV #0x30D0, W1
01B81A  780004     MOV W4, W0
01B81C  029AF6     CALL CalcCheckSumm
01B81E  000000     NOP
01B820  784200     MOV.B W0, W4
01B822  230CE5     MOV #0x30CE, W5
01B824  42829E     ADD W5, [W14], W5
01B826  784A84     MOV.B W4, [W5]
01B828  E80F1E     INC [W14], [W14]
25034:             
25035:                 MustTrmHC05=1;
01B82A  809634     MOV 0x12C6, W4
01B82C  A09004     BSET W4, #9
01B82E  889634     MOV W4, 0x12C6
01B830  370009     BRA 0x1B844
25036:             
25037:             }
01B844  FA8000     ULNK
01B846  060000     RETURN
25038:             
25039:             
25040:             
25041:             void CmdOK (void)
25042:             {
01B848  FA0002     LNK #0x2
25043:                     unsigned int CntBt=4;
01B84A  200044     MOV #0x4, W4
01B84C  780F04     MOV W4, [W14]
25044:             
25045:             
25046:                 if (HC05_BUSY)
01B84E  809635     MOV 0x12C6, W5
01B850  204004     MOV #0x400, W4
01B852  628204     AND W5, W4, W4
01B854  520FE0     SUB W4, #0x0, [W15]
01B856  3A0036     BRA NZ, 0x1B8C4
25047:                     return;
01B8C4  000000     NOP
01B8C6  370007     BRA 0x1B8D6
25048:             
25049:                 if (MustTrmHC05)
01B858  809635     MOV 0x12C6, W5
01B85A  202004     MOV #0x200, W4
01B85C  628204     AND W5, W4, W4
01B85E  520FE0     SUB W4, #0x0, [W15]
01B860  3A0033     BRA NZ, 0x1B8C8
25050:                     return;
01B8C8  000000     NOP
01B8CA  370005     BRA 0x1B8D6
25051:                 if (!Hv_HC05)
01B862  8096D5     MOV 0x12DA, W5
01B864  200404     MOV #0x40, W4
01B866  628204     AND W5, W4, W4
01B868  520FE0     SUB W4, #0x0, [W15]
01B86A  320030     BRA Z, 0x1B8CC
25052:                 return;
01B8CC  000000     NOP
01B8CE  370003     BRA 0x1B8D6
25053:                 if (!MustTrmCmdOk)
01B86C  809694     MOV 0x12D2, W4
01B86E  620268     AND W4, #0x8, W4
01B870  520FE0     SUB W4, #0x0, [W15]
01B872  32002E     BRA Z, 0x1B8D0
25054:                 return;
01B8D0  000000     NOP
01B8D2  370001     BRA 0x1B8D6
25055:                 if (OnTransmittHC05)
01B874  809615     MOV 0x12C2, W5
01B876  202004     MOV #0x200, W4
01B878  628204     AND W5, W4, W4
01B87A  520FE0     SUB W4, #0x0, [W15]
01B87C  3A002B     BRA NZ, 0x1B8D4
25056:                     return;
01B8D4  000000     NOP
25057:                 HC05_BUSY=1;
01B87E  809634     MOV 0x12C6, W4
01B880  A0A004     BSET W4, #10
01B882  889634     MOV W4, 0x12C6
25058:             
25059:                 MustTrmCmdOk=0;
01B884  809694     MOV 0x12D2, W4
01B886  A13004     BCLR W4, #3
01B888  889694     MOV W4, 0x12D2
25060:             
25061:             
25062:                 HC05TrmMass[0]=0xff;
01B88A  230CE5     MOV #0x30CE, W5
01B88C  EBC200     SETM.B W4
01B88E  784A84     MOV.B W4, [W5]
25063:                 HC05TrmMass[1]=0xff;
01B890  230CF5     MOV #0x30CF, W5
01B892  EBC200     SETM.B W4
01B894  784A84     MOV.B W4, [W5]
25064:                 HC05TrmMass[2]=1;
01B896  230D05     MOV #0x30D0, W5
01B898  B3C014     MOV.B #0x1, W4
01B89A  784A84     MOV.B W4, [W5]
25065:                 HC05TrmMass[3]=12;//COMMAND
01B89C  230D15     MOV #0x30D1, W5
01B89E  B3C0C4     MOV.B #0xC, W4
01B8A0  784A84     MOV.B W4, [W5]
25066:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01B8A2  230D04     MOV #0x30D0, W4
01B8A4  784214     MOV.B [W4], W4
01B8A6  FB8204     ZE W4, W4
01B8A8  E80204     INC W4, W4
01B8AA  230D01     MOV #0x30D0, W1
01B8AC  780004     MOV W4, W0
01B8AE  029AF6     CALL CalcCheckSumm
01B8B0  000000     NOP
01B8B2  784200     MOV.B W0, W4
01B8B4  230CE5     MOV #0x30CE, W5
01B8B6  42829E     ADD W5, [W14], W5
01B8B8  784A84     MOV.B W4, [W5]
01B8BA  E80F1E     INC [W14], [W14]
25067:             
25068:                 MustTrmHC05=1;
01B8BC  809634     MOV 0x12C6, W4
01B8BE  A09004     BSET W4, #9
01B8C0  889634     MOV W4, 0x12C6
01B8C2  370009     BRA 0x1B8D6
25069:             }
01B8D6  FA8000     ULNK
01B8D8  060000     RETURN
25070:             
25071:             
25072:             
25073:             void CmdOK2 (void)
25074:             {
01B8DA  FA0002     LNK #0x2
25075:                     unsigned int CntBt=4;
01B8DC  200044     MOV #0x4, W4
01B8DE  780F04     MOV W4, [W14]
25076:             
25077:             
25078:                 if (HC05_BUSY)
01B8E0  809635     MOV 0x12C6, W5
01B8E2  204004     MOV #0x400, W4
01B8E4  628204     AND W5, W4, W4
01B8E6  520FE0     SUB W4, #0x0, [W15]
01B8E8  3A0036     BRA NZ, 0x1B956
25079:                     return;
01B956  000000     NOP
01B958  370007     BRA 0x1B968
25080:             
25081:                 if (MustTrmHC05)
01B8EA  809635     MOV 0x12C6, W5
01B8EC  202004     MOV #0x200, W4
01B8EE  628204     AND W5, W4, W4
01B8F0  520FE0     SUB W4, #0x0, [W15]
01B8F2  3A0033     BRA NZ, 0x1B95A
25082:                     return;
01B95A  000000     NOP
01B95C  370005     BRA 0x1B968
25083:                 if (!Hv_HC05)
01B8F4  8096D5     MOV 0x12DA, W5
01B8F6  200404     MOV #0x40, W4
01B8F8  628204     AND W5, W4, W4
01B8FA  520FE0     SUB W4, #0x0, [W15]
01B8FC  320030     BRA Z, 0x1B95E
25084:                 return;
01B95E  000000     NOP
01B960  370003     BRA 0x1B968
25085:                 if (!MustTrmCmdOk2)
01B8FE  809694     MOV 0x12D2, W4
01B900  620270     AND W4, #0x10, W4
01B902  520FE0     SUB W4, #0x0, [W15]
01B904  32002E     BRA Z, 0x1B962
25086:                 return;
01B962  000000     NOP
01B964  370001     BRA 0x1B968
25087:                 if (OnTransmittHC05)
01B906  809615     MOV 0x12C2, W5
01B908  202004     MOV #0x200, W4
01B90A  628204     AND W5, W4, W4
01B90C  520FE0     SUB W4, #0x0, [W15]
01B90E  3A002B     BRA NZ, 0x1B966
25088:                     return;
01B966  000000     NOP
25089:                 HC05_BUSY=1;
01B910  809634     MOV 0x12C6, W4
01B912  A0A004     BSET W4, #10
01B914  889634     MOV W4, 0x12C6
25090:             
25091:                 MustTrmCmdOk2=0;
01B916  809694     MOV 0x12D2, W4
01B918  A14004     BCLR W4, #4
01B91A  889694     MOV W4, 0x12D2
25092:             
25093:             
25094:                 HC05TrmMass[0]=0xff;
01B91C  230CE5     MOV #0x30CE, W5
01B91E  EBC200     SETM.B W4
01B920  784A84     MOV.B W4, [W5]
25095:                 HC05TrmMass[1]=0xff;
01B922  230CF5     MOV #0x30CF, W5
01B924  EBC200     SETM.B W4
01B926  784A84     MOV.B W4, [W5]
25096:                 HC05TrmMass[2]=1;
01B928  230D05     MOV #0x30D0, W5
01B92A  B3C014     MOV.B #0x1, W4
01B92C  784A84     MOV.B W4, [W5]
25097:                 HC05TrmMass[3]=13;//COMMAND
01B92E  230D15     MOV #0x30D1, W5
01B930  B3C0D4     MOV.B #0xD, W4
01B932  784A84     MOV.B W4, [W5]
25098:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01B934  230D04     MOV #0x30D0, W4
01B936  784214     MOV.B [W4], W4
01B938  FB8204     ZE W4, W4
01B93A  E80204     INC W4, W4
01B93C  230D01     MOV #0x30D0, W1
01B93E  780004     MOV W4, W0
01B940  029AF6     CALL CalcCheckSumm
01B942  000000     NOP
01B944  784200     MOV.B W0, W4
01B946  230CE5     MOV #0x30CE, W5
01B948  42829E     ADD W5, [W14], W5
01B94A  784A84     MOV.B W4, [W5]
01B94C  E80F1E     INC [W14], [W14]
25099:             
25100:                 MustTrmHC05=1;
01B94E  809634     MOV 0x12C6, W4
01B950  A09004     BSET W4, #9
01B952  889634     MOV W4, 0x12C6
01B954  370009     BRA 0x1B968
25101:             }
01B968  FA8000     ULNK
01B96A  060000     RETURN
25102:             
25103:             
25104:             
25105:             void CmdOK3 (void)
25106:             {
01B96C  FA0002     LNK #0x2
25107:                     unsigned int CntBt=4;
01B96E  200044     MOV #0x4, W4
01B970  780F04     MOV W4, [W14]
25108:             
25109:             
25110:                 if (HC05_BUSY)
01B972  809635     MOV 0x12C6, W5
01B974  204004     MOV #0x400, W4
01B976  628204     AND W5, W4, W4
01B978  520FE0     SUB W4, #0x0, [W15]
01B97A  3A0037     BRA NZ, 0x1B9EA
25111:                     return;
01B9EA  000000     NOP
01B9EC  370007     BRA 0x1B9FC
25112:             
25113:                 if (MustTrmHC05)
01B97C  809635     MOV 0x12C6, W5
01B97E  202004     MOV #0x200, W4
01B980  628204     AND W5, W4, W4
01B982  520FE0     SUB W4, #0x0, [W15]
01B984  3A0034     BRA NZ, 0x1B9EE
25114:                     return;
01B9EE  000000     NOP
01B9F0  370005     BRA 0x1B9FC
25115:                 if (!Hv_HC05)
01B986  8096D5     MOV 0x12DA, W5
01B988  200404     MOV #0x40, W4
01B98A  628204     AND W5, W4, W4
01B98C  520FE0     SUB W4, #0x0, [W15]
01B98E  320031     BRA Z, 0x1B9F2
25116:                 return;
01B9F2  000000     NOP
01B9F4  370003     BRA 0x1B9FC
25117:                 if (!MustTrmCmdOk3)
01B990  8096C5     MOV Flgs7, W5
01B992  210004     MOV #0x1000, W4
01B994  628204     AND W5, W4, W4
01B996  520FE0     SUB W4, #0x0, [W15]
01B998  32002E     BRA Z, 0x1B9F6
25118:                 return;
01B9F6  000000     NOP
01B9F8  370001     BRA 0x1B9FC
25119:                 if (OnTransmittHC05)
01B99A  809615     MOV 0x12C2, W5
01B99C  202004     MOV #0x200, W4
01B99E  628204     AND W5, W4, W4
01B9A0  520FE0     SUB W4, #0x0, [W15]
01B9A2  3A002B     BRA NZ, 0x1B9FA
25120:                     return;
01B9FA  000000     NOP
25121:                 HC05_BUSY=1;
01B9A4  809634     MOV 0x12C6, W4
01B9A6  A0A004     BSET W4, #10
01B9A8  889634     MOV W4, 0x12C6
25122:             
25123:                 MustTrmCmdOk3=0;
01B9AA  8096C4     MOV Flgs7, W4
01B9AC  A1C004     BCLR W4, #12
01B9AE  8896C4     MOV W4, Flgs7
25124:             
25125:             
25126:                 HC05TrmMass[0]=0xff;
01B9B0  230CE5     MOV #0x30CE, W5
01B9B2  EBC200     SETM.B W4
01B9B4  784A84     MOV.B W4, [W5]
25127:                 HC05TrmMass[1]=0xff;
01B9B6  230CF5     MOV #0x30CF, W5
01B9B8  EBC200     SETM.B W4
01B9BA  784A84     MOV.B W4, [W5]
25128:                 HC05TrmMass[2]=1;
01B9BC  230D05     MOV #0x30D0, W5
01B9BE  B3C014     MOV.B #0x1, W4
01B9C0  784A84     MOV.B W4, [W5]
25129:                 HC05TrmMass[3]=18;//COMMAND
01B9C2  230D15     MOV #0x30D1, W5
01B9C4  B3C124     MOV.B #0x12, W4
01B9C6  784A84     MOV.B W4, [W5]
25130:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01B9C8  230D04     MOV #0x30D0, W4
01B9CA  784214     MOV.B [W4], W4
01B9CC  FB8204     ZE W4, W4
01B9CE  E80204     INC W4, W4
01B9D0  230D01     MOV #0x30D0, W1
01B9D2  780004     MOV W4, W0
01B9D4  029AF6     CALL CalcCheckSumm
01B9D6  000000     NOP
01B9D8  784200     MOV.B W0, W4
01B9DA  230CE5     MOV #0x30CE, W5
01B9DC  42829E     ADD W5, [W14], W5
01B9DE  784A84     MOV.B W4, [W5]
01B9E0  E80F1E     INC [W14], [W14]
25131:             
25132:                 MustTrmHC05=1;
01B9E2  809634     MOV 0x12C6, W4
01B9E4  A09004     BSET W4, #9
01B9E6  889634     MOV W4, 0x12C6
01B9E8  370009     BRA 0x1B9FC
25133:             }
01B9FC  FA8000     ULNK
01B9FE  060000     RETURN
25134:             
25135:             void SensorlessManualStartInit(void)
25136:             {
01BA00  FA0000     LNK #0x0
25137:                 SensorLessOnCnt=250;
01BA02  200FA4     MOV #0xFA, W4
01BA04  88A2E4     MOV W4, SensorLessOnCnt
25138:             
25139:             
25140:                 StateSensorlessMotorStart=1;
01BA06  231CD5     MOV #0x31CD, W5
01BA08  B3C014     MOV.B #0x1, W4
01BA0A  784A84     MOV.B W4, [W5]
25141:             
25142:                 
25143:                 CurrLimit=SensorLessCurrLimit;
01BA0C  80C1B4     MOV SensorLessCurrLimit, W4
01BA0E  88C194     MOV W4, CurrLimit
25144:                 ChangeCVR();
01BA10  079FEC     RCALL ChangeCVR
25145:                 
25146:                 CurrUst=SensorlessCurrUst;
01BA12  81F4F4     MOV SensorlessCurrUst, W4
01BA14  89F494     MOV W4, CurrUst
25147:                 Alignment=1;    
01BA16  8096A4     MOV Flgs6, W4
01BA18  A0A004     BSET W4, #10
01BA1A  8896A4     MOV W4, Flgs6
25148:                 SensorlessNotBEMF=1;
01BA1C  809654     MOV 0x12CA, W4
01BA1E  A04004     BSET W4, #4
01BA20  889654     MOV W4, 0x12CA
25149:                 SensorlessStartNoHalls=1;
01BA22  8096B4     MOV 0x12D6, W4
01BA24  A0E004     BSET W4, #14
01BA26  8896B4     MOV W4, 0x12D6
25150:             
25151:                 SenosrlessPWM1=0;    
01BA28  EB0200     CLR W4
01BA2A  8892E4     MOV W4, SenosrlessPWM1
25152:                 SensorLessTimerConst=SensorLessTimerConstConst;
01BA2C  820134     MOV SensorLessTimerConstConst, W4
01BA2E  8A18A4     MOV W4, SensorLessTimerConst
25153:                 if (!(StartingMoveCnt&&CriticalError))
01BA30  8183E4     MOV StartingMoveCnt, W4
01BA32  520FE0     SUB W4, #0x0, [W15]
01BA34  320004     BRA Z, 0x1BA3E
01BA36  214074     MOV #0x1407, W4
01BA38  784214     MOV.B [W4], W4
01BA3A  524FE0     SUB.B W4, #0x0, [W15]
01BA3C  3A0009     BRA NZ, 0x1BA50
25154:                         {
25155:                           if (DS)
01BA3E  8096B5     MOV 0x12D6, W5
01BA40  208004     MOV #0x800, W4
01BA42  628204     AND W5, W4, W4
01BA44  520FE0     SUB W4, #0x0, [W15]
01BA46  320004     BRA Z, 0x1BA50
25156:                           {
25157:                             DS=0;
01BA48  8096B4     MOV 0x12D6, W4
01BA4A  A1B004     BCLR W4, #11
01BA4C  8896B4     MOV W4, 0x12D6
25158:                             RdSensors();
01BA4E  07DB33     RCALL RdSensors
25159:                           }
25160:                     }
25161:             
25162:                 CntBEMF=0;    
01BA50  210FD5     MOV #0x10FD, W5
01BA52  EB4200     CLR.B W4
01BA54  784A84     MOV.B W4, [W5]
25163:                 CanZeroCrossing=1;
01BA56  809644     MOV Flgs3, W4
01BA58  A0F004     BSET W4, #15
01BA5A  889644     MOV W4, Flgs3
25164:             }
01BA5C  FA8000     ULNK
01BA5E  060000     RETURN
25165:             
25166:             
25167:             
25168:             
25169:             void CmdSendUnlockMSG (void)
25170:             {
01BA60  FA0002     LNK #0x2
25171:                     unsigned int CntBt=4;
01BA62  200044     MOV #0x4, W4
01BA64  780F04     MOV W4, [W14]
25172:             
25173:             
25174:                 if (HC05_BUSY)
01BA66  809635     MOV 0x12C6, W5
01BA68  204004     MOV #0x400, W4
01BA6A  628204     AND W5, W4, W4
01BA6C  520FE0     SUB W4, #0x0, [W15]
01BA6E  3A0037     BRA NZ, 0x1BADE
25175:                     return;
01BADE  000000     NOP
01BAE0  370007     BRA 0x1BAF0
25176:             
25177:                 if (MustTrmHC05)
01BA70  809635     MOV 0x12C6, W5
01BA72  202004     MOV #0x200, W4
01BA74  628204     AND W5, W4, W4
01BA76  520FE0     SUB W4, #0x0, [W15]
01BA78  3A0034     BRA NZ, 0x1BAE2
25178:                     return;
01BAE2  000000     NOP
01BAE4  370005     BRA 0x1BAF0
25179:                 if (!Hv_HC05)
01BA7A  8096D5     MOV 0x12DA, W5
01BA7C  200404     MOV #0x40, W4
01BA7E  628204     AND W5, W4, W4
01BA80  520FE0     SUB W4, #0x0, [W15]
01BA82  320031     BRA Z, 0x1BAE6
25180:                 return;
01BAE6  000000     NOP
01BAE8  370003     BRA 0x1BAF0
25181:                 if (!SendUnlockMSG)
01BA84  809695     MOV 0x12D2, W5
01BA86  200804     MOV #0x80, W4
01BA88  628204     AND W5, W4, W4
01BA8A  520FE0     SUB W4, #0x0, [W15]
01BA8C  32002E     BRA Z, 0x1BAEA
25182:                 return;
01BAEA  000000     NOP
01BAEC  370001     BRA 0x1BAF0
25183:                 if (OnTransmittHC05)
01BA8E  809615     MOV 0x12C2, W5
01BA90  202004     MOV #0x200, W4
01BA92  628204     AND W5, W4, W4
01BA94  520FE0     SUB W4, #0x0, [W15]
01BA96  3A002B     BRA NZ, 0x1BAEE
25184:                     return;
01BAEE  000000     NOP
25185:                 HC05_BUSY=1;
01BA98  809634     MOV 0x12C6, W4
01BA9A  A0A004     BSET W4, #10
01BA9C  889634     MOV W4, 0x12C6
25186:             
25187:                 SendUnlockMSG=0;
01BA9E  809694     MOV 0x12D2, W4
01BAA0  A17004     BCLR W4, #7
01BAA2  889694     MOV W4, 0x12D2
25188:             
25189:             
25190:                 HC05TrmMass[0]=0xff;
01BAA4  230CE5     MOV #0x30CE, W5
01BAA6  EBC200     SETM.B W4
01BAA8  784A84     MOV.B W4, [W5]
25191:                 HC05TrmMass[1]=0xff;
01BAAA  230CF5     MOV #0x30CF, W5
01BAAC  EBC200     SETM.B W4
01BAAE  784A84     MOV.B W4, [W5]
25192:                 HC05TrmMass[2]=1;
01BAB0  230D05     MOV #0x30D0, W5
01BAB2  B3C014     MOV.B #0x1, W4
01BAB4  784A84     MOV.B W4, [W5]
25193:                 HC05TrmMass[3]=14;//COMMAND
01BAB6  230D15     MOV #0x30D1, W5
01BAB8  B3C0E4     MOV.B #0xE, W4
01BABA  784A84     MOV.B W4, [W5]
25194:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01BABC  230D04     MOV #0x30D0, W4
01BABE  784214     MOV.B [W4], W4
01BAC0  FB8204     ZE W4, W4
01BAC2  E80204     INC W4, W4
01BAC4  230D01     MOV #0x30D0, W1
01BAC6  780004     MOV W4, W0
01BAC8  029AF6     CALL CalcCheckSumm
01BACA  000000     NOP
01BACC  784200     MOV.B W0, W4
01BACE  230CE5     MOV #0x30CE, W5
01BAD0  42829E     ADD W5, [W14], W5
01BAD2  784A84     MOV.B W4, [W5]
01BAD4  E80F1E     INC [W14], [W14]
25195:             
25196:                 MustTrmHC05=1;
01BAD6  809634     MOV 0x12C6, W4
01BAD8  A09004     BSET W4, #9
01BADA  889634     MOV W4, 0x12C6
01BADC  370009     BRA 0x1BAF0
25197:             }
01BAF0  FA8000     ULNK
01BAF2  060000     RETURN
25198:             
25199:             
25200:             typedef union
25201:             {
25202:                 unsigned long int Val;
25203:                 unsigned int w[2] __attribute__((packed));
25204:                 unsigned char v[4];
25205:                 struct __attribute__((packed))
25206:                 {
25207:                     unsigned int LW;
25208:                     unsigned int HW;
25209:                 } word;
25210:                 struct __attribute__((packed))
25211:                 {
25212:                     unsigned char LB;
25213:                     unsigned char HB;
25214:                     unsigned char UB;
25215:                     unsigned char MB;
25216:                 } byte;
25217:             } uint32_t_VAL;
25218:             
25219:             unsigned long int ReadProgramMemory(unsigned long int address)
25220:             {  
01BAF4  FA000A     LNK #0xA
01BAF6  980730     MOV W0, [W14+6]
01BAF8  980741     MOV W1, [W14+8]
25221:                 uint32_t_VAL dwvResult;
25222:                 unsigned int wTBLPAGSave;
25223:              
25224:                 wTBLPAGSave = TBLPAG;
01BAFA  8002A4     MOV TBLPAG, W4
01BAFC  780F04     MOV W4, [W14]
25225:                 TBLPAG = ((uint32_t_VAL*)&address)->w[1];////->w[1];
01BAFE  470266     ADD W14, #0x6, W4
01BB00  900214     MOV [W4+2], W4
01BB02  8802A4     MOV W4, TBLPAG
25226:             
25227:                 dwvResult.w[1] = __builtin_tblrdh((unsigned int)address);
01BB04  90023E     MOV [W14+6], W4
01BB06  9002CE     MOV [W14+8], W5
01BB08  780204     MOV W4, W4
01BB0A  BA8214     TBLRDH [W4], W4
01BB0C  980724     MOV W4, [W14+4]
25228:                 dwvResult.w[0] = __builtin_tblrdl((unsigned int)address);
01BB0E  90023E     MOV [W14+6], W4
01BB10  9002CE     MOV [W14+8], W5
01BB12  780204     MOV W4, W4
01BB14  BA0214     TBLRDL [W4], W4
01BB16  980714     MOV W4, [W14+2]
25229:                 TBLPAG = wTBLPAGSave;
01BB18  78021E     MOV [W14], W4
01BB1A  8802A4     MOV W4, TBLPAG
25230:              
25231:                 return dwvResult.Val;
01BB1C  90021E     MOV [W14+2], W4
01BB1E  9002AE     MOV [W14+4], W5
25232:             }
01BB20  BE0004     MOV.D W4, W0
01BB22  FA8000     ULNK
01BB24  060000     RETURN
25233:             
25234:             
25235:             void Lights(void)
25236:             {
01BB26  FA0000     LNK #0x0
25237:                 if (Monocycle&&LightsTudaSuda)
01BB28  809745     MOV StatFlgs, W5
01BB2A  280004     MOV #0x8000, W4
01BB2C  628204     AND W5, W4, W4
01BB2E  520FE0     SUB W4, #0x0, [W15]
01BB30  320005     BRA Z, 0x1BB3C
01BB32  809765     MOV StatFlgs2, W5
01BB34  200404     MOV #0x40, W4
01BB36  628204     AND W5, W4, W4
01BB38  520FE0     SUB W4, #0x0, [W15]
01BB3A  3A0068     BRA NZ, 0x1BC0C
25238:                     return;
01BC0C  000000     NOP
25239:                 
25240:                 
25241:                 if (!CntTurn)
01BB3C  820644     MOV CntTurn, W4
01BB3E  520FE0     SUB W4, #0x0, [W15]
01BB40  3A0061     BRA NZ, 0x1BC04
25242:                 {
25243:                     if (LeftTurn)
01BB42  809695     MOV 0x12D2, W5
01BB44  210004     MOV #0x1000, W4
01BB46  628204     AND W5, W4, W4
01BB48  520FE0     SUB W4, #0x0, [W15]
01BB4A  320019     BRA Z, 0x1BB7E
25244:                     {
25245:             #if !defined VECTOR
25246:                         if (Left)
25247:                             Left=0;
25248:                         else
25249:                         {
25250:                             if (!Monocycle)
25251:                             SoundNum=12;
25252:                             Left=1;
25253:                         }
25254:             #else
25255:                         if (!Left)
01BB4C  8096C5     MOV Flgs7, W5
01BB4E  280004     MOV #0x8000, W4
01BB50  628204     AND W5, W4, W4
01BB52  520FE0     SUB W4, #0x0, [W15]
01BB54  3A0006     BRA NZ, 0x1BB62
25256:                         {
25257:                             Left=1;
01BB56  8096C4     MOV Flgs7, W4
01BB58  A0F004     BSET W4, #15
01BB5A  8896C4     MOV W4, Flgs7
25258:                             CntTurn=CntTurnOffConst;
01BB5C  820674     MOV CntTurnOffConst, W4
01BB5E  8A0644     MOV W4, CntTurn
01BB60  37001A     BRA 0x1BB96
25259:                         }
25260:                         else
25261:                         {
25262:                             if (!Monocycle)
01BB62  809745     MOV StatFlgs, W5
01BB64  280004     MOV #0x8000, W4
01BB66  628204     AND W5, W4, W4
01BB68  520FE0     SUB W4, #0x0, [W15]
01BB6A  3A0003     BRA NZ, 0x1BB72
25263:                             SoundNum=12;
01BB6C  2124B5     MOV #0x124B, W5
01BB6E  B3C0C4     MOV.B #0xC, W4
01BB70  784A84     MOV.B W4, [W5]
25264:                             Left=0;
01BB72  8096C4     MOV Flgs7, W4
01BB74  A1F004     BCLR W4, #15
01BB76  8896C4     MOV W4, Flgs7
25265:                             CntTurn=CntTurnOnConst;
01BB78  820664     MOV CntTurnOnConst, W4
01BB7A  8A0644     MOV W4, CntTurn
01BB7C  37000C     BRA 0x1BB96
25266:                         }
25267:             #endif
25268:                         
25269:                         //CntTurn=50;
25270:                     }
25271:                     else
25272:                     {
25273:             #if !defined VECTOR
25274:                         if (!StopLights)
25275:                             Left=0;
25276:                         else
25277:                         {
25278:                             Left=1;
25279:                         }
25280:             #else
25281:                         if (!StopLights)
01BB7E  809695     MOV 0x12D2, W5
01BB80  240004     MOV #0x4000, W4
01BB82  628204     AND W5, W4, W4
01BB84  520FE0     SUB W4, #0x0, [W15]
01BB86  3A0004     BRA NZ, 0x1BB90
25282:                             Left=1;
01BB88  8096C4     MOV Flgs7, W4
01BB8A  A0F004     BSET W4, #15
01BB8C  8896C4     MOV W4, Flgs7
01BB8E  370003     BRA 0x1BB96
25283:                         else
25284:                         {
25285:                             Left=0;
01BB90  8096C4     MOV Flgs7, W4
01BB92  A1F004     BCLR W4, #15
01BB94  8896C4     MOV W4, Flgs7
25286:                         }
25287:             #endif
25288:                     }
25289:                     
25290:                     if (RightTurn)
01BB96  809695     MOV 0x12D2, W5
01BB98  220004     MOV #0x2000, W4
01BB9A  628204     AND W5, W4, W4
01BB9C  520FE0     SUB W4, #0x0, [W15]
01BB9E  320019     BRA Z, 0x1BBD2
25291:                     {
25292:             #if !defined VECTOR
25293:                         if (Right)
25294:                             Right=0;
25295:                         else
25296:                         {
25297:                             if (!Monocycle)
25298:                             SoundNum=12;
25299:                             Right=1;
25300:                         }
25301:             #else
25302:                         if (!Right)
01BBA0  8096C5     MOV Flgs7, W5
01BBA2  240004     MOV #0x4000, W4
01BBA4  628204     AND W5, W4, W4
01BBA6  520FE0     SUB W4, #0x0, [W15]
01BBA8  3A0006     BRA NZ, 0x1BBB6
25303:                         {
25304:                             Right=1;
01BBAA  8096C4     MOV Flgs7, W4
01BBAC  A0E004     BSET W4, #14
01BBAE  8896C4     MOV W4, Flgs7
25305:                             CntTurn=CntTurnOffConst;
01BBB0  820674     MOV CntTurnOffConst, W4
01BBB2  8A0644     MOV W4, CntTurn
01BBB4  37001A     BRA 0x1BBEA
25306:                         }
25307:                         else
25308:                         {
25309:                             if (!Monocycle)
01BBB6  809745     MOV StatFlgs, W5
01BBB8  280004     MOV #0x8000, W4
01BBBA  628204     AND W5, W4, W4
01BBBC  520FE0     SUB W4, #0x0, [W15]
01BBBE  3A0003     BRA NZ, 0x1BBC6
25310:                             SoundNum=12;
01BBC0  2124B5     MOV #0x124B, W5
01BBC2  B3C0C4     MOV.B #0xC, W4
01BBC4  784A84     MOV.B W4, [W5]
25311:                             Right=0;
01BBC6  8096C4     MOV Flgs7, W4
01BBC8  A1E004     BCLR W4, #14
01BBCA  8896C4     MOV W4, Flgs7
25312:                             CntTurn=CntTurnOnConst;
01BBCC  820664     MOV CntTurnOnConst, W4
01BBCE  8A0644     MOV W4, CntTurn
01BBD0  37000C     BRA 0x1BBEA
25313:                         }
25314:             #endif
25315:                         //CntTurn=150;
25316:                     }
25317:                     else
25318:                     {
25319:             #if !defined VECTOR
25320:                         if (!StopLights)
25321:                             Right=0;
25322:                         else
25323:                         {
25324:                             Right=1;
25325:                         }
25326:             #else
25327:                         if (!StopLights)
01BBD2  809695     MOV 0x12D2, W5
01BBD4  240004     MOV #0x4000, W4
01BBD6  628204     AND W5, W4, W4
01BBD8  520FE0     SUB W4, #0x0, [W15]
01BBDA  3A0004     BRA NZ, 0x1BBE4
25328:                             Right=1;
01BBDC  8096C4     MOV Flgs7, W4
01BBDE  A0E004     BSET W4, #14
01BBE0  8896C4     MOV W4, Flgs7
01BBE2  370003     BRA 0x1BBEA
25329:                         else
25330:                         {
25331:                             Right=0;
01BBE4  8096C4     MOV Flgs7, W4
01BBE6  A1E004     BCLR W4, #14
01BBE8  8896C4     MOV W4, Flgs7
25332:                         }
25333:             #endif
25334:                     }
25335:             
25336:                     if ((!LeftTurn)&&(!RightTurn))
01BBEA  809695     MOV 0x12D2, W5
01BBEC  210004     MOV #0x1000, W4
01BBEE  628204     AND W5, W4, W4
01BBF0  520FE0     SUB W4, #0x0, [W15]
01BBF2  3A000D     BRA NZ, 0x1BC0E
01BBF4  809695     MOV 0x12D2, W5
01BBF6  220004     MOV #0x2000, W4
01BBF8  628204     AND W5, W4, W4
01BBFA  520FE0     SUB W4, #0x0, [W15]
01BBFC  3A0008     BRA NZ, 0x1BC0E
25337:                         CntTurn=0;
01BBFE  EB0200     CLR W4
01BC00  8A0644     MOV W4, CntTurn
01BC02  370005     BRA 0x1BC0E
25338:                     
25339:                 }
25340:                 else
25341:                     CntTurn--;
01BC04  820644     MOV CntTurn, W4
01BC06  E90204     DEC W4, W4
01BC08  8A0644     MOV W4, CntTurn
01BC0A  370001     BRA 0x1BC0E
25342:                 
25343:             }
01BC0E  FA8000     ULNK
01BC10  060000     RETURN
25344:             
25345:             
25346:             void BzFuncOn(void)
25347:             {
01BC12  FA0000     LNK #0x0
25348:                 if (!BuzzerOff)
01BC14  8096A5     MOV Flgs6, W5
01BC16  200804     MOV #0x80, W4
01BC18  628204     AND W5, W4, W4
01BC1A  520FE0     SUB W4, #0x0, [W15]
01BC1C  3A001B     BRA NZ, 0x1BC54
25349:                 {
25350:                 Buzzer=1; 
01BC1E  A88E54     BSET LATF, #4
25351:             #if !defined VECTOR
25352:             #if !defined ISOLATED
25353:                 if (BuzzAndHorn) 
25354:                     Horn=1;
25355:                 if (HorningL||HorningH)
25356:                     Horn=1;
25357:             #else
25358:                 if (BuzzAndHorn) 
25359:                     Horn=0;
25360:                 
25361:                 if (HorningL||HorningH)
25362:                     Horn=0;
25363:                 
25364:             #endif
25365:             #else
25366:                 if (BuzzAndHorn) 
01BC20  809754     MOV StatFlgs1, W4
01BC22  620268     AND W4, #0x8, W4
01BC24  520FE0     SUB W4, #0x0, [W15]
01BC26  32000A     BRA Z, 0x1BC3C
25367:                 {
25368:                     if (!LightOn&&!KeyLightStop)
01BC28  809775     MOV StatFlgs3, W5
01BC2A  202004     MOV #0x200, W4
01BC2C  628204     AND W5, W4, W4
01BC2E  520FE0     SUB W4, #0x0, [W15]
01BC30  3A0005     BRA NZ, 0x1BC3C
01BC32  809784     MOV StatFlgs4, W4
01BC34  620261     AND W4, #0x1, W4
01BC36  520FE0     SUB W4, #0x0, [W15]
01BC38  3A0001     BRA NZ, 0x1BC3C
25369:             #if !defined VECTORS
25370:                                 Horn=0;
01BC3A  A94E35     BCLR 0xE35, #2
25371:             #else
25372:                                 //Horn=1;
25373:                                 OC3R=((unsigned int)KeyLightBrightness)<<8;
25374:             #endif
25375:                 }
25376:                 if (HorningL||HorningH)
01BC3C  809625     MOV Flgs2, W5
01BC3E  210004     MOV #0x1000, W4
01BC40  628204     AND W5, W4, W4
01BC42  520FE0     SUB W4, #0x0, [W15]
01BC44  3A0005     BRA NZ, 0x1BC50
01BC46  809635     MOV 0x12C6, W5
01BC48  280004     MOV #0x8000, W4
01BC4A  628204     AND W5, W4, W4
01BC4C  520FE0     SUB W4, #0x0, [W15]
01BC4E  320009     BRA Z, 0x1BC62
25377:             #if !defined VECTORS
25378:                                 Horn=0;
01BC50  A94E35     BCLR 0xE35, #2
01BC52  370007     BRA 0x1BC62
25379:             #else
25380:                                 //Horn=1;
25381:                 OC3R=((unsigned int)KeyLightBrightness)<<8;
25382:             #endif
25383:             
25384:             #endif
25385:                 }
25386:                 else
25387:                 {
25388:                    BuzzerMacroOff 
01BC54  A98E54     BCLR LATF, #4
01BC56  809775     MOV StatFlgs3, W5
01BC58  202004     MOV #0x200, W4
01BC5A  628204     AND W5, W4, W4
01BC5C  520FE0     SUB W4, #0x0, [W15]
01BC5E  3A0001     BRA NZ, 0x1BC62
01BC60  A84E35     BSET 0xE35, #2
25389:                 }
25390:             }
01BC62  FA8000     ULNK
01BC64  060000     RETURN
25391:             
25392:             
25393:             void ChangeCurr(void)
25394:             {
01BC66  FA0000     LNK #0x0
01BC68  781F88     MOV W8, [W15++]
25395:              //   if (Monocycle&&(!DirectControlMotor))
25396:               //  if (!DirectControlMotor)
25397:                 //    return;
25398:              
25399:                 
25400:                 
25401:                 if (CurrDecrease)
01BC6A  8096A4     MOV Flgs6, W4
01BC6C  620270     AND W4, #0x10, W4
01BC6E  520FE0     SUB W4, #0x0, [W15]
01BC70  32000B     BRA Z, 0x1BC88
25402:                 {
25403:                         CurrUst=300;
01BC72  2012C4     MOV #0x12C, W4
01BC74  89F494     MOV W4, CurrUst
25404:                         CurrPhaseLimit=600;
01BC76  202584     MOV #0x258, W4
01BC78  89F4C4     MOV W4, CurrPhaseLimit
25405:                         if (CurrLimit!=0)
01BC7A  80C194     MOV CurrLimit, W4
01BC7C  520FE0     SUB W4, #0x0, [W15]
01BC7E  3200A1     BRA Z, 0x1BDC2
25406:                         {
25407:                         CurrLimit=0;
01BC80  EB0200     CLR W4
01BC82  88C194     MOV W4, CurrLimit
25408:                         ChangeCVR();
01BC84  079EB2     RCALL ChangeCVR
25409:                         }
25410:                         return;
01BC86  3700A4     BRA 0x1BDD0
01BDC2  000000     NOP
01BDC4  370005     BRA 0x1BDD0
25411:                 }   
25412:                 
25413:                 
25414:                 if (!Sensorless)
01BC88  809755     MOV StatFlgs1, W5
01BC8A  200204     MOV #0x20, W4
01BC8C  628204     AND W5, W4, W4
01BC8E  520FE0     SUB W4, #0x0, [W15]
01BC90  3A0069     BRA NZ, 0x1BD64
25415:                 {
25416:                 switch (ChangeCurrStateMachine)
01BC92  2183F4     MOV #0x183F, W4
01BC94  784214     MOV.B [W4], W4
01BC96  FB8204     ZE W4, W4
01BC98  520FE0     SUB W4, #0x0, [W15]
01BC9A  320003     BRA Z, 0x1BCA2
01BC9C  520FE1     SUB W4, #0x1, [W15]
01BC9E  320044     BRA Z, 0x1BD28
01BCA0  37005D     BRA 0x1BD5C
25417:                 {
25418:                     case 0:
25419:                         if (!Monocycle)
01BCA2  809745     MOV StatFlgs, W5
01BCA4  280004     MOV #0x8000, W4
01BCA6  628204     AND W5, W4, W4
01BCA8  520FE0     SUB W4, #0x0, [W15]
01BCAA  3A002A     BRA NZ, 0x1BD00
25420:                         {
25421:                         if (CurrPhaseLimit!=CurrPhaseLimitSpd0)
01BCAC  81F4C5     MOV CurrPhaseLimit, W5
01BCAE  81B7B4     MOV CurrPhaseLimitSpd0, W4
01BCB0  528F84     SUB W5, W4, [W15]
01BCB2  320002     BRA Z, 0x1BCB8
25422:                         CurrPhaseLimit=CurrPhaseLimitSpd0;
01BCB4  81B7B4     MOV CurrPhaseLimitSpd0, W4
01BCB6  89F4C4     MOV W4, CurrPhaseLimit
25423:                         if (CurrUst!=CurrUstSpd0)
01BCB8  81F495     MOV CurrUst, W5
01BCBA  81F4A4     MOV CurrUstSpd0, W4
01BCBC  528F84     SUB W5, W4, [W15]
01BCBE  320002     BRA Z, 0x1BCC4
25424:                         CurrUst=CurrUstSpd0;
01BCC0  81F4A4     MOV CurrUstSpd0, W4
01BCC2  89F494     MOV W4, CurrUst
25425:                         if (CurrLimit!=CurrLimitSpd0)
01BCC4  80C195     MOV CurrLimit, W5
01BCC6  81B7E4     MOV CurrLimitSpd0, W4
01BCC8  528F84     SUB W5, W4, [W15]
01BCCA  320003     BRA Z, 0x1BCD2
25426:                         {
25427:                         CurrLimit=CurrLimitSpd0;
01BCCC  81B7E4     MOV CurrLimitSpd0, W4
01BCCE  88C194     MOV W4, CurrLimit
25428:                         ChangeCVR();
01BCD0  079E8C     RCALL ChangeCVR
25429:                         }
25430:                         if (Spd1ResPlus>SpdStartLevelFl)
01BCD2  817F44     MOV Spd1ResPlus, W4
01BCD4  DEA2CF     ASR W4, #15, W5
01BCD6  BE0004     MOV.D W4, W0
01BCD8  02257C     CALL ___floatsisf
01BCDA  000000     NOP
01BCDC  BE0300     MOV.D W0, W6
01BCDE  8156B4     MOV SpdStartLevelFl, W4
01BCE0  8156C5     MOV 0x2AD8, W5
01BCE2  B3C018     MOV.B #0x1, W8
01BCE4  BE0104     MOV.D W4, W2
01BCE6  BE0006     MOV.D W6, W0
01BCE8  022500     CALL ___gtsf2
01BCEA  000000     NOP
01BCEC  780200     MOV W0, W4
01BCEE  520FE0     SUB W4, #0x0, [W15]
01BCF0  3C0001     BRA GT, 0x1BCF4
01BCF2  EB4400     CLR.B W8
01BCF4  544FE0     SUB.B W8, #0x0, [W15]
01BCF6  320067     BRA Z, 0x1BDC6
25431:                             ChangeCurrStateMachine=1;
01BCF8  2183F5     MOV #0x183F, W5
01BCFA  B3C014     MOV.B #0x1, W4
01BCFC  784A84     MOV.B W4, [W5]
25432:                         }
25433:                         else
25434:                         {
25435:                         if (CurrPhaseLimit!=CurrPhaseLimitWork)
01BD00  81F4C5     MOV CurrPhaseLimit, W5
01BD02  81F4D4     MOV CurrPhaseLimitWork, W4
01BD04  528F84     SUB W5, W4, [W15]
01BD06  320002     BRA Z, 0x1BD0C
25436:                         CurrPhaseLimit=CurrPhaseLimitWork;
01BD08  81F4D4     MOV CurrPhaseLimitWork, W4
01BD0A  89F4C4     MOV W4, CurrPhaseLimit
25437:                         if (CurrUst!=CurrUstWork)
01BD0C  81F495     MOV CurrUst, W5
01BD0E  81F4E4     MOV CurrUstWork, W4
01BD10  528F84     SUB W5, W4, [W15]
01BD12  320002     BRA Z, 0x1BD18
25438:                         CurrUst=CurrUstWork;
01BD14  81F4E4     MOV CurrUstWork, W4
01BD16  89F494     MOV W4, CurrUst
25439:                         if (CurrLimit!=CurrLimitWork)
01BD18  80C195     MOV CurrLimit, W5
01BD1A  80C1A4     MOV CurrLimitWork, W4
01BD1C  528F84     SUB W5, W4, [W15]
01BD1E  320055     BRA Z, 0x1BDCA
25440:                         {
25441:                         CurrLimit=CurrLimitWork;
01BD20  80C1A4     MOV CurrLimitWork, W4
01BD22  88C194     MOV W4, CurrLimit
25442:                         ChangeCVR();
01BD24  079E62     RCALL ChangeCVR
25443:                         }
25444:                         }
25445:                         break;
01BCFE  370068     BRA 0x1BDD0
01BD26  370054     BRA 0x1BDD0
01BDC6  000000     NOP
01BDC8  370003     BRA 0x1BDD0
01BDCA  000000     NOP
01BDCC  370001     BRA 0x1BDD0
25446:                     case 1:
25447:                         if (CurrPhaseLimit!=CurrPhaseLimitWork)
01BD28  81F4C5     MOV CurrPhaseLimit, W5
01BD2A  81F4D4     MOV CurrPhaseLimitWork, W4
01BD2C  528F84     SUB W5, W4, [W15]
01BD2E  320002     BRA Z, 0x1BD34
25448:                         CurrPhaseLimit=CurrPhaseLimitWork;
01BD30  81F4D4     MOV CurrPhaseLimitWork, W4
01BD32  89F4C4     MOV W4, CurrPhaseLimit
25449:                         if (CurrUst!=CurrUstWork)
01BD34  81F495     MOV CurrUst, W5
01BD36  81F4E4     MOV CurrUstWork, W4
01BD38  528F84     SUB W5, W4, [W15]
01BD3A  320002     BRA Z, 0x1BD40
25450:                         CurrUst=CurrUstWork;
01BD3C  81F4E4     MOV CurrUstWork, W4
01BD3E  89F494     MOV W4, CurrUst
25451:                         if (CurrLimit!=CurrLimitWork)
01BD40  80C195     MOV CurrLimit, W5
01BD42  80C1A4     MOV CurrLimitWork, W4
01BD44  528F84     SUB W5, W4, [W15]
01BD46  320003     BRA Z, 0x1BD4E
25452:                         {
25453:                         CurrLimit=CurrLimitWork;
01BD48  80C1A4     MOV CurrLimitWork, W4
01BD4A  88C194     MOV W4, CurrLimit
25454:                         ChangeCVR();
01BD4C  079E4E     RCALL ChangeCVR
25455:                         }
25456:                         if (Spd1Res==0)
01BD4E  817F14     MOV Spd1Res, W4
01BD50  520FE0     SUB W4, #0x0, [W15]
01BD52  3A003D     BRA NZ, 0x1BDCE
25457:                             ChangeCurrStateMachine=0;
01BD54  2183F5     MOV #0x183F, W5
01BD56  EB4200     CLR.B W4
01BD58  784A84     MOV.B W4, [W5]
25458:                         break;
01BD5A  37003A     BRA 0x1BDD0
01BDCE  000000     NOP
25459:                     default:
25460:                         ChangeCurrStateMachine=0;
01BD5C  2183F5     MOV #0x183F, W5
01BD5E  EB4200     CLR.B W4
01BD60  784A84     MOV.B W4, [W5]
25461:                         break;
01BD62  370036     BRA 0x1BDD0
25462:                 }
25463:                 }
25464:                 else
25465:                 {
25466:                     if (StateSensorlessMotorStart!=8)
01BD64  231CD4     MOV #0x31CD, W4
01BD66  784214     MOV.B [W4], W4
01BD68  524FE8     SUB.B W4, #0x8, [W15]
01BD6A  320013     BRA Z, 0x1BD92
25467:                     {
25468:                         if (CurrPhaseLimit!=CurrPhaseLimitSpd0)
01BD6C  81F4C5     MOV CurrPhaseLimit, W5
01BD6E  81B7B4     MOV CurrPhaseLimitSpd0, W4
01BD70  528F84     SUB W5, W4, [W15]
01BD72  320002     BRA Z, 0x1BD78
25469:                         CurrPhaseLimit=CurrPhaseLimitSpd0;
01BD74  81B7B4     MOV CurrPhaseLimitSpd0, W4
01BD76  89F4C4     MOV W4, CurrPhaseLimit
25470:                         if (CurrUst!=CurrUstSpd0)
01BD78  81F495     MOV CurrUst, W5
01BD7A  81F4A4     MOV CurrUstSpd0, W4
01BD7C  528F84     SUB W5, W4, [W15]
01BD7E  320002     BRA Z, 0x1BD84
25471:                         CurrUst=CurrUstSpd0;
01BD80  81F4A4     MOV CurrUstSpd0, W4
01BD82  89F494     MOV W4, CurrUst
25472:                         if (CurrLimit!=CurrLimitSpd0)
01BD84  80C195     MOV CurrLimit, W5
01BD86  81B7E4     MOV CurrLimitSpd0, W4
01BD88  528F84     SUB W5, W4, [W15]
01BD8A  320003     BRA Z, 0x1BD92
25473:                         {
25474:                         CurrLimit=CurrLimitSpd0;
01BD8C  81B7E4     MOV CurrLimitSpd0, W4
01BD8E  88C194     MOV W4, CurrLimit
25475:                         ChangeCVR();
01BD90  079E2C     RCALL ChangeCVR
25476:                         }
25477:                     }
25478:                     if (StateSensorlessMotorStart==8)
01BD92  231CD4     MOV #0x31CD, W4
01BD94  784214     MOV.B [W4], W4
01BD96  524FE8     SUB.B W4, #0x8, [W15]
01BD98  3A001B     BRA NZ, 0x1BDD0
25479:                     {
25480:                         if (CurrPhaseLimit!=CurrPhaseLimitWork)
01BD9A  81F4C5     MOV CurrPhaseLimit, W5
01BD9C  81F4D4     MOV CurrPhaseLimitWork, W4
01BD9E  528F84     SUB W5, W4, [W15]
01BDA0  320002     BRA Z, 0x1BDA6
25481:                         CurrPhaseLimit=CurrPhaseLimitWork;
01BDA2  81F4D4     MOV CurrPhaseLimitWork, W4
01BDA4  89F4C4     MOV W4, CurrPhaseLimit
25482:                         if (CurrUst!=CurrUstWork)
01BDA6  81F495     MOV CurrUst, W5
01BDA8  81F4E4     MOV CurrUstWork, W4
01BDAA  528F84     SUB W5, W4, [W15]
01BDAC  320002     BRA Z, 0x1BDB2
25483:                         CurrUst=CurrUstWork;
01BDAE  81F4E4     MOV CurrUstWork, W4
01BDB0  89F494     MOV W4, CurrUst
25484:                         if (CurrLimit!=CurrLimitWork)
01BDB2  80C195     MOV CurrLimit, W5
01BDB4  80C1A4     MOV CurrLimitWork, W4
01BDB6  528F84     SUB W5, W4, [W15]
01BDB8  32000B     BRA Z, 0x1BDD0
25485:                         {
25486:                         CurrLimit=CurrLimitWork;
01BDBA  80C1A4     MOV CurrLimitWork, W4
01BDBC  88C194     MOV W4, CurrLimit
25487:                         ChangeCVR();
01BDBE  079E15     RCALL ChangeCVR
01BDC0  370007     BRA 0x1BDD0
25488:                         }
25489:                     }
25490:                 }
25491:                 
25492:                 
25493:                 
25494:                 
25495:             }
01BDD0  78044F     MOV [--W15], W8
01BDD2  FA8000     ULNK
01BDD4  060000     RETURN
25496:             
25497:             
25498:             
25499:             void Spd0TimerStateMachine(void)
25500:             {
01BDD6  FA0000     LNK #0x0
01BDD8  781F88     MOV W8, [W15++]
25501:                 
25502:                 switch (Spd0TimerStateMachineCnt)
01BDDA  2305D4     MOV #0x305D, W4
01BDDC  784214     MOV.B [W4], W4
01BDDE  FB8204     ZE W4, W4
01BDE0  520FE1     SUB W4, #0x1, [W15]
01BDE2  320006     BRA Z, 0x1BDF0
01BDE4  520FE2     SUB W4, #0x2, [W15]
01BDE6  320031     BRA Z, 0x1BE4A
01BDE8  520FE0     SUB W4, #0x0, [W15]
01BDEA  3A0049     BRA NZ, 0x1BE7E
25503:                 {
25504:                     case 0:
25505:                         Nop();
01BDEC  000000     NOP
25506:                         break;
01BDEE  370057     BRA 0x1BE9E
25507:                     case 1:
25508:                         if (Spd0Timer)
01BDF0  81B7D4     MOV Spd0Timer, W4
01BDF2  520FE0     SUB W4, #0x0, [W15]
01BDF4  32000C     BRA Z, 0x1BE0E
25509:                         {
25510:                             Spd0Timer--;
01BDF6  81B7D4     MOV Spd0Timer, W4
01BDF8  E90204     DEC W4, W4
01BDFA  89B7D4     MOV W4, Spd0Timer
25511:                             if (Spd0Timer==0)
01BDFC  81B7D4     MOV Spd0Timer, W4
01BDFE  520FE0     SUB W4, #0x0, [W15]
01BE00  3A0006     BRA NZ, 0x1BE0E
25512:                             {
25513:                             CriticalError=CRERR_SPD0;
01BE02  214075     MOV #0x1407, W5
01BE04  B3C074     MOV.B #0x7, W4
01BE06  784A84     MOV.B W4, [W5]
25514:                             Spd0TimerStateMachineCnt=2;
01BE08  2305D5     MOV #0x305D, W5
01BE0A  B3C024     MOV.B #0x2, W4
01BE0C  784A84     MOV.B W4, [W5]
25515:                             }
25516:                         }
25517:                         if (Spd1ResPlus>SpdStartLevelFl)
01BE0E  817F44     MOV Spd1ResPlus, W4
01BE10  DEA2CF     ASR W4, #15, W5
01BE12  BE0004     MOV.D W4, W0
01BE14  02257C     CALL ___floatsisf
01BE16  000000     NOP
01BE18  BE0300     MOV.D W0, W6
01BE1A  8156B4     MOV SpdStartLevelFl, W4
01BE1C  8156C5     MOV 0x2AD8, W5
01BE1E  B3C018     MOV.B #0x1, W8
01BE20  BE0104     MOV.D W4, W2
01BE22  BE0006     MOV.D W6, W0
01BE24  022500     CALL ___gtsf2
01BE26  000000     NOP
01BE28  780200     MOV W0, W4
01BE2A  520FE0     SUB W4, #0x0, [W15]
01BE2C  3C0001     BRA GT, 0x1BE30
01BE2E  EB4400     CLR.B W8
01BE30  544FE0     SUB.B W8, #0x0, [W15]
01BE32  32002A     BRA Z, 0x1BE88
25518:                         {
25519:                             Spd0TimerStateMachineCnt=0;
01BE34  2305D5     MOV #0x305D, W5
01BE36  EB4200     CLR.B W4
01BE38  784A84     MOV.B W4, [W5]
25520:                             if (CriticalError==CRERR_SPD0)
01BE3A  214074     MOV #0x1407, W4
01BE3C  784214     MOV.B [W4], W4
01BE3E  524FE7     SUB.B W4, #0x7, [W15]
01BE40  3A0025     BRA NZ, 0x1BE8C
25521:                                 CriticalError=0;
01BE42  214075     MOV #0x1407, W5
01BE44  EB4200     CLR.B W4
01BE46  784A84     MOV.B W4, [W5]
25522:                         }
25523:                         break;
01BE48  37002A     BRA 0x1BE9E
01BE88  000000     NOP
01BE8A  370009     BRA 0x1BE9E
01BE8C  000000     NOP
01BE8E  370007     BRA 0x1BE9E
25524:                     case 2:
25525:                         if ((PWM1>-110)&&(PWM1<110)&&(CriticalError==CRERR_SPD0))
01BE4A  809285     MOV PWM1, W5
01BE4C  2FF934     MOV #0xFF93, W4
01BE4E  528F84     SUB W5, W4, [W15]
01BE50  35001F     BRA LT, 0x1BE90
01BE52  809285     MOV PWM1, W5
01BE54  2006D4     MOV #0x6D, W4
01BE56  528F84     SUB W5, W4, [W15]
01BE58  3C001D     BRA GT, 0x1BE94
01BE5A  214074     MOV #0x1407, W4
01BE5C  784214     MOV.B [W4], W4
01BE5E  524FE7     SUB.B W4, #0x7, [W15]
01BE60  3A001B     BRA NZ, 0x1BE98
25526:                         {
25527:                             CriticalError=0;
01BE62  214075     MOV #0x1407, W5
01BE64  EB4200     CLR.B W4
01BE66  784A84     MOV.B W4, [W5]
25528:                             Spd0TimerStateMachineCnt=0;
01BE68  2305D5     MOV #0x305D, W5
01BE6A  EB4200     CLR.B W4
01BE6C  784A84     MOV.B W4, [W5]
25529:                             BuzzerMacroOff
01BE6E  A98E54     BCLR LATF, #4
01BE70  809775     MOV StatFlgs3, W5
01BE72  202004     MOV #0x200, W4
01BE74  628204     AND W5, W4, W4
01BE76  520FE0     SUB W4, #0x0, [W15]
01BE78  3A0011     BRA NZ, 0x1BE9C
01BE7A  A84E35     BSET 0xE35, #2
25530:                         }
25531:                         break;
01BE7C  370010     BRA 0x1BE9E
01BE90  000000     NOP
01BE92  370005     BRA 0x1BE9E
01BE94  000000     NOP
01BE96  370003     BRA 0x1BE9E
01BE98  000000     NOP
01BE9A  370001     BRA 0x1BE9E
01BE9C  000000     NOP
25532:                     default:
25533:                         Spd0TimerStateMachineCnt=0;
01BE7E  2305D5     MOV #0x305D, W5
01BE80  EB4200     CLR.B W4
01BE82  784A84     MOV.B W4, [W5]
25534:                         break;
01BE84  000000     NOP
01BE86  37000B     BRA 0x1BE9E
25535:                 }
25536:                 
25537:             }
01BE9E  78044F     MOV [--W15], W8
01BEA0  FA8000     ULNK
01BEA2  060000     RETURN
25538:             
25539:             
25540:             void AutoNastroyka_Func(void)
25541:             {
01BEA4  FA0002     LNK #0x2
01BEA6  BE9F88     MOV.D W8, [W15++]
25542:             int i;
25543:             
25544:                         
25545:                         if (!AutoNastroykaState)
01BEA8  81BEF4     MOV AutoNastroykaState, W4
01BEAA  520FE0     SUB W4, #0x0, [W15]
01BEAC  320590     BRA Z, 0x1C9CE
25546:                             return;
01C9CE  000000     NOP
01C9D0  370045     BRA 0x1CA5C
25547:             
25548:                             BreakPressed=0;
01BEAE  809614     MOV 0x12C2, W4
01BEB0  A10004     BCLR W4, #0
01BEB2  889614     MOV W4, 0x12C2
25549:                         
25550:                         if (Curr1SinTSTCnt<(sizeof(Curr1SinTST)/2))
01BEB4  81B734     MOV Curr1SinTSTCnt, W4
01BEB6  780284     MOV W4, W5
01BEB8  200FF4     MOV #0xFF, W4
01BEBA  528F84     SUB W5, W4, [W15]
01BEBC  3E0009     BRA GTU, 0x1BED0
25551:                         Curr1SinTST[Curr1SinTSTCnt++]=Curr1;
01BEBE  81B734     MOV Curr1SinTSTCnt, W4
01BEC0  8094F6     MOV Curr1, W6
01BEC2  420384     ADD W4, W4, W7
01BEC4  234E65     MOV #0x34E6, W5
01BEC6  438285     ADD W7, W5, W5
01BEC8  780A86     MOV W6, [W5]
01BECA  E80204     INC W4, W4
01BECC  89B734     MOV W4, Curr1SinTSTCnt
01BECE  370038     BRA 0x1BF40
25552:                         else
25553:                         {
25554:                             Curr1SinTSTSumm=0;
01BED0  B82260     MUL.UU W4, #0, W4
01BED2  897CD4     MOV W4, Curr1SinTSTSumm
01BED4  897CE5     MOV W5, 0x2F9C
25555:                             for (i=0;i<((sizeof(Curr1SinTST)/2)-1);i++)
01BED6  EB0200     CLR W4
01BED8  780F04     MOV W4, [W14]
01BEDA  370017     BRA 0x1BF0A
01BF08  E80F1E     INC [W14], [W14]
01BF0A  78029E     MOV [W14], W5
01BF0C  200FE4     MOV #0xFE, W4
01BF0E  528F84     SUB W5, W4, [W15]
01BF10  36FFE5     BRA LEU, 0x1BEDC
25556:                             {
25557:                                 Curr1SinTST[i]=Curr1SinTST[i+1];
01BEDC  E8021E     INC [W14], W4
01BEDE  420284     ADD W4, W4, W5
01BEE0  234E64     MOV #0x34E6, W4
01BEE2  428204     ADD W5, W4, W4
01BEE4  780294     MOV [W4], W5
01BEE6  78021E     MOV [W14], W4
01BEE8  420304     ADD W4, W4, W6
01BEEA  234E64     MOV #0x34E6, W4
01BEEC  430204     ADD W6, W4, W4
01BEEE  780A05     MOV W5, [W4]
25558:                                 Curr1SinTSTSumm=Curr1SinTSTSumm+Curr1SinTST[i];
01BEF0  78021E     MOV [W14], W4
01BEF2  420284     ADD W4, W4, W5
01BEF4  234E64     MOV #0x34E6, W4
01BEF6  428204     ADD W5, W4, W4
01BEF8  780214     MOV [W4], W4
01BEFA  B92361     MUL.SU W4, #1, W6
01BEFC  817CD4     MOV Curr1SinTSTSumm, W4
01BEFE  817CE5     MOV 0x2F9C, W5
01BF00  420206     ADD W4, W6, W4
01BF02  4A8287     ADDC W5, W7, W5
01BF04  897CD4     MOV W4, Curr1SinTSTSumm
01BF06  897CE5     MOV W5, 0x2F9C
25559:                             }
25560:                                 
25561:                             Curr1SinTSTSumm=Curr1SinTSTSumm+Curr1;
01BF12  8094F4     MOV Curr1, W4
01BF14  B92361     MUL.SU W4, #1, W6
01BF16  817CD4     MOV Curr1SinTSTSumm, W4
01BF18  817CE5     MOV 0x2F9C, W5
01BF1A  420206     ADD W4, W6, W4
01BF1C  4A8287     ADDC W5, W7, W5
01BF1E  897CD4     MOV W4, Curr1SinTSTSumm
01BF20  897CE5     MOV W5, 0x2F9C
25562:                             Curr1SinTST[Curr1SinTSTCnt-1]=Curr1;
01BF22  81B734     MOV Curr1SinTSTCnt, W4
01BF24  E90204     DEC W4, W4
01BF26  8094F5     MOV Curr1, W5
01BF28  420304     ADD W4, W4, W6
01BF2A  234E64     MOV #0x34E6, W4
01BF2C  430204     ADD W6, W4, W4
01BF2E  780A05     MOV W5, [W4]
25563:                             
25564:                             Curr1=Curr1SinTSTSumm;
01BF30  817CD4     MOV Curr1SinTSTSumm, W4
01BF32  817CE5     MOV 0x2F9C, W5
01BF34  780204     MOV W4, W4
01BF36  8894F4     MOV W4, Curr1
25565:                             Curr1SnTST=Curr1SinTSTSumm;
01BF38  817CD4     MOV Curr1SinTSTSumm, W4
01BF3A  817CE5     MOV 0x2F9C, W5
01BF3C  897CF4     MOV W4, Curr1SnTST
01BF3E  897D05     MOV W5, 0x2FA0
25566:                             
25567:                         }
25568:              
25569:             /*#if defined ISOLATED
25570:             U_V=UBT/
25571:             #else
25572:             
25573:             #endif
25574:             38.388;
25575:             0.4167965;
25576:             */
25577:             
25578:                 
25579:                 switch (AutoNastroykaState)
01BF40  81BEF4     MOV AutoNastroykaState, W4
01BF42  B82361     MUL.UU W4, #1, W6
01BF44  EB8200     SETM W4
01BF46  EB8280     SETM W5
01BF48  420206     ADD W4, W6, W4
01BF4A  4A8287     ADDC W5, W7, W5
01BF4C  200FF6     MOV #0xFF, W6
01BF4E  200007     MOV #0x0, W7
01BF50  520F86     SUB W4, W6, [W15]
01BF52  5A8F87     SUBB W5, W7, [W15]
01BF54  3E0583     BRA GTU, 0x1CA5C
01BF56  010604     BRA W4
01BF58  3700FF     BRA 0x1C158
01BF5A  3701B7     BRA 0x1C2CA
01BF5C  3701C4     BRA 0x1C2E6
01BF5E  3701D1     BRA 0x1C302
01BF60  3701DF     BRA 0x1C320
01BF62  3701FD     BRA 0x1C35E
01BF64  37021B     BRA 0x1C39C
01BF66  370271     BRA 0x1C44A
01BF68  370280     BRA 0x1C46A
01BF6A  370282     BRA 0x1C470
01BF6C  37029A     BRA 0x1C4A2
01BF6E  3702B2     BRA 0x1C4D4
01BF70  3702DE     BRA 0x1C52E
01BF72  3702E0     BRA 0x1C534
01BF74  3702F9     BRA 0x1C568
01BF76  370312     BRA 0x1C59C
01BF78  370336     BRA 0x1C5E6
01BF7A  37037C     BRA 0x1C674
01BF7C  37039E     BRA 0x1C6BA
01BF7E  3703BF     BRA 0x1C6FE
01BF80  3703DB     BRA 0x1C738
01BF82  37040E     BRA 0x1C7A0
01BF84  370447     BRA 0x1C814
01BF86  370474     BRA 0x1C870
01BF88  37038A     BRA 0x1C69E
01BF8A  3703AA     BRA 0x1C6E0
01BF8C  370474     BRA 0x1C876
01BF8E  37048C     BRA 0x1C8A8
01BF90  37048E     BRA 0x1C8AE
01BF92  3704C3     BRA 0x1C91A
01BF94  3704C5     BRA 0x1C920
01BF96  3704FA     BRA 0x1C98C
01BF98  370504     BRA 0x1C9A2
01BF9A  370506     BRA 0x1C9A8
01BF9C  370508     BRA 0x1C9AE
01BF9E  37050A     BRA 0x1C9B4
01BFA0  37055D     BRA 0x1CA5C
01BFA2  37055C     BRA 0x1CA5C
01BFA4  37055B     BRA 0x1CA5C
01BFA6  37055A     BRA 0x1CA5C
01BFA8  370559     BRA 0x1CA5C
01BFAA  370558     BRA 0x1CA5C
01BFAC  370557     BRA 0x1CA5C
01BFAE  370556     BRA 0x1CA5C
01BFB0  370555     BRA 0x1CA5C
01BFB2  370554     BRA 0x1CA5C
01BFB4  370553     BRA 0x1CA5C
01BFB6  370552     BRA 0x1CA5C
01BFB8  370551     BRA 0x1CA5C
01BFBA  370550     BRA 0x1CA5C
01BFBC  37054F     BRA 0x1CA5C
01BFBE  37054E     BRA 0x1CA5C
01BFC0  37054D     BRA 0x1CA5C
01BFC2  37054C     BRA 0x1CA5C
01BFC4  37054B     BRA 0x1CA5C
01BFC6  37054A     BRA 0x1CA5C
01BFC8  370549     BRA 0x1CA5C
01BFCA  370548     BRA 0x1CA5C
01BFCC  370547     BRA 0x1CA5C
01BFCE  370546     BRA 0x1CA5C
01BFD0  370545     BRA 0x1CA5C
01BFD2  370544     BRA 0x1CA5C
01BFD4  370543     BRA 0x1CA5C
01BFD6  370542     BRA 0x1CA5C
01BFD8  370541     BRA 0x1CA5C
01BFDA  370540     BRA 0x1CA5C
01BFDC  37053F     BRA 0x1CA5C
01BFDE  37053E     BRA 0x1CA5C
01BFE0  37053D     BRA 0x1CA5C
01BFE2  37053C     BRA 0x1CA5C
01BFE4  37053B     BRA 0x1CA5C
01BFE6  37053A     BRA 0x1CA5C
01BFE8  370539     BRA 0x1CA5C
01BFEA  370538     BRA 0x1CA5C
01BFEC  370537     BRA 0x1CA5C
01BFEE  370536     BRA 0x1CA5C
01BFF0  370535     BRA 0x1CA5C
01BFF2  370534     BRA 0x1CA5C
01BFF4  370533     BRA 0x1CA5C
01BFF6  370532     BRA 0x1CA5C
01BFF8  370531     BRA 0x1CA5C
01BFFA  370530     BRA 0x1CA5C
01BFFC  37052F     BRA 0x1CA5C
01BFFE  37052E     BRA 0x1CA5C
01C000  37052D     BRA 0x1CA5C
01C002  37052C     BRA 0x1CA5C
01C004  37052B     BRA 0x1CA5C
01C006  37052A     BRA 0x1CA5C
01C008  370529     BRA 0x1CA5C
01C00A  370528     BRA 0x1CA5C
01C00C  370527     BRA 0x1CA5C
01C00E  370526     BRA 0x1CA5C
01C010  370525     BRA 0x1CA5C
01C012  370524     BRA 0x1CA5C
01C014  370523     BRA 0x1CA5C
01C016  370522     BRA 0x1CA5C
01C018  370521     BRA 0x1CA5C
01C01A  370520     BRA 0x1CA5C
01C01C  37051F     BRA 0x1CA5C
01C01E  37051E     BRA 0x1CA5C
01C020  37051D     BRA 0x1CA5C
01C022  37051C     BRA 0x1CA5C
01C024  37051B     BRA 0x1CA5C
01C026  37051A     BRA 0x1CA5C
01C028  370519     BRA 0x1CA5C
01C02A  370518     BRA 0x1CA5C
01C02C  370517     BRA 0x1CA5C
01C02E  370516     BRA 0x1CA5C
01C030  370515     BRA 0x1CA5C
01C032  370514     BRA 0x1CA5C
01C034  370513     BRA 0x1CA5C
01C036  370512     BRA 0x1CA5C
01C038  370511     BRA 0x1CA5C
01C03A  370510     BRA 0x1CA5C
01C03C  37050F     BRA 0x1CA5C
01C03E  37050E     BRA 0x1CA5C
01C040  37050D     BRA 0x1CA5C
01C042  37050C     BRA 0x1CA5C
01C044  37050B     BRA 0x1CA5C
01C046  37050A     BRA 0x1CA5C
01C048  370509     BRA 0x1CA5C
01C04A  370508     BRA 0x1CA5C
01C04C  370507     BRA 0x1CA5C
01C04E  370506     BRA 0x1CA5C
01C050  370505     BRA 0x1CA5C
01C052  370504     BRA 0x1CA5C
01C054  370503     BRA 0x1CA5C
01C056  370502     BRA 0x1CA5C
01C058  370501     BRA 0x1CA5C
01C05A  370500     BRA 0x1CA5C
01C05C  3704FF     BRA 0x1CA5C
01C05E  3704FE     BRA 0x1CA5C
01C060  3704FD     BRA 0x1CA5C
01C062  3704FC     BRA 0x1CA5C
01C064  3704FB     BRA 0x1CA5C
01C066  3704FA     BRA 0x1CA5C
01C068  3704F9     BRA 0x1CA5C
01C06A  3704F8     BRA 0x1CA5C
01C06C  3704F7     BRA 0x1CA5C
01C06E  3704F6     BRA 0x1CA5C
01C070  3704F5     BRA 0x1CA5C
01C072  3704F4     BRA 0x1CA5C
01C074  3704F3     BRA 0x1CA5C
01C076  3704F2     BRA 0x1CA5C
01C078  3704F1     BRA 0x1CA5C
01C07A  3704F0     BRA 0x1CA5C
01C07C  3704EF     BRA 0x1CA5C
01C07E  3704EE     BRA 0x1CA5C
01C080  3704ED     BRA 0x1CA5C
01C082  3704EC     BRA 0x1CA5C
01C084  3704EB     BRA 0x1CA5C
01C086  3704EA     BRA 0x1CA5C
01C088  3704E9     BRA 0x1CA5C
01C08A  3704E8     BRA 0x1CA5C
01C08C  3704E7     BRA 0x1CA5C
01C08E  3704E6     BRA 0x1CA5C
01C090  3704E5     BRA 0x1CA5C
01C092  3704E4     BRA 0x1CA5C
01C094  3704E3     BRA 0x1CA5C
01C096  3704E2     BRA 0x1CA5C
01C098  3704E1     BRA 0x1CA5C
01C09A  3704E0     BRA 0x1CA5C
01C09C  3704DF     BRA 0x1CA5C
01C09E  3704DE     BRA 0x1CA5C
01C0A0  3704DD     BRA 0x1CA5C
01C0A2  3704DC     BRA 0x1CA5C
01C0A4  3704DB     BRA 0x1CA5C
01C0A6  3704DA     BRA 0x1CA5C
01C0A8  3704D9     BRA 0x1CA5C
01C0AA  3704D8     BRA 0x1CA5C
01C0AC  3704D7     BRA 0x1CA5C
01C0AE  3704D6     BRA 0x1CA5C
01C0B0  3704D5     BRA 0x1CA5C
01C0B2  3704D4     BRA 0x1CA5C
01C0B4  3704D3     BRA 0x1CA5C
01C0B6  3704D2     BRA 0x1CA5C
01C0B8  3704D1     BRA 0x1CA5C
01C0BA  3704D0     BRA 0x1CA5C
01C0BC  3704CF     BRA 0x1CA5C
01C0BE  3704CE     BRA 0x1CA5C
01C0C0  3704CD     BRA 0x1CA5C
01C0C2  3704CC     BRA 0x1CA5C
01C0C4  3704CB     BRA 0x1CA5C
01C0C6  3704CA     BRA 0x1CA5C
01C0C8  3704C9     BRA 0x1CA5C
01C0CA  3704C8     BRA 0x1CA5C
01C0CC  3704C7     BRA 0x1CA5C
01C0CE  3704C6     BRA 0x1CA5C
01C0D0  3704C5     BRA 0x1CA5C
01C0D2  3704C4     BRA 0x1CA5C
01C0D4  3704C3     BRA 0x1CA5C
01C0D6  3704C2     BRA 0x1CA5C
01C0D8  3704C1     BRA 0x1CA5C
01C0DA  3704C0     BRA 0x1CA5C
01C0DC  3704BF     BRA 0x1CA5C
01C0DE  3704BE     BRA 0x1CA5C
01C0E0  3704BD     BRA 0x1CA5C
01C0E2  3704BC     BRA 0x1CA5C
01C0E4  3704BB     BRA 0x1CA5C
01C0E6  3704BA     BRA 0x1CA5C
01C0E8  3704B9     BRA 0x1CA5C
01C0EA  3704B8     BRA 0x1CA5C
01C0EC  3704B7     BRA 0x1CA5C
01C0EE  3704B6     BRA 0x1CA5C
01C0F0  3704B5     BRA 0x1CA5C
01C0F2  3704B4     BRA 0x1CA5C
01C0F4  3704B3     BRA 0x1CA5C
01C0F6  3704B2     BRA 0x1CA5C
01C0F8  3704B1     BRA 0x1CA5C
01C0FA  3704B0     BRA 0x1CA5C
01C0FC  3704AF     BRA 0x1CA5C
01C0FE  3704AE     BRA 0x1CA5C
01C100  3704AD     BRA 0x1CA5C
01C102  3704AC     BRA 0x1CA5C
01C104  3704AB     BRA 0x1CA5C
01C106  3704AA     BRA 0x1CA5C
01C108  3704A9     BRA 0x1CA5C
01C10A  3704A8     BRA 0x1CA5C
01C10C  3704A7     BRA 0x1CA5C
01C10E  3704A6     BRA 0x1CA5C
01C110  3704A5     BRA 0x1CA5C
01C112  3704A4     BRA 0x1CA5C
01C114  3704A3     BRA 0x1CA5C
01C116  3704A2     BRA 0x1CA5C
01C118  3704A1     BRA 0x1CA5C
01C11A  3704A0     BRA 0x1CA5C
01C11C  37049F     BRA 0x1CA5C
01C11E  37049E     BRA 0x1CA5C
01C120  37049D     BRA 0x1CA5C
01C122  37049C     BRA 0x1CA5C
01C124  37049B     BRA 0x1CA5C
01C126  37049A     BRA 0x1CA5C
01C128  370499     BRA 0x1CA5C
01C12A  370498     BRA 0x1CA5C
01C12C  370497     BRA 0x1CA5C
01C12E  370496     BRA 0x1CA5C
01C130  370495     BRA 0x1CA5C
01C132  370494     BRA 0x1CA5C
01C134  370493     BRA 0x1CA5C
01C136  370492     BRA 0x1CA5C
01C138  370491     BRA 0x1CA5C
01C13A  370490     BRA 0x1CA5C
01C13C  37048F     BRA 0x1CA5C
01C13E  37048E     BRA 0x1CA5C
01C140  37048D     BRA 0x1CA5C
01C142  37048C     BRA 0x1CA5C
01C144  37048B     BRA 0x1CA5C
01C146  37048A     BRA 0x1CA5C
01C148  370489     BRA 0x1CA5C
01C14A  370488     BRA 0x1CA5C
01C14C  370487     BRA 0x1CA5C
01C14E  370486     BRA 0x1CA5C
01C150  370485     BRA 0x1CA5C
01C152  370433     BRA 0x1C9BA
01C154  370435     BRA 0x1C9C0
01C156  370437     BRA 0x1C9C6
25580:                 {
25581:                     case 1:
25582:             
25583:                         OK_Cnt=0;
01C158  230C85     MOV #0x30C8, W5
01C15A  EB4200     CLR.B W4
01C15C  784A84     MOV.B W4, [W5]
25584:                         
25585:                         //UBT_To_V();
25586:                         
25587:                         PWM1_SIN_TST=(int)(((float)K_PWM_Nastr)*((float)50/(float)UBT_V));
01C15E  821384     MOV K_PWM_Nastr, W4
01C160  200005     MOV #0x0, W5
01C162  BE0004     MOV.D W4, W0
01C164  022582     CALL ___floatunsisf
01C166  000000     NOP
01C168  BE0400     MOV.D W0, W8
01C16A  22FB54     MOV #0x2FB5, W4
01C16C  784214     MOV.B [W4], W4
01C16E  FB8204     ZE W4, W4
01C170  200005     MOV #0x0, W5
01C172  BE0004     MOV.D W4, W0
01C174  022582     CALL ___floatunsisf
01C176  000000     NOP
01C178  BE0200     MOV.D W0, W4
01C17A  BE0104     MOV.D W4, W2
01C17C  200000     MOV #0x0, W0
01C17E  242481     MOV #0x4248, W1
01C180  02245A     CALL ___divsf3
01C182  000000     NOP
01C184  BE0200     MOV.D W0, W4
01C186  BE0104     MOV.D W4, W2
01C188  BE0008     MOV.D W8, W0
01C18A  022630     CALL ___mulsf3
01C18C  000000     NOP
01C18E  BE0200     MOV.D W0, W4
01C190  BE0004     MOV.D W4, W0
01C192  022504     CALL ___fixsfsi
01C194  000000     NOP
01C196  BE0200     MOV.D W0, W4
01C198  780204     MOV W4, W4
01C19A  8A1304     MOV W4, PWM1_SIN_TST
25588:              
25589:                                             HallDelayMaxSPD=0;
01C19C  237E55     MOV #0x37E5, W5
01C19E  EB4200     CLR.B W4
01C1A0  784A84     MOV.B W4, [W5]
25590:                         
25591:                         
25592:                                             Sensorless=0;
01C1A2  809754     MOV StatFlgs1, W4
01C1A4  A15004     BCLR W4, #5
01C1A6  889754     MOV W4, StatFlgs1
25593:                                             SensorlessNotBEMF=0;
01C1A8  809654     MOV 0x12CA, W4
01C1AA  A14004     BCLR W4, #4
01C1AC  889654     MOV W4, 0x12CA
25594:                                             SensorlessStartNoHalls=0;
01C1AE  8096B4     MOV 0x12D6, W4
01C1B0  A1E004     BCLR W4, #14
01C1B2  8896B4     MOV W4, 0x12D6
25595:                                             CurrUst=CurrUstWork;
01C1B4  81F4E4     MOV CurrUstWork, W4
01C1B6  89F494     MOV W4, CurrUst
25596:                                             CurrLimit=CurrLimitWork;
01C1B8  80C1A4     MOV CurrLimitWork, W4
01C1BA  88C194     MOV W4, CurrLimit
25597:                                                 if (VectorMem)
01C1BC  809755     MOV StatFlgs1, W5
01C1BE  204004     MOV #0x400, W4
01C1C0  628204     AND W5, W4, W4
01C1C2  520FE0     SUB W4, #0x0, [W15]
01C1C4  320002     BRA Z, 0x1C1CA
25598:                                                 VectorInit();
01C1C6  07C0A8     RCALL VectorInit
01C1C8  370001     BRA 0x1C1CC
25599:                                                 else
25600:                                                 TrapeziumInit();
01C1CA  07C15D     RCALL TrapeziumInit
25601:                                             ChangeCVR();
01C1CC  079C0E     RCALL ChangeCVR
25602:                                             RdSensors();
01C1CE  07D773     RCALL RdSensors
25603:                         
25604:                         
25605:                                             if (!Sensorless)
01C1D0  809755     MOV StatFlgs1, W5
01C1D2  200204     MOV #0x20, W4
01C1D4  628204     AND W5, W4, W4
01C1D6  520FE0     SUB W4, #0x0, [W15]
01C1D8  3A0010     BRA NZ, 0x1C1FA
25606:                                             {
25607:                                             VectorMem=1;
01C1DA  809754     MOV StatFlgs1, W4
01C1DC  A0A004     BSET W4, #10
01C1DE  889754     MOV W4, StatFlgs1
25608:                                             Vector=1;
01C1E0  809684     MOV Flgs5, W4
01C1E2  A04004     BSET W4, #4
01C1E4  889684     MOV W4, Flgs5
25609:                                             RdSensors();
01C1E6  07D767     RCALL RdSensors
25610:                                             Amplitude1=PDC1;
01C1E8  806134     MOV PDC1, W4
01C1EA  200005     MOV #0x0, W5
01C1EC  889A44     MOV W4, Amplitude1
01C1EE  889A55     MOV W5, 0x134A
25611:                                             Amplitude2=PDC5;
01C1F0  806534     MOV PDC5, W4
01C1F2  200005     MOV #0x0, W5
01C1F4  889A64     MOV W4, Amplitude2
01C1F6  889A75     MOV W5, 0x134E
25612:                                             VectorInit();
01C1F8  07C08F     RCALL VectorInit
25613:                                             }
25614:                                            OptionsToMass();
01C1FA  078AF9     RCALL OptionsToMass
25615:             
25616:                         
25617:                                             StrongModeMem=0;
01C1FC  809764     MOV StatFlgs2, W4
01C1FE  A12004     BCLR W4, #2
01C200  889764     MOV W4, StatFlgs2
25618:                                             MixedMode=0;
01C202  809744     MOV StatFlgs, W4
01C204  A1B004     BCLR W4, #11
01C206  889744     MOV W4, StatFlgs
25619:                                             MixedMode2=0;
01C208  809764     MOV StatFlgs2, W4
01C20A  A1B004     BCLR W4, #11
01C20C  889764     MOV W4, StatFlgs2
25620:                                            OptionsToMass();
01C20E  078AEF     RCALL OptionsToMass
25621:                                                PrevStrongMode=0;
01C210  809694     MOV 0x12D2, W4
01C212  A1A004     BCLR W4, #10
01C214  889694     MOV W4, 0x12D2
25622:                                                 StrongMode=0;
01C216  8095F4     MOV 0x12BE, W4
01C218  A1E004     BCLR W4, #14
01C21A  8895F4     MOV W4, 0x12BE
25623:             
25624:                                                 
25625:                                                 
25626:                                              InvSin=0;   
01C21C  809764     MOV StatFlgs2, W4
01C21E  A1F004     BCLR W4, #15
01C220  889764     MOV W4, StatFlgs2
25627:                                                 
25628:                                                 
25629:                                                     SIN_MIDDLE=0;
01C222  809764     MOV StatFlgs2, W4
01C224  A1E004     BCLR W4, #14
01C226  889764     MOV W4, StatFlgs2
25630:                                                       
25631:                                             RdSensors();
01C228  07D746     RCALL RdSensors
25632:             
25633:                                             OptionsToMass();
01C22A  078AE1     RCALL OptionsToMass
25634:                                                     
25635:             
25636:                                              //                     PWM32Bits=1;
25637:                                                    if (1)//(PWM32Bits)
25638:                                                    {
25639:                                                     MAX_PWM_CONST=MAX_PWM_CONST_MONOCYCLE;
01C22C  20B544     MOV #0xB54, W4
01C22E  8892D4     MOV W4, MAX_PWM_CONST
25640:                                                     if (DirectControlMotor)
01C230  809744     MOV StatFlgs, W4
01C232  620261     AND W4, #0x1, W4
01C234  520FE0     SUB W4, #0x0, [W15]
01C236  320003     BRA Z, 0x1C23E
25641:                                                     {
25642:                                                     DIRPWM1=DIRPWM1*2;
01C238  81F5C4     MOV DIRPWM1, W4
01C23A  420204     ADD W4, W4, W4
01C23C  89F5C4     MOV W4, DIRPWM1
25643:                                                     }
25644:                                                    }
25645:                                                     else
25646:                                                     {
25647:                                                     MAX_PWM_CONST=MAX_PWM_CONST_EBIKE;
25648:                                                     if (DirectControlMotor)
25649:                                                     {
25650:                                                     DIRPWM1=DIRPWM1/2;
25651:                                                     }
25652:                                                     }
25653:                                             if (VectorMem)
01C23E  809755     MOV StatFlgs1, W5
01C240  204004     MOV #0x400, W4
01C242  628204     AND W5, W4, W4
01C244  520FE0     SUB W4, #0x0, [W15]
01C246  320002     BRA Z, 0x1C24C
25654:                                                 VectorInit();
01C248  07C067     RCALL VectorInit
01C24A  370001     BRA 0x1C24E
25655:                                             else
25656:                                                 TrapeziumInit();
01C24C  07C11C     RCALL TrapeziumInit
25657:             
25658:                                                      
25659:                                                                   
25660:                                                                   
25661:                                             Monocycle=0;
01C24E  809744     MOV StatFlgs, W4
01C250  A1F004     BCLR W4, #15
01C252  889744     MOV W4, StatFlgs
25662:                                             LeftTurn=0;
01C254  809694     MOV 0x12D2, W4
01C256  A1C004     BCLR W4, #12
01C258  889694     MOV W4, 0x12D2
25663:                                             ESumm=0;
01C25A  B82260     MUL.UU W4, #0, W4
01C25C  889B84     MOV W4, ESumm
01C25E  889B95     MOV W5, 0x1372
25664:                                             RightTurn=0;
01C260  809694     MOV 0x12D2, W4
01C262  A1D004     BCLR W4, #13
01C264  889694     MOV W4, 0x12D2
25665:                                             StopLights=0;
01C266  809694     MOV 0x12D2, W4
01C268  A1E004     BCLR W4, #14
01C26A  889694     MOV W4, 0x12D2
25666:                                             TiltZadAddMustBe=0;                                                      
01C26C  B82260     MUL.UU W4, #0, W4
01C26E  895654     MOV W4, TiltZadAddMustBe
01C270  895665     MOV W5, 0x2ACC
25667:                                                                   
25668:                                                                   
25669:                                                                   
25670:                                                                   
25671:                                             TrapezoidaRAM1=0;             
01C272  809754     MOV StatFlgs1, W4
01C274  A1C004     BCLR W4, #12
01C276  889754     MOV W4, StatFlgs1
25672:                                                                   
25673:                                                                   
25674:                                                   PWM_Mode=0;
01C278  809764     MOV StatFlgs2, W4
01C27A  A1C004     BCLR W4, #12
01C27C  889764     MOV W4, StatFlgs2
25675:                                                 SlowStart=0;                                                      
01C27E  809764     MOV StatFlgs2, W4
01C280  A18004     BCLR W4, #8
01C282  889764     MOV W4, StatFlgs2
25676:                                                                   
25677:                                            HallDelayMem1_F=0;
01C284  214565     MOV #0x1456, W5
01C286  EB4200     CLR.B W4
01C288  784A84     MOV.B W4, [W5]
25678:                                            HallDelayMem1_B=0;
01C28A  214575     MOV #0x1457, W5
01C28C  EB4200     CLR.B W4
01C28E  784A84     MOV.B W4, [W5]
25679:                                            OptionsToMass();
01C290  078AAE     RCALL OptionsToMass
25680:                                            MustTrmFlashMass=1;
01C292  8095F4     MOV 0x12BE, W4
01C294  A02004     BSET W4, #2
01C296  8895F4     MOV W4, 0x12BE
25681:              
25682:                                            
25683:                                            
25684:                                                    CurrDecrease=1;
01C298  8096A4     MOV Flgs6, W4
01C29A  A04004     BSET W4, #4
01C29C  8896A4     MOV W4, Flgs6
25685:                                                    CurrUst=300;
01C29E  2012C4     MOV #0x12C, W4
01C2A0  89F494     MOV W4, CurrUst
25686:                                                    CurrPhaseLimit=600;
01C2A2  202584     MOV #0x258, W4
01C2A4  89F4C4     MOV W4, CurrPhaseLimit
25687:                                                    CurrLimit=0;
01C2A6  EB0200     CLR W4
01C2A8  88C194     MOV W4, CurrLimit
25688:                                                    ChangeCVR();
01C2AA  079B9F     RCALL ChangeCVR
25689:                                            
25690:                                            
25691:                                            
25692:                                            DIRPWM1=0;
01C2AC  EB0200     CLR W4
01C2AE  89F5C4     MOV W4, DIRPWM1
25693:             
25694:                                            TestSINOkMassCnt=0;
01C2B0  213C45     MOV #0x13C4, W5
01C2B2  EB4200     CLR.B W4
01C2B4  784A84     MOV.B W4, [W5]
25695:                                            PWM1=0;
01C2B6  EB0200     CLR W4
01C2B8  889284     MOV W4, PWM1
25696:             
25697:                                             OrderCnt=0;
01C2BA  214085     MOV #0x1408, W5
01C2BC  EB4200     CLR.B W4
01C2BE  784A84     MOV.B W4, [W5]
25698:             
25699:             
25700:                                            AutoNastroykaState=2;
01C2C0  200024     MOV #0x2, W4
01C2C2  89BEF4     MOV W4, AutoNastroykaState
25701:                                            
25702:                                     AutoNastroykaCMFStart(1);
01C2C4  200010     MOV #0x1, W0
01C2C6  070534     RCALL AutoNastroykaCMFStart
25703:             
25704:                         
25705:                         break;
01C2C8  3703C9     BRA 0x1CA5C
25706:                     case 2:
25707:                         PWM1=0;
01C2CA  EB0200     CLR W4
01C2CC  889284     MOV W4, PWM1
25708:                         if (AutoNastrConfirmWait())
01C2CE  07050C     RCALL AutoNastrConfirmWait
01C2D0  784200     MOV.B W0, W4
01C2D2  524FE0     SUB.B W4, #0x0, [W15]
01C2D4  3A037E     BRA NZ, 0x1C9D2
25709:                             return;
01C9D2  000000     NOP
01C9D4  370043     BRA 0x1CA5C
25710:                         if (Spd1Res==0)
01C2D6  817F14     MOV Spd1Res, W4
01C2D8  520FE0     SUB W4, #0x0, [W15]
01C2DA  3A037D     BRA NZ, 0x1C9D6
25711:                         {
25712:                             
25713:                             AutoNastroykaState=3;
01C2DC  200034     MOV #0x3, W4
01C2DE  89BEF4     MOV W4, AutoNastroykaState
25714:                             AutoNastroykaCMFStart(2);           
01C2E0  200020     MOV #0x2, W0
01C2E2  070526     RCALL AutoNastroykaCMFStart
25715:                         }
25716:                         break;
01C2E4  3703BB     BRA 0x1CA5C
01C9D6  000000     NOP
01C9D8  370041     BRA 0x1CA5C
25717:                     case 3:
25718:                         PWM1=0;
01C2E6  EB0200     CLR W4
01C2E8  889284     MOV W4, PWM1
25719:                         if (AutoNastrConfirmWait())
01C2EA  0704FE     RCALL AutoNastrConfirmWait
01C2EC  784200     MOV.B W0, W4
01C2EE  524FE0     SUB.B W4, #0x0, [W15]
01C2F0  3A0374     BRA NZ, 0x1C9DA
25720:                             return;
01C9DA  000000     NOP
01C9DC  37003F     BRA 0x1CA5C
25721:                         Calibrating=1;
01C2F2  809644     MOV Flgs3, W4
01C2F4  A04004     BSET W4, #4
01C2F6  889644     MOV W4, Flgs3
25722:                           AutoNastroykaState=4;
01C2F8  200044     MOV #0x4, W4
01C2FA  89BEF4     MOV W4, AutoNastroykaState
25723:                             AutoNastroykaCMFStart(3);
01C2FC  200030     MOV #0x3, W0
01C2FE  070518     RCALL AutoNastroykaCMFStart
25724:                         break;
01C300  3703AD     BRA 0x1CA5C
25725:                     case 4:
25726:                         PWM1=0;
01C302  EB0200     CLR W4
01C304  889284     MOV W4, PWM1
25727:                         if (AutoNastrConfirmWait())
01C306  0704F0     RCALL AutoNastrConfirmWait
01C308  784200     MOV.B W0, W4
01C30A  524FE0     SUB.B W4, #0x0, [W15]
01C30C  3A0368     BRA NZ, 0x1C9DE
25728:                             return;
01C9DE  000000     NOP
01C9E0  37003D     BRA 0x1CA5C
25729:                         if (Calibrating==0)
01C30E  809644     MOV Flgs3, W4
01C310  620270     AND W4, #0x10, W4
01C312  520FE0     SUB W4, #0x0, [W15]
01C314  3A0366     BRA NZ, 0x1C9E2
25730:                         {
25731:                               AutoNastroykaState=5;
01C316  200054     MOV #0x5, W4
01C318  89BEF4     MOV W4, AutoNastroykaState
25732:                             AutoNastroykaCMFStart(4);
01C31A  200040     MOV #0x4, W0
01C31C  070509     RCALL AutoNastroykaCMFStart
25733:                         }
25734:                         break;
01C31E  37039E     BRA 0x1CA5C
01C9E2  000000     NOP
01C9E4  37003B     BRA 0x1CA5C
25735:                         
25736:                     case 5:
25737:                         PWM1=PWM1_SIN_TST;
01C320  821304     MOV PWM1_SIN_TST, W4
01C322  889284     MOV W4, PWM1
25738:                         if (AutoNastrConfirmWait())
01C324  0704E1     RCALL AutoNastrConfirmWait
01C326  784200     MOV.B W0, W4
01C328  524FE0     SUB.B W4, #0x0, [W15]
01C32A  3A035D     BRA NZ, 0x1C9E6
25739:                             return;
01C9E6  000000     NOP
01C9E8  370039     BRA 0x1CA5C
25740:             
25741:             
25742:                           
25743:                           if (DS)
01C32C  8096B5     MOV 0x12D6, W5
01C32E  208004     MOV #0x800, W4
01C330  628204     AND W5, W4, W4
01C332  520FE0     SUB W4, #0x0, [W15]
01C334  320004     BRA Z, 0x1C33E
25744:                           {
25745:                             DS=0;
01C336  8096B4     MOV 0x12D6, W4
01C338  A1B004     BCLR W4, #11
01C33A  8896B4     MOV W4, 0x12D6
25746:                             RdSensors();
01C33C  07D6BC     RCALL RdSensors
25747:                           }
25748:                     
25749:                           
25750:             
25751:                         
25752:                         SensOrder1=OrderCnt;
01C33E  214084     MOV #0x1408, W4
01C340  784214     MOV.B [W4], W4
01C342  212495     MOV #0x1249, W5
01C344  784A84     MOV.B W4, [W5]
25753:                         RdSensors();
01C346  07D6B7     RCALL RdSensors
25754:             
25755:                         
25756:                         OptionsToMass();
01C348  078A52     RCALL OptionsToMass
25757:                         MustTrmFlashMass=1;
01C34A  8095F4     MOV 0x12BE, W4
01C34C  A02004     BSET W4, #2
01C34E  8895F4     MOV W4, 0x12BE
25758:             
25759:                         CntTestingSinDelay=250;
01C350  200FA4     MOV #0xFA, W4
01C352  88C1C4     MOV W4, CntTestingSinDelay
25760:                         AutoNastroykaState=6;
01C354  200064     MOV #0x6, W4
01C356  89BEF4     MOV W4, AutoNastroykaState
25761:                         AutoNastroykaCMFStart(5);
01C358  200050     MOV #0x5, W0
01C35A  0704EA     RCALL AutoNastroykaCMFStart
25762:                     break;
01C35C  37037F     BRA 0x1CA5C
25763:                         
25764:                     case 6:
25765:                         PWM1=PWM1_SIN_TST;
01C35E  821304     MOV PWM1_SIN_TST, W4
01C360  889284     MOV W4, PWM1
25766:                         if (AutoNastrConfirmWait())
01C362  0704C2     RCALL AutoNastrConfirmWait
01C364  784200     MOV.B W0, W4
01C366  524FE0     SUB.B W4, #0x0, [W15]
01C368  3A0340     BRA NZ, 0x1C9EA
25767:                             return;
01C9EA  000000     NOP
01C9EC  370037     BRA 0x1CA5C
25768:                         CntTestingSinDelay--;
01C36A  80C1C4     MOV CntTestingSinDelay, W4
01C36C  E90204     DEC W4, W4
01C36E  88C1C4     MOV W4, CntTestingSinDelay
25769:                         if (CntTestingSinDelay==0)
01C370  80C1C4     MOV CntTestingSinDelay, W4
01C372  520FE0     SUB W4, #0x0, [W15]
01C374  3A033C     BRA NZ, 0x1C9EE
25770:                         {
25771:                         AutoNastroykaState=7;
01C376  200074     MOV #0x7, W4
01C378  89BEF4     MOV W4, AutoNastroykaState
25772:                         AutoNastroykaCMFStart(6);
01C37A  200060     MOV #0x6, W0
01C37C  0704D9     RCALL AutoNastroykaCMFStart
25773:                         TestingSin=1;
01C37E  8096A4     MOV Flgs6, W4
01C380  A08004     BSET W4, #8
01C382  8896A4     MOV W4, Flgs6
25774:                         StrtTestingSin=1;
01C384  8096A4     MOV Flgs6, W4
01C386  A09004     BSET W4, #9
01C388  8896A4     MOV W4, Flgs6
25775:                         TestSIN_Ok=0;
01C38A  809654     MOV 0x12CA, W4
01C38C  A12004     BCLR W4, #2
01C38E  889654     MOV W4, 0x12CA
25776:                         TestSIN_OkCnt=3;
01C390  230355     MOV #0x3035, W5
01C392  B3C034     MOV.B #0x3, W4
01C394  784A84     MOV.B W4, [W5]
25777:                         CntTestingSinDelay=350;
01C396  2015E4     MOV #0x15E, W4
01C398  88C1C4     MOV W4, CntTestingSinDelay
25778:                         }
25779:                         break;
01C39A  370360     BRA 0x1CA5C
01C9EE  000000     NOP
01C9F0  370035     BRA 0x1CA5C
25780:                     case 7:
25781:                         PWM1=PWM1_SIN_TST;
01C39C  821304     MOV PWM1_SIN_TST, W4
01C39E  889284     MOV W4, PWM1
25782:                         if (AutoNastrConfirmWait())
01C3A0  0704A3     RCALL AutoNastrConfirmWait
01C3A2  784200     MOV.B W0, W4
01C3A4  524FE0     SUB.B W4, #0x0, [W15]
01C3A6  3A0325     BRA NZ, 0x1C9F2
25783:                             return;
01C9F2  000000     NOP
01C9F4  370033     BRA 0x1CA5C
25784:                         CntTestingSinDelay--;
01C3A8  80C1C4     MOV CntTestingSinDelay, W4
01C3AA  E90204     DEC W4, W4
01C3AC  88C1C4     MOV W4, CntTestingSinDelay
25785:                         if (CntTestingSinDelay==0)
01C3AE  80C1C4     MOV CntTestingSinDelay, W4
01C3B0  520FE0     SUB W4, #0x0, [W15]
01C3B2  3A0010     BRA NZ, 0x1C3D4
25786:                         {
25787:                             if (OrderCnt<5)
01C3B4  214084     MOV #0x1408, W4
01C3B6  784214     MOV.B [W4], W4
01C3B8  524FE4     SUB.B W4, #0x4, [W15]
01C3BA  3E0008     BRA GTU, 0x1C3CC
25788:                             {
25789:                                 OrderCnt++;
01C3BC  214084     MOV #0x1408, W4
01C3BE  784214     MOV.B [W4], W4
01C3C0  E84204     INC.B W4, W4
01C3C2  214085     MOV #0x1408, W5
01C3C4  784A84     MOV.B W4, [W5]
25790:                             AutoNastroykaState=8;
01C3C6  200084     MOV #0x8, W4
01C3C8  89BEF4     MOV W4, AutoNastroykaState
01C3CA  370002     BRA 0x1C3D0
25791:                             }
25792:                             else
25793:                             {
25794:                             AutoNastroykaState=10;
01C3CC  2000A4     MOV #0xA, W4
01C3CE  89BEF4     MOV W4, AutoNastroykaState
25795:                             }
25796:                                 AutoNastroykaCMFStart(7);
01C3D0  200070     MOV #0x7, W0
01C3D2  0704AE     RCALL AutoNastroykaCMFStart
25797:                         }
25798:                         if (!TestingSin)
01C3D4  8096A5     MOV Flgs6, W5
01C3D6  201004     MOV #0x100, W4
01C3D8  628204     AND W5, W4, W4
01C3DA  520FE0     SUB W4, #0x0, [W15]
01C3DC  3A030C     BRA NZ, 0x1C9F6
25799:                         {
25800:                             if (TestSIN_Ok)
01C3DE  809654     MOV 0x12CA, W4
01C3E0  620264     AND W4, #0x4, W4
01C3E2  520FE0     SUB W4, #0x0, [W15]
01C3E4  32001F     BRA Z, 0x1C424
25801:                             {
25802:                                 TestSIN_Ok_Mass[TestSINOkMassCnt][0]=OrderCnt;
01C3E6  213C44     MOV #0x13C4, W4
01C3E8  784214     MOV.B [W4], W4
01C3EA  FB8284     ZE W4, W5
01C3EC  214084     MOV #0x1408, W4
01C3EE  784214     MOV.B [W4], W4
01C3F0  213AC6     MOV #0x13AC, W6
01C3F2  428285     ADD W5, W5, W5
01C3F4  430285     ADD W6, W5, W5
01C3F6  784A84     MOV.B W4, [W5]
25803:                                 TestSIN_Ok_Mass[TestSINOkMassCnt++][1]=InvSin;
01C3F8  213C44     MOV #0x13C4, W4
01C3FA  784214     MOV.B [W4], W4
01C3FC  FB8304     ZE W4, W6
01C3FE  809765     MOV StatFlgs2, W5
01C400  DE2ACF     LSR W5, #15, W5
01C402  784285     MOV.B W5, W5
01C404  213AC7     MOV #0x13AC, W7
01C406  430306     ADD W6, W6, W6
01C408  438306     ADD W7, W6, W6
01C40A  E80306     INC W6, W6
01C40C  784B05     MOV.B W5, [W6]
01C40E  E84204     INC.B W4, W4
01C410  213C45     MOV #0x13C4, W5
01C412  784A84     MOV.B W4, [W5]
25804:                                 
25805:                                 Nop();
01C414  000000     NOP
25806:                                 Nop();
01C416  000000     NOP
25807:                                 
25808:                                 OK_Cnt++;
01C418  230C84     MOV #0x30C8, W4
01C41A  784214     MOV.B [W4], W4
01C41C  E84204     INC.B W4, W4
01C41E  230C85     MOV #0x30C8, W5
01C420  784A84     MOV.B W4, [W5]
01C422  370002     BRA 0x1C428
25809:                                 
25810:                             }
25811:                             else
25812:                             {
25813:                                 Nop();
01C424  000000     NOP
25814:                                 Nop();
01C426  000000     NOP
25815:                             }
25816:                             if (OrderCnt<5)
01C428  214084     MOV #0x1408, W4
01C42A  784214     MOV.B [W4], W4
01C42C  524FE4     SUB.B W4, #0x4, [W15]
01C42E  3E0008     BRA GTU, 0x1C440
25817:                             {
25818:                                 OrderCnt++;
01C430  214084     MOV #0x1408, W4
01C432  784214     MOV.B [W4], W4
01C434  E84204     INC.B W4, W4
01C436  214085     MOV #0x1408, W5
01C438  784A84     MOV.B W4, [W5]
25819:                             AutoNastroykaState=8;
01C43A  200084     MOV #0x8, W4
01C43C  89BEF4     MOV W4, AutoNastroykaState
01C43E  370002     BRA 0x1C444
25820:                             }
25821:                             else
25822:                             {
25823:                             AutoNastroykaState=10;
01C440  2000A4     MOV #0xA, W4
01C442  89BEF4     MOV W4, AutoNastroykaState
25824:                             }
25825:                                 AutoNastroykaCMFStart(7);
01C444  200070     MOV #0x7, W0
01C446  070474     RCALL AutoNastroykaCMFStart
25826:                         }
25827:                         break;
01C448  370309     BRA 0x1CA5C
01C9F6  000000     NOP
01C9F8  370031     BRA 0x1CA5C
25828:                     case 8:
25829:                          PWM1=0;
01C44A  EB0200     CLR W4
01C44C  889284     MOV W4, PWM1
25830:                            if (AutoNastrConfirmWait())
01C44E  07044C     RCALL AutoNastrConfirmWait
01C450  784200     MOV.B W0, W4
01C452  524FE0     SUB.B W4, #0x0, [W15]
01C454  3A02D2     BRA NZ, 0x1C9FA
25831:                             return;
01C9FA  000000     NOP
01C9FC  37002F     BRA 0x1CA5C
25832:             
25833:                             if (Spd1Res==0)
01C456  817F14     MOV Spd1Res, W4
01C458  520FE0     SUB W4, #0x0, [W15]
01C45A  3A02D1     BRA NZ, 0x1C9FE
25834:                             {
25835:                             AutoNastroykaState=5;
01C45C  200054     MOV #0x5, W4
01C45E  89BEF4     MOV W4, AutoNastroykaState
25836:                             CntTestingSinDelay=150;
01C460  200964     MOV #0x96, W4
01C462  88C1C4     MOV W4, CntTestingSinDelay
25837:                             AutoNastroykaCMFStart(8);
01C464  200080     MOV #0x8, W0
01C466  070464     RCALL AutoNastroykaCMFStart
25838:                             }
25839:                         break;
01C468  3702F9     BRA 0x1CA5C
01C9FE  000000     NOP
01CA00  37002D     BRA 0x1CA5C
25840:                     case 9:
25841:                          PWM1=0;
01C46A  EB0200     CLR W4
01C46C  889284     MOV W4, PWM1
25842:                            /*if (AutoNastrConfirmWait())
25843:                             return;
25844:                          if (!MustTrmStateOfSinTest)//&&!TestSIN_Ok)
25845:                         {
25846:                             AutoNastroykaState=5;
25847:                                 AutoNastroyka_ConfirmMSG=0;           
25848:                             MustTrmStateOfSinTest=1;
25849:                         }*/
25850:                         break;
01C46E  3702F6     BRA 0x1CA5C
25851:                         
25852:                         
25853:                         
25854:                     case 10:
25855:                         PWM1=0;
01C470  EB0200     CLR W4
01C472  889284     MOV W4, PWM1
25856:                            if (AutoNastrConfirmWait())
01C474  070439     RCALL AutoNastrConfirmWait
01C476  784200     MOV.B W0, W4
01C478  524FE0     SUB.B W4, #0x0, [W15]
01C47A  3A02C3     BRA NZ, 0x1CA02
25857:                             return;
01CA02  000000     NOP
01CA04  37002B     BRA 0x1CA5C
25858:             
25859:                         if (!InvSin)
01C47C  809765     MOV StatFlgs2, W5
01C47E  280004     MOV #0x8000, W4
01C480  628204     AND W5, W4, W4
01C482  520FE0     SUB W4, #0x0, [W15]
01C484  3A0009     BRA NZ, 0x1C498
25860:                         {
25861:                             InvSin=1;
01C486  809764     MOV StatFlgs2, W4
01C488  A0F004     BSET W4, #15
01C48A  889764     MOV W4, StatFlgs2
25862:                             OrderCnt=0;
01C48C  214085     MOV #0x1408, W5
01C48E  EB4200     CLR.B W4
01C490  784A84     MOV.B W4, [W5]
25863:                             AutoNastroykaState=8;
01C492  200084     MOV #0x8, W4
01C494  89BEF4     MOV W4, AutoNastroykaState
01C496  370002     BRA 0x1C49C
25864:                         }
25865:                         else
25866:                             AutoNastroykaState=11;
01C498  2000B4     MOV #0xB, W4
01C49A  89BEF4     MOV W4, AutoNastroykaState
25867:                         AutoNastroykaCMFStart(10);
01C49C  2000A0     MOV #0xA, W0
01C49E  070448     RCALL AutoNastroykaCMFStart
25868:                         break;
01C4A0  3702DD     BRA 0x1CA5C
25869:                     case 11:
25870:                         PWM1=0;
01C4A2  EB0200     CLR W4
01C4A4  889284     MOV W4, PWM1
25871:                            if (AutoNastrConfirmWait())
01C4A6  070420     RCALL AutoNastrConfirmWait
01C4A8  784200     MOV.B W0, W4
01C4AA  524FE0     SUB.B W4, #0x0, [W15]
01C4AC  3A02AC     BRA NZ, 0x1CA06
25872:                             return;
01CA06  000000     NOP
01CA08  370029     BRA 0x1CA5C
25873:                         if (TestSINOkMassCnt==0)
01C4AE  213C44     MOV #0x13C4, W4
01C4B0  784214     MOV.B [W4], W4
01C4B2  524FE0     SUB.B W4, #0x0, [W15]
01C4B4  3A0005     BRA NZ, 0x1C4C0
25874:                         {
25875:                             //AutoNastroykaState=254;
25876:                             AutoNastroykaState=28;
01C4B6  2001C4     MOV #0x1C, W4
01C4B8  89BEF4     MOV W4, AutoNastroykaState
25877:                             AutoNastroykaCMFStart(254);
01C4BA  200FE0     MOV #0xFE, W0
01C4BC  070439     RCALL AutoNastroykaCMFStart
25878:                         }
25879:                         else
25880:                         {
25881:                             TestCWCntMass=0;
01C4C0  213C55     MOV #0x13C5, W5
01C4C2  EB4200     CLR.B W4
01C4C4  784A84     MOV.B W4, [W5]
25882:                             CntTestingSinDelay=50;
01C4C6  200324     MOV #0x32, W4
01C4C8  88C1C4     MOV W4, CntTestingSinDelay
25883:                             AutoNastroykaState=12;
01C4CA  2000C4     MOV #0xC, W4
01C4CC  89BEF4     MOV W4, AutoNastroykaState
25884:                             AutoNastroykaCMFStart(11);
01C4CE  2000B0     MOV #0xB, W0
01C4D0  07042F     RCALL AutoNastroykaCMFStart
25885:                         }
25886:                         
25887:                         break;
01C4BE  3702CE     BRA 0x1CA5C
01C4D2  3702C4     BRA 0x1CA5C
25888:             
25889:             
25890:             
25891:             
25892:             
25893:             
25894:             
25895:                         
25896:                     case 12:
25897:                          PWM1=0;
01C4D4  EB0200     CLR W4
01C4D6  889284     MOV W4, PWM1
25898:                            if (AutoNastrConfirmWait())
01C4D8  070407     RCALL AutoNastrConfirmWait
01C4DA  784200     MOV.B W0, W4
01C4DC  524FE0     SUB.B W4, #0x0, [W15]
01C4DE  3A0295     BRA NZ, 0x1CA0A
25899:                             return;
01CA0A  000000     NOP
01CA0C  370027     BRA 0x1CA5C
25900:             
25901:                         SensOrder1=TestSIN_Ok_Mass[TestCWCntMass][0];
01C4E0  213C54     MOV #0x13C5, W4
01C4E2  784214     MOV.B [W4], W4
01C4E4  FB8204     ZE W4, W4
01C4E6  420204     ADD W4, W4, W4
01C4E8  213AC5     MOV #0x13AC, W5
01C4EA  428204     ADD W5, W4, W4
01C4EC  784214     MOV.B [W4], W4
01C4EE  212495     MOV #0x1249, W5
01C4F0  784A84     MOV.B W4, [W5]
25902:                         InvSin=TestSIN_Ok_Mass[TestCWCntMass][1];
01C4F2  213C54     MOV #0x13C5, W4
01C4F4  784214     MOV.B [W4], W4
01C4F6  FB8204     ZE W4, W4
01C4F8  420204     ADD W4, W4, W4
01C4FA  E80204     INC W4, W4
01C4FC  213AC5     MOV #0x13AC, W5
01C4FE  428204     ADD W5, W4, W4
01C500  784214     MOV.B [W4], W4
01C502  624261     AND.B W4, #0x1, W4
01C504  FB8204     ZE W4, W4
01C506  DD224F     SL W4, #15, W4
01C508  809766     MOV StatFlgs2, W6
01C50A  27FFF5     MOV #0x7FFF, W5
01C50C  630285     AND W6, W5, W5
01C50E  728204     IOR W5, W4, W4
01C510  889764     MOV W4, StatFlgs2
25903:                         RdSensors();
01C512  07D5D1     RCALL RdSensors
25904:             
25905:                         OptionsToMass();
01C514  07896C     RCALL OptionsToMass
25906:                         MustTrmFlashMass=1;
01C516  8095F4     MOV 0x12BE, W4
01C518  A02004     BSET W4, #2
01C51A  8895F4     MOV W4, 0x12BE
25907:                         AutoNastroykaState=14;
01C51C  2000E4     MOV #0xE, W4
01C51E  89BEF4     MOV W4, AutoNastroykaState
25908:                               //  MustTrmStateOfSinTest=1;
25909:                         CntTestingSinDelay=100;
01C520  200644     MOV #0x64, W4
01C522  88C1C4     MOV W4, CntTestingSinDelay
25910:             
25911:                         PWMNastr=0;
01C524  EB0200     CLR W4
01C526  889294     MOV W4, PWMNastr
25912:                             AutoNastroykaCMFStart(12);
01C528  2000C0     MOV #0xC, W0
01C52A  070402     RCALL AutoNastroykaCMFStart
25913:                         break;
01C52C  370297     BRA 0x1CA5C
25914:                         
25915:                     case 13:
25916:                          PWM1=0;
01C52E  EB0200     CLR W4
01C530  889284     MOV W4, PWM1
25917:             /*
25918:                            if (AutoNastrConfirmWait())
25919:                             return;
25920:             
25921:             
25922:                         StrongMode=1;
25923:                         CntTestingSinDelay--;
25924:                         if (CntTestingSinDelay==0)
25925:                         {
25926:                             AutoNastroykaState=14;
25927:                             AutoNastroykaCMFStart(13);
25928:                             DS=0;
25929:                         }*/
25930:                         break;
01C532  370294     BRA 0x1CA5C
25931:                         
25932:                     case 14:
25933:                         PWM1=PWMNastr;
01C534  809294     MOV PWMNastr, W4
01C536  889284     MOV W4, PWM1
25934:                            if (AutoNastrConfirmWait())
01C538  0703D7     RCALL AutoNastrConfirmWait
01C53A  784200     MOV.B W0, W4
01C53C  524FE0     SUB.B W4, #0x0, [W15]
01C53E  3A0267     BRA NZ, 0x1CA0E
25935:                             return;
01CA0E  000000     NOP
01CA10  370025     BRA 0x1CA5C
25936:             
25937:                         PWMNastr++;
01C540  809294     MOV PWMNastr, W4
01C542  E80204     INC W4, W4
01C544  889294     MOV W4, PWMNastr
25938:                         if (/*(Spd1ResPlus>10)||*/(PWMNastr>(PWM1_SIN_TST*2)))
01C546  821304     MOV PWM1_SIN_TST, W4
01C548  420204     ADD W4, W4, W4
01C54A  780284     MOV W4, W5
01C54C  809294     MOV PWMNastr, W4
01C54E  528F84     SUB W5, W4, [W15]
01C550  3D0008     BRA GE, 0x1C562
25939:                         {
25940:                         AutoNastroykaState=15;
01C552  2000F4     MOV #0xF, W4
01C554  89BEF4     MOV W4, AutoNastroykaState
25941:                         CntTestingSinDelay=400;
01C556  201904     MOV #0x190, W4
01C558  88C1C4     MOV W4, CntTestingSinDelay
25942:                         Curr1SinTSTCnt=0;
01C55A  EB0200     CLR W4
01C55C  89B734     MOV W4, Curr1SinTSTCnt
25943:                                 AutoNastroykaCMFStart(14);
01C55E  2000E0     MOV #0xE, W0
01C560  0703E7     RCALL AutoNastroykaCMFStart
25944:                         }
25945:                         PWM1=PWMNastr;
01C562  809294     MOV PWMNastr, W4
01C564  889284     MOV W4, PWM1
25946:                         break;
01C566  37027A     BRA 0x1CA5C
25947:                         
25948:                     case 15:
25949:                         PWM1=PWMNastr;
01C568  809294     MOV PWMNastr, W4
01C56A  889284     MOV W4, PWM1
25950:                            if (AutoNastrConfirmWait())
01C56C  0703BD     RCALL AutoNastrConfirmWait
01C56E  784200     MOV.B W0, W4
01C570  524FE0     SUB.B W4, #0x0, [W15]
01C572  3A024F     BRA NZ, 0x1CA12
25951:                             return;
01CA12  000000     NOP
01CA14  370023     BRA 0x1CA5C
25952:             
25953:                         CntTestingSinDelay--;
01C574  80C1C4     MOV CntTestingSinDelay, W4
01C576  E90204     DEC W4, W4
01C578  88C1C4     MOV W4, CntTestingSinDelay
25954:                         if (CntTestingSinDelay==0)
01C57A  80C1C4     MOV CntTestingSinDelay, W4
01C57C  520FE0     SUB W4, #0x0, [W15]
01C57E  3A024B     BRA NZ, 0x1CA16
25955:                         {
25956:                         CurrSinTSTMass[TestCWCntMass]=Curr1SnTST;
01C580  213C54     MOV #0x13C5, W4
01C582  784214     MOV.B [W4], W4
01C584  FB8304     ZE W4, W6
01C586  817CF4     MOV Curr1SnTST, W4
01C588  817D05     MOV 0x2FA0, W5
01C58A  DD33C2     SL W6, #2, W7
01C58C  213C66     MOV #0x13C6, W6
01C58E  438306     ADD W7, W6, W6
01C590  BE8B04     MOV.D W4, [W6]
25957:                         AutoNastroykaState=16;
01C592  200104     MOV #0x10, W4
01C594  89BEF4     MOV W4, AutoNastroykaState
25958:                         AutoNastroykaCMFStart(15);
01C596  2000F0     MOV #0xF, W0
01C598  0703CB     RCALL AutoNastroykaCMFStart
25959:                         }
25960:                         break;
01C59A  370260     BRA 0x1CA5C
01CA16  000000     NOP
01CA18  370021     BRA 0x1CA5C
25961:                         
25962:                     case 16:
25963:                         if (PWMNastr>0)
01C59C  809294     MOV PWMNastr, W4
01C59E  520FE0     SUB W4, #0x0, [W15]
01C5A0  340003     BRA LE, 0x1C5A8
25964:                             PWMNastr--;
01C5A2  809294     MOV PWMNastr, W4
01C5A4  E90204     DEC W4, W4
01C5A6  889294     MOV W4, PWMNastr
25965:                         PWM1=PWMNastr;
01C5A8  809294     MOV PWMNastr, W4
01C5AA  889284     MOV W4, PWM1
25966:                            if (AutoNastrConfirmWait())
01C5AC  07039D     RCALL AutoNastrConfirmWait
01C5AE  784200     MOV.B W0, W4
01C5B0  524FE0     SUB.B W4, #0x0, [W15]
01C5B2  3A0233     BRA NZ, 0x1CA1A
25967:                             return;
01CA1A  000000     NOP
01CA1C  37001F     BRA 0x1CA5C
25968:                         if (Spd1Res==0)
01C5B4  817F14     MOV Spd1Res, W4
01C5B6  520FE0     SUB W4, #0x0, [W15]
01C5B8  3A0232     BRA NZ, 0x1CA1E
25969:                         {
25970:                             if (TestCWCntMass<(TestSINOkMassCnt-1))
01C5BA  213C54     MOV #0x13C5, W4
01C5BC  784214     MOV.B [W4], W4
01C5BE  FB8284     ZE W4, W5
01C5C0  213C44     MOV #0x13C4, W4
01C5C2  784214     MOV.B [W4], W4
01C5C4  FB8204     ZE W4, W4
01C5C6  E90204     DEC W4, W4
01C5C8  528F84     SUB W5, W4, [W15]
01C5CA  3D0008     BRA GE, 0x1C5DC
25971:                             {
25972:                             TestCWCntMass++;
01C5CC  213C54     MOV #0x13C5, W4
01C5CE  784214     MOV.B [W4], W4
01C5D0  E84204     INC.B W4, W4
01C5D2  213C55     MOV #0x13C5, W5
01C5D4  784A84     MOV.B W4, [W5]
25973:                             AutoNastroykaState=12;
01C5D6  2000C4     MOV #0xC, W4
01C5D8  89BEF4     MOV W4, AutoNastroykaState
01C5DA  370002     BRA 0x1C5E0
25974:                             }
25975:                             else
25976:                             {
25977:                             AutoNastroykaState=17;
01C5DC  200114     MOV #0x11, W4
01C5DE  89BEF4     MOV W4, AutoNastroykaState
25978:                             }
25979:                         AutoNastroykaCMFStart(16);
01C5E0  200100     MOV #0x10, W0
01C5E2  0703A6     RCALL AutoNastroykaCMFStart
25980:                         }
25981:                         break;
01C5E4  37023B     BRA 0x1CA5C
01CA1E  000000     NOP
01CA20  37001D     BRA 0x1CA5C
25982:             
25983:                     case 17:
25984:                         CurrMinSinTST=0x7fffffff;
01C5E6  2FFFF4     MOV #0xFFFF, W4
01C5E8  27FFF5     MOV #0x7FFF, W5
01C5EA  889FB4     MOV W4, CurrMinSinTST
01C5EC  889FC5     MOV W5, 0x13F8
25985:                         PWM1=0;
01C5EE  EB0200     CLR W4
01C5F0  889284     MOV W4, PWM1
25986:                            if (AutoNastrConfirmWait())
01C5F2  07037A     RCALL AutoNastrConfirmWait
01C5F4  784200     MOV.B W0, W4
01C5F6  524FE0     SUB.B W4, #0x0, [W15]
01C5F8  3A0214     BRA NZ, 0x1CA22
25987:                             return;
01CA22  000000     NOP
01CA24  37001B     BRA 0x1CA5C
25988:             
25989:                         for (i=0;i<=TestCWCntMass;i++)
01C5FA  EB0200     CLR W4
01C5FC  780F04     MOV W4, [W14]
01C5FE  370014     BRA 0x1C628
01C626  E80F1E     INC [W14], [W14]
01C628  213C54     MOV #0x13C5, W4
01C62A  784214     MOV.B [W4], W4
01C62C  FB8204     ZE W4, W4
01C62E  520F9E     SUB W4, [W14], [W15]
01C630  3DFFE7     BRA GE, 0x1C600
25990:                         {
25991:                             if (CurrMinSinTST>CurrSinTSTMass[i])
01C600  78021E     MOV [W14], W4
01C602  DD22C2     SL W4, #2, W5
01C604  213C64     MOV #0x13C6, W4
01C606  428204     ADD W5, W4, W4
01C608  BE0314     MOV.D [W4], W6
01C60A  809FB4     MOV CurrMinSinTST, W4
01C60C  809FC5     MOV 0x13F8, W5
01C60E  530F84     SUB W6, W4, [W15]
01C610  5B8F85     SUBB W7, W5, [W15]
01C612  3D0009     BRA GE, 0x1C626
25992:                             {
25993:                             CurrMinSinTST=CurrSinTSTMass[i];
01C614  78021E     MOV [W14], W4
01C616  DD22C2     SL W4, #2, W5
01C618  213C64     MOV #0x13C6, W4
01C61A  428204     ADD W5, W4, W4
01C61C  BE0214     MOV.D [W4], W4
01C61E  889FB4     MOV W4, CurrMinSinTST
01C620  889FC5     MOV W5, 0x13F8
25994:                             iMin=i;
01C622  78021E     MOV [W14], W4
01C624  8A0004     MOV W4, iMin
25995:                             }
25996:                         }
25997:             
25998:                         SensOrder1=TestSIN_Ok_Mass[iMin][0];
01C632  820004     MOV iMin, W4
01C634  420204     ADD W4, W4, W4
01C636  213AC5     MOV #0x13AC, W5
01C638  428204     ADD W5, W4, W4
01C63A  784214     MOV.B [W4], W4
01C63C  212495     MOV #0x1249, W5
01C63E  784A84     MOV.B W4, [W5]
25999:                         InvSin=TestSIN_Ok_Mass[iMin][1];
01C640  820004     MOV iMin, W4
01C642  420204     ADD W4, W4, W4
01C644  E80204     INC W4, W4
01C646  213AC5     MOV #0x13AC, W5
01C648  428204     ADD W5, W4, W4
01C64A  784214     MOV.B [W4], W4
01C64C  624261     AND.B W4, #0x1, W4
01C64E  FB8204     ZE W4, W4
01C650  DD224F     SL W4, #15, W4
01C652  809766     MOV StatFlgs2, W6
01C654  27FFF5     MOV #0x7FFF, W5
01C656  630285     AND W6, W5, W5
01C658  728204     IOR W5, W4, W4
01C65A  889764     MOV W4, StatFlgs2
26000:                         RdSensors();
01C65C  07D52C     RCALL RdSensors
26001:             
26002:                         OptionsToMass();
01C65E  0788C7     RCALL OptionsToMass
26003:                         MustTrmFlashMass=1;
01C660  8095F4     MOV 0x12BE, W4
01C662  A02004     BSET W4, #2
01C664  8895F4     MOV W4, 0x12BE
26004:             
26005:                         CntTestingSinDelay=50;
01C666  200324     MOV #0x32, W4
01C668  88C1C4     MOV W4, CntTestingSinDelay
26006:                             AutoNastroykaState=19;
01C66A  200134     MOV #0x13, W4
01C66C  89BEF4     MOV W4, AutoNastroykaState
26007:                         AutoNastroykaCMFStart(17);
01C66E  200110     MOV #0x11, W0
01C670  07035F     RCALL AutoNastroykaCMFStart
26008:                         
26009:                         break;
01C672  3701F4     BRA 0x1CA5C
26010:                         
26011:                     case 18:
26012:                         PWM1=0;
01C674  EB0200     CLR W4
01C676  889284     MOV W4, PWM1
26013:                  //          if (AutoNastrConfirmWait())
26014:                    //         return;
26015:                         if (CntTestingSinDelay)
01C678  80C1C4     MOV CntTestingSinDelay, W4
01C67A  520FE0     SUB W4, #0x0, [W15]
01C67C  320003     BRA Z, 0x1C684
26016:                         CntTestingSinDelay--;
01C67E  80C1C4     MOV CntTestingSinDelay, W4
01C680  E90204     DEC W4, W4
01C682  88C1C4     MOV W4, CntTestingSinDelay
26017:                         if ((CntTestingSinDelay==0)&&(Spd1ResPlus==0))
01C684  80C1C4     MOV CntTestingSinDelay, W4
01C686  520FE0     SUB W4, #0x0, [W15]
01C688  3A01CE     BRA NZ, 0x1CA26
01C68A  817F44     MOV Spd1ResPlus, W4
01C68C  520FE0     SUB W4, #0x0, [W15]
01C68E  3A01CD     BRA NZ, 0x1CA2A
26018:                         {
26019:                            // AutoNastroykaState=25;        //for shift tune
26020:                             //
26021:                             AutoNastroykaState=27;          //for Throttle and break tune
01C690  2001B4     MOV #0x1B, W4
01C692  89BEF4     MOV W4, AutoNastroykaState
26022:                             PWMNastr=0;
01C694  EB0200     CLR W4
01C696  889294     MOV W4, PWMNastr
26023:                             AutoNastroykaCMFStart(18);
01C698  200120     MOV #0x12, W0
01C69A  07034A     RCALL AutoNastroykaCMFStart
26024:                         }
26025:                         break;
01C69C  3701DF     BRA 0x1CA5C
01CA26  000000     NOP
01CA28  370019     BRA 0x1CA5C
01CA2A  000000     NOP
01CA2C  370017     BRA 0x1CA5C
26026:             
26027:                     case 25:
26028:                         PWM1=0;
01C69E  EB0200     CLR W4
01C6A0  889284     MOV W4, PWM1
26029:                            if (AutoNastrConfirmWait())
01C6A2  070322     RCALL AutoNastrConfirmWait
01C6A4  784200     MOV.B W0, W4
01C6A6  524FE0     SUB.B W4, #0x0, [W15]
01C6A8  3A01C2     BRA NZ, 0x1CA2E
26030:                             return;
01CA2E  000000     NOP
01CA30  370015     BRA 0x1CA5C
26031:                         Calibrating=1;
01C6AA  809644     MOV Flgs3, W4
01C6AC  A04004     BSET W4, #4
01C6AE  889644     MOV W4, Flgs3
26032:                           AutoNastroykaState=26;
01C6B0  2001A4     MOV #0x1A, W4
01C6B2  89BEF4     MOV W4, AutoNastroykaState
26033:                             AutoNastroykaCMFStart(25);
01C6B4  200190     MOV #0x19, W0
01C6B6  07033C     RCALL AutoNastroykaCMFStart
26034:                         break;
01C6B8  3701D1     BRA 0x1CA5C
26035:             
26036:                     case 19:
26037:                         
26038:                         PWM1=PWMNastr;
01C6BA  809294     MOV PWMNastr, W4
01C6BC  889284     MOV W4, PWM1
26039:                            if (AutoNastrConfirmWait())
01C6BE  070314     RCALL AutoNastrConfirmWait
01C6C0  784200     MOV.B W0, W4
01C6C2  524FE0     SUB.B W4, #0x0, [W15]
01C6C4  3A01B6     BRA NZ, 0x1CA32
26040:                             return;
01CA32  000000     NOP
01CA34  370013     BRA 0x1CA5C
26041:             
26042:                         
26043:                         if (PWMNastr<(PWM1_SIN_TST))//*2))
01C6C6  809295     MOV PWMNastr, W5
01C6C8  821304     MOV PWM1_SIN_TST, W4
01C6CA  528F84     SUB W5, W4, [W15]
01C6CC  3D0004     BRA GE, 0x1C6D6
26044:                         {
26045:                             PWMNastr++;
01C6CE  809294     MOV PWMNastr, W4
01C6D0  E80204     INC W4, W4
01C6D2  889294     MOV W4, PWMNastr
26046:                         }            
26047:                         else
26048:                         {
26049:                           AutoNastroykaState=34;
01C6D6  200224     MOV #0x22, W4
01C6D8  89BEF4     MOV W4, AutoNastroykaState
26050:                             AutoNastroykaCMFStart(19);
01C6DA  200130     MOV #0x13, W0
01C6DC  070329     RCALL AutoNastroykaCMFStart
26051:                             
26052:                         }
26053:                         
26054:                         
26055:                         break;
01C6D4  3701C3     BRA 0x1CA5C
01C6DE  3701BE     BRA 0x1CA5C
26056:             
26057:             
26058:             
26059:             
26060:                     case 26:
26061:                         PWM1=0;
01C6E0  EB0200     CLR W4
01C6E2  889284     MOV W4, PWM1
26062:                            if (AutoNastrConfirmWait())
01C6E4  070301     RCALL AutoNastrConfirmWait
01C6E6  784200     MOV.B W0, W4
01C6E8  524FE0     SUB.B W4, #0x0, [W15]
01C6EA  3A01A5     BRA NZ, 0x1CA36
26063:                             return;
01CA36  000000     NOP
01CA38  370011     BRA 0x1CA5C
26064:                         if (Calibrating==0)
01C6EC  809644     MOV Flgs3, W4
01C6EE  620270     AND W4, #0x10, W4
01C6F0  520FE0     SUB W4, #0x0, [W15]
01C6F2  3A01A3     BRA NZ, 0x1CA3A
26065:                         {
26066:                               AutoNastroykaState=20;
01C6F4  200144     MOV #0x14, W4
01C6F6  89BEF4     MOV W4, AutoNastroykaState
26067:                             AutoNastroykaCMFStart(26);
01C6F8  2001A0     MOV #0x1A, W0
01C6FA  07031A     RCALL AutoNastroykaCMFStart
26068:                         }
26069:                         break;
01C6FC  3701AF     BRA 0x1CA5C
01CA3A  000000     NOP
01CA3C  37000F     BRA 0x1CA5C
26070:                         
26071:                         
26072:                         
26073:                     case 20:
26074:                         PWM1=PWMNastr;
01C6FE  809294     MOV PWMNastr, W4
01C700  889284     MOV W4, PWM1
26075:                            if (AutoNastrConfirmWait())
01C702  0702F2     RCALL AutoNastrConfirmWait
01C704  784200     MOV.B W0, W4
01C706  524FE0     SUB.B W4, #0x0, [W15]
01C708  3A019A     BRA NZ, 0x1CA3E
26076:                             return;
01CA3E  000000     NOP
01CA40  37000D     BRA 0x1CA5C
26077:                          PWMNastr++;
01C70A  809294     MOV PWMNastr, W4
01C70C  E80204     INC W4, W4
01C70E  889294     MOV W4, PWMNastr
26078:                         if ((Spd1ResPlus>10)||(PWMNastr>(PWM1_SIN_TST*2)))
01C710  817F44     MOV Spd1ResPlus, W4
01C712  520FEA     SUB W4, #0xA, [W15]
01C714  3C0006     BRA GT, 0x1C722
01C716  821304     MOV PWM1_SIN_TST, W4
01C718  420204     ADD W4, W4, W4
01C71A  780284     MOV W4, W5
01C71C  809294     MOV PWMNastr, W4
01C71E  528F84     SUB W5, W4, [W15]
01C720  3D0008     BRA GE, 0x1C732
26079:                         {
26080:                         AutoNastroykaState=21;
01C722  200154     MOV #0x15, W4
01C724  89BEF4     MOV W4, AutoNastroykaState
26081:                         CntTestingSinDelay=400;
01C726  201904     MOV #0x190, W4
01C728  88C1C4     MOV W4, CntTestingSinDelay
26082:                         Curr1SinTSTCnt=0;
01C72A  EB0200     CLR W4
01C72C  89B734     MOV W4, Curr1SinTSTCnt
26083:                             AutoNastroykaCMFStart(20);
01C72E  200140     MOV #0x14, W0
01C730  0702FF     RCALL AutoNastroykaCMFStart
26084:                         }
26085:                         PWM1=PWMNastr;
01C732  809294     MOV PWMNastr, W4
01C734  889284     MOV W4, PWM1
26086:                        break;
01C736  370192     BRA 0x1CA5C
26087:             
26088:                     case 21:
26089:                         PWM1=PWMNastr;
01C738  809294     MOV PWMNastr, W4
01C73A  889284     MOV W4, PWM1
26090:                            if (AutoNastrConfirmWait())
01C73C  0702D5     RCALL AutoNastrConfirmWait
01C73E  784200     MOV.B W0, W4
01C740  524FE0     SUB.B W4, #0x0, [W15]
01C742  3A017F     BRA NZ, 0x1CA42
26091:                             return;
01CA42  000000     NOP
01CA44  37000B     BRA 0x1CA5C
26092:             
26093:                         CntTestingSinDelay--;
01C744  80C1C4     MOV CntTestingSinDelay, W4
01C746  E90204     DEC W4, W4
01C748  88C1C4     MOV W4, CntTestingSinDelay
26094:                         if (CntTestingSinDelay==0)
01C74A  80C1C4     MOV CntTestingSinDelay, W4
01C74C  520FE0     SUB W4, #0x0, [W15]
01C74E  3A017B     BRA NZ, 0x1CA46
26095:                         {
26096:                             
26097:                         Curr1SnTST_0=Curr1SnTST;
01C750  817CF4     MOV Curr1SnTST, W4
01C752  817D05     MOV 0x2FA0, W5
01C754  897D14     MOV W4, Curr1SnTST_0
01C756  897D25     MOV W5, 0x2FA4
26098:                         if (Curr1SnTST_0<0)
01C758  817D14     MOV Curr1SnTST_0, W4
01C75A  817D25     MOV 0x2FA4, W5
01C75C  520FE0     SUB W4, #0x0, [W15]
01C75E  5A8FE0     SUBB W5, #0x0, [W15]
01C760  3D0005     BRA GE, 0x1C76C
26099:                         {
26100:                             AutoNastroykaState=255;
01C762  200FF4     MOV #0xFF, W4
01C764  89BEF4     MOV W4, AutoNastroykaState
26101:                             AutoNastroykaCMFStart(255);
01C766  200FF0     MOV #0xFF, W0
01C768  0702E3     RCALL AutoNastroykaCMFStart
26102:                         }
26103:                         else
26104:                         {
26105:                         Curr1SnTST_0=(long int)(((float)Curr1SnTST_0)*1.5);
01C76C  817D14     MOV Curr1SnTST_0, W4
01C76E  817D25     MOV 0x2FA4, W5
01C770  BE0004     MOV.D W4, W0
01C772  02257C     CALL ___floatsisf
01C774  000000     NOP
01C776  BE0200     MOV.D W0, W4
01C778  200002     MOV #0x0, W2
01C77A  23FC03     MOV #0x3FC0, W3
01C77C  BE0004     MOV.D W4, W0
01C77E  022630     CALL ___mulsf3
01C780  000000     NOP
01C782  BE0200     MOV.D W0, W4
01C784  BE0004     MOV.D W4, W0
01C786  022504     CALL ___fixsfsi
01C788  000000     NOP
01C78A  BE0200     MOV.D W0, W4
01C78C  897D14     MOV W4, Curr1SnTST_0
01C78E  897D25     MOV W5, 0x2FA4
26106:                         
26107:                         AutoNastroykaState=22;
01C790  200164     MOV #0x16, W4
01C792  89BEF4     MOV W4, AutoNastroykaState
26108:                                 Shift_F=1;
01C794  8096A4     MOV Flgs6, W4
01C796  A0D004     BSET W4, #13
01C798  8896A4     MOV W4, Flgs6
26109:                             AutoNastroykaCMFStart(21);
01C79A  200150     MOV #0x15, W0
01C79C  0702C9     RCALL AutoNastroykaCMFStart
26110:                         }
26111:                         }
26112:                         break;
01C76A  370178     BRA 0x1CA5C
01C79E  37015E     BRA 0x1CA5C
01CA46  000000     NOP
01CA48  370009     BRA 0x1CA5C
26113:                     case 22:
26114:                         PWM1=PWMNastr;
01C7A0  809294     MOV PWMNastr, W4
01C7A2  889284     MOV W4, PWM1
26115:                            if (AutoNastrConfirmWait())
01C7A4  0702A1     RCALL AutoNastrConfirmWait
01C7A6  784200     MOV.B W0, W4
01C7A8  524FE0     SUB.B W4, #0x0, [W15]
01C7AA  3A014F     BRA NZ, 0x1CA4A
26116:                             return;
01CA4A  000000     NOP
01CA4C  370007     BRA 0x1CA5C
26117:                         
26118:                         AutoNastroykaState=23;
01C7AC  200174     MOV #0x17, W4
01C7AE  89BEF4     MOV W4, AutoNastroykaState
26119:                        AutoNastroykaCMFStart(22);           
01C7B0  200160     MOV #0x16, W0
01C7B2  0702BE     RCALL AutoNastroykaCMFStart
26120:                         if (Shift_F)
01C7B4  8096A5     MOV Flgs6, W5
01C7B6  220004     MOV #0x2000, W4
01C7B8  628204     AND W5, W4, W4
01C7BA  520FE0     SUB W4, #0x0, [W15]
01C7BC  320016     BRA Z, 0x1C7EA
26121:                         {
26122:                             if (HallDelayMem1_F>-20)
01C7BE  214564     MOV #0x1456, W4
01C7C0  784214     MOV.B [W4], W4
01C7C2  424FF3     ADD.B W4, #0x13, [W15]
01C7C4  350006     BRA LT, 0x1C7D2
26123:                                 HallDelayMem1_F--;
01C7C6  214564     MOV #0x1456, W4
01C7C8  784214     MOV.B [W4], W4
01C7CA  E94204     DEC.B W4, W4
01C7CC  214565     MOV #0x1456, W5
01C7CE  784A84     MOV.B W4, [W5]
01C7D0  37001A     BRA 0x1C806
26124:                             else
26125:                             {
26126:                                 Shift_F=0;
01C7D2  8096A4     MOV Flgs6, W4
01C7D4  A1D004     BCLR W4, #13
01C7D6  8896A4     MOV W4, Flgs6
26127:                                 HallDelayMem1_B--;
01C7D8  214574     MOV #0x1457, W4
01C7DA  784214     MOV.B [W4], W4
01C7DC  E94204     DEC.B W4, W4
01C7DE  214575     MOV #0x1457, W5
01C7E0  784A84     MOV.B W4, [W5]
26128:                                 HallDelayMem1_F=0;
01C7E2  214565     MOV #0x1456, W5
01C7E4  EB4200     CLR.B W4
01C7E6  784A84     MOV.B W4, [W5]
01C7E8  37000E     BRA 0x1C806
26129:                             }
26130:                             
26131:                         }
26132:                         else
26133:                         {
26134:                         if (HallDelayMem1_B>-20)
01C7EA  214574     MOV #0x1457, W4
01C7EC  784214     MOV.B [W4], W4
01C7EE  424FF3     ADD.B W4, #0x13, [W15]
01C7F0  350006     BRA LT, 0x1C7FE
26135:                         HallDelayMem1_B--;
01C7F2  214574     MOV #0x1457, W4
01C7F4  784214     MOV.B [W4], W4
01C7F6  E94204     DEC.B W4, W4
01C7F8  214575     MOV #0x1457, W5
01C7FA  784A84     MOV.B W4, [W5]
01C7FC  370004     BRA 0x1C806
26136:                         else
26137:                         {
26138:                             AutoNastroykaState=256;
01C7FE  201004     MOV #0x100, W4
01C800  89BEF4     MOV W4, AutoNastroykaState
26139:                             AutoNastroykaCMFStart(256);            
01C802  201000     MOV #0x100, W0
01C804  070295     RCALL AutoNastroykaCMFStart
26140:                         }
26141:                         }
26142:                         OptionsToMass();
01C806  0787F3     RCALL OptionsToMass
26143:                         MustTrmFlashMass=1;
01C808  8095F4     MOV 0x12BE, W4
01C80A  A02004     BSET W4, #2
01C80C  8895F4     MOV W4, 0x12BE
26144:             
26145:                         CntTestingSinDelay=250;
01C80E  200FA4     MOV #0xFA, W4
01C810  88C1C4     MOV W4, CntTestingSinDelay
26146:                         break;
01C812  370124     BRA 0x1CA5C
26147:                                    
26148:                     case 23:
26149:                         PWM1=PWMNastr;
01C814  809294     MOV PWMNastr, W4
01C816  889284     MOV W4, PWM1
26150:                            if (AutoNastrConfirmWait())
01C818  070267     RCALL AutoNastrConfirmWait
01C81A  784200     MOV.B W0, W4
01C81C  524FE0     SUB.B W4, #0x0, [W15]
01C81E  3A0117     BRA NZ, 0x1CA4E
26151:                             return;
01CA4E  000000     NOP
01CA50  370005     BRA 0x1CA5C
26152:             
26153:                         CntTestingSinDelay--;
01C820  80C1C4     MOV CntTestingSinDelay, W4
01C822  E90204     DEC W4, W4
01C824  88C1C4     MOV W4, CntTestingSinDelay
26154:                         if (CntTestingSinDelay==0)
01C826  80C1C4     MOV CntTestingSinDelay, W4
01C828  520FE0     SUB W4, #0x0, [W15]
01C82A  3A0113     BRA NZ, 0x1CA52
26155:                         {
26156:                             
26157:                         if (Curr1SnTST_0>Curr1SnTST)
01C82C  817D16     MOV Curr1SnTST_0, W6
01C82E  817D27     MOV 0x2FA4, W7
01C830  817CF4     MOV Curr1SnTST, W4
01C832  817D05     MOV 0x2FA0, W5
01C834  530F84     SUB W6, W4, [W15]
01C836  5B8F85     SUBB W7, W5, [W15]
01C838  340003     BRA LE, 0x1C840
26158:                         {
26159:                             AutoNastroykaState=22;
01C83A  200164     MOV #0x16, W4
01C83C  89BEF4     MOV W4, AutoNastroykaState
01C83E  370015     BRA 0x1C86A
26160:                         }
26161:                         else
26162:                         {
26163:                             AutoNastroykaState=24;
01C840  200184     MOV #0x18, W4
01C842  89BEF4     MOV W4, AutoNastroykaState
26164:                             if (Shift_F)
01C844  8096A5     MOV Flgs6, W5
01C846  220004     MOV #0x2000, W4
01C848  628204     AND W5, W4, W4
01C84A  520FE0     SUB W4, #0x0, [W15]
01C84C  320004     BRA Z, 0x1C856
26165:                             HallDelayMem1_F=0;
01C84E  214565     MOV #0x1456, W5
01C850  EB4200     CLR.B W4
01C852  784A84     MOV.B W4, [W5]
01C854  370003     BRA 0x1C85C
26166:                             else
26167:                             HallDelayMem1_B=0;
01C856  214575     MOV #0x1457, W5
01C858  EB4200     CLR.B W4
01C85A  784A84     MOV.B W4, [W5]
26168:                             
26169:                             Curr1SnTST_0=Curr1SnTST;
01C85C  817CF4     MOV Curr1SnTST, W4
01C85E  817D05     MOV 0x2FA0, W5
01C860  897D14     MOV W4, Curr1SnTST_0
01C862  897D25     MOV W5, 0x2FA4
26170:                             
26171:                             ShiftUpping=1;
01C864  8096B4     MOV 0x12D6, W4
01C866  A00004     BSET W4, #0
01C868  8896B4     MOV W4, 0x12D6
26172:                             
26173:                         }
26174:             
26175:                        AutoNastroykaCMFStart(23);           
01C86A  200170     MOV #0x17, W0
01C86C  070261     RCALL AutoNastroykaCMFStart
26176:             
26177:                         
26178:                         }
26179:                         break;
01C86E  3700F6     BRA 0x1CA5C
01CA52  000000     NOP
01CA54  370003     BRA 0x1CA5C
26180:                         
26181:                     case 24:
26182:                         PWM1=PWMNastr;                             //HallDelayMem1_x  FOUND
01C870  809294     MOV PWMNastr, W4
01C872  889284     MOV W4, PWM1
26183:                           /* if (AutoNastrConfirmWait())
26184:                             return;
26185:             
26186:                         if (ShiftUpping)
26187:                         {
26188:                             if (Shift_F)
26189:                                 if (HallDelayMem1_F<25)
26190:                                     HallDelayMem1_F=HallDelayMem1_F+5;
26191:                                 else
26192:                                 {
26193:                                     
26194:                                 }
26195:                             else
26196:                                 if (HallDelayMem1_B<25)
26197:                                     HallDelayMem1_B=HallDelayMem1_B+5;
26198:                                 else
26199:                                 {
26200:                                     
26201:                                 }
26202:                         }
26203:                         */
26204:                         
26205:                         break;            
01C874  3700F3     BRA 0x1CA5C
26206:                         
26207:                         
26208:                     case 27:
26209:                         PWM1=0;
01C876  EB0200     CLR W4
01C878  889284     MOV W4, PWM1
26210:                         if (AutoNastrConfirmWait())
01C87A  070236     RCALL AutoNastrConfirmWait
01C87C  784200     MOV.B W0, W4
01C87E  524FE0     SUB.B W4, #0x0, [W15]
01C880  3A00EA     BRA NZ, 0x1CA56
26211:                                 return;            
01CA56  000000     NOP
01CA58  370001     BRA 0x1CA5C
26212:                         
26213:                         SensorThresholdDnTmp=SensorThresholdDn;
01C882  809474     MOV SensorThresholdDn, W4
01C884  8894E4     MOV W4, SensorThresholdDnTmp
26214:                         BreakThresholdDnTmp=BreakThresholdDn;
01C886  8094C4     MOV BreakThresholdDn, W4
01C888  8894D4     MOV W4, BreakThresholdDnTmp
26215:                         SensorThresholdDn=ADCThrottle+50;
01C88A  809354     MOV ADCThrottle, W4
01C88C  B00324     ADD #0x32, W4
01C88E  889474     MOV W4, SensorThresholdDn
26216:                         BreakThresholdDn=ADCThrottleBreak+50;
01C890  8093E4     MOV ADCThrottleBreak, W4
01C892  B00324     ADD #0x32, W4
01C894  8894C4     MOV W4, BreakThresholdDn
26217:                         OptionsToMass();
01C896  0787AB     RCALL OptionsToMass
26218:                         MustTrmFlashMass=1;
01C898  8095F4     MOV 0x12BE, W4
01C89A  A02004     BSET W4, #2
01C89C  8895F4     MOV W4, 0x12BE
26219:             
26220:                         AutoNastroykaState=28;
01C89E  2001C4     MOV #0x1C, W4
01C8A0  89BEF4     MOV W4, AutoNastroykaState
26221:                         AutoNastroykaCMFStart(27);
01C8A2  2001B0     MOV #0x1B, W0
01C8A4  070245     RCALL AutoNastroykaCMFStart
26222:                         
26223:                         
26224:                         break;
01C8A6  3700DA     BRA 0x1CA5C
26225:                         
26226:              
26227:             
26228:                    case 28:
26229:                         PWM1=0;
01C8A8  EB0200     CLR W4
01C8AA  889284     MOV W4, PWM1
26230:                         break;
01C8AC  3700D7     BRA 0x1CA5C
26231:                                  
26232:                    case 29:
26233:                         PWM1=0;
01C8AE  EB0200     CLR W4
01C8B0  889284     MOV W4, PWM1
26234:                         if (ADCThrottle>=1500)
01C8B2  809355     MOV ADCThrottle, W5
01C8B4  205DB4     MOV #0x5DB, W4
01C8B6  528F84     SUB W5, W4, [W15]
01C8B8  360008     BRA LEU, 0x1C8CA
26235:                         SensorThresholdUp=ADCThrottle-70;
01C8BA  809354     MOV ADCThrottle, W4
01C8BC  B10464     SUB #0x46, W4
01C8BE  889484     MOV W4, SensorThresholdUp
26236:                         else
26237:                         {
26238:                         SensorThresholdDn=700;
01C8CA  202BC4     MOV #0x2BC, W4
01C8CC  889474     MOV W4, SensorThresholdDn
26239:                         SensorThresholdUp=2900;
01C8CE  20B544     MOV #0xB54, W4
01C8D0  889484     MOV W4, SensorThresholdUp
26240:                         AutoNastroykaState=35;
01C8D2  200234     MOV #0x23, W4
01C8D4  89BEF4     MOV W4, AutoNastroykaState
26241:                         AutoNastroykaCMFStart(33);  //Too low SensorThresholdUp
01C8D6  200210     MOV #0x21, W0
01C8D8  07022B     RCALL AutoNastroykaCMFStart
26242:                         break;
01C8DA  3700C0     BRA 0x1CA5C
26243:                         }
26244:                             
26245:                         if (SensorThresholdDn>1000)
01C8C0  809475     MOV SensorThresholdDn, W5
01C8C2  203E84     MOV #0x3E8, W4
01C8C4  528F84     SUB W5, W4, [W15]
01C8C6  3C000A     BRA GT, 0x1C8DC
01C8C8  370012     BRA 0x1C8EE
26246:                         {
26247:                         SensorThresholdDn=700;
01C8DC  202BC4     MOV #0x2BC, W4
01C8DE  889474     MOV W4, SensorThresholdDn
26248:                         SensorThresholdUp=2900;
01C8E0  20B544     MOV #0xB54, W4
01C8E2  889484     MOV W4, SensorThresholdUp
26249:                         AutoNastroykaState=35;
01C8E4  200234     MOV #0x23, W4
01C8E6  89BEF4     MOV W4, AutoNastroykaState
26250:                         AutoNastroykaCMFStart(34);  //Too low SensorThresholdUp
01C8E8  200220     MOV #0x22, W0
01C8EA  070222     RCALL AutoNastroykaCMFStart
26251:                         break;
01C8EC  3700B7     BRA 0x1CA5C
26252:                         }
26253:                         
26254:                         if (SensorThresholdUp<SensorThresholdDn)
01C8EE  809485     MOV SensorThresholdUp, W5
01C8F0  809474     MOV SensorThresholdDn, W4
01C8F2  528F84     SUB W5, W4, [W15]
01C8F4  3D0009     BRA GE, 0x1C908
26255:                         {
26256:                         SensorThresholdDn=700;
01C8F6  202BC4     MOV #0x2BC, W4
01C8F8  889474     MOV W4, SensorThresholdDn
26257:                         SensorThresholdUp=2900;
01C8FA  20B544     MOV #0xB54, W4
01C8FC  889484     MOV W4, SensorThresholdUp
26258:                         AutoNastroykaState=35;
01C8FE  200234     MOV #0x23, W4
01C900  89BEF4     MOV W4, AutoNastroykaState
26259:                         AutoNastroykaCMFStart(35);  //Too low SensorThresholdUp
01C902  200230     MOV #0x23, W0
01C904  070215     RCALL AutoNastroykaCMFStart
26260:                         break;
01C906  3700AA     BRA 0x1CA5C
26261:                         }
26262:                         OptionsToMass();
01C908  078772     RCALL OptionsToMass
26263:                         MustTrmFlashMass=1;
01C90A  8095F4     MOV 0x12BE, W4
01C90C  A02004     BSET W4, #2
01C90E  8895F4     MOV W4, 0x12BE
26264:             
26265:                         AutoNastroykaState=30;
01C910  2001E4     MOV #0x1E, W4
01C912  89BEF4     MOV W4, AutoNastroykaState
26266:                         AutoNastroykaCMFStart(29);
01C914  2001D0     MOV #0x1D, W0
01C916  07020C     RCALL AutoNastroykaCMFStart
26267:                         break;
01C918  3700A1     BRA 0x1CA5C
26268:                                 
26269:                                 
26270:                    case 30:
26271:                         PWM1=0;
01C91A  EB0200     CLR W4
01C91C  889284     MOV W4, PWM1
26272:                         
26273:                         break;
01C91E  37009E     BRA 0x1CA5C
26274:                                 
26275:                    case 31:
26276:                         PWM1=0;
01C920  EB0200     CLR W4
01C922  889284     MOV W4, PWM1
26277:                         if (ADCThrottleBreak>=1500)
01C924  8093E5     MOV ADCThrottleBreak, W5
01C926  205DB4     MOV #0x5DB, W4
01C928  528F84     SUB W5, W4, [W15]
01C92A  360008     BRA LEU, 0x1C93C
26278:                         BreakThresholdUp=ADCThrottleBreak-50;
01C92C  8093E4     MOV ADCThrottleBreak, W4
01C92E  B10324     SUB #0x32, W4
01C930  8894B4     MOV W4, BreakThresholdUp
26279:                         else
26280:                         {
26281:                         BreakThresholdDn=700;
01C93C  202BC4     MOV #0x2BC, W4
01C93E  8894C4     MOV W4, BreakThresholdDn
26282:                         BreakThresholdUp=2900;
01C940  20B544     MOV #0xB54, W4
01C942  8894B4     MOV W4, BreakThresholdUp
26283:                         AutoNastroykaState=36;
01C944  200244     MOV #0x24, W4
01C946  89BEF4     MOV W4, AutoNastroykaState
26284:                         AutoNastroykaCMFStart(36);  //Too low SensorThresholdUp
01C948  200240     MOV #0x24, W0
01C94A  0701F2     RCALL AutoNastroykaCMFStart
26285:                         break;
01C94C  370087     BRA 0x1CA5C
26286:                         }
26287:                             
26288:                         
26289:                         if (SensorThresholdDn>1000)
01C932  809475     MOV SensorThresholdDn, W5
01C934  203E84     MOV #0x3E8, W4
01C936  528F84     SUB W5, W4, [W15]
01C938  3C000A     BRA GT, 0x1C94E
01C93A  370012     BRA 0x1C960
26290:                         {
26291:                         BreakThresholdDn=700;
01C94E  202BC4     MOV #0x2BC, W4
01C950  8894C4     MOV W4, BreakThresholdDn
26292:                         BreakThresholdUp=2900;
01C952  20B544     MOV #0xB54, W4
01C954  8894B4     MOV W4, BreakThresholdUp
26293:                         AutoNastroykaState=36;
01C956  200244     MOV #0x24, W4
01C958  89BEF4     MOV W4, AutoNastroykaState
26294:                         AutoNastroykaCMFStart(37);  //Too low SensorThresholdUp
01C95A  200250     MOV #0x25, W0
01C95C  0701E9     RCALL AutoNastroykaCMFStart
26295:                         break;
01C95E  37007E     BRA 0x1CA5C
26296:                         }
26297:             
26298:                         
26299:                         
26300:                         
26301:                         
26302:                         if (BreakThresholdUp<BreakThresholdDn)
01C960  8094B5     MOV BreakThresholdUp, W5
01C962  8094C4     MOV BreakThresholdDn, W4
01C964  528F84     SUB W5, W4, [W15]
01C966  3D0009     BRA GE, 0x1C97A
26303:                         {
26304:                         BreakThresholdDn=700;
01C968  202BC4     MOV #0x2BC, W4
01C96A  8894C4     MOV W4, BreakThresholdDn
26305:                         BreakThresholdUp=2900;
01C96C  20B544     MOV #0xB54, W4
01C96E  8894B4     MOV W4, BreakThresholdUp
26306:                         AutoNastroykaState=36;
01C970  200244     MOV #0x24, W4
01C972  89BEF4     MOV W4, AutoNastroykaState
26307:                         AutoNastroykaCMFStart(38);  //Too low SensorThresholdUp
01C974  200260     MOV #0x26, W0
01C976  0701DC     RCALL AutoNastroykaCMFStart
26308:                         break;
01C978  370071     BRA 0x1CA5C
26309:                         }
26310:                             
26311:                         OptionsToMass();
01C97A  078739     RCALL OptionsToMass
26312:                         MustTrmFlashMass=1;
01C97C  8095F4     MOV 0x12BE, W4
01C97E  A02004     BSET W4, #2
01C980  8895F4     MOV W4, 0x12BE
26313:             
26314:                         AutoNastroykaState=32;
01C982  200204     MOV #0x20, W4
01C984  89BEF4     MOV W4, AutoNastroykaState
26315:                         AutoNastroykaCMFStart(31);
01C986  2001F0     MOV #0x1F, W0
01C988  0701D3     RCALL AutoNastroykaCMFStart
26316:                         break;
01C98A  370068     BRA 0x1CA5C
26317:                                 
26318:                         
26319:                    case 32:
26320:                         PWM1=0;
01C98C  EB0200     CLR W4
01C98E  889284     MOV W4, PWM1
26321:                         if (AutoNastrConfirmWait())
01C990  0701AB     RCALL AutoNastrConfirmWait
01C992  784200     MOV.B W0, W4
01C994  524FE0     SUB.B W4, #0x0, [W15]
01C996  3A0061     BRA NZ, 0x1CA5A
26322:                           return;    
01CA5A  000000     NOP
26323:                             AutoNastroykaState=33;
01C998  200214     MOV #0x21, W4
01C99A  89BEF4     MOV W4, AutoNastroykaState
26324:                             AutoNastroykaCMFStart(32);
01C99C  200200     MOV #0x20, W0
01C99E  0701C8     RCALL AutoNastroykaCMFStart
26325:                         break;
01C9A0  37005D     BRA 0x1CA5C
26326:                         
26327:                    case 33:     
26328:                         PWM1=0;
01C9A2  EB0200     CLR W4
01C9A4  889284     MOV W4, PWM1
26329:                           break;      
01C9A6  37005A     BRA 0x1CA5C
26330:                           
26331:                    case 34:     
26332:                         PWM1=PWMNastr;
01C9A8  809294     MOV PWMNastr, W4
01C9AA  889284     MOV W4, PWM1
26333:                           break;      
01C9AC  370057     BRA 0x1CA5C
26334:                           
26335:                    case 35:
26336:                         PWM1=0;
01C9AE  EB0200     CLR W4
01C9B0  889284     MOV W4, PWM1
26337:                         
26338:                         break;
01C9B2  370054     BRA 0x1CA5C
26339:                    case 36:
26340:                         PWM1=0;
01C9B4  EB0200     CLR W4
01C9B6  889284     MOV W4, PWM1
26341:                         
26342:                         break;
01C9B8  370051     BRA 0x1CA5C
26343:                           
26344:                     case 254:
26345:                         PWM1=0;
01C9BA  EB0200     CLR W4
01C9BC  889284     MOV W4, PWM1
26346:                         break;
01C9BE  37004E     BRA 0x1CA5C
26347:                     case 255:
26348:                         PWM1=0;
01C9C0  EB0200     CLR W4
01C9C2  889284     MOV W4, PWM1
26349:                         break;
01C9C4  37004B     BRA 0x1CA5C
26350:                     case 256:
26351:                         PWM1=0;
01C9C6  EB0200     CLR W4
01C9C8  889284     MOV W4, PWM1
26352:                         break;
01C9CA  000000     NOP
01C9CC  370047     BRA 0x1CA5C
26353:                 }
26354:                 
26355:                 
26356:             }
01CA5C  BE044F     MOV.D [--W15], W8
01CA5E  FA8000     ULNK
01CA60  060000     RETURN
26357:             
26358:             
26359:             
26360:             
26361:             
26362:             
26363:             void SendStateOfSinTest(void)
26364:             {
01CA62  FA0004     LNK #0x4
26365:                 unsigned int CntBt=4;
01CA64  200044     MOV #0x4, W4
01CA66  780F04     MOV W4, [W14]
26366:                 int Tmp;
26367:             
26368:                 if (HC05_BUSY)
01CA68  809635     MOV 0x12C6, W5
01CA6A  204004     MOV #0x400, W4
01CA6C  628204     AND W5, W4, W4
01CA6E  520FE0     SUB W4, #0x0, [W15]
01CA70  3A0132     BRA NZ, 0x1CCD6
26369:                     return;
01CCD6  000000     NOP
01CCD8  370005     BRA 0x1CCE4
26370:             
26371:                 if (!Hv_HC05)
01CA72  8096D5     MOV 0x12DA, W5
01CA74  200404     MOV #0x40, W4
01CA76  628204     AND W5, W4, W4
01CA78  520FE0     SUB W4, #0x0, [W15]
01CA7A  32012F     BRA Z, 0x1CCDA
26372:                 return;
01CCDA  000000     NOP
01CCDC  370003     BRA 0x1CCE4
26373:                 if (!MustTrmStateOfSinTest)
01CA7C  8096A5     MOV Flgs6, W5
01CA7E  210004     MOV #0x1000, W4
01CA80  628204     AND W5, W4, W4
01CA82  520FE0     SUB W4, #0x0, [W15]
01CA84  32012C     BRA Z, 0x1CCDE
26374:                 return;
01CCDE  000000     NOP
01CCE0  370001     BRA 0x1CCE4
26375:                 if (OnTransmittHC05)
01CA86  809615     MOV 0x12C2, W5
01CA88  202004     MOV #0x200, W4
01CA8A  628204     AND W5, W4, W4
01CA8C  520FE0     SUB W4, #0x0, [W15]
01CA8E  3A0129     BRA NZ, 0x1CCE2
26376:                     return;
01CCE2  000000     NOP
26377:                 HC05_BUSY=1;
01CA90  809634     MOV 0x12C6, W4
01CA92  A0A004     BSET W4, #10
01CA94  889634     MOV W4, 0x12C6
26378:             
26379:             
26380:             
26381:             
26382:             
26383:             
26384:             
26385:             
26386:             
26387:                 HC05TrmMass[0]=0xff;
01CA96  230CE5     MOV #0x30CE, W5
01CA98  EBC200     SETM.B W4
01CA9A  784A84     MOV.B W4, [W5]
26388:                 HC05TrmMass[1]=0xff;
01CA9C  230CF5     MOV #0x30CF, W5
01CA9E  EBC200     SETM.B W4
01CAA0  784A84     MOV.B W4, [W5]
26389:             
26390:             
26391:                 HC05TrmMass[3]=15;//COMMAND
01CAA2  230D15     MOV #0x30D1, W5
01CAA4  B3C0F4     MOV.B #0xF, W4
01CAA6  784A84     MOV.B W4, [W5]
26392:             
26393:                 
26394:             
26395:                 Tmp=(int)AutoNastroykaStateFn;                //AutoNastroykaState;     1
01CAA8  81BF04     MOV AutoNastroykaStateFn, W4
01CAAA  980714     MOV W4, [W14+2]
26396:                 HC05TrmMass[CntBt++]=Tmp;
01CAAC  90021E     MOV [W14+2], W4
01CAAE  784204     MOV.B W4, W4
01CAB0  230CE5     MOV #0x30CE, W5
01CAB2  42829E     ADD W5, [W14], W5
01CAB4  784A84     MOV.B W4, [W5]
01CAB6  E80F1E     INC [W14], [W14]
26397:                 HC05TrmMass[CntBt++]=Tmp>>8;
01CAB8  90021E     MOV [W14+2], W4
01CABA  DEA248     ASR W4, #8, W4
01CABC  784204     MOV.B W4, W4
01CABE  230CE5     MOV #0x30CE, W5
01CAC0  42829E     ADD W5, [W14], W5
01CAC2  784A84     MOV.B W4, [W5]
01CAC4  E80F1E     INC [W14], [W14]
26398:             
26399:                 
26400:                 AutoNastroykaStateFn=0;
01CAC6  EB0200     CLR W4
01CAC8  89BF04     MOV W4, AutoNastroykaStateFn
26401:                 
26402:                 HC05TrmMass[CntBt++]=Curr1SnTST;            //Curr1SnTST    2
01CACA  817CF4     MOV Curr1SnTST, W4
01CACC  817D05     MOV 0x2FA0, W5
01CACE  784204     MOV.B W4, W4
01CAD0  230CE5     MOV #0x30CE, W5
01CAD2  42829E     ADD W5, [W14], W5
01CAD4  784A84     MOV.B W4, [W5]
01CAD6  E80F1E     INC [W14], [W14]
26403:                 HC05TrmMass[CntBt++]=Curr1SnTST>>8;
01CAD8  817CF4     MOV Curr1SnTST, W4
01CADA  817D05     MOV 0x2FA0, W5
01CADC  DD2B48     SL W5, #8, W6
01CADE  DE2248     LSR W4, #8, W4
01CAE0  730204     IOR W6, W4, W4
01CAE2  DEAAC8     ASR W5, #8, W5
01CAE4  784204     MOV.B W4, W4
01CAE6  230CE5     MOV #0x30CE, W5
01CAE8  42829E     ADD W5, [W14], W5
01CAEA  784A84     MOV.B W4, [W5]
01CAEC  E80F1E     INC [W14], [W14]
26404:                 HC05TrmMass[CntBt++]=Curr1SnTST>>16;
01CAEE  817CF4     MOV Curr1SnTST, W4
01CAF0  817D05     MOV 0x2FA0, W5
01CAF2  DEAA40     ASR W5, #0, W4
01CAF4  DEA2CF     ASR W4, #15, W5
01CAF6  784204     MOV.B W4, W4
01CAF8  230CE5     MOV #0x30CE, W5
01CAFA  42829E     ADD W5, [W14], W5
01CAFC  784A84     MOV.B W4, [W5]
01CAFE  E80F1E     INC [W14], [W14]
26405:                 HC05TrmMass[CntBt++]=Curr1SnTST>>24;
01CB00  817CF4     MOV Curr1SnTST, W4
01CB02  817D05     MOV 0x2FA0, W5
01CB04  DEAA48     ASR W5, #8, W4
01CB06  DEA2CF     ASR W4, #15, W5
01CB08  784204     MOV.B W4, W4
01CB0A  230CE5     MOV #0x30CE, W5
01CB0C  42829E     ADD W5, [W14], W5
01CB0E  784A84     MOV.B W4, [W5]
01CB10  E80F1E     INC [W14], [W14]
26406:                 
26407:                 HC05TrmMass[CntBt++]=TestSIN_Ok;            //  TestSIN_Ok      3
01CB12  809654     MOV 0x12CA, W4
01CB14  DE2242     LSR W4, #2, W4
01CB16  624261     AND.B W4, #0x1, W4
01CB18  230CE5     MOV #0x30CE, W5
01CB1A  42829E     ADD W5, [W14], W5
01CB1C  784A84     MOV.B W4, [W5]
01CB1E  E80F1E     INC [W14], [W14]
26408:                 
26409:                 if (TestSIN_Ok)
01CB20  809654     MOV 0x12CA, W4
01CB22  620264     AND W4, #0x4, W4
01CB24  520FE0     SUB W4, #0x0, [W15]
01CB26  320003     BRA Z, 0x1CB2E
26410:                 TestSIN_Ok=0;
01CB28  809654     MOV 0x12CA, W4
01CB2A  A12004     BCLR W4, #2
01CB2C  889654     MOV W4, 0x12CA
26411:                 HC05TrmMass[CntBt++]=TestSINOkMassCnt;      //  TestSINOkMassCnt   4
01CB2E  213C44     MOV #0x13C4, W4
01CB30  784214     MOV.B [W4], W4
01CB32  230CE5     MOV #0x30CE, W5
01CB34  42829E     ADD W5, [W14], W5
01CB36  784A84     MOV.B W4, [W5]
01CB38  E80F1E     INC [W14], [W14]
26412:                 HC05TrmMass[CntBt++]=SensOrder1;                //  SensOrder1  5
01CB3A  212494     MOV #0x1249, W4
01CB3C  784214     MOV.B [W4], W4
01CB3E  230CE5     MOV #0x30CE, W5
01CB40  42829E     ADD W5, [W14], W5
01CB42  784A84     MOV.B W4, [W5]
01CB44  E80F1E     INC [W14], [W14]
26413:                 HC05TrmMass[CntBt++]=InvSin;                //  InvSin  6
01CB46  809764     MOV StatFlgs2, W4
01CB48  DE224F     LSR W4, #15, W4
01CB4A  784204     MOV.B W4, W4
01CB4C  230CE5     MOV #0x30CE, W5
01CB4E  42829E     ADD W5, [W14], W5
01CB50  784A84     MOV.B W4, [W5]
01CB52  E80F1E     INC [W14], [W14]
26414:                 
26415:             
26416:                 HC05TrmMass[CntBt++]=Curr1SnTST_0;            //Curr1SnTST_0    7
01CB54  817D14     MOV Curr1SnTST_0, W4
01CB56  817D25     MOV 0x2FA4, W5
01CB58  784204     MOV.B W4, W4
01CB5A  230CE5     MOV #0x30CE, W5
01CB5C  42829E     ADD W5, [W14], W5
01CB5E  784A84     MOV.B W4, [W5]
01CB60  E80F1E     INC [W14], [W14]
26417:                 HC05TrmMass[CntBt++]=Curr1SnTST_0>>8;
01CB62  817D14     MOV Curr1SnTST_0, W4
01CB64  817D25     MOV 0x2FA4, W5
01CB66  DD2B48     SL W5, #8, W6
01CB68  DE2248     LSR W4, #8, W4
01CB6A  730204     IOR W6, W4, W4
01CB6C  DEAAC8     ASR W5, #8, W5
01CB6E  784204     MOV.B W4, W4
01CB70  230CE5     MOV #0x30CE, W5
01CB72  42829E     ADD W5, [W14], W5
01CB74  784A84     MOV.B W4, [W5]
01CB76  E80F1E     INC [W14], [W14]
26418:                 HC05TrmMass[CntBt++]=Curr1SnTST_0>>16;
01CB78  817D14     MOV Curr1SnTST_0, W4
01CB7A  817D25     MOV 0x2FA4, W5
01CB7C  DEAA40     ASR W5, #0, W4
01CB7E  DEA2CF     ASR W4, #15, W5
01CB80  784204     MOV.B W4, W4
01CB82  230CE5     MOV #0x30CE, W5
01CB84  42829E     ADD W5, [W14], W5
01CB86  784A84     MOV.B W4, [W5]
01CB88  E80F1E     INC [W14], [W14]
26419:                 HC05TrmMass[CntBt++]=Curr1SnTST_0>>24;
01CB8A  817D14     MOV Curr1SnTST_0, W4
01CB8C  817D25     MOV 0x2FA4, W5
01CB8E  DEAA48     ASR W5, #8, W4
01CB90  DEA2CF     ASR W4, #15, W5
01CB92  784204     MOV.B W4, W4
01CB94  230CE5     MOV #0x30CE, W5
01CB96  42829E     ADD W5, [W14], W5
01CB98  784A84     MOV.B W4, [W5]
01CB9A  E80F1E     INC [W14], [W14]
26420:                 
26421:                 
26422:                 HC05TrmMass[CntBt++]=Curr1SnTST;                //Curr1SnTST    8
01CB9C  817CF4     MOV Curr1SnTST, W4
01CB9E  817D05     MOV 0x2FA0, W5
01CBA0  784204     MOV.B W4, W4
01CBA2  230CE5     MOV #0x30CE, W5
01CBA4  42829E     ADD W5, [W14], W5
01CBA6  784A84     MOV.B W4, [W5]
01CBA8  E80F1E     INC [W14], [W14]
26423:                 HC05TrmMass[CntBt++]=Curr1SnTST>>8;
01CBAA  817CF4     MOV Curr1SnTST, W4
01CBAC  817D05     MOV 0x2FA0, W5
01CBAE  DD2B48     SL W5, #8, W6
01CBB0  DE2248     LSR W4, #8, W4
01CBB2  730204     IOR W6, W4, W4
01CBB4  DEAAC8     ASR W5, #8, W5
01CBB6  784204     MOV.B W4, W4
01CBB8  230CE5     MOV #0x30CE, W5
01CBBA  42829E     ADD W5, [W14], W5
01CBBC  784A84     MOV.B W4, [W5]
01CBBE  E80F1E     INC [W14], [W14]
26424:                 HC05TrmMass[CntBt++]=Curr1SnTST>>16;
01CBC0  817CF4     MOV Curr1SnTST, W4
01CBC2  817D05     MOV 0x2FA0, W5
01CBC4  DEAA40     ASR W5, #0, W4
01CBC6  DEA2CF     ASR W4, #15, W5
01CBC8  784204     MOV.B W4, W4
01CBCA  230CE5     MOV #0x30CE, W5
01CBCC  42829E     ADD W5, [W14], W5
01CBCE  784A84     MOV.B W4, [W5]
01CBD0  E80F1E     INC [W14], [W14]
26425:                 HC05TrmMass[CntBt++]=Curr1SnTST>>24;
01CBD2  817CF4     MOV Curr1SnTST, W4
01CBD4  817D05     MOV 0x2FA0, W5
01CBD6  DEAA48     ASR W5, #8, W4
01CBD8  DEA2CF     ASR W4, #15, W5
01CBDA  784204     MOV.B W4, W4
01CBDC  230CE5     MOV #0x30CE, W5
01CBDE  42829E     ADD W5, [W14], W5
01CBE0  784A84     MOV.B W4, [W5]
01CBE2  E80F1E     INC [W14], [W14]
26426:                 
26427:             
26428:                 Tmp=(int)CntAutoNastroykaState257;                //CntAutoNastroykaState257;     9
01CBE4  80BD14     MOV CntAutoNastroykaState257, W4
01CBE6  980714     MOV W4, [W14+2]
26429:                 HC05TrmMass[CntBt++]=Tmp;
01CBE8  90021E     MOV [W14+2], W4
01CBEA  784204     MOV.B W4, W4
01CBEC  230CE5     MOV #0x30CE, W5
01CBEE  42829E     ADD W5, [W14], W5
01CBF0  784A84     MOV.B W4, [W5]
01CBF2  E80F1E     INC [W14], [W14]
26430:                 HC05TrmMass[CntBt++]=Tmp>>8;
01CBF4  90021E     MOV [W14+2], W4
01CBF6  DEA248     ASR W4, #8, W4
01CBF8  784204     MOV.B W4, W4
01CBFA  230CE5     MOV #0x30CE, W5
01CBFC  42829E     ADD W5, [W14], W5
01CBFE  784A84     MOV.B W4, [W5]
01CC00  E80F1E     INC [W14], [W14]
26431:             
26432:                 
26433:                 Tmp=(int)SensorThresholdDn;                //SensorThresholdDn;     10
01CC02  809474     MOV SensorThresholdDn, W4
01CC04  980714     MOV W4, [W14+2]
26434:                 HC05TrmMass[CntBt++]=Tmp;
01CC06  90021E     MOV [W14+2], W4
01CC08  784204     MOV.B W4, W4
01CC0A  230CE5     MOV #0x30CE, W5
01CC0C  42829E     ADD W5, [W14], W5
01CC0E  784A84     MOV.B W4, [W5]
01CC10  E80F1E     INC [W14], [W14]
26435:                 HC05TrmMass[CntBt++]=Tmp>>8;
01CC12  90021E     MOV [W14+2], W4
01CC14  DEA248     ASR W4, #8, W4
01CC16  784204     MOV.B W4, W4
01CC18  230CE5     MOV #0x30CE, W5
01CC1A  42829E     ADD W5, [W14], W5
01CC1C  784A84     MOV.B W4, [W5]
01CC1E  E80F1E     INC [W14], [W14]
26436:             
26437:             
26438:                 Tmp=(int)SensorThresholdUp;                //SensorThresholdUp;     11
01CC20  809486     MOV SensorThresholdUp, W6
01CC22  980716     MOV W6, [W14+2]
26439:                 HC05TrmMass[CntBt++]=Tmp;
01CC24  90021E     MOV [W14+2], W4
01CC26  784204     MOV.B W4, W4
01CC28  230CE5     MOV #0x30CE, W5
01CC2A  42829E     ADD W5, [W14], W5
01CC2C  784A84     MOV.B W4, [W5]
01CC2E  E80F1E     INC [W14], [W14]
26440:                 HC05TrmMass[CntBt++]=Tmp>>8;
01CC30  90021E     MOV [W14+2], W4
01CC32  DEA248     ASR W4, #8, W4
01CC34  784204     MOV.B W4, W4
01CC36  230CE5     MOV #0x30CE, W5
01CC38  42829E     ADD W5, [W14], W5
01CC3A  784A84     MOV.B W4, [W5]
01CC3C  E80F1E     INC [W14], [W14]
26441:             
26442:             
26443:                 Tmp=(int)BreakThresholdDn;                //BreakThresholdUp;     12
01CC3E  8094C4     MOV BreakThresholdDn, W4
01CC40  980714     MOV W4, [W14+2]
26444:                 HC05TrmMass[CntBt++]=Tmp;
01CC42  90021E     MOV [W14+2], W4
01CC44  784204     MOV.B W4, W4
01CC46  230CE5     MOV #0x30CE, W5
01CC48  42829E     ADD W5, [W14], W5
01CC4A  784A84     MOV.B W4, [W5]
01CC4C  E80F1E     INC [W14], [W14]
26445:                 HC05TrmMass[CntBt++]=Tmp>>8;
01CC4E  90021E     MOV [W14+2], W4
01CC50  DEA248     ASR W4, #8, W4
01CC52  784204     MOV.B W4, W4
01CC54  230CE5     MOV #0x30CE, W5
01CC56  42829E     ADD W5, [W14], W5
01CC58  784A84     MOV.B W4, [W5]
01CC5A  E80F1E     INC [W14], [W14]
26446:             
26447:             
26448:                 Tmp=(int)BreakThresholdUp;                //BreakThresholdUp;     13
01CC5C  8094B6     MOV BreakThresholdUp, W6
01CC5E  980716     MOV W6, [W14+2]
26449:                 HC05TrmMass[CntBt++]=Tmp;
01CC60  90021E     MOV [W14+2], W4
01CC62  784204     MOV.B W4, W4
01CC64  230CE5     MOV #0x30CE, W5
01CC66  42829E     ADD W5, [W14], W5
01CC68  784A84     MOV.B W4, [W5]
01CC6A  E80F1E     INC [W14], [W14]
26450:                 HC05TrmMass[CntBt++]=Tmp>>8;
01CC6C  90021E     MOV [W14+2], W4
01CC6E  DEA248     ASR W4, #8, W4
01CC70  784204     MOV.B W4, W4
01CC72  230CE5     MOV #0x30CE, W5
01CC74  42829E     ADD W5, [W14], W5
01CC76  784A84     MOV.B W4, [W5]
01CC78  E80F1E     INC [W14], [W14]
26451:                 
26452:                 
26453:                 HC05TrmMass[CntBt++]=UBT_V;             //UBT_V                     14
01CC7A  22FB54     MOV #0x2FB5, W4
01CC7C  784214     MOV.B [W4], W4
01CC7E  230CE5     MOV #0x30CE, W5
01CC80  42829E     ADD W5, [W14], W5
01CC82  784A84     MOV.B W4, [W5]
01CC84  E80F1E     INC [W14], [W14]
26454:             
26455:             
26456:                 Tmp=(int)PWM1_SIN_TST;                //PWM1_SIN_TST;     15
01CC86  821304     MOV PWM1_SIN_TST, W4
01CC88  980714     MOV W4, [W14+2]
26457:                 HC05TrmMass[CntBt++]=Tmp;
01CC8A  90021E     MOV [W14+2], W4
01CC8C  784204     MOV.B W4, W4
01CC8E  230CE5     MOV #0x30CE, W5
01CC90  42829E     ADD W5, [W14], W5
01CC92  784A84     MOV.B W4, [W5]
01CC94  E80F1E     INC [W14], [W14]
26458:                 HC05TrmMass[CntBt++]=Tmp>>8;
01CC96  90021E     MOV [W14+2], W4
01CC98  DEA248     ASR W4, #8, W4
01CC9A  784204     MOV.B W4, W4
01CC9C  230CE5     MOV #0x30CE, W5
01CC9E  42829E     ADD W5, [W14], W5
01CCA0  784A84     MOV.B W4, [W5]
01CCA2  E80F1E     INC [W14], [W14]
26459:                 
26460:                 
26461:                 
26462:                 
26463:                 HC05TrmMass[2]=CntBt-3;
01CCA4  78021E     MOV [W14], W4
01CCA6  784204     MOV.B W4, W4
01CCA8  524263     SUB.B W4, #0x3, W4
01CCAA  230D05     MOV #0x30D0, W5
01CCAC  784A84     MOV.B W4, [W5]
26464:             
26465:             
26466:                 HC05TrmMass[CntBt++]=CalcCheckSumm(HC05TrmMass[2]+1,&HC05TrmMass[2]);
01CCAE  230D04     MOV #0x30D0, W4
01CCB0  784214     MOV.B [W4], W4
01CCB2  FB8204     ZE W4, W4
01CCB4  E80204     INC W4, W4
01CCB6  230D01     MOV #0x30D0, W1
01CCB8  780004     MOV W4, W0
01CCBA  029AF6     CALL CalcCheckSumm
01CCBC  000000     NOP
01CCBE  784200     MOV.B W0, W4
01CCC0  230CE5     MOV #0x30CE, W5
01CCC2  42829E     ADD W5, [W14], W5
01CCC4  784A84     MOV.B W4, [W5]
01CCC6  E80F1E     INC [W14], [W14]
26467:                 
26468:                 
26469:             
26470:                 MustTrmHC05=1;
01CCC8  809634     MOV 0x12C6, W4
01CCCA  A09004     BSET W4, #9
01CCCC  889634     MOV W4, 0x12C6
26471:             
26472:             
26473:             //    TrmHC05(HC05TrmMass);
26474:             
26475:             
26476:                 MustTrmStateOfSinTest=0;
01CCCE  8096A4     MOV Flgs6, W4
01CCD0  A1C004     BCLR W4, #12
01CCD2  8896A4     MOV W4, Flgs6
01CCD4  370007     BRA 0x1CCE4
26477:             
26478:             
26479:             
26480:             
26481:                
26482:             }
01CCE4  FA8000     ULNK
01CCE6  060000     RETURN
26483:             
26484:             
26485:             
26486:             unsigned char AutoNastrConfirmWait(void)
26487:             {
01CCE8  FA0000     LNK #0x0
26488:                 
26489:                 if (HvConfirm)
01CCEA  8096A5     MOV Flgs6, W5
01CCEC  240004     MOV #0x4000, W4
01CCEE  628204     AND W5, W4, W4
01CCF0  520FE0     SUB W4, #0x0, [W15]
01CCF2  320002     BRA Z, 0x1CCF8
26490:                     return 0;
01CCF4  EB4200     CLR.B W4
01CCF6  370019     BRA 0x1CD2A
26491:                 if (AutoNastroyka_ConfirmDelayCnt!=0)
01CCF8  817D54     MOV AutoNastroyka_ConfirmDelayCnt, W4
01CCFA  520FE0     SUB W4, #0x0, [W15]
01CCFC  32000F     BRA Z, 0x1CD1C
26492:                 {
26493:                     AutoNastroyka_ConfirmDelayCnt--;
01CCFE  817D54     MOV AutoNastroyka_ConfirmDelayCnt, W4
01CD00  E90204     DEC W4, W4
01CD02  897D54     MOV W4, AutoNastroyka_ConfirmDelayCnt
26494:                     if (AutoNastroyka_ConfirmMSG)
01CD04  8096A5     MOV Flgs6, W5
01CD06  280004     MOV #0x8000, W4
01CD08  628204     AND W5, W4, W4
01CD0A  520FE0     SUB W4, #0x0, [W15]
01CD0C  320005     BRA Z, 0x1CD18
26495:                     {
26496:                         HvConfirm=1;
01CD0E  8096A4     MOV Flgs6, W4
01CD10  A0E004     BSET W4, #14
01CD12  8896A4     MOV W4, Flgs6
26497:                         return 0;
01CD14  EB4200     CLR.B W4
01CD16  370009     BRA 0x1CD2A
26498:                     }
26499:                     else
26500:                         return 1;
01CD18  B3C014     MOV.B #0x1, W4
01CD1A  370007     BRA 0x1CD2A
26501:                 }
26502:                 else
26503:                 {
26504:                     HvConfirm=1;
01CD1C  8096A4     MOV Flgs6, W4
01CD1E  A0E004     BSET W4, #14
01CD20  8896A4     MOV W4, Flgs6
26505:                     CntAutoNastroykaState257++;
01CD22  80BD14     MOV CntAutoNastroykaState257, W4
01CD24  E80204     INC W4, W4
01CD26  88BD14     MOV W4, CntAutoNastroykaState257
26506:                     
26507:                     /*AutoNastroykaState=257;
26508:                                AutoNastroyka_ConfirmDelayCnt=200;
26509:                                 AutoNastroyka_ConfirmMSG=0;  
26510:                                 HvConfirm=0;
26511:                                 MustTrmStateOfSinTest=1;
26512:                                 
26513:                     return 2;
26514:                      */
26515:                     return 0;
01CD28  EB4200     CLR.B W4
26516:                 }
26517:             }
01CD2A  784004     MOV.B W4, W0
01CD2C  FA8000     ULNK
01CD2E  060000     RETURN
26518:             
26519:             
26520:             void AutoNastroykaCMFStart(unsigned int AutoNastroykaStateFin)
26521:             {
01CD30  FA0002     LNK #0x2
01CD32  780F00     MOV W0, [W14]
26522:                             AutoNastroykaStateFn=AutoNastroykaStateFin;
01CD34  78021E     MOV [W14], W4
01CD36  89BF04     MOV W4, AutoNastroykaStateFn
26523:                                AutoNastroyka_ConfirmDelayCnt=200;
01CD38  200C84     MOV #0xC8, W4
01CD3A  897D54     MOV W4, AutoNastroyka_ConfirmDelayCnt
26524:                                 AutoNastroyka_ConfirmMSG=0;  
01CD3C  8096A4     MOV Flgs6, W4
01CD3E  A1F004     BCLR W4, #15
01CD40  8896A4     MOV W4, Flgs6
26525:                                 HvConfirm=0;
01CD42  8096A4     MOV Flgs6, W4
01CD44  A1E004     BCLR W4, #14
01CD46  8896A4     MOV W4, Flgs6
26526:                                 MustTrmStateOfSinTest=1;
01CD48  8096A4     MOV Flgs6, W4
01CD4A  A0C004     BSET W4, #12
01CD4C  8896A4     MOV W4, Flgs6
26527:             }
01CD4E  FA8000     ULNK
01CD50  060000     RETURN
26528:             
26529:             
26530:             void UBT_To_V(void)
26531:             {
01CD52  FA0000     LNK #0x0
26532:             #if !defined VECTOR
26533:                 #if !defined ISOLATED                               
26534:                                            float UBtFl=(float)UBT/(float)38.388;
26535:                                            UBT_V=(unsigned int)UBtFl;
26536:             
26537:             #else
26538:                                            UBtFl=(float)UBT*(float)0.4167965;
26539:                                            UBT_V=(unsigned int)UBtFl;
26540:                                            
26541:             #endif
26542:             #else
26543:                                            UBtFl=(float)UBT/(float)38.388;
01CD54  817E64     MOV UBT, W4
01CD56  200005     MOV #0x0, W5
01CD58  BE0004     MOV.D W4, W0
01CD5A  022582     CALL ___floatunsisf
01CD5C  000000     NOP
01CD5E  BE0200     MOV.D W0, W4
01CD60  28D502     MOV #0x8D50, W2
01CD62  242193     MOV #0x4219, W3
01CD64  BE0004     MOV.D W4, W0
01CD66  02245A     CALL ___divsf3
01CD68  000000     NOP
01CD6A  BE0200     MOV.D W0, W4
01CD6C  8A0064     MOV W4, UBtFl
01CD6E  8A0075     MOV W5, 0x400E
26544:                                            UBT_V=(unsigned int)UBtFl;
01CD70  820064     MOV UBtFl, W4
01CD72  820075     MOV 0x400E, W5
01CD74  BE0004     MOV.D W4, W0
01CD76  022546     CALL ___fixunssfsi
01CD78  000000     NOP
01CD7A  BE0200     MOV.D W0, W4
01CD7C  780204     MOV W4, W4
01CD7E  784204     MOV.B W4, W4
01CD80  22FB55     MOV #0x2FB5, W5
01CD82  784A84     MOV.B W4, [W5]
26545:                                            _12VFl=(float)_12V*(float) 0.00373533;
01CD84  80BDE4     MOV _12V, W4
01CD86  DEA2CF     ASR W4, #15, W5
01CD88  BE0004     MOV.D W4, W0
01CD8A  02257C     CALL ___floatsisf
01CD8C  000000     NOP
01CD8E  BE0200     MOV.D W0, W4
01CD90  2CC702     MOV #0xCC70, W2
01CD92  23B743     MOV #0x3B74, W3
01CD94  BE0004     MOV.D W4, W0
01CD96  022630     CALL ___mulsf3
01CD98  000000     NOP
01CD9A  BE0200     MOV.D W0, W4
01CD9C  893F44     MOV W4, _12VFl
01CD9E  893F55     MOV W5, 0x27EA
26546:                                            _5VFl=(float)_5V*(float) 0.00146484;
01CDA0  80BD84     MOV _5V, W4
01CDA2  DEA2CF     ASR W4, #15, W5
01CDA4  BE0004     MOV.D W4, W0
01CDA6  02257C     CALL ___floatsisf
01CDA8  000000     NOP
01CDAA  BE0200     MOV.D W0, W4
01CDAC  2FFE02     MOV #0xFFE0, W2
01CDAE  23ABF3     MOV #0x3ABF, W3
01CDB0  BE0004     MOV.D W4, W0
01CDB2  022630     CALL ___mulsf3
01CDB4  000000     NOP
01CDB6  BE0200     MOV.D W0, W4
01CDB8  893F24     MOV W4, _5VFl
01CDBA  893F35     MOV W5, 0x27E6
26547:                                            _3VFl=(float)_3V*(float) 0.00097167;
01CDBC  80BD94     MOV _3V, W4
01CDBE  DEA2CF     ASR W4, #15, W5
01CDC0  BE0004     MOV.D W4, W0
01CDC2  02257C     CALL ___floatsisf
01CDC4  000000     NOP
01CDC6  BE0200     MOV.D W0, W4
01CDC8  2B7AB2     MOV #0xB7AB, W2
01CDCA  23A7E3     MOV #0x3A7E, W3
01CDCC  BE0004     MOV.D W4, W0
01CDCE  022630     CALL ___mulsf3
01CDD0  000000     NOP
01CDD2  BE0200     MOV.D W0, W4
01CDD4  893F04     MOV W4, _3VFl
01CDD6  893F15     MOV W5, 0x27E2
26548:                                            
26549:             #endif
26550:             
26551:             }
01CDD8  FA8000     ULNK
01CDDA  060000     RETURN
26552:             
26553:             
26554:             void SetPIN_HC05(void)
26555:             {
01CDDC  FA0006     LNK #0x6
26556:             unsigned int Cnt=0;    
01CDDE  EB0200     CLR W4
01CDE0  780F04     MOV W4, [W14]
26557:                 if (!PIN_CODE_HC05)
01CDE2  8096B4     MOV 0x12D6, W4
01CDE4  620264     AND W4, #0x4, W4
01CDE6  520FE0     SUB W4, #0x0, [W15]
01CDE8  320070     BRA Z, 0x1CECA
26558:                     return;
01CECA  000000     NOP
01CECC  370003     BRA 0x1CED4
26559:              
26560:                  if (OnTransmittHC05)
01CDEA  809615     MOV 0x12C2, W5
01CDEC  202004     MOV #0x200, W4
01CDEE  628204     AND W5, W4, W4
01CDF0  520FE0     SUB W4, #0x0, [W15]
01CDF2  3A006D     BRA NZ, 0x1CECE
26561:                      return;
01CECE  000000     NOP
01CED0  370001     BRA 0x1CED4
26562:                     if (HC05_BUSY)
01CDF4  809635     MOV 0x12C6, W5
01CDF6  204004     MOV #0x400, W4
01CDF8  628204     AND W5, W4, W4
01CDFA  520FE0     SUB W4, #0x0, [W15]
01CDFC  3A006A     BRA NZ, 0x1CED2
26563:                     return;
01CED2  000000     NOP
26564:                   HC05_BUSY=1;
01CDFE  809634     MOV 0x12C6, W4
01CE00  A0A004     BSET W4, #10
01CE02  889634     MOV W4, 0x12C6
26565:                 
26566:                 
26567:                 
26568:                 
26569:                 
26570:                  PinCodeMass[0]='A';
01CE04  217395     MOV #0x1739, W5
01CE06  B3C414     MOV.B #0x41, W4
01CE08  784A84     MOV.B W4, [W5]
26571:                  PinCodeMass[1]='T';
01CE0A  2173A5     MOV #0x173A, W5
01CE0C  B3C544     MOV.B #0x54, W4
01CE0E  784A84     MOV.B W4, [W5]
26572:                  PinCodeMass[2]='+';
01CE10  2173B5     MOV #0x173B, W5
01CE12  B3C2B4     MOV.B #0x2B, W4
01CE14  784A84     MOV.B W4, [W5]
26573:                  PinCodeMass[3]='P';
01CE16  2173C5     MOV #0x173C, W5
01CE18  B3C504     MOV.B #0x50, W4
01CE1A  784A84     MOV.B W4, [W5]
26574:                  PinCodeMass[4]='S';
01CE1C  2173D5     MOV #0x173D, W5
01CE1E  B3C534     MOV.B #0x53, W4
01CE20  784A84     MOV.B W4, [W5]
26575:                  PinCodeMass[5]='W';
01CE22  2173E5     MOV #0x173E, W5
01CE24  B3C574     MOV.B #0x57, W4
01CE26  784A84     MOV.B W4, [W5]
26576:                  PinCodeMass[6]='D';
01CE28  2173F5     MOV #0x173F, W5
01CE2A  B3C444     MOV.B #0x44, W4
01CE2C  784A84     MOV.B W4, [W5]
26577:                  PinCodeMass[7]='=';
01CE2E  217405     MOV #0x1740, W5
01CE30  B3C3D4     MOV.B #0x3D, W4
01CE32  784A84     MOV.B W4, [W5]
26578:             
26579:                 
26580:                 
26581:                   PIN_CODE_HC05=0;
01CE34  8096B4     MOV 0x12D6, W4
01CE36  A12004     BCLR W4, #2
01CE38  8896B4     MOV W4, 0x12D6
26582:             #if !defined VECTOR
26583:             #if defined ISOLATED    
26584:                 KEY_BT=1;
26585:             #else
26586:                 KEY_BT=0;
26587:             #endif
26588:             #else
26589:                 KEY_BT=1;
01CE3A  A8EE64     BSET LATG, #7
26590:             #endif
26591:                 
26592:             long int g;
26593:                 ResetedPIN=1;
01CE3C  8096B4     MOV 0x12D6, W4
01CE3E  A03004     BSET W4, #3
01CE40  8896B4     MOV W4, 0x12D6
26594:             
26595:                                         for (g=0;g<150000;g++)
01CE42  B82260     MUL.UU W4, #0, W4
01CE44  980714     MOV W4, [W14+2]
01CE46  980725     MOV W5, [W14+4]
01CE48  370007     BRA 0x1CE58
01CE4C  90021E     MOV [W14+2], W4
01CE4E  9002AE     MOV [W14+4], W5
01CE50  420261     ADD W4, #0x1, W4
01CE52  4A82E0     ADDC W5, #0x0, W5
01CE54  980714     MOV W4, [W14+2]
01CE56  980725     MOV W5, [W14+4]
01CE58  90031E     MOV [W14+2], W6
01CE5A  9003AE     MOV [W14+4], W7
01CE5C  249EF4     MOV #0x49EF, W4
01CE5E  200025     MOV #0x2, W5
01CE60  530F84     SUB W6, W4, [W15]
01CE62  5B8F85     SUBB W7, W5, [W15]
01CE64  34FFF2     BRA LE, 0x1CE4A
26596:                                             Nop();
01CE4A  000000     NOP
26597:                                         HvReplyHC05=0;
01CE66  809614     MOV 0x12C2, W4
01CE68  A1A004     BCLR W4, #10
01CE6A  889614     MOV W4, 0x12C2
26598:                                         MyTimeOut=550;
01CE6C  202264     MOV #0x226, W4
01CE6E  8994C4     MOV W4, MyTimeOut
26599:               
26600:                                         AT_Rec=1;
01CE70  809614     MOV 0x12C2, W4
01CE72  A0E004     BSET W4, #14
01CE74  889614     MOV W4, 0x12C2
26601:                                         RecMassHC05[0]=3;
01CE76  232345     MOV #0x3234, W5
01CE78  B3C034     MOV.B #0x3, W4
01CE7A  784A84     MOV.B W4, [W5]
01CE7C  370001     BRA 0x1CE80
26602:             oooo:
26603:                                    //     TrmHC05_AT("AT+PSWD=a0001\r\n",sizeof("AT+PSWD=a0001\r\n"));//
26604:                                         TrmHC05_AT((char*)PinCodeMass,(int)StringPINLenght);//
01CE80  230AB4     MOV #0x30AB, W4
01CE82  784214     MOV.B [W4], W4
01CE84  FB8284     ZE W4, W5
01CE86  217394     MOV #0x1739, W4
01CE88  780085     MOV W5, W1
01CE8A  780004     MOV W4, W0
01CE8C  07A43E     RCALL TrmHC05_AT
26605:                                         while ((!HvReplyHC05)&&(MyTimeOut));
01CE8E  000000     NOP
01CE90  809615     MOV 0x12C2, W5
01CE92  204004     MOV #0x400, W4
01CE94  628204     AND W5, W4, W4
01CE96  520FE0     SUB W4, #0x0, [W15]
01CE98  3A0003     BRA NZ, 0x1CEA0
01CE9A  8194C4     MOV MyTimeOut, W4
01CE9C  520FE0     SUB W4, #0x0, [W15]
01CE9E  3AFFF8     BRA NZ, 0x1CE90
26606:             
26607:                                         if (RecMassHC05[0]=='O')
01CEA0  232344     MOV #0x3234, W4
01CEA2  784294     MOV.B [W4], W5
01CEA4  B3C4F4     MOV.B #0x4F, W4
01CEA6  52CF84     SUB.B W5, W4, [W15]
01CEA8  3A0004     BRA NZ, 0x1CEB2
26608:                                         {
26609:                                                 SoundNum=10;
01CEAA  2124B5     MOV #0x124B, W5
01CEAC  B3C0A4     MOV.B #0xA, W4
01CEAE  784A84     MOV.B W4, [W5]
01CEB0  370007     BRA 0x1CEC0
26610:                                             }
26611:                                         else
26612:                                         {
26613:                                             //SoundNum=9;
26614:                                             Cnt++;
01CEB2  E80F1E     INC [W14], [W14]
26615:                                                     if (Cnt<30)
01CEB4  78021E     MOV [W14], W4
01CEB6  520FFD     SUB W4, #0x1D, [W15]
01CEB8  36FFE2     BRA LEU, 0x1CE7E
26616:                                             goto oooo;
01CE7E  000000     NOP
26617:                                                     else
26618:                                               SoundNum=9;          
01CEBA  2124B5     MOV #0x124B, W5
01CEBC  B3C094     MOV.B #0x9, W4
01CEBE  784A84     MOV.B W4, [W5]
26619:                                         }
26620:                                         AT_Rec=0;
01CEC0  809614     MOV 0x12C2, W4
01CEC2  A1E004     BCLR W4, #14
01CEC4  889614     MOV W4, 0x12C2
26621:             
26622:             #if !defined VECTOR
26623:             #if defined ISOLATED    
26624:                                         KEY_BT=0;
26625:             #else
26626:                                         KEY_BT=1;
26627:             #endif
26628:             #else
26629:                                         KEY_BT=0;
01CEC6  A9EE64     BCLR LATG, #7
01CEC8  370005     BRA 0x1CED4
26630:             #endif
26631:             
26632:             
26633:             }
01CED4  FA8000     ULNK
01CED6  060000     RETURN
26634:             
26635:             
26636:             
26637:             
26638:             void FillPINResetMass(void)
26639:             {
01CED8  FA0000     LNK #0x0
26640:                         RecBytes[0]=0x6;
01CEDA  229265     MOV #0x2926, W5
01CEDC  B3C064     MOV.B #0x6, W4
01CEDE  784A84     MOV.B W4, [W5]
26641:                         RecBytes[1]=0xfe;
01CEE0  229275     MOV #0x2927, W5
01CEE2  B3CFE4     MOV.B #0xFE, W4
01CEE4  784A84     MOV.B W4, [W5]
26642:                         RecBytes[2]=0x3a;
01CEE6  229285     MOV #0x2928, W5
01CEE8  B3C3A4     MOV.B #0x3A, W4
01CEEA  784A84     MOV.B W4, [W5]
26643:                         RecBytes[3]=0x31;
01CEEC  229295     MOV #0x2929, W5
01CEEE  B3C314     MOV.B #0x31, W4
01CEF0  784A84     MOV.B W4, [W5]
26644:                         RecBytes[4]=0x32;
01CEF2  2292A5     MOV #0x292A, W5
01CEF4  B3C324     MOV.B #0x32, W4
01CEF6  784A84     MOV.B W4, [W5]
26645:                         RecBytes[5]=0x33;
01CEF8  2292B5     MOV #0x292B, W5
01CEFA  B3C334     MOV.B #0x33, W4
01CEFC  784A84     MOV.B W4, [W5]
26646:                         RecBytes[6]=0x34;
01CEFE  2292C5     MOV #0x292C, W5
01CF00  B3C344     MOV.B #0x34, W4
01CF02  784A84     MOV.B W4, [W5]
26647:                         RecBytes[7]=0xf7;
01CF04  2292D5     MOV #0x292D, W5
01CF06  B3CF74     MOV.B #0xF7, W4
01CF08  784A84     MOV.B W4, [W5]
26648:                         RecBytes[8]=0x7a;
01CF0A  2292E5     MOV #0x292E, W5
01CF0C  B3C7A4     MOV.B #0x7A, W4
01CF0E  784A84     MOV.B W4, [W5]
26649:             
26650:                         
26651:                         ResetedPIN=1;
01CF10  8096B4     MOV 0x12D6, W4
01CF12  A03004     BSET W4, #3
01CF14  8896B4     MOV W4, 0x12D6
26652:                         
26653:                         Locked=0;
01CF16  809694     MOV 0x12D2, W4
01CF18  A16004     BCLR W4, #6
01CF1A  889694     MOV W4, 0x12D2
26654:                         HvPacketU4_FL=1;
01CF1C  809624     MOV Flgs2, W4
01CF1E  A01004     BSET W4, #1
01CF20  889624     MOV W4, Flgs2
26655:             }
01CF22  FA8000     ULNK
01CF24  060000     RETURN
26656:             
26657:             
26658:             void PID_OnOff_Func(void)
26659:             {
01CF26  FA0000     LNK #0x0
26660:             
26661:                                     if (SpeedControl)
01CF28  809754     MOV StatFlgs1, W4
01CF2A  620262     AND W4, #0x2, W4
01CF2C  520FE0     SUB W4, #0x0, [W15]
01CF2E  320027     BRA Z, 0x1CF7E
26662:                                     {
26663:                                         if (!SpeedControlPID)
01CF30  8095F5     MOV 0x12BE, W5
01CF32  210004     MOV #0x1000, W4
01CF34  628204     AND W5, W4, W4
01CF36  520FE0     SUB W4, #0x0, [W15]
01CF38  3A0011     BRA NZ, 0x1CF5C
26664:                                         {
26665:                                             SpeedControlPID=1;
01CF3A  8095F4     MOV 0x12BE, W4
01CF3C  A0C004     BSET W4, #12
01CF3E  8895F4     MOV W4, 0x12BE
26666:                                             Spd1UST=Spd1Res;
01CF40  817F14     MOV Spd1Res, W4
01CF42  DEA2CF     ASR W4, #15, W5
01CF44  BE0004     MOV.D W4, W0
01CF46  02257C     CALL ___floatsisf
01CF48  000000     NOP
01CF4A  BE0200     MOV.D W0, W4
01CF4C  897F74     MOV W4, Spd1UST
01CF4E  897F85     MOV W5, 0x2FF0
26667:                                             SpeedControlPIDOffCnt=500;
01CF50  201F44     MOV #0x1F4, W4
01CF52  8887C4     MOV W4, SpeedControlPIDOffCnt
26668:                                             SoundNum=1;
01CF54  2124B5     MOV #0x124B, W5
01CF56  B3C014     MOV.B #0x1, W4
01CF58  784A84     MOV.B W4, [W5]
01CF5A  370030     BRA 0x1CFBC
26669:                                         }
26670:                                         else
26671:                                         {
26672:                                         if (!StartingBTN)
01CF5C  809685     MOV Flgs5, W5
01CF5E  240004     MOV #0x4000, W4
01CF60  628204     AND W5, W4, W4
01CF62  520FE0     SUB W4, #0x0, [W15]
01CF64  3A0008     BRA NZ, 0x1CF76
26673:                                             {
26674:                                             if (SpeedControlPID)
01CF66  8095F5     MOV 0x12BE, W5
01CF68  210004     MOV #0x1000, W4
01CF6A  628204     AND W5, W4, W4
01CF6C  520FE0     SUB W4, #0x0, [W15]
01CF6E  320003     BRA Z, 0x1CF76
26675:                                             SoundNum=10;
01CF70  2124B5     MOV #0x124B, W5
01CF72  B3C0A4     MOV.B #0xA, W4
01CF74  784A84     MOV.B W4, [W5]
26676:                                             }
26677:                                         SpeedControlPID=0;
01CF76  8095F4     MOV 0x12BE, W4
01CF78  A1C004     BCLR W4, #12
01CF7A  8895F4     MOV W4, 0x12BE
01CF7C  37001F     BRA 0x1CFBC
26678:                                         }
26679:                                     }
26680:                                     else
26681:                                     {
26682:                                       if (!PID_On)
01CF7E  809655     MOV 0x12CA, W5
01CF80  202004     MOV #0x200, W4
01CF82  628204     AND W5, W4, W4
01CF84  520FE0     SUB W4, #0x0, [W15]
01CF86  3A0017     BRA NZ, 0x1CFB6
26683:                                         {
26684:                                         if (!Wheeling)
01CF88  809665     MOV Flgs4, W5
01CF8A  208004     MOV #0x800, W4
01CF8C  628204     AND W5, W4, W4
01CF8E  520FE0     SUB W4, #0x0, [W15]
01CF90  3A0015     BRA NZ, 0x1CFBC
26685:                                         {
26686:                                         SoundNum=1;
01CF92  2124B5     MOV #0x124B, W5
01CF94  B3C014     MOV.B #0x1, W4
01CF96  784A84     MOV.B W4, [W5]
26687:                                         Spd1UST=Spd1Res;
01CF98  817F14     MOV Spd1Res, W4
01CF9A  DEA2CF     ASR W4, #15, W5
01CF9C  BE0004     MOV.D W4, W0
01CF9E  02257C     CALL ___floatsisf
01CFA0  000000     NOP
01CFA2  BE0200     MOV.D W0, W4
01CFA4  897F74     MOV W4, Spd1UST
01CFA6  897F85     MOV W5, 0x2FF0
26688:                                         StrtPID_On=1;
01CFA8  809604     MOV Flgs1, W4
01CFAA  A0C004     BSET W4, #12
01CFAC  889604     MOV W4, Flgs1
26689:                                         BtPID_Activated=1;
01CFAE  809684     MOV Flgs5, W4
01CFB0  A0C004     BSET W4, #12
01CFB2  889684     MOV W4, Flgs5
01CFB4  370003     BRA 0x1CFBC
26690:                                         }
26691:                                         }
26692:                                       else
26693:                                         {
26694:                                          PID_On=0; 
01CFB6  809654     MOV 0x12CA, W4
01CFB8  A19004     BCLR W4, #9
01CFBA  889654     MOV W4, 0x12CA
26695:                                         }
26696:                            
26697:                                     }
26698:             }
01CFBC  FA8000     ULNK
01CFBE  060000     RETURN
26699:                                     
26700:             
26701:             
26702:             
26703:             
26704:             /*
26705:             
26706:             void ResetPIN_HC05(void)
26707:             {
26708:                 
26709:                 if (!MustResetPIN)
26710:                     return;
26711:              
26712:                  if (OnTransmittHC05)
26713:                      return;
26714:                     if (HC05_BUSY)
26715:                     return;
26716:             
26717:             
26718:             
26719:                 
26720:                 
26721:                 ResetedPIN=1;
26722:                 
26723:                 
26724:                   HC05_BUSY=1;
26725:                   
26726:                   
26727:             #if defined ISOLATED    
26728:                 KEY_BT=1;
26729:             #else
26730:                 KEY_BT=0;
26731:             #endif
26732:             long int g;
26733:                                         for (g=0;g<150000;g++)
26734:                                             Nop();
26735:                                         HvReplyHC05=0;
26736:                                         MyTimeOut=550;
26737:               
26738:                                         AT_Rec=1;
26739:                                         RecMassHC05[0]=3;
26740:                                         
26741:                                         TrmHC05_AT("AT+PSWD=1234\r\n",sizeof("AT+PSWD=1234\r\n"));//
26742:                                      
26743:                                         while ((!HvReplyHC05)&&(MyTimeOut));
26744:             
26745:                                         if (RecMassHC05[0]=='O')
26746:                                         {
26747:                                              SoundNum=1;
26748:                                             }
26749:                                         else
26750:                                         {
26751:                                             Nop();
26752:                                             Nop();
26753:                                             Nop();
26754:                                         }
26755:                                         AT_Rec=0;
26756:                         MustResetPIN=0;
26757:             
26758:             #if defined ISOLATED    
26759:                                         KEY_BT=0;
26760:             #else
26761:                                         KEY_BT=1;
26762:             #endif
26763:             
26764:             
26765:             
26766:             }
26767:             */
26768:             
26769:             
26770:             
26771:             void MPU60000Init(void)         
26772:             {
01CFC0  FA0000     LNK #0x0
26773:                 unsigned char Bt;
26774:                 if (MPU6000_Initialized)
01CFC2  8096B5     MOV 0x12D6, W5
01CFC4  202004     MOV #0x200, W4
01CFC6  628204     AND W5, W4, W4
01CFC8  520FE0     SUB W4, #0x0, [W15]
01CFCA  3A015B     BRA NZ, 0x1D282
26775:                     return;
01D282  000000     NOP
01D284  370001     BRA 0x1D288
26776:                 
26777:             //    if (!NoBalance)
26778:               //      return;
26779:                 
26780:                 if (!HvToTest)
01CFCC  8096B5     MOV 0x12D6, W5
01CFCE  201004     MOV #0x100, W4
01CFD0  628204     AND W5, W4, W4
01CFD2  520FE0     SUB W4, #0x0, [W15]
01CFD4  320158     BRA Z, 0x1D286
26781:                     return;
01D286  000000     NOP
26782:                 
26783:                 MPU60000_Initializing=1;
01CFD6  8096B4     MOV 0x12D6, W4
01CFD8  A0A004     BSET W4, #10
01CFDA  8896B4     MOV W4, 0x12D6
26784:                 
26785:                     HvToTest=0; 
01CFDC  8096B4     MOV 0x12D6, W4
01CFDE  A18004     BCLR W4, #8
01CFE0  8896B4     MOV W4, 0x12D6
26786:                 
26787:                 
26788:                 
26789:                 
26790:                 
26791:                 
26792:                     Gyro_rxBuf[0]=0;
01CFE2  217ED5     MOV #0x17ED, W5
01CFE4  EB4200     CLR.B W4
01CFE6  784A84     MOV.B W4, [W5]
26793:                     Gyro_rxBuf[1]=0;
01CFE8  217EE5     MOV #0x17EE, W5
01CFEA  EB4200     CLR.B W4
01CFEC  784A84     MOV.B W4, [W5]
26794:                     Gyro_rxBuf[2]=0;
01CFEE  217EF5     MOV #0x17EF, W5
01CFF0  EB4200     CLR.B W4
01CFF2  784A84     MOV.B W4, [W5]
26795:                     Gyro_rxBuf[3]=0;
01CFF4  217F05     MOV #0x17F0, W5
01CFF6  EB4200     CLR.B W4
01CFF8  784A84     MOV.B W4, [W5]
26796:                     Gyro_rxBuf[4]=0;
01CFFA  217F15     MOV #0x17F1, W5
01CFFC  EB4200     CLR.B W4
01CFFE  784A84     MOV.B W4, [W5]
26797:                     
26798:                      
26799:             
26800:             
26801:                    _SELF_TEST_X=readByte(SELF_TEST_X);
01D000  B3C0D0     MOV.B #0xD, W0
01D002  07015C     RCALL readByte
01D004  784200     MOV.B W0, W4
01D006  228EB5     MOV #0x28EB, W5
01D008  784A84     MOV.B W4, [W5]
26802:                     _SELF_TEST_Y=readByte(SELF_TEST_Y);
01D00A  B3C0E0     MOV.B #0xE, W0
01D00C  070157     RCALL readByte
01D00E  784200     MOV.B W0, W4
01D010  228EC5     MOV #0x28EC, W5
01D012  784A84     MOV.B W4, [W5]
26803:                     _SELF_TEST_Z=readByte(SELF_TEST_Z);
01D014  B3C0F0     MOV.B #0xF, W0
01D016  070152     RCALL readByte
01D018  784200     MOV.B W0, W4
01D01A  228ED5     MOV #0x28ED, W5
01D01C  784A84     MOV.B W4, [W5]
26804:                     _SELF_TEST_A=readByte(SELF_TEST_A);
01D01E  B3C100     MOV.B #0x10, W0
01D020  07014D     RCALL readByte
01D022  784200     MOV.B W0, W4
01D024  228EE5     MOV #0x28EE, W5
01D026  784A84     MOV.B W4, [W5]
26805:                     
26806:                     _SMPLRT_DIV=readByte(SMPLRT_DIV);
01D028  B3C190     MOV.B #0x19, W0
01D02A  070148     RCALL readByte
01D02C  784200     MOV.B W0, W4
01D02E  228EF5     MOV #0x28EF, W5
01D030  784A84     MOV.B W4, [W5]
26807:                     _CONFIG=readByte(CONFIG);
01D032  B3C1A0     MOV.B #0x1A, W0
01D034  070143     RCALL readByte
01D036  784200     MOV.B W0, W4
01D038  228F05     MOV #0x28F0, W5
01D03A  784A84     MOV.B W4, [W5]
26808:                     _GYRO_CONFIG=readByte(GYRO_CONFIG);
01D03C  B3C1B0     MOV.B #0x1B, W0
01D03E  07013E     RCALL readByte
01D040  784200     MOV.B W0, W4
01D042  228F15     MOV #0x28F1, W5
01D044  784A84     MOV.B W4, [W5]
26809:                     _ACCEL_CONFIG=readByte(ACCEL_CONFIG);
01D046  B3C1C0     MOV.B #0x1C, W0
01D048  070139     RCALL readByte
01D04A  784200     MOV.B W0, W4
01D04C  228F25     MOV #0x28F2, W5
01D04E  784A84     MOV.B W4, [W5]
26810:                     _FIFO_EN=readByte(FIFO_EN);
01D050  B3C230     MOV.B #0x23, W0
01D052  070134     RCALL readByte
01D054  784200     MOV.B W0, W4
01D056  228F35     MOV #0x28F3, W5
01D058  784A84     MOV.B W4, [W5]
26811:                     _I2C_MST_CTRL=readByte(I2C_MST_CTRL);
01D05A  B3C240     MOV.B #0x24, W0
01D05C  07012F     RCALL readByte
01D05E  784200     MOV.B W0, W4
01D060  228F45     MOV #0x28F4, W5
01D062  784A84     MOV.B W4, [W5]
26812:             
26813:             
26814:                     _I2C_SLV0_ADDR=readByte(I2C_SLV0_ADDR);
01D064  B3C250     MOV.B #0x25, W0
01D066  07012A     RCALL readByte
01D068  784200     MOV.B W0, W4
01D06A  228F55     MOV #0x28F5, W5
01D06C  784A84     MOV.B W4, [W5]
26815:                     _I2C_SLV0_REG=readByte(I2C_SLV0_REG);
01D06E  B3C260     MOV.B #0x26, W0
01D070  070125     RCALL readByte
01D072  784200     MOV.B W0, W4
01D074  228F65     MOV #0x28F6, W5
01D076  784A84     MOV.B W4, [W5]
26816:                     _I2C_SLV0_CTRL=readByte(I2C_SLV0_CTRL);
01D078  B3C270     MOV.B #0x27, W0
01D07A  070120     RCALL readByte
01D07C  784200     MOV.B W0, W4
01D07E  228F75     MOV #0x28F7, W5
01D080  784A84     MOV.B W4, [W5]
26817:                     _I2C_SLV1_ADDR=readByte(I2C_SLV1_ADDR);
01D082  B3C280     MOV.B #0x28, W0
01D084  07011B     RCALL readByte
01D086  784200     MOV.B W0, W4
01D088  228F85     MOV #0x28F8, W5
01D08A  784A84     MOV.B W4, [W5]
26818:                     _I2C_SLV1_REG=readByte(I2C_SLV1_REG);
01D08C  B3C290     MOV.B #0x29, W0
01D08E  070116     RCALL readByte
01D090  784200     MOV.B W0, W4
01D092  228F95     MOV #0x28F9, W5
01D094  784A84     MOV.B W4, [W5]
26819:                     _I2C_SLV1_CTRL=readByte(I2C_SLV1_CTRL);
01D096  B3C2A0     MOV.B #0x2A, W0
01D098  070111     RCALL readByte
01D09A  784200     MOV.B W0, W4
01D09C  228FA5     MOV #0x28FA, W5
01D09E  784A84     MOV.B W4, [W5]
26820:                     _I2C_SLV2_ADDR=readByte(I2C_SLV2_ADDR);
01D0A0  B3C2B0     MOV.B #0x2B, W0
01D0A2  07010C     RCALL readByte
01D0A4  784200     MOV.B W0, W4
01D0A6  228FB5     MOV #0x28FB, W5
01D0A8  784A84     MOV.B W4, [W5]
26821:             
26822:             
26823:                     _I2C_SLV2_REG=readByte(I2C_SLV2_REG);
01D0AA  B3C2C0     MOV.B #0x2C, W0
01D0AC  070107     RCALL readByte
01D0AE  784200     MOV.B W0, W4
01D0B0  228FC5     MOV #0x28FC, W5
01D0B2  784A84     MOV.B W4, [W5]
26824:                     _I2C_SLV2_CTRL=readByte(I2C_SLV2_CTRL);
01D0B4  B3C2D0     MOV.B #0x2D, W0
01D0B6  070102     RCALL readByte
01D0B8  784200     MOV.B W0, W4
01D0BA  228FD5     MOV #0x28FD, W5
01D0BC  784A84     MOV.B W4, [W5]
26825:                     _I2C_SLV3_ADDR=readByte(I2C_SLV3_ADDR);
01D0BE  B3C2E0     MOV.B #0x2E, W0
01D0C0  0700FD     RCALL readByte
01D0C2  784200     MOV.B W0, W4
01D0C4  228FE5     MOV #0x28FE, W5
01D0C6  784A84     MOV.B W4, [W5]
26826:                     _I2C_SLV3_REG=readByte(I2C_SLV3_REG);
01D0C8  B3C2F0     MOV.B #0x2F, W0
01D0CA  0700F8     RCALL readByte
01D0CC  784200     MOV.B W0, W4
01D0CE  228FF5     MOV #0x28FF, W5
01D0D0  784A84     MOV.B W4, [W5]
26827:                     _I2C_SLV3_CTRL=readByte(I2C_SLV3_CTRL);
01D0D2  B3C300     MOV.B #0x30, W0
01D0D4  0700F3     RCALL readByte
01D0D6  784200     MOV.B W0, W4
01D0D8  229005     MOV #0x2900, W5
01D0DA  784A84     MOV.B W4, [W5]
26828:                     _I2C_SLV4_ADDR=readByte(I2C_SLV4_ADDR);
01D0DC  B3C310     MOV.B #0x31, W0
01D0DE  0700EE     RCALL readByte
01D0E0  784200     MOV.B W0, W4
01D0E2  229015     MOV #0x2901, W5
01D0E4  784A84     MOV.B W4, [W5]
26829:                     _I2C_SLV4_REG=readByte(I2C_SLV4_REG);
01D0E6  B3C320     MOV.B #0x32, W0
01D0E8  0700E9     RCALL readByte
01D0EA  784200     MOV.B W0, W4
01D0EC  229025     MOV #0x2902, W5
01D0EE  784A84     MOV.B W4, [W5]
26830:                     _I2C_SLV4_DO=readByte(I2C_SLV4_DO);
01D0F0  B3C330     MOV.B #0x33, W0
01D0F2  0700E4     RCALL readByte
01D0F4  784200     MOV.B W0, W4
01D0F6  229035     MOV #0x2903, W5
01D0F8  784A84     MOV.B W4, [W5]
26831:                     _I2C_SLV4_CTRL=readByte(I2C_SLV4_CTRL);
01D0FA  B3C340     MOV.B #0x34, W0
01D0FC  0700DF     RCALL readByte
01D0FE  784200     MOV.B W0, W4
01D100  229045     MOV #0x2904, W5
01D102  784A84     MOV.B W4, [W5]
26832:                     _I2C_SLV4_DI=readByte(I2C_SLV4_DI);
01D104  B3C350     MOV.B #0x35, W0
01D106  0700DA     RCALL readByte
01D108  784200     MOV.B W0, W4
01D10A  229055     MOV #0x2905, W5
01D10C  784A84     MOV.B W4, [W5]
26833:                     _I2C_MST_STATUS=readByte(I2C_MST_STATUS);
01D10E  B3C360     MOV.B #0x36, W0
01D110  0700D5     RCALL readByte
01D112  784200     MOV.B W0, W4
01D114  229065     MOV #0x2906, W5
01D116  784A84     MOV.B W4, [W5]
26834:                     _INT_PIN_CFG=readByte(INT_PIN_CFG);
01D118  B3C370     MOV.B #0x37, W0
01D11A  0700D0     RCALL readByte
01D11C  784200     MOV.B W0, W4
01D11E  229075     MOV #0x2907, W5
01D120  784A84     MOV.B W4, [W5]
26835:                     _INT_ENABLE=readByte(INT_ENABLE);
01D122  B3C380     MOV.B #0x38, W0
01D124  0700CB     RCALL readByte
01D126  784200     MOV.B W0, W4
01D128  229085     MOV #0x2908, W5
01D12A  784A84     MOV.B W4, [W5]
26836:                     _INT_STATUS=readByte(INT_STATUS);
01D12C  B3C3A0     MOV.B #0x3A, W0
01D12E  0700C6     RCALL readByte
01D130  784200     MOV.B W0, W4
01D132  229095     MOV #0x2909, W5
01D134  784A84     MOV.B W4, [W5]
26837:                     _ACCEL_XOUT_H=readByte(ACCEL_XOUT_H);
01D136  B3C3B0     MOV.B #0x3B, W0
01D138  0700C1     RCALL readByte
01D13A  784200     MOV.B W0, W4
01D13C  2290A5     MOV #0x290A, W5
01D13E  784A84     MOV.B W4, [W5]
26838:                     _ACCEL_XOUT_L=readByte(ACCEL_XOUT_L);
01D140  B3C3C0     MOV.B #0x3C, W0
01D142  0700BC     RCALL readByte
01D144  784200     MOV.B W0, W4
01D146  2290B5     MOV #0x290B, W5
01D148  784A84     MOV.B W4, [W5]
26839:                     _ACCEL_YOUT_H=readByte(ACCEL_YOUT_H);
01D14A  B3C3D0     MOV.B #0x3D, W0
01D14C  0700B7     RCALL readByte
01D14E  784200     MOV.B W0, W4
01D150  2290C5     MOV #0x290C, W5
01D152  784A84     MOV.B W4, [W5]
26840:                     _ACCEL_YOUT_L=readByte(ACCEL_YOUT_L);
01D154  B3C3E0     MOV.B #0x3E, W0
01D156  0700B2     RCALL readByte
01D158  784200     MOV.B W0, W4
01D15A  2290D5     MOV #0x290D, W5
01D15C  784A84     MOV.B W4, [W5]
26841:                     _ACCEL_ZOUT_H=readByte(ACCEL_ZOUT_H);
01D15E  B3C3F0     MOV.B #0x3F, W0
01D160  0700AD     RCALL readByte
01D162  784200     MOV.B W0, W4
01D164  2290E5     MOV #0x290E, W5
01D166  784A84     MOV.B W4, [W5]
26842:                     _ACCEL_ZOUT_L=readByte(ACCEL_ZOUT_L);
01D168  B3C400     MOV.B #0x40, W0
01D16A  0700A8     RCALL readByte
01D16C  784200     MOV.B W0, W4
01D16E  2290F5     MOV #0x290F, W5
01D170  784A84     MOV.B W4, [W5]
26843:                     _TEMP_OUT_H=readByte(TEMP_OUT_H);
01D172  B3C410     MOV.B #0x41, W0
01D174  0700A3     RCALL readByte
01D176  784200     MOV.B W0, W4
01D178  229105     MOV #0x2910, W5
01D17A  784A84     MOV.B W4, [W5]
26844:                     _TEMP_OUT_L=readByte(TEMP_OUT_L);
01D17C  B3C420     MOV.B #0x42, W0
01D17E  07009E     RCALL readByte
01D180  784200     MOV.B W0, W4
01D182  229115     MOV #0x2911, W5
01D184  784A84     MOV.B W4, [W5]
26845:                     _GYRO_XOUT_H=readByte(GYRO_XOUT_H);
01D186  B3C430     MOV.B #0x43, W0
01D188  070099     RCALL readByte
01D18A  784200     MOV.B W0, W4
01D18C  229125     MOV #0x2912, W5
01D18E  784A84     MOV.B W4, [W5]
26846:                     _GYRO_XOUT_L=readByte(GYRO_XOUT_L);
01D190  B3C440     MOV.B #0x44, W0
01D192  070094     RCALL readByte
01D194  784200     MOV.B W0, W4
01D196  229135     MOV #0x2913, W5
01D198  784A84     MOV.B W4, [W5]
26847:                     _GYRO_YOUT_H=readByte(GYRO_YOUT_H);
01D19A  B3C450     MOV.B #0x45, W0
01D19C  07008F     RCALL readByte
01D19E  784200     MOV.B W0, W4
01D1A0  229145     MOV #0x2914, W5
01D1A2  784A84     MOV.B W4, [W5]
26848:             
26849:             
26850:                     _GYRO_YOUT_L=readByte(GYRO_YOUT_L);
01D1A4  B3C460     MOV.B #0x46, W0
01D1A6  07008A     RCALL readByte
01D1A8  784200     MOV.B W0, W4
01D1AA  229155     MOV #0x2915, W5
01D1AC  784A84     MOV.B W4, [W5]
26851:                     _GYRO_ZOUT_H=readByte(GYRO_ZOUT_H);
01D1AE  B3C470     MOV.B #0x47, W0
01D1B0  070085     RCALL readByte
01D1B2  784200     MOV.B W0, W4
01D1B4  229165     MOV #0x2916, W5
01D1B6  784A84     MOV.B W4, [W5]
26852:                     _GYRO_ZOUT_L=readByte(GYRO_ZOUT_L);
01D1B8  B3C480     MOV.B #0x48, W0
01D1BA  070080     RCALL readByte
01D1BC  784200     MOV.B W0, W4
01D1BE  229175     MOV #0x2917, W5
01D1C0  784A84     MOV.B W4, [W5]
26853:                     _EXT_SENS_DATA_00=readByte(EXT_SENS_DATA_00);
01D1C2  B3C490     MOV.B #0x49, W0
01D1C4  07007B     RCALL readByte
01D1C6  784200     MOV.B W0, W4
01D1C8  229185     MOV #0x2918, W5
01D1CA  784A84     MOV.B W4, [W5]
26854:                     _I2C_SLV0_DO=readByte(I2C_SLV0_DO);
01D1CC  B3C630     MOV.B #0x63, W0
01D1CE  070076     RCALL readByte
01D1D0  784200     MOV.B W0, W4
01D1D2  229195     MOV #0x2919, W5
01D1D4  784A84     MOV.B W4, [W5]
26855:                     _I2C_SLV1_DO=readByte(I2C_SLV1_DO);
01D1D6  B3C640     MOV.B #0x64, W0
01D1D8  070071     RCALL readByte
01D1DA  784200     MOV.B W0, W4
01D1DC  2291A5     MOV #0x291A, W5
01D1DE  784A84     MOV.B W4, [W5]
26856:                     _I2C_SLV2_DO=readByte(I2C_SLV2_DO);
01D1E0  B3C650     MOV.B #0x65, W0
01D1E2  07006C     RCALL readByte
01D1E4  784200     MOV.B W0, W4
01D1E6  2291B5     MOV #0x291B, W5
01D1E8  784A84     MOV.B W4, [W5]
26857:                     _I2C_SLV3_DO=readByte(I2C_SLV3_DO);
01D1EA  B3C660     MOV.B #0x66, W0
01D1EC  070067     RCALL readByte
01D1EE  784200     MOV.B W0, W4
01D1F0  2291C5     MOV #0x291C, W5
01D1F2  784A84     MOV.B W4, [W5]
26858:                     _I2C_MST_DELAY_CTRL=readByte(I2C_MST_DELAY_CTRL);
01D1F4  B3C670     MOV.B #0x67, W0
01D1F6  070062     RCALL readByte
01D1F8  784200     MOV.B W0, W4
01D1FA  2291D5     MOV #0x291D, W5
01D1FC  784A84     MOV.B W4, [W5]
26859:                     _SIGNAL_PATH_RESET=readByte(SIGNAL_PATH_RESET);
01D1FE  B3C680     MOV.B #0x68, W0
01D200  07005D     RCALL readByte
01D202  784200     MOV.B W0, W4
01D204  2291E5     MOV #0x291E, W5
01D206  784A84     MOV.B W4, [W5]
26860:                     _USER_CTRL=readByte(USER_CTRL);
01D208  B3C6A0     MOV.B #0x6A, W0
01D20A  070058     RCALL readByte
01D20C  784200     MOV.B W0, W4
01D20E  2291F5     MOV #0x291F, W5
01D210  784A84     MOV.B W4, [W5]
26861:                     _PWR_MGMT_1=readByte(PWR_MGMT_1);
01D212  B3C6B0     MOV.B #0x6B, W0
01D214  070053     RCALL readByte
01D216  784200     MOV.B W0, W4
01D218  229205     MOV #0x2920, W5
01D21A  784A84     MOV.B W4, [W5]
26862:                     _PWR_MGMT_2=readByte(PWR_MGMT_2);
01D21C  B3C6C0     MOV.B #0x6C, W0
01D21E  07004E     RCALL readByte
01D220  784200     MOV.B W0, W4
01D222  229215     MOV #0x2921, W5
01D224  784A84     MOV.B W4, [W5]
26863:             
26864:             
26865:                     _FIFO_COUNTH=readByte(FIFO_COUNTH);
01D226  B3C720     MOV.B #0x72, W0
01D228  070049     RCALL readByte
01D22A  784200     MOV.B W0, W4
01D22C  229225     MOV #0x2922, W5
01D22E  784A84     MOV.B W4, [W5]
26866:                     _FIFO_COUNTL=readByte(FIFO_COUNTL);
01D230  B3C730     MOV.B #0x73, W0
01D232  070044     RCALL readByte
01D234  784200     MOV.B W0, W4
01D236  229235     MOV #0x2923, W5
01D238  784A84     MOV.B W4, [W5]
26867:                     _FIFO_R_W=readByte(FIFO_R_W);
01D23A  B3C740     MOV.B #0x74, W0
01D23C  07003F     RCALL readByte
01D23E  784200     MOV.B W0, W4
01D240  229245     MOV #0x2924, W5
01D242  784A84     MOV.B W4, [W5]
26868:                     _WHO_AM_I=readByte(WHO_AM_I);
01D244  B3C750     MOV.B #0x75, W0
01D246  07003A     RCALL readByte
01D248  784200     MOV.B W0, W4
01D24A  229255     MOV #0x2925, W5
01D24C  784A84     MOV.B W4, [W5]
26869:                     
26870:                     
26871:                     Nop();
01D24E  000000     NOP
26872:                     
26873:                     
26874:                 writeByte(ACCEL_CONFIG, 0x0); 
01D250  EB4080     CLR.B W1
01D252  B3C1C0     MOV.B #0x1C, W0
01D254  07001B     RCALL writeByte
26875:                 writeByte(GYRO_CONFIG,  0x0); 
01D256  EB4080     CLR.B W1
01D258  B3C1B0     MOV.B #0x1B, W0
01D25A  070018     RCALL writeByte
26876:                
26877:                 writeByte(PWR_MGMT_1, 0x1);         
01D25C  B3C011     MOV.B #0x1, W1
01D25E  B3C6B0     MOV.B #0x6B, W0
01D260  070015     RCALL writeByte
26878:                 writeByte(FIFO_EN, 0x0);         
01D262  EB4080     CLR.B W1
01D264  B3C230     MOV.B #0x23, W0
01D266  070012     RCALL writeByte
26879:                 writeByte(CONFIG,  0x0); 
01D268  EB4080     CLR.B W1
01D26A  B3C1A0     MOV.B #0x1A, W0
01D26C  07000F     RCALL writeByte
26880:             
26881:                 writeByte(USER_CTRL,  0x10); 
01D26E  B3C101     MOV.B #0x10, W1
01D270  B3C6A0     MOV.B #0x6A, W0
01D272  07000C     RCALL writeByte
26882:                
26883:                              
26884:               
26885:                
26886:                 
26887:                   //rawData[0] = readByte(SELF_TEST_X); 
26888:             
26889:                
26890:                
26891:                MPU6000_Initialized=1;
01D274  8096B4     MOV 0x12D6, W4
01D276  A09004     BSET W4, #9
01D278  8896B4     MOV W4, 0x12D6
26892:                
26893:                    MPU60000_Initializing=0;
01D27A  8096B4     MOV 0x12D6, W4
01D27C  A1A004     BCLR W4, #10
01D27E  8896B4     MOV W4, 0x12D6
01D280  370003     BRA 0x1D288
26894:                      
26895:                      
26896:                      
26897:             }
01D288  FA8000     ULNK
01D28A  060000     RETURN
26898:             
26899:             
26900:             void writeByte(unsigned char ADDR, unsigned char Data)
26901:             {
01D28C  FA0002     LNK #0x2
01D28E  784F00     MOV.B W0, [W14]
01D290  984711     MOV.B W1, [W14+1]
26902:                 HvGyroData=0;
01D292  8095E4     MOV Flgs, W4
01D294  A1E004     BCLR W4, #14
01D296  8895E4     MOV W4, Flgs
26903:                 Gyro_txBuf[0] = ADDR;
01D298  217CF4     MOV #0x17CF, W4
01D29A  784A1E     MOV.B [W14], [W4]
26904:                 Gyro_txBuf[1] = Data;
01D29C  217D04     MOV #0x17D0, W4
01D29E  90429E     MOV.B [W14+1], W5
01D2A0  784A05     MOV.B W5, [W4]
26905:                 TxRxSPI_GYRO(2);
01D2A2  200020     MOV #0x2, W0
01D2A4  078081     RCALL TxRxSPI_GYRO
26906:                 while (!HvGyroData);
01D2A6  000000     NOP
01D2A8  8095E5     MOV Flgs, W5
01D2AA  240004     MOV #0x4000, W4
01D2AC  628204     AND W5, W4, W4
01D2AE  520FE0     SUB W4, #0x0, [W15]
01D2B0  32FFFB     BRA Z, 0x1D2A8
26907:                      HvGyroData=0;
01D2B2  8095E4     MOV Flgs, W4
01D2B4  A1E004     BCLR W4, #14
01D2B6  8895E4     MOV W4, Flgs
26908:             }
01D2B8  FA8000     ULNK
01D2BA  060000     RETURN
26909:             
26910:             
26911:             unsigned char readByte(unsigned char ADDR)
26912:             {
01D2BC  FA0002     LNK #0x2
01D2BE  784F00     MOV.B W0, [W14]
26913:                 HvGyroData=0;
01D2C0  8095E4     MOV Flgs, W4
01D2C2  A1E004     BCLR W4, #14
01D2C4  8895E4     MOV W4, Flgs
26914:                 Gyro_txBuf[0] = ADDR|0x80;
01D2C6  B3C804     MOV.B #0x80, W4
01D2C8  72421E     IOR.B W4, [W14], W4
01D2CA  217CF5     MOV #0x17CF, W5
01D2CC  784A84     MOV.B W4, [W5]
26915:                 TxRxSPI_GYRO(2);
01D2CE  200020     MOV #0x2, W0
01D2D0  07806B     RCALL TxRxSPI_GYRO
26916:                 while (!HvGyroData);
01D2D2  000000     NOP
01D2D4  8095E5     MOV Flgs, W5
01D2D6  240004     MOV #0x4000, W4
01D2D8  628204     AND W5, W4, W4
01D2DA  520FE0     SUB W4, #0x0, [W15]
01D2DC  32FFFB     BRA Z, 0x1D2D4
26917:                      HvGyroData=0;
01D2DE  8095E4     MOV Flgs, W4
01D2E0  A1E004     BCLR W4, #14
01D2E2  8895E4     MOV W4, Flgs
26918:                      return Gyro_rxBuf[1];
01D2E4  217EE4     MOV #0x17EE, W4
01D2E6  784214     MOV.B [W4], W4
26919:                      
26920:             }
01D2E8  784004     MOV.B W4, W0
01D2EA  FA8000     ULNK
01D2EC  060000     RETURN
26921:             
26922:             
26923:             
26924:             
26925:             
26926:             
26927:             
26928:             
26929:             
26930:             
26931:             
26932:             
26933:             
26934:             
26935:             
26936:             void SetPWM_ChagerViaMotor()
26937:             {
01D2EE  FA0004     LNK #0x4
26938:             int PWM_ChagerTmp=PWM_Chager;
01D2F0  81F5D4     MOV PWM_Chager, W4
01D2F2  780F04     MOV W4, [W14]
26939:             int PWM;
26940:             
26941:             
26942:             
26943:                 if (CURRENT_PROTECTION)
01D2F4  809755     MOV StatFlgs1, W5
01D2F6  220004     MOV #0x2000, W4
01D2F8  628204     AND W5, W4, W4
01D2FA  520FE0     SUB W4, #0x0, [W15]
01D2FC  32000F     BRA Z, 0x1D31C
26944:                       {
26945:                       if (PWM_ChagerTmp>(unsigned int)PI_Curr1Res)
01D2FE  78031E     MOV [W14], W6
01D300  81F404     MOV PI_Curr1Res, W4
01D302  81F415     MOV 0x3E82, W5
01D304  780204     MOV W4, W4
01D306  530F84     SUB W6, W4, [W15]
01D308  360007     BRA LEU, 0x1D318
26946:                     PWM_ChagerTmp=PWM_ChagerTmp-(unsigned int)PI_Curr1Res;
01D30A  78031E     MOV [W14], W6
01D30C  81F404     MOV PI_Curr1Res, W4
01D30E  81F415     MOV 0x3E82, W5
01D310  780204     MOV W4, W4
01D312  530204     SUB W6, W4, W4
01D314  780F04     MOV W4, [W14]
01D316  370002     BRA 0x1D31C
26947:                       else
26948:                           PWM_ChagerTmp=0;
01D318  EB0200     CLR W4
01D31A  780F04     MOV W4, [W14]
26949:                       }
26950:             
26951:             
26952:             
26953:             
26954:             PWM=MAX_PWM-PWM_ChagerTmp;
01D31C  8212F4     MOV MAX_PWM, W4
01D31E  52021E     SUB W4, [W14], W4
01D320  980714     MOV W4, [W14+2]
26955:             
26956:             //int PWM=MAX_PWM-DIRPWM1;    
26957:             
26958:             
26959:                 PWM1_A_H=0;
01D322  A92E44     BCLR LATE, #1
26960:                 PWM1_A_L=0;
01D324  A90E44     BCLR LATE, #0
26961:                 PWM1_B_H=0;
01D326  A96E44     BCLR LATE, #3
26962:                 PWM1_B_L=0;
01D328  A94E44     BCLR LATE, #2
26963:                 PWM1_C_H=0;
01D32A  A9AE44     BCLR LATE, #5
26964:                 PWM1_C_L=0;
01D32C  A98E44     BCLR LATE, #4
26965:             
26966:             #if !defined CHAGER_VIA_MOTOR_VECTOR_M2
26967:                 PEN1_A_H=0;
01D32E  A9EC23     BCLR 0xC23, #7
26968:                 PEN1_A_L=1;
01D330  A8CC23     BSET 0xC23, #6
26969:                 PEN1_B_H=0;
01D332  A9EC43     BCLR 0xC43, #7
26970:                 PEN1_B_L=0;
01D334  A9CC43     BCLR 0xC43, #6
26971:                 PEN1_C_H=0;
01D336  A9EC63     BCLR 0xC63, #7
26972:                 PEN1_C_L=0;
01D338  A9CC63     BCLR 0xC63, #6
26973:             #else
26974:                 PEN1_A_H=0;
26975:                 PEN1_A_L=0;
26976:                 PEN1_B_H=0;
26977:                 PEN1_B_L=0;
26978:                 PEN1_C_H=0;
26979:                 PEN1_C_L=1;
26980:             #endif
26981:                 
26982:                 //if (DIRPWM1<DEADTIME_GLUK)
26983:                 if (PWM_Chager<DEADTIME_GLUK)
01D33A  81F5D4     MOV PWM_Chager, W4
01D33C  520FE0     SUB W4, #0x0, [W15]
01D33E  3D0012     BRA GE, 0x1D364
26984:                 {
26985:                     DTR1 = DTR2 = DTR3=DEADTIME*2;     //DTRx Registers are ignored in this mode
01D340  200C84     MOV #0xC8, W4
01D342  886354     MOV W4, DTR3
01D344  806354     MOV DTR3, W4
01D346  886254     MOV W4, DTR2
01D348  806254     MOV DTR2, W4
01D34A  886154     MOV W4, DTR1
26986:                     ALTDTR1 = ALTDTR2 = ALTDTR3=DEADTIME*2;
01D34C  200C84     MOV #0xC8, W4
01D34E  886364     MOV W4, ALTDTR3
01D350  806364     MOV ALTDTR3, W4
01D352  886264     MOV W4, ALTDTR2
01D354  806264     MOV ALTDTR2, W4
01D356  886164     MOV W4, ALTDTR1
26987:                     PWM=PWM+DEADTIME+Khard;
01D358  90029E     MOV [W14+2], W5
01D35A  808844     MOV Khard, W4
01D35C  428204     ADD W5, W4, W4
01D35E  B00644     ADD #0x64, W4
01D360  980714     MOV W4, [W14+2]
01D362  370011     BRA 0x1D386
26988:                 }    
26989:                 else
26990:                 {
26991:                     DTR1 = DTR2 = DTR3=DEADTIME;     //DTRx Registers are ignored in this mode
01D364  200644     MOV #0x64, W4
01D366  886354     MOV W4, DTR3
01D368  806354     MOV DTR3, W4
01D36A  886254     MOV W4, DTR2
01D36C  806254     MOV DTR2, W4
01D36E  886154     MOV W4, DTR1
26992:                     ALTDTR1 = ALTDTR2 = ALTDTR3=DEADTIME;
01D370  200644     MOV #0x64, W4
01D372  886364     MOV W4, ALTDTR3
01D374  806364     MOV ALTDTR3, W4
01D376  886264     MOV W4, ALTDTR2
01D378  806264     MOV ALTDTR2, W4
01D37A  886164     MOV W4, ALTDTR1
26993:                         PWM=PWM+DEADTIME_2+Khard;
01D37C  90029E     MOV [W14+2], W5
01D37E  808844     MOV Khard, W4
01D380  428204     ADD W5, W4, W4
01D382  B00324     ADD #0x32, W4
01D384  980714     MOV W4, [W14+2]
26994:             
26995:                 }
26996:                 
26997:                 
26998:                 
26999:             #if !defined CHAGER_VIA_MOTOR_VECTOR_M2    
27000:                 PDC1 = PWM;
01D386  90021E     MOV [W14+2], W4
01D388  886134     MOV W4, PDC1
27001:                 PDC2 = 0;
01D38A  EB0200     CLR W4
01D38C  886234     MOV W4, PDC2
27002:                 PDC3 = 0;
01D38E  EB0200     CLR W4
01D390  886334     MOV W4, PDC3
27003:             #else
27004:                 PDC1 = 0;
27005:                 PDC2 = 0;
27006:                 PDC3 = PWM;
27007:             #endif
27008:                 
27009:                 
27010:                 PWM1Show=PWM;
01D392  90021E     MOV [W14+2], W4
01D394  8892A4     MOV W4, PWM1Show
27011:                 
27012:                 
27013:             }    
01D396  FA8000     ULNK
01D398  060000     RETURN
27014:                 
27015:             
27016:             #if defined CHAGER_VIA_MOTOR_VECTOR_M2
27017:             
27018:             void PI_Chager(void)
27019:             {
27020:                 float ICurr=I_Curr,PWM_Temp=MAX_PWM;
27021:                 float IU=I_U;
27022:                 
27023:                 if (!ChagerViaMotor)
27024:                     return;
27025:             
27026:                 if (!ChargingComplete)
27027:                 {
27028:                 IU=IU/100;
27029:             
27030:                 
27031:                 if (!CV)
27032:                 {
27033:                     CurrUstChager=ChagerCurr;
27034:                 }
27035:                 else
27036:                 {
27037:                 EUChager=UBatHiMem-UBtFl;
27038:                 
27039:                 
27040:                 
27041:                 EChagerUSumm=EChagerUSumm+EUChager;
27042:                 EiUChager=EChagerUSumm*IU;
27043:                 
27044:                 if (EiUChager>ChagerCurr)
27045:                 {
27046:                     EiUChager=ChagerCurr;
27047:                     EChagerUSumm=ChagerCurr/IU;
27048:                 }
27049:                 
27050:                 if (EiUChager<0)
27051:                     EiUChager=0;
27052:                 
27053:                 CurrUstChager=EiUChager;
27054:                 if (CurrUstChager<(((float)ChagerCurr)*0.1))
27055:                     ChargingComplete=1;
27056:                     
27057:             
27058:                 }
27059:                     
27060:                     
27061:                 ICurr=ICurr/10;
27062:                 
27063:                 if (NoChager)
27064:                 PWM_Temp=PWM_Temp*0.3;
27065:                 else
27066:                 PWM_Temp=PWM_Temp*0.7;
27067:                 
27068:                 
27069:                 
27070:                 DS=0;
27071:                         
27072:                         
27073:                 ECurrChager=Curr1Show+CurrUstChager;
27074:                 EpCurrChager=ECurrChager*P_Curr;
27075:                 
27076:                 
27077:                 EChagerCurrSumm=EChagerCurrSumm+ECurrChager;
27078:                 EiCurrChager=EChagerCurrSumm*ICurr;
27079:                 
27080:                 if (EiCurrChager>PWM_Temp)
27081:                 {
27082:                     if ((Curr1Show>-5)&&(!CV))
27083:                         NoChager=1;
27084:                     else
27085:                         NoChager=0;
27086:                     EChagerCurrSumm=PWM_Temp/ICurr;
27087:                 }
27088:                 if (EiCurrChager<0)
27089:                     EChagerCurrSumm=0;//-PWM_Temp/ICurr;
27090:             
27091:             
27092:             
27093:             
27094:                 
27095:                 PWM_Chager=EpCurrChager+EiCurrChager;
27096:                 
27097:                 if (PWM_Chager>PWM_Temp)
27098:                     PWM_Chager=PWM_Temp;
27099:                 if (PWM_Chager<-PWM_Temp)
27100:                     PWM_Chager=-PWM_Temp;
27101:             
27102:             
27103:             
27104:                     
27105:                     
27106:                     
27107:             
27108:             
27109:             if (UBtFl>=UBatHiMem)
27110:             {
27111:                 if (!CV)
27112:                 {
27113:                     EChagerUSumm=CurrUstChager/IU;
27114:                     CV=1;
27115:                 }
27116:             }
27117:                 }
27118:                 else
27119:                 {
27120:                     PWM_Chager=0;
27121:                 }
27122:             
27123:                 
27124:             }
27125:             #else
27126:             
27127:             void PI_Chager(void)
27128:             {
01D39A  FA000C     LNK #0xC
01D39C  781F88     MOV W8, [W15++]
27129:                 float ICurr=I_Curr,PWM_Temp=MAX_PWM;
01D39E  80B534     MOV I_Curr, W4
01D3A0  80B545     MOV 0x16A8, W5
01D3A2  980724     MOV W4, [W14+4]
01D3A4  980735     MOV W5, [W14+6]
01D3A6  8212F4     MOV MAX_PWM, W4
01D3A8  DEA2CF     ASR W4, #15, W5
01D3AA  BE0004     MOV.D W4, W0
01D3AC  02257C     CALL ___floatsisf
01D3AE  000000     NOP
01D3B0  BE0200     MOV.D W0, W4
01D3B2  BE8F04     MOV.D W4, [W14]
27130:                 float IU=I_U;
01D3B4  216A14     MOV #0x16A1, W4
01D3B6  784214     MOV.B [W4], W4
01D3B8  FB8204     ZE W4, W4
01D3BA  200005     MOV #0x0, W5
01D3BC  BE0004     MOV.D W4, W0
01D3BE  022582     CALL ___floatunsisf
01D3C0  000000     NOP
01D3C2  BE0200     MOV.D W0, W4
01D3C4  980744     MOV W4, [W14+8]
01D3C6  980755     MOV W5, [W14+10]
27131:                 
27132:                 if (!ChagerViaMotor)
01D3C8  809604     MOV Flgs1, W4
01D3CA  620262     AND W4, #0x2, W4
01D3CC  520FE0     SUB W4, #0x0, [W15]
01D3CE  320198     BRA Z, 0x1D700
27133:                     return;
01D700  000000     NOP
27134:             
27135:                 if (!ChargingComplete)
01D3D0  809684     MOV Flgs5, W4
01D3D2  620268     AND W4, #0x8, W4
01D3D4  520FE0     SUB W4, #0x0, [W15]
01D3D6  3A0191     BRA NZ, 0x1D6FA
27136:                 {
27137:                 IU=IU/100;
01D3D8  200002     MOV #0x0, W2
01D3DA  242C83     MOV #0x42C8, W3
01D3DC  90004E     MOV [W14+8], W0
01D3DE  9000DE     MOV [W14+10], W1
01D3E0  02245A     CALL ___divsf3
01D3E2  000000     NOP
01D3E4  BE0200     MOV.D W0, W4
01D3E6  980744     MOV W4, [W14+8]
01D3E8  980755     MOV W5, [W14+10]
27138:             
27139:                 
27140:                 if (!CV)
01D3EA  809685     MOV Flgs5, W5
01D3EC  201004     MOV #0x100, W4
01D3EE  628204     AND W5, W4, W4
01D3F0  520FE0     SUB W4, #0x0, [W15]
01D3F2  3A0009     BRA NZ, 0x1D406
27141:                 {
27142:                     CurrUstChager=ChagerCurr;
01D3F4  80B654     MOV ChagerCurr, W4
01D3F6  DEA2CF     ASR W4, #15, W5
01D3F8  BE0004     MOV.D W4, W0
01D3FA  02257C     CALL ___floatsisf
01D3FC  000000     NOP
01D3FE  BE0200     MOV.D W0, W4
01D400  89F5A4     MOV W4, CurrUstChager
01D402  89F5B5     MOV W5, 0x3EB6
01D404  37007E     BRA 0x1D502
27143:                 }
27144:                 else
27145:                 {
27146:                 EUChager=UBatHiMem-UBtFl;
01D406  818354     MOV UBatHiMem, W4
01D408  200005     MOV #0x0, W5
01D40A  BE0004     MOV.D W4, W0
01D40C  022582     CALL ___floatunsisf
01D40E  000000     NOP
01D410  BE0300     MOV.D W0, W6
01D412  820064     MOV UBtFl, W4
01D414  820075     MOV 0x400E, W5
01D416  BE0104     MOV.D W4, W2
01D418  BE0006     MOV.D W6, W0
01D41A  0222D0     CALL ___subsf3
01D41C  000000     NOP
01D41E  BE0200     MOV.D W0, W4
01D420  8981C4     MOV W4, EUChager
01D422  8981D5     MOV W5, 0x303A
27147:                 
27148:                 
27149:                 
27150:                 EChagerUSumm=EChagerUSumm+EUChager;
01D424  80B5B6     MOV EChagerUSumm, W6
01D426  80B5C7     MOV 0x16B8, W7
01D428  8181C4     MOV EUChager, W4
01D42A  8181D5     MOV 0x303A, W5
01D42C  BE0104     MOV.D W4, W2
01D42E  BE0006     MOV.D W6, W0
01D430  0222D2     CALL ___addsf3
01D432  000000     NOP
01D434  BE0200     MOV.D W0, W4
01D436  88B5B4     MOV W4, EChagerUSumm
01D438  88B5C5     MOV W5, 0x16B8
27151:                 EiUChager=EChagerUSumm*IU;
01D43A  80B5B4     MOV EChagerUSumm, W4
01D43C  80B5C5     MOV 0x16B8, W5
01D43E  90014E     MOV [W14+8], W2
01D440  9001DE     MOV [W14+10], W3
01D442  BE0004     MOV.D W4, W0
01D444  022630     CALL ___mulsf3
01D446  000000     NOP
01D448  BE0200     MOV.D W0, W4
01D44A  8981E4     MOV W4, EiUChager
01D44C  8981F5     MOV W5, 0x303E
27152:                 
27153:                 if (EiUChager>ChagerCurr)
01D44E  80B654     MOV ChagerCurr, W4
01D450  DEA2CF     ASR W4, #15, W5
01D452  BE0004     MOV.D W4, W0
01D454  02257C     CALL ___floatsisf
01D456  000000     NOP
01D458  BE0300     MOV.D W0, W6
01D45A  8181E4     MOV EiUChager, W4
01D45C  8181F5     MOV 0x303E, W5
01D45E  B3C018     MOV.B #0x1, W8
01D460  BE0104     MOV.D W4, W2
01D462  BE0006     MOV.D W6, W0
01D464  0224FC     CALL ___lesf2
01D466  000000     NOP
01D468  780200     MOV W0, W4
01D46A  520FE0     SUB W4, #0x0, [W15]
01D46C  350001     BRA LT, 0x1D470
01D46E  EB4400     CLR.B W8
01D470  544FE0     SUB.B W8, #0x0, [W15]
01D472  320016     BRA Z, 0x1D4A0
27154:                 {
27155:                     EiUChager=ChagerCurr;
01D474  80B654     MOV ChagerCurr, W4
01D476  DEA2CF     ASR W4, #15, W5
01D478  BE0004     MOV.D W4, W0
01D47A  02257C     CALL ___floatsisf
01D47C  000000     NOP
01D47E  BE0200     MOV.D W0, W4
01D480  8981E4     MOV W4, EiUChager
01D482  8981F5     MOV W5, 0x303E
27156:                     EChagerUSumm=ChagerCurr/IU;
01D484  80B654     MOV ChagerCurr, W4
01D486  DEA2CF     ASR W4, #15, W5
01D488  BE0004     MOV.D W4, W0
01D48A  02257C     CALL ___floatsisf
01D48C  000000     NOP
01D48E  BE0200     MOV.D W0, W4
01D490  90014E     MOV [W14+8], W2
01D492  9001DE     MOV [W14+10], W3
01D494  BE0004     MOV.D W4, W0
01D496  02245A     CALL ___divsf3
01D498  000000     NOP
01D49A  BE0200     MOV.D W0, W4
01D49C  88B5B4     MOV W4, EChagerUSumm
01D49E  88B5C5     MOV W5, 0x16B8
27157:                 }
27158:                 
27159:                 if (EiUChager<0)
01D4A0  8181E4     MOV EiUChager, W4
01D4A2  8181F5     MOV 0x303E, W5
01D4A4  B3C018     MOV.B #0x1, W8
01D4A6  B81160     MUL.UU W2, #0, W2
01D4A8  BE0004     MOV.D W4, W0
01D4AA  0224FC     CALL ___lesf2
01D4AC  000000     NOP
01D4AE  780200     MOV W0, W4
01D4B0  520FE0     SUB W4, #0x0, [W15]
01D4B2  350001     BRA LT, 0x1D4B6
01D4B4  EB4400     CLR.B W8
01D4B6  544FE0     SUB.B W8, #0x0, [W15]
01D4B8  320003     BRA Z, 0x1D4C0
27160:                     EiUChager=0;
01D4BA  B82260     MUL.UU W4, #0, W4
01D4BC  8981E4     MOV W4, EiUChager
01D4BE  8981F5     MOV W5, 0x303E
27161:                 
27162:                 CurrUstChager=EiUChager;
01D4C0  8181E4     MOV EiUChager, W4
01D4C2  8181F5     MOV 0x303E, W5
01D4C4  89F5A4     MOV W4, CurrUstChager
01D4C6  89F5B5     MOV W5, 0x3EB6
27163:                 if (CurrUstChager<(((float)ChagerCurr)*0.1))
01D4C8  80B654     MOV ChagerCurr, W4
01D4CA  DEA2CF     ASR W4, #15, W5
01D4CC  BE0004     MOV.D W4, W0
01D4CE  02257C     CALL ___floatsisf
01D4D0  000000     NOP
01D4D2  BE0200     MOV.D W0, W4
01D4D4  2CCCD2     MOV #0xCCCD, W2
01D4D6  23DCC3     MOV #0x3DCC, W3
01D4D8  BE0004     MOV.D W4, W0
01D4DA  022630     CALL ___mulsf3
01D4DC  000000     NOP
01D4DE  BE0200     MOV.D W0, W4
01D4E0  BE0304     MOV.D W4, W6
01D4E2  81F5A4     MOV CurrUstChager, W4
01D4E4  81F5B5     MOV 0x3EB6, W5
01D4E6  B3C018     MOV.B #0x1, W8
01D4E8  BE0104     MOV.D W4, W2
01D4EA  BE0006     MOV.D W6, W0
01D4EC  022500     CALL ___gtsf2
01D4EE  000000     NOP
01D4F0  780200     MOV W0, W4
01D4F2  520FE0     SUB W4, #0x0, [W15]
01D4F4  3C0001     BRA GT, 0x1D4F8
01D4F6  EB4400     CLR.B W8
01D4F8  544FE0     SUB.B W8, #0x0, [W15]
01D4FA  320003     BRA Z, 0x1D502
27164:                     ChargingComplete=1;
01D4FC  809684     MOV Flgs5, W4
01D4FE  A03004     BSET W4, #3
01D500  889684     MOV W4, Flgs5
27165:                     
27166:             
27167:                 }
27168:                     
27169:                     
27170:                 ICurr=ICurr/10;
01D502  200002     MOV #0x0, W2
01D504  241203     MOV #0x4120, W3
01D506  90002E     MOV [W14+4], W0
01D508  9000BE     MOV [W14+6], W1
01D50A  02245A     CALL ___divsf3
01D50C  000000     NOP
01D50E  BE0200     MOV.D W0, W4
01D510  980724     MOV W4, [W14+4]
01D512  980735     MOV W5, [W14+6]
27171:                 
27172:                 if (NoChager)
01D514  809675     MOV 0x12CE, W5
01D516  240004     MOV #0x4000, W4
01D518  628204     AND W5, W4, W4
01D51A  520FE0     SUB W4, #0x0, [W15]
01D51C  320003     BRA Z, 0x1D524
27173:                 PWM_Temp=0;//PWM_Temp*0.3;
01D51E  B82260     MUL.UU W4, #0, W4
01D520  BE8F04     MOV.D W4, [W14]
01D522  370007     BRA 0x1D532
27174:                 else
27175:                 PWM_Temp=PWM_Temp*0.7;
01D524  233332     MOV #0x3333, W2
01D526  23F333     MOV #0x3F33, W3
01D528  BE001E     MOV.D [W14], W0
01D52A  022630     CALL ___mulsf3
01D52C  000000     NOP
01D52E  BE0200     MOV.D W0, W4
01D530  BE8F04     MOV.D W4, [W14]
27176:                 
27177:                 
27178:                 
27179:                 DS=0;
01D532  8096B4     MOV 0x12D6, W4
01D534  A1B004     BCLR W4, #11
01D536  8896B4     MOV W4, 0x12D6
27180:                         
27181:                         
27182:                 ECurrChager=Curr1Show+CurrUstChager;
01D538  8097E6     MOV Curr1Show, W6
01D53A  8097F7     MOV 0x12FE, W7
01D53C  81F5A4     MOV CurrUstChager, W4
01D53E  81F5B5     MOV 0x3EB6, W5
01D540  BE0104     MOV.D W4, W2
01D542  BE0006     MOV.D W6, W0
01D544  0222D2     CALL ___addsf3
01D546  000000     NOP
01D548  BE0200     MOV.D W0, W4
01D54A  8954F4     MOV W4, ECurrChager
01D54C  895505     MOV W5, 0x2AA0
27183:                 EpCurrChager=ECurrChager*P_Curr;
01D54E  8154F6     MOV ECurrChager, W6
01D550  815507     MOV 0x2AA0, W7
01D552  80B514     MOV P_Curr, W4
01D554  80B525     MOV 0x16A4, W5
01D556  BE0104     MOV.D W4, W2
01D558  BE0006     MOV.D W6, W0
01D55A  022630     CALL ___mulsf3
01D55C  000000     NOP
01D55E  BE0200     MOV.D W0, W4
01D560  895514     MOV W4, EpCurrChager
01D562  895525     MOV W5, 0x2AA4
27184:                 
27185:                 
27186:                 EChagerCurrSumm=EChagerCurrSumm+ECurrChager;
01D564  80B596     MOV EChagerCurrSumm, W6
01D566  80B5A7     MOV 0x16B4, W7
01D568  8154F4     MOV ECurrChager, W4
01D56A  815505     MOV 0x2AA0, W5
01D56C  BE0104     MOV.D W4, W2
01D56E  BE0006     MOV.D W6, W0
01D570  0222D2     CALL ___addsf3
01D572  000000     NOP
01D574  BE0200     MOV.D W0, W4
01D576  88B594     MOV W4, EChagerCurrSumm
01D578  88B5A5     MOV W5, 0x16B4
27187:                 EiCurrChager=EChagerCurrSumm*ICurr;
01D57A  80B594     MOV EChagerCurrSumm, W4
01D57C  80B5A5     MOV 0x16B4, W5
01D57E  90012E     MOV [W14+4], W2
01D580  9001BE     MOV [W14+6], W3
01D582  BE0004     MOV.D W4, W0
01D584  022630     CALL ___mulsf3
01D586  000000     NOP
01D588  BE0200     MOV.D W0, W4
01D58A  895534     MOV W4, EiCurrChager
01D58C  895545     MOV W5, 0x2AA8
27188:             
27189:             
27190:                     if (ChagerIn)
01D58E  807314     MOV PORTG, W4
01D590  620262     AND W4, #0x2, W4
01D592  520FE0     SUB W4, #0x0, [W15]
01D594  320004     BRA Z, 0x1D59E
27191:                         NoChager=1;
01D596  809674     MOV 0x12CE, W4
01D598  A0E004     BSET W4, #14
01D59A  889674     MOV W4, 0x12CE
01D59C  370003     BRA 0x1D5A4
27192:                     else
27193:                         NoChager=0;
01D59E  809674     MOV 0x12CE, W4
01D5A0  A1E004     BCLR W4, #14
01D5A2  889674     MOV W4, 0x12CE
27194:             
27195:                 if (PrevNoChager!=NoChager)
01D5A4  8096D4     MOV 0x12DA, W4
01D5A6  DE2244     LSR W4, #4, W4
01D5A8  6242E1     AND.B W4, #0x1, W5
01D5AA  809674     MOV 0x12CE, W4
01D5AC  DE224E     LSR W4, #14, W4
01D5AE  624261     AND.B W4, #0x1, W4
01D5B0  52CF84     SUB.B W5, W4, [W15]
01D5B2  320017     BRA Z, 0x1D5E2
27196:                 {
27197:                     if (NoChager)
01D5B4  809675     MOV 0x12CE, W5
01D5B6  240004     MOV #0x4000, W4
01D5B8  628204     AND W5, W4, W4
01D5BA  520FE0     SUB W4, #0x0, [W15]
01D5BC  320004     BRA Z, 0x1D5C6
27198:                         SoundNum=11;
01D5BE  2124B5     MOV #0x124B, W5
01D5C0  B3C0B4     MOV.B #0xB, W4
01D5C2  784A84     MOV.B W4, [W5]
01D5C4  370003     BRA 0x1D5CC
27199:                     else
27200:                         SoundNum=12;
01D5C6  2124B5     MOV #0x124B, W5
01D5C8  B3C0C4     MOV.B #0xC, W4
01D5CA  784A84     MOV.B W4, [W5]
27201:                     
27202:                     PrevNoChager=NoChager;
01D5CC  809674     MOV 0x12CE, W4
01D5CE  DE224E     LSR W4, #14, W4
01D5D0  624261     AND.B W4, #0x1, W4
01D5D2  FB8204     ZE W4, W4
01D5D4  620261     AND W4, #0x1, W4
01D5D6  DD2244     SL W4, #4, W4
01D5D8  8096D6     MOV 0x12DA, W6
01D5DA  2FFEF5     MOV #0xFFEF, W5
01D5DC  630285     AND W6, W5, W5
01D5DE  728204     IOR W5, W4, W4
01D5E0  8896D4     MOV W4, 0x12DA
27203:                 }
27204:                     
27205:                 
27206:                 
27207:                 
27208:                 if (EiCurrChager>PWM_Temp)
01D5E2  815534     MOV EiCurrChager, W4
01D5E4  815545     MOV 0x2AA8, W5
01D5E6  B3C018     MOV.B #0x1, W8
01D5E8  BE011E     MOV.D [W14], W2
01D5EA  BE0004     MOV.D W4, W0
01D5EC  022500     CALL ___gtsf2
01D5EE  000000     NOP
01D5F0  780200     MOV W0, W4
01D5F2  520FE0     SUB W4, #0x0, [W15]
01D5F4  3C0001     BRA GT, 0x1D5F8
01D5F6  EB4400     CLR.B W8
01D5F8  544FE0     SUB.B W8, #0x0, [W15]
01D5FA  320008     BRA Z, 0x1D60C
27209:                 {
27210:                     EChagerCurrSumm=PWM_Temp/ICurr;
01D5FC  90012E     MOV [W14+4], W2
01D5FE  9001BE     MOV [W14+6], W3
01D600  BE001E     MOV.D [W14], W0
01D602  02245A     CALL ___divsf3
01D604  000000     NOP
01D606  BE0200     MOV.D W0, W4
01D608  88B594     MOV W4, EChagerCurrSumm
01D60A  88B5A5     MOV W5, 0x16B4
27211:                 }
27212:                 if (EiCurrChager<0)
01D60C  815534     MOV EiCurrChager, W4
01D60E  815545     MOV 0x2AA8, W5
01D610  B3C018     MOV.B #0x1, W8
01D612  B81160     MUL.UU W2, #0, W2
01D614  BE0004     MOV.D W4, W0
01D616  0224FC     CALL ___lesf2
01D618  000000     NOP
01D61A  780200     MOV W0, W4
01D61C  520FE0     SUB W4, #0x0, [W15]
01D61E  350001     BRA LT, 0x1D622
01D620  EB4400     CLR.B W8
01D622  544FE0     SUB.B W8, #0x0, [W15]
01D624  320003     BRA Z, 0x1D62C
27213:                     EChagerCurrSumm=0;//-PWM_Temp/ICurr;
01D626  B82260     MUL.UU W4, #0, W4
01D628  88B594     MOV W4, EChagerCurrSumm
01D62A  88B5A5     MOV W5, 0x16B4
27214:             
27215:             
27216:             
27217:             
27218:                 
27219:                 PWM_Chager=EpCurrChager+EiCurrChager;
01D62C  815516     MOV EpCurrChager, W6
01D62E  815527     MOV 0x2AA4, W7
01D630  815534     MOV EiCurrChager, W4
01D632  815545     MOV 0x2AA8, W5
01D634  BE0104     MOV.D W4, W2
01D636  BE0006     MOV.D W6, W0
01D638  0222D2     CALL ___addsf3
01D63A  000000     NOP
01D63C  BE0200     MOV.D W0, W4
01D63E  BE0004     MOV.D W4, W0
01D640  022504     CALL ___fixsfsi
01D642  000000     NOP
01D644  BE0200     MOV.D W0, W4
01D646  780204     MOV W4, W4
01D648  89F5D4     MOV W4, PWM_Chager
27220:                 
27221:                 if (PWM_Chager>PWM_Temp)
01D64A  81F5D4     MOV PWM_Chager, W4
01D64C  DEA2CF     ASR W4, #15, W5
01D64E  BE0004     MOV.D W4, W0
01D650  02257C     CALL ___floatsisf
01D652  000000     NOP
01D654  BE0200     MOV.D W0, W4
01D656  B3C018     MOV.B #0x1, W8
01D658  BE011E     MOV.D [W14], W2
01D65A  BE0004     MOV.D W4, W0
01D65C  022500     CALL ___gtsf2
01D65E  000000     NOP
01D660  780200     MOV W0, W4
01D662  520FE0     SUB W4, #0x0, [W15]
01D664  3C0001     BRA GT, 0x1D668
01D666  EB4400     CLR.B W8
01D668  544FE0     SUB.B W8, #0x0, [W15]
01D66A  320006     BRA Z, 0x1D678
27222:                     PWM_Chager=PWM_Temp;
01D66C  BE001E     MOV.D [W14], W0
01D66E  022504     CALL ___fixsfsi
01D670  000000     NOP
01D672  BE0200     MOV.D W0, W4
01D674  780204     MOV W4, W4
01D676  89F5D4     MOV W4, PWM_Chager
27223:                 if (PWM_Chager<-PWM_Temp)
01D678  81F5D4     MOV PWM_Chager, W4
01D67A  DEA2CF     ASR W4, #15, W5
01D67C  BE0004     MOV.D W4, W0
01D67E  02257C     CALL ___floatsisf
01D680  000000     NOP
01D682  BE0300     MOV.D W0, W6
01D684  BE021E     MOV.D [W14], W4
01D686  A2F005     BTG W5, #15
01D688  B3C018     MOV.B #0x1, W8
01D68A  BE0104     MOV.D W4, W2
01D68C  BE0006     MOV.D W6, W0
01D68E  0224FC     CALL ___lesf2
01D690  000000     NOP
01D692  780200     MOV W0, W4
01D694  520FE0     SUB W4, #0x0, [W15]
01D696  350001     BRA LT, 0x1D69A
01D698  EB4400     CLR.B W8
01D69A  544FE0     SUB.B W8, #0x0, [W15]
01D69C  320008     BRA Z, 0x1D6AE
27224:                     PWM_Chager=-PWM_Temp;
01D69E  BE021E     MOV.D [W14], W4
01D6A0  A2F005     BTG W5, #15
01D6A2  BE0004     MOV.D W4, W0
01D6A4  022504     CALL ___fixsfsi
01D6A6  000000     NOP
01D6A8  BE0200     MOV.D W0, W4
01D6AA  780204     MOV W4, W4
01D6AC  89F5D4     MOV W4, PWM_Chager
27225:             
27226:             
27227:             
27228:                     
27229:                     
27230:                     
27231:             
27232:             
27233:             if (UBtFl>=UBatHiMem)
01D6AE  818354     MOV UBatHiMem, W4
01D6B0  200005     MOV #0x0, W5
01D6B2  BE0004     MOV.D W4, W0
01D6B4  022582     CALL ___floatunsisf
01D6B6  000000     NOP
01D6B8  BE0300     MOV.D W0, W6
01D6BA  820064     MOV UBtFl, W4
01D6BC  820075     MOV 0x400E, W5
01D6BE  B3C018     MOV.B #0x1, W8
01D6C0  BE0104     MOV.D W4, W2
01D6C2  BE0006     MOV.D W6, W0
01D6C4  0224FC     CALL ___lesf2
01D6C6  000000     NOP
01D6C8  780200     MOV W0, W4
01D6CA  520FE0     SUB W4, #0x0, [W15]
01D6CC  340001     BRA LE, 0x1D6D0
01D6CE  EB4400     CLR.B W8
01D6D0  544FE0     SUB.B W8, #0x0, [W15]
01D6D2  320017     BRA Z, 0x1D702
27234:             {
27235:                 if (!CV)
01D6D4  809685     MOV Flgs5, W5
01D6D6  201004     MOV #0x100, W4
01D6D8  628204     AND W5, W4, W4
01D6DA  520FE0     SUB W4, #0x0, [W15]
01D6DC  3A0012     BRA NZ, 0x1D702
27236:                 {
27237:                     EChagerUSumm=CurrUstChager/IU;
01D6DE  81F5A4     MOV CurrUstChager, W4
01D6E0  81F5B5     MOV 0x3EB6, W5
01D6E2  90014E     MOV [W14+8], W2
01D6E4  9001DE     MOV [W14+10], W3
01D6E6  BE0004     MOV.D W4, W0
01D6E8  02245A     CALL ___divsf3
01D6EA  000000     NOP
01D6EC  BE0200     MOV.D W0, W4
01D6EE  88B5B4     MOV W4, EChagerUSumm
01D6F0  88B5C5     MOV W5, 0x16B8
27238:                     CV=1;
01D6F2  809684     MOV Flgs5, W4
01D6F4  A08004     BSET W4, #8
01D6F6  889684     MOV W4, Flgs5
01D6F8  370004     BRA 0x1D702
27239:                 }
27240:             }
27241:                 }
27242:                 else
27243:                 {
27244:                     PWM_Chager=0;
01D6FA  EB0200     CLR W4
01D6FC  89F5D4     MOV W4, PWM_Chager
01D6FE  370001     BRA 0x1D702
27245:                 }
27246:             
27247:                 
27248:             }
01D702  78044F     MOV [--W15], W8
01D704  FA8000     ULNK
01D706  060000     RETURN
27249:             #endif
27250:             
27251:             
27252:             
27253:             void TrmControls_U3 (void)
27254:             {
01D708  FA0002     LNK #0x2
27255:                     unsigned int CntBt=4;
01D70A  200044     MOV #0x4, W4
01D70C  780F04     MOV W4, [W14]
27256:             
27257:                     //return;
27258:             
27259:                 if (MustTrm_U3)
01D70E  809664     MOV Flgs4, W4
01D710  620268     AND W4, #0x8, W4
01D712  520FE0     SUB W4, #0x0, [W15]
01D714  3A007F     BRA NZ, 0x1D814
27260:                     return;
01D814  000000     NOP
01D816  370001     BRA 0x1D81A
27261:                 
27262:                 if (OnTransmitt_U3)
01D716  809664     MOV Flgs4, W4
01D718  620270     AND W4, #0x10, W4
01D71A  520FE0     SUB W4, #0x0, [W15]
01D71C  3A007D     BRA NZ, 0x1D818
27263:                     return;
01D818  000000     NOP
27264:             
27265:             
27266:                 TrmMass_U3[0]=0xff;
01D71E  227EC5     MOV #0x27EC, W5
01D720  EBC200     SETM.B W4
01D722  784A84     MOV.B W4, [W5]
27267:                 TrmMass_U3[1]=0xff;
01D724  227ED5     MOV #0x27ED, W5
01D726  EBC200     SETM.B W4
01D728  784A84     MOV.B W4, [W5]
27268:                 TrmMass_U3[2]=1;
01D72A  227EE5     MOV #0x27EE, W5
01D72C  B3C014     MOV.B #0x1, W4
01D72E  784A84     MOV.B W4, [W5]
27269:                 TrmMass_U3[3]=1;//COMMAND
01D730  227EF5     MOV #0x27EF, W5
01D732  B3C014     MOV.B #0x1, W4
01D734  784A84     MOV.B W4, [W5]
27270:             
27271:                 TrmMass_U3[CntBt]=0;
01D736  227EC4     MOV #0x27EC, W4
01D738  42029E     ADD W4, [W14], W5
01D73A  EB4200     CLR.B W4
01D73C  784A84     MOV.B W4, [W5]
27272:                 
27273:                 if (But1)
01D73E  807094     MOV PORTB, W4
01D740  620270     AND W4, #0x10, W4
01D742  520FE0     SUB W4, #0x0, [W15]
01D744  320007     BRA Z, 0x1D754
27274:                     TrmMass_U3[CntBt]=TrmMass_U3[CntBt]|0x01;
01D746  227EC4     MOV #0x27EC, W4
01D748  42021E     ADD W4, [W14], W4
01D74A  784214     MOV.B [W4], W4
01D74C  A00404     BSET.B W4, #0
01D74E  227EC5     MOV #0x27EC, W5
01D750  42829E     ADD W5, [W14], W5
01D752  784A84     MOV.B W4, [W5]
27275:                 if (But2)
01D754  807095     MOV PORTB, W5
01D756  204004     MOV #0x400, W4
01D758  628204     AND W5, W4, W4
01D75A  520FE0     SUB W4, #0x0, [W15]
01D75C  320007     BRA Z, 0x1D76C
27276:                     TrmMass_U3[CntBt]=TrmMass_U3[CntBt]|0x02;
01D75E  227EC4     MOV #0x27EC, W4
01D760  42021E     ADD W4, [W14], W4
01D762  784214     MOV.B [W4], W4
01D764  A01404     BSET.B W4, #1
01D766  227EC5     MOV #0x27EC, W5
01D768  42829E     ADD W5, [W14], W5
01D76A  784A84     MOV.B W4, [W5]
27277:                 if (But3)
01D76C  807095     MOV PORTB, W5
01D76E  208004     MOV #0x800, W4
01D770  628204     AND W5, W4, W4
01D772  520FE0     SUB W4, #0x0, [W15]
01D774  320007     BRA Z, 0x1D784
27278:                     TrmMass_U3[CntBt]=TrmMass_U3[CntBt]|0x04;
01D776  227EC4     MOV #0x27EC, W4
01D778  42021E     ADD W4, [W14], W4
01D77A  784214     MOV.B [W4], W4
01D77C  A02404     BSET.B W4, #2
01D77E  227EC5     MOV #0x27EC, W5
01D780  42829E     ADD W5, [W14], W5
01D782  784A84     MOV.B W4, [W5]
27279:                 if (But4)
01D784  807195     MOV PORTD, W5
01D786  280004     MOV #0x8000, W4
01D788  628204     AND W5, W4, W4
01D78A  520FE0     SUB W4, #0x0, [W15]
01D78C  320007     BRA Z, 0x1D79C
27280:                     TrmMass_U3[CntBt]=TrmMass_U3[CntBt]|0x08;
01D78E  227EC4     MOV #0x27EC, W4
01D790  42021E     ADD W4, [W14], W4
01D792  784214     MOV.B [W4], W4
01D794  A03404     BSET.B W4, #3
01D796  227EC5     MOV #0x27EC, W5
01D798  42829E     ADD W5, [W14], W5
01D79A  784A84     MOV.B W4, [W5]
27281:                 if (Break)
01D79C  070276     RCALL BreakFunc
01D79E  784200     MOV.B W0, W4
01D7A0  524FE0     SUB.B W4, #0x0, [W15]
01D7A2  320007     BRA Z, 0x1D7B2
27282:                     TrmMass_U3[CntBt]=TrmMass_U3[CntBt]|0x10;
01D7A4  227EC4     MOV #0x27EC, W4
01D7A6  42021E     ADD W4, [W14], W4
01D7A8  784214     MOV.B [W4], W4
01D7AA  A04404     BSET.B W4, #4
01D7AC  227EC5     MOV #0x27EC, W5
01D7AE  42829E     ADD W5, [W14], W5
01D7B0  784A84     MOV.B W4, [W5]
27283:                 
27284:                 CntBt++;
01D7B2  E80F1E     INC [W14], [W14]
27285:             
27286:                 TrmMass_U3[CntBt++]=ADCThrottle;
01D7B4  809354     MOV ADCThrottle, W4
01D7B6  784204     MOV.B W4, W4
01D7B8  227EC5     MOV #0x27EC, W5
01D7BA  42829E     ADD W5, [W14], W5
01D7BC  784A84     MOV.B W4, [W5]
01D7BE  E80F1E     INC [W14], [W14]
27287:                 TrmMass_U3[CntBt++]=ADCThrottle>>8;
01D7C0  809354     MOV ADCThrottle, W4
01D7C2  DE2248     LSR W4, #8, W4
01D7C4  784204     MOV.B W4, W4
01D7C6  227EC5     MOV #0x27EC, W5
01D7C8  42829E     ADD W5, [W14], W5
01D7CA  784A84     MOV.B W4, [W5]
01D7CC  E80F1E     INC [W14], [W14]
27288:             
27289:             
27290:                 TrmMass_U3[CntBt++]=ADCThrottleBreak;
01D7CE  8093E4     MOV ADCThrottleBreak, W4
01D7D0  784204     MOV.B W4, W4
01D7D2  227EC5     MOV #0x27EC, W5
01D7D4  42829E     ADD W5, [W14], W5
01D7D6  784A84     MOV.B W4, [W5]
01D7D8  E80F1E     INC [W14], [W14]
27291:                 TrmMass_U3[CntBt++]=ADCThrottleBreak>>8;
01D7DA  8093E4     MOV ADCThrottleBreak, W4
01D7DC  DE2248     LSR W4, #8, W4
01D7DE  784204     MOV.B W4, W4
01D7E0  227EC5     MOV #0x27EC, W5
01D7E2  42829E     ADD W5, [W14], W5
01D7E4  784A84     MOV.B W4, [W5]
01D7E6  E80F1E     INC [W14], [W14]
27292:             
27293:             
27294:                 TrmMass_U3[2]=CntBt-3;
01D7E8  78021E     MOV [W14], W4
01D7EA  784204     MOV.B W4, W4
01D7EC  524263     SUB.B W4, #0x3, W4
01D7EE  227EE5     MOV #0x27EE, W5
01D7F0  784A84     MOV.B W4, [W5]
27295:             
27296:                 TrmMass_U3[CntBt++]=CalcCheckSumm(TrmMass_U3[2]+1,&TrmMass_U3[2]);
01D7F2  227EE4     MOV #0x27EE, W4
01D7F4  784214     MOV.B [W4], W4
01D7F6  FB8204     ZE W4, W4
01D7F8  E80204     INC W4, W4
01D7FA  227EE1     MOV #0x27EE, W1
01D7FC  780004     MOV W4, W0
01D7FE  029AF6     CALL CalcCheckSumm
01D800  000000     NOP
01D802  784200     MOV.B W0, W4
01D804  227EC5     MOV #0x27EC, W5
01D806  42829E     ADD W5, [W14], W5
01D808  784A84     MOV.B W4, [W5]
01D80A  E80F1E     INC [W14], [W14]
27297:             
27298:                 MustTrm_U3=1;
01D80C  809664     MOV Flgs4, W4
01D80E  A03004     BSET W4, #3
01D810  889664     MOV W4, Flgs4
01D812  370003     BRA 0x1D81A
27299:             }
01D81A  FA8000     ULNK
01D81C  060000     RETURN
27300:             
27301:             void U4_9600_On(void)
27302:             {
01D81E  FA0002     LNK #0x2
27303:                      unsigned int CntBt=4;
01D820  200044     MOV #0x4, W4
01D822  780F04     MOV W4, [W14]
27304:             
27305:                     //return;
27306:             
27307:                 if (MustTrm_U3)
01D824  809664     MOV Flgs4, W4
01D826  620268     AND W4, #0x8, W4
01D828  520FE0     SUB W4, #0x0, [W15]
01D82A  3A003F     BRA NZ, 0x1D8AA
27308:                     return;
01D8AA  000000     NOP
01D8AC  370001     BRA 0x1D8B0
27309:                 
27310:                 if (OnTransmitt_U3)
01D82C  809664     MOV Flgs4, W4
01D82E  620270     AND W4, #0x10, W4
01D830  520FE0     SUB W4, #0x0, [W15]
01D832  3A003D     BRA NZ, 0x1D8AE
27311:                     return;
01D8AE  000000     NOP
27312:             
27313:             
27314:                 TrmMass_U3[0]=0xff;
01D834  227EC5     MOV #0x27EC, W5
01D836  EBC200     SETM.B W4
01D838  784A84     MOV.B W4, [W5]
27315:                 TrmMass_U3[1]=0xff;
01D83A  227ED5     MOV #0x27ED, W5
01D83C  EBC200     SETM.B W4
01D83E  784A84     MOV.B W4, [W5]
27316:                 //TrmMass_U3[2]=1;
27317:                 TrmMass_U3[3]=57;//COMMAND
01D840  227EF5     MOV #0x27EF, W5
01D842  B3C394     MOV.B #0x39, W4
01D844  784A84     MOV.B W4, [W5]
27318:             
27319:                 TrmMass_U3[CntBt++]=0;
01D846  227EC4     MOV #0x27EC, W4
01D848  42029E     ADD W4, [W14], W5
01D84A  EB4200     CLR.B W4
01D84C  784A84     MOV.B W4, [W5]
01D84E  E80F1E     INC [W14], [W14]
27320:                 TrmMass_U3[CntBt++]=0x73;
01D850  227EC4     MOV #0x27EC, W4
01D852  42029E     ADD W4, [W14], W5
01D854  B3C734     MOV.B #0x73, W4
01D856  784A84     MOV.B W4, [W5]
01D858  E80F1E     INC [W14], [W14]
27321:                 TrmMass_U3[CntBt++]=0xb2;
01D85A  227EC4     MOV #0x27EC, W4
01D85C  42029E     ADD W4, [W14], W5
01D85E  B3CB24     MOV.B #0xB2, W4
01D860  784A84     MOV.B W4, [W5]
01D862  E80F1E     INC [W14], [W14]
27322:                 TrmMass_U3[CntBt++]=SerNumber;
01D864  81BAA4     MOV SerNumber, W4
01D866  784204     MOV.B W4, W4
01D868  227EC5     MOV #0x27EC, W5
01D86A  42829E     ADD W5, [W14], W5
01D86C  784A84     MOV.B W4, [W5]
01D86E  E80F1E     INC [W14], [W14]
27323:                 TrmMass_U3[CntBt++]=SerNumber>>8;
01D870  81BAA4     MOV SerNumber, W4
01D872  DE2248     LSR W4, #8, W4
01D874  784204     MOV.B W4, W4
01D876  227EC5     MOV #0x27EC, W5
01D878  42829E     ADD W5, [W14], W5
01D87A  784A84     MOV.B W4, [W5]
01D87C  E80F1E     INC [W14], [W14]
27324:             
27325:                 TrmMass_U3[2]=CntBt-3;
01D87E  78021E     MOV [W14], W4
01D880  784204     MOV.B W4, W4
01D882  524263     SUB.B W4, #0x3, W4
01D884  227EE5     MOV #0x27EE, W5
01D886  784A84     MOV.B W4, [W5]
27326:             
27327:                 TrmMass_U3[CntBt++]=CalcCheckSumm(TrmMass_U3[2]+1,&TrmMass_U3[2]);
01D888  227EE4     MOV #0x27EE, W4
01D88A  784214     MOV.B [W4], W4
01D88C  FB8204     ZE W4, W4
01D88E  E80204     INC W4, W4
01D890  227EE1     MOV #0x27EE, W1
01D892  780004     MOV W4, W0
01D894  029AF6     CALL CalcCheckSumm
01D896  000000     NOP
01D898  784200     MOV.B W0, W4
01D89A  227EC5     MOV #0x27EC, W5
01D89C  42829E     ADD W5, [W14], W5
01D89E  784A84     MOV.B W4, [W5]
01D8A0  E80F1E     INC [W14], [W14]
27328:             
27329:                 MustTrm_U3=1;   
01D8A2  809664     MOV Flgs4, W4
01D8A4  A03004     BSET W4, #3
01D8A6  889664     MOV W4, Flgs4
01D8A8  370003     BRA 0x1D8B0
27330:             }
01D8B0  FA8000     ULNK
01D8B2  060000     RETURN
27331:             
27332:             
27333:             
27334:             
27335:             
27336:             
27337:             void ButtonsSlave(void)
27338:             {
01D8B4  FA0000     LNK #0x0
27339:                 
27340:             #if !defined REV2
27341:                 unsigned char HvBt1Tmp,HvBt2Tmp,HvBt3Tmp,HvBt4Tmp,HvBt5Tmp;
27342:                 unsigned char Bt1UpTmp,Bt2UpTmp,Bt3UpTmp,Bt4UpTmp,Bt5UpTmp;
27343:             #endif
27344:                 if (StartingBTN)
01D8B6  809685     MOV Flgs5, W5
01D8B8  240004     MOV #0x4000, W4
01D8BA  628204     AND W5, W4, W4
01D8BC  520FE0     SUB W4, #0x0, [W15]
01D8BE  320044     BRA Z, 0x1D948
27345:                 {
27346:                     if (!SlaveBut1)
01D8C0  8096C4     MOV Flgs7, W4
01D8C2  620261     AND W4, #0x1, W4
01D8C4  520FE0     SUB W4, #0x0, [W15]
01D8C6  3A0007     BRA NZ, 0x1D8D6
27347:                     {
27348:                      But1Pressed=1;
01D8C8  809684     MOV Flgs5, W4
01D8CA  A02004     BSET W4, #2
01D8CC  889684     MOV W4, Flgs5
27349:                      HvBt1=1;
01D8CE  809684     MOV Flgs5, W4
01D8D0  A07004     BSET W4, #7
01D8D2  889684     MOV W4, Flgs5
01D8D4  370006     BRA 0x1D8E2
27350:                     }
27351:                     else
27352:                     {
27353:                      But1Pressed=0;
01D8D6  809684     MOV Flgs5, W4
01D8D8  A12004     BCLR W4, #2
01D8DA  889684     MOV W4, Flgs5
27354:                      Bt1Up=1;
01D8DC  809684     MOV Flgs5, W4
01D8DE  A06004     BSET W4, #6
01D8E0  889684     MOV W4, Flgs5
27355:                     }
27356:                   
27357:                     if (!SlaveBut2)
01D8E2  8096C4     MOV Flgs7, W4
01D8E4  620262     AND W4, #0x2, W4
01D8E6  520FE0     SUB W4, #0x0, [W15]
01D8E8  3A0007     BRA NZ, 0x1D8F8
27358:                     {
27359:                      But2Pressed=1;
01D8EA  809684     MOV Flgs5, W4
01D8EC  A0B004     BSET W4, #11
01D8EE  889684     MOV W4, Flgs5
27360:                      HvBt2=1;
01D8F0  809684     MOV Flgs5, W4
01D8F2  A0A004     BSET W4, #10
01D8F4  889684     MOV W4, Flgs5
01D8F6  370006     BRA 0x1D904
27361:                     }
27362:                     else
27363:                     {
27364:                      But2Pressed=0;
01D8F8  809684     MOV Flgs5, W4
01D8FA  A1B004     BCLR W4, #11
01D8FC  889684     MOV W4, Flgs5
27365:                      Bt2Up=1;
01D8FE  809684     MOV Flgs5, W4
01D900  A09004     BSET W4, #9
01D902  889684     MOV W4, Flgs5
27366:                     }
27367:                     
27368:                     if (!SlaveBut3)
01D904  8096C4     MOV Flgs7, W4
01D906  620264     AND W4, #0x4, W4
01D908  520FE0     SUB W4, #0x0, [W15]
01D90A  3A0007     BRA NZ, 0x1D91A
27369:                     {
27370:                      But3Pressed=1;
01D90C  809624     MOV Flgs2, W4
01D90E  A09004     BSET W4, #9
01D910  889624     MOV W4, Flgs2
27371:                      HvBt3=1;
01D912  809684     MOV Flgs5, W4
01D914  A01004     BSET W4, #1
01D916  889684     MOV W4, Flgs5
01D918  370006     BRA 0x1D926
27372:                     }
27373:                     else
27374:                     {
27375:                      But3Pressed=0;
01D91A  809624     MOV Flgs2, W4
01D91C  A19004     BCLR W4, #9
01D91E  889624     MOV W4, Flgs2
27376:                      Bt3Up=1;
01D920  809684     MOV Flgs5, W4
01D922  A00004     BSET W4, #0
01D924  889684     MOV W4, Flgs5
27377:                     }
27378:                     if (!SlaveBut4)
01D926  8096C4     MOV Flgs7, W4
01D928  620268     AND W4, #0x8, W4
01D92A  520FE0     SUB W4, #0x0, [W15]
01D92C  3A0007     BRA NZ, 0x1D93C
27379:                     {
27380:                      But4Pressed=1;
01D92E  809604     MOV Flgs1, W4
01D930  A07004     BSET W4, #7
01D932  889604     MOV W4, Flgs1
27381:                      HvBt4=1;
01D934  809604     MOV Flgs1, W4
01D936  A09004     BSET W4, #9
01D938  889604     MOV W4, Flgs1
01D93A  370006     BRA 0x1D948
27382:                     }
27383:                     else
27384:                     {
27385:                      But4Pressed=0;
01D93C  809604     MOV Flgs1, W4
01D93E  A17004     BCLR W4, #7
01D940  889604     MOV W4, Flgs1
27386:                      Bt4Up=1;
01D942  809604     MOV Flgs1, W4
01D944  A0E004     BSET W4, #14
01D946  889604     MOV W4, Flgs1
27387:                     }
27388:                         
27389:                 }
27390:              //   return;
27391:                    if (!But1Pressed)
01D948  809684     MOV Flgs5, W4
01D94A  620264     AND W4, #0x4, W4
01D94C  520FE0     SUB W4, #0x0, [W15]
01D94E  3A002E     BRA NZ, 0x1D9AC
27392:                    {
27393:                        if (Bt1Cnt)
01D950  230944     MOV #0x3094, W4
01D952  784214     MOV.B [W4], W4
01D954  524FE0     SUB.B W4, #0x0, [W15]
01D956  32001C     BRA Z, 0x1D990
27394:                        {
27395:                            if (!SlaveBut1)
01D958  8096C4     MOV Flgs7, W4
01D95A  620261     AND W4, #0x1, W4
01D95C  520FE0     SUB W4, #0x0, [W15]
01D95E  3A0008     BRA NZ, 0x1D970
27396:                            {
27397:                                Bt1Cnt=Bt1CntConst;
01D960  230984     MOV #0x3098, W4
01D962  784214     MOV.B [W4], W4
01D964  230945     MOV #0x3094, W5
01D966  784A84     MOV.B W4, [W5]
27398:                                But1Pressed=1;
01D968  809684     MOV Flgs5, W4
01D96A  A02004     BSET W4, #2
01D96C  889684     MOV W4, Flgs5
01D96E  370053     BRA 0x1DA16
27399:                            }
27400:                            else
27401:                            {
27402:                            Bt1Cnt--;
01D970  230944     MOV #0x3094, W4
01D972  784214     MOV.B [W4], W4
01D974  E94204     DEC.B W4, W4
01D976  230945     MOV #0x3094, W5
01D978  784A84     MOV.B W4, [W5]
27403:                            if (!Bt1Cnt)
01D97A  230944     MOV #0x3094, W4
01D97C  784214     MOV.B [W4], W4
01D97E  524FE0     SUB.B W4, #0x0, [W15]
01D980  3A004A     BRA NZ, 0x1DA16
27404:                            {
27405:                            Drebezg1=0;
01D982  809684     MOV Flgs5, W4
01D984  A15004     BCLR W4, #5
01D986  889684     MOV W4, Flgs5
27406:                            Bt1Up=1;
01D988  809684     MOV Flgs5, W4
01D98A  A06004     BSET W4, #6
01D98C  889684     MOV W4, Flgs5
01D98E  370043     BRA 0x1DA16
27407:                            }
27408:                            }
27409:                        }
27410:                        else
27411:                        {
27412:                            Bt1LongCnt=0;
01D990  EB0200     CLR W4
01D992  8984E4     MOV W4, Bt1LongCnt
27413:                            if (!SlaveBut1)
01D994  8096C4     MOV Flgs7, W4
01D996  620261     AND W4, #0x1, W4
01D998  520FE0     SUB W4, #0x0, [W15]
01D99A  3A003D     BRA NZ, 0x1DA16
27414:                            {
27415:                                Bt1Cnt=Bt1CntConst;
01D99C  230984     MOV #0x3098, W4
01D99E  784214     MOV.B [W4], W4
01D9A0  230945     MOV #0x3094, W5
01D9A2  784A84     MOV.B W4, [W5]
27416:                                But1Pressed=1;
01D9A4  809684     MOV Flgs5, W4
01D9A6  A02004     BSET W4, #2
01D9A8  889684     MOV W4, Flgs5
01D9AA  370035     BRA 0x1DA16
27417:                            }
27418:                        }
27419:                    }
27420:                    else
27421:                    {
27422:                        if (Bt1Cnt)
01D9AC  230944     MOV #0x3094, W4
01D9AE  784214     MOV.B [W4], W4
01D9B0  524FE0     SUB.B W4, #0x0, [W15]
01D9B2  320023     BRA Z, 0x1D9FA
27423:                        {
27424:                            if (SlaveBut1)
01D9B4  8096C4     MOV Flgs7, W4
01D9B6  620261     AND W4, #0x1, W4
01D9B8  520FE0     SUB W4, #0x0, [W15]
01D9BA  320008     BRA Z, 0x1D9CC
27425:                            {
27426:                                Bt1Cnt=Bt1CntConst;
01D9BC  230984     MOV #0x3098, W4
01D9BE  784214     MOV.B [W4], W4
01D9C0  230945     MOV #0x3094, W5
01D9C2  784A84     MOV.B W4, [W5]
27427:                                But1Pressed=0;
01D9C4  809684     MOV Flgs5, W4
01D9C6  A12004     BCLR W4, #2
01D9C8  889684     MOV W4, Flgs5
01D9CA  370025     BRA 0x1DA16
27428:                            }
27429:                            else
27430:                            {
27431:                            Bt1Cnt--;
01D9CC  230944     MOV #0x3094, W4
01D9CE  784214     MOV.B [W4], W4
01D9D0  E94204     DEC.B W4, W4
01D9D2  230945     MOV #0x3094, W5
01D9D4  784A84     MOV.B W4, [W5]
27432:                            if (!Bt1Cnt)
01D9D6  230944     MOV #0x3094, W4
01D9D8  784214     MOV.B [W4], W4
01D9DA  524FE0     SUB.B W4, #0x0, [W15]
01D9DC  3A001C     BRA NZ, 0x1DA16
27433:                            {
27434:                                if (!Drebezg1)
01D9DE  809685     MOV Flgs5, W5
01D9E0  200204     MOV #0x20, W4
01D9E2  628204     AND W5, W4, W4
01D9E4  520FE0     SUB W4, #0x0, [W15]
01D9E6  3A0017     BRA NZ, 0x1DA16
27435:                                {
27436:                                HvBt1=1;
01D9E8  809684     MOV Flgs5, W4
01D9EA  A07004     BSET W4, #7
01D9EC  889684     MOV W4, Flgs5
27437:                                Drebezg1=1;
01D9EE  809684     MOV Flgs5, W4
01D9F0  A05004     BSET W4, #5
01D9F2  889684     MOV W4, Flgs5
27438:                                Bt1LongCnt=0;
01D9F4  EB0200     CLR W4
01D9F6  8984E4     MOV W4, Bt1LongCnt
01D9F8  37000E     BRA 0x1DA16
27439:                                }
27440:                            }
27441:                            }
27442:                        }
27443:                        else
27444:                        {
27445:                            if (SlaveBut1)
01D9FA  8096C4     MOV Flgs7, W4
01D9FC  620261     AND W4, #0x1, W4
01D9FE  520FE0     SUB W4, #0x0, [W15]
01DA00  320007     BRA Z, 0x1DA10
27446:                            {
27447:                                Bt1Cnt=Bt1CntConst;
01DA02  230984     MOV #0x3098, W4
01DA04  784214     MOV.B [W4], W4
01DA06  230945     MOV #0x3094, W5
01DA08  784A84     MOV.B W4, [W5]
27448:                                But1Pressed=0;
01DA0A  809684     MOV Flgs5, W4
01DA0C  A12004     BCLR W4, #2
01DA0E  889684     MOV W4, Flgs5
27449:                            }
27450:                            Bt1LongCnt++;
01DA10  8184E4     MOV Bt1LongCnt, W4
01DA12  E80204     INC W4, W4
01DA14  8984E4     MOV W4, Bt1LongCnt
27451:                        }
27452:                    }
27453:             
27454:                 
27455:                 
27456:                    if (!But2Pressed)
01DA16  809685     MOV Flgs5, W5
01DA18  208004     MOV #0x800, W4
01DA1A  628204     AND W5, W4, W4
01DA1C  520FE0     SUB W4, #0x0, [W15]
01DA1E  3A002E     BRA NZ, 0x1DA7C
27457:                    {
27458:                        if (Bt2Cnt)
01DA20  230954     MOV #0x3095, W4
01DA22  784214     MOV.B [W4], W4
01DA24  524FE0     SUB.B W4, #0x0, [W15]
01DA26  32001C     BRA Z, 0x1DA60
27459:                        {
27460:                            if (!SlaveBut2)
01DA28  8096C4     MOV Flgs7, W4
01DA2A  620262     AND W4, #0x2, W4
01DA2C  520FE0     SUB W4, #0x0, [W15]
01DA2E  3A0008     BRA NZ, 0x1DA40
27461:                            {
27462:                                Bt2Cnt=Bt2CntConst;
01DA30  230994     MOV #0x3099, W4
01DA32  784214     MOV.B [W4], W4
01DA34  230955     MOV #0x3095, W5
01DA36  784A84     MOV.B W4, [W5]
27463:                                But2Pressed=1;
01DA38  809684     MOV Flgs5, W4
01DA3A  A0B004     BSET W4, #11
01DA3C  889684     MOV W4, Flgs5
01DA3E  370053     BRA 0x1DAE6
27464:                            }
27465:                            else
27466:                            {
27467:                            Bt2Cnt--;
01DA40  230954     MOV #0x3095, W4
01DA42  784214     MOV.B [W4], W4
01DA44  E94204     DEC.B W4, W4
01DA46  230955     MOV #0x3095, W5
01DA48  784A84     MOV.B W4, [W5]
27468:                            if (!Bt2Cnt)
01DA4A  230954     MOV #0x3095, W4
01DA4C  784214     MOV.B [W4], W4
01DA4E  524FE0     SUB.B W4, #0x0, [W15]
01DA50  3A004A     BRA NZ, 0x1DAE6
27469:                            {
27470:                            Drebezg2=0;
01DA52  8096B4     MOV 0x12D6, W4
01DA54  A1D004     BCLR W4, #13
01DA56  8896B4     MOV W4, 0x12D6
27471:                            Bt2Up=1;
01DA58  809684     MOV Flgs5, W4
01DA5A  A09004     BSET W4, #9
01DA5C  889684     MOV W4, Flgs5
01DA5E  370043     BRA 0x1DAE6
27472:                            }
27473:                            }
27474:                        }
27475:                        else
27476:                        {
27477:                            Bt2LongCnt=0;
01DA60  EB0200     CLR W4
01DA62  8984F4     MOV W4, Bt2LongCnt
27478:                            if (!SlaveBut2)
01DA64  8096C4     MOV Flgs7, W4
01DA66  620262     AND W4, #0x2, W4
01DA68  520FE0     SUB W4, #0x0, [W15]
01DA6A  3A003D     BRA NZ, 0x1DAE6
27479:                            {
27480:                                Bt2Cnt=Bt2CntConst;
01DA6C  230994     MOV #0x3099, W4
01DA6E  784214     MOV.B [W4], W4
01DA70  230955     MOV #0x3095, W5
01DA72  784A84     MOV.B W4, [W5]
27481:                                But2Pressed=1;
01DA74  809684     MOV Flgs5, W4
01DA76  A0B004     BSET W4, #11
01DA78  889684     MOV W4, Flgs5
01DA7A  370035     BRA 0x1DAE6
27482:                            }
27483:                        }
27484:                    }
27485:                    else
27486:                    {
27487:                        if (Bt2Cnt)
01DA7C  230954     MOV #0x3095, W4
01DA7E  784214     MOV.B [W4], W4
01DA80  524FE0     SUB.B W4, #0x0, [W15]
01DA82  320023     BRA Z, 0x1DACA
27488:                        {
27489:                            if (SlaveBut2)
01DA84  8096C4     MOV Flgs7, W4
01DA86  620262     AND W4, #0x2, W4
01DA88  520FE0     SUB W4, #0x0, [W15]
01DA8A  320008     BRA Z, 0x1DA9C
27490:                            {
27491:                                Bt2Cnt=Bt2CntConst;
01DA8C  230994     MOV #0x3099, W4
01DA8E  784214     MOV.B [W4], W4
01DA90  230955     MOV #0x3095, W5
01DA92  784A84     MOV.B W4, [W5]
27492:                                But2Pressed=0;
01DA94  809684     MOV Flgs5, W4
01DA96  A1B004     BCLR W4, #11
01DA98  889684     MOV W4, Flgs5
01DA9A  370025     BRA 0x1DAE6
27493:                            }
27494:                            else
27495:                            {
27496:                            Bt2Cnt--;
01DA9C  230954     MOV #0x3095, W4
01DA9E  784214     MOV.B [W4], W4
01DAA0  E94204     DEC.B W4, W4
01DAA2  230955     MOV #0x3095, W5
01DAA4  784A84     MOV.B W4, [W5]
27497:                            if (!Bt2Cnt)
01DAA6  230954     MOV #0x3095, W4
01DAA8  784214     MOV.B [W4], W4
01DAAA  524FE0     SUB.B W4, #0x0, [W15]
01DAAC  3A001C     BRA NZ, 0x1DAE6
27498:                            {
27499:                                if (!Drebezg2)
01DAAE  8096B5     MOV 0x12D6, W5
01DAB0  220004     MOV #0x2000, W4
01DAB2  628204     AND W5, W4, W4
01DAB4  520FE0     SUB W4, #0x0, [W15]
01DAB6  3A0017     BRA NZ, 0x1DAE6
27500:                                {
27501:                                HvBt2=1;
01DAB8  809684     MOV Flgs5, W4
01DABA  A0A004     BSET W4, #10
01DABC  889684     MOV W4, Flgs5
27502:                                Drebezg2=1;
01DABE  8096B4     MOV 0x12D6, W4
01DAC0  A0D004     BSET W4, #13
01DAC2  8896B4     MOV W4, 0x12D6
27503:                                Bt2LongCnt=0;
01DAC4  EB0200     CLR W4
01DAC6  8984F4     MOV W4, Bt2LongCnt
01DAC8  37000E     BRA 0x1DAE6
27504:                                }
27505:                            }
27506:                            }
27507:                        }
27508:                        else
27509:                        {
27510:                            if (SlaveBut2)
01DACA  8096C4     MOV Flgs7, W4
01DACC  620262     AND W4, #0x2, W4
01DACE  520FE0     SUB W4, #0x0, [W15]
01DAD0  320007     BRA Z, 0x1DAE0
27511:                            {
27512:                                Bt2Cnt=Bt2CntConst;
01DAD2  230994     MOV #0x3099, W4
01DAD4  784214     MOV.B [W4], W4
01DAD6  230955     MOV #0x3095, W5
01DAD8  784A84     MOV.B W4, [W5]
27513:                                But2Pressed=0;
01DADA  809684     MOV Flgs5, W4
01DADC  A1B004     BCLR W4, #11
01DADE  889684     MOV W4, Flgs5
27514:                            }
27515:                            Bt2LongCnt++;
01DAE0  8184F4     MOV Bt2LongCnt, W4
01DAE2  E80204     INC W4, W4
01DAE4  8984F4     MOV W4, Bt2LongCnt
27516:                        }
27517:                    }
27518:             
27519:             
27520:             
27521:                    if (!But3Pressed)
01DAE6  809625     MOV Flgs2, W5
01DAE8  202004     MOV #0x200, W4
01DAEA  628204     AND W5, W4, W4
01DAEC  520FE0     SUB W4, #0x0, [W15]
01DAEE  3A002E     BRA NZ, 0x1DB4C
27522:                    {
27523:                        if (Bt3Cnt)
01DAF0  230964     MOV #0x3096, W4
01DAF2  784214     MOV.B [W4], W4
01DAF4  524FE0     SUB.B W4, #0x0, [W15]
01DAF6  32001C     BRA Z, 0x1DB30
27524:                        {
27525:                            if (!SlaveBut3)
01DAF8  8096C4     MOV Flgs7, W4
01DAFA  620264     AND W4, #0x4, W4
01DAFC  520FE0     SUB W4, #0x0, [W15]
01DAFE  3A0008     BRA NZ, 0x1DB10
27526:                            {
27527:                                Bt3Cnt=Bt3CntConst;
01DB00  2309A4     MOV #0x309A, W4
01DB02  784214     MOV.B [W4], W4
01DB04  230965     MOV #0x3096, W5
01DB06  784A84     MOV.B W4, [W5]
27528:                                But3Pressed=1;
01DB08  809624     MOV Flgs2, W4
01DB0A  A09004     BSET W4, #9
01DB0C  889624     MOV W4, Flgs2
01DB0E  370053     BRA 0x1DBB6
27529:                            }
27530:                            else
27531:                            {
27532:                            Bt3Cnt--;
01DB10  230964     MOV #0x3096, W4
01DB12  784214     MOV.B [W4], W4
01DB14  E94204     DEC.B W4, W4
01DB16  230965     MOV #0x3096, W5
01DB18  784A84     MOV.B W4, [W5]
27533:                            if (!Bt3Cnt)
01DB1A  230964     MOV #0x3096, W4
01DB1C  784214     MOV.B [W4], W4
01DB1E  524FE0     SUB.B W4, #0x0, [W15]
01DB20  3A004A     BRA NZ, 0x1DBB6
27534:                            {
27535:                            Drebezg3=0;
01DB22  809654     MOV 0x12CA, W4
01DB24  A1F004     BCLR W4, #15
01DB26  889654     MOV W4, 0x12CA
27536:                            Bt3Up=1;
01DB28  809684     MOV Flgs5, W4
01DB2A  A00004     BSET W4, #0
01DB2C  889684     MOV W4, Flgs5
01DB2E  370043     BRA 0x1DBB6
27537:                            }
27538:                            }
27539:                        }
27540:                        else
27541:                        {
27542:                            Bt3LongCnt=0;
01DB30  EB0200     CLR W4
01DB32  898504     MOV W4, Bt3LongCnt
27543:                            if (!SlaveBut3)
01DB34  8096C4     MOV Flgs7, W4
01DB36  620264     AND W4, #0x4, W4
01DB38  520FE0     SUB W4, #0x0, [W15]
01DB3A  3A003D     BRA NZ, 0x1DBB6
27544:                            {
27545:                                Bt3Cnt=Bt3CntConst;
01DB3C  2309A4     MOV #0x309A, W4
01DB3E  784214     MOV.B [W4], W4
01DB40  230965     MOV #0x3096, W5
01DB42  784A84     MOV.B W4, [W5]
27546:                                But3Pressed=1;
01DB44  809624     MOV Flgs2, W4
01DB46  A09004     BSET W4, #9
01DB48  889624     MOV W4, Flgs2
01DB4A  370035     BRA 0x1DBB6
27547:                            }
27548:                        }
27549:                    }
27550:                    else
27551:                    {
27552:                        if (Bt3Cnt)
01DB4C  230964     MOV #0x3096, W4
01DB4E  784214     MOV.B [W4], W4
01DB50  524FE0     SUB.B W4, #0x0, [W15]
01DB52  320023     BRA Z, 0x1DB9A
27553:                        {
27554:                            if (SlaveBut3)
01DB54  8096C4     MOV Flgs7, W4
01DB56  620264     AND W4, #0x4, W4
01DB58  520FE0     SUB W4, #0x0, [W15]
01DB5A  320008     BRA Z, 0x1DB6C
27555:                            {
27556:                                Bt3Cnt=Bt3CntConst;
01DB5C  2309A4     MOV #0x309A, W4
01DB5E  784214     MOV.B [W4], W4
01DB60  230965     MOV #0x3096, W5
01DB62  784A84     MOV.B W4, [W5]
27557:                                But3Pressed=0;
01DB64  809624     MOV Flgs2, W4
01DB66  A19004     BCLR W4, #9
01DB68  889624     MOV W4, Flgs2
01DB6A  370025     BRA 0x1DBB6
27558:                            }
27559:                            else
27560:                            {
27561:                            Bt3Cnt--;
01DB6C  230964     MOV #0x3096, W4
01DB6E  784214     MOV.B [W4], W4
01DB70  E94204     DEC.B W4, W4
01DB72  230965     MOV #0x3096, W5
01DB74  784A84     MOV.B W4, [W5]
27562:                            if (!Bt3Cnt)
01DB76  230964     MOV #0x3096, W4
01DB78  784214     MOV.B [W4], W4
01DB7A  524FE0     SUB.B W4, #0x0, [W15]
01DB7C  3A001C     BRA NZ, 0x1DBB6
27563:                            {
27564:                                if (!Drebezg3)
01DB7E  809655     MOV 0x12CA, W5
01DB80  280004     MOV #0x8000, W4
01DB82  628204     AND W5, W4, W4
01DB84  520FE0     SUB W4, #0x0, [W15]
01DB86  3A0017     BRA NZ, 0x1DBB6
27565:                                {
27566:                                HvBt3=1;
01DB88  809684     MOV Flgs5, W4
01DB8A  A01004     BSET W4, #1
01DB8C  889684     MOV W4, Flgs5
27567:                                Drebezg3=1;
01DB8E  809654     MOV 0x12CA, W4
01DB90  A0F004     BSET W4, #15
01DB92  889654     MOV W4, 0x12CA
27568:                                Bt3LongCnt=0;
01DB94  EB0200     CLR W4
01DB96  898504     MOV W4, Bt3LongCnt
01DB98  37000E     BRA 0x1DBB6
27569:                                }
27570:                            }
27571:                            }
27572:                        }
27573:                        else
27574:                        {
27575:                            if (SlaveBut3)
01DB9A  8096C4     MOV Flgs7, W4
01DB9C  620264     AND W4, #0x4, W4
01DB9E  520FE0     SUB W4, #0x0, [W15]
01DBA0  320007     BRA Z, 0x1DBB0
27576:                            {
27577:                                Bt3Cnt=Bt3CntConst;
01DBA2  2309A4     MOV #0x309A, W4
01DBA4  784214     MOV.B [W4], W4
01DBA6  230965     MOV #0x3096, W5
01DBA8  784A84     MOV.B W4, [W5]
27578:                                But3Pressed=0;
01DBAA  809624     MOV Flgs2, W4
01DBAC  A19004     BCLR W4, #9
01DBAE  889624     MOV W4, Flgs2
27579:                            }
27580:                            Bt3LongCnt++;
01DBB0  818504     MOV Bt3LongCnt, W4
01DBB2  E80204     INC W4, W4
01DBB4  898504     MOV W4, Bt3LongCnt
27581:                        }
27582:                    }
27583:             
27584:             
27585:                 
27586:             
27587:                    if (!But4Pressed)
01DBB6  809605     MOV Flgs1, W5
01DBB8  200804     MOV #0x80, W4
01DBBA  628204     AND W5, W4, W4
01DBBC  520FE0     SUB W4, #0x0, [W15]
01DBBE  3A002E     BRA NZ, 0x1DC1C
27588:                    {
27589:                        if (Bt4Cnt)
01DBC0  230974     MOV #0x3097, W4
01DBC2  784214     MOV.B [W4], W4
01DBC4  524FE0     SUB.B W4, #0x0, [W15]
01DBC6  32001C     BRA Z, 0x1DC00
27590:                        {
27591:                            if (!SlaveBut4)
01DBC8  8096C4     MOV Flgs7, W4
01DBCA  620268     AND W4, #0x8, W4
01DBCC  520FE0     SUB W4, #0x0, [W15]
01DBCE  3A0008     BRA NZ, 0x1DBE0
27592:                            {
27593:                                Bt4Cnt=Bt4CntConst;
01DBD0  2309B4     MOV #0x309B, W4
01DBD2  784214     MOV.B [W4], W4
01DBD4  230975     MOV #0x3097, W5
01DBD6  784A84     MOV.B W4, [W5]
27594:                                But4Pressed=1;
01DBD8  809604     MOV Flgs1, W4
01DBDA  A07004     BSET W4, #7
01DBDC  889604     MOV W4, Flgs1
01DBDE  370053     BRA 0x1DC86
27595:                            }
27596:                            else
27597:                            {
27598:                            Bt4Cnt--;
01DBE0  230974     MOV #0x3097, W4
01DBE2  784214     MOV.B [W4], W4
01DBE4  E94204     DEC.B W4, W4
01DBE6  230975     MOV #0x3097, W5
01DBE8  784A84     MOV.B W4, [W5]
27599:                            if (!Bt4Cnt)
01DBEA  230974     MOV #0x3097, W4
01DBEC  784214     MOV.B [W4], W4
01DBEE  524FE0     SUB.B W4, #0x0, [W15]
01DBF0  3A004A     BRA NZ, 0x1DC86
27600:                            {
27601:                            Drebezg4=0;
01DBF2  809604     MOV Flgs1, W4
01DBF4  A1B004     BCLR W4, #11
01DBF6  889604     MOV W4, Flgs1
27602:                            Bt4Up=1;
01DBF8  809604     MOV Flgs1, W4
01DBFA  A0E004     BSET W4, #14
01DBFC  889604     MOV W4, Flgs1
01DBFE  370043     BRA 0x1DC86
27603:                            }
27604:                            }
27605:                        }
27606:                        else
27607:                        {
27608:                            Bt4LongCnt=0;
01DC00  EB0200     CLR W4
01DC02  898514     MOV W4, Bt4LongCnt
27609:                            if (!SlaveBut4)
01DC04  8096C4     MOV Flgs7, W4
01DC06  620268     AND W4, #0x8, W4
01DC08  520FE0     SUB W4, #0x0, [W15]
01DC0A  3A003D     BRA NZ, 0x1DC86
27610:                            {
27611:                                Bt4Cnt=Bt4CntConst;
01DC0C  2309B4     MOV #0x309B, W4
01DC0E  784214     MOV.B [W4], W4
01DC10  230975     MOV #0x3097, W5
01DC12  784A84     MOV.B W4, [W5]
27612:                                But4Pressed=1;
01DC14  809604     MOV Flgs1, W4
01DC16  A07004     BSET W4, #7
01DC18  889604     MOV W4, Flgs1
01DC1A  370035     BRA 0x1DC86
27613:                            }
27614:                        }
27615:                    }
27616:                    else
27617:                    {
27618:                        if (Bt4Cnt)
01DC1C  230974     MOV #0x3097, W4
01DC1E  784214     MOV.B [W4], W4
01DC20  524FE0     SUB.B W4, #0x0, [W15]
01DC22  320023     BRA Z, 0x1DC6A
27619:                        {
27620:                            if (SlaveBut4)
01DC24  8096C4     MOV Flgs7, W4
01DC26  620268     AND W4, #0x8, W4
01DC28  520FE0     SUB W4, #0x0, [W15]
01DC2A  320008     BRA Z, 0x1DC3C
27621:                            {
27622:                                Bt4Cnt=Bt4CntConst;
01DC2C  2309B4     MOV #0x309B, W4
01DC2E  784214     MOV.B [W4], W4
01DC30  230975     MOV #0x3097, W5
01DC32  784A84     MOV.B W4, [W5]
27623:                                But4Pressed=0;
01DC34  809604     MOV Flgs1, W4
01DC36  A17004     BCLR W4, #7
01DC38  889604     MOV W4, Flgs1
01DC3A  370025     BRA 0x1DC86
27624:                            }
27625:                            else
27626:                            {
27627:                            Bt4Cnt--;
01DC3C  230974     MOV #0x3097, W4
01DC3E  784214     MOV.B [W4], W4
01DC40  E94204     DEC.B W4, W4
01DC42  230975     MOV #0x3097, W5
01DC44  784A84     MOV.B W4, [W5]
27628:                            if (!Bt4Cnt)
01DC46  230974     MOV #0x3097, W4
01DC48  784214     MOV.B [W4], W4
01DC4A  524FE0     SUB.B W4, #0x0, [W15]
01DC4C  3A001C     BRA NZ, 0x1DC86
27629:                            {
27630:                                if (!Drebezg4)
01DC4E  809605     MOV Flgs1, W5
01DC50  208004     MOV #0x800, W4
01DC52  628204     AND W5, W4, W4
01DC54  520FE0     SUB W4, #0x0, [W15]
01DC56  3A0017     BRA NZ, 0x1DC86
27631:                                {
27632:                                HvBt4=1;
01DC58  809604     MOV Flgs1, W4
01DC5A  A09004     BSET W4, #9
01DC5C  889604     MOV W4, Flgs1
27633:                                Drebezg4=1;
01DC5E  809604     MOV Flgs1, W4
01DC60  A0B004     BSET W4, #11
01DC62  889604     MOV W4, Flgs1
27634:                                Bt4LongCnt=0;
01DC64  EB0200     CLR W4
01DC66  898514     MOV W4, Bt4LongCnt
01DC68  37000E     BRA 0x1DC86
27635:                                }
27636:                            }
27637:                            }
27638:                        }
27639:                        else
27640:                        {
27641:                            if (SlaveBut4)
01DC6A  8096C4     MOV Flgs7, W4
01DC6C  620268     AND W4, #0x8, W4
01DC6E  520FE0     SUB W4, #0x0, [W15]
01DC70  320007     BRA Z, 0x1DC80
27642:                            {
27643:                                Bt4Cnt=Bt4CntConst;
01DC72  2309B4     MOV #0x309B, W4
01DC74  784214     MOV.B [W4], W4
01DC76  230975     MOV #0x3097, W5
01DC78  784A84     MOV.B W4, [W5]
27644:                                But4Pressed=0;
01DC7A  809604     MOV Flgs1, W4
01DC7C  A17004     BCLR W4, #7
01DC7E  889604     MOV W4, Flgs1
27645:                            }
27646:                            Bt4LongCnt++;
01DC80  818514     MOV Bt4LongCnt, W4
01DC82  E80204     INC W4, W4
01DC84  898514     MOV W4, Bt4LongCnt
27647:                        }
27648:                    }
27649:             
27650:             #if !defined REV2
27651:             HvBt1Tmp=But1Pressed;
27652:             HvBt2Tmp=But2Pressed;
27653:             HvBt3Tmp=But3Pressed;
27654:             HvBt4Tmp=But4Pressed;
27655:             
27656:             
27657:             Bt1UpTmp=Bt1Up;
27658:             Bt2UpTmp=Bt2Up;
27659:             Bt3UpTmp=Bt3Up;
27660:             Bt4UpTmp=Bt4Up;
27661:             
27662:             But1Pressed=0;
27663:             Bt1Up=0;
27664:             
27665:             
27666:             But2Pressed=HvBt1Tmp;
27667:             But3Pressed=HvBt2Tmp;
27668:             But4Pressed=HvBt3Tmp;
27669:             
27670:             Bt2Up=Bt1UpTmp;
27671:             Bt3Up=Bt2UpTmp;
27672:             Bt4Up=Bt3UpTmp;
27673:             
27674:             #endif
27675:             
27676:             }
01DC86  FA8000     ULNK
01DC88  060000     RETURN
27677:             
27678:             unsigned char BreakFunc(void)
27679:             {
01DC8A  FA0000     LNK #0x0
27680:                 if (_2WDMode==2)
01DC8C  230C94     MOV #0x30C9, W4
01DC8E  784214     MOV.B [W4], W4
01DC90  524FE2     SUB.B W4, #0x2, [W15]
01DC92  3A0004     BRA NZ, 0x1DC9C
27681:                     return (unsigned char)SlaveBreak;
01DC94  8096C4     MOV Flgs7, W4
01DC96  DE2244     LSR W4, #4, W4
01DC98  624261     AND.B W4, #0x1, W4
01DC9A  370008     BRA 0x1DCAC
27682:                 else
27683:                     return (unsigned char)(!Break1);
01DC9C  807195     MOV PORTD, W5
01DC9E  210004     MOV #0x1000, W4
01DCA0  628204     AND W5, W4, W4
01DCA2  A7F004     BTSC W4, #15
01DCA4  EA0204     NEG W4, W4
01DCA6  E90204     DEC W4, W4
01DCA8  DE224F     LSR W4, #15, W4
01DCAA  784204     MOV.B W4, W4
27684:             }
01DCAC  784004     MOV.B W4, W0
01DCAE  FA8000     ULNK
01DCB0  060000     RETURN
27685:             
27686:             void ClbrJOYSTICK(void)
27687:             {
01DCB2  FA0000     LNK #0x0
27688:                 if (!CalibrateJOYSTICK)
01DCB4  8096C5     MOV Flgs7, W5
01DCB6  200204     MOV #0x20, W4
01DCB8  628204     AND W5, W4, W4
01DCBA  520FE0     SUB W4, #0x0, [W15]
01DCBC  32003B     BRA Z, 0x1DD34
27689:                     return;
01DD34  000000     NOP
01DD36  370001     BRA 0x1DD3A
27690:              
27691:                 if (!HvADC1)
01DCBE  8096C5     MOV Flgs7, W5
01DCC0  200404     MOV #0x40, W4
01DCC2  628204     AND W5, W4, W4
01DCC4  520FE0     SUB W4, #0x0, [W15]
01DCC6  320038     BRA Z, 0x1DD38
27692:                     return;
01DD38  000000     NOP
27693:                 
27694:                 HvADC1=0;
01DCC8  8096C4     MOV Flgs7, W4
01DCCA  A16004     BCLR W4, #6
01DCCC  8896C4     MOV W4, Flgs7
27695:                 
27696:                 ADCThrottleSumm=ADCThrottleSumm+ADCThrottle;
01DCCE  809354     MOV ADCThrottle, W4
01DCD0  B82361     MUL.UU W4, #1, W6
01DCD2  809414     MOV ADCThrottleSumm, W4
01DCD4  809425     MOV 0x1284, W5
01DCD6  420206     ADD W4, W6, W4
01DCD8  4A8287     ADDC W5, W7, W5
01DCDA  889414     MOV W4, ADCThrottleSumm
01DCDC  889425     MOV W5, 0x1284
27697:                 ADCThrottleBreakSumm=ADCThrottleBreakSumm+ADCThrottleBreak;
01DCDE  8093E4     MOV ADCThrottleBreak, W4
01DCE0  B82361     MUL.UU W4, #1, W6
01DCE2  809434     MOV ADCThrottleBreakSumm, W4
01DCE4  809445     MOV 0x1288, W5
01DCE6  420206     ADD W4, W6, W4
01DCE8  4A8287     ADDC W5, W7, W5
01DCEA  889434     MOV W4, ADCThrottleBreakSumm
01DCEC  889445     MOV W5, 0x1288
27698:                 CntCalibrateJOYSTICK++;
01DCEE  234A24     MOV #0x34A2, W4
01DCF0  784214     MOV.B [W4], W4
01DCF2  E84204     INC.B W4, W4
01DCF4  234A25     MOV #0x34A2, W5
01DCF6  784A84     MOV.B W4, [W5]
27699:                 if (CntCalibrateJOYSTICK>=64)
01DCF8  234A24     MOV #0x34A2, W4
01DCFA  784294     MOV.B [W4], W5
01DCFC  B3C3F4     MOV.B #0x3F, W4
01DCFE  52CF84     SUB.B W5, W4, [W15]
01DD00  36001C     BRA LEU, 0x1DD3A
27700:                 {
27701:                     JoystickCalibrX = ADCThrottleSumm >>6;
01DD02  809414     MOV ADCThrottleSumm, W4
01DD04  809425     MOV 0x1284, W5
01DD06  DD2B4A     SL W5, #10, W6
01DD08  DE2246     LSR W4, #6, W4
01DD0A  730204     IOR W6, W4, W4
01DD0C  DEAAC6     ASR W5, #6, W5
01DD0E  780204     MOV W4, W4
01DD10  889454     MOV W4, JoystickCalibrX
27702:                     JoystickCalibrY = ADCThrottleBreakSumm >>6;
01DD12  809434     MOV ADCThrottleBreakSumm, W4
01DD14  809445     MOV 0x1288, W5
01DD16  DD2B4A     SL W5, #10, W6
01DD18  DE2246     LSR W4, #6, W4
01DD1A  730204     IOR W6, W4, W4
01DD1C  DEAAC6     ASR W5, #6, W5
01DD1E  780204     MOV W4, W4
01DD20  889464     MOV W4, JoystickCalibrY
27703:                     CalibrateJOYSTICK=0;
01DD22  8096C4     MOV Flgs7, W4
01DD24  A15004     BCLR W4, #5
01DD26  8896C4     MOV W4, Flgs7
27704:                     OptionsToMass();
01DD28  02D7EE     CALL OptionsToMass
01DD2A  000000     NOP
27705:                     MustTrmFlashMass=1;
01DD2C  8095F4     MOV 0x12BE, W4
01DD2E  A02004     BSET W4, #2
01DD30  8895F4     MOV W4, 0x12BE
01DD32  370003     BRA 0x1DD3A
27706:             
27707:                 }
27708:                 
27709:                 
27710:             }
01DD3A  FA8000     ULNK
01DD3C  060000     RETURN
27711:             
27712:             
27713:             
27714:             
27715:             void RecSlave2WDControls(void)
27716:             {
01DD3E  FA0002     LNK #0x2
27717:                 unsigned int CntBt=3;
01DD40  200034     MOV #0x3, W4
01DD42  780F04     MOV W4, [W14]
27718:                 if (!HvDataPacketU3_FL)
01DD44  8095E4     MOV Flgs, W4
01DD46  620268     AND W4, #0x8, W4
01DD48  520FE0     SUB W4, #0x0, [W15]
01DD4A  320074     BRA Z, 0x1DE34
27719:                     return;
01DE34  000000     NOP
27720:                 HvDataPacketU3_FL=0;
01DD4C  8095E4     MOV Flgs, W4
01DD4E  A13004     BCLR W4, #3
01DD50  8895E4     MOV W4, Flgs
27721:                 
27722:                 Hv2WDMasterCnt=250;
01DD52  200FA4     MOV #0xFA, W4
01DD54  8A1394     MOV W4, Hv2WDMasterCnt
27723:                 Hv2WDMaster=1;
01DD56  809664     MOV Flgs4, W4
01DD58  A00004     BSET W4, #0
01DD5A  889664     MOV W4, Flgs4
27724:                 
27725:                 switch (PacketRec_U3[1])
01DD5C  214354     MOV #0x1435, W4
01DD5E  784214     MOV.B [W4], W4
01DD60  FB8204     ZE W4, W4
01DD62  520FE1     SUB W4, #0x1, [W15]
01DD64  3A0068     BRA NZ, 0x1DE36
27726:                 {
27727:                     case 1:
27728:                         if (PacketRec_U3[2]&0x01)
01DD66  214364     MOV #0x1436, W4
01DD68  784214     MOV.B [W4], W4
01DD6A  FB8204     ZE W4, W4
01DD6C  620261     AND W4, #0x1, W4
01DD6E  784204     MOV.B W4, W4
01DD70  524FE0     SUB.B W4, #0x0, [W15]
01DD72  320004     BRA Z, 0x1DD7C
27729:                             SlaveBut1=1;
01DD74  8096C4     MOV Flgs7, W4
01DD76  A00004     BSET W4, #0
01DD78  8896C4     MOV W4, Flgs7
01DD7A  370003     BRA 0x1DD82
27730:                         else
27731:                             SlaveBut1=0;
01DD7C  8096C4     MOV Flgs7, W4
01DD7E  A10004     BCLR W4, #0
01DD80  8896C4     MOV W4, Flgs7
27732:                         if (PacketRec_U3[2]&0x02)
01DD82  214364     MOV #0x1436, W4
01DD84  784214     MOV.B [W4], W4
01DD86  FB8204     ZE W4, W4
01DD88  620262     AND W4, #0x2, W4
01DD8A  520FE0     SUB W4, #0x0, [W15]
01DD8C  320004     BRA Z, 0x1DD96
27733:                             SlaveBut2=1;
01DD8E  8096C4     MOV Flgs7, W4
01DD90  A01004     BSET W4, #1
01DD92  8896C4     MOV W4, Flgs7
01DD94  370003     BRA 0x1DD9C
27734:                         else
27735:                             SlaveBut2=0;
01DD96  8096C4     MOV Flgs7, W4
01DD98  A11004     BCLR W4, #1
01DD9A  8896C4     MOV W4, Flgs7
27736:                         if (PacketRec_U3[2]&0x04)
01DD9C  214364     MOV #0x1436, W4
01DD9E  784214     MOV.B [W4], W4
01DDA0  FB8204     ZE W4, W4
01DDA2  620264     AND W4, #0x4, W4
01DDA4  520FE0     SUB W4, #0x0, [W15]
01DDA6  320004     BRA Z, 0x1DDB0
27737:                             SlaveBut3=1;
01DDA8  8096C4     MOV Flgs7, W4
01DDAA  A02004     BSET W4, #2
01DDAC  8896C4     MOV W4, Flgs7
01DDAE  370003     BRA 0x1DDB6
27738:                         else
27739:                             SlaveBut3=0;
01DDB0  8096C4     MOV Flgs7, W4
01DDB2  A12004     BCLR W4, #2
01DDB4  8896C4     MOV W4, Flgs7
27740:                         if (PacketRec_U3[2]&0x08)
01DDB6  214364     MOV #0x1436, W4
01DDB8  784214     MOV.B [W4], W4
01DDBA  FB8204     ZE W4, W4
01DDBC  620268     AND W4, #0x8, W4
01DDBE  520FE0     SUB W4, #0x0, [W15]
01DDC0  320004     BRA Z, 0x1DDCA
27741:                             SlaveBut4=1;
01DDC2  8096C4     MOV Flgs7, W4
01DDC4  A03004     BSET W4, #3
01DDC6  8896C4     MOV W4, Flgs7
01DDC8  370003     BRA 0x1DDD0
27742:                         else
27743:                             SlaveBut4=0;
01DDCA  8096C4     MOV Flgs7, W4
01DDCC  A13004     BCLR W4, #3
01DDCE  8896C4     MOV W4, Flgs7
27744:                         if (PacketRec_U3[2]&0x10)
01DDD0  214364     MOV #0x1436, W4
01DDD2  784214     MOV.B [W4], W4
01DDD4  FB8204     ZE W4, W4
01DDD6  620270     AND W4, #0x10, W4
01DDD8  520FE0     SUB W4, #0x0, [W15]
01DDDA  320004     BRA Z, 0x1DDE4
27745:                             SlaveBreak=1;
01DDDC  8096C4     MOV Flgs7, W4
01DDDE  A04004     BSET W4, #4
01DDE0  8896C4     MOV W4, Flgs7
01DDE2  370003     BRA 0x1DDEA
27746:                         else
27747:                             SlaveBreak=0;
01DDE4  8096C4     MOV Flgs7, W4
01DDE6  A14004     BCLR W4, #4
01DDE8  8896C4     MOV W4, Flgs7
27748:                         
27749:                         
27750:                         SlaveADCThrottle = PacketRec_U3[CntBt++];
01DDEA  214344     MOV #0x1434, W4
01DDEC  42021E     ADD W4, [W14], W4
01DDEE  784214     MOV.B [W4], W4
01DDF0  FB8204     ZE W4, W4
01DDF2  8955B4     MOV W4, SlaveADCThrottle
01DDF4  E80F1E     INC [W14], [W14]
27751:                         SlaveADCThrottle = SlaveADCThrottle + (((int)PacketRec_U3[CntBt++]) << 8);
01DDF6  214344     MOV #0x1434, W4
01DDF8  42021E     ADD W4, [W14], W4
01DDFA  784214     MOV.B [W4], W4
01DDFC  FB8204     ZE W4, W4
01DDFE  DD2248     SL W4, #8, W4
01DE00  780284     MOV W4, W5
01DE02  8155B4     MOV SlaveADCThrottle, W4
01DE04  428204     ADD W5, W4, W4
01DE06  8955B4     MOV W4, SlaveADCThrottle
01DE08  E80F1E     INC [W14], [W14]
27752:                         SlaveADCThrottleBreak = PacketRec_U3[CntBt++];
01DE0A  214344     MOV #0x1434, W4
01DE0C  42021E     ADD W4, [W14], W4
01DE0E  784214     MOV.B [W4], W4
01DE10  FB8204     ZE W4, W4
01DE12  8955C4     MOV W4, SlaveADCThrottleBreak
01DE14  E80F1E     INC [W14], [W14]
27753:                         SlaveADCThrottleBreak = SlaveADCThrottleBreak + (((int)PacketRec_U3[CntBt++]) << 8);
01DE16  214344     MOV #0x1434, W4
01DE18  42021E     ADD W4, [W14], W4
01DE1A  784214     MOV.B [W4], W4
01DE1C  FB8204     ZE W4, W4
01DE1E  DD2248     SL W4, #8, W4
01DE20  780284     MOV W4, W5
01DE22  8155C4     MOV SlaveADCThrottleBreak, W4
01DE24  428204     ADD W5, W4, W4
01DE26  8955C4     MOV W4, SlaveADCThrottleBreak
01DE28  E80F1E     INC [W14], [W14]
27754:                         
27755:                         HvButtonsFromMaster=1;
01DE2A  8096C4     MOV Flgs7, W4
01DE2C  A08004     BSET W4, #8
01DE2E  8896C4     MOV W4, Flgs7
27756:                         
27757:                         break;
01DE30  000000     NOP
01DE32  370001     BRA 0x1DE36
27758:                 }
27759:             }
01DE36  FA8000     ULNK
01DE38  060000     RETURN
27760:             
27761:             
27762:             
27763:             
27764:             
27765:             
27766:                 
27767:             void LSM6DS33_Init(void)
27768:             {
01DE3A  FA0000     LNK #0x0
27769:                 writeByteLSM6DS33(0x18,0x38);
01DE3C  B3C381     MOV.B #0x38, W1
01DE3E  B3C180     MOV.B #0x18, W0
01DE40  070042     RCALL writeByteLSM6DS33
27770:                 writeByteLSM6DS33(0x10,0x60);
01DE42  B3C601     MOV.B #0x60, W1
01DE44  B3C100     MOV.B #0x10, W0
01DE46  07003F     RCALL writeByteLSM6DS33
27771:                 writeByteLSM6DS33(0x19,0x38);
01DE48  B3C381     MOV.B #0x38, W1
01DE4A  B3C190     MOV.B #0x19, W0
01DE4C  07003C     RCALL writeByteLSM6DS33
27772:                 writeByteLSM6DS33(0x11,0x60);
01DE4E  B3C601     MOV.B #0x60, W1
01DE50  B3C110     MOV.B #0x11, W0
01DE52  070039     RCALL writeByteLSM6DS33
27773:                 
27774:                 
27775:                 
27776:                 LSM6DS33_Initialized=1;
01DE54  8096C4     MOV Flgs7, W4
01DE56  A0D004     BSET W4, #13
01DE58  8896C4     MOV W4, Flgs7
27777:                 
27778:             }
01DE5A  FA8000     ULNK
01DE5C  060000     RETURN
27779:             
27780:             
27781:             unsigned char readByteLSM6DS33(unsigned char ADDR)
27782:             {
01DE5E  FA0002     LNK #0x2
01DE60  784F00     MOV.B W0, [W14]
27783:                 
27784:                 HvGyroData=0;
01DE62  8095E4     MOV Flgs, W4
01DE64  A1E004     BCLR W4, #14
01DE66  8895E4     MOV W4, Flgs
27785:                 Gyro_txBuf[0] = ADDR|0x80;
01DE68  B3C804     MOV.B #0x80, W4
01DE6A  72421E     IOR.B W4, [W14], W4
01DE6C  217CF5     MOV #0x17CF, W5
01DE6E  784A84     MOV.B W4, [W5]
27786:                 TxRxSPI_GYRO(2);
01DE70  200020     MOV #0x2, W0
01DE72  02D3A8     CALL TxRxSPI_GYRO
01DE74  000000     NOP
27787:                 while (!HvGyroData);
01DE76  000000     NOP
01DE78  8095E5     MOV Flgs, W5
01DE7A  240004     MOV #0x4000, W4
01DE7C  628204     AND W5, W4, W4
01DE7E  520FE0     SUB W4, #0x0, [W15]
01DE80  32FFFB     BRA Z, 0x1DE78
27788:                      HvGyroData=0;
01DE82  8095E4     MOV Flgs, W4
01DE84  A1E004     BCLR W4, #14
01DE86  8895E4     MOV W4, Flgs
27789:             
27790:                      return Gyro_rxBuf[1];
01DE88  217EE4     MOV #0x17EE, W4
01DE8A  784214     MOV.B [W4], W4
27791:                      
27792:             }
01DE8C  784004     MOV.B W4, W0
01DE8E  FA8000     ULNK
01DE90  060000     RETURN
27793:             
27794:             
27795:             
27796:             void readBytesLSM6DS33(unsigned char ADDR,unsigned char N)
27797:             {
01DE92  FA0002     LNK #0x2
01DE94  784F00     MOV.B W0, [W14]
01DE96  984711     MOV.B W1, [W14+1]
27798:                 
27799:                 HvGyroData=0;
01DE98  8095E4     MOV Flgs, W4
01DE9A  A1E004     BCLR W4, #14
01DE9C  8895E4     MOV W4, Flgs
27800:                 Gyro_txBuf[0] = ADDR|0x80;
01DE9E  B3C804     MOV.B #0x80, W4
01DEA0  72421E     IOR.B W4, [W14], W4
01DEA2  217CF5     MOV #0x17CF, W5
01DEA4  784A84     MOV.B W4, [W5]
27801:                 TxRxSPI_GYRO(N);
01DEA6  90421E     MOV.B [W14+1], W4
01DEA8  FB8204     ZE W4, W4
01DEAA  780004     MOV W4, W0
01DEAC  02D3A8     CALL TxRxSPI_GYRO
01DEAE  000000     NOP
27802:                 while (!HvGyroData);
01DEB0  000000     NOP
01DEB2  8095E5     MOV Flgs, W5
01DEB4  240004     MOV #0x4000, W4
01DEB6  628204     AND W5, W4, W4
01DEB8  520FE0     SUB W4, #0x0, [W15]
01DEBA  32FFFB     BRA Z, 0x1DEB2
27803:                      HvGyroData=0;
01DEBC  8095E4     MOV Flgs, W4
01DEBE  A1E004     BCLR W4, #14
01DEC0  8895E4     MOV W4, Flgs
27804:             
27805:                      
27806:             }
01DEC2  FA8000     ULNK
01DEC4  060000     RETURN
27807:             
27808:             
27809:             
27810:             void writeByteLSM6DS33(unsigned char ADDR, unsigned char Data)
27811:             {
01DEC6  FA0002     LNK #0x2
01DEC8  784F00     MOV.B W0, [W14]
01DECA  984711     MOV.B W1, [W14+1]
27812:                 HvGyroData=0;
01DECC  8095E4     MOV Flgs, W4
01DECE  A1E004     BCLR W4, #14
01DED0  8895E4     MOV W4, Flgs
27813:                 Gyro_txBuf[0] = ADDR;//Addr | autoincrement
01DED2  217CF4     MOV #0x17CF, W4
01DED4  784A1E     MOV.B [W14], [W4]
27814:                 Gyro_txBuf[1] = Data;
01DED6  217D04     MOV #0x17D0, W4
01DED8  90429E     MOV.B [W14+1], W5
01DEDA  784A05     MOV.B W5, [W4]
27815:                 TxRxSPI_GYRO(2);
01DEDC  200020     MOV #0x2, W0
01DEDE  02D3A8     CALL TxRxSPI_GYRO
01DEE0  000000     NOP
27816:                 while (!HvGyroData);
01DEE2  000000     NOP
01DEE4  8095E5     MOV Flgs, W5
01DEE6  240004     MOV #0x4000, W4
01DEE8  628204     AND W5, W4, W4
01DEEA  520FE0     SUB W4, #0x0, [W15]
01DEEC  32FFFB     BRA Z, 0x1DEE4
27817:                      HvGyroData=0;
01DEEE  8095E4     MOV Flgs, W4
01DEF0  A1E004     BCLR W4, #14
01DEF2  8895E4     MOV W4, Flgs
27818:             }
01DEF4  FA8000     ULNK
01DEF6  060000     RETURN
27819:             
27820:             
27821:             
27822:             void LighrSensorFunc(void)
27823:             {
01DEF8  FA0000     LNK #0x0
27824:                 if (!LightOn&&!KeyLightStop&&!KeyLightStopGabarit)
01DEFA  809775     MOV StatFlgs3, W5
01DEFC  202004     MOV #0x200, W4
01DEFE  628204     AND W5, W4, W4
01DF00  520FE0     SUB W4, #0x0, [W15]
01DF02  3A0008     BRA NZ, 0x1DF14
01DF04  809784     MOV StatFlgs4, W4
01DF06  620261     AND W4, #0x1, W4
01DF08  520FE0     SUB W4, #0x0, [W15]
01DF0A  3A0004     BRA NZ, 0x1DF14
01DF0C  809784     MOV StatFlgs4, W4
01DF0E  620262     AND W4, #0x2, W4
01DF10  520FE0     SUB W4, #0x0, [W15]
01DF12  320064     BRA Z, 0x1DFDC
27825:                     return;
01DFDC  000000     NOP
01DFDE  370001     BRA 0x1DFE2
27826:                 
27827:                 if (!KeyLightStop&&!KeyLightStopGabarit)
01DF14  809784     MOV StatFlgs4, W4
01DF16  620261     AND W4, #0x1, W4
01DF18  520FE0     SUB W4, #0x0, [W15]
01DF1A  3A001D     BRA NZ, 0x1DF56
01DF1C  809784     MOV StatFlgs4, W4
01DF1E  620262     AND W4, #0x2, W4
01DF20  520FE0     SUB W4, #0x0, [W15]
01DF22  3A0019     BRA NZ, 0x1DF56
27828:                 {
27829:                 switch (LightMode)
01DF24  2308E4     MOV #0x308E, W4
01DF26  784214     MOV.B [W4], W4
01DF28  FB8204     ZE W4, W4
01DF2A  520FE1     SUB W4, #0x1, [W15]
01DF2C  320006     BRA Z, 0x1DF3A
01DF2E  520FE2     SUB W4, #0x2, [W15]
01DF30  320006     BRA Z, 0x1DF3E
01DF32  520FE0     SUB W4, #0x0, [W15]
01DF34  3A0055     BRA NZ, 0x1DFE0
27830:                 {
27831:                     case 0:
27832:             #if !defined VECTORS
27833:                                 Horn=0;
01DF36  A94E35     BCLR 0xE35, #2
27834:             #else
27835:                                 //Horn=1;
27836:                                 
27837:                                 OC3R=((unsigned int)KeyLightBrightness)<<8;
27838:                                 
27839:             #endif
27840:                         break;
01DF38  37000D     BRA 0x1DF54
27841:                     case 1:
27842:             #if !defined VECTORS
27843:                                 Horn=1;
01DF3A  A84E35     BSET 0xE35, #2
27844:             #else
27845:                                 //Horn=0;
27846:                                 OC3R=0;
27847:             #endif
27848:                         break;
01DF3C  37000B     BRA 0x1DF54
27849:                     case 2:
27850:                         
27851:                         if (LightSensor>LightSensorThresholdLo)
01DF3E  818375     MOV LightSensor, W5
01DF40  818484     MOV LightSensorThresholdLo, W4
01DF42  528F84     SUB W5, W4, [W15]
01DF44  360001     BRA LEU, 0x1DF48
27852:             #if !defined VECTORS
27853:                                 Horn=0;
01DF46  A94E35     BCLR 0xE35, #2
27854:             #else
27855:                                 //Horn=1;
27856:                                 OC3R=((unsigned int)KeyLightBrightness)<<8;
27857:             #endif
27858:                         
27859:                         if (LightSensor<LightSensorThresholdHi)
01DF48  818375     MOV LightSensor, W5
01DF4A  818494     MOV LightSensorThresholdHi, W4
01DF4C  528F84     SUB W5, W4, [W15]
01DF4E  310001     BRA C, 0x1DF52
27860:             #if !defined VECTORS
27861:                                 Horn=1;
01DF50  A84E35     BSET 0xE35, #2
27862:             #else
27863:                                 //Horn=0;
27864:                                 OC3R=0;
27865:             #endif
27866:                         
27867:                         break;
01DF52  000000     NOP
27868:                 }
27869:                 }
01DF54  370046     BRA 0x1DFE2
01DFE0  000000     NOP
27870:                 else
27871:                 {
27872:                     if (!KeyLightStopGabarit)
01DF56  809784     MOV StatFlgs4, W4
01DF58  620262     AND W4, #0x2, W4
01DF5A  520FE0     SUB W4, #0x0, [W15]
01DF5C  3A001D     BRA NZ, 0x1DF98
27873:                     {
27874:                     if (StpLightsNew)
01DF5E  8096D5     MOV 0x12DA, W5
01DF60  200804     MOV #0x80, W4
01DF62  628204     AND W5, W4, W4
01DF64  520FE0     SUB W4, #0x0, [W15]
01DF66  320014     BRA Z, 0x1DF90
27875:                     {
27876:                         if (!MigStop)
01DF68  809784     MOV StatFlgs4, W4
01DF6A  620264     AND W4, #0x4, W4
01DF6C  520FE0     SUB W4, #0x0, [W15]
01DF6E  3A0002     BRA NZ, 0x1DF74
27877:             #if defined VECTORS
27878:                         OC3R=((unsigned int)KeyLightBrightness)<<8;
27879:             #else
27880:                         Horn=0;
01DF70  A94E35     BCLR 0xE35, #2
01DF72  370037     BRA 0x1DFE2
27881:             #endif
27882:                         else
27883:                         {
27884:                             if (!CntMigStop)
01DF74  809404     MOV CntMigStop, W4
01DF76  520FE0     SUB W4, #0x0, [W15]
01DF78  3A0034     BRA NZ, 0x1DFE2
27885:                             {
27886:                                     CntMigStop=CntMigStopConst;
01DF7A  821314     MOV CntMigStopConst, W4
01DF7C  889404     MOV W4, CntMigStop
27887:             #if defined VECTORS
27888:                                     if (OC3R==0)
27889:                                         OC3R=((unsigned int)KeyLightBrightness)<<8;
27890:                                     else
27891:                                         OC3R=0;
27892:             #else
27893:                                     if (Horn)
01DF7E  8071A5     MOV LATD, W5
01DF80  204004     MOV #0x400, W4
01DF82  628204     AND W5, W4, W4
01DF84  520FE0     SUB W4, #0x0, [W15]
01DF86  320002     BRA Z, 0x1DF8C
27894:                                         Horn=0;            
01DF88  A94E35     BCLR 0xE35, #2
01DF8A  37002B     BRA 0x1DFE2
27895:                                     else
27896:                                         Horn=1;            
01DF8C  A84E35     BSET 0xE35, #2
01DF8E  370029     BRA 0x1DFE2
27897:                                         
27898:             #endif
27899:                             }
27900:                         }
27901:                     }
27902:                     else
27903:                     {
27904:             #if defined VECTORS
27905:                         OC3R=0;
27906:             #else
27907:                                         Horn=1;            
01DF90  A84E35     BSET 0xE35, #2
27908:             #endif
27909:                         CntMigStop=CntMigStopConst;
01DF92  821314     MOV CntMigStopConst, W4
01DF94  889404     MOV W4, CntMigStop
01DF96  370025     BRA 0x1DFE2
27910:                     }
27911:                     }
27912:                     else
27913:                     {
27914:                     if (StpLightsNew)
01DF98  8096D5     MOV 0x12DA, W5
01DF9A  200804     MOV #0x80, W4
01DF9C  628204     AND W5, W4, W4
01DF9E  520FE0     SUB W4, #0x0, [W15]
01DFA0  320015     BRA Z, 0x1DFCC
27915:                     {
27916:                         if (!MigStop)
01DFA2  809784     MOV StatFlgs4, W4
01DFA4  620264     AND W4, #0x4, W4
01DFA6  520FE0     SUB W4, #0x0, [W15]
01DFA8  3A0003     BRA NZ, 0x1DFB0
27917:                         OC3R=0xffff;
01DFAA  EB8200     SETM W4
01DFAC  8848D4     MOV W4, OC3R
01DFAE  370019     BRA 0x1DFE2
27918:                         else
27919:                         {
27920:                             if (!CntMigStop)
01DFB0  809404     MOV CntMigStop, W4
01DFB2  520FE0     SUB W4, #0x0, [W15]
01DFB4  3A0016     BRA NZ, 0x1DFE2
27921:                             {
27922:                                     CntMigStop=CntMigStopConst;
01DFB6  821314     MOV CntMigStopConst, W4
01DFB8  889404     MOV W4, CntMigStop
27923:                                     if (OC3R==0)
01DFBA  8048D4     MOV OC3R, W4
01DFBC  520FE0     SUB W4, #0x0, [W15]
01DFBE  3A0003     BRA NZ, 0x1DFC6
27924:                                         OC3R=0xffff;
01DFC0  EB8200     SETM W4
01DFC2  8848D4     MOV W4, OC3R
01DFC4  37000E     BRA 0x1DFE2
27925:                                     else
27926:                                         OC3R=0;
01DFC6  EB0200     CLR W4
01DFC8  8848D4     MOV W4, OC3R
01DFCA  37000B     BRA 0x1DFE2
27927:                             }
27928:             
27929:                         }
27930:                     }
27931:                     else
27932:                     {
27933:                         CntMigStop=CntMigStopConst;
01DFCC  821314     MOV CntMigStopConst, W4
01DFCE  889404     MOV W4, CntMigStop
27934:                         OC3R=((unsigned int)KeyLightBrightness)<<8;
01DFD0  22FAE4     MOV #0x2FAE, W4
01DFD2  784214     MOV.B [W4], W4
01DFD4  FB8204     ZE W4, W4
01DFD6  DD2248     SL W4, #8, W4
01DFD8  8848D4     MOV W4, OC3R
01DFDA  370003     BRA 0x1DFE2
27935:                     }
27936:                         
27937:                     }
27938:                 }
27939:             }
01DFE2  FA8000     ULNK
01DFE4  060000     RETURN
27940:             
27941:             
27942:             
27943:             
27944:             
27945:             void CriticalErrorLed(void)
27946:             {
01DFE6  FA0000     LNK #0x0
27947:                 
27948:                 
27949:                 switch (CriticalErrorLedStateMachine)
01DFE8  22FAD4     MOV #0x2FAD, W4
01DFEA  784214     MOV.B [W4], W4
01DFEC  FB8204     ZE W4, W4
01DFEE  DEA2CF     ASR W4, #15, W5
01DFF0  200036     MOV #0x3, W6
01DFF2  200007     MOV #0x0, W7
01DFF4  520F86     SUB W4, W6, [W15]
01DFF6  5A8F87     SUBB W5, W7, [W15]
01DFF8  3E0047     BRA GTU, 0x1E088
01DFFA  010604     BRA W4
01DFFC  370003     BRA 0x1E004
01DFFE  370012     BRA 0x1E024
01E000  37001B     BRA 0x1E038
01E002  370033     BRA 0x1E06A
27950:                 {
27951:                     case 0:
27952:                         if (CriticalError)
01E004  214074     MOV #0x1407, W4
01E006  784214     MOV.B [W4], W4
01E008  524FE0     SUB.B W4, #0x0, [W15]
01E00A  320037     BRA Z, 0x1E07A
27953:                         {
27954:                             CriticalErrorLedStateMachine=1;
01E00C  22FAD5     MOV #0x2FAD, W5
01E00E  B3C014     MOV.B #0x1, W4
01E010  784A84     MOV.B W4, [W5]
27955:                             CntCriticalErrorLed=CriticalError-1;
01E012  214074     MOV #0x1407, W4
01E014  784214     MOV.B [W4], W4
01E016  E94204     DEC.B W4, W4
01E018  22FAC5     MOV #0x2FAC, W5
01E01A  784A84     MOV.B W4, [W5]
27956:                             ALARM_LED=1;
01E01C  A8AE65     BSET 0xE65, #5
27957:                             MODE_LED_Cnt=100;
01E01E  200644     MOV #0x64, W4
01E020  897D84     MOV W4, MODE_LED_Cnt
27958:                         }
27959:                         break;
01E022  370032     BRA 0x1E088
01E07A  000000     NOP
01E07C  370005     BRA 0x1E088
27960:                     case 1:
27961:                         if (MODE_LED_Cnt)
01E024  817D84     MOV MODE_LED_Cnt, W4
01E026  520FE0     SUB W4, #0x0, [W15]
01E028  3A002A     BRA NZ, 0x1E07E
27962:                             return;
01E07E  000000     NOP
01E080  370003     BRA 0x1E088
27963:                         ALARM_LED=0;
01E02A  A9AE65     BCLR 0xE65, #5
27964:                         MODE_LED_Cnt=150;
01E02C  200964     MOV #0x96, W4
01E02E  897D84     MOV W4, MODE_LED_Cnt
27965:                         CriticalErrorLedStateMachine=2;
01E030  22FAD5     MOV #0x2FAD, W5
01E032  B3C024     MOV.B #0x2, W4
01E034  784A84     MOV.B W4, [W5]
27966:                         break;
01E036  370028     BRA 0x1E088
27967:                     case 2:
27968:                         if (MODE_LED_Cnt)
01E038  817D84     MOV MODE_LED_Cnt, W4
01E03A  520FE0     SUB W4, #0x0, [W15]
01E03C  3A0022     BRA NZ, 0x1E082
27969:                             return;
01E082  000000     NOP
01E084  370001     BRA 0x1E088
27970:                         if (CntCriticalErrorLed)
01E03E  22FAC4     MOV #0x2FAC, W4
01E040  784214     MOV.B [W4], W4
01E042  524FE0     SUB.B W4, #0x0, [W15]
01E044  32000C     BRA Z, 0x1E05E
27971:                         {
27972:                             CntCriticalErrorLed--;
01E046  22FAC4     MOV #0x2FAC, W4
01E048  784214     MOV.B [W4], W4
01E04A  E94204     DEC.B W4, W4
01E04C  22FAC5     MOV #0x2FAC, W5
01E04E  784A84     MOV.B W4, [W5]
27973:                             CriticalErrorLedStateMachine=1;
01E050  22FAD5     MOV #0x2FAD, W5
01E052  B3C014     MOV.B #0x1, W4
01E054  784A84     MOV.B W4, [W5]
27974:                             ALARM_LED=1;
01E056  A8AE65     BSET 0xE65, #5
27975:                             MODE_LED_Cnt=100;
01E058  200644     MOV #0x64, W4
01E05A  897D84     MOV W4, MODE_LED_Cnt
27976:                         }
27977:                         else
27978:                         {
27979:                             MODE_LED_Cnt=500;
01E05E  201F44     MOV #0x1F4, W4
01E060  897D84     MOV W4, MODE_LED_Cnt
27980:                             CriticalErrorLedStateMachine=3;
01E062  22FAD5     MOV #0x2FAD, W5
01E064  B3C034     MOV.B #0x3, W4
01E066  784A84     MOV.B W4, [W5]
27981:                         }
27982:                         
27983:                         
27984:                         
27985:                         break;
01E05C  370015     BRA 0x1E088
01E068  37000F     BRA 0x1E088
27986:                     case 3:
27987:                            if (MODE_LED_Cnt)
01E06A  817D84     MOV MODE_LED_Cnt, W4
01E06C  520FE0     SUB W4, #0x0, [W15]
01E06E  3A000B     BRA NZ, 0x1E086
27988:                             return;
01E086  000000     NOP
27989:                            CriticalErrorLedStateMachine=0;
01E070  22FAD5     MOV #0x2FAD, W5
01E072  EB4200     CLR.B W4
01E074  784A84     MOV.B W4, [W5]
27990:                            break;
01E076  000000     NOP
01E078  370007     BRA 0x1E088
27991:             
27992:                 }
27993:                 
27994:                 
27995:               
27996:             }
01E088  FA8000     ULNK
01E08A  060000     RETURN
27997:             
27998:             
27999:             
28000:             void WheelingFunc(void)
28001:             {
01E08C  FA0000     LNK #0x0
28002:                     switch (WheelingStateMachine)
01E08E  230364     MOV #0x3036, W4
01E090  784214     MOV.B [W4], W4
01E092  FB8204     ZE W4, W4
01E094  DEA2CF     ASR W4, #15, W5
01E096  200046     MOV #0x4, W6
01E098  200007     MOV #0x0, W7
01E09A  520F86     SUB W4, W6, [W15]
01E09C  5A8F87     SUBB W5, W7, [W15]
01E09E  3E00AD     BRA GTU, 0x1E1FA
01E0A0  010604     BRA W4
01E0A2  3700A8     BRA 0x1E1F4
01E0A4  370003     BRA 0x1E0AC
01E0A6  37002B     BRA 0x1E0FE
01E0A8  37004A     BRA 0x1E13E
01E0AA  370075     BRA 0x1E196
28003:                     {
28004:                         case 0:
28005:                             break;
01E1F4  000000     NOP
01E1F6  370001     BRA 0x1E1FA
28006:                         case 1:
28007:                             if (!Monocycle)
01E0AC  809745     MOV StatFlgs, W5
01E0AE  280004     MOV #0x8000, W4
01E0B0  628204     AND W5, W4, W4
01E0B2  520FE0     SUB W4, #0x0, [W15]
01E0B4  3A0020     BRA NZ, 0x1E0F6
28008:                             {
28009:                             NoBalance=0;
01E0B6  8095E4     MOV Flgs, W4
01E0B8  A1B004     BCLR W4, #11
01E0BA  8895E4     MOV W4, Flgs
28010:                             SoundNum=1;
01E0BC  2124B5     MOV #0x124B, W5
01E0BE  B3C014     MOV.B #0x1, W4
01E0C0  784A84     MOV.B W4, [W5]
28011:                             //ESumm=((float)PWM1Temp)/Ki;
28012:                             PWM1TempPreWheeling=PWM1Temp;
01E0C2  821854     MOV PWM1Temp, W4
01E0C4  821865     MOV 0x430C, W5
01E0C6  8A1874     MOV W4, PWM1TempPreWheeling
01E0C8  8A1885     MOV W5, 0x4310
28013:                             Monocycle=1;
01E0CA  809744     MOV StatFlgs, W4
01E0CC  A0F004     BSET W4, #15
01E0CE  889744     MOV W4, StatFlgs
28014:                             NoBalance=1;
01E0D0  8095E4     MOV Flgs, W4
01E0D2  A0B004     BSET W4, #11
01E0D4  8895E4     MOV W4, Flgs
28015:                             WheelingNew=1;
01E0D6  8096D4     MOV 0x12DA, W4
01E0D8  A03004     BSET W4, #3
01E0DA  8896D4     MOV W4, 0x12DA
28016:                           
28017:                             ESumm=0;
01E0DC  B82260     MUL.UU W4, #0, W4
01E0DE  889B84     MOV W4, ESumm
01E0E0  889B95     MOV W5, 0x1372
28018:                             TiltZadAddMustBe=0;
01E0E2  B82260     MUL.UU W4, #0, W4
01E0E4  895654     MOV W4, TiltZadAddMustBe
01E0E6  895665     MOV W5, 0x2ACC
28019:                             StrongMode=1;
01E0E8  8095F4     MOV 0x12BE, W4
01E0EA  A0E004     BSET W4, #14
01E0EC  8895F4     MOV W4, 0x12BE
28020:             
28021:                             
28022:                             
28023:                             
28024:                             WheelingStateMachine=2;
01E0EE  230365     MOV #0x3036, W5
01E0F0  B3C024     MOV.B #0x2, W4
01E0F2  784A84     MOV.B W4, [W5]
28025:                             }
28026:                             else
28027:                                 WheelingStateMachine=0;
01E0F6  230365     MOV #0x3036, W5
01E0F8  EB4200     CLR.B W4
01E0FA  784A84     MOV.B W4, [W5]
28028:                             break;
01E0F4  370082     BRA 0x1E1FA
01E0FC  37007E     BRA 0x1E1FA
28029:                         case 2:
28030:                             if (NoBalance)
01E0FE  8095E5     MOV Flgs, W5
01E100  208004     MOV #0x800, W4
01E102  628204     AND W5, W4, W4
01E104  520FE0     SUB W4, #0x0, [W15]
01E106  320017     BRA Z, 0x1E136
28031:                             {
28032:                             PWM1Temp=PWM1TempPreWheeling;
01E108  821874     MOV PWM1TempPreWheeling, W4
01E10A  821885     MOV 0x4310, W5
01E10C  8A1854     MOV W4, PWM1Temp
01E10E  8A1865     MOV W5, 0x430C
28033:                             
28034:                    //                         SpeedControl=1;
28035:                      //                       ECurr1Summ=0;
28036:                        //                     CurrentControlOnly=0;
28037:                             
28038:                  //                           SpeedControl=1;
28039:                                             ECurr1Summ=0;
01E110  B82260     MUL.UU W4, #0, W4
01E112  89F564     MOV W4, ECurr1Summ
01E114  89F575     MOV W5, 0x3EAE
28040:                                             ESumm=((float)PWM1Temp)/Ki;
01E116  821854     MOV PWM1Temp, W4
01E118  821865     MOV 0x430C, W5
01E11A  BE0004     MOV.D W4, W0
01E11C  02257C     CALL ___floatsisf
01E11E  000000     NOP
01E120  BE0300     MOV.D W0, W6
01E122  809B04     MOV Ki, W4
01E124  809B15     MOV 0x1362, W5
01E126  BE0104     MOV.D W4, W2
01E128  BE0006     MOV.D W6, W0
01E12A  02245A     CALL ___divsf3
01E12C  000000     NOP
01E12E  BE0200     MOV.D W0, W4
01E130  889B84     MOV W4, ESumm
01E132  889B95     MOV W5, 0x1372
28041:                //                             CurrentControlOnly=1;
28042:                             }
28043:                             else
28044:                                 WheelingStateMachine=3;
01E136  230365     MOV #0x3036, W5
01E138  B3C034     MOV.B #0x3, W4
01E13A  784A84     MOV.B W4, [W5]
28045:                             
28046:                             break;
01E134  370062     BRA 0x1E1FA
01E13C  37005E     BRA 0x1E1FA
28047:                             
28048:                         case 3:
28049:                             if (NoBalance)
01E13E  8095E5     MOV Flgs, W5
01E140  208004     MOV #0x800, W4
01E142  628204     AND W5, W4, W4
01E144  520FE0     SUB W4, #0x0, [W15]
01E146  320058     BRA Z, 0x1E1F8
28050:                             {
28051:                                 if (StrongModeMem)
01E148  809764     MOV StatFlgs2, W4
01E14A  620264     AND W4, #0x4, W4
01E14C  520FE0     SUB W4, #0x0, [W15]
01E14E  320004     BRA Z, 0x1E158
28052:                                     StrongMode=1;
01E150  8095F4     MOV 0x12BE, W4
01E152  A0E004     BSET W4, #14
01E154  8895F4     MOV W4, 0x12BE
01E156  370003     BRA 0x1E15E
28053:                                 else
28054:                                     StrongMode=0;
01E158  8095F4     MOV 0x12BE, W4
01E15A  A1E004     BCLR W4, #14
01E15C  8895F4     MOV W4, 0x12BE
28055:                                 
28056:                                 Monocycle=0;
01E15E  809744     MOV StatFlgs, W4
01E160  A1F004     BCLR W4, #15
01E162  889744     MOV W4, StatFlgs
28057:                                 NoBalance=1;
01E164  8095E4     MOV Flgs, W4
01E166  A0B004     BSET W4, #11
01E168  8895E4     MOV W4, Flgs
28058:                                 ECurr1Summ=0;
01E16A  B82260     MUL.UU W4, #0, W4
01E16C  89F564     MOV W4, ECurr1Summ
01E16E  89F575     MOV W5, 0x3EAE
28059:                                 ESumm=0;
01E170  B82260     MUL.UU W4, #0, W4
01E172  889B84     MOV W4, ESumm
01E174  889B95     MOV W5, 0x1372
28060:                                 WheelingNew=0;
01E176  8096D4     MOV 0x12DA, W4
01E178  A13004     BCLR W4, #3
01E17A  8896D4     MOV W4, 0x12DA
28061:                                 WheelingStateMachine=0;
01E17C  230365     MOV #0x3036, W5
01E17E  EB4200     CLR.B W4
01E180  784A84     MOV.B W4, [W5]
28062:                                 LeftTurn=0;
01E182  809694     MOV 0x12D2, W4
01E184  A1C004     BCLR W4, #12
01E186  889694     MOV W4, 0x12D2
28063:                                 RightTurn=0;
01E188  809694     MOV 0x12D2, W4
01E18A  A1D004     BCLR W4, #13
01E18C  889694     MOV W4, 0x12D2
28064:                                 SoundNum=10;
01E18E  2124B5     MOV #0x124B, W5
01E190  B3C0A4     MOV.B #0xA, W4
01E192  784A84     MOV.B W4, [W5]
28065:             
28066:                             }
28067:                             break;
01E194  370032     BRA 0x1E1FA
01E1F8  000000     NOP
28068:                         case 4:
28069:                             if (WheelingNew)
01E196  8096D4     MOV 0x12DA, W4
01E198  620268     AND W4, #0x8, W4
01E19A  520FE0     SUB W4, #0x0, [W15]
01E19C  320027     BRA Z, 0x1E1EC
28070:                             {
28071:                                 if (StrongModeMem)
01E19E  809764     MOV StatFlgs2, W4
01E1A0  620264     AND W4, #0x4, W4
01E1A2  520FE0     SUB W4, #0x0, [W15]
01E1A4  320004     BRA Z, 0x1E1AE
28072:                                     StrongMode=1;
01E1A6  8095F4     MOV 0x12BE, W4
01E1A8  A0E004     BSET W4, #14
01E1AA  8895F4     MOV W4, 0x12BE
01E1AC  370003     BRA 0x1E1B4
28073:                                 else
28074:                                     StrongMode=0;
01E1AE  8095F4     MOV 0x12BE, W4
01E1B0  A1E004     BCLR W4, #14
01E1B2  8895F4     MOV W4, 0x12BE
28075:                                 
28076:                                 Monocycle=0;
01E1B4  809744     MOV StatFlgs, W4
01E1B6  A1F004     BCLR W4, #15
01E1B8  889744     MOV W4, StatFlgs
28077:                                 NoBalance=1;
01E1BA  8095E4     MOV Flgs, W4
01E1BC  A0B004     BSET W4, #11
01E1BE  8895E4     MOV W4, Flgs
28078:                                 ECurr1Summ=0;
01E1C0  B82260     MUL.UU W4, #0, W4
01E1C2  89F564     MOV W4, ECurr1Summ
01E1C4  89F575     MOV W5, 0x3EAE
28079:                                 WheelingNew=0;
01E1C6  8096D4     MOV 0x12DA, W4
01E1C8  A13004     BCLR W4, #3
01E1CA  8896D4     MOV W4, 0x12DA
28080:                                 ESumm=0;
01E1CC  B82260     MUL.UU W4, #0, W4
01E1CE  889B84     MOV W4, ESumm
01E1D0  889B95     MOV W5, 0x1372
28081:                                 LeftTurn=0;
01E1D2  809694     MOV 0x12D2, W4
01E1D4  A1C004     BCLR W4, #12
01E1D6  889694     MOV W4, 0x12D2
28082:                                 RightTurn=0;
01E1D8  809694     MOV 0x12D2, W4
01E1DA  A1D004     BCLR W4, #13
01E1DC  889694     MOV W4, 0x12D2
28083:                                 WheelingStateMachine=0;
01E1DE  230365     MOV #0x3036, W5
01E1E0  EB4200     CLR.B W4
01E1E2  784A84     MOV.B W4, [W5]
28084:                                 SoundNum=10;
01E1E4  2124B5     MOV #0x124B, W5
01E1E6  B3C0A4     MOV.B #0xA, W4
01E1E8  784A84     MOV.B W4, [W5]
28085:                             }
28086:                             else
28087:                                 WheelingStateMachine=0;
01E1EC  230365     MOV #0x3036, W5
01E1EE  EB4200     CLR.B W4
01E1F0  784A84     MOV.B W4, [W5]
28088:                             break;
01E1EA  370007     BRA 0x1E1FA
01E1F2  370003     BRA 0x1E1FA
28089:                     }
28090:             }
01E1FA  FA8000     ULNK
01E1FC  060000     RETURN
28091:             
28092:             
28093:             
28094:             
28095:             
28096:             void InitOC1(void)
28097:             {
01E1FE  FA0000     LNK #0x0
28098:             OC1CON1=0;
01E200  EB0200     CLR W4
01E202  884804     MOV W4, OC1CON1
28099:             OC1CON2=0;
01E204  EB0200     CLR W4
01E206  884814     MOV W4, OC1CON2
28100:             OC1CON1bits.OCTSEL = 0x07;
01E208  804804     MOV OC1CON1, W4
01E20A  A0A004     BSET W4, #10
01E20C  A0B004     BSET W4, #11
01E20E  A0C004     BSET W4, #12
01E210  884804     MOV W4, OC1CON1
28101:             OC1R = 0;
01E212  EB0200     CLR W4
01E214  884834     MOV W4, OC1R
28102:             OC1RS = 0xffff;
01E216  EB8200     SETM W4
01E218  884824     MOV W4, OC1RS
28103:             OC1CON2bits.SYNCSEL = 0x1F;
01E21A  804814     MOV OC1CON2, W4
01E21C  B301F4     IOR #0x1F, W4
01E21E  884814     MOV W4, OC1CON2
28104:             OC1CON1bits.OCM = 6;
01E220  804804     MOV OC1CON1, W4
01E222  A10004     BCLR W4, #0
01E224  A01004     BSET W4, #1
01E226  A02004     BSET W4, #2
01E228  884804     MOV W4, OC1CON1
28105:             
28106:             /*
28107:             
28108:             
28109:             OC1CON1bits.OCSIDL=1;
28110:             OC1R=1;
28111:             OC1RS=2;//Min -> 2   Max -> 8007
28112:             OC1CON2bits.OCTRIG=1;
28113:             
28114:             IEC0bits.OC1IE=0;//????????? ??????????
28115:             IPC0bits.OC1IP=2;
28116:             
28117:             OC1CON2bits.SYNCSEL=0xd;
28118:             OC1CON1bits.TRIGMODE=1;
28119:             OC1CON1bits.OCM=7;//3;
28120:              */
28121:             
28122:             
28123:             RPOR2bits.RP68R=0b010000;
01E22A  803425     MOV RPOR2, W5
01E22C  2FFC04     MOV #0xFFC0, W4
01E22E  628204     AND W5, W4, W4
01E230  A04004     BSET W4, #4
01E232  883424     MOV W4, RPOR2
28124:             
28125:             
28126:             
28127:             IEC0bits.OC1IE=0;//????????? ??????????
01E234  A94820     BCLR IEC0, #2
28128:             //IPC0bits.OC1IP=2;
28129:             
28130:             
28131:              
28132:             }
01E236  FA8000     ULNK
01E238  060000     RETURN
28133:             
28134:             
28135:             void __attribute__((interrupt, auto_psv)) _OC1Interrupt()
28136:             {
01E23A  781F84     MOV W4, [W15++]
01E23C  F80032     PUSH DSRPAG
01E23E  202004     MOV #0x200, W4
01E240  880194     MOV W4, DSRPAG
01E242  000000     NOP
01E244  FA0000     LNK #0x0
28137:             if (IFS0bits.OC1IF)
01E246  804004     MOV IFS0, W4
01E248  620264     AND W4, #0x4, W4
01E24A  520FE0     SUB W4, #0x0, [W15]
01E24C  320001     BRA Z, 0x1E250
28138:             IFS0bits.OC1IF=0;
01E24E  A94800     BCLR IFS0, #2
28139:             //IEC1bits.OC4IE=0;
28140:             //RightPort=!RightPort;
28141:             }
01E250  FA8000     ULNK
01E252  F90032     POP DSRPAG
01E254  78024F     MOV [--W15], W4
01E256  064000     RETFIE
28142:             
28143:             
28144:             void InitOC2(void)
28145:             {
01E258  FA0000     LNK #0x0
28146:             OC2CON1=0;
01E25A  EB0200     CLR W4
01E25C  884854     MOV W4, OC2CON1
28147:             OC2CON2=0;
01E25E  EB0200     CLR W4
01E260  884864     MOV W4, OC2CON2
28148:             OC2CON1bits.OCTSEL = 0x07;
01E262  804854     MOV OC2CON1, W4
01E264  A0A004     BSET W4, #10
01E266  A0B004     BSET W4, #11
01E268  A0C004     BSET W4, #12
01E26A  884854     MOV W4, OC2CON1
28149:             OC2R = 0;
01E26C  EB0200     CLR W4
01E26E  884884     MOV W4, OC2R
28150:             OC2RS = 0xffff;
01E270  EB8200     SETM W4
01E272  884874     MOV W4, OC2RS
28151:             OC2CON2bits.SYNCSEL = 0x1F;
01E274  804864     MOV OC2CON2, W4
01E276  B301F4     IOR #0x1F, W4
01E278  884864     MOV W4, OC2CON2
28152:             OC2CON1bits.OCM = 6;
01E27A  804854     MOV OC2CON1, W4
01E27C  A10004     BCLR W4, #0
01E27E  A01004     BSET W4, #1
01E280  A02004     BSET W4, #2
01E282  884854     MOV W4, OC2CON1
28153:             
28154:             
28155:             
28156:             RPOR2bits.RP69R=0b010001;
01E284  803425     MOV RPOR2, W5
01E286  2C0FF4     MOV #0xC0FF, W4
01E288  628284     AND W5, W4, W5
01E28A  211004     MOV #0x1100, W4
01E28C  728204     IOR W5, W4, W4
01E28E  883424     MOV W4, RPOR2
28157:             
28158:             
28159:             
28160:             IEC0bits.OC2IE=0;//????????? ??????????
01E290  A9C820     BCLR IEC0, #6
28161:             IPC1bits.OC2IP=2;
01E292  804214     MOV IPC1, W4
01E294  A18004     BCLR W4, #8
01E296  A09004     BSET W4, #9
01E298  A1A004     BCLR W4, #10
01E29A  884214     MOV W4, IPC1
28162:             
28163:             
28164:              
28165:             }
01E29C  FA8000     ULNK
01E29E  060000     RETURN
28166:             
28167:             void InitOC3(void)
28168:             {
01E2A0  FA0000     LNK #0x0
28169:             OC3CON1=0;
01E2A2  EB0200     CLR W4
01E2A4  8848A4     MOV W4, OC3CON1
28170:             OC3CON2=0;
01E2A6  EB0200     CLR W4
01E2A8  8848B4     MOV W4, OC3CON2
28171:             OC3CON1bits.OCTSEL = 0x07;
01E2AA  8048A4     MOV OC3CON1, W4
01E2AC  A0A004     BSET W4, #10
01E2AE  A0B004     BSET W4, #11
01E2B0  A0C004     BSET W4, #12
01E2B2  8848A4     MOV W4, OC3CON1
28172:             OC3R = 0;
01E2B4  EB0200     CLR W4
01E2B6  8848D4     MOV W4, OC3R
28173:             OC3RS = 0xffff;
01E2B8  EB8200     SETM W4
01E2BA  8848C4     MOV W4, OC3RS
28174:             OC3CON2bits.SYNCSEL = 0x1F;
01E2BC  8048B4     MOV OC3CON2, W4
01E2BE  B301F4     IOR #0x1F, W4
01E2C0  8848B4     MOV W4, OC3CON2
28175:             OC3CON1bits.OCM = 6;
01E2C2  8048A4     MOV OC3CON1, W4
01E2C4  A10004     BCLR W4, #0
01E2C6  A01004     BSET W4, #1
01E2C8  A02004     BSET W4, #2
01E2CA  8848A4     MOV W4, OC3CON1
28176:             
28177:             
28178:             
28179:             RPOR7bits.RP97R=0b010010;
01E2CC  803475     MOV RPOR7, W5
01E2CE  2C0FF4     MOV #0xC0FF, W4
01E2D0  628284     AND W5, W4, W5
01E2D2  212004     MOV #0x1200, W4
01E2D4  728204     IOR W5, W4, W4
01E2D6  883474     MOV W4, RPOR7
28180:             
28181:             
28182:             
28183:             IEC1bits.OC3IE=0;//????????? ??????????
01E2D8  A92823     BCLR 0x823, #1
28184:             IPC6bits.OC3IP=2;
01E2DA  804264     MOV IPC6, W4
01E2DC  A14004     BCLR W4, #4
01E2DE  A05004     BSET W4, #5
01E2E0  A16004     BCLR W4, #6
01E2E2  884264     MOV W4, IPC6
28185:             
28186:             
28187:              
28188:             }
01E2E4  FA8000     ULNK
01E2E6  060000     RETURN
